/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: afsvl_data.h,v $
 * Revision 65.2  1999/02/04 19:19:38  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:20:06  jdoak
 * *** empty log message ***
 *
 * $EndLog$
 */

/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef afsvl_data_v0_0_included
#define afsvl_data_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef common_data_v0_0_included
#include <dcedfs/common_data.h>
#endif
#define MAXFTNAMELEN (112)
#define MAXNSERVERS (16)
#define MAXTYPES (3)
#define MAXVOLTYPES (8)
#define MAXKPRINCIPALLEN (64)
#define MAXLOCKNAMELEN (64)
#define ADDRSINSITE (4)
#define MAXBULKLEN (25)
#define MAXVLCELLCHARS (128)
#define MAXVLHOSTCHARS (64)
#define MAXVLHOSTSPERCELL (64)
typedef struct  {
idl_byte hstnam[64];
} hostnam;
typedef struct vlconf_cell {
idl_byte name[128];
/* Type must appear in user header or IDL */ afs_hyper_t CellID;
unsigned32 numServers;
afsNetAddr hostAddr[64];
hostnam hostName[64];
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
} vlconf_cell;
typedef struct  {
idl_byte text[64];
} kerb_princ_name;
typedef struct vldbentry {
idl_byte name[112];
unsigned32 volumeType;
unsigned32 nServers;
afsNetAddr siteAddr[16];
unsigned32 sitePartition[16];
unsigned32 siteFlags[16];
unsigned32 sitemaxReplicaLatency[16];
kerb_princ_name sitePrincipal[16];
afsUUID siteOwner[16];
afsUUID siteObjID[16];
/* Type must appear in user header or IDL */ afs_hyper_t VolIDs[8];
unsigned32 VolTypes[8];
/* Type must appear in user header or IDL */ afs_hyper_t cloneId;
unsigned32 flags;
unsigned32 maxTotalLatency;
unsigned32 hardMaxTotalLatency;
unsigned32 minimumPounceDally;
unsigned32 defaultMaxReplicaLatency;
unsigned32 reclaimDally;
unsigned32 WhenLocked;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
idl_byte LockerName[64];
idl_byte charSpares[50];
} vldbentry;
#define VLAUTHN_MINLCLLEVEL (0)
#define VLAUTHN_MAXLCLLEVEL (1)
#define VLAUTHN_MINRMTLEVEL (2)
#define VLAUTHN_MAXRMTLEVEL (3)
#define VLF_RWEXISTS (4096)
#define VLF_ROEXISTS (8192)
#define VLF_BACKEXISTS (16384)
#define VLF_LAZYREP (32768)
#define VLF_LAZYRELE (65536)
#define VLSF_NEWREPSITE (1)
#define VLSF_SAMEASPREV (16)
#define VLSF_DEFINED (32)
#define VLSF_PARTIALADDRS (64)
#define VLSF_ZEROIXHERE (-2147483648)
typedef struct compactvldbentry {
idl_byte name[112];
unsigned32 volumeType;
unsigned32 nServers;
unsigned32 siteCookies[16];
unsigned32 sitePartition[16];
unsigned32 siteFlags[16];
unsigned32 sitemaxReplicaLatency[16];
/* Type must appear in user header or IDL */ afs_hyper_t VolIDs[8];
unsigned32 VolTypes[8];
/* Type must appear in user header or IDL */ afs_hyper_t cloneId;
unsigned32 flags;
unsigned32 maxTotalLatency;
unsigned32 hardMaxTotalLatency;
unsigned32 minimumPounceDally;
unsigned32 defaultMaxReplicaLatency;
unsigned32 reclaimDally;
unsigned32 WhenLocked;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
idl_byte LockerName[64];
idl_byte charSpares[50];
} compactvldbentry;
typedef struct siteDesc {
afsNetAddr Addr[4];
idl_byte KerbPrin[64];
afsUUID Owner;
afsUUID ObjID;
unsigned32 CreationQuota;
unsigned32 CreationUses;
unsigned32 DeletedFlag;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
} siteDesc;
typedef idl_byte volumeName[112];

#ifdef __cplusplus
    }

#endif
#endif
