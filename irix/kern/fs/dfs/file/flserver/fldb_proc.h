/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: fldb_proc.h,v $
 * Revision 65.2  1999/02/04 19:19:38  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:20:07  jdoak
 * *** empty log message ***
 *
 * Revision 1.1.9.1  1996/10/02  17:46:06  damon
 * 	Newest DFS from Transarc
 * 	[1996/10/01  18:37:02  damon]
 *
 * Revision 1.1.4.1  1994/06/09  14:07:12  annie
 * 	fixed copyright in src/file
 * 	[1994/06/09  13:22:19  annie]
 * 
 * Revision 1.1.2.5  1993/01/21  19:34:23  zeliff
 * 	Embedding copyright notices
 * 	[1993/01/19  19:47:59  zeliff]
 * 
 * Revision 1.1.2.4  1992/11/24  17:01:51  bolinger
 * 	Change include file install directory from .../afs to .../dcedfs.
 * 	[1992/11/22  17:57:00  bolinger]
 * 
 * Revision 1.1.2.3  1992/09/15  13:12:47  jaffe
 * 	Transarc delta: vijay-ot4824-multiple-ubik-servers-fail-to-startup 1.3
 * 	  Selected comments:
 * 
 * 	    Problems were detected when multiple ubik servers were started up in a cell.
 * 	    This delta attempts to fix these bugs that prevent multiple ubik servers
 * 	    from running in a cell. Problems fixed are
 * 	    1. a hang in sec_id_parse_name was eliminated by removing unnecessary
 * 	    global locks (pthread_lock_global_np)
 * 	    2. ubik_Call routine cleaned up to handle all error cases. flserver RPC
 * 	    interface had to be changed to return the communication status as a
 * 	    return value instead of as a parameter.
 * 	    3. An error code was not returned if an invalid group is passed to ubik_
 * 	    ServerInit.
 * 	    Any other bugs noticed will be added to this delta. Not ready for release yet,
 * 	    upgrading before further changes are added.
 * 	    comm status as a return value instead of as a parameter
 * 	    After the upgrade, made changes to CM, PX, REP and fixed some typos in
 * 	    flserver and ubik. The changes are mainly to follow the new VL_ RPC
 * 	    signature.
 * 	    cleaned up bad merge.
 * 	[1992/09/14  19:38:08  jaffe]
 * 
 * Revision 1.1.2.2  1992/08/31  19:43:09  jaffe
 * 	Transarc delta: cfe-ot4029-portable-rpc-data-types 1.2
 * 	  Selected comments:
 * 	    If ``long'' could possibly mean ``64 bits'' any time soon, we need to keep
 * 	    our RPC interfaces from breaking.
 * 	    see above
 * 	    More of the same.  Forgot a couple of .idl files, and needed to change
 * 	    a couple of procedure signatures to match.
 * 	[1992/08/30  02:20:10  jaffe]
 * 
 * Revision 1.1  1992/01/19  02:48:50  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */

/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef VL__v4_0_included
#define VL__v4_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef fldb_data_v0_0_included
#include <dcedfs/fldb_data.h>
#endif
extern error_status_t VL_GetEntryByID(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [out] */ vldbentry *entry
#endif
);
extern error_status_t VL_GetEntryByName(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [out] */ vldbentry *entry
#endif
);
extern error_status_t VL_Probe(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h
#endif
);
extern error_status_t VL_GetCellInfo(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ vlconf_cell *MyCell
#endif
);
extern error_status_t VL_GetNextServersByID(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ vldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
extern error_status_t VL_GetNextServersByName(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ vldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
extern error_status_t VL_GetSiteInfo(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [out] */ siteDesc *FullSiteInfo
#endif
);
extern error_status_t VL_GetCEntryByID(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [out] */ compactvldbentry *entry
#endif
);
extern error_status_t VL_GetCEntryByName(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [out] */ compactvldbentry *entry
#endif
);
extern error_status_t VL_GetCNextServersByID(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ compactvldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
extern error_status_t VL_GetCNextServersByName(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ compactvldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
extern error_status_t VL_ExpandSiteCookie(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 Cookie,
    /* [out] */ siteDesc *FullSiteInfo
#endif
);
extern error_status_t VL_GetServerInterfaces(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in, out] */ dfs_interfaceList *serverInterfacesP
#endif
);
extern error_status_t VL_CreateEntry(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ vldbentry *newentry
#endif
);
extern error_status_t VL_DeleteEntry(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype
#endif
);
extern error_status_t VL_GetNewVolumeId(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 bumpcount,
    /* [in] */ afsNetAddr *ServerAddr,
    /* [out] */ /* Type must appear in user header or IDL */ afs_hyper_t *newvolumeid
#endif
);
extern error_status_t VL_ReplaceEntry(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ vldbentry *newentry,
    /* [in] */ unsigned32 ReleaseType
#endif
);
extern error_status_t VL_SetLock(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 voloper
#endif
);
extern error_status_t VL_ReleaseLock(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 ReleaseType
#endif
);
extern error_status_t VL_ListEntry(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 previous_index,
    /* [out] */ unsigned32 *count,
    /* [out] */ unsigned32 *next_index,
    /* [out] */ vldbentry *entry
#endif
);
extern error_status_t VL_ListByAttributes(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ VldbListByAttributes *attributes,
    /* [in] */ unsigned32 cookie,
    /* [out] */ unsigned32 *nentries,
    /* [out] */ bulkentries *blkentries,
    /* [out] */ unsigned32 *nextCookieP,
    /* [out] */ unsigned32 *flags
#endif
);
extern error_status_t VL_GetStats(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ vldstats *stats,
    /* [out] */ vital_vlheader *vital_header
#endif
);
extern error_status_t VL_AddAddress(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [in] */ afsNetAddr *AddrToAdd
#endif
);
extern error_status_t VL_RemoveAddress(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *AddrToRemove
#endif
);
extern error_status_t VL_ChangeAddress(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [in] */ afsNetAddr *NewAddr
#endif
);
extern error_status_t VL_GenerateSites(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ bulkSites *TheseSites,
    /* [out] */ unsigned32 *nSites
#endif
);
extern error_status_t VL_GetNewVolumeIds(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 numWanted,
    /* [in] */ afsNetAddr *ServerAddr,
    /* [out] */ bulkIDs *newIDs
#endif
);
extern error_status_t VL_CreateServer(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ siteDesc *FullSiteInfo
#endif
);
extern error_status_t VL_AlterServer(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *Addr,
    /* [in] */ siteAlter *Attrs
#endif
);
typedef struct VL__v4_0_epv_t {
error_status_t (*VL_GetEntryByID)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [out] */ vldbentry *entry
#endif
);
error_status_t (*VL_GetEntryByName)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [out] */ vldbentry *entry
#endif
);
error_status_t (*VL_Probe)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h
#endif
);
error_status_t (*VL_GetCellInfo)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ vlconf_cell *MyCell
#endif
);
error_status_t (*VL_GetNextServersByID)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ vldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
error_status_t (*VL_GetNextServersByName)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ vldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
error_status_t (*VL_GetSiteInfo)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [out] */ siteDesc *FullSiteInfo
#endif
);
error_status_t (*VL_GetCEntryByID)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [out] */ compactvldbentry *entry
#endif
);
error_status_t (*VL_GetCEntryByName)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [out] */ compactvldbentry *entry
#endif
);
error_status_t (*VL_GetCNextServersByID)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ compactvldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
error_status_t (*VL_GetCNextServersByName)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ volumeName volName,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ compactvldbentry *entry,
    /* [out] */ unsigned32 *flagsP
#endif
);
error_status_t (*VL_ExpandSiteCookie)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 Cookie,
    /* [out] */ siteDesc *FullSiteInfo
#endif
);
error_status_t (*VL_GetServerInterfaces)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in, out] */ dfs_interfaceList *serverInterfacesP
#endif
);
error_status_t (*VL_CreateEntry)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ vldbentry *newentry
#endif
);
error_status_t (*VL_DeleteEntry)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype
#endif
);
error_status_t (*VL_GetNewVolumeId)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 bumpcount,
    /* [in] */ afsNetAddr *ServerAddr,
    /* [out] */ /* Type must appear in user header or IDL */ afs_hyper_t *newvolumeid
#endif
);
error_status_t (*VL_ReplaceEntry)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ vldbentry *newentry,
    /* [in] */ unsigned32 ReleaseType
#endif
);
error_status_t (*VL_SetLock)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 voloper
#endif
);
error_status_t (*VL_ReleaseLock)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ /* Type must appear in user header or IDL */ afs_hyper_t *Volid,
    /* [in] */ unsigned32 voltype,
    /* [in] */ unsigned32 ReleaseType
#endif
);
error_status_t (*VL_ListEntry)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 previous_index,
    /* [out] */ unsigned32 *count,
    /* [out] */ unsigned32 *next_index,
    /* [out] */ vldbentry *entry
#endif
);
error_status_t (*VL_ListByAttributes)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ VldbListByAttributes *attributes,
    /* [in] */ unsigned32 cookie,
    /* [out] */ unsigned32 *nentries,
    /* [out] */ bulkentries *blkentries,
    /* [out] */ unsigned32 *nextCookieP,
    /* [out] */ unsigned32 *flags
#endif
);
error_status_t (*VL_GetStats)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ vldstats *stats,
    /* [out] */ vital_vlheader *vital_header
#endif
);
error_status_t (*VL_AddAddress)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [in] */ afsNetAddr *AddrToAdd
#endif
);
error_status_t (*VL_RemoveAddress)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *AddrToRemove
#endif
);
error_status_t (*VL_ChangeAddress)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *OldAddr,
    /* [in] */ afsNetAddr *NewAddr
#endif
);
error_status_t (*VL_GenerateSites)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 startHere,
    /* [out] */ unsigned32 *nextStartP,
    /* [out] */ bulkSites *TheseSites,
    /* [out] */ unsigned32 *nSites
#endif
);
error_status_t (*VL_GetNewVolumeIds)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 numWanted,
    /* [in] */ afsNetAddr *ServerAddr,
    /* [out] */ bulkIDs *newIDs
#endif
);
error_status_t (*VL_CreateServer)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ siteDesc *FullSiteInfo
#endif
);
error_status_t (*VL_AlterServer)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ afsNetAddr *Addr,
    /* [in] */ siteAlter *Attrs
#endif
);
} VL__v4_0_epv_t;
extern rpc_if_handle_t VL__v4_0_c_ifspec;
extern rpc_if_handle_t VL__v4_0_s_ifspec;

#ifdef __cplusplus
    }

#else
#endif
#endif
