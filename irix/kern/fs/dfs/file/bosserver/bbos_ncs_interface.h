/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: bbos_ncs_interface.h,v $
 * Revision 65.2  1999/02/04 19:19:37  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:19:31  jdoak
 * *** empty log message ***
 *
 * Revision 1.1.12.1  1996/10/02  17:03:53  damon
 * 	Newest DFS from Transarc
 * 	[1996/10/01  18:04:49  damon]
 *
 * Revision 1.1.6.1  1994/06/09  13:52:03  annie
 * 	fixed copyright in src/file
 * 	[1994/06/08  21:25:41  annie]
 * 
 * Revision 1.1.4.6  1993/01/18  19:55:19  cjd
 * 	Embedded copyright notice
 * 	[1993/01/18  19:31:12  cjd]
 * 
 * Revision 1.1.4.5  1993/01/13  15:53:06  shl
 * 	Transarc delta: cfe-ot6054-genl-and-i18n-spares 1.1
 * 	  Selected comments:
 * 	    Add spares to several RPC structures, with two goals:
 * 	    - general future usage
 * 	    - allow for at least some internationalization designs
 * 	    The only tricky part of this work is that the on-the-wire representation for
 * 	    directory contents is expanded.
 * 	[1993/01/12  18:34:58  shl]
 * 
 * Revision 1.1.4.4  1992/11/24  15:40:26  bolinger
 * 	Change include file install directory from .../afs to .../dcedfs.
 * 	[1992/11/22  16:08:17  bolinger]
 * 
 * Revision 1.1.4.3  1992/10/27  20:08:46  jaffe
 * 	Transarc delta: bab-ot5471-bbos-uninstall-all 1.2
 * 	  Selected comments:
 * 	    The bos command and bosserver will now support a -all flag for
 * 	    removing all versions of the specified file.
 * 	    ot 5471
 * 	    Added flag to uninstall interface.
 * 	    Cosmetic cleanup.
 * 	    Make sure flags are unsigned.
 * 	Transarc delta: bab-ot5474-bbos-report-noauth 1.1
 * 	  Selected comments:
 * 	    Changes to make the bosserver report the authorization checking status
 * 	    of the machine on which it is running and to make the bos command make
 * 	    use of that information.
 * 	    ot 5474
 * 	    Added overall server status RPC interface, BOSSVR_GetServerStatus.
 * 	Transarc delta: bab-ot5475-bbos-dacl-clearlist 1.2
 * 	  Selected comments:
 * 	    Added support for a -clearlist option to the bos command, without
 * 	    actually activating it inthe user interface.
 * 	    ot 5475
 * 	    Changed the binary options in the addadmin and remove admin commands to
 * 	    be general flags.
 * 	    Needed to handle cases in which clearlist may have been specified
 * 	    alone or with more than one user or group.
 * 	[1992/10/27  13:55:00  jaffe]
 * 
 * Revision 1.1.4.2  1992/08/31  18:23:49  jaffe
 * 	Transarc delta: bab-ot4755-bbos-remove-exec 1.1
 * 	  Selected comments:
 * 	    Removed bosserver exec funcitionality and the bos command that invokes it.
 * 	    ot 4755
 * 	    See above.
 * 	Transarc delta: cfe-ot4029-portable-rpc-data-types 1.2
 * 	  Selected comments:
 * 	    If ``long'' could possibly mean ``64 bits'' any time soon, we need to keep
 * 	    our RPC interfaces from breaking.
 * 	    see above
 * 	    More of the same.  Forgot a couple of .idl files, and needed to change
 * 	    a couple of procedure signatures to match.
 * 	[1992/08/28  20:47:10  jaffe]
 * 
 * Revision 1.1.2.2  1992/04/14  03:02:42  mason
 * 	Removed references to bos salvage in bos and the bosserver,
 * 	put references to bos setdebug in appropriate ifdefs (but
 * 	it is always a part of the bosserver interface, it just will
 * 	return BZNOTIMPL if it hasn't been activated) and some general
 * 	code cleanup.
 * 	Remove dead code and remove BOSSVR_ServerPlaceHolder from the interface
 * 	since it serves no useful prupose any longer.
 * 	OT 2194
 * 	[1992/04/10  21:48:56  mason]
 * 
 * Revision 1.1  1992/01/19  02:49:38  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */
/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef BOSSVR_v0_0_included
#define BOSSVR_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef common_data_v0_0_included
#include <dcedfs/common_data.h>
#endif
#define BOSSVR_BSSIZE (256)
typedef struct bossvr_netKTime {
signed32 mask;
signed16 hour;
signed16 min;
signed16 sec;
signed16 day;
signed16 spare1;
signed16 spare2;
} bossvr_netKTime;
typedef struct bossvr_key {
idl_byte data[8];
} bossvr_key;
typedef struct bossvr_keyInfo {
signed32 mod_sec;
signed32 mod_usec;
unsigned32 keyCheckSum;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
} bossvr_keyInfo;
typedef struct bossvr_status {
signed32 goal;
signed32 fileGoal;
signed32 procStartTime;
signed32 procStarts;
signed32 lastAnyExit;
signed32 lastErrorExit;
signed32 errorCode;
signed32 errorSignal;
unsigned32 flags;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
unsigned32 spare6;
unsigned32 spare7;
unsigned32 spare8;
} bossvr_status;
#define BOSSVR_HASCORE (1)
#define BOSSVR_ERRORSTOP (2)
#define BOSSVR_BADDIRACCESS (1)
#define BOSSVR_SERVER_NOAUTH (2)
#define BOSSVR_PRUNEOLD (1)
#define BOSSVR_PRUNEBAK (2)
#define BOSSVR_PRUNECORE (4)
#define BOSSVR_UNINSTALL_ALL (1)
#define BOSSVR_ADDADMIN_CREATELIST (1)
#define BOSSVR_RMADMIN_REMOVELIST (1)
#define BOSSVR_RMADMIN_CLEARLIST (2)
typedef struct bossvr_out_string {
unsigned32 strLen;
idl_char *theString;
} bossvr_out_string;
extern signed32 BOSSVR_GetServerStatus(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ unsigned32 *serverStatusP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_CreateBnode(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char type[256],
    /* [in] */ idl_char instance[256],
    /* [in] */ idl_char p1[256],
    /* [in] */ idl_char p2[256],
    /* [in] */ idl_char p3[256],
    /* [in] */ idl_char p4[256],
    /* [in] */ idl_char p5[256],
    /* [in] */ idl_char p6[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_DeleteBnode(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_SetStatus(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetStatus(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ signed32 *intStat,
    /* [out] */ bossvr_out_string *statdescrP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_EnumerateInstance(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 instanceNum,
    /* [out] */ bossvr_out_string *inameP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetInstanceInfo(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ bossvr_out_string *typeP,
    /* [out] */ struct bossvr_status *status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetInstanceParm(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 num,
    /* [out] */ bossvr_out_string *parmP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_AddSUser(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ idl_char typeStr[256],
    /* [in] */ idl_char name[256],
    /* [in] */ idl_char permsStr[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_DeleteSUser(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ idl_char typeStr[256],
    /* [in] */ idl_char name[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_ListSUsers(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ signed32 an,
    /* [out] */ bossvr_out_string *nameP,
    /* [out] */ bossvr_out_string *typeStrP,
    /* [out] */ bossvr_out_string *permStrP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_ListKeys(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 an,
    /* [out] */ signed32 *kvno,
    /* [out] */ struct bossvr_key *key,
    /* [out] */ struct bossvr_keyInfo *keyinfo,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_AddKey(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [in] */ idl_char passwdP[256],
    /* [in] */ signed32 localOnly,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_DeleteKey(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GenerateKey(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GarbageCollectKeys(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetCellName(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ bossvr_out_string *nameP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_SetTStatus(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_ShutdownAll(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_RestartAll(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_StartupAll(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_SetNoAuthFlag(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 flag,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_ReBossvr(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_Restart(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_Install(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [in] */ signed32 size,
    /* [in] */ unsigned32 flags,
    /* [in] */ signed32 date,
    /* [in] */ pipe_t *thePipeP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_UnInstall(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetDates(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [out] */ signed32 *newtime,
    /* [out] */ signed32 *baktime,
    /* [out] */ signed32 *oldtime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_Prune(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_SetRestartTime(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 type,
    /* [in] */ struct bossvr_netKTime *restartTime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetRestartTime(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 type,
    /* [out] */ struct bossvr_netKTime *restartTime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetLog(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char name[256],
    /* [out] */ pipe_t *thePipeP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_WaitAll(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_SetDebug(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 *newDebugValP,
    /* [out] */ signed32 *longDebugValP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
extern signed32 BOSSVR_GetServerInterfaces(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in, out] */ dfs_interfaceList *serverInterfacesP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
typedef struct BOSSVR_v0_0_epv_t {
signed32 (*BOSSVR_GetServerStatus)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ unsigned32 *serverStatusP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_CreateBnode)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char type[256],
    /* [in] */ idl_char instance[256],
    /* [in] */ idl_char p1[256],
    /* [in] */ idl_char p2[256],
    /* [in] */ idl_char p3[256],
    /* [in] */ idl_char p4[256],
    /* [in] */ idl_char p5[256],
    /* [in] */ idl_char p6[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_DeleteBnode)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_SetStatus)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetStatus)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ signed32 *intStat,
    /* [out] */ bossvr_out_string *statdescrP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_EnumerateInstance)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 instanceNum,
    /* [out] */ bossvr_out_string *inameP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetInstanceInfo)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ bossvr_out_string *typeP,
    /* [out] */ struct bossvr_status *status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetInstanceParm)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 num,
    /* [out] */ bossvr_out_string *parmP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_AddSUser)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ idl_char typeStr[256],
    /* [in] */ idl_char name[256],
    /* [in] */ idl_char permsStr[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_DeleteSUser)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ idl_char typeStr[256],
    /* [in] */ idl_char name[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_ListSUsers)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char filename[256],
    /* [in] */ signed32 an,
    /* [out] */ bossvr_out_string *nameP,
    /* [out] */ bossvr_out_string *typeStrP,
    /* [out] */ bossvr_out_string *permStrP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_ListKeys)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 an,
    /* [out] */ signed32 *kvno,
    /* [out] */ struct bossvr_key *key,
    /* [out] */ struct bossvr_keyInfo *keyinfo,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_AddKey)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [in] */ idl_char passwdP[256],
    /* [in] */ signed32 localOnly,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_DeleteKey)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GenerateKey)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [in] */ signed32 kvno,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GarbageCollectKeys)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char prinNameP[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetCellName)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ bossvr_out_string *nameP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_SetTStatus)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [in] */ signed32 status,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_ShutdownAll)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_RestartAll)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_StartupAll)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_SetNoAuthFlag)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 flag,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_ReBossvr)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_Restart)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char instance[256],
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_Install)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [in] */ signed32 size,
    /* [in] */ unsigned32 flags,
    /* [in] */ signed32 date,
    /* [in] */ pipe_t *thePipeP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_UnInstall)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetDates)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char path[256],
    /* [out] */ signed32 *newtime,
    /* [out] */ signed32 *baktime,
    /* [out] */ signed32 *oldtime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_Prune)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ unsigned32 flags,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_SetRestartTime)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 type,
    /* [in] */ struct bossvr_netKTime *restartTime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetRestartTime)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 type,
    /* [out] */ struct bossvr_netKTime *restartTime,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetLog)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ idl_char name[256],
    /* [out] */ pipe_t *thePipeP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_WaitAll)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_SetDebug)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in] */ signed32 *newDebugValP,
    /* [out] */ signed32 *longDebugValP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
signed32 (*BOSSVR_GetServerInterfaces)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t bosserverBinding,
    /* [in, out] */ dfs_interfaceList *serverInterfacesP,
    /* [out] */ error_status_t *theCommStatus
#endif
);
} BOSSVR_v0_0_epv_t;
extern rpc_if_handle_t BOSSVR_v0_0_c_ifspec;
extern rpc_if_handle_t BOSSVR_v0_0_s_ifspec;

#ifdef __cplusplus
    }

#else
#endif
#endif
