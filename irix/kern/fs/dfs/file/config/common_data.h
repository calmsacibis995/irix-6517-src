/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: common_data.h,v $
 * Revision 65.2  1999/02/04 19:19:37  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:21:48  jdoak
 * *** empty log message ***
 *
 * Revision 1.1.63.1  1996/10/02  17:14:36  damon
 * 	Newest DFS from Transarc
 * 	[1996/10/01  18:06:32  damon]
 *
 * $EndLog$
 */
/*
 *      Copyright (C) 1996, 1991 Transarc Corporation
 *      All rights reserved.
 */

/*
 *
 *     The Common Data Structures Required for AFS (4.0) Client/Server
 *
 */

/* $Header: /proj/irix6.5.7m/isms/irix/kern/fs/dfs/file/config/RCS/common_data.h,v 65.2 1999/02/04 19:19:37 mek Exp $ */

/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef common_data_v0_0_included
#define common_data_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dcedfs/local_64bit_types.h>
#include <dcedfs/common_def.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#define AFS_UNDEFAFSID (-1)
#define AFS_NAMEMAX (256)
#define AFS_PATHMAX (1024)
#define AFS_TOKENDEAD (1235)
#define AFS_ACLMAX (8188)
#define AFS_BULKMAX (32)
#define AFS_DISKNAMESIZE (32)
#define AFS_NAMEMAXLEN (112)
#define MAXCELLCHARS (128)
#define MAXHOSTCHARS (128)
#define MAXHOSTSPERCELL (64)
#define Invalid (0)
#define File (1)
#define Directory (2)
#define SymbolicLink (3)
#define MountPoint (4)
#define FIFO (5)
#define Socket (6)
#define BlockDev (7)
#define CharDev (8)
#define FETCHSTATUS_VERSION (2)
#define AFS_FILESYS_BSD (1)
#define AFS_FILESYS_EPISODE (2)
#define AFS_QUOTA_GET (1)
#define AFS_QUOTA_SET (2)
#define AFS_FS (0)
#define DEC_FS (1)
#define UFS_FS (2)
#define AIX_FS (4)
#define ReadOnly (0)
#define ReadWrite (1)
#define AFS_REVOKE_COL_A_VALID (1)
#define AFS_REVOKE_COL_B_VALID (2)
#define AFS_REVOKE_FORCED_REVOCATION (4)
#define AFS_REVOKE_DUE_TO_GC (8)
#define AFS_REVOKE_LOCKDATA_VALID (1)
typedef uuid_t afsUUID;
typedef idl_long_int afsFStype;
typedef idl_long_int afsVolumeType;
typedef struct pipe_t {
void (IDL_ENTRY * pull)(
#ifdef IDL_PROTOTYPES
rpc_ss_pipe_state_t state,
idl_byte *buf,
idl_ulong_int esize,
idl_ulong_int *ecount
#endif
);
void (IDL_ENTRY * push)(
#ifdef IDL_PROTOTYPES
rpc_ss_pipe_state_t state,
idl_byte *buf,
idl_ulong_int  ecount
#endif
);
void (IDL_ENTRY * alloc)(
#ifdef IDL_PROTOTYPES
rpc_ss_pipe_state_t state,
idl_ulong_int bsize,
idl_byte **buf,
idl_ulong_int *bcount
#endif
);
rpc_ss_pipe_state_t state;
} pipe_t;
typedef unsigned32 codesetTag;
#define AFS_TAG_ORIGASCII (0)
typedef idl_byte NameString_t[256];
typedef idl_byte PathString_t[1024];
typedef idl_byte afsDiskName[32];
typedef struct afsTaggedName {
codesetTag tn_tag;
unsigned16 tn_length;
idl_byte tn_chars[257];
} afsTaggedName;
typedef struct afsTaggedPath {
codesetTag tp_tag;
unsigned16 tp_length;
idl_byte tp_chars[1025];
} afsTaggedPath;
typedef struct afsNetAddr {
unsigned16 type;
unsigned8 data[14];
} afsNetAddr;
typedef struct afsTimeval {
unsigned32 sec;
unsigned32 usec;
} afsTimeval;
typedef struct afsHyper {
unsigned32 high;
unsigned32 low;
} afsHyper;
typedef struct afsFid {
/* Type must appear in user header or IDL */ afs_hyper_t Cell;
/* Type must appear in user header or IDL */ afs_hyper_t Volume;
unsigned32 Vnode;
unsigned32 Unique;
} afsFid;
typedef struct afsFidTaggedName {
afsFid fid;
afsTaggedName name;
} afsFidTaggedName;
typedef struct afsToken {
/* Type must appear in user header or IDL */ afs_hyper_t tokenID;
unsigned32 expirationTime;
/* Type must appear in user header or IDL */ afs_hyper_t type;
unsigned32 beginRange;
unsigned32 endRange;
unsigned32 beginRangeExt;
unsigned32 endRangeExt;
} afsToken;
typedef struct afsRecordLock {
signed16 l_type;
signed16 l_whence;
unsigned32 l_start_pos;
unsigned32 l_end_pos;
unsigned32 l_pid;
unsigned32 l_sysid;
unsigned32 l_fstype;
unsigned32 l_start_pos_ext;
unsigned32 l_end_pos_ext;
} afsRecordLock;
typedef struct afsRevokeDesc {
afsFid fid;
/* Type must appear in user header or IDL */ afs_hyper_t tokenID;
/* Type must appear in user header or IDL */ afs_hyper_t type;
unsigned32 flags;
unsigned32 outFlags;
/* Type must appear in user header or IDL */ afs_hyper_t errorIDs;
/* Type must appear in user header or IDL */ afs_token_t columnA;
/* Type must appear in user header or IDL */ afs_hyper_t colAChoice;
/* Type must appear in user header or IDL */ afs_token_t columnB;
/* Type must appear in user header or IDL */ afs_hyper_t colBChoice;
/* Type must appear in user header or IDL */ afs_recordLock_t recordLock;
} afsRevokeDesc;
typedef struct afsReturnDesc {
afsFid fid;
/* Type must appear in user header or IDL */ afs_hyper_t tokenID;
/* Type must appear in user header or IDL */ afs_hyper_t type;
unsigned32 flags;
} afsReturnDesc;
typedef struct afsConnParams {
unsigned32 Mask;
unsigned32 Values[20];
} afsConnParams;
#define AFS_CONN_PARAM_HOSTLIFE (0)
#define AFS_CONN_PARAM_HOSTRPC (1)
#define AFS_CONN_PARAM_DEADSERVER (2)
#define AFS_CONN_PARAM_EPOCH (3)
#define AFS_CONN_PARAM_MAXFILE_CLIENT (4)
#define AFS_CONN_PARAM_MAXFILE_SERVER (5)
#define AFS_CONN_PARAM_HOST_TYPE_CLIENT (6)
#define AFS_CONN_PARAM_HOST_TYPE_SERVER (7)
#define AFS_CONN_PARAM_FT_MASK_CLIENT (8)
#define AFS_CONN_PARAM_FT_MASK_SERVER (9)
#define AFS_CONN_PARAM_SUPPORTS_64BITS (65536)
typedef struct afsDBLockDesc {
unsigned8 waitStates;
unsigned8 exclLocked;
unsigned8 readersReading;
unsigned8 numWaiting;
} afsDBLockDesc;
typedef struct afsDBCacheEntry {
unsigned32 addr;
afsFid fid;
/* Type must appear in user header or IDL */ afs_hyper_t length;
/* Type must appear in user header or IDL */ afs_hyper_t dataVersion;
afsDBLockDesc lock;
unsigned32 tokenBaseID;
unsigned32 tokenMask;
unsigned32 tokenExpiration;
signed16 refCount;
signed16 opens;
signed16 writers;
signed16 readers;
signed16 shareds;
signed16 exclusives;
unsigned8 mvstat;
unsigned8 states;
} afsDBCacheEntry;
typedef struct afsDBLock {
idl_byte name[16];
afsDBLockDesc lock;
} afsDBLock;
typedef struct afsRevokes {
idl_long_int afsRevokes_len;
afsRevokeDesc afsRevokes_val[32];
} afsRevokes;
typedef struct afsReturns {
idl_long_int afsReturns_len;
afsReturnDesc afsReturns_val[32];
} afsReturns;
typedef struct afsFids {
unsigned32 afsFids_len;
afsFid afsFids_val[32];
} afsFids;
typedef struct afsTokens {
unsigned32 afsTokens_len;
/* Type must appear in user header or IDL */ afs_token_t afsTokens[32];
} afsTokens;
typedef struct afsStrings {
unsigned32 afsStrings_len;
afsTaggedName afsStrings_val[32];
} afsStrings;
#define MAXSPARETEXT (50)
#define MAXINTERFACESPERVERSION (10)
typedef struct dfs_interfaceDescription {
uuid_t interface_uuid;
unsigned16 vers_major;
unsigned16 vers_minor;
unsigned32 vers_provider;
unsigned32 spare0;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
unsigned32 spare6;
unsigned32 spare7;
unsigned32 spare8;
unsigned32 spare9;
idl_byte spareText[50];
} dfs_interfaceDescription;
typedef struct dfs_interfaceList {
unsigned32 dfs_interfaceList_len;
dfs_interfaceDescription dfs_interfaceList_val[10];
} dfs_interfaceList;
void IDL_ENTRY afsHyper_from_local(
#ifdef IDL_PROTOTYPES
afs_hyper_t *local_object,
afsHyper **net_object
#endif
);
void IDL_ENTRY afsHyper_to_local(
#ifdef IDL_PROTOTYPES
afsHyper *net_object,
afs_hyper_t *local_object
#endif
);
void IDL_ENTRY afsHyper_free_local(
#ifdef IDL_PROTOTYPES
afs_hyper_t *local_object
#endif
);
void IDL_ENTRY afsHyper_free_inst(
#ifdef IDL_PROTOTYPES
afsHyper *net_object
#endif
);
void IDL_ENTRY afsToken_from_local(
#ifdef IDL_PROTOTYPES
afs_token_t *local_object,
afsToken **net_object
#endif
);
void IDL_ENTRY afsToken_to_local(
#ifdef IDL_PROTOTYPES
afsToken *net_object,
afs_token_t *local_object
#endif
);
void IDL_ENTRY afsToken_free_local(
#ifdef IDL_PROTOTYPES
afs_token_t *local_object
#endif
);
void IDL_ENTRY afsToken_free_inst(
#ifdef IDL_PROTOTYPES
afsToken *net_object
#endif
);
void IDL_ENTRY afsRecordLock_from_local(
#ifdef IDL_PROTOTYPES
afs_recordLock_t *local_object,
afsRecordLock **net_object
#endif
);
void IDL_ENTRY afsRecordLock_to_local(
#ifdef IDL_PROTOTYPES
afsRecordLock *net_object,
afs_recordLock_t *local_object
#endif
);
void IDL_ENTRY afsRecordLock_free_local(
#ifdef IDL_PROTOTYPES
afs_recordLock_t *local_object
#endif
);
void IDL_ENTRY afsRecordLock_free_inst(
#ifdef IDL_PROTOTYPES
afsRecordLock *net_object
#endif
);

#ifdef __cplusplus
    }

#endif
#endif
