/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1994 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE for
 * the full copyright text.
 */
/*
 * HISTORY
 * $Log: ftserver_data.h,v $
 * Revision 65.2  1999/02/04 19:19:40  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:20:09  jdoak
 * *** empty log message ***
 *
 * $EndLog$
 */

/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef ftserver_data_v0_0_included
#define ftserver_data_v0_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef common_data_v0_0_included
#include <dcedfs/common_data.h>
#endif
#define FTSERVER_MAXPRINNAME (256)
typedef struct ftserver_dest {
afsNetAddr address;
unsigned32 destSSID;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
idl_byte prinName[256];
} ftserver_dest;
typedef struct ftserver_Date {
unsigned32 mask;
afsTimeval fromDate;
/* Type must appear in user header or IDL */ afs_hyper_t fromVersion;
/* Type must appear in user header or IDL */ afs_hyper_t spare1;
/* Type must appear in user header or IDL */ afs_hyper_t spare2;
/* Type must appear in user header or IDL */ afs_hyper_t spare3;
} ftserver_Date;
#define FTSERVER_MAXFSNAME (112)
#define FTSERVER_RESTORE_FORCE_PRESERVE (1)
#define FTSERVER_RESTORE_DISJOINT_OK (4)
typedef struct ftserver_status_static {
/* Type must appear in user header or IDL */ afs_hyper_t volId;
/* Type must appear in user header or IDL */ afs_hyper_t parentId;
afsTimeval cloneTime;
afsTimeval vvCurrentTime;
afsTimeval vvPingCurrentTime;
unsigned32 type;
unsigned32 accStatus;
unsigned32 accError;
unsigned32 states;
unsigned32 reclaimDally;
unsigned32 tokenTimeout;
unsigned32 activeVnops;
unsigned32 volMoveTimeout;
unsigned32 static_spare4;
unsigned32 static_spare5;
unsigned32 static_spare6;
unsigned32 static_spare7;
unsigned32 static_spare8;
unsigned32 static_spare9;
idl_byte volName[112];
idl_byte concurrency;
idl_byte static_cspares[15];
} ftserver_status_static;
typedef struct ftserver_status_dynamic {
afsTimeval creationDate;
afsTimeval updateDate;
afsTimeval accessDate;
afsTimeval backupDate;
afsTimeval copyDate;
/* Type must appear in user header or IDL */ afs_hyper_t volversion;
/* Type must appear in user header or IDL */ afs_hyper_t backupId;
/* Type must appear in user header or IDL */ afs_hyper_t cloneId;
/* Type must appear in user header or IDL */ afs_hyper_t llBackId;
/* Type must appear in user header or IDL */ afs_hyper_t llFwdId;
/* Type must appear in user header or IDL */ afs_hyper_t allocLimit;
/* Type must appear in user header or IDL */ afs_hyper_t allocUsage;
/* Type must appear in user header or IDL */ afs_hyper_t visQuotaLimit;
/* Type must appear in user header or IDL */ afs_hyper_t visQuotaUsage;
unsigned32 fileCount;
unsigned32 minQuota;
unsigned32 owner;
unsigned32 unique;
unsigned32 index;
unsigned32 rwindex;
unsigned32 backupIndex;
unsigned32 parentIndex;
unsigned32 cloneIndex;
unsigned32 nodeMax;
unsigned32 dynamic_spare1;
unsigned32 dynamic_spare2;
unsigned32 dynamic_spare3;
unsigned32 dynamic_spare4;
unsigned32 dynamic_spare5;
unsigned32 dynamic_spare6;
codesetTag tag;
unsigned32 msgLen;
idl_byte statusMsg[128];
idl_byte dynamic_cspares[16];
} ftserver_status_dynamic;
typedef struct ftserver_status {
ftserver_status_static vss;
ftserver_status_dynamic vsd;
} ftserver_status;
typedef struct ftserver_transStatus {
unsigned32 transId;
unsigned32 aggrId;
/* Type must appear in user header or IDL */ afs_hyper_t volId;
unsigned32 vDesc;
unsigned32 lastTime;
afsTimeval creationTime;
unsigned32 returnCode;
unsigned32 states;
unsigned32 refCount;
unsigned32 accStatus;
unsigned32 accError;
/* Type must appear in user header or IDL */ afs_hyper_t baseType;
afsNetAddr callerAddr;
unsigned32 flags;
unsigned32 spare0;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
} ftserver_transStatus;
typedef struct ftserver_aggrList {
idl_byte name[32];
idl_byte dvname[32];
unsigned32 Id;
unsigned32 type;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
} ftserver_aggrList;
typedef struct ftserver_aggrInfo {
idl_byte name[32];
idl_byte devName[32];
unsigned32 type;
unsigned32 totalUsable;
unsigned32 curFree;
unsigned32 minFree;
unsigned32 spare1;
unsigned32 spare2;
unsigned32 spare3;
unsigned32 spare4;
unsigned32 spare5;
unsigned32 spare6;
idl_byte cspare[64];
} ftserver_aggrInfo;
#define FTSERVER_MAXNAMELEN (255)
typedef idl_byte volNamep_string[255];
#define FTSERVER_MAXSTATENTRIES (10)
#define FTSERVER_MAXTRANSENTRIES (30)
#define FTSERVER_MAXAGGR (30)
typedef struct ftserver_statEntries {
unsigned32 ftserver_status_len;
ftserver_status ftserver_status_val[10];
} ftserver_statEntries;
typedef struct ftserver_transEntries {
unsigned32 ftserver_tranStatus_len;
ftserver_transStatus ftserver_transStatus_val[30];
} ftserver_transEntries;
typedef struct ftserver_aggrEntries {
unsigned32 ftserver_aggrList_len;
ftserver_aggrList ftserver_aggrEntries_val[30];
} ftserver_aggrEntries;
typedef struct ftserver_iterator {
unsigned32 index;
afsUUID uuid;
} ftserver_iterator;

#ifdef __cplusplus
    }

#endif
#endif
