/*
 * @OSF_COPYRIGHT@
 * COPYRIGHT NOTICE
 * Copyright (c) 1990, 1991, 1992, 1993, 1996 Open Software Foundation, Inc.
 * ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
 * src directory for the full copyright text.
 */
/*
 * HISTORY
 * $Log: ep.h,v $
 * Revision 65.2  1999/02/04 22:37:20  mek
 * Provide C style include file for IRIX kernel integration.
 *
 * Revision 65.1  1997/10/20 19:16:17  jdoak
 * *** empty log message ***
 *
 * Revision 1.1.4.2  1996/03/09  23:26:36  marty
 * 	Update OSF copyright year
 * 	[1996/03/09  22:42:09  marty]
 *
 * Revision 1.1.4.1  1995/12/08  00:23:07  root
 * 	Submit OSF/DCE 1.2.1
 * 	[1995/12/08  00:00:59  root]
 * 
 * Revision 1.1.2.3  1993/01/03  23:56:19  bbelch
 * 	Embedding copyright notice
 * 	[1993/01/03  20:14:49  bbelch]
 * 
 * Revision 1.1.2.2  1992/12/23  21:19:41  zeliff
 * 	Embedding copyright notice
 * 	[1992/12/23  15:46:30  zeliff]
 * 
 * Revision 1.1  1992/01/19  03:13:32  devrcs
 * 	Initial revision
 * 
 * $EndLog$
 */

/* Generated by IDL compiler version OSF DCE T1.2.0-09 */
#ifndef ept_v3_0_included
#define ept_v3_0_included
#ifndef IDLBASE_H
#include <dce/idlbase.h>
#endif
#include <dce/rpc.h>

#ifdef __cplusplus
    extern "C" {
#endif

#ifndef nbase_v0_0_included
#include <dce/nbase.h>
#endif
#ifndef rpctypes_v0_0_included
#include <dce/rpctypes.h>
#endif
#define ept_max_annotation_size (64)
typedef struct ept_v3_0_0_tag {
uuid_t object;
twr_p_t tower;
idl_char annotation[64];
} ept_entry_t;
typedef ept_entry_t *ept_entry_p_t;
typedef idl_void_p_t ept_lookup_handle_t;
extern void ept_insert(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 num_ents,
    /* [in] */ ept_entry_t entries[],
    /* [in] */ boolean32 replace,
    /* [out] */ error_status_t *status
#endif
);
extern void ept_delete(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 num_ents,
    /* [in] */ ept_entry_t entries[],
    /* [out] */ error_status_t *status
#endif
);
extern void ept_lookup(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 inquiry_type,
    /* [in] */ uuid_p_t object,
    /* [in] */ rpc_if_id_p_t interface_id,
    /* [in] */ unsigned32 vers_option,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [in] */ unsigned32 max_ents,
    /* [out] */ unsigned32 *num_ents,
    /* [out] */ ept_entry_t entries[],
    /* [out] */ error_status_t *status
#endif
);
extern void ept_map(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ uuid_p_t object,
    /* [in] */ twr_p_t map_tower,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [in] */ unsigned32 max_towers,
    /* [out] */ unsigned32 *num_towers,
    /* [out] */ twr_p_t towers[],
    /* [out] */ error_status_t *status
#endif
);
extern void ept_lookup_handle_free(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [out] */ error_status_t *status
#endif
);
extern void ept_inq_object(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ uuid_t *ept_object,
    /* [out] */ error_status_t *status
#endif
);
extern void ept_mgmt_delete(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ boolean32 object_speced,
    /* [in] */ uuid_p_t object,
    /* [in] */ twr_p_t tower,
    /* [out] */ error_status_t *status
#endif
);
void IDL_ENTRY ept_lookup_handle_t_rundown(
#ifdef IDL_PROTOTYPES
    rpc_ss_context_t context_handle
#endif
);
typedef struct ept_v3_0_epv_t {
void (*ept_insert)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 num_ents,
    /* [in] */ ept_entry_t entries[],
    /* [in] */ boolean32 replace,
    /* [out] */ error_status_t *status
#endif
);
void (*ept_delete)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 num_ents,
    /* [in] */ ept_entry_t entries[],
    /* [out] */ error_status_t *status
#endif
);
void (*ept_lookup)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ unsigned32 inquiry_type,
    /* [in] */ uuid_p_t object,
    /* [in] */ rpc_if_id_p_t interface_id,
    /* [in] */ unsigned32 vers_option,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [in] */ unsigned32 max_ents,
    /* [out] */ unsigned32 *num_ents,
    /* [out] */ ept_entry_t entries[],
    /* [out] */ error_status_t *status
#endif
);
void (*ept_map)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ uuid_p_t object,
    /* [in] */ twr_p_t map_tower,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [in] */ unsigned32 max_towers,
    /* [out] */ unsigned32 *num_towers,
    /* [out] */ twr_p_t towers[],
    /* [out] */ error_status_t *status
#endif
);
void (*ept_lookup_handle_free)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in, out] */ ept_lookup_handle_t *entry_handle,
    /* [out] */ error_status_t *status
#endif
);
void (*ept_inq_object)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [out] */ uuid_t *ept_object,
    /* [out] */ error_status_t *status
#endif
);
void (*ept_mgmt_delete)(
#ifdef IDL_PROTOTYPES
    /* [in] */ handle_t h,
    /* [in] */ boolean32 object_speced,
    /* [in] */ uuid_p_t object,
    /* [in] */ twr_p_t tower,
    /* [out] */ error_status_t *status
#endif
);
} ept_v3_0_epv_t;
extern ept_v3_0_epv_t ept_v3_0_c_epv;
extern rpc_if_handle_t ept_v3_0_c_ifspec;
extern rpc_if_handle_t ept_v3_0_s_ifspec;

#ifdef __cplusplus
    }

#else
#endif
#endif
