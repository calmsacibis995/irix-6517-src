/**************************************************************************
 *									  *
 * 		 Copyright (C) 1994-1995 Silicon Graphics, Inc.		  *
 *									  *
 *  These coded instructions, statements, and computer programs  contain  *
 *  unpublished  proprietary  information of Silicon Graphics, Inc., and  *
 *  are protected by Federal copyright law.  They  may  not be disclosed  *
 *  to  third  parties  or copied or duplicated in any form, in whole or  *
 *  in part, without the prior written consent of Silicon Graphics, Inc.  *
 *									  *
 **************************************************************************/

#ifndef	_KSYS_HANDLE_H_
#define	_KSYS_HANDLE_H_	1

#ifndef CELL
#error included by non-CELL configuration
#endif

#include <ksys/cell/service.h>
#include <ksys/behavior.h>
#include <ksys/kqueue.h>
#include <sys/sema.h>

/*
 * Object handles are remote object identifiers.  They are generated by the 
 * manager of the object being represented, and are in two parts - the 
 * service id of the manager and an object id within that manager.  The 
 * object id is commonly simply a pointer to the object in the address space 
 * of the manager. As the manager is the only one to intepret the fields of 
 * the handle, this is OK, providing no-one sends fake handles.
 */

typedef	void	*objid_t;

typedef struct {
	service_t	h_service;
	objid_t		h_objid;
} obj_handle_t;

#define HANDLE_MAKE(handle, service, objid)			\
	{							\
		(handle).h_service = service;			\
		(handle).h_objid = objid;			\
	}

#define HANDLE_MAKE_NULL(handle)	SERVICE_MAKE_NULL((handle).h_service)
#define HANDLE_IS_NULL(handle)		SERVICE_IS_NULL((handle).h_service)
#define	HANDLE_TO_SERVICE(handle)	((handle).h_service)
#define HANDLE_TO_OBJID(handle)		((handle).h_objid)
#define HANDLE_EQU(h1, h2)					\
        ((h1).h_objid == (h2).h_objid &&			\
	 SERVICE_EQUAL((h1).h_service, (h2).h_service))
	 

/*
 * Conversion macros for the common situation of a handle's object id
 * mapping to the behavior descriptor for the server-side distribution
 * behavior.
 */
#define BHV_TO_OBJID(bdp)	(objid_t)(bdp)
#define OBJID_TO_BHV(objid)	(bhv_desc_t *)(objid)

/*
 * Support for hash tables keyed by handles.
 */
typedef struct handle_hashtab {
	kqueue_t	hh_kqueue;	/* queue of entries for this bucket */
	lock_t		hh_lock;	/* spinlock protecting this bucket */
} handle_hashtab_t;

#define HANDLE_HASH_INDEX(objid, numbuckets)			\
        ((int)((__psunsigned_t) (objid) % (numbuckets)))

#endif	/* _KSYS_HANDLE_H_ */


