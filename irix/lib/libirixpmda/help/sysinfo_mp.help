#
# $Id: sysinfo_mp.help,v 1.13 1999/05/11 19:26:03 kenmcd Exp $
#

@ kernel.percpu.cpu.idle per processor idle CPU time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU idle time.  Note that this metric is derived
by point sampling the state of the currently executing process once
per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.idle.

@ kernel.percpu.cpu.intr per processor interrupt CPU time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent processing interrupts.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.intr.

@ kernel.percpu.cpu.sys per processor CPU kernel time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent executing below the system call interface
in the kernel (system mode).

Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.sys.

@ kernel.percpu.cpu.sxbrk per processor time spent waiting for memory resources
A count maintained for each processor, that accumulates the number of
milliseconds spent idle when there are processes blocked due to
depleted memory resources and there are no processes waiting for I/O.

Note that this metric is derived by point sampling the
state of the currently executing process once per tick of the system
clock.

@ kernel.percpu.cpu.user per processor user mode CPU time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent executing above the system call
interface in applications (user mode) on that processor.

Note that this metric is derived by point sampling the
state of the currently executing process once per tick of the system
clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.user.

@ kernel.percpu.cpu.wait.total per processor total CPU wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting for I/O, This metric is the
sum of the other kernel.percpu.cpu.wait.* metrics.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.total.

@ kernel.percpu.cpu.wait.gfxc per processor CPU graphics context switch wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting for graphics context switches.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.gfxc.

@ kernel.percpu.cpu.wait.gfxf per processor CPU graphics FIFO wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting on a full graphics FIFO.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.gfxf.

@ kernel.percpu.cpu.wait.io per processor CPU filesystem I/O wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting for filesystem I/O.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.io.

@ kernel.percpu.cpu.wait.pio per processor CPU physical (non-swap) I/O wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting for non-swap I/O to complete.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.pio.

@ kernel.percpu.cpu.wait.swap per processor CPU swap I/O wait time
A count maintained for each processor, that accumulates the number
of milliseconds of CPU time spent waiting for swap I/O to complete.
Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

For single processor systems the one value is the same as for the metric
kernel.all.cpu.wait.swap.

@ kernel.percpu.io.iget per processor number of inode lookups performed
A count maintained for each processor, that accumulates the number
of inode lookups performed.

For single processor systems the one value is the same as for the metric
kernel.all.io.iget.

@ kernel.percpu.io.bread per processor amount of data read from block devices
A count maintained for each processor, that accumulates the amount of
data read from block devices (Kilobytes).

For single processor systems the one value is the same as for the metric
kernel.all.io.bread.

@ kernel.percpu.io.bwrite per processor amount of data written to block devices
A count maintained for each processor, that accumulates the amount of
data written to block devices (Kilobytes).

For single processor systems the one value is the same as for the metric
kernel.all.io.bwrite.

@ kernel.percpu.io.lread Total logical read throughput (K)
A count maintained for each processor, that accumulates the amount of
data read from system buffers into user memory (Kilobytes)

For single processor systems the one value is the same as for the
metric kernel.all.io.lread

@ kernel.percpu.io.lwrite Total logical write throughput (K)
A count maintained for each processor, that accumulates the amount of
data written from system buffers into user memory (Kilobytes)

For single processor systems the one value is the same as for the
metric kernel.all.io.lwrite

@ kernel.percpu.io.phread Total physical I/O read throughput (K)
A count maintained for each processor, that accumulates the amount of
data read via raw (physical) devices (Kilobytes)

For single processor systems the one value is the same as for the
metric kernel.all.io.phread

@ kernel.percpu.io.phwrite Total physical I/O write throughput (K)
A count maintained for each processor, that accumulates the amount of data
written via raw (physical) devices (Kilobytes)

For single processor systems the one value is the same as for the metric
kernel.all.io.phwrite

@ kernel.percpu.io.wcancel Total data not written due to canceled writes (K)
A count maintained for each processor, that accumulates the amount of
data that was not written when pending writes were canceled (Kilobytes)

For single processor systems the one value is the same as for the
metric kernel.all.io.wcancel

@ kernel.percpu.io.namei Number of pathname lookups performed
A count maintained for each processor, that is the cumulative number of
of times pathnames have been translated to vnodes.

@ kernel.percpu.io.dirblk Kilobytes of directory blocks scanned
A count maintained for each processor, that is the cumulative number of
kilobytes of directory blocks scanned.

@ kernel.percpu.swap.swpocc Cumulative number of times swapped processes found to exist
A count maintained for each processor, that is the cumulative number of
times swapped processes were found to exist.

Note that this value is sampled and updated by the kernel only once per
second.

@ kernel.percpu.swap.swpque Cumulative sum of the length of the queue of swapped processes
A count maintained for each processor, that is the cumulative length of
the queue of swapped processes.

Note that this value is sampled and updated by the kernel only once per
second.

@ kernel.percpu.swap.in Cumulative "swap in" transfers
The cumulative number of swap I/O transfers (reads) from all swap
devices since system boot time where the swap operation was initiated
from a particular processor. Each transfer may involve one or more
pages (see also kernel.percpu.swap.pagesin).

For single processor systems the one value is the same as for
the metric swap.in.

@ kernel.percpu.swap.out Cumulative "swap out" transfers
The cumulative number of swap I/O transfers (writes) to all swap
devices since system boot time where the swap operation was initiated
from a particular processor. Each transfer may involve one or more
pages (see also kernel.percpu.swap.pagesout).

For single processor systems the one value is the same as for the
metric swap.out.

@ kernel.percpu.swap.pagesin Cumulative pages swapped in
The cumulative count of the number of pages transferred in from all
swap devices since system boot time where the swap operation was
initiated from a particular processor.

For single processor systems the one value is the same as for the
metric swap.pagesin.

@ kernel.percpu.swap.pagesout Cumulative pages swapped out
The cumulative count of the number of pages transferred out to all swap
devices since system boot time where the swap operation was initiated
from a particular processor.

For single processor systems the one value is the same as for the
metric swap.pagesout.

@ kernel.percpu.swap.procout Cumulative process swap outs
The cumulative number of process swap outs that have occurred since
system boot time where the swap operation was initiated from a
particular processor.

For single processor systems the one value is the same as for the
metric swap.procout.

@ kernel.percpu.pswitch per processor cumulative process switches
A count maintained for each processor, that is the cumulative number of
process (context) switches that have occurred.

For single processor systems the one value is the same as for the metric
kernel.all.pswitch.

@ kernel.percpu.readch per processor number of bytes transferred by the read() system call
A count maintained for each processor, that is the cumulative number of
bytes transferred by the read() system call.

For single processor systems the one value is the same as for the metric
kernel.all.readch.

@ kernel.percpu.runocc per processor number of times the "run queue" is non-zero
At each "clock tick" if the number of runnable processes (i.e.
processes on the "run queue") for this processor is non-zero, one
instance of this counter is incremented by one.

For single processor systems the one value is the same as for the
metric kernel.all.runocc.

@ kernel.percpu.runque per processor cumulative length of the queue of runnable processes
At each "clock tick" the number of runnable processes (i.e. processes
on the "run queue") for this processor is added to one instance of this
counter.

Over two consecutive samples the "average" run queue length for
processor I may be computed as
  if delta(kernel.percpu.runocc[I]) is zero
    zero
  else
    delta(kernel.percpu.runque[I]) / 
      delta(kernel.percpu.runocc[I])

For single processor systems the one value is the same as for the
metric kernel.all.runque.

Note that this value is sampled and updated by the kernel only once per
second.

@ kernel.percpu.syscall per processor number of system calls made
A count maintained for each processor, that accumulates the number of
system calls made.

For single processor systems the one value is the same as for the
metric kernel.all.syscall.

@ kernel.percpu.sysexec per processor number of exec() calls made
A count maintained for each processor, that accumulates the number of
exec() calls made.

For single processor systems the one value is the same as for the
metric kernel.all.sysexec.

@ kernel.percpu.sysfork per processor number of fork() calls made
A count maintained for each processor, that accumulates the number of
fork() calls made.

For single processor systems the one value is the same as for the
metric kernel.all.sysfork.

@ kernel.percpu.sysread per processor number of read() calls made
A count maintained for each processor, that accumulates the number of
read() calls made.

For single processor systems the one value is the same as for the metric
kernel.all.sysread.

@ kernel.percpu.syswrite per processor number of write() calls made
A count maintained for each processor, that accumulates the number of
write() calls made.

For single processor systems the one value is the same as for the metric
kernel.all.syswrite.

@ kernel.percpu.sysother per processor number of "other" system calls made 
A count maintained for each processor, that accumulates the number of
system calls (other than read(), write(), fork() and exec()) made.

For single processor systems the one value is the same as for the metric
kernel.all.sysother.

The provision of instrumentation for ioctl() calls (see
kernel.percpu.sysioctl) has caused a problem for the semantics of
"sysother". For compatibility with extant use, the semantics have not
been changed, so ioctl() calls are still counted in "sysother".

The use of kernel.percpu.sysother is deprecated as the semantic
issue is likely to re-appear in the future in the context of some other
newly instrumented system call.

@ kernel.percpu.writech per processor number of bytes transferred by the write() system call
A count maintained for each processor, that accumulates the number of
bytes transferred by the write() system call.

For single processor systems the one value is the same as for the metric
kernel.all.writech.

@ kernel.percpu.tty.recvintr per processor input interrupt count for serial devices
A count maintained for each processor, that accumulates the number of input
interrupts for serial devices

For single processor systems the one value is the same as for the metric
kernel.all.tty.recvintr

@ kernel.percpu.tty.xmitintr per processor output interrupt count for serial devices
A count maintained for each processor, that accumulates the number of output
interrupts for serial devices

For single processor systems the one value is the same as for the metric
kernel.all.tty.xmitintr

@ kernel.percpu.tty.mdmintr per processor modem control interrupt count for serial devices
A count maintained for each processor, that accumulates the number of modem
control interrupts for serial devices

For single processor systems the one value is the same as for the metric
kernel.all.tty.mdmintr

@ kernel.percpu.tty.out per processor count of characters output to serial devices
A count maintained for each processor, that accumulates the number of
characters output to serial devices

For single processor systems the one value is the same as for the metric
kernel.all.tty.out

@ kernel.percpu.tty.raw per processor count of "raw" characters received on serial lines
A count maintained for each processor, that accumulates the number of "raw"
characters received on serial lines

For single processor systems the one value is the same as for the metric
kernel.all.tty.raw

@ kernel.percpu.tty.canon per processor count of "canonical" characters received by the tty driver
A count maintained for each processor, that accumulates the number of
"canonical" characters received by the tty driver

For single processor systems the one value is the same as for the metric
kernel.all.tty.canon

@ kernel.percpu.intr.vme per processor count of VME interrupts
A count maintained for each processor, that accumulates the number of
VME interrupts processed.

For single processor systems the one value is the same as for the metric
kernel.all.intr.vme.

@ kernel.percpu.intr.non_vme per processor count of non-VME interrupts
A count maintained for each processor, that accumulates the number of
non-VME interrupts processed.

For single processor systems the one value is the same as for the metric
kernel.all.intr.non_vme.

@ kernel.percpu.ipc.msg per processor count of System V message operations
A count maintained for each processor, that accumulates the number of
System V message operations performed.

For single processor systems the one value is the same as for the metric
kernel.all.ipc.msg.

@ kernel.percpu.ipc.sema per processor count of System V semaphore operations
A count maintained for each processor, that accumulates the number of
System V semaphore operations performed.

For single processor systems the one value is the same as for the metric
kernel.all.ipc.sema.

@ kernel.percpu.pty.masterch per processor count of characters sent to pty master devices
A count maintained for each processor, that accumulates the number of
characters sent to pty master devices.

For single processor systems the one value is the same as for the metric
kernel.all.pty.masterch.

@ kernel.percpu.pty.slavech per processor count of characters sent to pty slave devices
A count maintained for each processor, that accumulates the number of
characters sent to pty slave devices.

For single processor systems the one value is the same as for the metric
kernel.all.pty.slavech.

@ kernel.percpu.flock.alloc per processor number of record locks allocated
A count maintained for each processor, that accumulates the number of
record locks allocated.

For single processor systems the one value is the same as for the metric
kernel.all.flock.alloc.

@ kernel.percpu.flock.inuse per processor number of record locks currently in use
For each processor, the number of record locks currently in use.

For single processor systems the one value is the same as for the metric
kernel.all.flock.inuse.

@ xpc.kernel.percpu.cpu.idle High precision kernel.percpu.cpu.idle
This is a higher precision version of kernel.percpu.cpu.idle.
See help on kernel.percpu.cpu.idle for more details.

@ xpc.kernel.percpu.cpu.intr High precision kernel.percpu.cpu.intr
This is a higher precision version of kernel.percpu.cpu.intr.
See help on kernel.percpu.cpu.intr for more details.

@ xpc.kernel.percpu.cpu.sys High precision kernel.percpu.cpu.sys
This is a higher precision version of kernel.percpu.cpu.sys.
See help on kernel.percpu.cpu.sys for more details.

@ xpc.kernel.percpu.cpu.sxbrk High precision kernel.percpu.cpu.sxbrk
This is a higher precision version of kernel.percpu.cpu.sxbrk.
See help on kernel.percpu.cpu.sxbrk for more details.

@ xpc.kernel.percpu.cpu.user High precision kernel.percpu.cpu.user
This is a higher precision version of kernel.percpu.cpu.user.
See help on kernel.percpu.cpu.user for more details.

@ xpc.kernel.percpu.cpu.wait.total High precision kernel.percpu.cpu.wait.total
This is a higher precision version of kernel.percpu.cpu.wait.total.
See help on kernel.percpu.cpu.wait.total for more details.

@ xpc.kernel.percpu.cpu.wait.gfxc High precision kernel.percpu.cpu.wait.gfxc
This is a higher precision version of kernel.percpu.cpu.wait.gfxc.
See help on kernel.percpu.cpu.wait.gfxc for more details.

@ xpc.kernel.percpu.cpu.wait.gfxf High precision kernel.percpu.cpu.wait.gfxf
This is a higher precision version of kernel.percpu.cpu.wait.gfxf.
See help on kernel.percpu.cpu.wait.gfxf for more details.

@ xpc.kernel.percpu.cpu.wait.io High precision kernel.percpu.cpu.wait.io
This is a higher precision version of kernel.percpu.cpu.wait.io.
See help on kernel.percpu.cpu.wait.io for more details.

@ xpc.kernel.percpu.cpu.wait.pio High precision kernel.percpu.cpu.wait.pio
This is a higher precision version of kernel.percpu.cpu.wait.pio.
See help on kernel.percpu.cpu.wait.pio for more details.

@ xpc.kernel.percpu.cpu.wait.swap High precision kernel.percpu.cpu.wait.swap
This is a higher precision version of kernel.percpu.cpu.wait.swap.
See help on kernel.percpu.cpu.wait.swap for more details.

@ xpc.kernel.percpu.io.bread High precision kernel.percpu.io.bread
This is a higher precision version of kernel.percpu.io.bread.
See help on kernel.percpu.io.bread for more details.

@ xpc.kernel.percpu.io.bwrite High precision kernel.percpu.io.bwrite
This is a higher precision version of kernel.percpu.io.bwrite.
See help on kernel.percpu.io.bwrite for more details.

@ xpc.kernel.percpu.io.lread High precision kernel.percpu.io.lread
This is a higher precision version of kernel.percpu.io.lread.
See help on kernel.percpu.io.lread for more details.

@ xpc.kernel.percpu.io.phread High precision kernel.percpu.io.phread
This is a higher precision version of kernel.percpu.io.phread.
See help on kernel.percpu.io.phread for more details.

@ xpc.kernel.percpu.io.phwrite High precision kernel.percpu.io.phwrite
This is a higher precision version of kernel.percpu.io.phwrite.
See help on kernel.percpu.io.phwrite for more details.

@ xpc.kernel.percpu.io.wcancel High precision kernel.percpu.io.wcancel
This is a higher precision version of kernel.percpu.io.wcancel.
See help on kernel.percpu.io.wcancel for more details.

@ xpc.kernel.percpu.io.dirblk High precision kernel.percpu.io.dirblk
This is a higher precision version of kernel.percpu.io.dirblk.
See help on kernel.percpu.io.dirblk for more details.

@ xpc.kernel.percpu.io.lwrite High precision kernel.percpu.io.lwrite
This is a higher precision version of kernel.percpu.io.lwrite.
See help on kernel.percpu.io.lwrite for more details.

@ kernel.percpu.kswitch per processor cumulative kernel thread context switches
A count maintained for each processor, that is the cumulative number of
kernel thread (context) switches that have occurred.

@ kernel.percpu.kpreempt per processor cumulative kernel thread preempted
A count maintained for each processor, that is the cumulative number of
preempted kernel thread (context) switches that have occurred.

@ kernel.percpu.sysioctl per processor number of ioctl() calls made
A count maintained for each processor, that accumulates the number of
ioctl() calls made.

@ kernel.percpu.idl.mesgsnt per processor number of IDL messages sent
A count maintained for each processor, that is the cumulative number of
of IDL messages sent.

@ kernel.percpu.idl.mesgrcv per processor number of IDL messages received
A count maintained for each processor, that is the cumulative number of
of IDL messages received.

@ kernel.percpu.waitio.queue per processor cumulative length of queue of processes waiting for I/O
At each "clock tick" the number of processes waiting for I/O for this 
processor is added to one instance of this counter.
The per processor values are less  useful than the aggregate;
see kernel.all.waitio.queue.

@ kernel.percpu.waitio.occ per processor number of times the "waitio queue" is non-zero
At each "clock tick" if the number of processes waiting for I/O for
this processor is non-zero, one instance of this counter is incremented
by one.
The per processor values are less  useful than the aggregate;
see kernel.all.waitio.occ.
