@ xfs.allocx XFS extents allocated
Number of file system extents allocated over all XFS filesystems
@ xfs.allocb XFS blocks allocated
Number of file system blocks allocated over all XFS filesystems
@ xfs.freex XFS extents freed
Number of file system extents freed over all XFS filesystems
@ xfs.freeb XFS blocks freed
Number of file system blocks freed over all XFS filesystems
@ xfs.abt_lookup lookups in XFS alloc btrees
Number of lookup operations in XFS filesystem allocation btrees
@ xfs.abt_compare compares in XFS alloc btrees
Number of compares in XFS filesystem allocation btree lookups
@ xfs.abt_insrec insertions in XFS alloc btrees
Number of extent records inserted into XFS filesystem allocation btrees
@ xfs.abt_delrec deletions in XFS alloc btrees
Number of extent records deleted from XFS filesystem allocation btrees
@ xfs.blk_mapr block map read ops in XFS
Number of block map for read operations performed on XFS files
@ xfs.blk_mapw block map write ops in XFS
Number of block map for write operations performed on XFS files
@ xfs.blk_unmap block unmap ops in XFS
Number of block unmap (delete) operations performed on XFS files
@ xfs.add_exlist extent list add ops in XFS
Number of extent list insertion operations for XFS files
@ xfs.del_exlist extent list delete ops in XFS
Number of extent list deletion operations for XFS files
@ xfs.look_exlist extent list lookup ops in XFS
Number of extent list lookup operations for XFS files
@ xfs.cmp_exlist extent list compare ops in XFS
Number of extent list comparisons in XFS extent list lookups
@ xfs.bmbt_lookup block map btree lookup ops in XFS
Number of block map btree lookup operations on XFS files
@ xfs.bmbt_compare block map btree compare ops in XFS
Number of block map btree compare operations in XFS block map lookups
@ xfs.bmbt_insrec block map btree insert ops in XFS
Number of block map btree records inserted for XFS files
@ xfs.bmbt_delrec block map btree delete ops in XFS
Number of block map btree records deleted for XFS files

@ xfs.dir_lookup number of file name directory lookups
This is a count of the number of file name directory lookups in XFS
filesystems. It counts only those lookups which miss in the operating
system's directory name lookup cache and must search the real directory
structure for the name in question.  The count is incremented once for
each level of a pathname search that results in a directory lookup.

@ xfs.dir_create number of directory entry creation operations
This is the number of times a new directory entry was created in XFS
filesystems. Each time that a new file, directory, link, symbolic link,
or special file is created in the directory hierarchy the count is
incremented.

@ xfs.dir_remove number of directory entry remove operations
This is the number of times an existing directory entry was removed in
XFS filesystems. Each time that a file, directory, link, symbolic link,
or special file is removed from the directory hierarchy the count is
incremented.

@ xfs.dir_getdents number of times the directory getdents operation is performed
This is the number of times the XFS directory getdents operation was
performed. The getdents operation is used by programs to read the
contents of directories in a file system independent fashion.  This
count corresponds exactly to the number of times the getdents(2) system
call was successfully used on an XFS directory.

@ xfs.trans_sync number of synchronous meta-data transactions performed
This is the number of meta-data transactions which waited to be
committed to the on-disk log before allowing the process performing the
transaction to continue. These transactions are slower and more
expensive than asynchronous transactions, because they force the in
memory log buffers to be forced to disk more often and they wait for
the completion of the log buffer writes. Synchronous transactions
include file truncations and all directory updates when the file system
is mounted with the 'wsync' option.

@ xfs.trans_async number of synchronous meta-data transactions performed
This is the number of meta-data transactions which did not wait to be
committed to the on-disk log before allowing the process performing the
transaction to continue. These transactions are faster and more
efficient than synchronous transactions, because they commit their data
to the in memory log buffers without forcing those buffers to be
written to disk. This allows multiple asynchronous transactions to be
committed to disk in a single log buffer write. Most transactions used
in XFS file systems are asynchronous.

@ xfs.trans_empty number of meta-data transactions which committed without changing anything
This is the number of meta-data transactions which did not actually
change anything. These are transactions which were started for some
purpose, but in the end it turned out that no change was necessary.

@ xfs.ig_attempts number of in memory inode lookup operations
This is the number of times the operating system looked for an XFS
inode in the inode cache. Whether the inode was found in the cache or
needed to be read in from the disk is not indicated here, but this can
be computed from the ig_found and ig_missed counts.

@ xfs.ig_found number of successful in memory inode lookup operations
This is the number of times the operating system looked for an XFS
inode in the inode cache and found it. The closer this count is to the
ig_attempts count the better the inode cache is performing.

@ xfs.ig_frecycle number of just missed in memory inode lookup operations
This is the number of times the operating system looked for an XFS
inode in the inode cache and saw that it was there but was unable to
use the in memory inode because it was being recycled by another
process.

@ xfs.ig_missed number of failed in memory inode lookup operations
This is the number of times the operating system looked for an XFS
inode in the inode cache and the inode was not there. The further this
count is from the ig_attempts count the better.

@ xfs.ig_dup number of inode cache insertions that fail because the inode is there
This is the number of times the operating system looked for an XFS
inode in the inode cache and found that it was not there but upon
attempting to add the inode to the cache found that another process had
already inserted it.

@ xfs.ig_reclaims number of in memory inode recycle operations
This is the number of times the operating system recycled an XFS inode
from the inode cache in order to use the memory for that inode for
another purpose. Inodes are recycled in order to keep the inode cache
from growing without bound. If the reclaim rate is high it may be
beneficial to raise the vnode_free_ratio kernel tunable variable to
increase the size of inode cache.

@ xfs.ig_attrchg number of inode attribute change operations
This is the number of times the operating system explicitly changed the
attributes of an XFS inode. For example, this could be to change the
inode's owner, the inode's size, or the inode's timestamps.

@ xfs.log_writes number of buffer writes going to the disk from the log
This variable counts the number of log buffer writes going to the
physical log partitions of all XFS filesystems. Log data traffic is
proportional to the level of meta-data updating. Log buffer writes get
generated when they fill up or external syncs occur.

@ xfs.log_blocks write throughput to the physical XFS log
This variable counts the number of Kbytes of information being written
to the physical log partitions of all XFS filesystems. Log data traffic
is proportional to the level of meta-data updating. The rate with which
log data gets written depends on the size of internal log buffers and
disk write speed. Therefore, filesystems with very high meta-data
updating may need to stripe the log partition or put the log partition
on a separate drive.

@ xfs.log_noiclogs count of failures for immediate get of buffered/internal
This variable keeps track of times when a logged transaction can not
get any log buffer space. When this occurs, all of the internal log
buffers are busy flushing their data to the physical on-disk log.

@ xfs.xfsd_bufs number of buffers processed by the XFS daemons (xfsd)
This is the number of dirty disk buffers flushed out by the XFS
flushing daemons (xfsd). All delayed write, delayed allocation XFS
buffers are written out by the XFS daemons rather than directly by the
generic kernel flushing daemon (bdflushd).

@ xfs.xstrat_bytes number of bytes of data processed by the XFS daemons (xfsd)
This is the number of bytes of file data flushed out by the XFS
flushing daemons (xfsd). It can be used in conjunction with the
xfsd_bufs count to ascertain the average size of the buffers being
processed by the XFS daemons.

@ xfs.xstrat_quick number of buffers processed by the XFS daemons written to contiguous space on disk
This is the number of buffers flushed out by the XFS flushing daemons
which are written to contiguous space on disk. The buffers handled by
the XFS daemons are delayed allocation buffers, so this count gives an
indication of the success of the XFS daemons in allocating contiguous
disk space for the data being flushed to disk.

@ xfs.xstrat_split number of buffers processed by the XFS daemons written to non-contiguous space on disk
This is the number of buffers flushed out by the XFS flushing daemons
which are written to non-contiguous space on disk. The buffers handled
by the XFS daemons are delayed allocation buffers, so this count gives
an indication of the failure of the XFS daemons in allocating
contiguous disk space for the data being flushed to disk. Large values
in this counter indicate that the file system has become fragmented.

@ xfs.write_calls number of XFS file system write operations
This is the number of write(2) system calls made to files in
XFS file systems.

@ xfs.write_bytes number of bytes written in XFS file system write operations
This is the number of bytes written via write(2) system calls to files
in XFS file systems. It can be used in conjunction with the write_calls
count to calculate the average size of the write operations to files in
XFS file systems.

@ xfs.write_bufs number of buffers used in XFS file system write operations
This is the number of operating system disk buffers used to handle XFS
file system write operations.

@ xfs.read_calls number of XFS file system read operations
This is the number of read(2) system calls made to files in XFS file
systems.

@ xfs.read_bytes number of bytes read in XFS file system read operations
This is the number of bytes read via read(2) system calls to files in
XFS file systems. It can be used in conjunction with the read_calls
count to calculate the average size of the read operations to files in
XFS file systems.

@ xfs.read_bufs number of buffers used in XFS file system read operations
This is the number of operating system disk buffers used to handle XFS
file system read operations.

@ xfs.attr_get number of "get" operations on XFS extended file attributes
The number of "get" operations performed on extended file attributes
within XFS filesystems.  The "get" operation retrieves the value of an
extended attribute.

@ xfs.attr_set number of "set" operations on XFS extended file attributes
The number of "set" operations performed on extended file attributes
within XFS filesystems.  The "set" operation creates and sets the value
of an extended attribute.

@ xfs.attr_remove number of "remove" operations on XFS extended file attributes
The number of "remove" operations performed on extended file attributes
within XFS filesystems.  The "remove" operation deletes an extended
attribute.

@ xfs.attr_list number of "list" operations on XFS extended file attributes
The number of "list" operations performed on extended file attributes
within XFS filesystems.  The "list" operation retrieves the set of
extended attributes associated with a file.

@ xfs.log_force value from xs_log_force field of struct xfsstats
The number of times the in-core log is forced to disk.  It is
equivalent to the number of successful calls to the function
xfs_log_force().  This metric is exported from the xs_log_force field
of struct xfsstats in /usr/include/sys/ksa.h.

@ xfs.log_force_sleep value from xs_log_force_sleep field of struct xfsstats
This metric is exported from the xs_log_force_sleep field of struct xfsstats
in /usr/include/sys/ksa.h.

@ xfs.sleep_logspace value from xs_sleep_logspace field of struct xfsstats
This metric is exported from the xs_sleep_logspace field of struct xfsstats
in /usr/include/sys/ksa.h.

@ xfs.try_logspace value from xs_try_logspace field of struct xfsstats
This metric is exported from the xs_try_logspace field of struct xfsstats
in /usr/include/sys/ksa.h.

@ xfs.tail_push.npush value from xs_push_ail field of struct xfsstats
The number of times the tail of the AIL is moved forward.  It is
equivalent to the number of successful calls to the function
xfs_trans_push_ail().  This metric is exported from the xs_push_ail
field of struct xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.flush value from xs_push_ail_flush field of struct xfsstats
This metric is exported from the xs_push_ail_flush field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.flushing value from xs_push_ail_flushing field of struct xfsstats
This metric is exported from the xs_push_ail_flushing field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.locked value from xs_push_ail_locked field of struct xfsstats
This metric is exported from the xs_push_ail_locked field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.pinned value from xs_push_ail_pinned field of struct xfsstats
This metric is exported from the xs_push_ail_pinned field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.pushbuf value from xs_push_ail_pushbuf field of struct xfsstats
This metric is exported from the xs_push_ail_pushbuf field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.restarts value from xs_push_ail_restarts field of struct xfsstats
This metric is exported from the xs_push_ail_restarts field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.tail_push.success value from xs_push_ail_success field of struct xfsstats
This metric is exported from the xs_push_ail_success field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.cachehits value from xs_qm_dqcachehits field of struct xfsstats
This metric is exported from the xs_qm_dqcachehits field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.cachemisses value from xs_qm_dqcachemisses field of struct xfsstats
This metric is exported from the xs_qm_dqcachemisses field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.inact_reclaims value from xs_qm_dqinact_reclaims field of struct xfsstats
This metric is exported from the xs_qm_dqinact_reclaims field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.reclaim_misses value from xs_qm_dqreclaim_misses field of struct xfsstats
This metric is exported from the xs_qm_dqreclaim_misses field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.reclaims value from xs_qm_dqreclaims field of struct xfsstats
This metric is exported from the xs_qm_dqreclaims field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.shake_reclaims value from xs_qm_dqshake_reclaims field of struct xfsstats
This metric is exported from the xs_qm_dqshake_reclaims field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.dquot_dups value from xs_qm_dquot_dups field of struct xfsstats
This metric is exported from the xs_qm_dquot_dups field of struct
xfsstats in /usr/include/sys/ksa.h.

@ xfs.quota.wants value from xs_qm_dqwants field of struct xfsstats
This metric is exported from the xs_qm_dqwants field of struct xfsstats
in /usr/include/sys/ksa.h.

@ xfs.iflush_count the number of calls to xfs_iflush
This is the number of calls to xfs_iflush which gets called when an
inode is being flushed (such as by bdflush or tail pushing).
xfs_iflush searches for other inodes in the same cluster which are
dirty and flushable.

@ xfs.icluster_flushzero the number of flushes of only one inode in cluster
This is the number of times that the inode clustering was not able to
flush anything but the one inode it was called with.
