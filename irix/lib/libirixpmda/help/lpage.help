#
# $Id: lpage.help,v 1.3 1999/05/11 19:26:03 kenmcd Exp $ #
#

@ mem.lpage.coalesce.scans large page coalescion attempts
Cumulative number of scans made by the coalescing daemon over the
entire set of pages.  The daemon periodically scans all pages in memory
to see if they can be coalesced, and is also active when a requested
page size is unavailable.

@ mem.lpage.coalesce.success successful large page merges
Cumulative number of successful large page merges by the coalescing
daemon.

@ mem.lpage.faults count of large page faults
Cumulative number of large page faults that were successfully
satisfied.

@ mem.lpage.allocs count of vfault large page allocations
As part of a large page fault, vfault() may request allocation of a
large page.  This metric denotes the number of such requests that were
satisfied.

@ mem.lpage.downgrade count of large page downgrades
Cumulative number of page allocation failures where the large page
requested cannot be immediately provided, so the even and odd address
of the larger page size is downgraded to base page size, and this
smaller page is allocated.

@ mem.lpage.page_splits count of large page splits
Cumulative number of splits of large pages to satisfy requests for
smaller sized pages.

@ mem.lpage.basesize minimum page size
The base (smallest) page size supported by the kernel, in Kilobytes.

@ mem.lpage.maxsize maximum page size
The maximum page size supported by the kernel, in Kilobytes.

@ mem.lpage.maxenabled maximum enabled page size
The maximum enabled page size, in Kilobytes.

@ mem.lpage.enabled enabled large page sizes
Set of large page sizes which are currently enabled, in Kilobytes.
Range of values is 16, 64, 256, 1024, 4096, and 16384.

#@ mem.lpage.reserved large pages reserved at boot time
#Since it is difficult to to coalesce very large pages at run time due
#to memory fragmentation, tunable parameters exist to allow large pages
#to be reserved at boot time.  This metric provides the number of
#reserved pages for each page large page size.
#
#@ mem.lpage.coalesce.limits upper limit of free pages
#The kernel tries to keep a percentage of total free memory in the
#system at a certain page size.  This metric is the percentage of total
#memory which has been specified as the current upper limit for free
#pages at each page size.  These limits can be tuned dynamically.
#
#Since very large pages (>=1MB) are more difficult to coalesce at run
#time it is recommended that these tunables be set at boot time on busy
#systems.  A higher setting will result in higher coalescing activity.
