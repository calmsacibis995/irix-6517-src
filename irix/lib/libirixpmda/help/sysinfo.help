#
# $Id: sysinfo.help,v 1.10 1999/05/11 19:26:03 kenmcd Exp $
#

@ swap.pagesin cumulative pages swapped in
The cumulative count of the number of pages transferred in from all swap
devices since system boot time.

@ swap.pagesout cumulative pages swapped out
The cumulative count of the number of pages transferred out to all swap
devices since system boot time.

@ kernel.all.pswitch cumulative process switches
The cumulative number of process (context) switches that have occurred
since system boot time.

@ swap.procout cumulative process swap outs
The cumulative number of process swap outs that have occurred since
system boot time.

@ swap.in cumulative "swap in" transfers
The cumulative number of swap I/O transfers (reads) from all swap
devices since system boot time. Each transfer may involve one or more
pages (see also swap.pagesin).

@ swap.out cumulative "swap out" transfers
The cumulative number of swap I/O transfers (writes) to all swap
devices since system boot time. Each transfer may involve one or more
pages (see also swap.pagesout).

@ kernel.all.cpu.idle CPU idle time (summed over all processors)
A cumulative count of the number of milliseconds of CPU idle time, summed over
all processors.

Note that this metric is derived by point sampling the state of the currently
executing process(es) once per tick of the system clock.

@ kernel.all.cpu.intr CPU interrupt time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent processing
interrupts, summed over all processors.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.sys CPU kernel time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent executing
below the system call interface in the kernel (system mode), summed over 
all processors.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.sxbrk CPU time waiting for memory resources (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent idle
when there are processes blocked due to depleted memory resources and
there are no processes waiting for I/O.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.user CPU user time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent executing
above the system call interface in applications (user mode), summed over 
all processors. 

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.wait.total CPU wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent waiting for
I/O, summed over all processors.
This metric is the sum of the other kernel.all.cpu.wait.* metrics.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.io.iget Number of inode lookups performed (summed over all processors)
A cumulative count of the number of inode lookups performed,
summed over all processors.

@ kernel.all.readch Number of bytes transferred by the read() system call (summed over all processors)
A cumulative count of the number of bytes transferred by the read()
system call, summed over all processors.

@ kernel.all.runocc Number of times the "run queue" is non-zero
At each "clock tick" if the number of runnable processes (i.e.
processes on the "run queue") for ANY processor is non-zero, this
counter is incremented by one.

@ kernel.all.runque Cumulative length of the queue of runnable processes
At each "clock tick" the number of runnable processes (i.e. processes
on the "run queue") for EVERY processor is added to this counter.

Over two consecutive samples the "average" run queue length may be
computed as
  if delta(kernel.all.runocc) is zero
    zero
  else
    delta(kernel.all.runque) / delta(kernel.all.runocc)

@ kernel.all.swap.swpocc Number of times there are swapped processes
At each "clock tick" if the number of swapped processes is non-zero,
this counter is incremented by one.

@ kernel.all.swap.swpque Cumulative length of the queue of swapped processes
At each "clock tick" the number of swapped processes is added to this
counter.

Over two consecutive samples the "average" swap queue length may be
computed as
    if delta(kernel.all.swpocc) is zero
	zero
    else
	delta(kernel.all.swpque) / delta(kernel.all.swpocc)

@ kernel.all.syscall Number of system calls made (summed over all processors)
A cumulative count of the number of system calls made,
summed over all processors.

@ kernel.all.sysexec Number of exec() system calls made (summed over all processors)
A cumulative count of the number of exec() system calls made,
summed over all processors.

@ kernel.all.sysfork Number of fork() system calls made (summed over all processors)
A cumulative count of the number of fork() system calls made,
summed over all processors.

@ kernel.all.sysread Number of read() system calls made (summed over all processors)
A cumulative count of the number of read() system calls made,
summed over all processors.

@ kernel.all.syswrite Number of write() system calls made (summed over all processors)
A cumulative count of the number of write() system calls made,
summed over all processors.

@ kernel.all.sysother Number of "other" system calls made (summed over all processors)
A cumulative count of the number of system calls (other than read(),
write(), fork() and exec()) made, summed over all processors.

The provision of instrumentation for ioctl() calls (see
kernel.all.sysioctl) has caused a problem for the semantics of
"sysother". For compatibility with extant use, the semantics have not
been changed, so ioctl() calls are still counted in "sysother".

The use of kernel.all.sysother is deprecated as the semantic issue
is likely to re-appear in the future in the context of some other newly
instrumented system call.

@ kernel.all.cpu.wait.gfxc CPU graphics context switch wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent
waiting for graphics context switches, summed over all processors.

Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

@ kernel.all.cpu.wait.gfxf CPU graphics FIFO wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent
waiting on a full graphics fifo, summed over all processors.

Note that this metric is derived by point sampling the state of the
currently executing process once per tick of the system clock.

@ kernel.all.cpu.wait.io CPU filesystem I/O wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent
waiting for filesystem I/O, summed over all processors.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.wait.pio CPU physical (non-swap) I/O wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent waiting for
non-swap I/O to complete, summed over all processors.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.cpu.wait.swap CPU swap I/O wait time (summed over all processors)
A cumulative count of the number of milliseconds of CPU time spent waiting for
physical swap I/O to complete, summed over all processors.

Note that this metric is derived by point sampling the state of the currently
executing process once per tick of the system clock.

@ kernel.all.writech Number of bytes transferred by the write() system call (summed over all processors)
A cumulative count of the number of bytes transferred by the write()
system call, summed over all processors.

@ kernel.all.io.bread Total block I/O read throughput (K)
Cumulative amount of data read from block devices (Kilobytes)

@ kernel.all.io.bwrite Total block I/O write throughput (K)
Cumulative amount of data written to block devices (Kilobytes)

@ kernel.all.io.lread Total logical read throughput (K)
Cumulative amount of data read from system buffers into user memory
(Kilobytes)

@ kernel.all.io.lwrite Total logical write throughput (K)
Cumulative amount of data written from system buffers into user memory
(Kilobytes)

@ kernel.all.io.phread Total physical I/O read throughput (K)
Cumulative amount of data read via raw (physical) devices (Kilobytes)

@ kernel.all.io.phwrite Total physical I/O write throughput (K)
Cumulative amount of data written via raw (physical) devices (Kilobytes)

@ kernel.all.io.wcancel Total data not written due to cancelled writes (K)
Cumulative amount of data that was not written when pending writes were
cancelled (Kilobytes)

@ kernel.all.io.namei Number of pathname lookups performed
The number of times pathnames have been translated to vnodes.

@ kernel.all.io.dirblk Kilobytes of directory blocks scanned
Cumulative count of the number of kilobytes of directory blocks scanned.

@ kernel.all.tty.recvintr Input interrupt count for serial devices
Cumulative number of input interrupts received for serial devices

@ kernel.all.tty.xmitintr Output interrupt count for serial devices
Cumulative number of output interrupts transmitted for serial devices

@ kernel.all.tty.mdmintr Modem control interrupt count for serial devices
Cumulative number of modem control interrupts processed for serial devices

@ kernel.all.tty.out Count of characters output to serial devices
Cumulative number of characters output to serial devices.

@ kernel.all.tty.raw Count of "raw" characters received on serial lines
Cumulative number of raw characters received on serial lines.

@ kernel.all.tty.canon Count of "canonical" characters received by the tty driver
Cumulative number of canonical characters received by the tty driver.

@ gfx.ioctl Count of graphics ioctl() operations
Cumulative number of graphics ioctl() operations performed.

@ gfx.ctxswitch Count of graphics context switches
Cumulative number of graphics context switches performed.

@ gfx.swapbuf Count of graphics swap buffers calls
Cumulative number of graphics swap buffer operations performed.

@ gfx.intr Count of non-FIFO graphics interrupts
Cumulative number of non-FIFO graphics interrupts processed.

@ gfx.fifonowait Count of graphics FIFO interrupts that don't block
Cumulative number of FIFO graphics interrupts processed that don't block.

@ gfx.fifowait Count of graphics FIFO interrupts that block
Cumulative number of FIFO graphics interrupts processed that block.

@ kernel.all.intr.vme Count of VME interrupts
Cumulative number of VME interrupts processed.

@ kernel.all.intr.non_vme Count of non-VME interrupts
Cumulative number of non-VME interrupts processed.

@ kernel.all.ipc.msg Count of System V message operations
Cumulative number of System V message operations performed.

@ kernel.all.ipc.sema Count of System V semaphore operations
Cumulative number of System V semaphore operations performed.

@ kernel.all.pty.masterch Count of characters sent to pty master devices
Cumulative number of characters sent to pty master devices.

@ kernel.all.pty.slavech Count of characters sent to pty slave devices
Cumulative number of characters sent to pty slave devices.

@ kernel.all.flock.alloc Total number of record locks allocated
Cumulative number of record locks allocated.

@ kernel.all.flock.inuse Count of record locks currently in use
Current number of record locks in use.

@ xpc.kernel.all.cpu.idle High precision kernel.all.cpu.idle
This is a higher precision version of kernel.all.cpu.idle.
See help on kernel.all.cpu.idle for more details.

@ xpc.kernel.all.cpu.intr High precision kernel.all.cpu.intr
This is a higher precision version of kernel.all.cpu.intr.
See help on kernel.all.cpu.intr for more details.

@ xpc.kernel.all.cpu.sys High precision kernel.all.cpu.sys
This is a higher precision version of kernel.all.cpu.sys.
See help on kernel.all.cpu.sys for more details.

@ xpc.kernel.all.cpu.sxbrk High precision kernel.all.cpu.sxbrk
This is a higher precision version of kernel.all.cpu.sxbrk.
See help on kernel.all.cpu.sxbrk for more details.

@ xpc.kernel.all.cpu.user High precision kernel.all.cpu.user
This is a higher precision version of kernel.all.cpu.user.
See help on kernel.all.cpu.user for more details.

@ xpc.kernel.all.cpu.wait.total High precision kernel.all.cpu.wait.total
This is a higher precision version of kernel.all.cpu.wait.total.
See help on kernel.all.cpu.wait.total for more details.

@ xpc.kernel.all.cpu.wait.gfxc High precision kernel.all.cpu.wait.gfxc
This is a higher precision version of kernel.all.cpu.wait.gfxc.
See help on kernel.all.cpu.wait.gfxc for more details.

@ xpc.kernel.all.cpu.wait.gfxf High precision kernel.all.cpu.wait.gfxf
This is a higher precision version of kernel.all.cpu.wait.gfxf.
See help on kernel.all.cpu.wait.gfxf for more details.

@ xpc.kernel.all.cpu.wait.io High precision kernel.all.cpu.wait.io
This is a higher precision version of kernel.all.cpu.wait.io.
See help on kernel.all.cpu.wait.io for more details.

@ xpc.kernel.all.cpu.wait.pio High precision kernel.all.cpu.wait.pio
This is a higher precision version of kernel.all.cpu.wait.pio.
See help on kernel.all.cpu.wait.pio for more details.

@ xpc.kernel.all.cpu.wait.swap High precision kernel.all.cpu.wait.swap
This is a higher precision version of kernel.all.cpu.wait.swap.
See help on kernel.all.cpu.wait.swap for more details.

@ xpc.kernel.all.io.bread High precision kernel.all.io.bread
This is a higher precision version of kernel.all.io.bread.
See help on kernel.all.io.bread for more details.

@ xpc.kernel.all.io.bwrite High precision kernel.all.io.bwrite
This is a higher precision version of kernel.all.io.bwrite.
See help on kernel.all.io.bwrite for more details.

@ xpc.kernel.all.io.lread High precision kernel.all.io.lread
This is a higher precision version of kernel.all.io.lread.
See help on kernel.all.io.lread for more details.

@ xpc.kernel.all.io.lwrite High precision kernel.all.io.lwrite
This is a higher precision version of kernel.all.io.lwrite.
See help on kernel.all.io.lwrite for more details.

@ xpc.kernel.all.io.phread High precision kernel.all.io.phread
This is a higher precision version of kernel.all.io.phread.
See help on kernel.all.io.phread for more details.

@ xpc.kernel.all.io.phwrite High precision kernel.all.io.phwrite
This is a higher precision version of kernel.all.io.phwrite.
See help on kernel.all.io.phwrite for more details.

@ xpc.kernel.all.io.wcancel High precision kernel.all.io.wcancel
This is a higher precision version of kernel.all.io.wcancel.
See help on kernel.all.io.wcancel for more details.

@ xpc.kernel.all.io.dirblk High precision kernel.all.io.dirblk
This is a higher precision version of kernel.all.io.dirblk.
See help on kernel.all.io.dirblk for more details.

@ kernel.all.kswitch cumulative kernel thread context switches
The cumulative number of kernel thread (context) switches that have occurred
since system boot time.

@ kernel.all.kpreempt cumulative kernel thread preempted
The cumulative number of preempted kernel thread (context) switches that have 
occurred since system boot time.

@ kernel.all.sysioctl Number of ioctl() system calls made (summed over all processors)
A cumulative count of the number of ioctl() system calls made,
summed over all processors.

@ kernel.all.idl.mesgsnt Number of IDL messages sent
The cumulative count of the number of IDL messages sent.

@ kernel.all.idl.mesgrcv Number of IDL messages received
The cumulative count of the number of IDL messages received.

@ kernel.all.waitio.queue Cumulative length of the queue of processes waiting for I/O
At each "clock tick" the number of processes in the waitio queue
for EVERY processor is added to this counter.

Over two consecutive samples the "average" waitio queue length may be
computed as
  if delta(kernel.all.waitio.occ) is zero
    zero
  else
    delta(kernel.all.waitio.queue) / 
    delta(kernel.all.waitio.occ)
This average is what sar(1) reports as "wioq-sz".

@ kernel.all.waitio.occ Number of times the "waitio queue" is non-zero
At each "clock tick" if the number of processes waiting for I/O is
non-zero, this counter is incremented by one.  This value converted to
a percentage is what sar(1) reports as "%wioocc".
