!RapidApp 844890225
!0x000102EFFFF
 ! Generated by Silicon Graphic's RapidApp.
 !
 !
 ! RapidApp 1.2.
 !
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("c++_libraries" )
!(BX) bx_info("c++_flags" )
!(BX) bx_info("c++_cc", "CC" )
!(BX) bx_info("system_directory", "/usr/lib/RapidApp" )
!(BX) bx_info("use_locales", false )
!(BX) bx_info("header_ext", "h" )
!(BX) bx_info("source_ext", "C" )
!(BX) bx_info("aux_merge_style", "merge" )
!(BX) bx_info("makefile_merge_style", "merge" )
!(BX) bx_info("derived_merge_style", "merge" )
!(BX) bx_info("ui_merge_style", "merge" )
!(BX) bx_info("target_system", "SGI" )
!(BX) bx_info("prompt_for_unnamed_classes", true )
!(BX) bx_info("inst_directory", "." )
!(BX) bx_info("desktop_directory", "." )
!(BX) bx_info("workspace_tag" )
!(BX) bx_info("header_directory", "." )
!(BX) bx_info("generate_vkapp_subclass", false )
!(BX) bx_info("generate_library", false )
!(BX) bx_info("vkapp_subclass_name" )
!(BX) bx_info("library_header_directory" )
!(BX) bx_info("library_name" )
!(BX) bx_info("comment_file", " " )
!(BX) bx_info("app_name", "cview" )
!(BX) bx_info("c++_pixmaps", "pixmaps.h", true )
!(BX) bx_info("c++_makefile", "Makefile", true )
!(BX) bx_info("do_insertion_merge", true )
!(BX) bx_info("verbose_codegen", true )
!(BX) bx_info("make_backups", true )
!(BX) bx_info("prune_dimensions", false )
!(BX) bx_info("use_irix_gl", false )
!(BX) bx_info("use_ez", true )
!(BX) bx_info("generate_unimplemented", true )
!(BX) bx_info("no_standalone_classes", true )
!(BX) bx_info("generate_default_resources", true )
!(BX) bx_info("use_cvstatic", false )
!(BX) bx_info("use_runonce", false )
!(BX) bx_info("message_system", "none" )
!(BX) bx_info("license_system", "none" )
!(BX) bx_info("generate_alternate_constructor", true )
!(BX) bx_info("use_license", false )
!(BX) bx_info("use_inventor_loop", false )
!(BX) bx_info("use_pure_virtuals", false )
!(BX) bx_info("put_windows_in_library", false )
!(BX) bx_info("use_tooltalk", false )
!(BX) bx_info("source_code_control_system", "none" )
!(BX) bx_info("force_update", false )
!(BX) bx_info("viewkit_code_version", "1.2" )
!(BX) bx_info("builder_version", "RapidApp 1.2" )



!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNx = 59;
!(BX)        XmNy = 80;
!(BX)        XmNwidth = 738;
!(BX)        XmNheight = 906;
!(BX)    };
!(BX)    controls {
!(BX)       managed VkWindow cview;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object cview : VkWindow widget {
    arguments {
        XmNforceChildClass = true;
        XmNautoRouteCallbacks = true;
!(BX)   _SgNheaderList = '<Vk/VkApp.h>,<Vk/VkFileSelectionDialog.h>, <Vk/VkSubMenu.h>,<Vk/VkRadioSubMenu.h>,<Vk/VkMenuItem.h>';
!(BX)   _SgNshowHelp = true;
        XmNwidth = 738;
        XmNheight = 906;
    };
    controls {
       managed XmMenuBar menuBar;
       managed VkTabbedDeck deck;
    };
    callbacks {
    };
};

object menuBar : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton helpPane;
        XmNwidth = 738;
        XmNheight = 28;
    };
    controls {
       managed XmCascadeButton filePane;
       managed XmCascadeButton editPane;
       managed XmCascadeButton viewPane;
       managed XmCascadeButton optionsPane;
       managed XmCascadeButton helpPane;
    };
    callbacks {
    };
};

object filePane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("File");
!(BX)   _XmNmnemonic = keysym("F");
        XmNwidth = 43;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu pulldownMenu;
    };
    callbacks {
    };
};

object pulldownMenu : XmPulldownMenu widget {
    arguments {
        XmNwidth = 146;
        XmNheight = 176;
    };
    controls {
       managed XmPushButtonGadget newButton;
       managed XmPushButtonGadget openButton;
       managed XmPushButtonGadget saveButton;
       managed XmPushButtonGadget saveasButton;
       managed XmPushButtonGadget printButton;
       managed XmSeparatorGadget separator1;
       managed XmPushButtonGadget closeButton;
       managed XmPushButtonGadget exitButton;
    };
    callbacks {
    };
};

object newButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("New");
!(BX)   _XmNmnemonic = keysym("N");
!(BX)   _XmNaccelerator = 'Ctrl<Key>N';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+N");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure newFile();
    };
};

object openButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Open...");
!(BX)   _XmNmnemonic = keysym("O");
!(BX)   _XmNaccelerator = 'Ctrl<Key>O';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+O");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure openFile();
    };
};

object saveButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Save");
!(BX)   _XmNmnemonic = keysym("S");
!(BX)   _XmNaccelerator = 'Ctrl<Key>S';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+S");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure save();
    };
};

object saveasButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Save As...");
!(BX)   _XmNmnemonic = keysym("A");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure saveas();
    };
};

object printButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Print");
!(BX)   _XmNmnemonic = keysym("P");
!(BX)   _XmNaccelerator = 'Ctrl<Key>P';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+P");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure print();
    };
};

object separator1 : XmSeparatorGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object closeButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Close");
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = 'Ctrl<Key>W';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+W");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure close();
    };
};

object exitButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Exit");
!(BX)   _XmNmnemonic = keysym("x");
!(BX)   _XmNaccelerator = 'Ctrl<Key>Q';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+Q");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure quit();
    };
};

object editPane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Edit");
!(BX)   _XmNmnemonic = keysym("E");
        XmNwidth = 47;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu pulldownMenu1;
    };
    callbacks {
    };
};

object pulldownMenu1 : XmPulldownMenu widget {
    arguments {
        XmNwidth = 115;
        XmNheight = 78;
    };
    controls {
       managed XmPushButtonGadget cutButton;
       managed XmPushButtonGadget copyButton;
       managed XmPushButtonGadget pasteButton;
    };
    callbacks {
    };
};

object cutButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Cut");
!(BX)   _XmNmnemonic = keysym("t");
!(BX)   _XmNaccelerator = 'Ctrl<Key>X';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+X");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cut();
    };
};

object copyButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Copy");
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = 'Ctrl<Key>C';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+C");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure copy();
    };
};

object pasteButton : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Paste");
!(BX)   _XmNmnemonic = keysym("P");
!(BX)   _XmNaccelerator = 'Ctrl<Key>V';
!(BX)   _XmNacceleratorText = compound_string("Ctrl+V");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure paste();
    };
};

object viewPane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("View");
!(BX)   _XmNmnemonic = keysym("V");
        XmNwidth = 52;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu viewPulldownMenu;
    };
    callbacks {
    };
};

object viewPulldownMenu : XmPulldownMenu widget {
    arguments {
        XmNwidth = 109;
        XmNheight = 78;
    };
    controls {
       managed XmPushButtonGadget viewControl1;
       managed XmPushButtonGadget viewControl2;
       managed XmPushButtonGadget viewControl3;
    };
    callbacks {
    };
};

object viewControl1 : XmPushButtonGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object viewControl2 : XmPushButtonGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object viewControl3 : XmPushButtonGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object optionsPane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Options");
!(BX)   _XmNmnemonic = keysym("O");
        XmNwidth = 74;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu pulldownMenu2;
    };
    callbacks {
    };
};

object pulldownMenu2 : XmPulldownMenu widget {
    arguments {
        XmNwidth = 84;
        XmNheight = 54;
    };
    controls {
       managed XmToggleButtonGadget option1;
       managed XmToggleButtonGadget option2;
    };
    callbacks {
    };
};

object option1 : XmToggleButtonGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object option2 : XmToggleButtonGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object helpPane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help");
!(BX)   _XmNmnemonic = keysym("H");
        XmNwidth = 50;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu pulldownMenu3;
    };
    callbacks {
    };
};

object pulldownMenu3 : XmPulldownMenu widget {
    arguments {
        XmNwidth = 225;
        XmNheight = 128;
    };
    controls {
       managed XmPushButtonGadget help_click_for_help;
       managed XmPushButtonGadget help_overview;
       managed XmPushButtonGadget help_index;
       managed XmPushButtonGadget help_keys_and_short;
       managed XmSeparatorGadget separator;
       managed XmPushButtonGadget help_prod_info;
    };
    callbacks {
    };
};

object help_click_for_help : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Click For Help");
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = 'Shift<Key>F1';
!(BX)   _XmNacceleratorText = compound_string("Shift+F1");
    };
    controls {
    };
    callbacks {
    };
};

object help_overview : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Overview");
!(BX)   _XmNmnemonic = keysym("O");
    };
    controls {
    };
    callbacks {
    };
};

object help_index : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Index");
!(BX)   _XmNmnemonic = keysym("I");
    };
    controls {
    };
    callbacks {
    };
};

object help_keys_and_short : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Keys and Shortcuts");
!(BX)   _XmNmnemonic = keysym("K");
    };
    controls {
    };
    callbacks {
    };
};

object separator : XmSeparatorGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object help_prod_info : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Product Information");
!(BX)   _XmNmnemonic = keysym("P");
    };
    controls {
    };
    callbacks {
    };
};

object deck : VkTabbedDeck widget {
    arguments {
        XmNforceChildClass = true;
        XmNwidth = 738;
        XmNheight = 878;
    };
    controls {
       managed SgRubberBoard checkpoint;
       managed SgRubberBoard restart;
    };
    callbacks {
    };
};

object checkpoint : SgRubberBoard widget {
    arguments {
        XmNinitialParentHeight = 623;
        XmNfinalParentHeight = 908;
        XmNfinalParentWidth = 930;
        XmNinitialParentWidth = 557;
        XmNautoPosition = true;
!(BX)   _XmNtabLabel = 'Checkpoint Control Panel';
        XmNwidth = 730;
        XmNheight = 830;
    };
    controls {
       managed XmScrolledWindow scrolledWindow;
       managed XmLabel label1;
       managed XmSeparator separator2;
       managed XmPushButton but_ps;
       managed SgFinder finderUid;
       managed VkOptionMenu idMenu;
       managed SgFinder finderStatef;
       managed XmLabel label2;
       managed XmSeparator separator3;
       managed XmPushButton but_file;
       managed VkOptionMenu fileMenu;
       managed XmScrolledWindow scrolledWindow1;
       managed XmSeparator separator4;
       managed XmPushButton but_ok;
       managed VkOptionMenu willMenu;
       managed XmLabel pstitle;
       managed XmPushButton but_abort;
       managed XmToggleButton tog_upgrade;
    };
    callbacks {
    };
};

object scrolledWindow : XmScrolledWindow widget {
    arguments {
        XmNscrollBarDisplayPolicy = XmSTATIC;
        XmNinitialX = 36;
        XmNinitialY = 124;
        XmNinitialWidth = 535;
        XmNinitialHeight = 55;
        XmNfinalX = 30;
        XmNfinalY = 122;
        XmNfinalWidth = 827;
        XmNfinalHeight = 150;
        XmNx = 33;
        XmNy = 122;
        XmNwidth = 670;
        XmNheight = 124;
    };
    controls {
       managed XmList psList;
    };
    callbacks {
    };
};

object psList : XmList widget {
    arguments {
        RaNschemeFont = SmallFixedWidthFont;
!(BX)   _XmNfontList = font_table(
!(BX)		font('SGI_DYNAMIC SmallFixedWidthFont'));
        XmNlistSizePolicy = XmCONSTANT;
        XmNwidth = 664;
        XmNheight = 118;
    };
    controls {
    };
    callbacks {
        XmNbrowseSelectionCallback = procedure cv_select_one();
    };
};

object label1 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("CHECKPOINT CONTROL PANEL");
        XmNinitialX = 110;
        XmNinitialY = 10;
        XmNinitialWidth = 390;
        XmNinitialHeight = 29;
        XmNfinalX = 110;
        XmNfinalY = 10;
        XmNfinalWidth = 609;
        XmNfinalHeight = 29;
        XmNx = 110;
        XmNy = 10;
        XmNwidth = 491;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object separator2 : XmSeparator widget {
    arguments {
        XmNinitialX = 10;
        XmNinitialY = 30;
        XmNinitialWidth = 652;
        XmNinitialHeight = 20;
        XmNfinalX = 10;
        XmNfinalY = 30;
        XmNfinalWidth = 860;
        XmNfinalHeight = 20;
        XmNx = 10;
        XmNy = 30;
        XmNwidth = 748;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object but_ps : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("STEP I: Select a Checkpoint Target  Owned by User");
        XmNinitialX = 10;
        XmNinitialY = 60;
        XmNinitialWidth = 339;
        XmNinitialHeight = 30;
        XmNfinalX = 10;
        XmNfinalY = 60;
        XmNfinalWidth = 354;
        XmNfinalHeight = 30;
        XmNx = 10;
        XmNy = 60;
        XmNwidth = 345;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_ps();
    };
};

object finderUid : SgFinder widget {
    arguments {
        XmNinitialX = 348;
        XmNinitialY = 50;
        XmNinitialWidth = 215;
        XmNinitialHeight = 55;
        XmNfinalX = 372;
        XmNfinalY = 50;
        XmNfinalWidth = 483;
        XmNfinalHeight = 55;
        XmNx = 359;
        XmNy = 50;
        XmNwidth = 339;
        XmNheight = 55;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_uid();
        XmNvalueChangedCallback = procedure cv_uid_change();
    };
};

object idMenu : VkOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Checkpoint the selected job as a ");
        XmNinitialX = 29;
        XmNinitialY = 185;
        XmNinitialWidth = 470;
        XmNinitialHeight = 32;
        XmNfinalX = 17;
        XmNfinalY = 280;
        XmNfinalWidth = 470;
        XmNfinalHeight = 32;
        XmNx = 23;
        XmNy = 254;
        XmNwidth = 470;
        XmNheight = 32;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown;
    };
    callbacks {
    };
};

object optionPulldown : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 163;
        XmNheight = 150;
    };
    controls {
       managed XmPushButtonGadget opt_pid;
       managed XmPushButtonGadget opt_gid;
       managed XmPushButtonGadget opt_sid;
       managed XmPushButtonGadget opt_ash;
       managed XmPushButtonGadget opt_hid;
       managed XmPushButtonGadget opt_sgp;
    };
    callbacks {
    };
};

object opt_pid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Individual Process");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_pid();
    };
};

object opt_gid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Process Group");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_gid();
    };
};

object opt_sid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Unix Session");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_sid();
    };
};

object opt_ash : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Array Session");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_ash();
    };
};

object opt_hid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Process Hierarchy");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_hid();
    };
};

object opt_sgp : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Sproc Shared Group");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_sgp();
    };
};

object finderStatef : SgFinder widget {
    arguments {
        XmNinitialX = 280;
        XmNinitialY = 225;
        XmNinitialWidth = 282;
        XmNinitialHeight = 60;
        XmNfinalX = 257;
        XmNfinalY = 320;
        XmNfinalWidth = 596;
        XmNfinalHeight = 60;
        XmNx = 269;
        XmNy = 294;
        XmNwidth = 427;
        XmNheight = 60;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_statef();
        XmNvalueChangedCallback = procedure cv_statef_change();
    };
};

object label2 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Enter a filename to save your job:");
        XmNinitialX = 30;
        XmNinitialY = 235;
        XmNinitialWidth = 247;
        XmNinitialHeight = 29;
        XmNfinalX = 8;
        XmNfinalY = 330;
        XmNfinalWidth = 257;
        XmNfinalHeight = 29;
        XmNx = 19;
        XmNy = 304;
        XmNwidth = 251;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object separator3 : XmSeparator widget {
    arguments {
        XmNinitialX = 10;
        XmNinitialY = 285;
        XmNinitialWidth = 663;
        XmNinitialHeight = 20;
        XmNfinalX = 10;
        XmNfinalY = 380;
        XmNfinalWidth = 851;
        XmNfinalHeight = 20;
        XmNx = -20;
        XmNy = 354;
        XmNwidth = 750;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object but_file : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("STEP II: Change Checkpoint Options, if Desired");
        XmNinitialX = 10;
        XmNinitialY = 306;
        XmNinitialWidth = 330;
        XmNinitialHeight = 32;
        XmNfinalX = 10;
        XmNfinalY = 421;
        XmNfinalWidth = 330;
        XmNfinalHeight = 32;
        XmNx = 10;
        XmNy = 389;
        XmNwidth = 330;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_file();
    };
};

object fileMenu : VkOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Set the following open file dispositions to ");
        XmNinitialX = 25;
        XmNinitialY = 378;
        XmNinitialWidth = 543;
        XmNinitialHeight = 32;
        XmNfinalX = 27;
        XmNfinalY = 521;
        XmNfinalWidth = 862;
        XmNfinalHeight = 32;
        XmNx = 28;
        XmNy = 514;
        XmNwidth = 690;
        XmNheight = 32;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown1;
    };
    callbacks {
    };
};

object optionPulldown1 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 338;
        XmNheight = 126;
    };
    controls {
       managed XmPushButtonGadget opt_merge;
       managed XmPushButtonGadget opt_ignore;
       managed XmPushButtonGadget opt_append;
       managed XmPushButtonGadget opt_replace;
       managed XmPushButtonGadget opt_substitute;
    };
    callbacks {
    };
};

object opt_merge : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("MERGE (no save & reopen at current location)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_merge();
    };
};

object opt_ignore : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("IGNORE (no save & reopen as new)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_ignore();
    };
};

object opt_append : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("APPEND (no save & reopen to append)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_append();
    };
};

object opt_replace : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("REPLACE (save a copy to replace this file)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_replace();
    };
};

object opt_substitute : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("SUBSTITUTE (save a copy & use the copy)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOpt_substitute();
    };
};

object scrolledWindow1 : XmScrolledWindow widget {
    arguments {
        XmNscrollBarDisplayPolicy = XmSTATIC;
        XmNinitialX = 30;
        XmNinitialY = 409;
        XmNinitialWidth = 535;
        XmNinitialHeight = 76;
        XmNfinalX = 30;
        XmNfinalY = 571;
        XmNfinalWidth = 836;
        XmNfinalHeight = 190;
        XmNx = 26;
        XmNy = 550;
        XmNwidth = 674;
        XmNheight = 158;
    };
    controls {
       managed XmList fileList;
    };
    callbacks {
    };
};

object fileList : XmList widget {
    arguments {
        RaNschemeFont = SmallFixedWidthFont;
!(BX)   _XmNfontList = font_table(
!(BX)		font('SGI_DYNAMIC SmallFixedWidthFont'));
        XmNselectionPolicy = XmEXTENDED_SELECT;
        XmNlistSizePolicy = XmCONSTANT;
        XmNwidth = 668;
        XmNheight = 152;
    };
    controls {
    };
    callbacks {
        XmNextendedSelectionCallback = procedure cv_select();
    };
};

object separator4 : XmSeparator widget {
    arguments {
        XmNinitialX = 10;
        XmNinitialY = 526;
        XmNinitialWidth = 663;
        XmNinitialHeight = 20;
        XmNfinalX = 10;
        XmNfinalY = 793;
        XmNfinalWidth = 859;
        XmNfinalHeight = 20;
        XmNx = -23;
        XmNy = 734;
        XmNwidth = 753;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object but_ok : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("STEP III: OK, Go Checkpoint!");
        XmNinitialX = 10;
        XmNinitialY = 546;
        XmNinitialWidth = 210;
        XmNinitialHeight = 32;
        XmNfinalX = 10;
        XmNfinalY = 822;
        XmNfinalWidth = 210;
        XmNfinalHeight = 32;
        XmNx = 10;
        XmNy = 766;
        XmNwidth = 210;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_ok();
    };
};

object willMenu : VkOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("After checkpoint, the selected job will");
        XmNinitialX = 25;
        XmNinitialY = 345;
        XmNinitialWidth = 413;
        XmNinitialHeight = 30;
        XmNfinalX = 28;
        XmNfinalY = 478;
        XmNfinalWidth = 447;
        XmNfinalHeight = 42;
        XmNx = 26;
        XmNy = 442;
        XmNwidth = 434;
        XmNheight = 38;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown2;
    };
    callbacks {
    };
};

object optionPulldown2 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 84;
        XmNheight = 54;
    };
    controls {
       managed XmPushButtonGadget exit;
       managed XmPushButtonGadget cont;
    };
    callbacks {
    };
};

object exit : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Exit");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doExit();
    };
};

object cont : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Continue");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doCont();
    };
};

object pstitle : XmLabel widget {
    arguments {
        XmNschemeFont = 8;
        XmNlabelType = XmSTRING;
!(BX)   _XmNfontList = font_table(
!(BX)		font('SGI_DYNAMIC SmallFixedWidthFont'));
!(BX)   _XmNlabelString = compound_string("USER        PID    PPID    PGID    SID                ASH      COMMAND          ");
        XmNinitialX = 47;
        XmNinitialY = 104;
        XmNinitialWidth = 510;
        XmNinitialHeight = 20;
        XmNfinalX = 32;
        XmNfinalY = 104;
        XmNfinalWidth = 561;
        XmNfinalHeight = 20;
        XmNx = 40;
        XmNy = 104;
        XmNwidth = 533;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object but_abort : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("No, Abort Checkpoint");
        XmNinitialX = 65535;
        XmNinitialY = 65535;
        XmNinitialWidth = 65535;
        XmNinitialHeight = 65535;
        XmNfinalX = 65535;
        XmNfinalY = 65535;
        XmNfinalWidth = 65535;
        XmNfinalHeight = 65535;
        XmNx = 522;
        XmNy = 766;
        XmNwidth = 178;
        XmNheight = 34;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_abort();
    };
};

object tog_upgrade : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Checkpoint for system upgrade");
        XmNinitialX = 65535;
        XmNinitialY = 65535;
        XmNinitialWidth = 65535;
        XmNinitialHeight = 65535;
        XmNfinalX = 65535;
        XmNfinalY = 65535;
        XmNfinalWidth = 65535;
        XmNfinalHeight = 65535;
        XmNx = 28;
        XmNy = 482;
        XmNwidth = 232;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure cv_upgrade();
    };
};

object restart : SgRubberBoard widget {
    arguments {
        XmNinitialParentHeight = 659;
        XmNfinalParentHeight = 904;
        XmNfinalParentWidth = 925;
        XmNinitialParentWidth = 571;
        XmNautoPosition = true;
!(BX)   _XmNtabLabel = 'Restart Control Panel';
        XmNwidth = 730;
        XmNheight = 830;
    };
    controls {
       managed XmLabel label;
       managed XmSeparator separator5;
       managed XmPushButton but_ls;
       managed XmScrolledWindow scrolledWindow2;
       managed SgFinder finder_statef;
       managed XmToggleButton tog_cdir;
       managed XmToggleButton tog_rdir;
       managed XmPushButton but_restart;
       managed VkOptionMenu forkMenu;
       managed XmPushButton info;
       managed XmPushButton remove;
    };
    callbacks {
    };
};

object label : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("RESTART CONTROL PANEL");
        XmNinitialX = 167;
        XmNinitialY = 0;
        XmNinitialWidth = 188;
        XmNinitialHeight = 29;
        XmNfinalX = 170;
        XmNfinalY = 0;
        XmNfinalWidth = 633;
        XmNfinalHeight = 29;
        XmNx = 168;
        XmNy = 0;
        XmNwidth = 387;
        XmNheight = 29;
    };
    controls {
    };
    callbacks {
    };
};

object separator5 : XmSeparator widget {
    arguments {
        XmNinitialX = 10;
        XmNinitialY = 20;
        XmNinitialWidth = 572;
        XmNinitialHeight = 20;
        XmNfinalX = 10;
        XmNfinalY = 20;
        XmNfinalWidth = 954;
        XmNfinalHeight = 20;
        XmNx = 10;
        XmNy = 20;
        XmNwidth = 743;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object but_ls : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Select Restart Statefiles and Options");
        XmNinitialX = 10;
        XmNinitialY = 50;
        XmNinitialWidth = 260;
        XmNinitialHeight = 30;
        XmNfinalX = 10;
        XmNfinalY = 50;
        XmNfinalWidth = 260;
        XmNfinalHeight = 30;
        XmNx = 10;
        XmNy = 50;
        XmNwidth = 260;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_ls();
    };
};

object scrolledWindow2 : XmScrolledWindow widget {
    arguments {
        XmNscrollBarDisplayPolicy = XmSTATIC;
        XmNinitialX = 40;
        XmNinitialY = 142;
        XmNinitialWidth = 523;
        XmNinitialHeight = 245;
        XmNfinalX = 40;
        XmNfinalY = 154;
        XmNfinalWidth = 852;
        XmNfinalHeight = 409;
        XmNx = 40;
        XmNy = 150;
        XmNwidth = 670;
        XmNheight = 359;
    };
    controls {
       managed XmList lsList;
    };
    callbacks {
    };
};

object lsList : XmList widget {
    arguments {
        XmNwidth = 664;
        XmNheight = 353;
    };
    controls {
    };
    callbacks {
        XmNbrowseSelectionCallback = procedure ls_select_one();
    };
};

object finder_statef : SgFinder widget {
    arguments {
        XmNinitialX = 40;
        XmNinitialY = 90;
        XmNinitialWidth = 523;
        XmNinitialHeight = 52;
        XmNfinalX = 40;
        XmNfinalY = 90;
        XmNfinalWidth = 850;
        XmNfinalHeight = 52;
        XmNx = 40;
        XmNy = 90;
        XmNwidth = 669;
        XmNheight = 52;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure cv_statef();
        XmNvalueChangedCallback = procedure cv_statef_change();
    };
};

object tog_cdir : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Restart jobs with the original cwd (current working directory)");
        XmNinitialX = 40;
        XmNinitialY = 463;
        XmNinitialWidth = 420;
        XmNinitialHeight = 28;
        XmNfinalX = 40;
        XmNfinalY = 662;
        XmNfinalWidth = 420;
        XmNfinalHeight = 28;
        XmNx = 40;
        XmNy = 601;
        XmNwidth = 420;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure setTog_cdir();
    };
};

object tog_rdir : XmToggleButton widget {
    arguments {
        XmNalignment = XmALIGNMENT_BEGINNING;
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Restart jobs with the original root directory");
        XmNinitialX = 40;
        XmNinitialY = 496;
        XmNinitialWidth = 320;
        XmNinitialHeight = 28;
        XmNfinalX = 40;
        XmNfinalY = 702;
        XmNfinalWidth = 320;
        XmNfinalHeight = 28;
        XmNx = 40;
        XmNy = 639;
        XmNwidth = 320;
        XmNheight = 28;
    };
    controls {
    };
    callbacks {
        XmNvalueChangedCallback = procedure setTog_rdir();
    };
};

object but_restart : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("OK, Go Restart!");
        XmNinitialX = 12;
        XmNinitialY = 538;
        XmNinitialWidth = 176;
        XmNinitialHeight = 32;
        XmNfinalX = 16;
        XmNfinalY = 756;
        XmNfinalWidth = 176;
        XmNfinalHeight = 34;
        XmNx = 13;
        XmNy = 690;
        XmNwidth = 176;
        XmNheight = 33;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doBut_restart();
    };
};

object forkMenu : VkOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Restart Jobs using");
        XmNinitialX = 40;
        XmNinitialY = 422;
        XmNinitialWidth = 391;
        XmNinitialHeight = 32;
        XmNfinalX = 36;
        XmNfinalY = 618;
        XmNfinalWidth = 365;
        XmNfinalHeight = 32;
        XmNx = 38;
        XmNy = 558;
        XmNwidth = 379;
        XmNheight = 32;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown3;
    };
    callbacks {
    };
};

object optionPulldown3 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 196;
        XmNheight = 54;
    };
    controls {
       managed XmPushButtonGadget origpid;
       managed XmPushButtonGadget anypid;
    };
    callbacks {
    };
};

object origpid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Original Process ID (PID)");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doOrigpid();
    };
};

object anypid : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Any PID");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doAnypid();
    };
};

object info : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Or, Tell Me More About This Statefile");
        XmNinitialX = 230;
        XmNinitialY = 538;
        XmNinitialWidth = 252;
        XmNinitialHeight = 32;
        XmNfinalX = 238;
        XmNfinalY = 756;
        XmNfinalWidth = 252;
        XmNfinalHeight = 32;
        XmNx = 233;
        XmNy = 690;
        XmNwidth = 252;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doInfo();
    };
};

object remove : XmPushButton widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Remove This Statefile");
        XmNinitialX = 12;
        XmNinitialY = 598;
        XmNinitialWidth = 176;
        XmNinitialHeight = 32;
        XmNfinalX = 16;
        XmNfinalY = 820;
        XmNfinalWidth = 176;
        XmNfinalHeight = 32;
        XmNx = 13;
        XmNy = 752;
        XmNwidth = 176;
        XmNheight = 32;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure doRemove();
    };
};

!(BX)object topLevelShell1 : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNx = 51;
!(BX)        XmNy = 252;
!(BX)        XmNwidth = 369;
!(BX)        XmNheight = 118;
!(BX)    };
!(BX)    controls {
!(BX)       managed VkDialog rm;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object rm : VkDialog widget {
    arguments {
        XmNallowMultipleDialogs = true;
        XmNforceChildClass = true;
        XmNautoRouteCallbacks = true;
        XmNokLabelString = compound_string("OK");
        XmNcancelLabelString = compound_string("Cancel");
        XmNhelpLabelString = compound_string("Help");
        XmNwidth = 369;
        XmNheight = 118;
    };
    controls {
       managed XmBulletinBoard rmBD;
    };
    callbacks {
        XmNokCallback = procedure ok();
        XmNcancelCallback = procedure cancel();
    };
};

object rmBD : XmBulletinBoard widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 347;
        XmNheight = 38;
    };
    controls {
       managed XmLabel rmlabel;
    };
    callbacks {
    };
};

object rmlabel : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Are you sure to remove the selected statefile?");
        XmNx = 16;
        XmNy = 14;
        XmNwidth = 321;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};
end module;
