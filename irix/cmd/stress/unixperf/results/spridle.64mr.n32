UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: spridle
Operating system: IRIX64 6.4
Compiler version: 7.1
Instruction set: MIPS 3
Application binary interface: N32
2 195 MHZ IP30 Processors
CPU: MIPS R10000 Processor Chip Revision: 2.6
FPU: MIPS R10010 Floating Point Chip Revision: 0.0
Main memory size: 128 Mbytes
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version QL1040B
  Disk drive: unit 1 on SCSI controller 0
Integral SCSI controller 1: Version QL1040B
IOC3 serial port: tty1
IOC3 serial port: tty2
IOC3 parallel port: plp1
Graphics board: MXI
Integral Fast Ethernet: ef0, version 1
Iris Audio Processor: version RAD revision 12.0, number 1
Uptime:  3:34
Users: 2
Load average: 1.18, 3.04, 2.27
File IO test directory: /usr/tmp
File IO test filesystem: xfs (4205.63 MB total, 1369.56 MB available)
Date: Tue Mar 18 06:34:52 1997

7876152 reps @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply
7876152 reps @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply
7876152 reps @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply
7876152 reps @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply
7876152 reps @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply
39380760 trep @   0.0006 msec (1570000.0/sec): 4 by 4 double matrix multiply

7892868 reps @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply
7892868 reps @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply
7892868 reps @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply
7892868 reps @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply
7892868 reps @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply
39464340 trep @   0.0006 msec (1570000.0/sec): 4 by 4 float matrix multiply

 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
1517500 trep @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return

9352800 reps @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes
46764000 trep @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes

 214200 reps @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes
 214200 reps @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes
 214200 reps @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes
 214200 reps @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes
 214200 reps @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes
1071000 trep @   0.0233 msec ( 42800.0/sec): bcopy of 16 kilobytes

  16840 reps @   0.2959 msec (  3380.0/sec): bcopy of 100 kilobytes
  16840 reps @   0.2959 msec (  3380.0/sec): bcopy of 100 kilobytes
  16840 reps @   0.2958 msec (  3380.0/sec): bcopy of 100 kilobytes
  16840 reps @   0.2959 msec (  3380.0/sec): bcopy of 100 kilobytes
  16840 reps @   0.2958 msec (  3380.0/sec): bcopy of 100 kilobytes
  84200 trep @   0.2959 msec (  3380.0/sec): bcopy of 100 kilobytes

    644 reps @   7.7985 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7977 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.8001 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7969 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7996 msec (   128.0/sec): bcopy of 1 megabyte
   3220 trep @   7.7986 msec (   128.0/sec): bcopy of 1 megabyte

     60 reps @  78.2706 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2619 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2677 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2574 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2512 msec (    12.8/sec): bcopy of 10 megabytes
    300 trep @  78.2617 msec (    12.8/sec): bcopy of 10 megabytes

     68 reps @  76.7411 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7461 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7511 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7420 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7546 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
    340 trep @  76.7470 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)

     64 reps @  81.6599 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6646 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6645 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6610 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6614 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
    320 trep @  81.6623 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)

     60 reps @  83.7568 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.7570 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.7583 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.7591 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.7499 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
    300 trep @  83.7562 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)

16481200 reps @   0.0003 msec (3300000.0/sec): bzero of 256 bytes
16481200 reps @   0.0003 msec (3300000.0/sec): bzero of 256 bytes
16481200 reps @   0.0003 msec (3300000.0/sec): bzero of 256 bytes
16481200 reps @   0.0003 msec (3300000.0/sec): bzero of 256 bytes
16481200 reps @   0.0003 msec (3300000.0/sec): bzero of 256 bytes
82406000 trep @   0.0003 msec (3300000.0/sec): bzero of 256 bytes

 220480 reps @   0.0213 msec ( 47000.0/sec): bzero of 16 kilobytes
 220480 reps @   0.0210 msec ( 47700.0/sec): bzero of 16 kilobytes
 220480 reps @   0.0208 msec ( 48000.0/sec): bzero of 16 kilobytes
 220480 reps @   0.0210 msec ( 47600.0/sec): bzero of 16 kilobytes
 220480 reps @   0.0209 msec ( 47800.0/sec): bzero of 16 kilobytes
1102400 trep @   0.0210 msec ( 47600.0/sec): bzero of 16 kilobytes

  23752 reps @   0.2100 msec (  4760.0/sec): bzero of 100 kilobytes
  23752 reps @   0.2101 msec (  4760.0/sec): bzero of 100 kilobytes
  23752 reps @   0.2101 msec (  4760.0/sec): bzero of 100 kilobytes
  23752 reps @   0.2100 msec (  4760.0/sec): bzero of 100 kilobytes
  23752 reps @   0.2100 msec (  4760.0/sec): bzero of 100 kilobytes
 118760 trep @   0.2100 msec (  4760.0/sec): bzero of 100 kilobytes

   1280 reps @   3.8939 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8941 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8937 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8942 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8961 msec (   257.0/sec): bzero of 1 megabyte
   6400 trep @   3.8944 msec (   257.0/sec): bzero of 1 megabyte

    116 reps @  43.3398 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3435 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3425 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3425 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3411 msec (    23.1/sec): bzero of 10 megabytes
    580 trep @  43.3419 msec (    23.1/sec): bzero of 10 megabytes

    116 reps @  43.3408 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3407 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3420 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3400 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3430 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    580 trep @  43.3413 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)

    120 reps @  42.8044 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7993 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7999 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.8018 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7986 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    600 trep @  42.8008 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)

    120 reps @  43.0684 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0785 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0670 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0739 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0708 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    600 trep @  43.0717 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)

  11336 reps @   0.4411 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  11336 reps @   0.4412 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  11336 reps @   0.4411 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  11336 reps @   0.4411 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  11336 reps @   0.4411 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  56680 trep @   0.4411 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers

    178 reps @  28.2220 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers
    178 reps @  28.2175 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers
    178 reps @  28.2171 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers
    178 reps @  28.2172 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers
    178 reps @  28.2172 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers
    890 trep @  28.2182 msec (    35.4/sec): bcopy then qsort 16,000 32-bit integers

     38 reps @ 130.7057 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers
     38 reps @ 130.6697 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers
     38 reps @ 130.6749 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers
     38 reps @ 130.6704 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers
     38 reps @ 130.6633 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers
    190 trep @ 130.6768 msec (    7.65/sec): bcopy then qsort 64,000 32-bit integers

25302500 reps @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25302500 reps @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25302500 reps @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25302500 reps @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25302500 reps @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
126512500 trep @   0.0002 msec (5060000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

21610000 reps @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)
21610000 reps @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)
21610000 reps @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)
21610000 reps @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)
21610000 reps @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)
108050000 trep @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)

2186500 reps @   0.0023 msec (437000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2186500 reps @   0.0023 msec (435000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2186500 reps @   0.0023 msec (435000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2186500 reps @   0.0023 msec (437000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2186500 reps @   0.0023 msec (438000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
10932500 trep @   0.0023 msec (436000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  27000 reps @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)
  27000 reps @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)
  27000 reps @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)
  27000 reps @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)
  27000 reps @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)
 135000 trep @   0.1872 msec (  5340.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   5.8572 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8554 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8575 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8577 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8603 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   5.8576 msec (   171.0/sec): Tower of Hanoi recursion test (15 deep)

 651000 reps @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 651000 reps @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 651000 reps @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 651000 reps @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 651000 reps @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
3255000 trep @   0.0077 msec (130000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

 215200 reps @   0.0237 msec ( 42200.0/sec): write 80 bytes to a log file
 215200 reps @   0.0239 msec ( 41800.0/sec): write 80 bytes to a log file
 215200 reps @   0.0241 msec ( 41500.0/sec): write 80 bytes to a log file
 215200 reps @   0.0242 msec ( 41300.0/sec): write 80 bytes to a log file
 215200 reps @   0.0259 msec ( 38700.0/sec): write 80 bytes to a log file
1076000 trep @   0.0244 msec ( 41100.0/sec): write 80 bytes to a log file

   1100 reps @   4.1322 msec (   242.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0335 msec (   248.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.1004 msec (   244.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0402 msec (   248.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0181 msec (   249.0/sec): per-file cost of creating 100 files then unlinking them all
   5500 trep @   4.0649 msec (   246.0/sec): per-file cost of creating 100 files then unlinking them all

  62600 reps @   0.0800 msec ( 12500.0/sec): per-file cost of open and immediate close of 100 files
  62600 reps @   0.0801 msec ( 12500.0/sec): per-file cost of open and immediate close of 100 files
  62600 reps @   0.0791 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
  62600 reps @   0.0765 msec ( 13100.0/sec): per-file cost of open and immediate close of 100 files
  62600 reps @   0.0763 msec ( 13100.0/sec): per-file cost of open and immediate close of 100 files
 313000 trep @   0.0784 msec ( 12800.0/sec): per-file cost of open and immediate close of 100 files

  62600 reps @   0.0883 msec ( 11300.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  62600 reps @   0.0844 msec ( 11800.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  62600 reps @   0.0840 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  62600 reps @   0.0840 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  62600 reps @   0.0847 msec ( 11800.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 313000 trep @   0.0851 msec ( 11800.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 344000 reps @   0.0145 msec ( 68800.0/sec): cost of stat'ing current dir
 344000 reps @   0.0147 msec ( 68200.0/sec): cost of stat'ing current dir
 344000 reps @   0.0157 msec ( 63500.0/sec): cost of stat'ing current dir
 344000 reps @   0.0157 msec ( 63500.0/sec): cost of stat'ing current dir
 344000 reps @   0.0157 msec ( 63500.0/sec): cost of stat'ing current dir
1720000 trep @   0.0153 msec ( 65400.0/sec): cost of stat'ing current dir

  78000 reps @   0.0643 msec ( 15600.0/sec): cost of stat'ing 5 component path
  78000 reps @   0.0643 msec ( 15600.0/sec): cost of stat'ing 5 component path
  78000 reps @   0.0656 msec ( 15200.0/sec): cost of stat'ing 5 component path
  78000 reps @   0.0670 msec ( 14900.0/sec): cost of stat'ing 5 component path
  78000 reps @   0.0670 msec ( 14900.0/sec): cost of stat'ing 5 component path
 390000 trep @   0.0656 msec ( 15200.0/sec): cost of stat'ing 5 component path

   2089 reps @   2.3946 msec (   418.0/sec): open directory and stat 100 files in it
   2089 reps @   2.3946 msec (   418.0/sec): open directory and stat 100 files in it
   2089 reps @   2.3945 msec (   418.0/sec): open directory and stat 100 files in it
   2089 reps @   2.4092 msec (   415.0/sec): open directory and stat 100 files in it
   2089 reps @   2.3993 msec (   417.0/sec): open directory and stat 100 files in it
  10445 trep @   2.3985 msec (   417.0/sec): open directory and stat 100 files in it

   1100 reps @   4.4632 msec (   224.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1100 reps @   3.9519 msec (   253.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1100 reps @   3.9272 msec (   255.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1100 reps @   4.0191 msec (   249.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1100 reps @   3.9044 msec (   256.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   5500 trep @   4.0532 msec (   247.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 405900 reps @   0.0123 msec ( 81200.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0123 msec ( 81300.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0123 msec ( 81300.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0121 msec ( 82700.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0121 msec ( 82700.0/sec): ndbm lookup into database with 900 entries
2029500 trep @   0.0122 msec ( 81800.0/sec): ndbm lookup into database with 900 entries

  68400 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  68400 reps @   0.0716 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  68400 reps @   0.0717 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  68400 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  68400 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
 342000 trep @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes

  53200 reps @   0.0928 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  53200 reps @   0.0928 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  53200 reps @   0.0930 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  53200 reps @   0.0930 msec ( 10700.0/sec): 1 kilobyte token passing between two processes using two pipes
  53200 reps @   0.0928 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
 266000 trep @   0.0929 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes

11760000 reps @   0.0004 msec (2370000.0/sec): setjmp/longjmp
11760000 reps @   0.0004 msec (2430000.0/sec): setjmp/longjmp
11760000 reps @   0.0004 msec (2440000.0/sec): setjmp/longjmp
11760000 reps @   0.0004 msec (2440000.0/sec): setjmp/longjmp
11760000 reps @   0.0004 msec (2440000.0/sec): setjmp/longjmp
58800000 trep @   0.0004 msec (2420000.0/sec): setjmp/longjmp

 260000 reps @   0.0192 msec ( 52000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 260000 reps @   0.0192 msec ( 52000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 260000 reps @   0.0193 msec ( 51800.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 260000 reps @   0.0193 msec ( 51800.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 260000 reps @   0.0193 msec ( 51800.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1300000 trep @   0.0193 msec ( 51900.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    265 reps @  19.1815 msec (    52.1/sec): create/destroy client UDP-based SunRPC handle
    265 reps @  19.3393 msec (    51.7/sec): create/destroy client UDP-based SunRPC handle
    265 reps @  19.1102 msec (    52.3/sec): create/destroy client UDP-based SunRPC handle
    265 reps @  19.1087 msec (    52.3/sec): create/destroy client UDP-based SunRPC handle
    265 reps @  19.0197 msec (    52.6/sec): create/destroy client UDP-based SunRPC handle
   1325 trep @  19.1519 msec (    52.2/sec): create/destroy client UDP-based SunRPC handle

  15600 reps @   0.2840 msec (  3520.0/sec): TCP-based SunRPC to negate an integer
  15600 reps @   0.2868 msec (  3490.0/sec): TCP-based SunRPC to negate an integer
  15600 reps @   0.2843 msec (  3520.0/sec): TCP-based SunRPC to negate an integer
  15600 reps @   0.2857 msec (  3500.0/sec): TCP-based SunRPC to negate an integer
  15600 reps @   0.2837 msec (  3520.0/sec): TCP-based SunRPC to negate an integer
  78000 trep @   0.2849 msec (  3510.0/sec): TCP-based SunRPC to negate an integer

  17600 reps @   0.2630 msec (  3800.0/sec): UDP-based SunRPC to negate an integer
  17600 reps @   0.2633 msec (  3800.0/sec): UDP-based SunRPC to negate an integer
  17600 reps @   0.2612 msec (  3830.0/sec): UDP-based SunRPC to negate an integer
  17600 reps @   0.2637 msec (  3790.0/sec): UDP-based SunRPC to negate an integer
  17600 reps @   0.2611 msec (  3830.0/sec): UDP-based SunRPC to negate an integer
  88000 trep @   0.2625 msec (  3810.0/sec): UDP-based SunRPC to negate an integer

  16400 reps @   0.2820 msec (  3550.0/sec): TCP-based SunRPC no-op
  16400 reps @   0.2854 msec (  3500.0/sec): TCP-based SunRPC no-op
  16400 reps @   0.2790 msec (  3580.0/sec): TCP-based SunRPC no-op
  16400 reps @   0.2817 msec (  3550.0/sec): TCP-based SunRPC no-op
  16400 reps @   0.2797 msec (  3570.0/sec): TCP-based SunRPC no-op
  82000 trep @   0.2816 msec (  3550.0/sec): TCP-based SunRPC no-op

  13200 reps @   0.2607 msec (  3840.0/sec): UDP-based SunRPC no-op
  13200 reps @   0.2604 msec (  3840.0/sec): UDP-based SunRPC no-op
  13200 reps @   0.2626 msec (  3810.0/sec): UDP-based SunRPC no-op
  13200 reps @   0.2595 msec (  3850.0/sec): UDP-based SunRPC no-op
  13200 reps @   0.2606 msec (  3840.0/sec): UDP-based SunRPC no-op
  66000 trep @   0.2608 msec (  3830.0/sec): UDP-based SunRPC no-op

2240500 reps @   0.0022 msec (452000.0/sec): getpid system call
2240500 reps @   0.0022 msec (456000.0/sec): getpid system call
2240500 reps @   0.0022 msec (456000.0/sec): getpid system call
2240500 reps @   0.0022 msec (456000.0/sec): getpid system call
2240500 reps @   0.0022 msec (456000.0/sec): getpid system call
11202500 trep @   0.0022 msec (456000.0/sec): getpid system call

 294500 reps @   0.0170 msec ( 58700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0170 msec ( 58800.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0170 msec ( 58700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0170 msec ( 58900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0169 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1472500 trep @   0.0170 msec ( 58800.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 950400 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 950400 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 950400 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 950400 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 950400 reps @   0.0050 msec (199000.0/sec): gettimeofday system call
4752000 trep @   0.0052 msec (192000.0/sec): gettimeofday system call

    800 reps @   6.7730 msec (   148.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.7245 msec (   149.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.7702 msec (   148.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.7252 msec (   149.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.8569 msec (   146.0/sec): fork, child immediately exits, parent waits
   4000 trep @   6.7700 msec (   148.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1011.0102 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0044 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0064 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0044 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0036 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1011.0058 msec (    0.99/sec): sleep for one second (validates test time)

 899800 reps @   0.0056 msec (178000.0/sec): select on no fds with no timeout
 899800 reps @   0.0056 msec (178000.0/sec): select on no fds with no timeout
 899800 reps @   0.0056 msec (178000.0/sec): select on no fds with no timeout
 899800 reps @   0.0056 msec (178000.0/sec): select on no fds with no timeout
 899800 reps @   0.0056 msec (178000.0/sec): select on no fds with no timeout
4499000 trep @   0.0056 msec (178000.0/sec): select on no fds with no timeout

 276100 reps @   0.0181 msec ( 55200.0/sec): select on 16 pipe read fds with immediate timeout
 276100 reps @   0.0181 msec ( 55100.0/sec): select on 16 pipe read fds with immediate timeout
 276100 reps @   0.0181 msec ( 55100.0/sec): select on 16 pipe read fds with immediate timeout
 276100 reps @   0.0182 msec ( 54800.0/sec): select on 16 pipe read fds with immediate timeout
 276100 reps @   0.0182 msec ( 55000.0/sec): select on 16 pipe read fds with immediate timeout
1380500 trep @   0.0182 msec ( 55100.0/sec): select on 16 pipe read fds with immediate timeout

 152400 reps @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout
 152400 reps @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout
 152400 reps @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout
 152400 reps @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout
 152400 reps @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout
 762000 trep @   0.0328 msec ( 30500.0/sec): select on 32 pipe read fds with immediate timeout

 264400 reps @   0.0189 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
 264400 reps @   0.0190 msec ( 52600.0/sec): select on 16 pipe write fds with immediate timeout
 264400 reps @   0.0190 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
 264400 reps @   0.0190 msec ( 52600.0/sec): select on 16 pipe write fds with immediate timeout
 264400 reps @   0.0190 msec ( 52600.0/sec): select on 16 pipe write fds with immediate timeout
1322000 trep @   0.0190 msec ( 52700.0/sec): select on 16 pipe write fds with immediate timeout

 265600 reps @   0.0188 msec ( 53100.0/sec): select on 32 pipe write fds with immediate timeout
 265600 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
 265600 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
 265600 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
 265600 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
1328000 trep @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout

  40300 reps @   0.1241 msec (  8060.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1243 msec (  8050.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1239 msec (  8070.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1241 msec (  8060.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1241 msec (  8060.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 201500 trep @   0.1241 msec (  8060.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    170 reps @  14.9376 msec (    66.9/sec): popen and read from "/bin/echo hello"
    170 reps @  14.9193 msec (    67.0/sec): popen and read from "/bin/echo hello"
    170 reps @  14.9756 msec (    66.8/sec): popen and read from "/bin/echo hello"
    170 reps @  14.9640 msec (    66.8/sec): popen and read from "/bin/echo hello"
    170 reps @  14.9441 msec (    66.9/sec): popen and read from "/bin/echo hello"
    850 trep @  14.9481 msec (    66.9/sec): popen and read from "/bin/echo hello"

  48850 reps @   0.1022 msec (  9780.0/sec): mmap megabyte /dev/zero region 
  48850 reps @   0.1022 msec (  9780.0/sec): mmap megabyte /dev/zero region 
  48850 reps @   0.1022 msec (  9780.0/sec): mmap megabyte /dev/zero region 
  48850 reps @   0.1022 msec (  9780.0/sec): mmap megabyte /dev/zero region 
  48850 reps @   0.1023 msec (  9770.0/sec): mmap megabyte /dev/zero region 
 244250 trep @   0.1022 msec (  9780.0/sec): mmap megabyte /dev/zero region 

    701 reps @   7.1286 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    701 reps @   7.1274 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    701 reps @   7.1274 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    701 reps @   7.1266 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    701 reps @   7.1267 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   3505 trep @   7.1273 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

   1328 reps @   3.7909 msec (   264.0/sec): copy every byte of newly mmaped megabyte file
   1328 reps @   3.8898 msec (   257.0/sec): copy every byte of newly mmaped megabyte file
   1328 reps @   3.9040 msec (   256.0/sec): copy every byte of newly mmaped megabyte file
   1328 reps @   3.9191 msec (   255.0/sec): copy every byte of newly mmaped megabyte file
   1328 reps @   3.9194 msec (   255.0/sec): copy every byte of newly mmaped megabyte file
   6640 trep @   3.8846 msec (   257.0/sec): copy every byte of newly mmaped megabyte file

     53 reps @  59.9523 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     53 reps @  59.9637 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     53 reps @  60.0818 msec (    16.6/sec): compress & uncompress 52 kilobyte text file of numbers
     53 reps @  59.9714 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     53 reps @  60.0093 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
    265 trep @  59.9957 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers

      3 reps @ 197.3717 msec (    5.07/sec): compile ANSI C `hello world' with no special options
      3 reps @ 205.1540 msec (    4.87/sec): compile ANSI C `hello world' with no special options
      3 reps @ 202.3493 msec (    4.94/sec): compile ANSI C `hello world' with no special options
      3 reps @ 199.3643 msec (    5.02/sec): compile ANSI C `hello world' with no special options
      3 reps @ 205.0927 msec (    4.88/sec): compile ANSI C `hello world' with no special options
     15 trep @ 201.8664 msec (    4.95/sec): compile ANSI C `hello world' with no special options

     16 reps @ 312.1988 msec (    3.20/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     16 reps @ 270.1281 msec (    3.70/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     16 reps @ 288.7531 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     16 reps @ 280.6364 msec (    3.56/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     16 reps @ 295.0086 msec (    3.39/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     80 trep @ 289.3450 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     18 reps @ 284.9178 msec (    3.51/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     18 reps @ 291.2515 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     18 reps @ 292.2308 msec (    3.42/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     18 reps @ 290.0107 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     18 reps @ 281.6735 msec (    3.55/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     90 trep @ 288.0169 msec (    3.47/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     16 reps @ 277.5331 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 319.5741 msec (    3.13/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 273.7948 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 276.4671 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 289.5221 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     80 trep @ 287.3782 msec (    3.48/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 269.7194 msec (    3.71/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 306.9198 msec (    3.26/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 286.5834 msec (    3.49/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 278.1738 msec (    3.59/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 291.6807 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 286.6154 msec (    3.49/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 295.4315 msec (    3.38/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 285.8433 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 288.5333 msec (    3.47/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 303.5935 msec (    3.29/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 284.1545 msec (    3.52/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 291.5112 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     32 reps @ 293.4923 msec (    3.41/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 290.1820 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 292.1458 msec (    3.42/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 294.8637 msec (    3.39/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 291.1750 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    160 trep @ 292.3718 msec (    3.42/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      4 reps @ 1443.6805 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1444.3992 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1443.8130 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1448.0650 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1443.3757 msec (    0.69/sec): use dc to output first 1,000 factorials
     20 trep @ 1444.6667 msec (    0.69/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0040 msec (252000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  93328 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93328 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93328 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93328 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93328 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
 466640 trep @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree

      5 reps @ 1050.0870 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1051.2356 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1050.3562 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1049.9680 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1050.5752 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
     25 trep @ 1050.4444 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text

 123728 reps @   0.0404 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123728 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123728 reps @   0.0404 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123728 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123728 reps @   0.0404 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 618640 trep @   0.0404 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree

     10 reps @ 535.3669 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.1967 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.0983 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.3077 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 534.9421 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     50 trep @ 535.1823 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text

