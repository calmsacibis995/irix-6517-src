UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: woodsy
Operating system: IRIX 6.5-ALPHA-1273972120
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
CPU: MIPS R4400 Processor Chip Revision: 6.0
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
1 200 MHZ IP22 Processor
Main memory size: 64 Mbytes
Secondary unified instruction/data cache size: 1 Mbyte on Processor 0
Instruction cache size: 16 Kbytes
Data cache size: 16 Kbytes
Integral SCSI controller 0: Version WD33C93B, revision D
  Disk drive: unit 1 on SCSI controller 0
  Disk drive: unit 2 on SCSI controller 0
Integral SCSI controller 1: Version WD33C93B, revision D
On-board serial ports: 2
On-board bi-directional parallel port
Graphics board: XL
Integral Ethernet: ec0, version 1
Iris Audio Processor: version A2 revision 1.1.0
EISA bus: adapter 0
Uptime: 13:39
Users: 6
Load average: 9.38, 7.22, 5.08
File IO test directory: /usr/tmp
File IO test filesystem: xfs (2101.23 MB total, 276.78 MB available)
Date: Tue Jul 15 19:36:31 1997

 946416 reps @   0.0055 msec (183000.0/sec): 4 by 4 double matrix multiply
 946416 reps @   0.0055 msec (182000.0/sec): 4 by 4 double matrix multiply
 946416 reps @   0.0054 msec (186000.0/sec): 4 by 4 double matrix multiply
 946416 reps @   0.0054 msec (187000.0/sec): 4 by 4 double matrix multiply
 946416 reps @   0.0032 msec (308000.0/sec): 4 by 4 double matrix multiply
4732080 trep @   0.0050 msec (201000.0/sec): 4 by 4 double matrix multiply

1762452 reps @   0.0028 msec (354000.0/sec): 4 by 4 float matrix multiply
1762452 reps @   0.0028 msec (353000.0/sec): 4 by 4 float matrix multiply
1762452 reps @   0.0028 msec (353000.0/sec): 4 by 4 float matrix multiply
1762452 reps @   0.0028 msec (354000.0/sec): 4 by 4 float matrix multiply
1762452 reps @   0.0028 msec (354000.0/sec): 4 by 4 float matrix multiply
8812260 trep @   0.0028 msec (354000.0/sec): 4 by 4 float matrix multiply

 775000 reps @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return
 775000 reps @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return
 775000 reps @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return
 775000 reps @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return
 775000 reps @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return
3875000 trep @   0.0065 msec (155000.0/sec): recurse 250 simple function calls and return

4182400 reps @   0.0012 msec (835000.0/sec): bcopy of 256 bytes
4182400 reps @   0.0012 msec (835000.0/sec): bcopy of 256 bytes
4182400 reps @   0.0012 msec (834000.0/sec): bcopy of 256 bytes
4182400 reps @   0.0012 msec (834000.0/sec): bcopy of 256 bytes
4182400 reps @   0.0012 msec (835000.0/sec): bcopy of 256 bytes
20912000 trep @   0.0012 msec (835000.0/sec): bcopy of 256 bytes

  43800 reps @   0.1130 msec (  8850.0/sec): bcopy of 16 kilobytes
  43800 reps @   0.1129 msec (  8850.0/sec): bcopy of 16 kilobytes
  43800 reps @   0.1139 msec (  8780.0/sec): bcopy of 16 kilobytes
  43800 reps @   0.1131 msec (  8840.0/sec): bcopy of 16 kilobytes
  43800 reps @   0.1130 msec (  8850.0/sec): bcopy of 16 kilobytes
 219000 trep @   0.1132 msec (  8840.0/sec): bcopy of 16 kilobytes

   4604 reps @   1.0793 msec (   927.0/sec): bcopy of 100 kilobytes
   4604 reps @   1.0845 msec (   922.0/sec): bcopy of 100 kilobytes
   4604 reps @   1.0798 msec (   926.0/sec): bcopy of 100 kilobytes
   4604 reps @   1.0810 msec (   925.0/sec): bcopy of 100 kilobytes
   4604 reps @   1.0799 msec (   926.0/sec): bcopy of 100 kilobytes
  23020 trep @   1.0809 msec (   925.0/sec): bcopy of 100 kilobytes

     76 reps @  58.1997 msec (    17.2/sec): bcopy of 1 megabyte
     76 reps @  58.1517 msec (    17.2/sec): bcopy of 1 megabyte
     76 reps @  58.1121 msec (    17.2/sec): bcopy of 1 megabyte
     76 reps @  58.1804 msec (    17.2/sec): bcopy of 1 megabyte
     76 reps @  58.2893 msec (    17.2/sec): bcopy of 1 megabyte
    380 trep @  58.1866 msec (    17.2/sec): bcopy of 1 megabyte

      8 reps @ 668.8840 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 669.0897 msec (    1.49/sec): bcopy of 10 megabytes
      8 reps @ 668.7780 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 669.6190 msec (    1.49/sec): bcopy of 10 megabytes
      8 reps @ 669.6089 msec (    1.49/sec): bcopy of 10 megabytes
     40 trep @ 669.1959 msec (    1.49/sec): bcopy of 10 megabytes

     20 reps @ 297.0987 msec (    3.37/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 297.3274 msec (    3.36/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 296.9962 msec (    3.37/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 297.3902 msec (    3.36/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 297.1190 msec (    3.37/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 297.1863 msec (    3.36/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 408.7484 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.6148 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.5817 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 409.3420 msec (    2.44/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.5863 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 408.7747 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 393.4348 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 393.7949 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 394.1934 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 393.7187 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 393.7004 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 393.7684 msec (    2.54/sec): bcopy of 10 megabytes (dword mis-aligned)

6728800 reps @   0.0007 msec (1340000.0/sec): bzero of 256 bytes
6728800 reps @   0.0007 msec (1340000.0/sec): bzero of 256 bytes
6728800 reps @   0.0007 msec (1340000.0/sec): bzero of 256 bytes
6728800 reps @   0.0007 msec (1340000.0/sec): bzero of 256 bytes
6728800 reps @   0.0007 msec (1340000.0/sec): bzero of 256 bytes
33644000 trep @   0.0007 msec (1340000.0/sec): bzero of 256 bytes

  53760 reps @   0.0932 msec ( 10700.0/sec): bzero of 16 kilobytes
  53760 reps @   0.0931 msec ( 10700.0/sec): bzero of 16 kilobytes
  53760 reps @   0.0931 msec ( 10700.0/sec): bzero of 16 kilobytes
  53760 reps @   0.0932 msec ( 10700.0/sec): bzero of 16 kilobytes
  53760 reps @   0.0931 msec ( 10700.0/sec): bzero of 16 kilobytes
 268800 trep @   0.0932 msec ( 10700.0/sec): bzero of 16 kilobytes

   8484 reps @   0.5879 msec (  1700.0/sec): bzero of 100 kilobytes
   8484 reps @   0.5881 msec (  1700.0/sec): bzero of 100 kilobytes
   8484 reps @   0.5879 msec (  1700.0/sec): bzero of 100 kilobytes
   8484 reps @   0.5877 msec (  1700.0/sec): bzero of 100 kilobytes
   8484 reps @   0.5886 msec (  1700.0/sec): bzero of 100 kilobytes
  42420 trep @   0.5880 msec (  1700.0/sec): bzero of 100 kilobytes

    320 reps @  16.0138 msec (    62.4/sec): bzero of 1 megabyte
    320 reps @  16.0248 msec (    62.4/sec): bzero of 1 megabyte
    320 reps @  16.0163 msec (    62.4/sec): bzero of 1 megabyte
    320 reps @  16.0047 msec (    62.5/sec): bzero of 1 megabyte
    320 reps @  16.0085 msec (    62.5/sec): bzero of 1 megabyte
   1600 trep @  16.0136 msec (    62.4/sec): bzero of 1 megabyte

     32 reps @ 160.2814 msec (    6.24/sec): bzero of 10 megabytes
     32 reps @ 160.3426 msec (    6.24/sec): bzero of 10 megabytes
     32 reps @ 160.2720 msec (    6.24/sec): bzero of 10 megabytes
     32 reps @ 160.1115 msec (    6.25/sec): bzero of 10 megabytes
     32 reps @ 160.1970 msec (    6.24/sec): bzero of 10 megabytes
    160 trep @ 160.2409 msec (    6.24/sec): bzero of 10 megabytes

     32 reps @ 160.2564 msec (    6.24/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 160.1781 msec (    6.24/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 160.2424 msec (    6.24/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 160.1674 msec (    6.24/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 160.0787 msec (    6.25/sec): bzero of 10 megabytes (cacheline-aligned)
    160 trep @ 160.1846 msec (    6.24/sec): bzero of 10 megabytes (cacheline-aligned)

     32 reps @ 160.1847 msec (    6.24/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 160.6718 msec (    6.22/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 160.2521 msec (    6.24/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 160.3472 msec (    6.24/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 160.2965 msec (    6.24/sec): bzero of 10 megabytes (word mis-aligned)
    160 trep @ 160.3505 msec (    6.24/sec): bzero of 10 megabytes (word mis-aligned)

     32 reps @ 160.5698 msec (    6.23/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.9550 msec (    6.25/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.4605 msec (    6.27/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.4202 msec (    6.27/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.8002 msec (    6.26/sec): bzero of 10 megabytes (dword mis-aligned)
    160 trep @ 159.8411 msec (    6.26/sec): bzero of 10 megabytes (dword mis-aligned)

   6879 reps @   0.7316 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers
   6879 reps @   0.7293 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers
   6879 reps @   0.7306 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers
   6879 reps @   0.7295 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers
   6879 reps @   0.7292 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers
  34395 trep @   0.7300 msec (  1370.0/sec): bcopy then qsort 400 32-bit integers

    105 reps @  47.1570 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers
    105 reps @  47.1220 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers
    105 reps @  47.2050 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers
    105 reps @  47.1817 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers
    105 reps @  47.1373 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers
    525 trep @  47.1606 msec (    21.2/sec): bcopy then qsort 16,000 32-bit integers

     22 reps @ 224.5099 msec (    4.45/sec): bcopy then qsort 64,000 32-bit integers
     22 reps @ 224.5428 msec (    4.45/sec): bcopy then qsort 64,000 32-bit integers
     22 reps @ 224.4381 msec (    4.46/sec): bcopy then qsort 64,000 32-bit integers
     22 reps @ 224.4647 msec (    4.46/sec): bcopy then qsort 64,000 32-bit integers
     22 reps @ 224.8649 msec (    4.45/sec): bcopy then qsort 64,000 32-bit integers
    110 trep @ 224.5641 msec (    4.45/sec): bcopy then qsort 64,000 32-bit integers

6510000 reps @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6510000 reps @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6510000 reps @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6510000 reps @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6510000 reps @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
32550000 trep @   0.0008 msec (1300000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

4770000 reps @   0.0010 msec (953000.0/sec): basic double trigonometric function (sin/cos/tan)
4770000 reps @   0.0010 msec (954000.0/sec): basic double trigonometric function (sin/cos/tan)
4770000 reps @   0.0010 msec (954000.0/sec): basic double trigonometric function (sin/cos/tan)
4770000 reps @   0.0010 msec (953000.0/sec): basic double trigonometric function (sin/cos/tan)
4770000 reps @   0.0010 msec (955000.0/sec): basic double trigonometric function (sin/cos/tan)
23850000 trep @   0.0010 msec (954000.0/sec): basic double trigonometric function (sin/cos/tan)

1160500 reps @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1160500 reps @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1160500 reps @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1160500 reps @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1160500 reps @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
5802500 trep @   0.0043 msec (232000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  15000 reps @   0.3347 msec (  2990.0/sec): Tower of Hanoi recursion test (10 deep)
  15000 reps @   0.3348 msec (  2990.0/sec): Tower of Hanoi recursion test (10 deep)
  15000 reps @   0.3351 msec (  2980.0/sec): Tower of Hanoi recursion test (10 deep)
  15000 reps @   0.3348 msec (  2990.0/sec): Tower of Hanoi recursion test (10 deep)
  15000 reps @   0.3347 msec (  2990.0/sec): Tower of Hanoi recursion test (10 deep)
  75000 trep @   0.3348 msec (  2990.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  10.7186 msec (    93.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  10.7224 msec (    93.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  10.7293 msec (    93.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  10.7241 msec (    93.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  10.7236 msec (    93.3/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  10.7236 msec (    93.3/sec): Tower of Hanoi recursion test (15 deep)

 194500 reps @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 194500 reps @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 194500 reps @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 194500 reps @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 194500 reps @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 972500 trep @   0.0257 msec ( 38900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  53200 reps @   0.0969 msec ( 10300.0/sec): write 80 bytes to a log file
  53200 reps @   0.0985 msec ( 10200.0/sec): write 80 bytes to a log file
  53200 reps @   0.1008 msec (  9920.0/sec): write 80 bytes to a log file
  53200 reps @   0.1045 msec (  9570.0/sec): write 80 bytes to a log file
  53200 reps @   0.1057 msec (  9460.0/sec): write 80 bytes to a log file
 266000 trep @   0.1013 msec (  9870.0/sec): write 80 bytes to a log file

    800 reps @   5.1432 msec (   194.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   4.6694 msec (   214.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   4.6771 msec (   214.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   4.6867 msec (   213.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   4.7190 msec (   212.0/sec): per-file cost of creating 100 files then unlinking them all
   4000 trep @   4.7791 msec (   209.0/sec): per-file cost of creating 100 files then unlinking them all

  26700 reps @   0.1880 msec (  5320.0/sec): per-file cost of open and immediate close of 100 files
  26700 reps @   0.1882 msec (  5310.0/sec): per-file cost of open and immediate close of 100 files
  26700 reps @   0.1882 msec (  5310.0/sec): per-file cost of open and immediate close of 100 files
  26700 reps @   0.1879 msec (  5320.0/sec): per-file cost of open and immediate close of 100 files
  26700 reps @   0.1879 msec (  5320.0/sec): per-file cost of open and immediate close of 100 files
 133500 trep @   0.1881 msec (  5320.0/sec): per-file cost of open and immediate close of 100 files

  38000 reps @   0.1428 msec (  7000.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  38000 reps @   0.1323 msec (  7560.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  38000 reps @   0.1325 msec (  7550.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  38000 reps @   0.1332 msec (  7510.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  38000 reps @   0.1322 msec (  7560.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 190000 trep @   0.1346 msec (  7430.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 130500 reps @   0.0385 msec ( 26000.0/sec): cost of stat'ing current dir
 130500 reps @   0.0388 msec ( 25800.0/sec): cost of stat'ing current dir
 130500 reps @   0.0388 msec ( 25700.0/sec): cost of stat'ing current dir
 130500 reps @   0.0389 msec ( 25700.0/sec): cost of stat'ing current dir
 130500 reps @   0.0390 msec ( 25600.0/sec): cost of stat'ing current dir
 652500 trep @   0.0388 msec ( 25800.0/sec): cost of stat'ing current dir

  36000 reps @   0.1396 msec (  7160.0/sec): cost of stat'ing 5 component path
  36000 reps @   0.1396 msec (  7160.0/sec): cost of stat'ing 5 component path
  36000 reps @   0.1410 msec (  7090.0/sec): cost of stat'ing 5 component path
  36000 reps @   0.1409 msec (  7100.0/sec): cost of stat'ing 5 component path
  36000 reps @   0.1442 msec (  6940.0/sec): cost of stat'ing 5 component path
 180000 trep @   0.1411 msec (  7090.0/sec): cost of stat'ing 5 component path

    469 reps @   5.0763 msec (   197.0/sec): open directory and stat 100 files in it
    469 reps @   5.0675 msec (   197.0/sec): open directory and stat 100 files in it
    469 reps @   5.0675 msec (   197.0/sec): open directory and stat 100 files in it
    469 reps @   5.0670 msec (   197.0/sec): open directory and stat 100 files in it
    469 reps @   5.0674 msec (   197.0/sec): open directory and stat 100 files in it
   2345 trep @   5.0691 msec (   197.0/sec): open directory and stat 100 files in it

   1200 reps @   4.5898 msec (   218.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.3953 msec (   228.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.7862 msec (   209.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.5896 msec (   218.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.4191 msec (   226.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   6000 trep @   4.5560 msec (   219.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 155700 reps @   0.0325 msec ( 30800.0/sec): ndbm lookup into database with 900 entries
 155700 reps @   0.0325 msec ( 30700.0/sec): ndbm lookup into database with 900 entries
 155700 reps @   0.0321 msec ( 31100.0/sec): ndbm lookup into database with 900 entries
 155700 reps @   0.0321 msec ( 31200.0/sec): ndbm lookup into database with 900 entries
 155700 reps @   0.0318 msec ( 31400.0/sec): ndbm lookup into database with 900 entries
 778500 trep @   0.0322 msec ( 31100.0/sec): ndbm lookup into database with 900 entries

  38800 reps @   0.1292 msec (  7740.0/sec): 1 byte token passing between two processes using two pipes
  38800 reps @   0.1313 msec (  7620.0/sec): 1 byte token passing between two processes using two pipes
  38800 reps @   0.1312 msec (  7620.0/sec): 1 byte token passing between two processes using two pipes
  38800 reps @   0.1311 msec (  7630.0/sec): 1 byte token passing between two processes using two pipes
  38800 reps @   0.1311 msec (  7630.0/sec): 1 byte token passing between two processes using two pipes
 194000 trep @   0.1308 msec (  7650.0/sec): 1 byte token passing between two processes using two pipes

  31200 reps @   0.1602 msec (  6240.0/sec): 1 kilobyte token passing between two processes using two pipes
  31200 reps @   0.1623 msec (  6160.0/sec): 1 kilobyte token passing between two processes using two pipes
  31200 reps @   0.1624 msec (  6160.0/sec): 1 kilobyte token passing between two processes using two pipes
  31200 reps @   0.1622 msec (  6160.0/sec): 1 kilobyte token passing between two processes using two pipes
  31200 reps @   0.1624 msec (  6160.0/sec): 1 kilobyte token passing between two processes using two pipes
 156000 trep @   0.1619 msec (  6180.0/sec): 1 kilobyte token passing between two processes using two pipes

9448000 reps @   0.0005 msec (1890000.0/sec): setjmp/longjmp
9448000 reps @   0.0005 msec (1890000.0/sec): setjmp/longjmp
9448000 reps @   0.0005 msec (1890000.0/sec): setjmp/longjmp
9448000 reps @   0.0005 msec (1890000.0/sec): setjmp/longjmp
9448000 reps @   0.0005 msec (1890000.0/sec): setjmp/longjmp
47240000 trep @   0.0005 msec (1890000.0/sec): setjmp/longjmp

 100000 reps @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 100000 reps @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 100000 reps @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 100000 reps @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 100000 reps @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 500000 trep @   0.0513 msec ( 19500.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1495 reps @   3.3343 msec (   300.0/sec): create/destroy client UDP-based SunRPC handle
   1495 reps @   3.3371 msec (   300.0/sec): create/destroy client UDP-based SunRPC handle
   1495 reps @   3.3362 msec (   300.0/sec): create/destroy client UDP-based SunRPC handle
   1495 reps @   3.3320 msec (   300.0/sec): create/destroy client UDP-based SunRPC handle
   1495 reps @   3.3471 msec (   299.0/sec): create/destroy client UDP-based SunRPC handle
   7475 trep @   3.3373 msec (   300.0/sec): create/destroy client UDP-based SunRPC handle

   7200 reps @   0.7194 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7193 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7181 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7193 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7202 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
  36000 trep @   0.7193 msec (  1390.0/sec): TCP-based SunRPC to negate an integer

   7200 reps @   0.6582 msec (  1520.0/sec): UDP-based SunRPC to negate an integer
   7200 reps @   0.6578 msec (  1520.0/sec): UDP-based SunRPC to negate an integer
   7200 reps @   0.6586 msec (  1520.0/sec): UDP-based SunRPC to negate an integer
   7200 reps @   0.6578 msec (  1520.0/sec): UDP-based SunRPC to negate an integer
   7200 reps @   0.6580 msec (  1520.0/sec): UDP-based SunRPC to negate an integer
  36000 trep @   0.6581 msec (  1520.0/sec): UDP-based SunRPC to negate an integer

   6800 reps @   0.7165 msec (  1400.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7168 msec (  1400.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7166 msec (  1400.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7171 msec (  1390.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7160 msec (  1400.0/sec): TCP-based SunRPC no-op
  34000 trep @   0.7166 msec (  1400.0/sec): TCP-based SunRPC no-op

   7600 reps @   0.6366 msec (  1570.0/sec): UDP-based SunRPC no-op
   7600 reps @   0.6363 msec (  1570.0/sec): UDP-based SunRPC no-op
   7600 reps @   0.6368 msec (  1570.0/sec): UDP-based SunRPC no-op
   7600 reps @   0.6364 msec (  1570.0/sec): UDP-based SunRPC no-op
   7600 reps @   0.6361 msec (  1570.0/sec): UDP-based SunRPC no-op
  38000 trep @   0.6365 msec (  1570.0/sec): UDP-based SunRPC no-op

1412500 reps @   0.0036 msec (280000.0/sec): getpid system call
1412500 reps @   0.0035 msec (282000.0/sec): getpid system call
1412500 reps @   0.0035 msec (282000.0/sec): getpid system call
1412500 reps @   0.0035 msec (282000.0/sec): getpid system call
1412500 reps @   0.0035 msec (282000.0/sec): getpid system call
7062500 trep @   0.0036 msec (282000.0/sec): getpid system call

 160500 reps @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 160500 reps @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 160500 reps @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 160500 reps @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 160500 reps @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 802500 trep @   0.0313 msec ( 31900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 604400 reps @   0.0083 msec (121000.0/sec): gettimeofday system call
 604400 reps @   0.0083 msec (120000.0/sec): gettimeofday system call
 604400 reps @   0.0083 msec (121000.0/sec): gettimeofday system call
 604400 reps @   0.0083 msec (121000.0/sec): gettimeofday system call
 604400 reps @   0.0083 msec (121000.0/sec): gettimeofday system call
3022000 trep @   0.0083 msec (121000.0/sec): gettimeofday system call

    250 reps @  24.2481 msec (    41.2/sec): fork, child immediately exits, parent waits
    250 reps @  24.1365 msec (    41.4/sec): fork, child immediately exits, parent waits
    250 reps @  23.5542 msec (    42.5/sec): fork, child immediately exits, parent waits
    250 reps @  24.3583 msec (    41.1/sec): fork, child immediately exits, parent waits
    250 reps @  24.9621 msec (    40.1/sec): fork, child immediately exits, parent waits
   1250 trep @  24.2519 msec (    41.2/sec): fork, child immediately exits, parent waits

      5 reps @ 1011.0206 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0036 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0124 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0086 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0110 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1011.0112 msec (    0.99/sec): sleep for one second (validates test time)

 401000 reps @   0.0125 msec ( 80200.0/sec): select on no fds with no timeout
 401000 reps @   0.0125 msec ( 80200.0/sec): select on no fds with no timeout
 401000 reps @   0.0125 msec ( 80200.0/sec): select on no fds with no timeout
 401000 reps @   0.0125 msec ( 80200.0/sec): select on no fds with no timeout
 401000 reps @   0.0125 msec ( 80300.0/sec): select on no fds with no timeout
2005000 trep @   0.0125 msec ( 80200.0/sec): select on no fds with no timeout

  95700 reps @   0.0523 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout
  95700 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout
  95700 reps @   0.0523 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout
  95700 reps @   0.0523 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout
  95700 reps @   0.0523 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout
 478500 trep @   0.0523 msec ( 19100.0/sec): select on 16 pipe read fds with immediate timeout

  55200 reps @   0.0906 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout
  55200 reps @   0.0906 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout
  55200 reps @   0.0908 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout
  55200 reps @   0.0906 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout
  55200 reps @   0.0906 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout
 276000 trep @   0.0907 msec ( 11000.0/sec): select on 32 pipe read fds with immediate timeout

 104500 reps @   0.0476 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout
 104500 reps @   0.0475 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout
 104500 reps @   0.0475 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout
 104500 reps @   0.0476 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout
 104500 reps @   0.0475 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout
 522500 trep @   0.0475 msec ( 21000.0/sec): select on 16 pipe write fds with immediate timeout

 105500 reps @   0.0473 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout
 105500 reps @   0.0473 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout
 105500 reps @   0.0473 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout
 105500 reps @   0.0473 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout
 105500 reps @   0.0474 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout
 527500 trep @   0.0473 msec ( 21100.0/sec): select on 32 pipe write fds with immediate timeout

  11100 reps @   0.4663 msec (  2140.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11100 reps @   0.4532 msec (  2210.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11100 reps @   0.4537 msec (  2200.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11100 reps @   0.4530 msec (  2210.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11100 reps @   0.4531 msec (  2210.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  55500 trep @   0.4558 msec (  2190.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    100 reps @  51.2281 msec (    19.5/sec): popen and read from "/bin/echo hello"
    100 reps @  51.3680 msec (    19.5/sec): popen and read from "/bin/echo hello"
    100 reps @  51.6412 msec (    19.4/sec): popen and read from "/bin/echo hello"
    100 reps @  51.4958 msec (    19.4/sec): popen and read from "/bin/echo hello"
    100 reps @  51.4615 msec (    19.4/sec): popen and read from "/bin/echo hello"
    500 trep @  51.4389 msec (    19.4/sec): popen and read from "/bin/echo hello"

  14700 reps @   0.3394 msec (  2950.0/sec): mmap megabyte /dev/zero region 
  14700 reps @   0.3389 msec (  2950.0/sec): mmap megabyte /dev/zero region 
  14700 reps @   0.3384 msec (  2960.0/sec): mmap megabyte /dev/zero region 
  14700 reps @   0.3390 msec (  2950.0/sec): mmap megabyte /dev/zero region 
  14700 reps @   0.3385 msec (  2950.0/sec): mmap megabyte /dev/zero region 
  73500 trep @   0.3388 msec (  2950.0/sec): mmap megabyte /dev/zero region 

    152 reps @  33.1032 msec (    30.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    152 reps @  33.1679 msec (    30.1/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    152 reps @  33.1339 msec (    30.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    152 reps @  33.0973 msec (    30.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    152 reps @  33.1399 msec (    30.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    760 trep @  33.1285 msec (    30.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    239 reps @  20.8525 msec (    48.0/sec): copy every byte of newly mmaped megabyte file
    239 reps @  20.8840 msec (    47.9/sec): copy every byte of newly mmaped megabyte file
    239 reps @  21.3788 msec (    46.8/sec): copy every byte of newly mmaped megabyte file
    239 reps @  21.7782 msec (    45.9/sec): copy every byte of newly mmaped megabyte file
    239 reps @  21.7533 msec (    46.0/sec): copy every byte of newly mmaped megabyte file
   1195 trep @  21.3294 msec (    46.9/sec): copy every byte of newly mmaped megabyte file

     25 reps @ 182.1388 msec (    5.49/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 180.5811 msec (    5.54/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 181.2771 msec (    5.52/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 182.2014 msec (    5.49/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 180.4662 msec (    5.54/sec): compress & uncompress 52 kilobyte text file of numbers
    125 trep @ 181.3329 msec (    5.51/sec): compress & uncompress 52 kilobyte text file of numbers

      4 reps @ 598.4552 msec (    1.67/sec): compile ANSI C `hello world' with no special options
      4 reps @ 596.1930 msec (    1.68/sec): compile ANSI C `hello world' with no special options
      4 reps @ 604.6432 msec (    1.65/sec): compile ANSI C `hello world' with no special options
      4 reps @ 608.7537 msec (    1.64/sec): compile ANSI C `hello world' with no special options
      4 reps @ 594.6983 msec (    1.68/sec): compile ANSI C `hello world' with no special options
     20 trep @ 600.5487 msec (    1.67/sec): compile ANSI C `hello world' with no special options

    118 reps @ 859.4660 msec (    1.16/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    118 reps @ 848.4164 msec (    1.18/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    118 reps @ 847.4844 msec (    1.18/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    118 reps @ 852.4143 msec (    1.17/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    118 reps @ 853.2326 msec (    1.17/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    590 trep @ 852.2028 msec (    1.17/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

      6 reps @ 813.9642 msec (    1.23/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      6 reps @ 839.8112 msec (    1.19/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      6 reps @ 926.2422 msec (    1.08/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      6 reps @ 838.3410 msec (    1.19/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      6 reps @ 769.9885 msec (    1.30/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     30 trep @ 837.6694 msec (    1.19/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

      8 reps @ 836.8396 msec (    1.19/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 925.7012 msec (    1.08/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 861.2339 msec (    1.16/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 984.9765 msec (    1.02/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 894.1000 msec (    1.12/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 trep @ 900.5702 msec (    1.11/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

      8 reps @ 832.5312 msec (    1.20/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 908.0285 msec (    1.10/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 870.6969 msec (    1.15/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 796.2515 msec (    1.26/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 949.9949 msec (    1.05/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     40 trep @ 871.5006 msec (    1.15/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

