UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: dropin
Operating system: IRIX64 6.2
Compiler version: 6.21
Instruction set: MIPS 4
Application binary interface: N32
Iris Audio Processor: version A2 revision 1.1.0
1 195 MHZ IP28 Processor
CPU: MIPS R10000 Processor Chip Revision: 2.4
FPU: MIPS R10010 Floating Point Chip Revision: 0.0
On-board serial ports: 2
On-board bi-directional parallel port
Data cache size: 32 Kbytes
Instruction cache size: 32 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Main memory size: 64 Mbytes
EISA bus: adapter 0
Integral Ethernet: ec0, version 1
Integral SCSI controller 1: Version WD33C93B, revision D
Integral SCSI controller 0: Version WD33C93B, revision D
  Disk drive: unit 1 on SCSI controller 0
Graphics board: High Impact
Uptime: 21 days,  6:04
Users: 1
Load average: 0.56, 0.47, 0.26
File IO test directory: /usr/tmp
File IO test filesystem: xfs (2017.18 MB total, 173.12 MB available)
Date: Tue Mar 18 03:38:56 1997

7728552 reps @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply
7728552 reps @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply
7728552 reps @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply
7728552 reps @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply
7728552 reps @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply
38642760 trep @   0.0006 msec (1550000.0/sec): 4 by 4 double matrix multiply

7815660 reps @   0.0006 msec (1590000.0/sec): 4 by 4 float matrix multiply
7815660 reps @   0.0006 msec (1590000.0/sec): 4 by 4 float matrix multiply
7815660 reps @   0.0006 msec (1580000.0/sec): 4 by 4 float matrix multiply
7815660 reps @   0.0006 msec (1590000.0/sec): 4 by 4 float matrix multiply
7815660 reps @   0.0006 msec (1580000.0/sec): 4 by 4 float matrix multiply
39078300 trep @   0.0006 msec (1580000.0/sec): 4 by 4 float matrix multiply

 213500 reps @   0.0233 msec ( 43000.0/sec): recurse 250 simple function calls and return
 213500 reps @   0.0233 msec ( 43000.0/sec): recurse 250 simple function calls and return
 213500 reps @   0.0232 msec ( 43000.0/sec): recurse 250 simple function calls and return
 213500 reps @   0.0232 msec ( 43000.0/sec): recurse 250 simple function calls and return
 213500 reps @   0.0233 msec ( 43000.0/sec): recurse 250 simple function calls and return
1067500 trep @   0.0233 msec ( 43000.0/sec): recurse 250 simple function calls and return

9173200 reps @   0.0005 msec (1870000.0/sec): bcopy of 256 bytes
9173200 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9173200 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9173200 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9173200 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
45866000 trep @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes

 190240 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 190240 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 190240 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 190240 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 190240 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 951200 trep @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes

  16536 reps @   0.2980 msec (  3360.0/sec): bcopy of 100 kilobytes
  16536 reps @   0.2988 msec (  3350.0/sec): bcopy of 100 kilobytes
  16536 reps @   0.2989 msec (  3350.0/sec): bcopy of 100 kilobytes
  16536 reps @   0.2983 msec (  3350.0/sec): bcopy of 100 kilobytes
  16536 reps @   0.2984 msec (  3350.0/sec): bcopy of 100 kilobytes
  82680 trep @   0.2985 msec (  3350.0/sec): bcopy of 100 kilobytes

    220 reps @  21.1697 msec (    47.2/sec): bcopy of 1 megabyte
    220 reps @  21.1632 msec (    47.3/sec): bcopy of 1 megabyte
    220 reps @  21.1996 msec (    47.2/sec): bcopy of 1 megabyte
    220 reps @  21.1892 msec (    47.2/sec): bcopy of 1 megabyte
    220 reps @  21.1766 msec (    47.2/sec): bcopy of 1 megabyte
   1100 trep @  21.1796 msec (    47.2/sec): bcopy of 1 megabyte

     24 reps @ 211.6810 msec (    4.72/sec): bcopy of 10 megabytes
     24 reps @ 211.7739 msec (    4.72/sec): bcopy of 10 megabytes
     24 reps @ 212.0134 msec (    4.72/sec): bcopy of 10 megabytes
     24 reps @ 212.2709 msec (    4.71/sec): bcopy of 10 megabytes
     24 reps @ 211.9602 msec (    4.72/sec): bcopy of 10 megabytes
    120 trep @ 211.9399 msec (    4.72/sec): bcopy of 10 megabytes

     24 reps @ 215.4395 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)
     24 reps @ 215.3898 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)
     24 reps @ 215.4210 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)
     24 reps @ 215.6046 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)
     24 reps @ 215.3824 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)
    120 trep @ 215.4475 msec (    4.64/sec): bcopy of 10 megabytes (cacheline-aligned)

     24 reps @ 212.0118 msec (    4.72/sec): bcopy of 10 megabytes (word mis-aligned)
     24 reps @ 211.9683 msec (    4.72/sec): bcopy of 10 megabytes (word mis-aligned)
     24 reps @ 212.0090 msec (    4.72/sec): bcopy of 10 megabytes (word mis-aligned)
     24 reps @ 212.1499 msec (    4.71/sec): bcopy of 10 megabytes (word mis-aligned)
     24 reps @ 212.0235 msec (    4.72/sec): bcopy of 10 megabytes (word mis-aligned)
    120 trep @ 212.0325 msec (    4.72/sec): bcopy of 10 megabytes (word mis-aligned)

     24 reps @ 213.0662 msec (    4.69/sec): bcopy of 10 megabytes (dword mis-aligned)
     24 reps @ 212.9228 msec (    4.70/sec): bcopy of 10 megabytes (dword mis-aligned)
     24 reps @ 212.6378 msec (    4.70/sec): bcopy of 10 megabytes (dword mis-aligned)
     24 reps @ 212.5824 msec (    4.70/sec): bcopy of 10 megabytes (dword mis-aligned)
     24 reps @ 212.5984 msec (    4.70/sec): bcopy of 10 megabytes (dword mis-aligned)
    120 trep @ 212.7615 msec (    4.70/sec): bcopy of 10 megabytes (dword mis-aligned)

18875600 reps @   0.0003 msec (3840000.0/sec): bzero of 256 bytes
18875600 reps @   0.0003 msec (3830000.0/sec): bzero of 256 bytes
18875600 reps @   0.0003 msec (3830000.0/sec): bzero of 256 bytes
18875600 reps @   0.0003 msec (3840000.0/sec): bzero of 256 bytes
18875600 reps @   0.0003 msec (3830000.0/sec): bzero of 256 bytes
94378000 trep @   0.0003 msec (3830000.0/sec): bzero of 256 bytes

 458400 reps @   0.0109 msec ( 91600.0/sec): bzero of 16 kilobytes
 458400 reps @   0.0109 msec ( 91600.0/sec): bzero of 16 kilobytes
 458400 reps @   0.0109 msec ( 91500.0/sec): bzero of 16 kilobytes
 458400 reps @   0.0109 msec ( 91600.0/sec): bzero of 16 kilobytes
 458400 reps @   0.0109 msec ( 91600.0/sec): bzero of 16 kilobytes
2292000 trep @   0.0109 msec ( 91600.0/sec): bzero of 16 kilobytes

  24112 reps @   0.2043 msec (  4890.0/sec): bzero of 100 kilobytes
  24112 reps @   0.2042 msec (  4900.0/sec): bzero of 100 kilobytes
  24112 reps @   0.2041 msec (  4900.0/sec): bzero of 100 kilobytes
  24112 reps @   0.2043 msec (  4890.0/sec): bzero of 100 kilobytes
  24112 reps @   0.2042 msec (  4900.0/sec): bzero of 100 kilobytes
 120560 trep @   0.2042 msec (  4900.0/sec): bzero of 100 kilobytes

    400 reps @  13.1524 msec (    76.0/sec): bzero of 1 megabyte
    400 reps @  13.1339 msec (    76.1/sec): bzero of 1 megabyte
    400 reps @  13.1402 msec (    76.1/sec): bzero of 1 megabyte
    400 reps @  13.1590 msec (    76.0/sec): bzero of 1 megabyte
    400 reps @  13.1514 msec (    76.0/sec): bzero of 1 megabyte
   2000 trep @  13.1474 msec (    76.1/sec): bzero of 1 megabyte

     40 reps @ 131.4530 msec (    7.61/sec): bzero of 10 megabytes
     40 reps @ 131.3089 msec (    7.62/sec): bzero of 10 megabytes
     40 reps @ 131.3338 msec (    7.61/sec): bzero of 10 megabytes
     40 reps @ 131.3080 msec (    7.62/sec): bzero of 10 megabytes
     40 reps @ 131.4102 msec (    7.61/sec): bzero of 10 megabytes
    200 trep @ 131.3628 msec (    7.61/sec): bzero of 10 megabytes

     40 reps @ 131.4217 msec (    7.61/sec): bzero of 10 megabytes (cacheline-aligned)
     40 reps @ 131.2805 msec (    7.62/sec): bzero of 10 megabytes (cacheline-aligned)
     40 reps @ 131.3065 msec (    7.62/sec): bzero of 10 megabytes (cacheline-aligned)
     40 reps @ 131.2998 msec (    7.62/sec): bzero of 10 megabytes (cacheline-aligned)
     40 reps @ 131.3961 msec (    7.61/sec): bzero of 10 megabytes (cacheline-aligned)
    200 trep @ 131.3409 msec (    7.61/sec): bzero of 10 megabytes (cacheline-aligned)

     40 reps @ 131.4903 msec (    7.61/sec): bzero of 10 megabytes (word mis-aligned)
     40 reps @ 131.5845 msec (    7.60/sec): bzero of 10 megabytes (word mis-aligned)
     40 reps @ 131.5532 msec (    7.60/sec): bzero of 10 megabytes (word mis-aligned)
     40 reps @ 131.3349 msec (    7.61/sec): bzero of 10 megabytes (word mis-aligned)
     40 reps @ 131.4811 msec (    7.61/sec): bzero of 10 megabytes (word mis-aligned)
    200 trep @ 131.4888 msec (    7.61/sec): bzero of 10 megabytes (word mis-aligned)

     40 reps @ 131.8384 msec (    7.59/sec): bzero of 10 megabytes (dword mis-aligned)
     40 reps @ 131.4480 msec (    7.61/sec): bzero of 10 megabytes (dword mis-aligned)
     40 reps @ 131.4920 msec (    7.61/sec): bzero of 10 megabytes (dword mis-aligned)
     40 reps @ 131.2702 msec (    7.62/sec): bzero of 10 megabytes (dword mis-aligned)
     40 reps @ 131.3501 msec (    7.61/sec): bzero of 10 megabytes (dword mis-aligned)
    200 trep @ 131.4797 msec (    7.61/sec): bzero of 10 megabytes (dword mis-aligned)

  11388 reps @   0.4404 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers
  11388 reps @   0.4395 msec (  2280.0/sec): bcopy then qsort 400 32-bit integers
  11388 reps @   0.4394 msec (  2280.0/sec): bcopy then qsort 400 32-bit integers
  11388 reps @   0.4394 msec (  2280.0/sec): bcopy then qsort 400 32-bit integers
  11388 reps @   0.4394 msec (  2280.0/sec): bcopy then qsort 400 32-bit integers
  56940 trep @   0.4396 msec (  2270.0/sec): bcopy then qsort 400 32-bit integers

    176 reps @  28.0830 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers
    176 reps @  28.1167 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers
    176 reps @  28.0803 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers
    176 reps @  28.0762 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers
    176 reps @  28.0767 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers
    880 trep @  28.0866 msec (    35.6/sec): bcopy then qsort 16,000 32-bit integers

     37 reps @ 132.0069 msec (    7.58/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 132.0328 msec (    7.57/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 132.2928 msec (    7.56/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 132.0259 msec (    7.57/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 131.9801 msec (    7.58/sec): bcopy then qsort 64,000 32-bit integers
    185 trep @ 132.0677 msec (    7.57/sec): bcopy then qsort 64,000 32-bit integers

22235000 reps @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
22235000 reps @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
22235000 reps @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
22235000 reps @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
22235000 reps @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
111175000 trep @   0.0002 msec (4440000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

19797500 reps @   0.0003 msec (3950000.0/sec): basic double trigonometric function (sin/cos/tan)
19797500 reps @   0.0003 msec (3960000.0/sec): basic double trigonometric function (sin/cos/tan)
19797500 reps @   0.0003 msec (3950000.0/sec): basic double trigonometric function (sin/cos/tan)
19797500 reps @   0.0003 msec (3950000.0/sec): basic double trigonometric function (sin/cos/tan)
19797500 reps @   0.0003 msec (3950000.0/sec): basic double trigonometric function (sin/cos/tan)
98987500 trep @   0.0003 msec (3950000.0/sec): basic double trigonometric function (sin/cos/tan)

1890000 reps @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1890000 reps @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1890000 reps @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1890000 reps @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1890000 reps @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
9450000 trep @   0.0026 msec (380000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  27300 reps @   0.1817 msec (  5500.0/sec): Tower of Hanoi recursion test (10 deep)
  27300 reps @   0.1816 msec (  5510.0/sec): Tower of Hanoi recursion test (10 deep)
  27300 reps @   0.1816 msec (  5510.0/sec): Tower of Hanoi recursion test (10 deep)
  27300 reps @   0.1816 msec (  5510.0/sec): Tower of Hanoi recursion test (10 deep)
  27300 reps @   0.1817 msec (  5500.0/sec): Tower of Hanoi recursion test (10 deep)
 136500 trep @   0.1817 msec (  5500.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   5.8239 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8231 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8243 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8201 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   5.8232 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   5.8229 msec (   172.0/sec): Tower of Hanoi recursion test (15 deep)

 683500 reps @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 683500 reps @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 683500 reps @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 683500 reps @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 683500 reps @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
3417500 trep @   0.0073 msec (137000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

 148600 reps @   0.0389 msec ( 25700.0/sec): write 80 bytes to a log file
 148600 reps @   0.0440 msec ( 22700.0/sec): write 80 bytes to a log file
 148600 reps @   0.0474 msec ( 21100.0/sec): write 80 bytes to a log file
 148600 reps @   0.0493 msec ( 20300.0/sec): write 80 bytes to a log file
 148600 reps @   0.0431 msec ( 23200.0/sec): write 80 bytes to a log file
 743000 trep @   0.0446 msec ( 22400.0/sec): write 80 bytes to a log file

    600 reps @   5.7801 msec (   173.0/sec): per-file cost of creating 100 files then unlinking them all
    600 reps @   4.6681 msec (   214.0/sec): per-file cost of creating 100 files then unlinking them all
    600 reps @   4.5436 msec (   220.0/sec): per-file cost of creating 100 files then unlinking them all
    600 reps @   4.7585 msec (   210.0/sec): per-file cost of creating 100 files then unlinking them all
    600 reps @   4.5529 msec (   220.0/sec): per-file cost of creating 100 files then unlinking them all
   3000 trep @   4.8606 msec (   206.0/sec): per-file cost of creating 100 files then unlinking them all

  57800 reps @   0.0867 msec ( 11500.0/sec): per-file cost of open and immediate close of 100 files
  57800 reps @   0.0865 msec ( 11600.0/sec): per-file cost of open and immediate close of 100 files
  57800 reps @   0.0865 msec ( 11600.0/sec): per-file cost of open and immediate close of 100 files
  57800 reps @   0.0865 msec ( 11600.0/sec): per-file cost of open and immediate close of 100 files
  57800 reps @   0.0867 msec ( 11500.0/sec): per-file cost of open and immediate close of 100 files
 289000 trep @   0.0866 msec ( 11600.0/sec): per-file cost of open and immediate close of 100 files

  52000 reps @   0.1057 msec (  9460.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  52000 reps @   0.0953 msec ( 10500.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  52000 reps @   0.0977 msec ( 10200.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  52000 reps @   0.0951 msec ( 10500.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  52000 reps @   0.0953 msec ( 10500.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 260000 trep @   0.0978 msec ( 10200.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 317500 reps @   0.0161 msec ( 62200.0/sec): cost of stat'ing current dir
 317500 reps @   0.0164 msec ( 61000.0/sec): cost of stat'ing current dir
 317500 reps @   0.0164 msec ( 60900.0/sec): cost of stat'ing current dir
 317500 reps @   0.0164 msec ( 61000.0/sec): cost of stat'ing current dir
 317500 reps @   0.0164 msec ( 60900.0/sec): cost of stat'ing current dir
1587500 trep @   0.0163 msec ( 61200.0/sec): cost of stat'ing current dir

  65500 reps @   0.0763 msec ( 13100.0/sec): cost of stat'ing 5 component path
  65500 reps @   0.0772 msec ( 13000.0/sec): cost of stat'ing 5 component path
  65500 reps @   0.0773 msec ( 12900.0/sec): cost of stat'ing 5 component path
  65500 reps @   0.0775 msec ( 12900.0/sec): cost of stat'ing 5 component path
  65500 reps @   0.0779 msec ( 12800.0/sec): cost of stat'ing 5 component path
 327500 trep @   0.0772 msec ( 12900.0/sec): cost of stat'ing 5 component path

    430 reps @   2.3850 msec (   419.0/sec): open directory and stat 100 files in it
    430 reps @   2.3775 msec (   421.0/sec): open directory and stat 100 files in it
    430 reps @   2.3793 msec (   420.0/sec): open directory and stat 100 files in it
    430 reps @   2.3802 msec (   420.0/sec): open directory and stat 100 files in it
    430 reps @   2.3800 msec (   420.0/sec): open directory and stat 100 files in it
   2150 trep @   2.3804 msec (   420.0/sec): open directory and stat 100 files in it

    900 reps @   4.5931 msec (   218.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.4664 msec (   224.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.4248 msec (   226.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.7905 msec (   209.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.8047 msec (   208.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4500 trep @   4.6159 msec (   217.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 441900 reps @   0.0113 msec ( 88200.0/sec): ndbm lookup into database with 900 entries
 441900 reps @   0.0113 msec ( 88100.0/sec): ndbm lookup into database with 900 entries
 441900 reps @   0.0112 msec ( 89200.0/sec): ndbm lookup into database with 900 entries
 441900 reps @   0.0110 msec ( 90800.0/sec): ndbm lookup into database with 900 entries
 441900 reps @   0.0110 msec ( 91000.0/sec): ndbm lookup into database with 900 entries
2209500 trep @   0.0112 msec ( 89400.0/sec): ndbm lookup into database with 900 entries

  25200 reps @   0.0659 msec ( 15200.0/sec): 1 byte token passing between two processes using two pipes
  25200 reps @   0.0657 msec ( 15200.0/sec): 1 byte token passing between two processes using two pipes
  25200 reps @   0.0655 msec ( 15300.0/sec): 1 byte token passing between two processes using two pipes
  25200 reps @   0.0653 msec ( 15300.0/sec): 1 byte token passing between two processes using two pipes
  25200 reps @   0.0654 msec ( 15300.0/sec): 1 byte token passing between two processes using two pipes
 126000 trep @   0.0655 msec ( 15300.0/sec): 1 byte token passing between two processes using two pipes

  46800 reps @   0.0806 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes
  46800 reps @   0.0806 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes
  46800 reps @   0.0806 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes
  46800 reps @   0.0805 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes
  46800 reps @   0.0806 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes
 234000 trep @   0.0806 msec ( 12400.0/sec): 1 kilobyte token passing between two processes using two pipes

13396000 reps @   0.0004 msec (2620000.0/sec): setjmp/longjmp
13396000 reps @   0.0004 msec (2610000.0/sec): setjmp/longjmp
13396000 reps @   0.0004 msec (2590000.0/sec): setjmp/longjmp
13396000 reps @   0.0004 msec (2620000.0/sec): setjmp/longjmp
13396000 reps @   0.0004 msec (2610000.0/sec): setjmp/longjmp
66980000 trep @   0.0004 msec (2610000.0/sec): setjmp/longjmp

 196000 reps @   0.0253 msec ( 39500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 196000 reps @   0.0252 msec ( 39600.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 196000 reps @   0.0252 msec ( 39600.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 196000 reps @   0.0253 msec ( 39500.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 196000 reps @   0.0252 msec ( 39700.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 980000 trep @   0.0253 msec ( 39600.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   4040 reps @   1.2097 msec (   827.0/sec): create/destroy client UDP-based SunRPC handle
   4040 reps @   1.2092 msec (   827.0/sec): create/destroy client UDP-based SunRPC handle
   4040 reps @   1.2101 msec (   826.0/sec): create/destroy client UDP-based SunRPC handle
   4040 reps @   1.2122 msec (   825.0/sec): create/destroy client UDP-based SunRPC handle
   4040 reps @   1.2115 msec (   825.0/sec): create/destroy client UDP-based SunRPC handle
  20200 trep @   1.2105 msec (   826.0/sec): create/destroy client UDP-based SunRPC handle

  14800 reps @   0.3379 msec (  2960.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.3370 msec (  2970.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.3371 msec (  2970.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.3385 msec (  2950.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.3372 msec (  2970.0/sec): TCP-based SunRPC to negate an integer
  74000 trep @   0.3375 msec (  2960.0/sec): TCP-based SunRPC to negate an integer

  16000 reps @   0.3111 msec (  3210.0/sec): UDP-based SunRPC to negate an integer
  16000 reps @   0.3111 msec (  3210.0/sec): UDP-based SunRPC to negate an integer
  16000 reps @   0.3114 msec (  3210.0/sec): UDP-based SunRPC to negate an integer
  16000 reps @   0.3107 msec (  3220.0/sec): UDP-based SunRPC to negate an integer
  16000 reps @   0.3108 msec (  3220.0/sec): UDP-based SunRPC to negate an integer
  80000 trep @   0.3110 msec (  3220.0/sec): UDP-based SunRPC to negate an integer

  15600 reps @   0.3186 msec (  3140.0/sec): TCP-based SunRPC no-op
  15600 reps @   0.3183 msec (  3140.0/sec): TCP-based SunRPC no-op
  15600 reps @   0.3186 msec (  3140.0/sec): TCP-based SunRPC no-op
  15600 reps @   0.3186 msec (  3140.0/sec): TCP-based SunRPC no-op
  15600 reps @   0.3184 msec (  3140.0/sec): TCP-based SunRPC no-op
  78000 trep @   0.3185 msec (  3140.0/sec): TCP-based SunRPC no-op

  16000 reps @   0.3109 msec (  3220.0/sec): UDP-based SunRPC no-op
  16000 reps @   0.3106 msec (  3220.0/sec): UDP-based SunRPC no-op
  16000 reps @   0.3105 msec (  3220.0/sec): UDP-based SunRPC no-op
  16000 reps @   0.3103 msec (  3220.0/sec): UDP-based SunRPC no-op
  16000 reps @   0.3100 msec (  3230.0/sec): UDP-based SunRPC no-op
  80000 trep @   0.3105 msec (  3220.0/sec): UDP-based SunRPC no-op

1553000 reps @   0.0032 msec (317000.0/sec): getpid system call
1553000 reps @   0.0032 msec (317000.0/sec): getpid system call
1553000 reps @   0.0032 msec (317000.0/sec): getpid system call
1553000 reps @   0.0032 msec (317000.0/sec): getpid system call
1553000 reps @   0.0032 msec (317000.0/sec): getpid system call
7765000 trep @   0.0032 msec (317000.0/sec): getpid system call

 240000 reps @   0.0208 msec ( 48000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 240000 reps @   0.0209 msec ( 47900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 240000 reps @   0.0209 msec ( 48000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 240000 reps @   0.0208 msec ( 48000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 240000 reps @   0.0209 msec ( 48000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1200000 trep @   0.0209 msec ( 48000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 720800 reps @   0.0068 msec (146000.0/sec): gettimeofday system call
 720800 reps @   0.0068 msec (146000.0/sec): gettimeofday system call
 720800 reps @   0.0068 msec (146000.0/sec): gettimeofday system call
 720800 reps @   0.0068 msec (146000.0/sec): gettimeofday system call
 720800 reps @   0.0068 msec (146000.0/sec): gettimeofday system call
3604000 trep @   0.0068 msec (146000.0/sec): gettimeofday system call

    950 reps @   5.3863 msec (   186.0/sec): fork, child immediately exits, parent waits
    950 reps @   5.5110 msec (   181.0/sec): fork, child immediately exits, parent waits
    950 reps @   5.4452 msec (   184.0/sec): fork, child immediately exits, parent waits
    950 reps @   5.4750 msec (   183.0/sec): fork, child immediately exits, parent waits
    950 reps @   5.4749 msec (   183.0/sec): fork, child immediately exits, parent waits
   4750 trep @   5.4585 msec (   183.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.0074 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9942 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.0028 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9980 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.0058 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.0016 msec (    0.99/sec): sleep for one second (validates test time)

 744900 reps @   0.0067 msec (149000.0/sec): select on no fds with no timeout
 744900 reps @   0.0067 msec (149000.0/sec): select on no fds with no timeout
 744900 reps @   0.0067 msec (149000.0/sec): select on no fds with no timeout
 744900 reps @   0.0067 msec (149000.0/sec): select on no fds with no timeout
 744900 reps @   0.0067 msec (149000.0/sec): select on no fds with no timeout
3724500 trep @   0.0067 msec (149000.0/sec): select on no fds with no timeout

 219000 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe read fds with immediate timeout
 219000 reps @   0.0226 msec ( 44300.0/sec): select on 16 pipe read fds with immediate timeout
 219000 reps @   0.0226 msec ( 44300.0/sec): select on 16 pipe read fds with immediate timeout
 219000 reps @   0.0226 msec ( 44300.0/sec): select on 16 pipe read fds with immediate timeout
 219000 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe read fds with immediate timeout
1095000 trep @   0.0226 msec ( 44300.0/sec): select on 16 pipe read fds with immediate timeout

 126400 reps @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout
 126400 reps @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout
 126400 reps @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout
 126400 reps @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout
 126400 reps @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout
 632000 trep @   0.0390 msec ( 25600.0/sec): select on 32 pipe read fds with immediate timeout

 222500 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe write fds with immediate timeout
 222500 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe write fds with immediate timeout
 222500 reps @   0.0226 msec ( 44300.0/sec): select on 16 pipe write fds with immediate timeout
 222500 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe write fds with immediate timeout
 222500 reps @   0.0225 msec ( 44400.0/sec): select on 16 pipe write fds with immediate timeout
1112500 trep @   0.0225 msec ( 44400.0/sec): select on 16 pipe write fds with immediate timeout

 221500 reps @   0.0226 msec ( 44300.0/sec): select on 32 pipe write fds with immediate timeout
 221500 reps @   0.0226 msec ( 44300.0/sec): select on 32 pipe write fds with immediate timeout
 221500 reps @   0.0225 msec ( 44400.0/sec): select on 32 pipe write fds with immediate timeout
 221500 reps @   0.0225 msec ( 44400.0/sec): select on 32 pipe write fds with immediate timeout
 221500 reps @   0.0225 msec ( 44400.0/sec): select on 32 pipe write fds with immediate timeout
1107500 trep @   0.0226 msec ( 44300.0/sec): select on 32 pipe write fds with immediate timeout

  27300 reps @   0.1759 msec (  5680.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27300 reps @   0.1759 msec (  5690.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27300 reps @   0.1760 msec (  5680.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27300 reps @   0.1758 msec (  5690.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27300 reps @   0.1758 msec (  5690.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 136500 trep @   0.1759 msec (  5690.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    200 reps @  21.5475 msec (    46.4/sec): popen and read from "/bin/echo hello"
    200 reps @  21.5312 msec (    46.4/sec): popen and read from "/bin/echo hello"
    200 reps @  21.6410 msec (    46.2/sec): popen and read from "/bin/echo hello"
    200 reps @  21.5537 msec (    46.4/sec): popen and read from "/bin/echo hello"
    200 reps @  21.5338 msec (    46.4/sec): popen and read from "/bin/echo hello"
   1000 trep @  21.5614 msec (    46.4/sec): popen and read from "/bin/echo hello"

  54650 reps @   0.0891 msec ( 11200.0/sec): mmap megabyte /dev/zero region 
  54650 reps @   0.0892 msec ( 11200.0/sec): mmap megabyte /dev/zero region 
  54650 reps @   0.0892 msec ( 11200.0/sec): mmap megabyte /dev/zero region 
  54650 reps @   0.0893 msec ( 11200.0/sec): mmap megabyte /dev/zero region 
  54650 reps @   0.0892 msec ( 11200.0/sec): mmap megabyte /dev/zero region 
 273250 trep @   0.0892 msec ( 11200.0/sec): mmap megabyte /dev/zero region 

    331 reps @  15.0692 msec (    66.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    331 reps @  15.0850 msec (    66.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    331 reps @  15.0780 msec (    66.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    331 reps @  15.0649 msec (    66.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    331 reps @  15.0728 msec (    66.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1655 trep @  15.0740 msec (    66.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    955 reps @   5.7374 msec (   174.0/sec): copy every byte of newly mmaped megabyte file
    955 reps @   6.8374 msec (   146.0/sec): copy every byte of newly mmaped megabyte file
    955 reps @   7.5297 msec (   133.0/sec): copy every byte of newly mmaped megabyte file
    955 reps @   7.3608 msec (   136.0/sec): copy every byte of newly mmaped megabyte file
    955 reps @   7.2604 msec (   138.0/sec): copy every byte of newly mmaped megabyte file
   4775 trep @   6.9451 msec (   144.0/sec): copy every byte of newly mmaped megabyte file

     42 reps @  78.3319 msec (    12.8/sec): compress & uncompress 52 kilobyte text file of numbers
     42 reps @  77.6348 msec (    12.9/sec): compress & uncompress 52 kilobyte text file of numbers
     42 reps @  77.4426 msec (    12.9/sec): compress & uncompress 52 kilobyte text file of numbers
     42 reps @  78.6786 msec (    12.7/sec): compress & uncompress 52 kilobyte text file of numbers
     42 reps @  79.6850 msec (    12.5/sec): compress & uncompress 52 kilobyte text file of numbers
    210 trep @  78.3546 msec (    12.8/sec): compress & uncompress 52 kilobyte text file of numbers

      6 reps @ 225.4623 msec (    4.44/sec): compile ANSI C `hello world' with no special options
      6 reps @ 229.9702 msec (    4.35/sec): compile ANSI C `hello world' with no special options
      6 reps @ 222.3697 msec (    4.50/sec): compile ANSI C `hello world' with no special options
      6 reps @ 226.3588 msec (    4.42/sec): compile ANSI C `hello world' with no special options
      6 reps @ 220.2727 msec (    4.54/sec): compile ANSI C `hello world' with no special options
     30 trep @ 224.8867 msec (    4.45/sec): compile ANSI C `hello world' with no special options

      8 reps @ 529.7315 msec (    1.89/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      8 reps @ 520.0380 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      8 reps @ 519.2379 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      8 reps @ 519.3703 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      8 reps @ 518.7787 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     40 trep @ 521.4313 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     12 reps @ 518.3391 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 519.9988 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 518.3173 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 524.1535 msec (    1.91/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 514.9868 msec (    1.94/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     60 trep @ 519.1591 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     12 reps @ 541.6474 msec (    1.85/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 484.4405 msec (    2.06/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 539.3433 msec (    1.85/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 536.2102 msec (    1.86/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 516.6498 msec (    1.94/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     60 trep @ 523.6582 msec (    1.91/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 500.1564 msec (    2.00/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 491.1370 msec (    2.04/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 497.6307 msec (    2.01/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 588.4322 msec (    1.70/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 519.0661 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 519.2845 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     12 reps @ 520.4188 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 519.7587 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 519.5255 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 519.5072 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 519.3871 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     60 trep @ 519.7195 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 519.3584 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 519.3998 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 519.4094 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 519.7634 msec (    1.92/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 519.0748 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 519.4012 msec (    1.93/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      4 reps @ 1362.6043 msec (    0.73/sec): use dc to output first 1,000 factorials
      4 reps @ 1359.5695 msec (    0.74/sec): use dc to output first 1,000 factorials
      4 reps @ 1359.4143 msec (    0.74/sec): use dc to output first 1,000 factorials
      4 reps @ 1360.4227 msec (    0.73/sec): use dc to output first 1,000 factorials
      4 reps @ 1360.7803 msec (    0.73/sec): use dc to output first 1,000 factorials
     20 trep @ 1360.5582 msec (    0.73/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0054 msec (184000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0054 msec (186000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0054 msec (186000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0054 msec (186000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0054 msec (186000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0054 msec (186000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  77304 reps @   0.0646 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree
  77304 reps @   0.0647 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree
  77304 reps @   0.0646 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree
  77304 reps @   0.0646 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree
  77304 reps @   0.0646 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree
 386520 trep @   0.0646 msec ( 15500.0/sec): use regcomp to compile 51 char literal, then regfree

      7 reps @ 697.9073 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text
      7 reps @ 699.4621 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text
      7 reps @ 699.9567 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text
      7 reps @ 699.9883 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text
      7 reps @ 699.1889 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text
     35 trep @ 699.3007 msec (    1.43/sec): use regexec with 51 char literal to search 142 kilobyte text

 100976 reps @   0.0493 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree
 100976 reps @   0.0493 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree
 100976 reps @   0.0494 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree
 100976 reps @   0.0493 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree
 100976 reps @   0.0493 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree
 504880 trep @   0.0493 msec ( 20300.0/sec): use regcomp to compile long .* pattern, then regfree

     12 reps @ 428.9386 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text
     12 reps @ 428.6826 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text
     12 reps @ 429.1609 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text
     12 reps @ 428.8188 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text
     12 reps @ 429.4022 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text
     60 trep @ 429.0006 msec (    2.33/sec): use regexec with long .* pattern to search 142 kilobyte text

