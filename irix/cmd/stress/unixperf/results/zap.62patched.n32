UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: zap
Operating system: IRIX 6.2
Compiler version: 7.1
Instruction set: MIPS 3
Application binary interface: N32
Iris Audio Processor: version A2 revision 4.1.0
1 180 MHZ IP22 Processor
FPU: MIPS R5000 Floating Point Coprocessor Revision: 1.0
CPU: MIPS R5000 Processor Chip Revision: 1.0
On-board serial ports: 2
On-board bi-directional parallel port
Data cache size: 32 Kbytes
Instruction cache size: 32 Kbytes
Secondary unified instruction/data cache size: 512 Kbytes on Processor 0
Main memory size: 96 Mbytes
Vino video: unit 0, revision 0, IndyCam connected
Integral ISDN: Basic Rate Interface unit 0, revision 1.0
Integral Ethernet: ec0, version 1
Integral SCSI controller 0: Version WD33C93B, revision D
  Tape drive: unit 7 on SCSI controller 0: DAT
  CDROM: unit 4 on SCSI controller 0
  Disk drive: unit 1 on SCSI controller 0
Graphics board: GR3-XZ
Uptime: 9 days, 13:26
Users: 1
Load average: 0.43, 0.70, 0.37
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1915.95 MB total, 580.91 MB available)
Date: Mon Aug 11 15:32:14 1997

2200380 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2200380 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2200380 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2200380 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2200380 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
11001900 trep @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply

2306520 reps @   0.0022 msec (462000.0/sec): 4 by 4 float matrix multiply
2306520 reps @   0.0022 msec (461000.0/sec): 4 by 4 float matrix multiply
2306520 reps @   0.0022 msec (462000.0/sec): 4 by 4 float matrix multiply
2306520 reps @   0.0022 msec (462000.0/sec): 4 by 4 float matrix multiply
2306520 reps @   0.0022 msec (462000.0/sec): 4 by 4 float matrix multiply
11532600 trep @   0.0022 msec (462000.0/sec): 4 by 4 float matrix multiply

 274500 reps @   0.0182 msec ( 54800.0/sec): recurse 250 simple function calls and return
 274500 reps @   0.0182 msec ( 54800.0/sec): recurse 250 simple function calls and return
 274500 reps @   0.0182 msec ( 54800.0/sec): recurse 250 simple function calls and return
 274500 reps @   0.0182 msec ( 54800.0/sec): recurse 250 simple function calls and return
 274500 reps @   0.0182 msec ( 54900.0/sec): recurse 250 simple function calls and return
1372500 trep @   0.0182 msec ( 54800.0/sec): recurse 250 simple function calls and return

6654800 reps @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes
6654800 reps @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes
6654800 reps @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes
6654800 reps @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes
6654800 reps @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes
33274000 trep @   0.0008 msec (1330000.0/sec): bcopy of 256 bytes

 164640 reps @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes
 164640 reps @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes
 164640 reps @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes
 164640 reps @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes
 164640 reps @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes
 823200 trep @   0.0305 msec ( 32800.0/sec): bcopy of 16 kilobytes

   2356 reps @   2.1149 msec (   473.0/sec): bcopy of 100 kilobytes
   2356 reps @   2.1162 msec (   473.0/sec): bcopy of 100 kilobytes
   2356 reps @   2.1173 msec (   472.0/sec): bcopy of 100 kilobytes
   2356 reps @   2.1170 msec (   472.0/sec): bcopy of 100 kilobytes
   2356 reps @   2.1170 msec (   472.0/sec): bcopy of 100 kilobytes
  11780 trep @   2.1165 msec (   472.0/sec): bcopy of 100 kilobytes

    120 reps @  39.5101 msec (    25.3/sec): bcopy of 1 megabyte
    120 reps @  39.4896 msec (    25.3/sec): bcopy of 1 megabyte
    120 reps @  39.5194 msec (    25.3/sec): bcopy of 1 megabyte
    120 reps @  39.5160 msec (    25.3/sec): bcopy of 1 megabyte
    120 reps @  39.4830 msec (    25.3/sec): bcopy of 1 megabyte
    600 trep @  39.5036 msec (    25.3/sec): bcopy of 1 megabyte

     12 reps @ 399.2094 msec (    2.50/sec): bcopy of 10 megabytes
     12 reps @ 399.2520 msec (    2.50/sec): bcopy of 10 megabytes
     12 reps @ 399.0088 msec (    2.51/sec): bcopy of 10 megabytes
     12 reps @ 399.0657 msec (    2.51/sec): bcopy of 10 megabytes
     12 reps @ 398.9951 msec (    2.51/sec): bcopy of 10 megabytes
     60 trep @ 399.1062 msec (    2.51/sec): bcopy of 10 megabytes

     16 reps @ 398.3751 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 398.2038 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 398.2366 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 398.1117 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 398.2274 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     80 trep @ 398.2309 msec (    2.51/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 402.2046 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 401.7234 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 401.4747 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 401.6816 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 401.5982 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 401.7365 msec (    2.49/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 404.4271 msec (    2.47/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 403.9175 msec (    2.48/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 404.1126 msec (    2.47/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 404.1577 msec (    2.47/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 403.9774 msec (    2.48/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 404.1184 msec (    2.47/sec): bcopy of 10 megabytes (dword mis-aligned)

12972000 reps @   0.0004 msec (2600000.0/sec): bzero of 256 bytes
12972000 reps @   0.0004 msec (2600000.0/sec): bzero of 256 bytes
12972000 reps @   0.0004 msec (2600000.0/sec): bzero of 256 bytes
12972000 reps @   0.0004 msec (2600000.0/sec): bzero of 256 bytes
12972000 reps @   0.0004 msec (2600000.0/sec): bzero of 256 bytes
64860000 trep @   0.0004 msec (2600000.0/sec): bzero of 256 bytes

 306280 reps @   0.0163 msec ( 61300.0/sec): bzero of 16 kilobytes
 306280 reps @   0.0163 msec ( 61300.0/sec): bzero of 16 kilobytes
 306280 reps @   0.0163 msec ( 61300.0/sec): bzero of 16 kilobytes
 306280 reps @   0.0163 msec ( 61200.0/sec): bzero of 16 kilobytes
 306280 reps @   0.0163 msec ( 61200.0/sec): bzero of 16 kilobytes
1531400 trep @   0.0163 msec ( 61300.0/sec): bzero of 16 kilobytes

   3812 reps @   1.3130 msec (   762.0/sec): bzero of 100 kilobytes
   3812 reps @   1.3115 msec (   762.0/sec): bzero of 100 kilobytes
   3812 reps @   1.3118 msec (   762.0/sec): bzero of 100 kilobytes
   3812 reps @   1.3107 msec (   763.0/sec): bzero of 100 kilobytes
   3812 reps @   1.3113 msec (   763.0/sec): bzero of 100 kilobytes
  19060 trep @   1.3116 msec (   762.0/sec): bzero of 100 kilobytes

    216 reps @  23.4152 msec (    42.7/sec): bzero of 1 megabyte
    216 reps @  23.4022 msec (    42.7/sec): bzero of 1 megabyte
    216 reps @  23.3926 msec (    42.7/sec): bzero of 1 megabyte
    216 reps @  23.3951 msec (    42.7/sec): bzero of 1 megabyte
    216 reps @  23.3757 msec (    42.8/sec): bzero of 1 megabyte
   1080 trep @  23.3962 msec (    42.7/sec): bzero of 1 megabyte

     24 reps @ 236.8215 msec (    4.22/sec): bzero of 10 megabytes
     24 reps @ 236.8662 msec (    4.22/sec): bzero of 10 megabytes
     24 reps @ 236.9163 msec (    4.22/sec): bzero of 10 megabytes
     24 reps @ 236.7865 msec (    4.22/sec): bzero of 10 megabytes
     24 reps @ 236.6850 msec (    4.23/sec): bzero of 10 megabytes
    120 trep @ 236.8151 msec (    4.22/sec): bzero of 10 megabytes

     24 reps @ 236.9460 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 236.8758 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 236.9170 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 236.8048 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 236.8056 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)
    120 trep @ 236.8698 msec (    4.22/sec): bzero of 10 megabytes (cacheline-aligned)

     24 reps @ 236.9010 msec (    4.22/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 236.8729 msec (    4.22/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 236.9230 msec (    4.22/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 236.8448 msec (    4.22/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 236.6835 msec (    4.23/sec): bzero of 10 megabytes (word mis-aligned)
    120 trep @ 236.8451 msec (    4.22/sec): bzero of 10 megabytes (word mis-aligned)

     24 reps @ 236.9360 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 237.0023 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 236.7094 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 236.7987 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 236.8789 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)
    120 trep @ 236.8651 msec (    4.22/sec): bzero of 10 megabytes (dword mis-aligned)

   8049 reps @   0.6184 msec (  1620.0/sec): bcopy then qsort 400 32-bit integers
   8049 reps @   0.6179 msec (  1620.0/sec): bcopy then qsort 400 32-bit integers
   8049 reps @   0.6242 msec (  1600.0/sec): bcopy then qsort 400 32-bit integers
   8049 reps @   0.6194 msec (  1610.0/sec): bcopy then qsort 400 32-bit integers
   8049 reps @   0.6177 msec (  1620.0/sec): bcopy then qsort 400 32-bit integers
  40245 trep @   0.6195 msec (  1610.0/sec): bcopy then qsort 400 32-bit integers

    122 reps @  40.8649 msec (    24.5/sec): bcopy then qsort 16,000 32-bit integers
    122 reps @  40.8719 msec (    24.5/sec): bcopy then qsort 16,000 32-bit integers
    122 reps @  40.9084 msec (    24.4/sec): bcopy then qsort 16,000 32-bit integers
    122 reps @  40.8571 msec (    24.5/sec): bcopy then qsort 16,000 32-bit integers
    122 reps @  40.8968 msec (    24.5/sec): bcopy then qsort 16,000 32-bit integers
    610 trep @  40.8798 msec (    24.5/sec): bcopy then qsort 16,000 32-bit integers

     25 reps @ 198.3306 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers
     25 reps @ 198.3209 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers
     25 reps @ 198.4748 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers
     25 reps @ 198.4029 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers
     25 reps @ 198.4590 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers
    125 trep @ 198.3976 msec (    5.04/sec): bcopy then qsort 64,000 32-bit integers

10610000 reps @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10610000 reps @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10610000 reps @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10610000 reps @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10610000 reps @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
53050000 trep @   0.0005 msec (2120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

9222500 reps @   0.0005 msec (1850000.0/sec): basic double trigonometric function (sin/cos/tan)
9222500 reps @   0.0005 msec (1850000.0/sec): basic double trigonometric function (sin/cos/tan)
9222500 reps @   0.0005 msec (1840000.0/sec): basic double trigonometric function (sin/cos/tan)
9222500 reps @   0.0005 msec (1850000.0/sec): basic double trigonometric function (sin/cos/tan)
9222500 reps @   0.0005 msec (1840000.0/sec): basic double trigonometric function (sin/cos/tan)
46112500 trep @   0.0005 msec (1850000.0/sec): basic double trigonometric function (sin/cos/tan)

1497000 reps @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1497000 reps @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1497000 reps @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1497000 reps @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1497000 reps @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
7485000 trep @   0.0033 msec (299000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  18600 reps @   0.2697 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)
  18600 reps @   0.2697 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)
  18600 reps @   0.2697 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)
  18600 reps @   0.2696 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)
  18600 reps @   0.2696 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)
  93000 trep @   0.2697 msec (  3710.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @   8.6385 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   8.6413 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   8.6389 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   8.6368 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   8.6374 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @   8.6386 msec (   116.0/sec): Tower of Hanoi recursion test (15 deep)

 300500 reps @   0.0167 msec ( 60000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 300500 reps @   0.0167 msec ( 59900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 300500 reps @   0.0167 msec ( 59900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 300500 reps @   0.0167 msec ( 60000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 300500 reps @   0.0167 msec ( 59900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1502500 trep @   0.0167 msec ( 59900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  69200 reps @   0.0757 msec ( 13200.0/sec): write 80 bytes to a log file
  69200 reps @   0.0776 msec ( 12900.0/sec): write 80 bytes to a log file
  69200 reps @   0.0792 msec ( 12600.0/sec): write 80 bytes to a log file
  69200 reps @   0.0795 msec ( 12600.0/sec): write 80 bytes to a log file
  69200 reps @   0.0766 msec ( 13100.0/sec): write 80 bytes to a log file
 346000 trep @   0.0777 msec ( 12900.0/sec): write 80 bytes to a log file

    800 reps @   6.2655 msec (   160.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   5.8111 msec (   172.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   5.8073 msec (   172.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   5.8075 msec (   172.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   5.7403 msec (   174.0/sec): per-file cost of creating 100 files then unlinking them all
   4000 trep @   5.8863 msec (   170.0/sec): per-file cost of creating 100 files then unlinking them all

  54800 reps @   0.0914 msec ( 10900.0/sec): per-file cost of open and immediate close of 100 files
  54800 reps @   0.0913 msec ( 11000.0/sec): per-file cost of open and immediate close of 100 files
  54800 reps @   0.0905 msec ( 11000.0/sec): per-file cost of open and immediate close of 100 files
  54800 reps @   0.0903 msec ( 11100.0/sec): per-file cost of open and immediate close of 100 files
  54800 reps @   0.0904 msec ( 11100.0/sec): per-file cost of open and immediate close of 100 files
 274000 trep @   0.0908 msec ( 11000.0/sec): per-file cost of open and immediate close of 100 files

  39800 reps @   0.1341 msec (  7460.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  39800 reps @   0.1221 msec (  8190.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  39800 reps @   0.1230 msec (  8130.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  39800 reps @   0.1247 msec (  8020.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  39800 reps @   0.1219 msec (  8210.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 199000 trep @   0.1251 msec (  7990.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 265500 reps @   0.0188 msec ( 53300.0/sec): cost of stat'ing current dir
 265500 reps @   0.0192 msec ( 52200.0/sec): cost of stat'ing current dir
 265500 reps @   0.0193 msec ( 51900.0/sec): cost of stat'ing current dir
 265500 reps @   0.0192 msec ( 52200.0/sec): cost of stat'ing current dir
 265500 reps @   0.0192 msec ( 52100.0/sec): cost of stat'ing current dir
1327500 trep @   0.0191 msec ( 52300.0/sec): cost of stat'ing current dir

  60500 reps @   0.0829 msec ( 12100.0/sec): cost of stat'ing 5 component path
  60500 reps @   0.0830 msec ( 12000.0/sec): cost of stat'ing 5 component path
  60500 reps @   0.0838 msec ( 11900.0/sec): cost of stat'ing 5 component path
  60500 reps @   0.0838 msec ( 11900.0/sec): cost of stat'ing 5 component path
  60500 reps @   0.0837 msec ( 11900.0/sec): cost of stat'ing 5 component path
 302500 trep @   0.0834 msec ( 12000.0/sec): cost of stat'ing 5 component path

   1442 reps @   3.4388 msec (   291.0/sec): open directory and stat 100 files in it
   1442 reps @   3.4220 msec (   292.0/sec): open directory and stat 100 files in it
   1442 reps @   3.4298 msec (   292.0/sec): open directory and stat 100 files in it
   1442 reps @   3.4292 msec (   292.0/sec): open directory and stat 100 files in it
   1442 reps @   3.4122 msec (   293.0/sec): open directory and stat 100 files in it
   7210 trep @   3.4264 msec (   292.0/sec): open directory and stat 100 files in it

    600 reps @   6.7590 msec (   148.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    600 reps @   6.1042 msec (   164.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    600 reps @   6.0070 msec (   166.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    600 reps @   5.9365 msec (   168.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    600 reps @   5.9526 msec (   168.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   3000 trep @   6.1519 msec (   163.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 190800 reps @   0.0266 msec ( 37600.0/sec): ndbm lookup into database with 900 entries
 190800 reps @   0.0265 msec ( 37700.0/sec): ndbm lookup into database with 900 entries
 190800 reps @   0.0243 msec ( 41200.0/sec): ndbm lookup into database with 900 entries
 190800 reps @   0.0234 msec ( 42700.0/sec): ndbm lookup into database with 900 entries
 190800 reps @   0.0234 msec ( 42800.0/sec): ndbm lookup into database with 900 entries
 954000 trep @   0.0248 msec ( 40300.0/sec): ndbm lookup into database with 900 entries

  51200 reps @   0.0970 msec ( 10300.0/sec): 1 byte token passing between two processes using two pipes
  51200 reps @   0.0974 msec ( 10300.0/sec): 1 byte token passing between two processes using two pipes
  51200 reps @   0.0968 msec ( 10300.0/sec): 1 byte token passing between two processes using two pipes
  51200 reps @   0.0976 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
  51200 reps @   0.0976 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
 256000 trep @   0.0973 msec ( 10300.0/sec): 1 byte token passing between two processes using two pipes

  38800 reps @   0.1284 msec (  7790.0/sec): 1 kilobyte token passing between two processes using two pipes
  38800 reps @   0.1283 msec (  7800.0/sec): 1 kilobyte token passing between two processes using two pipes
  38800 reps @   0.1293 msec (  7730.0/sec): 1 kilobyte token passing between two processes using two pipes
  38800 reps @   0.1294 msec (  7730.0/sec): 1 kilobyte token passing between two processes using two pipes
  38800 reps @   0.1291 msec (  7740.0/sec): 1 kilobyte token passing between two processes using two pipes
 194000 trep @   0.1289 msec (  7760.0/sec): 1 kilobyte token passing between two processes using two pipes

12724000 reps @   0.0004 msec (2540000.0/sec): setjmp/longjmp
12724000 reps @   0.0004 msec (2540000.0/sec): setjmp/longjmp
12724000 reps @   0.0004 msec (2540000.0/sec): setjmp/longjmp
12724000 reps @   0.0004 msec (2540000.0/sec): setjmp/longjmp
12724000 reps @   0.0004 msec (2540000.0/sec): setjmp/longjmp
63620000 trep @   0.0004 msec (2540000.0/sec): setjmp/longjmp

 292000 reps @   0.0172 msec ( 58000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 292000 reps @   0.0172 msec ( 58100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 292000 reps @   0.0172 msec ( 58000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 292000 reps @   0.0172 msec ( 58000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 292000 reps @   0.0172 msec ( 58000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1460000 trep @   0.0172 msec ( 58000.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1650 reps @   3.0354 msec (   329.0/sec): create/destroy client UDP-based SunRPC handle
   1650 reps @   3.0291 msec (   330.0/sec): create/destroy client UDP-based SunRPC handle
   1650 reps @   3.0290 msec (   330.0/sec): create/destroy client UDP-based SunRPC handle
   1650 reps @   3.0314 msec (   330.0/sec): create/destroy client UDP-based SunRPC handle
   1650 reps @   3.0298 msec (   330.0/sec): create/destroy client UDP-based SunRPC handle
   8250 trep @   3.0309 msec (   330.0/sec): create/destroy client UDP-based SunRPC handle

   7200 reps @   0.7193 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7224 msec (  1380.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7235 msec (  1380.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7234 msec (  1380.0/sec): TCP-based SunRPC to negate an integer
   7200 reps @   0.7204 msec (  1390.0/sec): TCP-based SunRPC to negate an integer
  36000 trep @   0.7218 msec (  1390.0/sec): TCP-based SunRPC to negate an integer

   6000 reps @   0.8519 msec (  1170.0/sec): UDP-based SunRPC to negate an integer
   6000 reps @   0.8478 msec (  1180.0/sec): UDP-based SunRPC to negate an integer
   6000 reps @   0.8464 msec (  1180.0/sec): UDP-based SunRPC to negate an integer
   6000 reps @   0.8472 msec (  1180.0/sec): UDP-based SunRPC to negate an integer
   6000 reps @   0.8487 msec (  1180.0/sec): UDP-based SunRPC to negate an integer
  30000 trep @   0.8484 msec (  1180.0/sec): UDP-based SunRPC to negate an integer

   7200 reps @   0.6979 msec (  1430.0/sec): TCP-based SunRPC no-op
   7200 reps @   0.7000 msec (  1430.0/sec): TCP-based SunRPC no-op
   7200 reps @   0.6993 msec (  1430.0/sec): TCP-based SunRPC no-op
   7200 reps @   0.7009 msec (  1430.0/sec): TCP-based SunRPC no-op
   7200 reps @   0.7000 msec (  1430.0/sec): TCP-based SunRPC no-op
  36000 trep @   0.6996 msec (  1430.0/sec): TCP-based SunRPC no-op

   6000 reps @   0.8362 msec (  1200.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8344 msec (  1200.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8339 msec (  1200.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8323 msec (  1200.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8334 msec (  1200.0/sec): UDP-based SunRPC no-op
  30000 trep @   0.8340 msec (  1200.0/sec): UDP-based SunRPC no-op

1712000 reps @   0.0029 msec (342000.0/sec): getpid system call
1712000 reps @   0.0029 msec (342000.0/sec): getpid system call
1712000 reps @   0.0029 msec (342000.0/sec): getpid system call
1712000 reps @   0.0029 msec (342000.0/sec): getpid system call
1712000 reps @   0.0029 msec (342000.0/sec): getpid system call
8560000 trep @   0.0029 msec (342000.0/sec): getpid system call

 236500 reps @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 236500 reps @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 236500 reps @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 236500 reps @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 236500 reps @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1182500 trep @   0.0211 msec ( 47400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 997600 reps @   0.0050 msec (200000.0/sec): gettimeofday system call
 997600 reps @   0.0050 msec (199000.0/sec): gettimeofday system call
 997600 reps @   0.0050 msec (199000.0/sec): gettimeofday system call
 997600 reps @   0.0050 msec (199000.0/sec): gettimeofday system call
 997600 reps @   0.0050 msec (199000.0/sec): gettimeofday system call
4988000 trep @   0.0050 msec (199000.0/sec): gettimeofday system call

    500 reps @  10.8951 msec (    91.8/sec): fork, child immediately exits, parent waits
    500 reps @  12.8949 msec (    77.5/sec): fork, child immediately exits, parent waits
    500 reps @  15.3437 msec (    65.2/sec): fork, child immediately exits, parent waits
    500 reps @  15.3266 msec (    65.2/sec): fork, child immediately exits, parent waits
    500 reps @  15.2630 msec (    65.5/sec): fork, child immediately exits, parent waits
   2500 trep @  13.9447 msec (    71.7/sec): fork, child immediately exits, parent waits

      5 reps @ 1009.9904 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9582 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9778 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9996 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9428 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1009.9738 msec (    0.99/sec): sleep for one second (validates test time)

 917800 reps @   0.0055 msec (183000.0/sec): select on no fds with no timeout
 917800 reps @   0.0055 msec (183000.0/sec): select on no fds with no timeout
 917800 reps @   0.0055 msec (183000.0/sec): select on no fds with no timeout
 917800 reps @   0.0054 msec (184000.0/sec): select on no fds with no timeout
 917800 reps @   0.0055 msec (183000.0/sec): select on no fds with no timeout
4589000 trep @   0.0055 msec (183000.0/sec): select on no fds with no timeout

 185900 reps @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout
 185900 reps @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout
 185900 reps @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout
 185900 reps @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout
 185900 reps @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout
 929500 trep @   0.0270 msec ( 37100.0/sec): select on 16 pipe read fds with immediate timeout

  87500 reps @   0.0570 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout
  87500 reps @   0.0570 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout
  87500 reps @   0.0570 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout
  87500 reps @   0.0570 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout
  87500 reps @   0.0571 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout
 437500 trep @   0.0570 msec ( 17500.0/sec): select on 32 pipe read fds with immediate timeout

 195600 reps @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout
 195600 reps @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout
 195600 reps @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout
 195600 reps @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout
 195600 reps @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout
 978000 trep @   0.0256 msec ( 39100.0/sec): select on 16 pipe write fds with immediate timeout

 203300 reps @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout
 203300 reps @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout
 203300 reps @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout
 203300 reps @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout
 203300 reps @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout
1016500 trep @   0.0246 msec ( 40600.0/sec): select on 32 pipe write fds with immediate timeout

   2100 reps @   2.4649 msec (   406.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   2100 reps @   2.4652 msec (   406.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   2100 reps @   2.4653 msec (   406.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   2100 reps @   2.4665 msec (   405.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   2100 reps @   2.4661 msec (   405.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  10500 trep @   2.4656 msec (   406.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    130 reps @  38.6240 msec (    25.9/sec): popen and read from "/bin/echo hello"
    130 reps @  38.5156 msec (    26.0/sec): popen and read from "/bin/echo hello"
    130 reps @  38.4269 msec (    26.0/sec): popen and read from "/bin/echo hello"
    130 reps @  38.9667 msec (    25.7/sec): popen and read from "/bin/echo hello"
    130 reps @  38.3468 msec (    26.1/sec): popen and read from "/bin/echo hello"
    650 trep @  38.5760 msec (    25.9/sec): popen and read from "/bin/echo hello"

  32350 reps @   0.1546 msec (  6470.0/sec): mmap megabyte /dev/zero region 
  32350 reps @   0.1545 msec (  6470.0/sec): mmap megabyte /dev/zero region 
  32350 reps @   0.1544 msec (  6480.0/sec): mmap megabyte /dev/zero region 
  32350 reps @   0.1543 msec (  6480.0/sec): mmap megabyte /dev/zero region 
  32350 reps @   0.1541 msec (  6490.0/sec): mmap megabyte /dev/zero region 
 161750 trep @   0.1544 msec (  6480.0/sec): mmap megabyte /dev/zero region 

    168 reps @  29.8395 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    168 reps @  29.8070 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    168 reps @  29.8392 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    168 reps @  29.8686 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    168 reps @  29.8134 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    840 trep @  29.8335 msec (    33.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    193 reps @  22.2901 msec (    44.9/sec): copy every byte of newly mmaped megabyte file
    193 reps @  22.3249 msec (    44.8/sec): copy every byte of newly mmaped megabyte file
    193 reps @  22.8757 msec (    43.7/sec): copy every byte of newly mmaped megabyte file
    193 reps @  22.8645 msec (    43.7/sec): copy every byte of newly mmaped megabyte file
    193 reps @  22.8980 msec (    43.7/sec): copy every byte of newly mmaped megabyte file
    965 trep @  22.6506 msec (    44.1/sec): copy every byte of newly mmaped megabyte file

     28 reps @ 152.9131 msec (    6.54/sec): compress & uncompress 52 kilobyte text file of numbers
     28 reps @ 153.8546 msec (    6.50/sec): compress & uncompress 52 kilobyte text file of numbers
     28 reps @ 153.1025 msec (    6.53/sec): compress & uncompress 52 kilobyte text file of numbers
     28 reps @ 153.2501 msec (    6.53/sec): compress & uncompress 52 kilobyte text file of numbers
     28 reps @ 153.9536 msec (    6.50/sec): compress & uncompress 52 kilobyte text file of numbers
    140 trep @ 153.4148 msec (    6.52/sec): compress & uncompress 52 kilobyte text file of numbers

      5 reps @ 371.5764 msec (    2.69/sec): compile ANSI C `hello world' with no special options
      5 reps @ 372.1936 msec (    2.69/sec): compile ANSI C `hello world' with no special options
      5 reps @ 383.0892 msec (    2.61/sec): compile ANSI C `hello world' with no special options
      5 reps @ 369.6508 msec (    2.71/sec): compile ANSI C `hello world' with no special options
      5 reps @ 369.7036 msec (    2.70/sec): compile ANSI C `hello world' with no special options
     25 trep @ 373.2427 msec (    2.68/sec): compile ANSI C `hello world' with no special options

      6 reps @ 702.0050 msec (    1.42/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      6 reps @ 791.5877 msec (    1.26/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      6 reps @ 762.9168 msec (    1.31/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      6 reps @ 753.6227 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
      6 reps @ 656.6000 msec (    1.52/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     30 trep @ 733.3464 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

      8 reps @ 720.2002 msec (    1.39/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 895.0427 msec (    1.12/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 684.6582 msec (    1.46/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 743.6463 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 738.8179 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     40 trep @ 756.4731 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     12 reps @ 749.1623 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 792.4362 msec (    1.26/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 695.0043 msec (    1.44/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 859.9267 msec (    1.16/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 616.6764 msec (    1.62/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     60 trep @ 742.6412 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

      8 reps @ 756.5859 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 737.4517 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 738.7062 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 743.7025 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 744.3019 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     40 trep @ 744.1496 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     12 reps @ 738.2295 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 706.2732 msec (    1.42/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 747.0897 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 745.3475 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 736.6372 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     60 trep @ 734.7154 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 737.8096 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 732.8421 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 723.4796 msec (    1.38/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 744.7041 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 739.3457 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 735.6362 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      3 reps @ 1754.9480 msec (    0.57/sec): use dc to output first 1,000 factorials
      3 reps @ 1759.1927 msec (    0.57/sec): use dc to output first 1,000 factorials
      3 reps @ 1760.7037 msec (    0.57/sec): use dc to output first 1,000 factorials
      3 reps @ 1757.1667 msec (    0.57/sec): use dc to output first 1,000 factorials
      3 reps @ 1757.9163 msec (    0.57/sec): use dc to output first 1,000 factorials
     15 trep @ 1757.9855 msec (    0.57/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0058 msec (173000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0057 msec (175000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0057 msec (175000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0057 msec (175000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0057 msec (175000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0057 msec (175000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  45344 reps @   0.1101 msec (  9080.0/sec): use regcomp to compile 51 char literal, then regfree
  45344 reps @   0.1101 msec (  9080.0/sec): use regcomp to compile 51 char literal, then regfree
  45344 reps @   0.1102 msec (  9070.0/sec): use regcomp to compile 51 char literal, then regfree
  45344 reps @   0.1103 msec (  9070.0/sec): use regcomp to compile 51 char literal, then regfree
  45344 reps @   0.1103 msec (  9070.0/sec): use regcomp to compile 51 char literal, then regfree
 226720 trep @   0.1102 msec (  9070.0/sec): use regcomp to compile 51 char literal, then regfree

      4 reps @ 1374.0735 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1372.4213 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1371.9910 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1372.5283 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1372.3998 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text
     20 trep @ 1372.6827 msec (    0.73/sec): use regexec with 51 char literal to search 142 kilobyte text

  57428 reps @   0.0871 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree
  57428 reps @   0.0871 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree
  57428 reps @   0.0872 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree
  57428 reps @   0.0872 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree
  57428 reps @   0.0871 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree
 287140 trep @   0.0871 msec ( 11500.0/sec): use regcomp to compile long .* pattern, then regfree

      7 reps @ 814.2014 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text
      7 reps @ 814.2643 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text
      7 reps @ 813.9999 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text
      7 reps @ 813.7527 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text
      7 reps @ 814.2063 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text
     35 trep @ 814.0849 msec (    1.23/sec): use regexec with long .* pattern to search 142 kilobyte text

  14080 reps @   0.3562 msec (  2810.0/sec): use getpwnam() to get root password entry
  14080 reps @   0.3560 msec (  2810.0/sec): use getpwnam() to get root password entry
  14080 reps @   0.3559 msec (  2810.0/sec): use getpwnam() to get root password entry
  14080 reps @   0.3560 msec (  2810.0/sec): use getpwnam() to get root password entry
  14080 reps @   0.3558 msec (  2810.0/sec): use getpwnam() to get root password entry
  70400 trep @   0.3560 msec (  2810.0/sec): use getpwnam() to get root password entry

  14120 reps @   0.3549 msec (  2820.0/sec): use getpwuid() to get root password entry
  14120 reps @   0.3546 msec (  2820.0/sec): use getpwuid() to get root password entry
  14120 reps @   0.3550 msec (  2820.0/sec): use getpwuid() to get root password entry
  14120 reps @   0.3546 msec (  2820.0/sec): use getpwuid() to get root password entry
  14120 reps @   0.3551 msec (  2820.0/sec): use getpwuid() to get root password entry
  70600 trep @   0.3548 msec (  2820.0/sec): use getpwuid() to get root password entry

  96360 reps @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost
  96360 reps @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost
  96360 reps @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost
  96360 reps @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost
  96360 reps @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost
 481800 trep @   0.0520 msec ( 19200.0/sec): use gethostbyname() to lookup localhost

