UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.5-ALPHA-1273972131
Compiler version: 7.2
Instruction set: MIPS 3
Application binary interface: 64-bit
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
CPU: MIPS R4400 Processor Chip Revision: 5.0
4 150 MHZ IP19 Processors
Main memory size: 512 Mbytes, 2-way interleaved
Instruction cache size: 16 Kbytes
Data cache size: 16 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 1 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 10 on SCSI controller 1
Integral EPC serial ports: 4
Integral EPC parallel port: Ebus slot 3
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
I/O board, Ebus slot 3: IO4 revision 1
VME bus: adapter 13
VME bus: adapter 0 mapped to adapter 13
EPC external interrupts
Uptime:  2:16
Users: 1
Load average: 0.06, 0.01, 0.00
File IO test directory: /usr/tmp
File IO test filesystem: xfs (2105.14 MB total, 240.25 MB available)
Date: Mon Jul 21 01:42:08 1997

1134768 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1134768 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1134768 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1134768 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1134768 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
5673840 trep @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply

1271040 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271040 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271040 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271040 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271040 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
6355200 trep @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply

 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 680000 trep @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return

4540400 reps @   0.0011 msec (908000.0/sec): bcopy of 256 bytes
4540400 reps @   0.0011 msec (908000.0/sec): bcopy of 256 bytes
4540400 reps @   0.0011 msec (908000.0/sec): bcopy of 256 bytes
4540400 reps @   0.0011 msec (908000.0/sec): bcopy of 256 bytes
4540400 reps @   0.0011 msec (908000.0/sec): bcopy of 256 bytes
22702000 trep @   0.0011 msec (908000.0/sec): bcopy of 256 bytes

  46320 reps @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes
 231600 trep @   0.1068 msec (  9360.0/sec): bcopy of 16 kilobytes

   4672 reps @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes
   4672 reps @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes
   4672 reps @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes
   4672 reps @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes
   4672 reps @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes
  23360 trep @   1.0664 msec (   938.0/sec): bcopy of 100 kilobytes

    112 reps @  39.2337 msec (    25.5/sec): bcopy of 1 megabyte
    112 reps @  39.2273 msec (    25.5/sec): bcopy of 1 megabyte
    112 reps @  39.2184 msec (    25.5/sec): bcopy of 1 megabyte
    112 reps @  39.2420 msec (    25.5/sec): bcopy of 1 megabyte
    112 reps @  39.2388 msec (    25.5/sec): bcopy of 1 megabyte
    560 trep @  39.2320 msec (    25.5/sec): bcopy of 1 megabyte

     12 reps @ 469.0840 msec (    2.13/sec): bcopy of 10 megabytes
     12 reps @ 469.1387 msec (    2.13/sec): bcopy of 10 megabytes
     12 reps @ 469.0625 msec (    2.13/sec): bcopy of 10 megabytes
     12 reps @ 468.8771 msec (    2.13/sec): bcopy of 10 megabytes
     12 reps @ 468.9688 msec (    2.13/sec): bcopy of 10 megabytes
     60 trep @ 469.0262 msec (    2.13/sec): bcopy of 10 megabytes

     20 reps @ 285.4755 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.5455 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.5192 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.5157 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.5179 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 285.5147 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 397.5585 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 397.5826 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 397.6321 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 397.6266 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 397.6186 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 397.6037 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 342.4813 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.4544 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.4871 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.3996 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.3712 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 342.4387 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)

6826800 reps @   0.0007 msec (1370000.0/sec): bzero of 256 bytes
6826800 reps @   0.0007 msec (1370000.0/sec): bzero of 256 bytes
6826800 reps @   0.0007 msec (1370000.0/sec): bzero of 256 bytes
6826800 reps @   0.0007 msec (1370000.0/sec): bzero of 256 bytes
6826800 reps @   0.0007 msec (1370000.0/sec): bzero of 256 bytes
34134000 trep @   0.0007 msec (1370000.0/sec): bzero of 256 bytes

  52640 reps @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes
  52640 reps @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes
  52640 reps @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes
  52640 reps @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes
  52640 reps @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes
 263200 trep @   0.0950 msec ( 10500.0/sec): bzero of 16 kilobytes

   8400 reps @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes
   8400 reps @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes
   8400 reps @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes
   8400 reps @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes
   8400 reps @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes
  42000 trep @   0.5939 msec (  1680.0/sec): bzero of 100 kilobytes

    340 reps @  14.9265 msec (    67.0/sec): bzero of 1 megabyte
    340 reps @  14.9271 msec (    67.0/sec): bzero of 1 megabyte
    340 reps @  14.9255 msec (    67.0/sec): bzero of 1 megabyte
    340 reps @  14.9260 msec (    67.0/sec): bzero of 1 megabyte
    340 reps @  14.9260 msec (    67.0/sec): bzero of 1 megabyte
   1700 trep @  14.9262 msec (    67.0/sec): bzero of 1 megabyte

     36 reps @ 149.7399 msec (    6.68/sec): bzero of 10 megabytes
     36 reps @ 149.7388 msec (    6.68/sec): bzero of 10 megabytes
     36 reps @ 149.7311 msec (    6.68/sec): bzero of 10 megabytes
     36 reps @ 149.7316 msec (    6.68/sec): bzero of 10 megabytes
     36 reps @ 149.7360 msec (    6.68/sec): bzero of 10 megabytes
    180 trep @ 149.7355 msec (    6.68/sec): bzero of 10 megabytes

     36 reps @ 149.7043 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.7062 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.7186 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.7156 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.7266 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)
    180 trep @ 149.7142 msec (    6.68/sec): bzero of 10 megabytes (cacheline-aligned)

     36 reps @ 150.3803 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.3771 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.4448 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.3924 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.4110 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)
    180 trep @ 150.4011 msec (    6.65/sec): bzero of 10 megabytes (word mis-aligned)

     36 reps @ 150.1945 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.1917 msec (    6.61/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.1803 msec (    6.61/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.1057 msec (    6.62/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.1039 msec (    6.62/sec): bzero of 10 megabytes (dword mis-aligned)
    180 trep @ 150.9552 msec (    6.62/sec): bzero of 10 megabytes (dword mis-aligned)

   4303 reps @   1.1583 msec (   863.0/sec): bcopy then qsort 400 32-bit integers
   4303 reps @   1.1582 msec (   863.0/sec): bcopy then qsort 400 32-bit integers
   4303 reps @   1.1582 msec (   863.0/sec): bcopy then qsort 400 32-bit integers
   4303 reps @   1.1583 msec (   863.0/sec): bcopy then qsort 400 32-bit integers
   4303 reps @   1.1583 msec (   863.0/sec): bcopy then qsort 400 32-bit integers
  21515 trep @   1.1583 msec (   863.0/sec): bcopy then qsort 400 32-bit integers

     69 reps @  72.8985 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers
     69 reps @  72.8980 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers
     69 reps @  72.8982 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers
     69 reps @  72.8987 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers
     69 reps @  72.8992 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers
    345 trep @  72.8985 msec (    13.7/sec): bcopy then qsort 16,000 32-bit integers

     15 reps @ 337.3973 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 337.3979 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 337.3949 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 337.3924 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 337.3939 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers
     75 trep @ 337.3953 msec (    2.96/sec): bcopy then qsort 64,000 32-bit integers

6800000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6800000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6800000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6800000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6800000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
34000000 trep @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

3720000 reps @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)
3720000 reps @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)
3720000 reps @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)
3720000 reps @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)
3720000 reps @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)
18600000 trep @   0.0011 msec (913000.0/sec): basic double trigonometric function (sin/cos/tan)

 978000 reps @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 978000 reps @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 978000 reps @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 978000 reps @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 978000 reps @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4890000 trep @   0.0051 msec (196000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  14400 reps @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)
  14400 reps @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)
  14400 reps @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)
  14400 reps @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)
  14400 reps @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)
  72000 trep @   0.3524 msec (  2840.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  11.2906 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.2907 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.2907 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.2907 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.2907 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  11.2907 msec (    88.6/sec): Tower of Hanoi recursion test (15 deep)

 160500 reps @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 160500 reps @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 160500 reps @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 160500 reps @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 160500 reps @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 802500 trep @   0.0312 msec ( 32100.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  52200 reps @   0.0974 msec ( 10300.0/sec): write 80 bytes to a log file
  52200 reps @   0.0981 msec ( 10200.0/sec): write 80 bytes to a log file
  52200 reps @   0.0987 msec ( 10100.0/sec): write 80 bytes to a log file
  52200 reps @   0.0990 msec ( 10100.0/sec): write 80 bytes to a log file
  52200 reps @   0.1002 msec (  9980.0/sec): write 80 bytes to a log file
 261000 trep @   0.0987 msec ( 10100.0/sec): write 80 bytes to a log file

   1100 reps @   5.2556 msec (   190.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   5.1107 msec (   196.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   5.3089 msec (   188.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   5.1925 msec (   193.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   5.1667 msec (   194.0/sec): per-file cost of creating 100 files then unlinking them all
   5500 trep @   5.2069 msec (   192.0/sec): per-file cost of creating 100 files then unlinking them all

  16900 reps @   0.2958 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files
  16900 reps @   0.2957 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files
  16900 reps @   0.2958 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files
  16900 reps @   0.2957 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files
  16900 reps @   0.2958 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files
  84500 trep @   0.2958 msec (  3380.0/sec): per-file cost of open and immediate close of 100 files

  27000 reps @   0.2088 msec (  4790.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1873 msec (  5340.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1871 msec (  5350.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1883 msec (  5310.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1868 msec (  5350.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 135000 trep @   0.1917 msec (  5220.0/sec): per-chmod cost of chmod permissions toggle of 100 files

  76000 reps @   0.0660 msec ( 15100.0/sec): cost of stat'ing current dir
  76000 reps @   0.0667 msec ( 15000.0/sec): cost of stat'ing current dir
  76000 reps @   0.0667 msec ( 15000.0/sec): cost of stat'ing current dir
  76000 reps @   0.0676 msec ( 14800.0/sec): cost of stat'ing current dir
  76000 reps @   0.0676 msec ( 14800.0/sec): cost of stat'ing current dir
 380000 trep @   0.0669 msec ( 14900.0/sec): cost of stat'ing current dir

  21000 reps @   0.2404 msec (  4160.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2404 msec (  4160.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2414 msec (  4140.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2408 msec (  4150.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2396 msec (  4170.0/sec): cost of stat'ing 5 component path
 105000 trep @   0.2405 msec (  4160.0/sec): cost of stat'ing 5 component path

    559 reps @   8.9543 msec (   112.0/sec): open directory and stat 100 files in it
    559 reps @   8.9539 msec (   112.0/sec): open directory and stat 100 files in it
    559 reps @   8.9579 msec (   112.0/sec): open directory and stat 100 files in it
    559 reps @   8.9582 msec (   112.0/sec): open directory and stat 100 files in it
    559 reps @   8.9542 msec (   112.0/sec): open directory and stat 100 files in it
   2795 trep @   8.9557 msec (   112.0/sec): open directory and stat 100 files in it

   1200 reps @   4.7451 msec (   211.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.4173 msec (   226.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.5770 msec (   218.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.4503 msec (   225.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.4882 msec (   223.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   6000 trep @   4.5356 msec (   220.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 104400 reps @   0.0491 msec ( 20300.0/sec): ndbm lookup into database with 900 entries
 104400 reps @   0.0477 msec ( 21000.0/sec): ndbm lookup into database with 900 entries
 104400 reps @   0.0477 msec ( 21000.0/sec): ndbm lookup into database with 900 entries
 104400 reps @   0.0477 msec ( 21000.0/sec): ndbm lookup into database with 900 entries
 104400 reps @   0.0478 msec ( 20900.0/sec): ndbm lookup into database with 900 entries
 522000 trep @   0.0480 msec ( 20800.0/sec): ndbm lookup into database with 900 entries

  29600 reps @   0.1659 msec (  6030.0/sec): 1 byte token passing between two processes using two pipes
  29600 reps @   0.1689 msec (  5920.0/sec): 1 byte token passing between two processes using two pipes
  29600 reps @   0.1713 msec (  5840.0/sec): 1 byte token passing between two processes using two pipes
  29600 reps @   0.1675 msec (  5970.0/sec): 1 byte token passing between two processes using two pipes
  29600 reps @   0.1687 msec (  5930.0/sec): 1 byte token passing between two processes using two pipes
 148000 trep @   0.1685 msec (  5940.0/sec): 1 byte token passing between two processes using two pipes

  20800 reps @   0.2263 msec (  4420.0/sec): 1 kilobyte token passing between two processes using two pipes
  20800 reps @   0.2338 msec (  4280.0/sec): 1 kilobyte token passing between two processes using two pipes
  20800 reps @   0.2344 msec (  4270.0/sec): 1 kilobyte token passing between two processes using two pipes
  20800 reps @   0.2283 msec (  4380.0/sec): 1 kilobyte token passing between two processes using two pipes
  20800 reps @   0.2270 msec (  4410.0/sec): 1 kilobyte token passing between two processes using two pipes
 104000 trep @   0.2300 msec (  4350.0/sec): 1 kilobyte token passing between two processes using two pipes

8860000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
8860000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
8860000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
8860000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
8860000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
44300000 trep @   0.0006 msec (1770000.0/sec): setjmp/longjmp

  56000 reps @   0.0899 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0898 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0898 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0898 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0898 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 trep @   0.0898 msec ( 11100.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    985 reps @   5.4211 msec (   184.0/sec): create/destroy client UDP-based SunRPC handle
    985 reps @   5.0949 msec (   196.0/sec): create/destroy client UDP-based SunRPC handle
    985 reps @   5.4197 msec (   185.0/sec): create/destroy client UDP-based SunRPC handle
    985 reps @   5.0997 msec (   196.0/sec): create/destroy client UDP-based SunRPC handle
    985 reps @   5.4248 msec (   184.0/sec): create/destroy client UDP-based SunRPC handle
   4925 trep @   5.2920 msec (   189.0/sec): create/destroy client UDP-based SunRPC handle

   4800 reps @   1.0311 msec (   970.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0398 msec (   962.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0337 msec (   967.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0308 msec (   970.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0213 msec (   979.0/sec): TCP-based SunRPC to negate an integer
  24000 trep @   1.0313 msec (   970.0/sec): TCP-based SunRPC to negate an integer

   5600 reps @   0.9120 msec (  1100.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.9148 msec (  1090.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.9180 msec (  1090.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.9034 msec (  1110.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.9108 msec (  1100.0/sec): UDP-based SunRPC to negate an integer
  28000 trep @   0.9118 msec (  1100.0/sec): UDP-based SunRPC to negate an integer

   5200 reps @   1.0114 msec (   989.0/sec): TCP-based SunRPC no-op
   5200 reps @   1.0146 msec (   986.0/sec): TCP-based SunRPC no-op
   5200 reps @   1.0116 msec (   989.0/sec): TCP-based SunRPC no-op
   5200 reps @   1.0069 msec (   993.0/sec): TCP-based SunRPC no-op
   5200 reps @   1.0215 msec (   979.0/sec): TCP-based SunRPC no-op
  26000 trep @   1.0132 msec (   987.0/sec): TCP-based SunRPC no-op

   4800 reps @   0.9209 msec (  1090.0/sec): UDP-based SunRPC no-op
   4800 reps @   0.9266 msec (  1080.0/sec): UDP-based SunRPC no-op
   4800 reps @   0.9357 msec (  1070.0/sec): UDP-based SunRPC no-op
   4800 reps @   0.9347 msec (  1070.0/sec): UDP-based SunRPC no-op
   4800 reps @   0.9230 msec (  1080.0/sec): UDP-based SunRPC no-op
  24000 trep @   0.9282 msec (  1080.0/sec): UDP-based SunRPC no-op

1098000 reps @   0.0046 msec (220000.0/sec): getpid system call
1098000 reps @   0.0046 msec (220000.0/sec): getpid system call
1098000 reps @   0.0046 msec (220000.0/sec): getpid system call
1098000 reps @   0.0046 msec (220000.0/sec): getpid system call
1098000 reps @   0.0046 msec (220000.0/sec): getpid system call
5490000 trep @   0.0046 msec (220000.0/sec): getpid system call

 107000 reps @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 107000 reps @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 107000 reps @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 107000 reps @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 107000 reps @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 535000 trep @   0.0468 msec ( 21400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 509200 reps @   0.0098 msec (102000.0/sec): gettimeofday system call
 509200 reps @   0.0098 msec (102000.0/sec): gettimeofday system call
 509200 reps @   0.0098 msec (102000.0/sec): gettimeofday system call
 509200 reps @   0.0098 msec (102000.0/sec): gettimeofday system call
 509200 reps @   0.0098 msec (102000.0/sec): gettimeofday system call
2546000 trep @   0.0098 msec (102000.0/sec): gettimeofday system call

    350 reps @  16.3136 msec (    61.3/sec): fork, child immediately exits, parent waits
    350 reps @  16.4536 msec (    60.8/sec): fork, child immediately exits, parent waits
    350 reps @  15.9909 msec (    62.5/sec): fork, child immediately exits, parent waits
    350 reps @  16.4988 msec (    60.6/sec): fork, child immediately exits, parent waits
    350 reps @  16.4810 msec (    60.7/sec): fork, child immediately exits, parent waits
   1750 trep @  16.3476 msec (    61.2/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.9816 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9574 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9672 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9662 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9384 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.9622 msec (    0.99/sec): sleep for one second (validates test time)

 147700 reps @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout
 147700 reps @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout
 147700 reps @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout
 147700 reps @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout
 147700 reps @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout
 738500 trep @   0.0338 msec ( 29600.0/sec): select on no fds with no timeout

  54700 reps @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout
  54700 reps @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout
  54700 reps @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout
  54700 reps @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout
  54700 reps @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout
 273500 trep @   0.0916 msec ( 10900.0/sec): select on 16 pipe read fds with immediate timeout

  33900 reps @   0.1477 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout
  33900 reps @   0.1476 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout
  33900 reps @   0.1476 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout
  33900 reps @   0.1476 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout
  33900 reps @   0.1476 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout
 169500 trep @   0.1476 msec (  6770.0/sec): select on 32 pipe read fds with immediate timeout

  55000 reps @   0.0909 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout
  55000 reps @   0.0908 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout
  55000 reps @   0.0908 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout
  55000 reps @   0.0908 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout
  55000 reps @   0.0910 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout
 275000 trep @   0.0909 msec ( 11000.0/sec): select on 16 pipe write fds with immediate timeout

  55400 reps @   0.0902 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout
  55400 reps @   0.0903 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout
  55400 reps @   0.0902 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout
  55400 reps @   0.0902 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout
  55400 reps @   0.0902 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout
 277000 trep @   0.0902 msec ( 11100.0/sec): select on 32 pipe write fds with immediate timeout

   9300 reps @   0.5415 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9300 reps @   0.5415 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9300 reps @   0.5415 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9300 reps @   0.5416 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9300 reps @   0.5417 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  46500 trep @   0.5415 msec (  1850.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    100 reps @  54.6488 msec (    18.3/sec): popen and read from "/bin/echo hello"
    100 reps @  54.7618 msec (    18.3/sec): popen and read from "/bin/echo hello"
    100 reps @  54.4778 msec (    18.4/sec): popen and read from "/bin/echo hello"
    100 reps @  54.4457 msec (    18.4/sec): popen and read from "/bin/echo hello"
    100 reps @  54.5552 msec (    18.3/sec): popen and read from "/bin/echo hello"
    500 trep @  54.5779 msec (    18.3/sec): popen and read from "/bin/echo hello"

  16400 reps @   0.3105 msec (  3220.0/sec): mmap megabyte /dev/zero region 
  16400 reps @   0.3105 msec (  3220.0/sec): mmap megabyte /dev/zero region 
  16400 reps @   0.3105 msec (  3220.0/sec): mmap megabyte /dev/zero region 
  16400 reps @   0.3105 msec (  3220.0/sec): mmap megabyte /dev/zero region 
  16400 reps @   0.3092 msec (  3230.0/sec): mmap megabyte /dev/zero region 
  82000 trep @   0.3102 msec (  3220.0/sec): mmap megabyte /dev/zero region 

    218 reps @  22.9679 msec (    43.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  22.9716 msec (    43.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  22.9633 msec (    43.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  22.9642 msec (    43.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  22.9614 msec (    43.6/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1090 trep @  22.9656 msec (    43.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    355 reps @  14.1325 msec (    70.8/sec): copy every byte of newly mmaped megabyte file
    355 reps @  14.3801 msec (    69.5/sec): copy every byte of newly mmaped megabyte file
    355 reps @  14.4764 msec (    69.1/sec): copy every byte of newly mmaped megabyte file
    355 reps @  14.1497 msec (    70.7/sec): copy every byte of newly mmaped megabyte file
    355 reps @  14.0782 msec (    71.0/sec): copy every byte of newly mmaped megabyte file
   1775 trep @  14.2434 msec (    70.2/sec): copy every byte of newly mmaped megabyte file

     27 reps @ 189.0103 msec (    5.29/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 189.8433 msec (    5.27/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 190.6983 msec (    5.24/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 189.1099 msec (    5.29/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 189.6500 msec (    5.27/sec): compress & uncompress 52 kilobyte text file of numbers
    135 trep @ 189.6624 msec (    5.27/sec): compress & uncompress 52 kilobyte text file of numbers

      9 reps @ 619.6148 msec (    1.61/sec): compile ANSI C `hello world' with no special options
      9 reps @ 611.8450 msec (    1.63/sec): compile ANSI C `hello world' with no special options
      9 reps @ 616.0992 msec (    1.62/sec): compile ANSI C `hello world' with no special options
      9 reps @ 624.2313 msec (    1.60/sec): compile ANSI C `hello world' with no special options
      9 reps @ 620.8030 msec (    1.61/sec): compile ANSI C `hello world' with no special options
     45 trep @ 618.5187 msec (    1.62/sec): compile ANSI C `hello world' with no special options

     18 reps @ 275.6183 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 271.7987 msec (    3.68/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 275.3054 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 274.2408 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 276.6878 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     90 trep @ 274.7302 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     12 reps @ 271.1742 msec (    3.69/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 264.9728 msec (    3.77/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 280.6873 msec (    3.56/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 270.9278 msec (    3.69/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 255.7749 msec (    3.91/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     60 trep @ 268.7074 msec (    3.72/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     16 reps @ 283.6800 msec (    3.53/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 278.1042 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 288.8101 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 274.2785 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 275.4524 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     80 trep @ 280.0650 msec (    3.57/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     24 reps @ 277.8171 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 278.0141 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 274.6131 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 277.4426 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 275.1138 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
    120 trep @ 276.6001 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 275.9426 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 276.5473 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 274.9633 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 274.4482 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 275.8290 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 275.5461 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     32 reps @ 281.3602 msec (    3.55/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 280.6191 msec (    3.56/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 276.3910 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 278.7680 msec (    3.59/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 273.4830 msec (    3.66/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    160 trep @ 278.1243 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 3552.5365 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3548.8900 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3597.2115 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3654.2265 msec (    0.27/sec): use dc to output first 1,000 factorials
      2 reps @ 3540.7335 msec (    0.28/sec): use dc to output first 1,000 factorials
     10 trep @ 3578.7196 msec (    0.28/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0100 msec (100000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (103000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (103000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  24332 reps @   0.2054 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree
  24332 reps @   0.2053 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree
  24332 reps @   0.2053 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree
  24332 reps @   0.2053 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree
  24332 reps @   0.2053 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree
 121660 trep @   0.2053 msec (  4870.0/sec): use regcomp to compile 51 char literal, then regfree

      2 reps @ 3104.6180 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3104.6775 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3104.6325 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3104.6620 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3104.6960 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text
     10 trep @ 3104.6572 msec (    0.32/sec): use regexec with 51 char literal to search 142 kilobyte text

  30504 reps @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree
  30504 reps @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree
  30504 reps @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree
  30504 reps @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree
  30504 reps @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree
 152520 trep @   0.1638 msec (  6100.0/sec): use regcomp to compile long .* pattern, then regfree

      3 reps @ 1984.9583 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1985.0873 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1985.0110 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1985.0570 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1985.0223 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text
     15 trep @ 1985.0272 msec (    0.50/sec): use regexec with long .* pattern to search 142 kilobyte text

