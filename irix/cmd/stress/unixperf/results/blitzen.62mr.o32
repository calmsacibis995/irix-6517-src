UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.2
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
4 150 MHZ IP19 Processors
CPU: MIPS R4400 Processor Chip Revision: 5.0
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
Secondary unified instruction/data cache size: 1 Mbyte
Data cache size: 16 Kbytes
Instruction cache size: 16 Kbytes
Main memory size: 512 Mbytes, 2-way interleaved
I/O board, Ebus slot 3: IO4 revision 1
Integral EPC serial ports: 4
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
EPC external interrupts
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 10 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 1 on SCSI controller 1
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
CC synchronization join counter
Integral EPC parallel port: Ebus slot 3
VME bus: adapter 0 mapped to adapter 13
VME bus: adapter 13
Uptime: 55 mins
Users: 2
Load average: 1.04, 2.39, 2.22
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1786.64 MB total, 685.12 MB available)
Date: Mon Jul 21 19:48:06 1997

1197912 reps @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply
1197912 reps @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply
1197912 reps @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply
1197912 reps @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply
1197912 reps @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply
5989560 trep @   0.0042 msec (238000.0/sec): 4 by 4 double matrix multiply

1349892 reps @   0.0037 msec (271000.0/sec): 4 by 4 float matrix multiply
1349892 reps @   0.0037 msec (271000.0/sec): 4 by 4 float matrix multiply
1349892 reps @   0.0037 msec (267000.0/sec): 4 by 4 float matrix multiply
1349892 reps @   0.0038 msec (266000.0/sec): 4 by 4 float matrix multiply
1349892 reps @   0.0038 msec (266000.0/sec): 4 by 4 float matrix multiply
6749460 trep @   0.0037 msec (268000.0/sec): 4 by 4 float matrix multiply

 591500 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 591500 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 591500 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 591500 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 591500 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
2957500 trep @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return

3237600 reps @   0.0015 msec (648000.0/sec): bcopy of 256 bytes
3237600 reps @   0.0015 msec (648000.0/sec): bcopy of 256 bytes
3237600 reps @   0.0015 msec (648000.0/sec): bcopy of 256 bytes
3237600 reps @   0.0015 msec (648000.0/sec): bcopy of 256 bytes
3237600 reps @   0.0015 msec (648000.0/sec): bcopy of 256 bytes
16188000 trep @   0.0015 msec (648000.0/sec): bcopy of 256 bytes

  39120 reps @   0.1268 msec (  7880.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1268 msec (  7880.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1269 msec (  7880.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1268 msec (  7880.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1269 msec (  7880.0/sec): bcopy of 16 kilobytes
 195600 trep @   0.1268 msec (  7880.0/sec): bcopy of 16 kilobytes

   4188 reps @   1.1912 msec (   839.0/sec): bcopy of 100 kilobytes
   4188 reps @   1.1912 msec (   839.0/sec): bcopy of 100 kilobytes
   4188 reps @   1.1915 msec (   839.0/sec): bcopy of 100 kilobytes
   4188 reps @   1.1912 msec (   839.0/sec): bcopy of 100 kilobytes
   4188 reps @   1.1912 msec (   839.0/sec): bcopy of 100 kilobytes
  20940 trep @   1.1912 msec (   839.0/sec): bcopy of 100 kilobytes

     80 reps @  56.9515 msec (    17.6/sec): bcopy of 1 megabyte
     80 reps @  56.9466 msec (    17.6/sec): bcopy of 1 megabyte
     80 reps @  56.9635 msec (    17.6/sec): bcopy of 1 megabyte
     80 reps @  56.9452 msec (    17.6/sec): bcopy of 1 megabyte
     80 reps @  56.9452 msec (    17.6/sec): bcopy of 1 megabyte
    400 trep @  56.9504 msec (    17.6/sec): bcopy of 1 megabyte

      8 reps @ 667.1626 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 667.1641 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 667.0839 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 667.0725 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 667.0859 msec (    1.50/sec): bcopy of 10 megabytes
     40 trep @ 667.1138 msec (    1.50/sec): bcopy of 10 megabytes

     20 reps @ 299.4844 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.5045 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.4105 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.4239 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.5370 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 299.4720 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)

     12 reps @ 420.4316 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 420.3305 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 420.3871 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 420.3592 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 420.3213 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)
     60 trep @ 420.3659 msec (    2.38/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 405.9162 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.9132 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.8235 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.7634 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.7834 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 405.8399 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)

5311200 reps @   0.0009 msec (1060000.0/sec): bzero of 256 bytes
5311200 reps @   0.0009 msec (1060000.0/sec): bzero of 256 bytes
5311200 reps @   0.0009 msec (1060000.0/sec): bzero of 256 bytes
5311200 reps @   0.0009 msec (1060000.0/sec): bzero of 256 bytes
5311200 reps @   0.0009 msec (1060000.0/sec): bzero of 256 bytes
26556000 trep @   0.0009 msec (1060000.0/sec): bzero of 256 bytes

  48080 reps @   0.1038 msec (  9640.0/sec): bzero of 16 kilobytes
  48080 reps @   0.1038 msec (  9640.0/sec): bzero of 16 kilobytes
  48080 reps @   0.1038 msec (  9640.0/sec): bzero of 16 kilobytes
  48080 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
  48080 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
 240400 trep @   0.1038 msec (  9640.0/sec): bzero of 16 kilobytes

   7676 reps @   0.6499 msec (  1540.0/sec): bzero of 100 kilobytes
   7676 reps @   0.6503 msec (  1540.0/sec): bzero of 100 kilobytes
   7676 reps @   0.6499 msec (  1540.0/sec): bzero of 100 kilobytes
   7676 reps @   0.6499 msec (  1540.0/sec): bzero of 100 kilobytes
   7676 reps @   0.6499 msec (  1540.0/sec): bzero of 100 kilobytes
  38380 trep @   0.6500 msec (  1540.0/sec): bzero of 100 kilobytes

    320 reps @  15.8596 msec (    63.1/sec): bzero of 1 megabyte
    320 reps @  15.8602 msec (    63.1/sec): bzero of 1 megabyte
    320 reps @  15.8657 msec (    63.0/sec): bzero of 1 megabyte
    320 reps @  15.8612 msec (    63.0/sec): bzero of 1 megabyte
    320 reps @  15.8608 msec (    63.0/sec): bzero of 1 megabyte
   1600 trep @  15.8615 msec (    63.0/sec): bzero of 1 megabyte

     32 reps @ 158.9918 msec (    6.29/sec): bzero of 10 megabytes
     32 reps @ 158.9863 msec (    6.29/sec): bzero of 10 megabytes
     32 reps @ 159.0252 msec (    6.29/sec): bzero of 10 megabytes
     32 reps @ 159.0255 msec (    6.29/sec): bzero of 10 megabytes
     32 reps @ 158.9922 msec (    6.29/sec): bzero of 10 megabytes
    160 trep @ 159.0042 msec (    6.29/sec): bzero of 10 megabytes

     32 reps @ 158.9974 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 159.0267 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 159.0183 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 159.0306 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 159.0310 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)
    160 trep @ 159.0208 msec (    6.29/sec): bzero of 10 megabytes (cacheline-aligned)

     32 reps @ 159.0132 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 159.0364 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 159.0203 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 159.0314 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 159.0059 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)
    160 trep @ 159.0214 msec (    6.29/sec): bzero of 10 megabytes (word mis-aligned)

     32 reps @ 158.9971 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.0044 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.0262 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.0048 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 159.0063 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)
    160 trep @ 159.0078 msec (    6.29/sec): bzero of 10 megabytes (dword mis-aligned)

   5374 reps @   0.9306 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers
   5374 reps @   0.9304 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers
   5374 reps @   0.9305 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers
   5374 reps @   0.9304 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers
   5374 reps @   0.9304 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers
  26870 trep @   0.9305 msec (  1070.0/sec): bcopy then qsort 400 32-bit integers

     83 reps @  60.3030 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.3099 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.3096 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.3020 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.3020 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
    415 trep @  60.3053 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers

     18 reps @ 286.8518 msec (    3.49/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.8400 msec (    3.49/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.9510 msec (    3.48/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.8510 msec (    3.49/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.8502 msec (    3.49/sec): bcopy then qsort 64,000 32-bit integers
     90 trep @ 286.8688 msec (    3.49/sec): bcopy then qsort 64,000 32-bit integers

4997500 reps @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
4997500 reps @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
4997500 reps @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
4997500 reps @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
4997500 reps @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
24987500 trep @   0.0010 msec (999000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

3672500 reps @   0.0014 msec (735000.0/sec): basic double trigonometric function (sin/cos/tan)
3672500 reps @   0.0014 msec (735000.0/sec): basic double trigonometric function (sin/cos/tan)
3672500 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3672500 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3672500 reps @   0.0014 msec (735000.0/sec): basic double trigonometric function (sin/cos/tan)
18362500 trep @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)

 827500 reps @   0.0060 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 827500 reps @   0.0060 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 827500 reps @   0.0060 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 827500 reps @   0.0060 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 827500 reps @   0.0061 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4137500 trep @   0.0061 msec (165000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  11100 reps @   0.4471 msec (  2240.0/sec): Tower of Hanoi recursion test (10 deep)
  11100 reps @   0.4411 msec (  2270.0/sec): Tower of Hanoi recursion test (10 deep)
  11100 reps @   0.4384 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11100 reps @   0.4384 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11100 reps @   0.4384 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  55500 trep @   0.4407 msec (  2270.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  14.0440 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0429 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0429 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0435 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0429 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  14.0432 msec (    71.2/sec): Tower of Hanoi recursion test (15 deep)

 224500 reps @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 224500 reps @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 224500 reps @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 224500 reps @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 224500 reps @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1122500 trep @   0.0223 msec ( 44900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  52800 reps @   0.0970 msec ( 10300.0/sec): write 80 bytes to a log file
  52800 reps @   0.0983 msec ( 10200.0/sec): write 80 bytes to a log file
  52800 reps @   0.1100 msec (  9090.0/sec): write 80 bytes to a log file
  52800 reps @   0.1111 msec (  9000.0/sec): write 80 bytes to a log file
  52800 reps @   0.1083 msec (  9230.0/sec): write 80 bytes to a log file
 264000 trep @   0.1049 msec (  9530.0/sec): write 80 bytes to a log file

    900 reps @   6.4701 msec (   155.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.3487 msec (   158.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.3116 msec (   158.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.3832 msec (   157.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.4456 msec (   155.0/sec): per-file cost of creating 100 files then unlinking them all
   4500 trep @   6.3919 msec (   156.0/sec): per-file cost of creating 100 files then unlinking them all

  21400 reps @   0.2347 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files
  21400 reps @   0.2345 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files
  21400 reps @   0.2348 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files
  21400 reps @   0.2346 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files
  21400 reps @   0.2345 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files
 107000 trep @   0.2346 msec (  4260.0/sec): per-file cost of open and immediate close of 100 files

  30000 reps @   0.1784 msec (  5600.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  30000 reps @   0.1672 msec (  5980.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  30000 reps @   0.1683 msec (  5940.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  30000 reps @   0.1671 msec (  5980.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  30000 reps @   0.1673 msec (  5980.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 150000 trep @   0.1697 msec (  5890.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 100500 reps @   0.0499 msec ( 20100.0/sec): cost of stat'ing current dir
 100500 reps @   0.0499 msec ( 20100.0/sec): cost of stat'ing current dir
 100500 reps @   0.0499 msec ( 20100.0/sec): cost of stat'ing current dir
 100500 reps @   0.0501 msec ( 20000.0/sec): cost of stat'ing current dir
 100500 reps @   0.0520 msec ( 19200.0/sec): cost of stat'ing current dir
 502500 trep @   0.0503 msec ( 19900.0/sec): cost of stat'ing current dir

  24000 reps @   0.2101 msec (  4760.0/sec): cost of stat'ing 5 component path
  24000 reps @   0.2103 msec (  4750.0/sec): cost of stat'ing 5 component path
  24000 reps @   0.2104 msec (  4750.0/sec): cost of stat'ing 5 component path
  24000 reps @   0.2100 msec (  4760.0/sec): cost of stat'ing 5 component path
  24000 reps @   0.2106 msec (  4750.0/sec): cost of stat'ing 5 component path
 120000 trep @   0.2103 msec (  4760.0/sec): cost of stat'ing 5 component path

    648 reps @   7.7363 msec (   129.0/sec): open directory and stat 100 files in it
    648 reps @   7.7581 msec (   129.0/sec): open directory and stat 100 files in it
    648 reps @   7.7326 msec (   129.0/sec): open directory and stat 100 files in it
    648 reps @   7.7232 msec (   129.0/sec): open directory and stat 100 files in it
    648 reps @   7.7238 msec (   129.0/sec): open directory and stat 100 files in it
   3240 trep @   7.7348 msec (   129.0/sec): open directory and stat 100 files in it

    900 reps @   6.5245 msec (   153.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.2674 msec (   160.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.4142 msec (   156.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.4515 msec (   155.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.2786 msec (   159.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4500 trep @   6.3872 msec (   157.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 128700 reps @   0.0392 msec ( 25500.0/sec): ndbm lookup into database with 900 entries
 128700 reps @   0.0397 msec ( 25200.0/sec): ndbm lookup into database with 900 entries
 128700 reps @   0.0398 msec ( 25100.0/sec): ndbm lookup into database with 900 entries
 128700 reps @   0.0385 msec ( 26000.0/sec): ndbm lookup into database with 900 entries
 128700 reps @   0.0384 msec ( 26100.0/sec): ndbm lookup into database with 900 entries
 643500 trep @   0.0391 msec ( 25600.0/sec): ndbm lookup into database with 900 entries

  18800 reps @   0.2676 msec (  3740.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2693 msec (  3710.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2674 msec (  3740.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2698 msec (  3710.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2696 msec (  3710.0/sec): 1 byte token passing between two processes using two pipes
  94000 trep @   0.2687 msec (  3720.0/sec): 1 byte token passing between two processes using two pipes

  16400 reps @   0.3107 msec (  3220.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3119 msec (  3210.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3098 msec (  3230.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3090 msec (  3240.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3096 msec (  3230.0/sec): 1 kilobyte token passing between two processes using two pipes
  82000 trep @   0.3102 msec (  3220.0/sec): 1 kilobyte token passing between two processes using two pipes

5148000 reps @   0.0010 msec (1030000.0/sec): setjmp/longjmp
5148000 reps @   0.0010 msec (1030000.0/sec): setjmp/longjmp
5148000 reps @   0.0010 msec (1030000.0/sec): setjmp/longjmp
5148000 reps @   0.0010 msec (1030000.0/sec): setjmp/longjmp
5148000 reps @   0.0010 msec (1030000.0/sec): setjmp/longjmp
25740000 trep @   0.0010 msec (1030000.0/sec): setjmp/longjmp

 128000 reps @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 128000 reps @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 128000 reps @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 128000 reps @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 128000 reps @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 640000 trep @   0.0397 msec ( 25200.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1130 reps @   4.1177 msec (   243.0/sec): create/destroy client UDP-based SunRPC handle
   1130 reps @   4.2106 msec (   237.0/sec): create/destroy client UDP-based SunRPC handle
   1130 reps @   3.9815 msec (   251.0/sec): create/destroy client UDP-based SunRPC handle
   1130 reps @   4.2775 msec (   234.0/sec): create/destroy client UDP-based SunRPC handle
   1130 reps @   3.9307 msec (   254.0/sec): create/destroy client UDP-based SunRPC handle
   5650 trep @   4.1036 msec (   244.0/sec): create/destroy client UDP-based SunRPC handle

   4800 reps @   1.1230 msec (   890.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.1244 msec (   889.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.1798 msec (   848.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.1550 msec (   866.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.1171 msec (   895.0/sec): TCP-based SunRPC to negate an integer
  24000 trep @   1.1398 msec (   877.0/sec): TCP-based SunRPC to negate an integer

   2000 reps @   3.0571 msec (   327.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   3.0460 msec (   328.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   3.0385 msec (   329.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   3.0354 msec (   329.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   3.0250 msec (   331.0/sec): UDP-based SunRPC to negate an integer
  10000 trep @   3.0404 msec (   329.0/sec): UDP-based SunRPC to negate an integer

   4800 reps @   1.0966 msec (   912.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0817 msec (   924.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0913 msec (   916.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.1064 msec (   904.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.1325 msec (   883.0/sec): TCP-based SunRPC no-op
  24000 trep @   1.1017 msec (   908.0/sec): TCP-based SunRPC no-op

   2000 reps @   2.9842 msec (   335.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.9888 msec (   335.0/sec): UDP-based SunRPC no-op
   2000 reps @   3.0014 msec (   333.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.9802 msec (   336.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.9914 msec (   334.0/sec): UDP-based SunRPC no-op
  10000 trep @   2.9892 msec (   335.0/sec): UDP-based SunRPC no-op

1127500 reps @   0.0044 msec (225000.0/sec): getpid system call
1127500 reps @   0.0044 msec (225000.0/sec): getpid system call
1127500 reps @   0.0044 msec (225000.0/sec): getpid system call
1127500 reps @   0.0044 msec (225000.0/sec): getpid system call
1127500 reps @   0.0044 msec (225000.0/sec): getpid system call
5637500 trep @   0.0044 msec (225000.0/sec): getpid system call

 132000 reps @   0.0379 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 132000 reps @   0.0379 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 132000 reps @   0.0379 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 132000 reps @   0.0379 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 132000 reps @   0.0380 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 660000 trep @   0.0379 msec ( 26400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 397200 reps @   0.0120 msec ( 83300.0/sec): gettimeofday system call
 397200 reps @   0.0120 msec ( 83200.0/sec): gettimeofday system call
 397200 reps @   0.0120 msec ( 83300.0/sec): gettimeofday system call
 397200 reps @   0.0120 msec ( 83300.0/sec): gettimeofday system call
 397200 reps @   0.0120 msec ( 83200.0/sec): gettimeofday system call
1986000 trep @   0.0120 msec ( 83200.0/sec): gettimeofday system call

    600 reps @   8.8403 msec (   113.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.9387 msec (   112.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.8953 msec (   112.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.9008 msec (   112.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.9750 msec (   111.0/sec): fork, child immediately exits, parent waits
   3000 trep @   8.9100 msec (   112.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1009.9718 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9644 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9614 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9822 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9240 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1009.9608 msec (    0.99/sec): sleep for one second (validates test time)

 360900 reps @   0.0138 msec ( 72300.0/sec): select on no fds with no timeout
 360900 reps @   0.0138 msec ( 72200.0/sec): select on no fds with no timeout
 360900 reps @   0.0139 msec ( 72100.0/sec): select on no fds with no timeout
 360900 reps @   0.0138 msec ( 72200.0/sec): select on no fds with no timeout
 360900 reps @   0.0139 msec ( 72200.0/sec): select on no fds with no timeout
1804500 trep @   0.0139 msec ( 72200.0/sec): select on no fds with no timeout

  95100 reps @   0.0526 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout
  95100 reps @   0.0526 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout
  95100 reps @   0.0526 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout
  95100 reps @   0.0527 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout
  95100 reps @   0.0526 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout
 475500 trep @   0.0526 msec ( 19000.0/sec): select on 16 pipe read fds with immediate timeout

  58800 reps @   0.0852 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58800 reps @   0.0851 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58800 reps @   0.0851 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58800 reps @   0.0851 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58800 reps @   0.0852 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
 294000 trep @   0.0852 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout

 100000 reps @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout
 100000 reps @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout
 100000 reps @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout
 100000 reps @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout
 100000 reps @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout
 500000 trep @   0.0500 msec ( 20000.0/sec): select on 16 pipe write fds with immediate timeout

  98600 reps @   0.0510 msec ( 19600.0/sec): select on 32 pipe write fds with immediate timeout
  98600 reps @   0.0517 msec ( 19300.0/sec): select on 32 pipe write fds with immediate timeout
  98600 reps @   0.0507 msec ( 19700.0/sec): select on 32 pipe write fds with immediate timeout
  98600 reps @   0.0507 msec ( 19700.0/sec): select on 32 pipe write fds with immediate timeout
  98600 reps @   0.0507 msec ( 19700.0/sec): select on 32 pipe write fds with immediate timeout
 493000 trep @   0.0510 msec ( 19600.0/sec): select on 32 pipe write fds with immediate timeout

  14200 reps @   0.3542 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14200 reps @   0.3551 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14200 reps @   0.3543 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14200 reps @   0.3542 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14200 reps @   0.3543 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  71000 trep @   0.3544 msec (  2820.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    180 reps @  28.7400 msec (    34.8/sec): popen and read from "/bin/echo hello"
    180 reps @  28.7234 msec (    34.8/sec): popen and read from "/bin/echo hello"
    180 reps @  28.8049 msec (    34.7/sec): popen and read from "/bin/echo hello"
    180 reps @  28.7936 msec (    34.7/sec): popen and read from "/bin/echo hello"
    180 reps @  28.7836 msec (    34.7/sec): popen and read from "/bin/echo hello"
    900 trep @  28.7691 msec (    34.8/sec): popen and read from "/bin/echo hello"

  22200 reps @   0.2257 msec (  4430.0/sec): mmap megabyte /dev/zero region 
  22200 reps @   0.2260 msec (  4420.0/sec): mmap megabyte /dev/zero region 
  22200 reps @   0.2259 msec (  4430.0/sec): mmap megabyte /dev/zero region 
  22200 reps @   0.2258 msec (  4430.0/sec): mmap megabyte /dev/zero region 
  22200 reps @   0.2257 msec (  4430.0/sec): mmap megabyte /dev/zero region 
 111000 trep @   0.2258 msec (  4430.0/sec): mmap megabyte /dev/zero region 

    250 reps @  20.0650 msec (    49.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    250 reps @  20.0819 msec (    49.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    250 reps @  20.0877 msec (    49.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    250 reps @  20.0669 msec (    49.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    250 reps @  20.0592 msec (    49.9/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1250 trep @  20.0721 msec (    49.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    365 reps @  13.7150 msec (    72.9/sec): copy every byte of newly mmaped megabyte file
    365 reps @  13.8780 msec (    72.1/sec): copy every byte of newly mmaped megabyte file
    365 reps @  14.0411 msec (    71.2/sec): copy every byte of newly mmaped megabyte file
    365 reps @  14.3801 msec (    69.5/sec): copy every byte of newly mmaped megabyte file
    365 reps @  14.3685 msec (    69.6/sec): copy every byte of newly mmaped megabyte file
   1825 trep @  14.0765 msec (    71.0/sec): copy every byte of newly mmaped megabyte file

     33 reps @ 150.9070 msec (    6.63/sec): compress & uncompress 52 kilobyte text file of numbers
     33 reps @ 150.2202 msec (    6.66/sec): compress & uncompress 52 kilobyte text file of numbers
     33 reps @ 151.1898 msec (    6.61/sec): compress & uncompress 52 kilobyte text file of numbers
     33 reps @ 151.3445 msec (    6.61/sec): compress & uncompress 52 kilobyte text file of numbers
     33 reps @ 151.9978 msec (    6.58/sec): compress & uncompress 52 kilobyte text file of numbers
    165 trep @ 151.1319 msec (    6.62/sec): compress & uncompress 52 kilobyte text file of numbers

     15 reps @ 359.3129 msec (    2.78/sec): compile ANSI C `hello world' with no special options
     15 reps @ 360.9809 msec (    2.77/sec): compile ANSI C `hello world' with no special options
     15 reps @ 368.0334 msec (    2.72/sec): compile ANSI C `hello world' with no special options
     15 reps @ 358.4480 msec (    2.79/sec): compile ANSI C `hello world' with no special options
     15 reps @ 376.7873 msec (    2.65/sec): compile ANSI C `hello world' with no special options
     75 trep @ 364.7125 msec (    2.74/sec): compile ANSI C `hello world' with no special options

     12 reps @ 377.9225 msec (    2.65/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 470.9740 msec (    2.12/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 354.7957 msec (    2.82/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 430.3761 msec (    2.32/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 414.9817 msec (    2.41/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     60 trep @ 409.8100 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     10 reps @ 435.2379 msec (    2.30/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 329.4016 msec (    3.04/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 424.9497 msec (    2.35/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 465.8993 msec (    2.15/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 317.8533 msec (    3.15/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 trep @ 394.6684 msec (    2.53/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

      8 reps @ 419.0800 msec (    2.39/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 381.7850 msec (    2.62/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 389.9439 msec (    2.56/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 460.3680 msec (    2.17/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 405.2595 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 trep @ 411.2873 msec (    2.43/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 407.6144 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 400.6082 msec (    2.50/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 409.9763 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 407.8125 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 417.8121 msec (    2.39/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 408.7647 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 410.3664 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 415.6231 msec (    2.41/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 396.0755 msec (    2.52/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 410.7733 msec (    2.43/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 408.2065 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 408.2090 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 399.8846 msec (    2.50/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 414.6077 msec (    2.41/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 406.1160 msec (    2.46/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 410.2648 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 394.9804 msec (    2.53/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 405.1707 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 4156.5975 msec (    0.24/sec): use dc to output first 1,000 factorials
      2 reps @ 4066.6385 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4076.0085 msec (    0.24/sec): use dc to output first 1,000 factorials
      2 reps @ 4069.7025 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4059.1280 msec (    0.25/sec): use dc to output first 1,000 factorials
     10 trep @ 4085.6150 msec (    0.24/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0100 msec ( 99800.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0101 msec ( 99200.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  28460 reps @   0.1756 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree
  28460 reps @   0.1757 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree
  28460 reps @   0.1756 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree
  28460 reps @   0.1756 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree
  28460 reps @   0.1756 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree
 142300 trep @   0.1756 msec (  5690.0/sec): use regcomp to compile 51 char literal, then regfree

      2 reps @ 3422.8775 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3423.2370 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3423.5435 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3422.9500 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3423.0040 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text
     10 trep @ 3423.1224 msec (    0.29/sec): use regexec with 51 char literal to search 142 kilobyte text

  36612 reps @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree
  36612 reps @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree
  36612 reps @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree
  36612 reps @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree
  36612 reps @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree
 183060 trep @   0.1365 msec (  7330.0/sec): use regcomp to compile long .* pattern, then regfree

      3 reps @ 1681.6287 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1681.6423 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1682.0247 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1681.6987 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1681.6777 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text
     15 trep @ 1681.7344 msec (    0.59/sec): use regexec with long .* pattern to search 142 kilobyte text

