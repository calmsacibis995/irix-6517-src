UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: spridle
Operating system: IRIX64 6.4
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
2 195 MHZ IP30 Processors
CPU: MIPS R10000 Processor Chip Revision: 2.6
FPU: MIPS R10010 Floating Point Chip Revision: 0.0
Main memory size: 128 Mbytes
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version QL1040B
  Disk drive: unit 1 on SCSI controller 0
Integral SCSI controller 1: Version QL1040B
IOC3 serial port: tty1
IOC3 serial port: tty2
IOC3 parallel port: plp1
Graphics board: MXI
Integral Fast Ethernet: ef0, version 1
Iris Audio Processor: version RAD revision 12.0, number 1
Uptime:  3:01
Users: 2
Load average: 0.25, 0.54, 0.29
File IO test directory: /usr/tmp
File IO test filesystem: xfs (4205.63 MB total, 1369.60 MB available)
Date: Tue Mar 18 06:01:34 1997

5496852 reps @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply
5496852 reps @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply
5496852 reps @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply
5496852 reps @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply
5496852 reps @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply
27484260 trep @   0.0009 msec (1100000.0/sec): 4 by 4 double matrix multiply

3091428 reps @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply
3091428 reps @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply
3091428 reps @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply
3091428 reps @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply
3091428 reps @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply
15457140 trep @   0.0016 msec (618000.0/sec): 4 by 4 float matrix multiply

1269500 reps @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return
1269500 reps @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return
1269500 reps @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return
1269500 reps @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return
1269500 reps @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return
6347500 trep @   0.0039 msec (254000.0/sec): recurse 250 simple function calls and return

5545200 reps @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes
5545200 reps @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes
5545200 reps @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes
5545200 reps @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes
5545200 reps @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes
27726000 trep @   0.0009 msec (1110000.0/sec): bcopy of 256 bytes

  86080 reps @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes
  86080 reps @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes
  86080 reps @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes
  86080 reps @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes
  86080 reps @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes
 430400 trep @   0.0580 msec ( 17200.0/sec): bcopy of 16 kilobytes

  13292 reps @   0.3751 msec (  2670.0/sec): bcopy of 100 kilobytes
  13292 reps @   0.3752 msec (  2670.0/sec): bcopy of 100 kilobytes
  13292 reps @   0.3751 msec (  2670.0/sec): bcopy of 100 kilobytes
  13292 reps @   0.3751 msec (  2670.0/sec): bcopy of 100 kilobytes
  13292 reps @   0.3752 msec (  2670.0/sec): bcopy of 100 kilobytes
  66460 trep @   0.3751 msec (  2670.0/sec): bcopy of 100 kilobytes

    360 reps @  13.3219 msec (    75.1/sec): bcopy of 1 megabyte
    360 reps @  13.3209 msec (    75.1/sec): bcopy of 1 megabyte
    360 reps @  13.3209 msec (    75.1/sec): bcopy of 1 megabyte
    360 reps @  13.3208 msec (    75.1/sec): bcopy of 1 megabyte
    360 reps @  13.3204 msec (    75.1/sec): bcopy of 1 megabyte
   1800 trep @  13.3210 msec (    75.1/sec): bcopy of 1 megabyte

     36 reps @ 133.4985 msec (    7.49/sec): bcopy of 10 megabytes
     36 reps @ 133.5176 msec (    7.49/sec): bcopy of 10 megabytes
     36 reps @ 133.5013 msec (    7.49/sec): bcopy of 10 megabytes
     36 reps @ 133.4963 msec (    7.49/sec): bcopy of 10 megabytes
     36 reps @ 133.5020 msec (    7.49/sec): bcopy of 10 megabytes
    180 trep @ 133.5031 msec (    7.49/sec): bcopy of 10 megabytes

     48 reps @ 108.5820 msec (    9.21/sec): bcopy of 10 megabytes (cacheline-aligned)
     48 reps @ 108.6383 msec (    9.20/sec): bcopy of 10 megabytes (cacheline-aligned)
     48 reps @ 108.6071 msec (    9.21/sec): bcopy of 10 megabytes (cacheline-aligned)
     48 reps @ 108.5801 msec (    9.21/sec): bcopy of 10 megabytes (cacheline-aligned)
     48 reps @ 108.5813 msec (    9.21/sec): bcopy of 10 megabytes (cacheline-aligned)
    240 trep @ 108.5978 msec (    9.21/sec): bcopy of 10 megabytes (cacheline-aligned)

     48 reps @ 108.3222 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)
     48 reps @ 108.3120 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)
     48 reps @ 108.3333 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)
     48 reps @ 108.3144 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)
     48 reps @ 108.3169 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)
    240 trep @ 108.3198 msec (    9.23/sec): bcopy of 10 megabytes (word mis-aligned)

     44 reps @ 117.8051 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)
     44 reps @ 117.8022 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)
     44 reps @ 117.7992 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)
     44 reps @ 117.8156 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)
     44 reps @ 117.8012 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)
    220 trep @ 117.8046 msec (    8.49/sec): bcopy of 10 megabytes (dword mis-aligned)

10747600 reps @   0.0005 msec (2150000.0/sec): bzero of 256 bytes
10747600 reps @   0.0005 msec (2150000.0/sec): bzero of 256 bytes
10747600 reps @   0.0005 msec (2150000.0/sec): bzero of 256 bytes
10747600 reps @   0.0005 msec (2150000.0/sec): bzero of 256 bytes
10747600 reps @   0.0005 msec (2150000.0/sec): bzero of 256 bytes
53738000 trep @   0.0005 msec (2150000.0/sec): bzero of 256 bytes

 232280 reps @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes
 232280 reps @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes
 232280 reps @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes
 232280 reps @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes
 232280 reps @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes
1161400 trep @   0.0215 msec ( 46400.0/sec): bzero of 16 kilobytes

  21796 reps @   0.2287 msec (  4370.0/sec): bzero of 100 kilobytes
  21796 reps @   0.2287 msec (  4370.0/sec): bzero of 100 kilobytes
  21796 reps @   0.2288 msec (  4370.0/sec): bzero of 100 kilobytes
  21796 reps @   0.2287 msec (  4370.0/sec): bzero of 100 kilobytes
  21796 reps @   0.2286 msec (  4370.0/sec): bzero of 100 kilobytes
 108980 trep @   0.2287 msec (  4370.0/sec): bzero of 100 kilobytes

    876 reps @   5.7175 msec (   175.0/sec): bzero of 1 megabyte
    876 reps @   5.7187 msec (   175.0/sec): bzero of 1 megabyte
    876 reps @   5.7179 msec (   175.0/sec): bzero of 1 megabyte
    876 reps @   5.7177 msec (   175.0/sec): bzero of 1 megabyte
    876 reps @   5.7176 msec (   175.0/sec): bzero of 1 megabyte
   4380 trep @   5.7179 msec (   175.0/sec): bzero of 1 megabyte

     88 reps @  57.1771 msec (    17.5/sec): bzero of 10 megabytes
     88 reps @  57.1845 msec (    17.5/sec): bzero of 10 megabytes
     88 reps @  57.1790 msec (    17.5/sec): bzero of 10 megabytes
     88 reps @  57.1782 msec (    17.5/sec): bzero of 10 megabytes
     88 reps @  57.1767 msec (    17.5/sec): bzero of 10 megabytes
    440 trep @  57.1791 msec (    17.5/sec): bzero of 10 megabytes

     80 reps @  64.1526 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)
     80 reps @  64.1543 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)
     80 reps @  64.1611 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)
     80 reps @  64.1594 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)
     80 reps @  64.1560 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)
    400 trep @  64.1567 msec (    15.6/sec): bzero of 10 megabytes (cacheline-aligned)

     84 reps @  61.2312 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)
     84 reps @  61.2295 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)
     84 reps @  61.2332 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)
     84 reps @  61.2346 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)
     84 reps @  61.2304 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)
    420 trep @  61.2318 msec (    16.3/sec): bzero of 10 megabytes (word mis-aligned)

     80 reps @  64.7221 msec (    15.5/sec): bzero of 10 megabytes (dword mis-aligned)
     80 reps @  64.7176 msec (    15.5/sec): bzero of 10 megabytes (dword mis-aligned)
     80 reps @  64.7171 msec (    15.5/sec): bzero of 10 megabytes (dword mis-aligned)
     80 reps @  64.7167 msec (    15.5/sec): bzero of 10 megabytes (dword mis-aligned)
     80 reps @  64.7285 msec (    15.4/sec): bzero of 10 megabytes (dword mis-aligned)
    400 trep @  64.7204 msec (    15.5/sec): bzero of 10 megabytes (dword mis-aligned)

  11768 reps @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers
  11768 reps @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers
  11768 reps @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers
  11768 reps @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers
  11768 reps @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers
  58840 trep @   0.4244 msec (  2360.0/sec): bcopy then qsort 400 32-bit integers

    181 reps @  27.6773 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6767 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6767 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6767 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6767 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    905 trep @  27.6768 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers

     39 reps @ 128.3004 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 128.2982 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 128.2956 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 128.2982 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 128.2986 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers
    195 trep @ 128.2982 msec (    7.79/sec): bcopy then qsort 64,000 32-bit integers

10460000 reps @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10460000 reps @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10460000 reps @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10460000 reps @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
10460000 reps @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
52300000 trep @   0.0005 msec (2090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

7805000 reps @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)
7805000 reps @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)
7805000 reps @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)
7805000 reps @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)
7805000 reps @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)
39025000 trep @   0.0006 msec (1560000.0/sec): basic double trigonometric function (sin/cos/tan)

1878500 reps @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1878500 reps @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1878500 reps @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1878500 reps @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1878500 reps @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
9392500 trep @   0.0027 msec (376000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  22200 reps @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)
  22200 reps @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)
  22200 reps @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)
  22200 reps @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)
  22200 reps @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)
 111000 trep @   0.2275 msec (  4400.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   7.0526 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.0526 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.0526 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.0527 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.0526 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   7.0526 msec (   142.0/sec): Tower of Hanoi recursion test (15 deep)

 664500 reps @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 664500 reps @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 664500 reps @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 664500 reps @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 664500 reps @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
3322500 trep @   0.0075 msec (133000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

 213200 reps @   0.0238 msec ( 42000.0/sec): write 80 bytes to a log file
 213200 reps @   0.0241 msec ( 41400.0/sec): write 80 bytes to a log file
 213200 reps @   0.0247 msec ( 40500.0/sec): write 80 bytes to a log file
 213200 reps @   0.0245 msec ( 40800.0/sec): write 80 bytes to a log file
 213200 reps @   0.0243 msec ( 41200.0/sec): write 80 bytes to a log file
1066000 trep @   0.0243 msec ( 41200.0/sec): write 80 bytes to a log file

   1100 reps @   3.9333 msec (   254.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   3.7750 msec (   265.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   3.7894 msec (   264.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   3.8875 msec (   257.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   3.8129 msec (   262.0/sec): per-file cost of creating 100 files then unlinking them all
   5500 trep @   3.8396 msec (   260.0/sec): per-file cost of creating 100 files then unlinking them all

  61500 reps @   0.0816 msec ( 12300.0/sec): per-file cost of open and immediate close of 100 files
  61500 reps @   0.0815 msec ( 12300.0/sec): per-file cost of open and immediate close of 100 files
  61500 reps @   0.0818 msec ( 12200.0/sec): per-file cost of open and immediate close of 100 files
  61500 reps @   0.0816 msec ( 12300.0/sec): per-file cost of open and immediate close of 100 files
  61500 reps @   0.0807 msec ( 12400.0/sec): per-file cost of open and immediate close of 100 files
 307500 trep @   0.0814 msec ( 12300.0/sec): per-file cost of open and immediate close of 100 files

  60200 reps @   0.0887 msec ( 11300.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0838 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0840 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0836 msec ( 12000.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0839 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 301000 trep @   0.0848 msec ( 11800.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 328000 reps @   0.0150 msec ( 66600.0/sec): cost of stat'ing current dir
 328000 reps @   0.0150 msec ( 66600.0/sec): cost of stat'ing current dir
 328000 reps @   0.0150 msec ( 66600.0/sec): cost of stat'ing current dir
 328000 reps @   0.0151 msec ( 66300.0/sec): cost of stat'ing current dir
 328000 reps @   0.0162 msec ( 61600.0/sec): cost of stat'ing current dir
1640000 trep @   0.0153 msec ( 65500.0/sec): cost of stat'ing current dir

  78500 reps @   0.0638 msec ( 15700.0/sec): cost of stat'ing 5 component path
  78500 reps @   0.0639 msec ( 15700.0/sec): cost of stat'ing 5 component path
  78500 reps @   0.0638 msec ( 15700.0/sec): cost of stat'ing 5 component path
  78500 reps @   0.0639 msec ( 15700.0/sec): cost of stat'ing 5 component path
  78500 reps @   0.0645 msec ( 15500.0/sec): cost of stat'ing 5 component path
 392500 trep @   0.0640 msec ( 15600.0/sec): cost of stat'ing 5 component path

   2187 reps @   2.2855 msec (   438.0/sec): open directory and stat 100 files in it
   2187 reps @   2.2857 msec (   438.0/sec): open directory and stat 100 files in it
   2187 reps @   2.2857 msec (   438.0/sec): open directory and stat 100 files in it
   2187 reps @   2.2856 msec (   438.0/sec): open directory and stat 100 files in it
   2187 reps @   2.2856 msec (   438.0/sec): open directory and stat 100 files in it
  10935 trep @   2.2856 msec (   438.0/sec): open directory and stat 100 files in it

   1300 reps @   4.0716 msec (   246.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1300 reps @   3.8721 msec (   258.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1300 reps @   4.0461 msec (   247.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1300 reps @   4.0248 msec (   248.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1300 reps @   3.8979 msec (   257.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   6500 trep @   3.9825 msec (   251.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 473400 reps @   0.0105 msec ( 95000.0/sec): ndbm lookup into database with 900 entries
 473400 reps @   0.0108 msec ( 92800.0/sec): ndbm lookup into database with 900 entries
 473400 reps @   0.0108 msec ( 93000.0/sec): ndbm lookup into database with 900 entries
 473400 reps @   0.0107 msec ( 93700.0/sec): ndbm lookup into database with 900 entries
 473400 reps @   0.0107 msec ( 93900.0/sec): ndbm lookup into database with 900 entries
2367000 trep @   0.0107 msec ( 93700.0/sec): ndbm lookup into database with 900 entries

  67600 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  67600 reps @   0.0714 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  67600 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  67600 reps @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  67600 reps @   0.0714 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
 338000 trep @   0.0715 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes

  55600 reps @   0.0925 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  55600 reps @   0.0924 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  55600 reps @   0.0930 msec ( 10700.0/sec): 1 kilobyte token passing between two processes using two pipes
  55600 reps @   0.0924 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
  55600 reps @   0.0926 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes
 278000 trep @   0.0926 msec ( 10800.0/sec): 1 kilobyte token passing between two processes using two pipes

9712000 reps @   0.0005 msec (1940000.0/sec): setjmp/longjmp
9712000 reps @   0.0005 msec (1930000.0/sec): setjmp/longjmp
9712000 reps @   0.0005 msec (1930000.0/sec): setjmp/longjmp
9712000 reps @   0.0005 msec (1930000.0/sec): setjmp/longjmp
9712000 reps @   0.0005 msec (1930000.0/sec): setjmp/longjmp
48560000 trep @   0.0005 msec (1930000.0/sec): setjmp/longjmp

 272000 reps @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 272000 reps @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 272000 reps @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 272000 reps @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 272000 reps @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1360000 trep @   0.0185 msec ( 54000.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    255 reps @  20.2635 msec (    49.3/sec): create/destroy client UDP-based SunRPC handle
    255 reps @  20.2622 msec (    49.4/sec): create/destroy client UDP-based SunRPC handle
    255 reps @  19.9295 msec (    50.2/sec): create/destroy client UDP-based SunRPC handle
    255 reps @  19.9334 msec (    50.2/sec): create/destroy client UDP-based SunRPC handle
    255 reps @  19.8471 msec (    50.4/sec): create/destroy client UDP-based SunRPC handle
   1275 trep @  20.0472 msec (    49.9/sec): create/destroy client UDP-based SunRPC handle

  16400 reps @   0.2951 msec (  3390.0/sec): TCP-based SunRPC to negate an integer
  16400 reps @   0.2962 msec (  3380.0/sec): TCP-based SunRPC to negate an integer
  16400 reps @   0.3001 msec (  3330.0/sec): TCP-based SunRPC to negate an integer
  16400 reps @   0.2935 msec (  3410.0/sec): TCP-based SunRPC to negate an integer
  16400 reps @   0.2999 msec (  3330.0/sec): TCP-based SunRPC to negate an integer
  82000 trep @   0.2970 msec (  3370.0/sec): TCP-based SunRPC to negate an integer

  18000 reps @   0.2815 msec (  3550.0/sec): UDP-based SunRPC to negate an integer
  18000 reps @   0.2828 msec (  3540.0/sec): UDP-based SunRPC to negate an integer
  18000 reps @   0.2849 msec (  3510.0/sec): UDP-based SunRPC to negate an integer
  18000 reps @   0.2777 msec (  3600.0/sec): UDP-based SunRPC to negate an integer
  18000 reps @   0.2748 msec (  3640.0/sec): UDP-based SunRPC to negate an integer
  90000 trep @   0.2803 msec (  3570.0/sec): UDP-based SunRPC to negate an integer

  16000 reps @   0.3031 msec (  3300.0/sec): TCP-based SunRPC no-op
  16000 reps @   0.3047 msec (  3280.0/sec): TCP-based SunRPC no-op
  16000 reps @   0.3034 msec (  3300.0/sec): TCP-based SunRPC no-op
  16000 reps @   0.3070 msec (  3260.0/sec): TCP-based SunRPC no-op
  16000 reps @   0.3037 msec (  3290.0/sec): TCP-based SunRPC no-op
  80000 trep @   0.3044 msec (  3290.0/sec): TCP-based SunRPC no-op

  19600 reps @   0.2510 msec (  3980.0/sec): UDP-based SunRPC no-op
  19600 reps @   0.2516 msec (  3970.0/sec): UDP-based SunRPC no-op
  19600 reps @   0.2619 msec (  3820.0/sec): UDP-based SunRPC no-op
  19600 reps @   0.2507 msec (  3990.0/sec): UDP-based SunRPC no-op
  19600 reps @   0.2508 msec (  3990.0/sec): UDP-based SunRPC no-op
  98000 trep @   0.2532 msec (  3950.0/sec): UDP-based SunRPC no-op

2295500 reps @   0.0022 msec (464000.0/sec): getpid system call
2295500 reps @   0.0022 msec (465000.0/sec): getpid system call
2295500 reps @   0.0022 msec (465000.0/sec): getpid system call
2295500 reps @   0.0022 msec (465000.0/sec): getpid system call
2295500 reps @   0.0022 msec (465000.0/sec): getpid system call
11477500 trep @   0.0022 msec (465000.0/sec): getpid system call

 295000 reps @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 295000 reps @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 295000 reps @   0.0169 msec ( 59200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 295000 reps @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 295000 reps @   0.0169 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1475000 trep @   0.0169 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 950000 reps @   0.0053 msec (189000.0/sec): gettimeofday system call
 950000 reps @   0.0053 msec (189000.0/sec): gettimeofday system call
 950000 reps @   0.0053 msec (189000.0/sec): gettimeofday system call
 950000 reps @   0.0053 msec (189000.0/sec): gettimeofday system call
 950000 reps @   0.0053 msec (189000.0/sec): gettimeofday system call
4750000 trep @   0.0053 msec (189000.0/sec): gettimeofday system call

    800 reps @   6.3256 msec (   158.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.3265 msec (   158.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.3387 msec (   158.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.3195 msec (   158.0/sec): fork, child immediately exits, parent waits
    800 reps @   6.3354 msec (   158.0/sec): fork, child immediately exits, parent waits
   4000 trep @   6.3291 msec (   158.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1011.0510 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0388 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0440 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0450 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0182 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1011.0394 msec (    0.99/sec): sleep for one second (validates test time)

 831500 reps @   0.0060 msec (167000.0/sec): select on no fds with no timeout
 831500 reps @   0.0059 msec (170000.0/sec): select on no fds with no timeout
 831500 reps @   0.0059 msec (169000.0/sec): select on no fds with no timeout
 831500 reps @   0.0059 msec (169000.0/sec): select on no fds with no timeout
 831500 reps @   0.0059 msec (169000.0/sec): select on no fds with no timeout
4157500 trep @   0.0059 msec (169000.0/sec): select on no fds with no timeout

 266000 reps @   0.0188 msec ( 53200.0/sec): select on 16 pipe read fds with immediate timeout
 266000 reps @   0.0188 msec ( 53200.0/sec): select on 16 pipe read fds with immediate timeout
 266000 reps @   0.0188 msec ( 53200.0/sec): select on 16 pipe read fds with immediate timeout
 266000 reps @   0.0188 msec ( 53200.0/sec): select on 16 pipe read fds with immediate timeout
 266000 reps @   0.0188 msec ( 53100.0/sec): select on 16 pipe read fds with immediate timeout
1330000 trep @   0.0188 msec ( 53200.0/sec): select on 16 pipe read fds with immediate timeout

 151300 reps @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout
 151300 reps @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout
 151300 reps @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout
 151300 reps @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout
 151300 reps @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout
 756500 trep @   0.0330 msec ( 30300.0/sec): select on 32 pipe read fds with immediate timeout

 266300 reps @   0.0188 msec ( 53300.0/sec): select on 16 pipe write fds with immediate timeout
 266300 reps @   0.0188 msec ( 53300.0/sec): select on 16 pipe write fds with immediate timeout
 266300 reps @   0.0188 msec ( 53300.0/sec): select on 16 pipe write fds with immediate timeout
 266300 reps @   0.0188 msec ( 53200.0/sec): select on 16 pipe write fds with immediate timeout
 266300 reps @   0.0188 msec ( 53300.0/sec): select on 16 pipe write fds with immediate timeout
1331500 trep @   0.0188 msec ( 53300.0/sec): select on 16 pipe write fds with immediate timeout

 265700 reps @   0.0188 msec ( 53100.0/sec): select on 32 pipe write fds with immediate timeout
 265700 reps @   0.0188 msec ( 53100.0/sec): select on 32 pipe write fds with immediate timeout
 265700 reps @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout
 265700 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
 265700 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
1328500 trep @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout

  39900 reps @   0.1260 msec (  7930.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  39900 reps @   0.1262 msec (  7920.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  39900 reps @   0.1261 msec (  7930.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  39900 reps @   0.1262 msec (  7920.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  39900 reps @   0.1262 msec (  7920.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 199500 trep @   0.1262 msec (  7930.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    230 reps @  14.5136 msec (    68.9/sec): popen and read from "/bin/echo hello"
    230 reps @  14.4986 msec (    69.0/sec): popen and read from "/bin/echo hello"
    230 reps @  14.4643 msec (    69.1/sec): popen and read from "/bin/echo hello"
    230 reps @  14.4842 msec (    69.0/sec): popen and read from "/bin/echo hello"
    230 reps @  14.4701 msec (    69.1/sec): popen and read from "/bin/echo hello"
   1150 trep @  14.4861 msec (    69.0/sec): popen and read from "/bin/echo hello"

  48500 reps @   0.1029 msec (  9710.0/sec): mmap megabyte /dev/zero region 
  48500 reps @   0.1029 msec (  9720.0/sec): mmap megabyte /dev/zero region 
  48500 reps @   0.1029 msec (  9720.0/sec): mmap megabyte /dev/zero region 
  48500 reps @   0.1028 msec (  9730.0/sec): mmap megabyte /dev/zero region 
  48500 reps @   0.1029 msec (  9720.0/sec): mmap megabyte /dev/zero region 
 242500 trep @   0.1029 msec (  9720.0/sec): mmap megabyte /dev/zero region 

    704 reps @   7.1014 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    704 reps @   7.1001 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    704 reps @   7.1005 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    704 reps @   7.1002 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    704 reps @   7.1004 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   3520 trep @   7.1005 msec (   141.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    876 reps @   5.7038 msec (   175.0/sec): copy every byte of newly mmaped megabyte file
    876 reps @   5.7041 msec (   175.0/sec): copy every byte of newly mmaped megabyte file
    876 reps @   5.7579 msec (   174.0/sec): copy every byte of newly mmaped megabyte file
    876 reps @   5.8158 msec (   172.0/sec): copy every byte of newly mmaped megabyte file
    876 reps @   5.8157 msec (   172.0/sec): copy every byte of newly mmaped megabyte file
   4380 trep @   5.7595 msec (   174.0/sec): copy every byte of newly mmaped megabyte file

     41 reps @  59.8508 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     41 reps @  59.7601 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     41 reps @  59.9058 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     41 reps @  59.7868 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     41 reps @  59.7490 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
    205 trep @  59.8105 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers

      5 reps @ 225.4636 msec (    4.44/sec): compile ANSI C `hello world' with no special options
      5 reps @ 205.4376 msec (    4.87/sec): compile ANSI C `hello world' with no special options
      5 reps @ 209.2632 msec (    4.78/sec): compile ANSI C `hello world' with no special options
      5 reps @ 207.0722 msec (    4.83/sec): compile ANSI C `hello world' with no special options
      5 reps @ 203.7690 msec (    4.91/sec): compile ANSI C `hello world' with no special options
     25 trep @ 210.2011 msec (    4.76/sec): compile ANSI C `hello world' with no special options

     14 reps @ 247.8831 msec (    4.03/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     14 reps @ 291.1060 msec (    3.44/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     14 reps @ 306.2188 msec (    3.27/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     14 reps @ 295.1040 msec (    3.39/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     14 reps @ 274.6551 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     70 trep @ 282.9934 msec (    3.53/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     16 reps @ 288.8351 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 299.3756 msec (    3.34/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 266.2629 msec (    3.76/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 276.3337 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 312.4278 msec (    3.20/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     80 trep @ 288.6470 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     24 reps @ 294.5328 msec (    3.40/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     24 reps @ 288.4666 msec (    3.47/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     24 reps @ 285.6657 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     24 reps @ 283.7834 msec (    3.52/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     24 reps @ 293.4243 msec (    3.41/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
    120 trep @ 289.1746 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 284.8257 msec (    3.51/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 269.4489 msec (    3.71/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 301.3802 msec (    3.32/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 305.4736 msec (    3.27/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 300.1673 msec (    3.33/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 292.2591 msec (    3.42/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 286.0114 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 303.9941 msec (    3.29/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 290.3520 msec (    3.44/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 290.5281 msec (    3.44/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 288.8603 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 291.9492 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     32 reps @ 291.4343 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 292.3244 msec (    3.42/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 288.1548 msec (    3.47/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 288.5196 msec (    3.47/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 287.1210 msec (    3.48/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    160 trep @ 289.5108 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      4 reps @ 1451.9053 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1452.1865 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1451.1815 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1432.9075 msec (    0.70/sec): use dc to output first 1,000 factorials
      4 reps @ 1461.6952 msec (    0.68/sec): use dc to output first 1,000 factorials
     20 trep @ 1449.9752 msec (    0.69/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0041 msec (242000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0041 msec (243000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0041 msec (243000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0041 msec (243000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0041 msec (243000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0041 msec (242000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  60884 reps @   0.0821 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree
  60884 reps @   0.0820 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree
  60884 reps @   0.0820 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree
  60884 reps @   0.0820 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree
  60884 reps @   0.0820 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree
 304420 trep @   0.0820 msec ( 12200.0/sec): use regcomp to compile 51 char literal, then regfree

      5 reps @ 1107.3156 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1107.2962 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1107.3228 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1107.3114 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1107.2992 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text
     25 trep @ 1107.3090 msec (    0.90/sec): use regexec with 51 char literal to search 142 kilobyte text

  79080 reps @   0.0632 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree
  79080 reps @   0.0633 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree
  79080 reps @   0.0632 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree
  79080 reps @   0.0632 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree
  79080 reps @   0.0632 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree
 395400 trep @   0.0632 msec ( 15800.0/sec): use regcomp to compile long .* pattern, then regfree

     10 reps @ 539.8087 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 539.3752 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 541.6058 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 540.0710 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 541.1535 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text
     50 trep @ 540.4028 msec (    1.85/sec): use regexec with long .* pattern to search 142 kilobyte text

