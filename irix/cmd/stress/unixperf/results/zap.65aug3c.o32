UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: zap
Operating system: IRIX 6.5-ALPHA-1274022532
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
CPU: MIPS R5000 Processor Chip Revision: 1.0
FPU: MIPS R5000 Floating Point Coprocessor Revision: 1.0
1 180 MHZ IP22 Processor
Main memory size: 96 Mbytes
Secondary unified instruction/data cache size: 512 Kbytes on Processor 0
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Integral SCSI controller 0: Version WD33C93B, revision D
  Disk drive: unit 1 on SCSI controller 0
  CDROM: unit 4 on SCSI controller 0
  Tape drive: unit 7 on SCSI controller 0: DAT
On-board serial ports: 2
On-board bi-directional parallel port
Graphics board: GR3-XZ
Integral Ethernet: ec0, version 1
Integral ISDN: Basic Rate Interface unit 0, revision 1.0
Iris Audio Processor: version A2 revision 4.1.0
Vino video: unit 0, revision 0, IndyCam connected
Uptime: 21:14
Users: 1
Load average: 5.54, 2.40, 1.36
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1915.95 MB total, 440.15 MB available)
Date: Tue Aug 12 20:16:53 1997

1578816 reps @   0.0043 msec (234000.0/sec): 4 by 4 double matrix multiply
1578816 reps @   0.0032 msec (311000.0/sec): 4 by 4 double matrix multiply
1578816 reps @   0.0026 msec (392000.0/sec): 4 by 4 double matrix multiply
1578816 reps @   0.0026 msec (391000.0/sec): 4 by 4 double matrix multiply
1578816 reps @   0.0026 msec (391000.0/sec): 4 by 4 double matrix multiply
7894080 trep @   0.0030 msec (330000.0/sec): 4 by 4 double matrix multiply

2203164 reps @   0.0023 msec (440000.0/sec): 4 by 4 float matrix multiply
2203164 reps @   0.0023 msec (441000.0/sec): 4 by 4 float matrix multiply
2203164 reps @   0.0023 msec (431000.0/sec): 4 by 4 float matrix multiply
2203164 reps @   0.0023 msec (439000.0/sec): 4 by 4 float matrix multiply
2203164 reps @   0.0023 msec (440000.0/sec): 4 by 4 float matrix multiply
11015820 trep @   0.0023 msec (438000.0/sec): 4 by 4 float matrix multiply

1153500 reps @   0.0043 msec (231000.0/sec): recurse 250 simple function calls and return
1153500 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
1153500 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
1153500 reps @   0.0043 msec (231000.0/sec): recurse 250 simple function calls and return
1153500 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
5767500 trep @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return

4370400 reps @   0.0011 msec (871000.0/sec): bcopy of 256 bytes
4370400 reps @   0.0011 msec (871000.0/sec): bcopy of 256 bytes
4370400 reps @   0.0012 msec (865000.0/sec): bcopy of 256 bytes
4370400 reps @   0.0011 msec (871000.0/sec): bcopy of 256 bytes
4370400 reps @   0.0011 msec (870000.0/sec): bcopy of 256 bytes
21852000 trep @   0.0011 msec (870000.0/sec): bcopy of 256 bytes

  90040 reps @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes
  90040 reps @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes
  90040 reps @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes
  90040 reps @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes
  90040 reps @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes
 450200 trep @   0.0555 msec ( 18000.0/sec): bcopy of 16 kilobytes

   2052 reps @   2.4323 msec (   411.0/sec): bcopy of 100 kilobytes
   2052 reps @   2.4350 msec (   411.0/sec): bcopy of 100 kilobytes
   2052 reps @   2.4335 msec (   411.0/sec): bcopy of 100 kilobytes
   2052 reps @   2.4368 msec (   410.0/sec): bcopy of 100 kilobytes
   2052 reps @   2.4312 msec (   411.0/sec): bcopy of 100 kilobytes
  10260 trep @   2.4338 msec (   411.0/sec): bcopy of 100 kilobytes

    112 reps @  40.2654 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2549 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2328 msec (    24.9/sec): bcopy of 1 megabyte
    112 reps @  40.2700 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2017 msec (    24.9/sec): bcopy of 1 megabyte
    560 trep @  40.2450 msec (    24.8/sec): bcopy of 1 megabyte

     12 reps @ 405.1325 msec (    2.47/sec): bcopy of 10 megabytes
     12 reps @ 405.8317 msec (    2.46/sec): bcopy of 10 megabytes
     12 reps @ 405.7370 msec (    2.46/sec): bcopy of 10 megabytes
     12 reps @ 405.8074 msec (    2.46/sec): bcopy of 10 megabytes
     12 reps @ 405.3498 msec (    2.47/sec): bcopy of 10 megabytes
     60 trep @ 405.5717 msec (    2.47/sec): bcopy of 10 megabytes

     16 reps @ 408.1406 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 408.5292 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 408.2946 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 408.3121 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 408.2862 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)
     80 trep @ 408.3126 msec (    2.45/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 415.2337 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 415.4419 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 415.2113 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 415.1318 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 414.9160 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 415.1870 msec (    2.41/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 409.9029 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.3007 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.2248 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 409.8691 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.3272 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 410.1249 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)

7841200 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7841200 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7841200 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7841200 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7841200 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
39206000 trep @   0.0006 msec (1570000.0/sec): bzero of 256 bytes

 155080 reps @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes
 155080 reps @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes
 155080 reps @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes
 155080 reps @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes
 155080 reps @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes
 775400 trep @   0.0322 msec ( 31000.0/sec): bzero of 16 kilobytes

   3296 reps @   1.5178 msec (   659.0/sec): bzero of 100 kilobytes
   3296 reps @   1.5176 msec (   659.0/sec): bzero of 100 kilobytes
   3296 reps @   1.5182 msec (   659.0/sec): bzero of 100 kilobytes
   3296 reps @   1.5169 msec (   659.0/sec): bzero of 100 kilobytes
   3296 reps @   1.5181 msec (   659.0/sec): bzero of 100 kilobytes
  16480 trep @   1.5177 msec (   659.0/sec): bzero of 100 kilobytes

    212 reps @  23.8174 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.8395 msec (    41.9/sec): bzero of 1 megabyte
    212 reps @  23.8173 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.8118 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.8155 msec (    42.0/sec): bzero of 1 megabyte
   1060 trep @  23.8203 msec (    42.0/sec): bzero of 1 megabyte

     24 reps @ 240.1997 msec (    4.16/sec): bzero of 10 megabytes
     24 reps @ 240.2878 msec (    4.16/sec): bzero of 10 megabytes
     24 reps @ 240.3541 msec (    4.16/sec): bzero of 10 megabytes
     24 reps @ 240.5155 msec (    4.16/sec): bzero of 10 megabytes
     24 reps @ 240.3645 msec (    4.16/sec): bzero of 10 megabytes
    120 trep @ 240.3443 msec (    4.16/sec): bzero of 10 megabytes

     24 reps @ 240.2312 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.6295 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.3368 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.4784 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.3177 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
    120 trep @ 240.3987 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)

     24 reps @ 240.2763 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 240.6992 msec (    4.15/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 240.3435 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 240.4569 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 240.4597 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)
    120 trep @ 240.4471 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)

     24 reps @ 240.1225 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 240.6251 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 240.2181 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 240.4253 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 240.4041 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)
    120 trep @ 240.3590 msec (    4.16/sec): bzero of 10 megabytes (dword mis-aligned)

   9125 reps @   0.5499 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   9125 reps @   0.5503 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   9125 reps @   0.5504 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   9125 reps @   0.5499 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   9125 reps @   0.5499 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
  45625 trep @   0.5501 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers

    135 reps @  36.7547 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers
    135 reps @  36.7387 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers
    135 reps @  36.7930 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers
    135 reps @  36.7842 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers
    135 reps @  36.7489 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers
    675 trep @  36.7639 msec (    27.2/sec): bcopy then qsort 16,000 32-bit integers

     28 reps @ 179.9769 msec (    5.56/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 180.1076 msec (    5.55/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 180.0178 msec (    5.56/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 180.1579 msec (    5.55/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 180.1546 msec (    5.55/sec): bcopy then qsort 64,000 32-bit integers
    140 trep @ 180.0829 msec (    5.55/sec): bcopy then qsort 64,000 32-bit integers

7692500 reps @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7692500 reps @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7692500 reps @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7692500 reps @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7692500 reps @   0.0007 msec (1530000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
38462500 trep @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

5875000 reps @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)
5875000 reps @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)
5875000 reps @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)
5875000 reps @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)
5875000 reps @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)
29375000 trep @   0.0009 msec (1170000.0/sec): basic double trigonometric function (sin/cos/tan)

1380000 reps @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
6900000 trep @   0.0036 msec (276000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  16200 reps @   0.3102 msec (  3220.0/sec): Tower of Hanoi recursion test (10 deep)
  16200 reps @   0.3103 msec (  3220.0/sec): Tower of Hanoi recursion test (10 deep)
  16200 reps @   0.3104 msec (  3220.0/sec): Tower of Hanoi recursion test (10 deep)
  16200 reps @   0.3102 msec (  3220.0/sec): Tower of Hanoi recursion test (10 deep)
  16200 reps @   0.3101 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  81000 trep @   0.3102 msec (  3220.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @   9.9327 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9396 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9333 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9363 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9372 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @   9.9358 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)

 305500 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 305500 reps @   0.0164 msec ( 60800.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 305500 reps @   0.0164 msec ( 60800.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 305500 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 305500 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1527500 trep @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  86400 reps @   0.0597 msec ( 16800.0/sec): write 80 bytes to a log file
  86400 reps @   0.0602 msec ( 16600.0/sec): write 80 bytes to a log file
  86400 reps @   0.0625 msec ( 16000.0/sec): write 80 bytes to a log file
  86400 reps @   0.0754 msec ( 13300.0/sec): write 80 bytes to a log file
  86400 reps @   0.0788 msec ( 12700.0/sec): write 80 bytes to a log file
 432000 trep @   0.0673 msec ( 14900.0/sec): write 80 bytes to a log file

    900 reps @   6.3354 msec (   158.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.1235 msec (   163.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.1379 msec (   163.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.2305 msec (   161.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.2525 msec (   160.0/sec): per-file cost of creating 100 files then unlinking them all
   4500 trep @   6.2159 msec (   161.0/sec): per-file cost of creating 100 files then unlinking them all

  37400 reps @   0.1311 msec (  7630.0/sec): per-file cost of open and immediate close of 100 files
  37400 reps @   0.1309 msec (  7640.0/sec): per-file cost of open and immediate close of 100 files
  37400 reps @   0.1307 msec (  7650.0/sec): per-file cost of open and immediate close of 100 files
  37400 reps @   0.1311 msec (  7630.0/sec): per-file cost of open and immediate close of 100 files
  37400 reps @   0.1308 msec (  7640.0/sec): per-file cost of open and immediate close of 100 files
 187000 trep @   0.1310 msec (  7640.0/sec): per-file cost of open and immediate close of 100 files

  40000 reps @   0.1411 msec (  7090.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1255 msec (  7970.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1243 msec (  8040.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1245 msec (  8030.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1244 msec (  8040.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 200000 trep @   0.1279 msec (  7820.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 238500 reps @   0.0210 msec ( 47600.0/sec): cost of stat'ing current dir
 238500 reps @   0.0210 msec ( 47700.0/sec): cost of stat'ing current dir
 238500 reps @   0.0210 msec ( 47600.0/sec): cost of stat'ing current dir
 238500 reps @   0.0210 msec ( 47700.0/sec): cost of stat'ing current dir
 238500 reps @   0.0211 msec ( 47300.0/sec): cost of stat'ing current dir
1192500 trep @   0.0210 msec ( 47600.0/sec): cost of stat'ing current dir

  57000 reps @   0.0886 msec ( 11300.0/sec): cost of stat'ing 5 component path
  57000 reps @   0.0887 msec ( 11300.0/sec): cost of stat'ing 5 component path
  57000 reps @   0.0887 msec ( 11300.0/sec): cost of stat'ing 5 component path
  57000 reps @   0.0885 msec ( 11300.0/sec): cost of stat'ing 5 component path
  57000 reps @   0.0885 msec ( 11300.0/sec): cost of stat'ing 5 component path
 285000 trep @   0.0886 msec ( 11300.0/sec): cost of stat'ing 5 component path

   1211 reps @   4.1367 msec (   242.0/sec): open directory and stat 100 files in it
   1211 reps @   4.0894 msec (   245.0/sec): open directory and stat 100 files in it
   1211 reps @   4.0915 msec (   244.0/sec): open directory and stat 100 files in it
   1211 reps @   4.0370 msec (   248.0/sec): open directory and stat 100 files in it
   1211 reps @   4.0169 msec (   249.0/sec): open directory and stat 100 files in it
   6055 trep @   4.0743 msec (   245.0/sec): open directory and stat 100 files in it

   1000 reps @   6.1013 msec (   164.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1000 reps @   5.7090 msec (   175.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1000 reps @   5.7345 msec (   174.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1000 reps @   6.0405 msec (   166.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1000 reps @   5.6899 msec (   176.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   5000 trep @   5.8550 msec (   171.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 211500 reps @   0.0237 msec ( 42300.0/sec): ndbm lookup into database with 900 entries
 211500 reps @   0.0237 msec ( 42100.0/sec): ndbm lookup into database with 900 entries
 211500 reps @   0.0244 msec ( 41000.0/sec): ndbm lookup into database with 900 entries
 211500 reps @   0.0235 msec ( 42500.0/sec): ndbm lookup into database with 900 entries
 211500 reps @   0.0236 msec ( 42400.0/sec): ndbm lookup into database with 900 entries
1057500 trep @   0.0238 msec ( 42100.0/sec): ndbm lookup into database with 900 entries

  50800 reps @   0.0981 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
  50800 reps @   0.0982 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
  50800 reps @   0.0982 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
  50800 reps @   0.0983 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
  50800 reps @   0.0983 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes
 254000 trep @   0.0982 msec ( 10200.0/sec): 1 byte token passing between two processes using two pipes

  39200 reps @   0.1272 msec (  7860.0/sec): 1 kilobyte token passing between two processes using two pipes
  39200 reps @   0.1273 msec (  7850.0/sec): 1 kilobyte token passing between two processes using two pipes
  39200 reps @   0.1276 msec (  7840.0/sec): 1 kilobyte token passing between two processes using two pipes
  39200 reps @   0.1268 msec (  7890.0/sec): 1 kilobyte token passing between two processes using two pipes
  39200 reps @   0.1275 msec (  7840.0/sec): 1 kilobyte token passing between two processes using two pipes
 196000 trep @   0.1273 msec (  7860.0/sec): 1 kilobyte token passing between two processes using two pipes

10048000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
10048000 reps @   0.0005 msec (2010000.0/sec): setjmp/longjmp
10048000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
10048000 reps @   0.0005 msec (2010000.0/sec): setjmp/longjmp
10048000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
50240000 trep @   0.0005 msec (2020000.0/sec): setjmp/longjmp

 124000 reps @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 124000 reps @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 124000 reps @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 124000 reps @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 124000 reps @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 620000 trep @   0.0416 msec ( 24000.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1300 reps @   3.8220 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle
   1300 reps @   3.8159 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle
   1300 reps @   3.8136 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle
   1300 reps @   3.8220 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle
   1300 reps @   3.8162 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle
   6500 trep @   3.8180 msec (   262.0/sec): create/destroy client UDP-based SunRPC handle

   4800 reps @   1.0591 msec (   944.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0574 msec (   946.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0610 msec (   943.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0583 msec (   945.0/sec): TCP-based SunRPC to negate an integer
   4800 reps @   1.0593 msec (   944.0/sec): TCP-based SunRPC to negate an integer
  24000 trep @   1.0590 msec (   944.0/sec): TCP-based SunRPC to negate an integer

   5200 reps @   0.9412 msec (  1060.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.9411 msec (  1060.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.9393 msec (  1060.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.9392 msec (  1060.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.9380 msec (  1070.0/sec): UDP-based SunRPC to negate an integer
  26000 trep @   0.9398 msec (  1060.0/sec): UDP-based SunRPC to negate an integer

   4800 reps @   1.0522 msec (   950.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0522 msec (   950.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0522 msec (   950.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0529 msec (   950.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0516 msec (   951.0/sec): TCP-based SunRPC no-op
  24000 trep @   1.0522 msec (   950.0/sec): TCP-based SunRPC no-op

   5200 reps @   0.9257 msec (  1080.0/sec): UDP-based SunRPC no-op
   5200 reps @   0.9251 msec (  1080.0/sec): UDP-based SunRPC no-op
   5200 reps @   0.9281 msec (  1080.0/sec): UDP-based SunRPC no-op
   5200 reps @   0.9281 msec (  1080.0/sec): UDP-based SunRPC no-op
   5200 reps @   0.9277 msec (  1080.0/sec): UDP-based SunRPC no-op
  26000 trep @   0.9269 msec (  1080.0/sec): UDP-based SunRPC no-op

1472000 reps @   0.0031 msec (324000.0/sec): getpid system call
1472000 reps @   0.0031 msec (324000.0/sec): getpid system call
1472000 reps @   0.0031 msec (324000.0/sec): getpid system call
1472000 reps @   0.0031 msec (324000.0/sec): getpid system call
1472000 reps @   0.0031 msec (324000.0/sec): getpid system call
7360000 trep @   0.0031 msec (324000.0/sec): getpid system call

 213500 reps @   0.0234 msec ( 42700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 213500 reps @   0.0235 msec ( 42600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 213500 reps @   0.0235 msec ( 42600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 213500 reps @   0.0235 msec ( 42600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 213500 reps @   0.0235 msec ( 42600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1067500 trep @   0.0235 msec ( 42600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 932800 reps @   0.0054 msec (186000.0/sec): gettimeofday system call
 932800 reps @   0.0054 msec (186000.0/sec): gettimeofday system call
 932800 reps @   0.0054 msec (186000.0/sec): gettimeofday system call
 932800 reps @   0.0054 msec (186000.0/sec): gettimeofday system call
 932800 reps @   0.0054 msec (186000.0/sec): gettimeofday system call
4664000 trep @   0.0054 msec (186000.0/sec): gettimeofday system call

    250 reps @  21.9658 msec (    45.5/sec): fork, child immediately exits, parent waits
    250 reps @  22.8750 msec (    43.7/sec): fork, child immediately exits, parent waits
    250 reps @  22.0492 msec (    45.4/sec): fork, child immediately exits, parent waits
    250 reps @  23.1057 msec (    43.3/sec): fork, child immediately exits, parent waits
    250 reps @  23.2124 msec (    43.1/sec): fork, child immediately exits, parent waits
   1250 trep @  22.6416 msec (    44.2/sec): fork, child immediately exits, parent waits

      5 reps @ 1011.0128 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9488 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9932 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9522 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9952 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.9804 msec (    0.99/sec): sleep for one second (validates test time)

 606400 reps @   0.0082 msec (121000.0/sec): select on no fds with no timeout
 606400 reps @   0.0082 msec (121000.0/sec): select on no fds with no timeout
 606400 reps @   0.0082 msec (122000.0/sec): select on no fds with no timeout
 606400 reps @   0.0082 msec (121000.0/sec): select on no fds with no timeout
 606400 reps @   0.0083 msec (121000.0/sec): select on no fds with no timeout
3032000 trep @   0.0082 msec (121000.0/sec): select on no fds with no timeout

 128300 reps @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 128300 reps @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 128300 reps @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 128300 reps @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 128300 reps @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 641500 trep @   0.0397 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout

  57700 reps @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout
  57700 reps @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout
  57700 reps @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout
  57700 reps @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout
  57700 reps @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout
 288500 trep @   0.0868 msec ( 11500.0/sec): select on 32 pipe read fds with immediate timeout

 116300 reps @   0.0431 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout
 116300 reps @   0.0431 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout
 116300 reps @   0.0432 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout
 116300 reps @   0.0431 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout
 116300 reps @   0.0432 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout
 581500 trep @   0.0431 msec ( 23200.0/sec): select on 16 pipe write fds with immediate timeout

 113800 reps @   0.0440 msec ( 22700.0/sec): select on 32 pipe write fds with immediate timeout
 113800 reps @   0.0440 msec ( 22700.0/sec): select on 32 pipe write fds with immediate timeout
 113800 reps @   0.0439 msec ( 22800.0/sec): select on 32 pipe write fds with immediate timeout
 113800 reps @   0.0440 msec ( 22700.0/sec): select on 32 pipe write fds with immediate timeout
 113800 reps @   0.0439 msec ( 22800.0/sec): select on 32 pipe write fds with immediate timeout
 569000 trep @   0.0440 msec ( 22700.0/sec): select on 32 pipe write fds with immediate timeout

  11300 reps @   0.4470 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11300 reps @   0.4474 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11300 reps @   0.4471 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11300 reps @   0.4475 msec (  2230.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11300 reps @   0.4470 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  56500 trep @   0.4472 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

     90 reps @  53.1886 msec (    18.8/sec): popen and read from "/bin/echo hello"
     90 reps @  52.8761 msec (    18.9/sec): popen and read from "/bin/echo hello"
     90 reps @  52.8361 msec (    18.9/sec): popen and read from "/bin/echo hello"
     90 reps @  53.0146 msec (    18.9/sec): popen and read from "/bin/echo hello"
     90 reps @  52.7959 msec (    18.9/sec): popen and read from "/bin/echo hello"
    450 trep @  52.9423 msec (    18.9/sec): popen and read from "/bin/echo hello"

  16700 reps @   0.3014 msec (  3320.0/sec): mmap megabyte /dev/zero region 
  16700 reps @   0.3008 msec (  3320.0/sec): mmap megabyte /dev/zero region 
  16700 reps @   0.3014 msec (  3320.0/sec): mmap megabyte /dev/zero region 
  16700 reps @   0.3011 msec (  3320.0/sec): mmap megabyte /dev/zero region 
  16700 reps @   0.3014 msec (  3320.0/sec): mmap megabyte /dev/zero region 
  83500 trep @   0.3012 msec (  3320.0/sec): mmap megabyte /dev/zero region 

    132 reps @  37.6820 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    132 reps @  37.7337 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    132 reps @  37.7019 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    132 reps @  37.7782 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    132 reps @  37.6925 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    660 trep @  37.7177 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    172 reps @  29.1467 msec (    34.3/sec): copy every byte of newly mmaped megabyte file
    172 reps @  29.1207 msec (    34.3/sec): copy every byte of newly mmaped megabyte file
    172 reps @  29.5981 msec (    33.8/sec): copy every byte of newly mmaped megabyte file
    172 reps @  29.6014 msec (    33.8/sec): copy every byte of newly mmaped megabyte file
    172 reps @  29.7615 msec (    33.6/sec): copy every byte of newly mmaped megabyte file
    860 trep @  29.4457 msec (    34.0/sec): copy every byte of newly mmaped megabyte file

     25 reps @ 189.6762 msec (    5.27/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.2487 msec (    5.23/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.1134 msec (    5.23/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.6318 msec (    5.22/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.2808 msec (    5.23/sec): compress & uncompress 52 kilobyte text file of numbers
    125 trep @ 190.9902 msec (    5.24/sec): compress & uncompress 52 kilobyte text file of numbers

      4 reps @ 603.3673 msec (    1.66/sec): compile ANSI C `hello world' with no special options
      4 reps @ 584.5405 msec (    1.71/sec): compile ANSI C `hello world' with no special options
      4 reps @ 589.3955 msec (    1.70/sec): compile ANSI C `hello world' with no special options
      4 reps @ 595.3145 msec (    1.68/sec): compile ANSI C `hello world' with no special options
      4 reps @ 587.1000 msec (    1.70/sec): compile ANSI C `hello world' with no special options
     20 trep @ 591.9435 msec (    1.69/sec): compile ANSI C `hello world' with no special options

     10 reps @ 613.0498 msec (    1.63/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 488.5625 msec (    2.05/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 493.5677 msec (    2.03/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 554.3477 msec (    1.80/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 628.3741 msec (    1.59/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     50 trep @ 555.5804 msec (    1.80/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     12 reps @ 530.5551 msec (    1.88/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 550.4868 msec (    1.82/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 559.3204 msec (    1.79/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 600.4748 msec (    1.67/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     12 reps @ 569.1487 msec (    1.76/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     60 trep @ 561.9972 msec (    1.78/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     12 reps @ 566.6621 msec (    1.76/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 502.6571 msec (    1.99/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 603.9919 msec (    1.66/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 475.1162 msec (    2.10/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 656.9142 msec (    1.52/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     60 trep @ 561.0683 msec (    1.78/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

