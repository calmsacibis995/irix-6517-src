UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.2
Compiler version: 7.1
Instruction set: MIPS 3
Application binary interface: 64-bit
4 150 MHZ IP19 Processors
CPU: MIPS R4400 Processor Chip Revision: 5.0
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
Secondary unified instruction/data cache size: 1 Mbyte
Data cache size: 16 Kbytes
Instruction cache size: 16 Kbytes
Main memory size: 512 Mbytes, 2-way interleaved
I/O board, Ebus slot 3: IO4 revision 1
Integral EPC serial ports: 4
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
EPC external interrupts
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 10 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 1 on SCSI controller 1
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
CC synchronization join counter
Integral EPC parallel port: Ebus slot 3
VME bus: adapter 0 mapped to adapter 13
VME bus: adapter 13
Uptime:  1:32
Users: 2
Load average: 1.02, 2.31, 2.25
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1786.64 MB total, 685.07 MB available)
Date: Mon Jul 21 20:25:23 1997

1370448 reps @   0.0037 msec (274000.0/sec): 4 by 4 double matrix multiply
1370448 reps @   0.0037 msec (274000.0/sec): 4 by 4 double matrix multiply
1370448 reps @   0.0037 msec (274000.0/sec): 4 by 4 double matrix multiply
1370448 reps @   0.0037 msec (274000.0/sec): 4 by 4 double matrix multiply
1370448 reps @   0.0036 msec (274000.0/sec): 4 by 4 double matrix multiply
6852240 trep @   0.0037 msec (274000.0/sec): 4 by 4 double matrix multiply

1418784 reps @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply
1418784 reps @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply
1418784 reps @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply
1418784 reps @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply
1418784 reps @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply
7093920 trep @   0.0035 msec (284000.0/sec): 4 by 4 float matrix multiply

 157500 reps @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return
 157500 reps @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return
 157500 reps @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return
 157500 reps @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return
 157500 reps @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return
 787500 trep @   0.0318 msec ( 31400.0/sec): recurse 250 simple function calls and return

4650000 reps @   0.0011 msec (930000.0/sec): bcopy of 256 bytes
4650000 reps @   0.0011 msec (930000.0/sec): bcopy of 256 bytes
4650000 reps @   0.0011 msec (930000.0/sec): bcopy of 256 bytes
4650000 reps @   0.0011 msec (930000.0/sec): bcopy of 256 bytes
4650000 reps @   0.0011 msec (930000.0/sec): bcopy of 256 bytes
23250000 trep @   0.0011 msec (930000.0/sec): bcopy of 256 bytes

  47240 reps @   0.1049 msec (  9530.0/sec): bcopy of 16 kilobytes
  47240 reps @   0.1050 msec (  9530.0/sec): bcopy of 16 kilobytes
  47240 reps @   0.1050 msec (  9530.0/sec): bcopy of 16 kilobytes
  47240 reps @   0.1050 msec (  9520.0/sec): bcopy of 16 kilobytes
  47240 reps @   0.1050 msec (  9530.0/sec): bcopy of 16 kilobytes
 236200 trep @   0.1050 msec (  9530.0/sec): bcopy of 16 kilobytes

   4684 reps @   1.0645 msec (   939.0/sec): bcopy of 100 kilobytes
   4684 reps @   1.0645 msec (   939.0/sec): bcopy of 100 kilobytes
   4684 reps @   1.0651 msec (   939.0/sec): bcopy of 100 kilobytes
   4684 reps @   1.0645 msec (   939.0/sec): bcopy of 100 kilobytes
   4684 reps @   1.0645 msec (   939.0/sec): bcopy of 100 kilobytes
  23420 trep @   1.0646 msec (   939.0/sec): bcopy of 100 kilobytes

    116 reps @  38.6136 msec (    25.9/sec): bcopy of 1 megabyte
    116 reps @  38.6179 msec (    25.9/sec): bcopy of 1 megabyte
    116 reps @  38.6133 msec (    25.9/sec): bcopy of 1 megabyte
    116 reps @  38.6141 msec (    25.9/sec): bcopy of 1 megabyte
    116 reps @  38.6045 msec (    25.9/sec): bcopy of 1 megabyte
    580 trep @  38.6127 msec (    25.9/sec): bcopy of 1 megabyte

     12 reps @ 465.0620 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.1514 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.1982 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.1222 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.0690 msec (    2.15/sec): bcopy of 10 megabytes
     60 trep @ 465.1205 msec (    2.15/sec): bcopy of 10 megabytes

     20 reps @ 286.0518 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 286.1327 msec (    3.49/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 286.0766 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 286.1359 msec (    3.49/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 286.0894 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 286.0973 msec (    3.50/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 395.1268 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 395.1427 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 395.1207 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 395.1048 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 395.1128 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 395.1216 msec (    2.53/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 342.1884 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.2489 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.2341 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.2043 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.2037 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 342.2159 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)

7852000 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7852000 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7852000 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7852000 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
7852000 reps @   0.0006 msec (1570000.0/sec): bzero of 256 bytes
39260000 trep @   0.0006 msec (1570000.0/sec): bzero of 256 bytes

  52600 reps @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes
  52600 reps @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes
  52600 reps @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes
  52600 reps @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes
  52600 reps @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes
 263000 trep @   0.0951 msec ( 10500.0/sec): bzero of 16 kilobytes

   8436 reps @   0.5914 msec (  1690.0/sec): bzero of 100 kilobytes
   8436 reps @   0.5914 msec (  1690.0/sec): bzero of 100 kilobytes
   8436 reps @   0.5915 msec (  1690.0/sec): bzero of 100 kilobytes
   8436 reps @   0.5914 msec (  1690.0/sec): bzero of 100 kilobytes
   8436 reps @   0.5915 msec (  1690.0/sec): bzero of 100 kilobytes
  42180 trep @   0.5914 msec (  1690.0/sec): bzero of 100 kilobytes

    340 reps @  15.0287 msec (    66.5/sec): bzero of 1 megabyte
    340 reps @  15.0292 msec (    66.5/sec): bzero of 1 megabyte
    340 reps @  15.0331 msec (    66.5/sec): bzero of 1 megabyte
    340 reps @  15.0302 msec (    66.5/sec): bzero of 1 megabyte
    340 reps @  15.0293 msec (    66.5/sec): bzero of 1 megabyte
   1700 trep @  15.0301 msec (    66.5/sec): bzero of 1 megabyte

     36 reps @ 150.2448 msec (    6.66/sec): bzero of 10 megabytes
     36 reps @ 150.2168 msec (    6.66/sec): bzero of 10 megabytes
     36 reps @ 150.1689 msec (    6.66/sec): bzero of 10 megabytes
     36 reps @ 150.1173 msec (    6.66/sec): bzero of 10 megabytes
     36 reps @ 150.1519 msec (    6.66/sec): bzero of 10 megabytes
    180 trep @ 150.1800 msec (    6.66/sec): bzero of 10 megabytes

     36 reps @ 150.1554 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 150.0915 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 150.1718 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 150.1459 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 150.0980 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)
    180 trep @ 150.1325 msec (    6.66/sec): bzero of 10 megabytes (cacheline-aligned)

     36 reps @ 150.1963 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.1917 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.1764 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.1698 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 150.1551 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)
    180 trep @ 150.1779 msec (    6.66/sec): bzero of 10 megabytes (word mis-aligned)

     36 reps @ 150.2157 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 150.1567 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 150.2011 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 150.1370 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 150.1718 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)
    180 trep @ 150.1765 msec (    6.66/sec): bzero of 10 megabytes (dword mis-aligned)

   4151 reps @   1.2020 msec (   832.0/sec): bcopy then qsort 400 32-bit integers
   4151 reps @   1.2026 msec (   832.0/sec): bcopy then qsort 400 32-bit integers
   4151 reps @   1.2028 msec (   831.0/sec): bcopy then qsort 400 32-bit integers
   4151 reps @   1.2024 msec (   832.0/sec): bcopy then qsort 400 32-bit integers
   4151 reps @   1.2024 msec (   832.0/sec): bcopy then qsort 400 32-bit integers
  20755 trep @   1.2024 msec (   832.0/sec): bcopy then qsort 400 32-bit integers

     68 reps @  73.3939 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers
     68 reps @  73.3931 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers
     68 reps @  73.4066 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers
     68 reps @  73.4037 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers
     68 reps @  73.4027 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers
    340 trep @  73.4000 msec (    13.6/sec): bcopy then qsort 16,000 32-bit integers

     15 reps @ 342.6495 msec (    2.92/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 342.5891 msec (    2.92/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 342.6393 msec (    2.92/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 342.6388 msec (    2.92/sec): bcopy then qsort 64,000 32-bit integers
     15 reps @ 350.8669 msec (    2.85/sec): bcopy then qsort 64,000 32-bit integers
     75 trep @ 344.2767 msec (    2.90/sec): bcopy then qsort 64,000 32-bit integers

3750000 reps @   0.0009 msec (1090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3750000 reps @   0.0009 msec (1090000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3750000 reps @   0.0009 msec (1100000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3750000 reps @   0.0009 msec (1120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3750000 reps @   0.0009 msec (1120000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
18750000 trep @   0.0009 msec (1100000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

3625000 reps @   0.0010 msec (968000.0/sec): basic double trigonometric function (sin/cos/tan)
3625000 reps @   0.0010 msec (967000.0/sec): basic double trigonometric function (sin/cos/tan)
3625000 reps @   0.0010 msec (968000.0/sec): basic double trigonometric function (sin/cos/tan)
3625000 reps @   0.0010 msec (968000.0/sec): basic double trigonometric function (sin/cos/tan)
3625000 reps @   0.0010 msec (968000.0/sec): basic double trigonometric function (sin/cos/tan)
18125000 trep @   0.0010 msec (968000.0/sec): basic double trigonometric function (sin/cos/tan)

 972500 reps @   0.0051 msec (195000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 972500 reps @   0.0051 msec (195000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 972500 reps @   0.0051 msec (194000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 972500 reps @   0.0051 msec (194000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 972500 reps @   0.0052 msec (192000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4862500 trep @   0.0052 msec (194000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  12900 reps @   0.3781 msec (  2640.0/sec): Tower of Hanoi recursion test (10 deep)
  12900 reps @   0.3768 msec (  2650.0/sec): Tower of Hanoi recursion test (10 deep)
  12900 reps @   0.3769 msec (  2650.0/sec): Tower of Hanoi recursion test (10 deep)
  12900 reps @   0.3768 msec (  2650.0/sec): Tower of Hanoi recursion test (10 deep)
  12900 reps @   0.3769 msec (  2650.0/sec): Tower of Hanoi recursion test (10 deep)
  64500 trep @   0.3771 msec (  2650.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  12.0719 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  12.0729 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  12.0720 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  12.0728 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  12.0719 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  12.0723 msec (    82.8/sec): Tower of Hanoi recursion test (15 deep)

 161500 reps @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 161500 reps @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 161500 reps @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 161500 reps @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 161500 reps @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 807500 trep @   0.0310 msec ( 32200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  53600 reps @   0.0952 msec ( 10500.0/sec): write 80 bytes to a log file
  53600 reps @   0.0992 msec ( 10100.0/sec): write 80 bytes to a log file
  53600 reps @   0.1090 msec (  9170.0/sec): write 80 bytes to a log file
  53600 reps @   0.1068 msec (  9370.0/sec): write 80 bytes to a log file
  53600 reps @   0.1077 msec (  9280.0/sec): write 80 bytes to a log file
 268000 trep @   0.1036 msec (  9660.0/sec): write 80 bytes to a log file

    700 reps @   6.3502 msec (   157.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.3195 msec (   158.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.3822 msec (   157.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.3645 msec (   157.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.4642 msec (   155.0/sec): per-file cost of creating 100 files then unlinking them all
   3500 trep @   6.3761 msec (   157.0/sec): per-file cost of creating 100 files then unlinking them all

  20600 reps @   0.2435 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files
  20600 reps @   0.2434 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files
  20600 reps @   0.2433 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files
  20600 reps @   0.2436 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files
  20600 reps @   0.2436 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files
 103000 trep @   0.2435 msec (  4110.0/sec): per-file cost of open and immediate close of 100 files

  29200 reps @   0.1913 msec (  5230.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  29200 reps @   0.1706 msec (  5860.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  29200 reps @   0.1708 msec (  5850.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  29200 reps @   0.1704 msec (  5870.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  29200 reps @   0.1705 msec (  5870.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 146000 trep @   0.1747 msec (  5720.0/sec): per-chmod cost of chmod permissions toggle of 100 files

  85500 reps @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir
  85500 reps @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir
  85500 reps @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir
  85500 reps @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir
  85500 reps @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir
 427500 trep @   0.0585 msec ( 17100.0/sec): cost of stat'ing current dir

  22500 reps @   0.2246 msec (  4450.0/sec): cost of stat'ing 5 component path
  22500 reps @   0.2243 msec (  4460.0/sec): cost of stat'ing 5 component path
  22500 reps @   0.2243 msec (  4460.0/sec): cost of stat'ing 5 component path
  22500 reps @   0.2237 msec (  4470.0/sec): cost of stat'ing 5 component path
  22500 reps @   0.2238 msec (  4470.0/sec): cost of stat'ing 5 component path
 112500 trep @   0.2241 msec (  4460.0/sec): cost of stat'ing 5 component path

    644 reps @   7.7713 msec (   129.0/sec): open directory and stat 100 files in it
    644 reps @   7.7926 msec (   128.0/sec): open directory and stat 100 files in it
    644 reps @   7.7626 msec (   129.0/sec): open directory and stat 100 files in it
    644 reps @   7.6674 msec (   130.0/sec): open directory and stat 100 files in it
    644 reps @   7.5758 msec (   132.0/sec): open directory and stat 100 files in it
   3220 trep @   7.7139 msec (   130.0/sec): open directory and stat 100 files in it

    900 reps @   6.5311 msec (   153.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.2943 msec (   159.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.2598 msec (   160.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.7008 msec (   149.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   6.3323 msec (   158.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4500 trep @   6.4237 msec (   156.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 132300 reps @   0.0377 msec ( 26500.0/sec): ndbm lookup into database with 900 entries
 132300 reps @   0.0377 msec ( 26500.0/sec): ndbm lookup into database with 900 entries
 132300 reps @   0.0384 msec ( 26100.0/sec): ndbm lookup into database with 900 entries
 132300 reps @   0.0379 msec ( 26400.0/sec): ndbm lookup into database with 900 entries
 132300 reps @   0.0374 msec ( 26700.0/sec): ndbm lookup into database with 900 entries
 661500 trep @   0.0378 msec ( 26400.0/sec): ndbm lookup into database with 900 entries

  18800 reps @   0.2729 msec (  3660.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2700 msec (  3700.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2708 msec (  3690.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2712 msec (  3690.0/sec): 1 byte token passing between two processes using two pipes
  18800 reps @   0.2702 msec (  3700.0/sec): 1 byte token passing between two processes using two pipes
  94000 trep @   0.2710 msec (  3690.0/sec): 1 byte token passing between two processes using two pipes

  16400 reps @   0.3098 msec (  3230.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3099 msec (  3230.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3109 msec (  3220.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3129 msec (  3200.0/sec): 1 kilobyte token passing between two processes using two pipes
  16400 reps @   0.3091 msec (  3230.0/sec): 1 kilobyte token passing between two processes using two pipes
  82000 trep @   0.3105 msec (  3220.0/sec): 1 kilobyte token passing between two processes using two pipes

8704000 reps @   0.0006 msec (1740000.0/sec): setjmp/longjmp
8704000 reps @   0.0006 msec (1740000.0/sec): setjmp/longjmp
8704000 reps @   0.0006 msec (1740000.0/sec): setjmp/longjmp
8704000 reps @   0.0006 msec (1770000.0/sec): setjmp/longjmp
8704000 reps @   0.0006 msec (1780000.0/sec): setjmp/longjmp
43520000 trep @   0.0006 msec (1750000.0/sec): setjmp/longjmp

 108000 reps @   0.0470 msec ( 21300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 108000 reps @   0.0470 msec ( 21300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 108000 reps @   0.0472 msec ( 21200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 108000 reps @   0.0472 msec ( 21200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 108000 reps @   0.0471 msec ( 21300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 540000 trep @   0.0471 msec ( 21200.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1180 reps @   3.8664 msec (   259.0/sec): create/destroy client UDP-based SunRPC handle
   1180 reps @   4.1679 msec (   240.0/sec): create/destroy client UDP-based SunRPC handle
   1180 reps @   3.9755 msec (   252.0/sec): create/destroy client UDP-based SunRPC handle
   1180 reps @   4.2713 msec (   234.0/sec): create/destroy client UDP-based SunRPC handle
   1180 reps @   4.0952 msec (   244.0/sec): create/destroy client UDP-based SunRPC handle
   5900 trep @   4.0753 msec (   245.0/sec): create/destroy client UDP-based SunRPC handle

   5600 reps @   0.9865 msec (  1010.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   1.0088 msec (   991.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9764 msec (  1020.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9858 msec (  1010.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9989 msec (  1000.0/sec): TCP-based SunRPC to negate an integer
  28000 trep @   0.9913 msec (  1010.0/sec): TCP-based SunRPC to negate an integer

   2000 reps @   2.8621 msec (   349.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   2.8808 msec (   347.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   2.8573 msec (   350.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   2.8604 msec (   350.0/sec): UDP-based SunRPC to negate an integer
   2000 reps @   2.8545 msec (   350.0/sec): UDP-based SunRPC to negate an integer
  10000 trep @   2.8630 msec (   349.0/sec): UDP-based SunRPC to negate an integer

   4400 reps @   1.0746 msec (   931.0/sec): TCP-based SunRPC no-op
   4400 reps @   0.9772 msec (  1020.0/sec): TCP-based SunRPC no-op
   4400 reps @   0.9898 msec (  1010.0/sec): TCP-based SunRPC no-op
   4400 reps @   1.0859 msec (   921.0/sec): TCP-based SunRPC no-op
   4400 reps @   0.9909 msec (  1010.0/sec): TCP-based SunRPC no-op
  22000 trep @   1.0237 msec (   977.0/sec): TCP-based SunRPC no-op

   2000 reps @   2.6021 msec (   384.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.7006 msec (   370.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.3506 msec (   425.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.8665 msec (   349.0/sec): UDP-based SunRPC no-op
   2000 reps @   2.8612 msec (   350.0/sec): UDP-based SunRPC no-op
  10000 trep @   2.6762 msec (   374.0/sec): UDP-based SunRPC no-op

1104500 reps @   0.0046 msec (217000.0/sec): getpid system call
1104500 reps @   0.0045 msec (220000.0/sec): getpid system call
1104500 reps @   0.0045 msec (221000.0/sec): getpid system call
1104500 reps @   0.0045 msec (221000.0/sec): getpid system call
1104500 reps @   0.0045 msec (221000.0/sec): getpid system call
5522500 trep @   0.0045 msec (220000.0/sec): getpid system call

 131500 reps @   0.0381 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 131500 reps @   0.0381 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 131500 reps @   0.0382 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 131500 reps @   0.0381 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 131500 reps @   0.0381 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 657500 trep @   0.0381 msec ( 26200.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 425200 reps @   0.0118 msec ( 85000.0/sec): gettimeofday system call
 425200 reps @   0.0118 msec ( 85000.0/sec): gettimeofday system call
 425200 reps @   0.0118 msec ( 84900.0/sec): gettimeofday system call
 425200 reps @   0.0118 msec ( 84900.0/sec): gettimeofday system call
 425200 reps @   0.0118 msec ( 85000.0/sec): gettimeofday system call
2126000 trep @   0.0118 msec ( 84900.0/sec): gettimeofday system call

    550 reps @   9.7591 msec (   102.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.6974 msec (   103.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.6836 msec (   103.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.6730 msec (   103.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.7355 msec (   103.0/sec): fork, child immediately exits, parent waits
   2750 trep @   9.7097 msec (   103.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1009.9754 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9590 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9604 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9630 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9586 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1009.9633 msec (    0.99/sec): sleep for one second (validates test time)

 396700 reps @   0.0126 msec ( 79300.0/sec): select on no fds with no timeout
 396700 reps @   0.0126 msec ( 79300.0/sec): select on no fds with no timeout
 396700 reps @   0.0126 msec ( 79300.0/sec): select on no fds with no timeout
 396700 reps @   0.0128 msec ( 77900.0/sec): select on no fds with no timeout
 396700 reps @   0.0129 msec ( 77800.0/sec): select on no fds with no timeout
1983500 trep @   0.0127 msec ( 78700.0/sec): select on no fds with no timeout

  99400 reps @   0.0490 msec ( 20400.0/sec): select on 16 pipe read fds with immediate timeout
  99400 reps @   0.0490 msec ( 20400.0/sec): select on 16 pipe read fds with immediate timeout
  99400 reps @   0.0480 msec ( 20800.0/sec): select on 16 pipe read fds with immediate timeout
  99400 reps @   0.0480 msec ( 20900.0/sec): select on 16 pipe read fds with immediate timeout
  99400 reps @   0.0480 msec ( 20800.0/sec): select on 16 pipe read fds with immediate timeout
 497000 trep @   0.0484 msec ( 20700.0/sec): select on 16 pipe read fds with immediate timeout

  58600 reps @   0.0853 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58600 reps @   0.0854 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58600 reps @   0.0853 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58600 reps @   0.0853 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
  58600 reps @   0.0854 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout
 293000 trep @   0.0853 msec ( 11700.0/sec): select on 32 pipe read fds with immediate timeout

  95500 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout
  95500 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout
  95500 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout
  95500 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout
  95500 reps @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout
 477500 trep @   0.0524 msec ( 19100.0/sec): select on 16 pipe write fds with immediate timeout

  95200 reps @   0.0526 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout
  95200 reps @   0.0526 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout
  95200 reps @   0.0526 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout
  95200 reps @   0.0527 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout
  95200 reps @   0.0526 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout
 476000 trep @   0.0526 msec ( 19000.0/sec): select on 32 pipe write fds with immediate timeout

  14000 reps @   0.3588 msec (  2790.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14000 reps @   0.3585 msec (  2790.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14000 reps @   0.3585 msec (  2790.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14000 reps @   0.3593 msec (  2780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  14000 reps @   0.3585 msec (  2790.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  70000 trep @   0.3587 msec (  2790.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    170 reps @  29.9412 msec (    33.4/sec): popen and read from "/bin/echo hello"
    170 reps @  29.8158 msec (    33.5/sec): popen and read from "/bin/echo hello"
    170 reps @  29.9041 msec (    33.4/sec): popen and read from "/bin/echo hello"
    170 reps @  30.0627 msec (    33.3/sec): popen and read from "/bin/echo hello"
    170 reps @  29.8505 msec (    33.5/sec): popen and read from "/bin/echo hello"
    850 trep @  29.9149 msec (    33.4/sec): popen and read from "/bin/echo hello"

  21150 reps @   0.2373 msec (  4210.0/sec): mmap megabyte /dev/zero region 
  21150 reps @   0.2371 msec (  4220.0/sec): mmap megabyte /dev/zero region 
  21150 reps @   0.2372 msec (  4220.0/sec): mmap megabyte /dev/zero region 
  21150 reps @   0.2371 msec (  4220.0/sec): mmap megabyte /dev/zero region 
  21150 reps @   0.2372 msec (  4220.0/sec): mmap megabyte /dev/zero region 
 105750 trep @   0.2372 msec (  4220.0/sec): mmap megabyte /dev/zero region 

    244 reps @  20.5166 msec (    48.7/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    244 reps @  20.5185 msec (    48.7/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    244 reps @  20.4966 msec (    48.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    244 reps @  20.4969 msec (    48.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    244 reps @  20.4932 msec (    48.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1220 trep @  20.5044 msec (    48.8/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    407 reps @  12.3727 msec (    80.8/sec): copy every byte of newly mmaped megabyte file
    407 reps @  12.3692 msec (    80.8/sec): copy every byte of newly mmaped megabyte file
    407 reps @  12.5304 msec (    79.8/sec): copy every byte of newly mmaped megabyte file
    407 reps @  12.5613 msec (    79.6/sec): copy every byte of newly mmaped megabyte file
    407 reps @  12.6823 msec (    78.8/sec): copy every byte of newly mmaped megabyte file
   2035 trep @  12.5032 msec (    80.0/sec): copy every byte of newly mmaped megabyte file

     13 reps @ 154.5499 msec (    6.47/sec): compress & uncompress 52 kilobyte text file of numbers
     13 reps @ 152.1149 msec (    6.57/sec): compress & uncompress 52 kilobyte text file of numbers
     13 reps @ 153.3497 msec (    6.52/sec): compress & uncompress 52 kilobyte text file of numbers
     13 reps @ 156.5481 msec (    6.39/sec): compress & uncompress 52 kilobyte text file of numbers
     13 reps @ 190.9849 msec (    5.24/sec): compress & uncompress 52 kilobyte text file of numbers
     65 trep @ 161.5095 msec (    6.19/sec): compress & uncompress 52 kilobyte text file of numbers

     15 reps @ 348.6883 msec (    2.87/sec): compile ANSI C `hello world' with no special options
     15 reps @ 350.0821 msec (    2.86/sec): compile ANSI C `hello world' with no special options
     15 reps @ 350.2394 msec (    2.86/sec): compile ANSI C `hello world' with no special options
     15 reps @ 351.6241 msec (    2.84/sec): compile ANSI C `hello world' with no special options
     15 reps @ 362.1819 msec (    2.76/sec): compile ANSI C `hello world' with no special options
     75 trep @ 352.5632 msec (    2.84/sec): compile ANSI C `hello world' with no special options

     13 reps @ 420.1902 msec (    2.38/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     13 reps @ 435.3996 msec (    2.30/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     13 reps @ 348.5734 msec (    2.87/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     13 reps @ 470.7576 msec (    2.12/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     13 reps @ 401.2753 msec (    2.49/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     65 trep @ 415.2392 msec (    2.41/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     10 reps @ 343.2415 msec (    2.91/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 409.6229 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 356.3195 msec (    2.81/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 470.2324 msec (    2.13/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     10 reps @ 481.0684 msec (    2.08/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 trep @ 412.0969 msec (    2.43/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     40 reps @ 407.4936 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 reps @ 437.2831 msec (    2.29/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 reps @ 396.7298 msec (    2.52/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 reps @ 430.6735 msec (    2.32/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 reps @ 397.7337 msec (    2.51/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
    200 trep @ 413.9827 msec (    2.42/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 428.5551 msec (    2.33/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 404.8008 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 403.9000 msec (    2.48/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 405.0913 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 402.9949 msec (    2.48/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 409.0684 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     12 reps @ 399.0682 msec (    2.51/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 401.8071 msec (    2.49/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 417.3053 msec (    2.40/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 435.2786 msec (    2.30/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 393.4937 msec (    2.54/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     60 trep @ 409.3906 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 397.8046 msec (    2.51/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 424.4370 msec (    2.36/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 394.3141 msec (    2.54/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 426.8501 msec (    2.34/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 383.0351 msec (    2.61/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 405.2882 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 4053.0350 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4040.5650 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4035.3885 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4057.4900 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4174.2355 msec (    0.24/sec): use dc to output first 1,000 factorials
     10 trep @ 4072.1428 msec (    0.25/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  28144 reps @   0.1782 msec (  5610.0/sec): use regcomp to compile 51 char literal, then regfree
  28144 reps @   0.1782 msec (  5610.0/sec): use regcomp to compile 51 char literal, then regfree
  28144 reps @   0.1780 msec (  5620.0/sec): use regcomp to compile 51 char literal, then regfree
  28144 reps @   0.1780 msec (  5620.0/sec): use regcomp to compile 51 char literal, then regfree
  28144 reps @   0.1780 msec (  5620.0/sec): use regcomp to compile 51 char literal, then regfree
 140720 trep @   0.1781 msec (  5620.0/sec): use regcomp to compile 51 char literal, then regfree

      4 reps @ 1580.3512 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1580.2142 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1580.3740 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1581.5280 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text
      4 reps @ 1580.3122 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text
     20 trep @ 1580.5559 msec (    0.63/sec): use regexec with 51 char literal to search 142 kilobyte text

  34388 reps @   0.1457 msec (  6860.0/sec): use regcomp to compile long .* pattern, then regfree
  34388 reps @   0.1457 msec (  6860.0/sec): use regcomp to compile long .* pattern, then regfree
  34388 reps @   0.1459 msec (  6850.0/sec): use regcomp to compile long .* pattern, then regfree
  34388 reps @   0.1489 msec (  6710.0/sec): use regcomp to compile long .* pattern, then regfree
  34388 reps @   0.1467 msec (  6810.0/sec): use regcomp to compile long .* pattern, then regfree
 171940 trep @   0.1466 msec (  6820.0/sec): use regcomp to compile long .* pattern, then regfree

      4 reps @ 1288.0957 msec (    0.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      4 reps @ 1286.8945 msec (    0.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      4 reps @ 1287.2060 msec (    0.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      4 reps @ 1286.7278 msec (    0.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      4 reps @ 1301.4748 msec (    0.77/sec): use regexec with long .* pattern to search 142 kilobyte text
     20 trep @ 1290.0798 msec (    0.78/sec): use regexec with long .* pattern to search 142 kilobyte text

