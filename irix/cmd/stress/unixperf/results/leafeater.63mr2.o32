UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: leafeater
Operating system: IRIX 6.3
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
Video: MVP unit 0 version 1.2
AV: AV1 Card version 1, O2Cam type 1 version 0 connected.
FLASH PROM version 3.3
On-board serial ports: 2
On-board EPP/ECP parallel port
1 180 MHZ IP32 Processor
FPU: MIPS R5000 Floating Point Coprocessor Revision: 1.0
CPU: MIPS R5000 Processor Chip Revision: 1.0
Data cache size: 32 Kbytes
Instruction cache size: 32 Kbytes
Secondary unified instruction/data cache size: 512 Kbytes on Processor 0
Main memory size: 64 Mbytes
Iris Audio Processor: version A3 revision 0
Integral Ethernet: ec0, version 1
  CDROM: unit 4 on SCSI controller 0
  Disk drive: unit 1 on SCSI controller 0
CRM graphics installed
Integral SCSI controller 1: Version ADAPTEC 7880
Integral SCSI controller 0: Version ADAPTEC 7880
Vice: DX
Uptime: 15 hrs
Users: 1
Load average: 0.40, 0.90, 0.70
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1915.95 MB total, 44.66 MB available)
Date: Tue Mar 18 03:15:24 1997

1889532 reps @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply
1889532 reps @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply
1889532 reps @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply
1889532 reps @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply
1889532 reps @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply
9447660 trep @   0.0025 msec (393000.0/sec): 4 by 4 double matrix multiply

2122284 reps @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply
2122284 reps @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply
2122284 reps @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply
2122284 reps @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply
2122284 reps @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply
10611420 trep @   0.0023 msec (442000.0/sec): 4 by 4 float matrix multiply

1161000 reps @   0.0043 msec (233000.0/sec): recurse 250 simple function calls and return
1161000 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
1161000 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
1161000 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
1161000 reps @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return
5805000 trep @   0.0043 msec (232000.0/sec): recurse 250 simple function calls and return

4433600 reps @   0.0011 msec (886000.0/sec): bcopy of 256 bytes
4433600 reps @   0.0011 msec (886000.0/sec): bcopy of 256 bytes
4433600 reps @   0.0011 msec (886000.0/sec): bcopy of 256 bytes
4433600 reps @   0.0011 msec (886000.0/sec): bcopy of 256 bytes
4433600 reps @   0.0011 msec (887000.0/sec): bcopy of 256 bytes
22168000 trep @   0.0011 msec (886000.0/sec): bcopy of 256 bytes

  88000 reps @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes
  88000 reps @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes
  88000 reps @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes
  88000 reps @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes
  88000 reps @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes
 440000 trep @   0.0539 msec ( 18600.0/sec): bcopy of 16 kilobytes

   3308 reps @   1.5018 msec (   666.0/sec): bcopy of 100 kilobytes
   3308 reps @   1.5034 msec (   665.0/sec): bcopy of 100 kilobytes
   3308 reps @   1.5034 msec (   665.0/sec): bcopy of 100 kilobytes
   3308 reps @   1.5016 msec (   666.0/sec): bcopy of 100 kilobytes
   3308 reps @   1.5028 msec (   665.0/sec): bcopy of 100 kilobytes
  16540 trep @   1.5026 msec (   666.0/sec): bcopy of 100 kilobytes

    156 reps @  32.0370 msec (    31.2/sec): bcopy of 1 megabyte
    156 reps @  32.0557 msec (    31.2/sec): bcopy of 1 megabyte
    156 reps @  32.0452 msec (    31.2/sec): bcopy of 1 megabyte
    156 reps @  32.0350 msec (    31.2/sec): bcopy of 1 megabyte
    156 reps @  32.0308 msec (    31.2/sec): bcopy of 1 megabyte
    780 trep @  32.0407 msec (    31.2/sec): bcopy of 1 megabyte

     16 reps @ 323.6478 msec (    3.09/sec): bcopy of 10 megabytes
     16 reps @ 323.4562 msec (    3.09/sec): bcopy of 10 megabytes
     16 reps @ 323.4807 msec (    3.09/sec): bcopy of 10 megabytes
     16 reps @ 323.6673 msec (    3.09/sec): bcopy of 10 megabytes
     16 reps @ 323.2953 msec (    3.09/sec): bcopy of 10 megabytes
     80 trep @ 323.5095 msec (    3.09/sec): bcopy of 10 megabytes

     16 reps @ 326.2754 msec (    3.06/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 326.0906 msec (    3.07/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 326.0592 msec (    3.07/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 326.0869 msec (    3.07/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 326.1032 msec (    3.07/sec): bcopy of 10 megabytes (cacheline-aligned)
     80 trep @ 326.1230 msec (    3.07/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 336.9321 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 336.7919 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 336.7604 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 336.7228 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 336.6704 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 336.7755 msec (    2.97/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 325.4546 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 325.2507 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 325.2974 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 325.2758 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 325.2314 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 325.3020 msec (    3.07/sec): bcopy of 10 megabytes (dword mis-aligned)

8069600 reps @   0.0006 msec (1610000.0/sec): bzero of 256 bytes
8069600 reps @   0.0006 msec (1610000.0/sec): bzero of 256 bytes
8069600 reps @   0.0006 msec (1610000.0/sec): bzero of 256 bytes
8069600 reps @   0.0006 msec (1610000.0/sec): bzero of 256 bytes
8069600 reps @   0.0006 msec (1610000.0/sec): bzero of 256 bytes
40348000 trep @   0.0006 msec (1610000.0/sec): bzero of 256 bytes

 154280 reps @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes
 154280 reps @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes
 154280 reps @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes
 154280 reps @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes
 154280 reps @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes
 771400 trep @   0.0309 msec ( 32400.0/sec): bzero of 16 kilobytes

   5816 reps @   0.8499 msec (  1180.0/sec): bzero of 100 kilobytes
   5816 reps @   0.8506 msec (  1180.0/sec): bzero of 100 kilobytes
   5816 reps @   0.8500 msec (  1180.0/sec): bzero of 100 kilobytes
   5816 reps @   0.8511 msec (  1180.0/sec): bzero of 100 kilobytes
   5816 reps @   0.8505 msec (  1180.0/sec): bzero of 100 kilobytes
  29080 trep @   0.8504 msec (  1180.0/sec): bzero of 100 kilobytes

    280 reps @  17.1210 msec (    58.4/sec): bzero of 1 megabyte
    280 reps @  17.1176 msec (    58.4/sec): bzero of 1 megabyte
    280 reps @  17.1245 msec (    58.4/sec): bzero of 1 megabyte
    280 reps @  17.1213 msec (    58.4/sec): bzero of 1 megabyte
    280 reps @  17.1397 msec (    58.3/sec): bzero of 1 megabyte
   1400 trep @  17.1248 msec (    58.4/sec): bzero of 1 megabyte

     32 reps @ 171.7888 msec (    5.82/sec): bzero of 10 megabytes
     32 reps @ 171.8737 msec (    5.82/sec): bzero of 10 megabytes
     32 reps @ 171.8672 msec (    5.82/sec): bzero of 10 megabytes
     32 reps @ 171.8787 msec (    5.82/sec): bzero of 10 megabytes
     32 reps @ 171.9320 msec (    5.82/sec): bzero of 10 megabytes
    160 trep @ 171.8681 msec (    5.82/sec): bzero of 10 megabytes

     32 reps @ 172.0190 msec (    5.81/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 171.9660 msec (    5.82/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 172.0733 msec (    5.81/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 171.9343 msec (    5.82/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 171.9326 msec (    5.82/sec): bzero of 10 megabytes (cacheline-aligned)
    160 trep @ 171.9850 msec (    5.81/sec): bzero of 10 megabytes (cacheline-aligned)

     32 reps @ 171.8796 msec (    5.82/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 171.9276 msec (    5.82/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 172.0697 msec (    5.81/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 171.9024 msec (    5.82/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 171.9732 msec (    5.81/sec): bzero of 10 megabytes (word mis-aligned)
    160 trep @ 171.9505 msec (    5.82/sec): bzero of 10 megabytes (word mis-aligned)

     32 reps @ 172.0415 msec (    5.81/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 171.9994 msec (    5.81/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 171.9913 msec (    5.81/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 171.9284 msec (    5.82/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 172.0269 msec (    5.81/sec): bzero of 10 megabytes (dword mis-aligned)
    160 trep @ 171.9975 msec (    5.81/sec): bzero of 10 megabytes (dword mis-aligned)

   8607 reps @   0.5502 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   8607 reps @   0.5497 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   8607 reps @   0.5500 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   8607 reps @   0.5499 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
   8607 reps @   0.5498 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers
  43035 trep @   0.5499 msec (  1820.0/sec): bcopy then qsort 400 32-bit integers

    137 reps @  36.1393 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers
    137 reps @  36.1165 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers
    137 reps @  36.1110 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers
    137 reps @  36.1191 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers
    137 reps @  36.1031 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers
    685 trep @  36.1178 msec (    27.7/sec): bcopy then qsort 16,000 32-bit integers

     28 reps @ 173.7844 msec (    5.75/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 173.7581 msec (    5.76/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 173.8816 msec (    5.75/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 173.7840 msec (    5.75/sec): bcopy then qsort 64,000 32-bit integers
     28 reps @ 173.8704 msec (    5.75/sec): bcopy then qsort 64,000 32-bit integers
    140 trep @ 173.8157 msec (    5.75/sec): bcopy then qsort 64,000 32-bit integers

7240000 reps @   0.0006 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7240000 reps @   0.0006 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7240000 reps @   0.0006 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7240000 reps @   0.0007 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
7240000 reps @   0.0006 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
36200000 trep @   0.0006 msec (1540000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

5627500 reps @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)
5627500 reps @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)
5627500 reps @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)
5627500 reps @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)
5627500 reps @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)
28137500 trep @   0.0008 msec (1180000.0/sec): basic double trigonometric function (sin/cos/tan)

1314000 reps @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1314000 reps @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1314000 reps @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1314000 reps @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1314000 reps @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
6570000 trep @   0.0036 msec (277000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  15900 reps @   0.3093 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  15900 reps @   0.3095 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  15900 reps @   0.3094 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  15900 reps @   0.3093 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  15900 reps @   0.3092 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)
  79500 trep @   0.3093 msec (  3230.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @   9.9055 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9117 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9082 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9091 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @   9.9058 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @   9.9081 msec (   101.0/sec): Tower of Hanoi recursion test (15 deep)

 288000 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 288000 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 288000 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 288000 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 288000 reps @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1440000 trep @   0.0164 msec ( 60900.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  76600 reps @   0.0707 msec ( 14200.0/sec): write 80 bytes to a log file
  76600 reps @   0.0727 msec ( 13800.0/sec): write 80 bytes to a log file
  76600 reps @   0.0833 msec ( 12000.0/sec): write 80 bytes to a log file
  76600 reps @   0.0815 msec ( 12300.0/sec): write 80 bytes to a log file
  76600 reps @   0.0868 msec ( 11500.0/sec): write 80 bytes to a log file
 383000 trep @   0.0790 msec ( 12700.0/sec): write 80 bytes to a log file

    700 reps @   6.5072 msec (   154.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.2785 msec (   159.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.2706 msec (   159.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.2536 msec (   160.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   6.2593 msec (   160.0/sec): per-file cost of creating 100 files then unlinking them all
   3500 trep @   6.3138 msec (   158.0/sec): per-file cost of creating 100 files then unlinking them all

  47000 reps @   0.1065 msec (  9390.0/sec): per-file cost of open and immediate close of 100 files
  47000 reps @   0.1064 msec (  9400.0/sec): per-file cost of open and immediate close of 100 files
  47000 reps @   0.1064 msec (  9400.0/sec): per-file cost of open and immediate close of 100 files
  47000 reps @   0.1064 msec (  9400.0/sec): per-file cost of open and immediate close of 100 files
  47000 reps @   0.1067 msec (  9380.0/sec): per-file cost of open and immediate close of 100 files
 235000 trep @   0.1065 msec (  9390.0/sec): per-file cost of open and immediate close of 100 files

  27800 reps @   0.1591 msec (  6280.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27800 reps @   0.1374 msec (  7280.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27800 reps @   0.1376 msec (  7270.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27800 reps @   0.1348 msec (  7420.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27800 reps @   0.1343 msec (  7450.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 139000 trep @   0.1406 msec (  7110.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 239000 reps @   0.0209 msec ( 47800.0/sec): cost of stat'ing current dir
 239000 reps @   0.0216 msec ( 46200.0/sec): cost of stat'ing current dir
 239000 reps @   0.0218 msec ( 45900.0/sec): cost of stat'ing current dir
 239000 reps @   0.0218 msec ( 45900.0/sec): cost of stat'ing current dir
 239000 reps @   0.0218 msec ( 45900.0/sec): cost of stat'ing current dir
1195000 trep @   0.0216 msec ( 46300.0/sec): cost of stat'ing current dir

  56000 reps @   0.0898 msec ( 11100.0/sec): cost of stat'ing 5 component path
  56000 reps @   0.0901 msec ( 11100.0/sec): cost of stat'ing 5 component path
  56000 reps @   0.0928 msec ( 10800.0/sec): cost of stat'ing 5 component path
  56000 reps @   0.0930 msec ( 10800.0/sec): cost of stat'ing 5 component path
  56000 reps @   0.0929 msec ( 10800.0/sec): cost of stat'ing 5 component path
 280000 trep @   0.0917 msec ( 10900.0/sec): cost of stat'ing 5 component path

   1474 reps @   3.2230 msec (   310.0/sec): open directory and stat 100 files in it
   1474 reps @   3.2235 msec (   310.0/sec): open directory and stat 100 files in it
   1474 reps @   3.2324 msec (   309.0/sec): open directory and stat 100 files in it
   1474 reps @   3.2389 msec (   309.0/sec): open directory and stat 100 files in it
   1474 reps @   3.2285 msec (   310.0/sec): open directory and stat 100 files in it
   7370 trep @   3.2293 msec (   310.0/sec): open directory and stat 100 files in it

    800 reps @   5.6288 msec (   178.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.0273 msec (   199.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.1455 msec (   194.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.0048 msec (   200.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.0490 msec (   198.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4000 trep @   5.1711 msec (   193.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 171900 reps @   0.0286 msec ( 35000.0/sec): ndbm lookup into database with 900 entries
 171900 reps @   0.0287 msec ( 34800.0/sec): ndbm lookup into database with 900 entries
 171900 reps @   0.0290 msec ( 34500.0/sec): ndbm lookup into database with 900 entries
 171900 reps @   0.0283 msec ( 35400.0/sec): ndbm lookup into database with 900 entries
 171900 reps @   0.0282 msec ( 35400.0/sec): ndbm lookup into database with 900 entries
 859500 trep @   0.0285 msec ( 35000.0/sec): ndbm lookup into database with 900 entries

  47600 reps @   0.0962 msec ( 10400.0/sec): 1 byte token passing between two processes using two pipes
  47600 reps @   0.0959 msec ( 10400.0/sec): 1 byte token passing between two processes using two pipes
  47600 reps @   0.0960 msec ( 10400.0/sec): 1 byte token passing between two processes using two pipes
  47600 reps @   0.0957 msec ( 10500.0/sec): 1 byte token passing between two processes using two pipes
  47600 reps @   0.0960 msec ( 10400.0/sec): 1 byte token passing between two processes using two pipes
 238000 trep @   0.0960 msec ( 10400.0/sec): 1 byte token passing between two processes using two pipes

  40400 reps @   0.1179 msec (  8480.0/sec): 1 kilobyte token passing between two processes using two pipes
  40400 reps @   0.1181 msec (  8470.0/sec): 1 kilobyte token passing between two processes using two pipes
  40400 reps @   0.1180 msec (  8480.0/sec): 1 kilobyte token passing between two processes using two pipes
  40400 reps @   0.1180 msec (  8470.0/sec): 1 kilobyte token passing between two processes using two pipes
  40400 reps @   0.1181 msec (  8470.0/sec): 1 kilobyte token passing between two processes using two pipes
 202000 trep @   0.1180 msec (  8470.0/sec): 1 kilobyte token passing between two processes using two pipes

9612000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
9612000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
9612000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
9612000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
9612000 reps @   0.0005 msec (2020000.0/sec): setjmp/longjmp
48060000 trep @   0.0005 msec (2020000.0/sec): setjmp/longjmp

 280000 reps @   0.0171 msec ( 58300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 reps @   0.0171 msec ( 58400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 reps @   0.0171 msec ( 58300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 reps @   0.0171 msec ( 58400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 reps @   0.0171 msec ( 58300.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1400000 trep @   0.0171 msec ( 58300.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   2145 reps @   2.3129 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle
   2145 reps @   2.3157 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle
   2145 reps @   2.3158 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle
   2145 reps @   2.3158 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle
   2145 reps @   2.3155 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle
  10725 trep @   2.3151 msec (   432.0/sec): create/destroy client UDP-based SunRPC handle

   8800 reps @   0.5655 msec (  1770.0/sec): TCP-based SunRPC to negate an integer
   8800 reps @   0.5656 msec (  1770.0/sec): TCP-based SunRPC to negate an integer
   8800 reps @   0.5667 msec (  1760.0/sec): TCP-based SunRPC to negate an integer
   8800 reps @   0.5659 msec (  1770.0/sec): TCP-based SunRPC to negate an integer
   8800 reps @   0.5647 msec (  1770.0/sec): TCP-based SunRPC to negate an integer
  44000 trep @   0.5657 msec (  1770.0/sec): TCP-based SunRPC to negate an integer

   7600 reps @   0.6537 msec (  1530.0/sec): UDP-based SunRPC to negate an integer
   7600 reps @   0.6555 msec (  1530.0/sec): UDP-based SunRPC to negate an integer
   7600 reps @   0.6547 msec (  1530.0/sec): UDP-based SunRPC to negate an integer
   7600 reps @   0.6553 msec (  1530.0/sec): UDP-based SunRPC to negate an integer
   7600 reps @   0.6547 msec (  1530.0/sec): UDP-based SunRPC to negate an integer
  38000 trep @   0.6548 msec (  1530.0/sec): UDP-based SunRPC to negate an integer

   8800 reps @   0.5610 msec (  1780.0/sec): TCP-based SunRPC no-op
   8800 reps @   0.5598 msec (  1790.0/sec): TCP-based SunRPC no-op
   8800 reps @   0.5592 msec (  1790.0/sec): TCP-based SunRPC no-op
   8800 reps @   0.5598 msec (  1790.0/sec): TCP-based SunRPC no-op
   8800 reps @   0.5592 msec (  1790.0/sec): TCP-based SunRPC no-op
  44000 trep @   0.5598 msec (  1790.0/sec): TCP-based SunRPC no-op

   8000 reps @   0.6221 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6221 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6210 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6211 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6211 msec (  1610.0/sec): UDP-based SunRPC no-op
  40000 trep @   0.6215 msec (  1610.0/sec): UDP-based SunRPC no-op

1219500 reps @   0.0039 msec (257000.0/sec): getpid system call
1219500 reps @   0.0039 msec (257000.0/sec): getpid system call
1219500 reps @   0.0039 msec (257000.0/sec): getpid system call
1219500 reps @   0.0039 msec (257000.0/sec): getpid system call
1219500 reps @   0.0039 msec (257000.0/sec): getpid system call
6097500 trep @   0.0039 msec (257000.0/sec): getpid system call

 164000 reps @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 164000 reps @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 164000 reps @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 164000 reps @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 164000 reps @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 820000 trep @   0.0289 msec ( 34600.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 760000 reps @   0.0062 msec (162000.0/sec): gettimeofday system call
 760000 reps @   0.0062 msec (162000.0/sec): gettimeofday system call
 760000 reps @   0.0062 msec (162000.0/sec): gettimeofday system call
 760000 reps @   0.0062 msec (162000.0/sec): gettimeofday system call
 760000 reps @   0.0062 msec (162000.0/sec): gettimeofday system call
3800000 trep @   0.0062 msec (162000.0/sec): gettimeofday system call

    200 reps @  24.8746 msec (    40.2/sec): fork, child immediately exits, parent waits
    200 reps @  24.8196 msec (    40.3/sec): fork, child immediately exits, parent waits
    200 reps @  24.7292 msec (    40.4/sec): fork, child immediately exits, parent waits
    200 reps @  24.7093 msec (    40.5/sec): fork, child immediately exits, parent waits
    200 reps @  24.6065 msec (    40.6/sec): fork, child immediately exits, parent waits
   1000 trep @  24.7478 msec (    40.4/sec): fork, child immediately exits, parent waits

      5 reps @ 1009.8556 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.8446 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.8496 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.8420 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.8498 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1009.8483 msec (    0.99/sec): sleep for one second (validates test time)

 596300 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
 596300 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
 596300 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
 596300 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
 596300 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
2981500 trep @   0.0079 msec (127000.0/sec): select on no fds with no timeout

 196700 reps @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout
 196700 reps @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout
 196700 reps @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout
 196700 reps @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout
 196700 reps @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout
 983500 trep @   0.0254 msec ( 39300.0/sec): select on 16 pipe read fds with immediate timeout

 108600 reps @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout
 108600 reps @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout
 108600 reps @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout
 108600 reps @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout
 108600 reps @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout
 543000 trep @   0.0438 msec ( 22800.0/sec): select on 32 pipe read fds with immediate timeout

 200600 reps @   0.0249 msec ( 40100.0/sec): select on 16 pipe write fds with immediate timeout
 200600 reps @   0.0249 msec ( 40100.0/sec): select on 16 pipe write fds with immediate timeout
 200600 reps @   0.0249 msec ( 40200.0/sec): select on 16 pipe write fds with immediate timeout
 200600 reps @   0.0249 msec ( 40200.0/sec): select on 16 pipe write fds with immediate timeout
 200600 reps @   0.0249 msec ( 40200.0/sec): select on 16 pipe write fds with immediate timeout
1003000 trep @   0.0249 msec ( 40200.0/sec): select on 16 pipe write fds with immediate timeout

 199600 reps @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout
 199600 reps @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout
 199600 reps @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout
 199600 reps @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout
 199600 reps @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout
 998000 trep @   0.0251 msec ( 39900.0/sec): select on 32 pipe write fds with immediate timeout

  27400 reps @   0.1736 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27400 reps @   0.1736 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27400 reps @   0.1737 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27400 reps @   0.1736 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  27400 reps @   0.1735 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 137000 trep @   0.1736 msec (  5760.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    110 reps @  48.6666 msec (    20.5/sec): popen and read from "/bin/echo hello"
    110 reps @  48.5151 msec (    20.6/sec): popen and read from "/bin/echo hello"
    110 reps @  47.4369 msec (    21.1/sec): popen and read from "/bin/echo hello"
    110 reps @  47.2208 msec (    21.2/sec): popen and read from "/bin/echo hello"
    110 reps @  47.3616 msec (    21.1/sec): popen and read from "/bin/echo hello"
    550 trep @  47.8402 msec (    20.9/sec): popen and read from "/bin/echo hello"

  27750 reps @   0.1788 msec (  5590.0/sec): mmap megabyte /dev/zero region 
  27750 reps @   0.1789 msec (  5590.0/sec): mmap megabyte /dev/zero region 
  27750 reps @   0.1791 msec (  5580.0/sec): mmap megabyte /dev/zero region 
  27750 reps @   0.1790 msec (  5590.0/sec): mmap megabyte /dev/zero region 
  27750 reps @   0.1790 msec (  5590.0/sec): mmap megabyte /dev/zero region 
 138750 trep @   0.1790 msec (  5590.0/sec): mmap megabyte /dev/zero region 

    384 reps @  13.1492 msec (    76.1/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    384 reps @  13.1309 msec (    76.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    384 reps @  13.1365 msec (    76.1/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    384 reps @  13.1292 msec (    76.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    384 reps @  13.1217 msec (    76.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1920 trep @  13.1335 msec (    76.1/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    230 reps @  21.6942 msec (    46.1/sec): copy every byte of newly mmaped megabyte file
    230 reps @  21.8061 msec (    45.9/sec): copy every byte of newly mmaped megabyte file
    230 reps @  21.8615 msec (    45.7/sec): copy every byte of newly mmaped megabyte file
    230 reps @  21.8457 msec (    45.8/sec): copy every byte of newly mmaped megabyte file
    230 reps @  21.8358 msec (    45.8/sec): copy every byte of newly mmaped megabyte file
   1150 trep @  21.8087 msec (    45.9/sec): copy every byte of newly mmaped megabyte file

     32 reps @ 129.6062 msec (    7.72/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 129.7724 msec (    7.71/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 129.7918 msec (    7.70/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 129.6557 msec (    7.71/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 129.7607 msec (    7.71/sec): compress & uncompress 52 kilobyte text file of numbers
    160 trep @ 129.7174 msec (    7.71/sec): compress & uncompress 52 kilobyte text file of numbers

      5 reps @ 303.2364 msec (    3.30/sec): compile ANSI C `hello world' with no special options
      5 reps @ 302.8754 msec (    3.30/sec): compile ANSI C `hello world' with no special options
      5 reps @ 303.0870 msec (    3.30/sec): compile ANSI C `hello world' with no special options
      5 reps @ 305.0796 msec (    3.28/sec): compile ANSI C `hello world' with no special options
      5 reps @ 296.7028 msec (    3.37/sec): compile ANSI C `hello world' with no special options
     25 trep @ 302.1962 msec (    3.31/sec): compile ANSI C `hello world' with no special options

     15 reps @ 772.5349 msec (    1.29/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 737.2133 msec (    1.36/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 750.5457 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 772.7160 msec (    1.29/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 738.3753 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     75 trep @ 754.2770 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

      8 reps @ 823.4913 msec (    1.21/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 708.7706 msec (    1.41/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 743.6070 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 749.8621 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 749.8608 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     40 trep @ 755.1183 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

      8 reps @ 703.6631 msec (    1.42/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 749.8621 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 748.6011 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 751.1213 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 751.1075 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 trep @ 740.8710 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

      8 reps @ 739.8951 msec (    1.35/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 806.1059 msec (    1.24/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 604.5669 msec (    1.65/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 863.9351 msec (    1.16/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
      8 reps @ 776.4473 msec (    1.29/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     40 trep @ 758.1901 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     12 reps @ 719.8494 msec (    1.39/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 789.0299 msec (    1.27/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 747.3813 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 745.7149 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     12 reps @ 755.0926 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     60 trep @ 751.4136 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 754.2773 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 747.3787 msec (    1.34/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 751.1335 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 754.2592 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 759.2877 msec (    1.32/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 753.2673 msec (    1.33/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      3 reps @ 1783.3983 msec (    0.56/sec): use dc to output first 1,000 factorials
      3 reps @ 1785.4003 msec (    0.56/sec): use dc to output first 1,000 factorials
      3 reps @ 1783.2957 msec (    0.56/sec): use dc to output first 1,000 factorials
      3 reps @ 1784.7213 msec (    0.56/sec): use dc to output first 1,000 factorials
      3 reps @ 1784.4673 msec (    0.56/sec): use dc to output first 1,000 factorials
     15 trep @ 1784.2566 msec (    0.56/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0056 msec (178000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  47172 reps @   0.1003 msec (  9970.0/sec): use regcomp to compile 51 char literal, then regfree
  47172 reps @   0.1003 msec (  9970.0/sec): use regcomp to compile 51 char literal, then regfree
  47172 reps @   0.1004 msec (  9960.0/sec): use regcomp to compile 51 char literal, then regfree
  47172 reps @   0.1003 msec (  9970.0/sec): use regcomp to compile 51 char literal, then regfree
  47172 reps @   0.1003 msec (  9970.0/sec): use regcomp to compile 51 char literal, then regfree
 235860 trep @   0.1003 msec (  9970.0/sec): use regcomp to compile 51 char literal, then regfree

      3 reps @ 1865.8983 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 1865.0597 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 1865.7337 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 1865.6110 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 1864.9090 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text
     15 trep @ 1865.4423 msec (    0.54/sec): use regexec with 51 char literal to search 142 kilobyte text

  61368 reps @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree
  61368 reps @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree
  61368 reps @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree
  61368 reps @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree
  61368 reps @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree
 306840 trep @   0.0760 msec ( 13200.0/sec): use regcomp to compile long .* pattern, then regfree

      6 reps @ 947.8978 msec (    1.05/sec): use regexec with long .* pattern to search 142 kilobyte text
      6 reps @ 948.5310 msec (    1.05/sec): use regexec with long .* pattern to search 142 kilobyte text
      6 reps @ 948.5997 msec (    1.05/sec): use regexec with long .* pattern to search 142 kilobyte text
      6 reps @ 947.8605 msec (    1.06/sec): use regexec with long .* pattern to search 142 kilobyte text
      6 reps @ 947.7698 msec (    1.06/sec): use regexec with long .* pattern to search 142 kilobyte text
     30 trep @ 948.1318 msec (    1.05/sec): use regexec with long .* pattern to search 142 kilobyte text

