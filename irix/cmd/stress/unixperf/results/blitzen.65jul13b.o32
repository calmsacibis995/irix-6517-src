UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.5-ALPHA-1273972131
Compiler version: unknown
Instruction set: MIPS 2
Application binary interface: O32
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
CPU: MIPS R4400 Processor Chip Revision: 5.0
4 150 MHZ IP19 Processors
Main memory size: 512 Mbytes, 2-way interleaved
Instruction cache size: 16 Kbytes
Data cache size: 16 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 1 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 10 on SCSI controller 1
Integral EPC serial ports: 4
Integral EPC parallel port: Ebus slot 3
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
I/O board, Ebus slot 3: IO4 revision 1
VME bus: adapter 13
VME bus: adapter 0 mapped to adapter 13
EPC external interrupts
Uptime: 58 mins
Users: 1
Load average: 1.02, 2.63, 2.49
File IO test directory: /usr/tmp
File IO test filesystem: xfs (2105.14 MB total, 240.32 MB available)
Date: Mon Jul 21 00:24:26 1997

1192632 reps @   0.0042 msec (239000.0/sec): 4 by 4 double matrix multiply
1192632 reps @   0.0042 msec (240000.0/sec): 4 by 4 double matrix multiply
1192632 reps @   0.0042 msec (240000.0/sec): 4 by 4 double matrix multiply
1192632 reps @   0.0042 msec (239000.0/sec): 4 by 4 double matrix multiply
1192632 reps @   0.0042 msec (239000.0/sec): 4 by 4 double matrix multiply
5963160 trep @   0.0042 msec (239000.0/sec): 4 by 4 double matrix multiply

1357800 reps @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply
1357800 reps @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply
1357800 reps @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply
1357800 reps @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply
1357800 reps @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply
6789000 trep @   0.0037 msec (269000.0/sec): 4 by 4 float matrix multiply

 592000 reps @   0.0084 msec (118000.0/sec): recurse 250 simple function calls and return
 592000 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 592000 reps @   0.0085 msec (118000.0/sec): recurse 250 simple function calls and return
 592000 reps @   0.0084 msec (118000.0/sec): recurse 250 simple function calls and return
 592000 reps @   0.0084 msec (118000.0/sec): recurse 250 simple function calls and return
2960000 trep @   0.0084 msec (118000.0/sec): recurse 250 simple function calls and return

3198400 reps @   0.0016 msec (640000.0/sec): bcopy of 256 bytes
3198400 reps @   0.0016 msec (640000.0/sec): bcopy of 256 bytes
3198400 reps @   0.0016 msec (640000.0/sec): bcopy of 256 bytes
3198400 reps @   0.0016 msec (640000.0/sec): bcopy of 256 bytes
3198400 reps @   0.0016 msec (640000.0/sec): bcopy of 256 bytes
15992000 trep @   0.0016 msec (640000.0/sec): bcopy of 256 bytes

  39120 reps @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes
  39120 reps @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes
 195600 trep @   0.1267 msec (  7890.0/sec): bcopy of 16 kilobytes

   4012 reps @   1.2428 msec (   805.0/sec): bcopy of 100 kilobytes
   4012 reps @   1.2428 msec (   805.0/sec): bcopy of 100 kilobytes
   4012 reps @   1.2428 msec (   805.0/sec): bcopy of 100 kilobytes
   4012 reps @   1.2429 msec (   805.0/sec): bcopy of 100 kilobytes
   4012 reps @   1.2428 msec (   805.0/sec): bcopy of 100 kilobytes
  20060 trep @   1.2428 msec (   805.0/sec): bcopy of 100 kilobytes

     80 reps @  58.3011 msec (    17.2/sec): bcopy of 1 megabyte
     80 reps @  58.3497 msec (    17.1/sec): bcopy of 1 megabyte
     80 reps @  58.3876 msec (    17.1/sec): bcopy of 1 megabyte
     80 reps @  58.3351 msec (    17.1/sec): bcopy of 1 megabyte
     80 reps @  58.2774 msec (    17.2/sec): bcopy of 1 megabyte
    400 trep @  58.3302 msec (    17.1/sec): bcopy of 1 megabyte

      8 reps @ 666.5085 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 666.4612 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 666.4483 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 666.4892 msec (    1.50/sec): bcopy of 10 megabytes
      8 reps @ 666.4734 msec (    1.50/sec): bcopy of 10 megabytes
     40 trep @ 666.4761 msec (    1.50/sec): bcopy of 10 megabytes

     20 reps @ 299.5720 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.6789 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.8875 msec (    3.33/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.6870 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 299.7339 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 299.7119 msec (    3.34/sec): bcopy of 10 megabytes (cacheline-aligned)

     12 reps @ 422.8294 msec (    2.37/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 422.6669 msec (    2.37/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 422.8430 msec (    2.36/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 423.0462 msec (    2.36/sec): bcopy of 10 megabytes (word mis-aligned)
     12 reps @ 422.8153 msec (    2.37/sec): bcopy of 10 megabytes (word mis-aligned)
     60 trep @ 422.8402 msec (    2.36/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 405.7849 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.6631 msec (    2.47/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.6911 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.7010 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 405.7721 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 405.7225 msec (    2.46/sec): bcopy of 10 megabytes (dword mis-aligned)

5133200 reps @   0.0010 msec (1030000.0/sec): bzero of 256 bytes
5133200 reps @   0.0010 msec (1030000.0/sec): bzero of 256 bytes
5133200 reps @   0.0010 msec (1030000.0/sec): bzero of 256 bytes
5133200 reps @   0.0010 msec (1030000.0/sec): bzero of 256 bytes
5133200 reps @   0.0010 msec (1030000.0/sec): bzero of 256 bytes
25666000 trep @   0.0010 msec (1030000.0/sec): bzero of 256 bytes

  48120 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
  48120 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
  48120 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
  48120 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
  48120 reps @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes
 240600 trep @   0.1037 msec (  9640.0/sec): bzero of 16 kilobytes

   7512 reps @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes
   7512 reps @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes
   7512 reps @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes
   7512 reps @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes
   7512 reps @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes
  37560 trep @   0.6642 msec (  1510.0/sec): bzero of 100 kilobytes

    324 reps @  15.7949 msec (    63.3/sec): bzero of 1 megabyte
    324 reps @  15.7935 msec (    63.3/sec): bzero of 1 megabyte
    324 reps @  15.7957 msec (    63.3/sec): bzero of 1 megabyte
    324 reps @  15.7951 msec (    63.3/sec): bzero of 1 megabyte
    324 reps @  15.7949 msec (    63.3/sec): bzero of 1 megabyte
   1620 trep @  15.7948 msec (    63.3/sec): bzero of 1 megabyte

     32 reps @ 158.3716 msec (    6.31/sec): bzero of 10 megabytes
     32 reps @ 158.3728 msec (    6.31/sec): bzero of 10 megabytes
     32 reps @ 158.3691 msec (    6.31/sec): bzero of 10 megabytes
     32 reps @ 158.3769 msec (    6.31/sec): bzero of 10 megabytes
     32 reps @ 158.3623 msec (    6.31/sec): bzero of 10 megabytes
    160 trep @ 158.3706 msec (    6.31/sec): bzero of 10 megabytes

     32 reps @ 158.3757 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 158.3649 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 158.3693 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 158.3733 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)
     32 reps @ 158.3757 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)
    160 trep @ 158.3718 msec (    6.31/sec): bzero of 10 megabytes (cacheline-aligned)

     32 reps @ 158.4329 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 158.4247 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 158.4372 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 158.4561 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)
     32 reps @ 158.4455 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)
    160 trep @ 158.4393 msec (    6.31/sec): bzero of 10 megabytes (word mis-aligned)

     32 reps @ 158.4217 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 158.4294 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 158.4369 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 158.4299 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)
     32 reps @ 158.4190 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)
    160 trep @ 158.4274 msec (    6.31/sec): bzero of 10 megabytes (dword mis-aligned)

   5387 reps @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers
   5387 reps @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers
   5387 reps @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers
   5387 reps @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers
   5387 reps @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers
  26935 trep @   0.9280 msec (  1080.0/sec): bcopy then qsort 400 32-bit integers

     83 reps @  60.2858 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.2856 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.2858 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.2858 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
     83 reps @  60.2852 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers
    415 trep @  60.2856 msec (    16.6/sec): bcopy then qsort 16,000 32-bit integers

     18 reps @ 286.0446 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.0562 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.0489 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.0561 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers
     18 reps @ 286.0504 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers
     90 trep @ 286.0513 msec (    3.50/sec): bcopy then qsort 64,000 32-bit integers

5000000 reps @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
5000000 reps @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
5000000 reps @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
5000000 reps @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
5000000 reps @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25000000 trep @   0.0010 msec (1000000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

3665000 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3665000 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3665000 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3665000 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
3665000 reps @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)
18325000 trep @   0.0014 msec (734000.0/sec): basic double trigonometric function (sin/cos/tan)

 888500 reps @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 888500 reps @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 888500 reps @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 888500 reps @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 888500 reps @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4442500 trep @   0.0056 msec (178000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  11700 reps @   0.4382 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11700 reps @   0.4381 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11700 reps @   0.4381 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11700 reps @   0.4381 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  11700 reps @   0.4381 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)
  58500 trep @   0.4381 msec (  2280.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  14.0336 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0337 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0341 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0336 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  14.0336 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  14.0337 msec (    71.3/sec): Tower of Hanoi recursion test (15 deep)

 227000 reps @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 227000 reps @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 227000 reps @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 227000 reps @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 227000 reps @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1135000 trep @   0.0220 msec ( 45400.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  50000 reps @   0.1020 msec (  9800.0/sec): write 80 bytes to a log file
  50000 reps @   0.1029 msec (  9720.0/sec): write 80 bytes to a log file
  50000 reps @   0.1033 msec (  9680.0/sec): write 80 bytes to a log file
  50000 reps @   0.1067 msec (  9370.0/sec): write 80 bytes to a log file
  50000 reps @   0.1059 msec (  9440.0/sec): write 80 bytes to a log file
 250000 trep @   0.1042 msec (  9600.0/sec): write 80 bytes to a log file

    900 reps @   4.6880 msec (   213.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   4.5830 msec (   218.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   4.7805 msec (   209.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   4.6664 msec (   214.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   4.5410 msec (   220.0/sec): per-file cost of creating 100 files then unlinking them all
   4500 trep @   4.6518 msec (   215.0/sec): per-file cost of creating 100 files then unlinking them all

  16100 reps @   0.3126 msec (  3200.0/sec): per-file cost of open and immediate close of 100 files
  16100 reps @   0.3152 msec (  3170.0/sec): per-file cost of open and immediate close of 100 files
  16100 reps @   0.3151 msec (  3170.0/sec): per-file cost of open and immediate close of 100 files
  16100 reps @   0.3147 msec (  3180.0/sec): per-file cost of open and immediate close of 100 files
  16100 reps @   0.3137 msec (  3190.0/sec): per-file cost of open and immediate close of 100 files
  80500 trep @   0.3143 msec (  3180.0/sec): per-file cost of open and immediate close of 100 files

  27000 reps @   0.1986 msec (  5040.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1868 msec (  5350.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1901 msec (  5260.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1872 msec (  5340.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  27000 reps @   0.1878 msec (  5320.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 135000 trep @   0.1901 msec (  5260.0/sec): per-chmod cost of chmod permissions toggle of 100 files

  75000 reps @   0.0667 msec ( 15000.0/sec): cost of stat'ing current dir
  75000 reps @   0.0668 msec ( 15000.0/sec): cost of stat'ing current dir
  75000 reps @   0.0694 msec ( 14400.0/sec): cost of stat'ing current dir
  75000 reps @   0.0708 msec ( 14100.0/sec): cost of stat'ing current dir
  75000 reps @   0.0708 msec ( 14100.0/sec): cost of stat'ing current dir
 375000 trep @   0.0689 msec ( 14500.0/sec): cost of stat'ing current dir

  21500 reps @   0.2358 msec (  4240.0/sec): cost of stat'ing 5 component path
  21500 reps @   0.2359 msec (  4240.0/sec): cost of stat'ing 5 component path
  21500 reps @   0.2359 msec (  4240.0/sec): cost of stat'ing 5 component path
  21500 reps @   0.2367 msec (  4230.0/sec): cost of stat'ing 5 component path
  21500 reps @   0.2370 msec (  4220.0/sec): cost of stat'ing 5 component path
 107500 trep @   0.2362 msec (  4230.0/sec): cost of stat'ing 5 component path

    520 reps @   9.6185 msec (   104.0/sec): open directory and stat 100 files in it
    520 reps @   9.6209 msec (   104.0/sec): open directory and stat 100 files in it
    520 reps @   9.6186 msec (   104.0/sec): open directory and stat 100 files in it
    520 reps @   9.6184 msec (   104.0/sec): open directory and stat 100 files in it
    520 reps @   9.6384 msec (   104.0/sec): open directory and stat 100 files in it
   2600 trep @   9.6229 msec (   104.0/sec): open directory and stat 100 files in it

   1200 reps @   5.3031 msec (   189.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.7251 msec (   212.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.5507 msec (   220.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.4821 msec (   223.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   4.5394 msec (   220.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   6000 trep @   4.7201 msec (   212.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 122400 reps @   0.0409 msec ( 24500.0/sec): ndbm lookup into database with 900 entries
 122400 reps @   0.0409 msec ( 24400.0/sec): ndbm lookup into database with 900 entries
 122400 reps @   0.0404 msec ( 24700.0/sec): ndbm lookup into database with 900 entries
 122400 reps @   0.0404 msec ( 24700.0/sec): ndbm lookup into database with 900 entries
 122400 reps @   0.0404 msec ( 24700.0/sec): ndbm lookup into database with 900 entries
 612000 trep @   0.0406 msec ( 24600.0/sec): ndbm lookup into database with 900 entries

  31600 reps @   0.1566 msec (  6390.0/sec): 1 byte token passing between two processes using two pipes
  31600 reps @   0.1556 msec (  6430.0/sec): 1 byte token passing between two processes using two pipes
  31600 reps @   0.1540 msec (  6490.0/sec): 1 byte token passing between two processes using two pipes
  31600 reps @   0.1540 msec (  6490.0/sec): 1 byte token passing between two processes using two pipes
  31600 reps @   0.1536 msec (  6510.0/sec): 1 byte token passing between two processes using two pipes
 158000 trep @   0.1547 msec (  6460.0/sec): 1 byte token passing between two processes using two pipes

  22000 reps @   0.2318 msec (  4310.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2338 msec (  4280.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2335 msec (  4280.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2353 msec (  4250.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2330 msec (  4290.0/sec): 1 kilobyte token passing between two processes using two pipes
 110000 trep @   0.2335 msec (  4280.0/sec): 1 kilobyte token passing between two processes using two pipes

7180000 reps @   0.0007 msec (1430000.0/sec): setjmp/longjmp
7180000 reps @   0.0007 msec (1430000.0/sec): setjmp/longjmp
7180000 reps @   0.0007 msec (1440000.0/sec): setjmp/longjmp
7180000 reps @   0.0007 msec (1450000.0/sec): setjmp/longjmp
7180000 reps @   0.0007 msec (1450000.0/sec): setjmp/longjmp
35900000 trep @   0.0007 msec (1440000.0/sec): setjmp/longjmp

  52000 reps @   0.0980 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  52000 reps @   0.0980 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  52000 reps @   0.0980 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  52000 reps @   0.0980 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  52000 reps @   0.0979 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 260000 trep @   0.0980 msec ( 10200.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    925 reps @   5.1567 msec (   194.0/sec): create/destroy client UDP-based SunRPC handle
    925 reps @   5.3573 msec (   187.0/sec): create/destroy client UDP-based SunRPC handle
    925 reps @   5.2069 msec (   192.0/sec): create/destroy client UDP-based SunRPC handle
    925 reps @   5.3796 msec (   186.0/sec): create/destroy client UDP-based SunRPC handle
    925 reps @   5.2619 msec (   190.0/sec): create/destroy client UDP-based SunRPC handle
   4625 trep @   5.2725 msec (   190.0/sec): create/destroy client UDP-based SunRPC handle

   6400 reps @   0.7866 msec (  1270.0/sec): TCP-based SunRPC to negate an integer
   6400 reps @   0.8026 msec (  1250.0/sec): TCP-based SunRPC to negate an integer
   6400 reps @   0.7933 msec (  1260.0/sec): TCP-based SunRPC to negate an integer
   6400 reps @   0.7870 msec (  1270.0/sec): TCP-based SunRPC to negate an integer
   6400 reps @   0.7923 msec (  1260.0/sec): TCP-based SunRPC to negate an integer
  32000 trep @   0.7924 msec (  1260.0/sec): TCP-based SunRPC to negate an integer

   8000 reps @   0.6286 msec (  1590.0/sec): UDP-based SunRPC to negate an integer
   8000 reps @   0.6254 msec (  1600.0/sec): UDP-based SunRPC to negate an integer
   8000 reps @   0.6301 msec (  1590.0/sec): UDP-based SunRPC to negate an integer
   8000 reps @   0.6307 msec (  1590.0/sec): UDP-based SunRPC to negate an integer
   8000 reps @   0.6278 msec (  1590.0/sec): UDP-based SunRPC to negate an integer
  40000 trep @   0.6285 msec (  1590.0/sec): UDP-based SunRPC to negate an integer

   6800 reps @   0.7300 msec (  1370.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7350 msec (  1360.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7247 msec (  1380.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7313 msec (  1370.0/sec): TCP-based SunRPC no-op
   6800 reps @   0.7265 msec (  1380.0/sec): TCP-based SunRPC no-op
  34000 trep @   0.7295 msec (  1370.0/sec): TCP-based SunRPC no-op

   8000 reps @   0.6197 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6205 msec (  1610.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6165 msec (  1620.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6269 msec (  1600.0/sec): UDP-based SunRPC no-op
   8000 reps @   0.6251 msec (  1600.0/sec): UDP-based SunRPC no-op
  40000 trep @   0.6217 msec (  1610.0/sec): UDP-based SunRPC no-op

1009000 reps @   0.0049 msec (202000.0/sec): getpid system call
1009000 reps @   0.0049 msec (202000.0/sec): getpid system call
1009000 reps @   0.0049 msec (202000.0/sec): getpid system call
1009000 reps @   0.0049 msec (202000.0/sec): getpid system call
1009000 reps @   0.0049 msec (202000.0/sec): getpid system call
5045000 trep @   0.0049 msec (202000.0/sec): getpid system call

  89000 reps @   0.0565 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
  89000 reps @   0.0564 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
  89000 reps @   0.0565 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
  89000 reps @   0.0564 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
  89000 reps @   0.0564 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 445000 trep @   0.0564 msec ( 17700.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 468000 reps @   0.0107 msec ( 93600.0/sec): gettimeofday system call
 468000 reps @   0.0107 msec ( 93600.0/sec): gettimeofday system call
 468000 reps @   0.0107 msec ( 93600.0/sec): gettimeofday system call
 468000 reps @   0.0107 msec ( 93600.0/sec): gettimeofday system call
 468000 reps @   0.0107 msec ( 93600.0/sec): gettimeofday system call
2340000 trep @   0.0107 msec ( 93600.0/sec): gettimeofday system call

    300 reps @  19.4505 msec (    51.4/sec): fork, child immediately exits, parent waits
    300 reps @  19.4375 msec (    51.4/sec): fork, child immediately exits, parent waits
    300 reps @  19.5154 msec (    51.2/sec): fork, child immediately exits, parent waits
    300 reps @  19.4572 msec (    51.4/sec): fork, child immediately exits, parent waits
    300 reps @  19.3193 msec (    51.8/sec): fork, child immediately exits, parent waits
   1500 trep @  19.4360 msec (    51.5/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.9778 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9626 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9626 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9642 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9626 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.9660 msec (    0.99/sec): sleep for one second (validates test time)

 128600 reps @   0.0383 msec ( 26100.0/sec): select on no fds with no timeout
 128600 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 128600 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 128600 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 128600 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 643000 trep @   0.0380 msec ( 26300.0/sec): select on no fds with no timeout

  53200 reps @   0.0940 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout
  53200 reps @   0.0940 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout
  53200 reps @   0.0939 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout
  53200 reps @   0.0939 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout
  53200 reps @   0.0939 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout
 266000 trep @   0.0940 msec ( 10600.0/sec): select on 16 pipe read fds with immediate timeout

  31700 reps @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout
  31700 reps @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout
  31700 reps @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout
  31700 reps @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout
  31700 reps @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout
 158500 trep @   0.1578 msec (  6340.0/sec): select on 32 pipe read fds with immediate timeout

  46300 reps @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout
  46300 reps @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout
  46300 reps @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout
  46300 reps @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout
  46300 reps @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout
 231500 trep @   0.1081 msec (  9250.0/sec): select on 16 pipe write fds with immediate timeout

  46300 reps @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout
  46300 reps @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout
  46300 reps @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout
  46300 reps @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout
  46300 reps @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout
 231500 trep @   0.1082 msec (  9250.0/sec): select on 32 pipe write fds with immediate timeout

   9000 reps @   0.5609 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9000 reps @   0.5610 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9000 reps @   0.5610 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9000 reps @   0.5610 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9000 reps @   0.5610 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  45000 trep @   0.5610 msec (  1780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    100 reps @  53.0949 msec (    18.8/sec): popen and read from "/bin/echo hello"
    100 reps @  53.0665 msec (    18.8/sec): popen and read from "/bin/echo hello"
    100 reps @  53.0803 msec (    18.8/sec): popen and read from "/bin/echo hello"
    100 reps @  52.9128 msec (    18.9/sec): popen and read from "/bin/echo hello"
    100 reps @  53.0892 msec (    18.8/sec): popen and read from "/bin/echo hello"
    500 trep @  53.0487 msec (    18.9/sec): popen and read from "/bin/echo hello"

  15600 reps @   0.3171 msec (  3150.0/sec): mmap megabyte /dev/zero region 
  15600 reps @   0.3164 msec (  3160.0/sec): mmap megabyte /dev/zero region 
  15600 reps @   0.3164 msec (  3160.0/sec): mmap megabyte /dev/zero region 
  15600 reps @   0.3164 msec (  3160.0/sec): mmap megabyte /dev/zero region 
  15600 reps @   0.3164 msec (  3160.0/sec): mmap megabyte /dev/zero region 
  78000 trep @   0.3165 msec (  3160.0/sec): mmap megabyte /dev/zero region 

    218 reps @  23.0529 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.0570 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.0510 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.0512 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.0467 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1090 trep @  23.0518 msec (    43.4/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    312 reps @  16.0494 msec (    62.3/sec): copy every byte of newly mmaped megabyte file
    312 reps @  16.0878 msec (    62.2/sec): copy every byte of newly mmaped megabyte file
    312 reps @  16.4575 msec (    60.8/sec): copy every byte of newly mmaped megabyte file
    312 reps @  16.6473 msec (    60.1/sec): copy every byte of newly mmaped megabyte file
    312 reps @  16.6489 msec (    60.1/sec): copy every byte of newly mmaped megabyte file
   1560 trep @  16.3782 msec (    61.1/sec): copy every byte of newly mmaped megabyte file

     27 reps @ 191.0191 msec (    5.24/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 190.2837 msec (    5.26/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 190.1704 msec (    5.26/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 190.4775 msec (    5.25/sec): compress & uncompress 52 kilobyte text file of numbers
     27 reps @ 196.7948 msec (    5.08/sec): compress & uncompress 52 kilobyte text file of numbers
    135 trep @ 191.7491 msec (    5.22/sec): compress & uncompress 52 kilobyte text file of numbers

      9 reps @ 641.9252 msec (    1.56/sec): compile ANSI C `hello world' with no special options
      9 reps @ 635.5416 msec (    1.57/sec): compile ANSI C `hello world' with no special options
      9 reps @ 646.3281 msec (    1.55/sec): compile ANSI C `hello world' with no special options
      9 reps @ 635.0430 msec (    1.57/sec): compile ANSI C `hello world' with no special options
      9 reps @ 646.1457 msec (    1.55/sec): compile ANSI C `hello world' with no special options
     45 trep @ 640.9967 msec (    1.56/sec): compile ANSI C `hello world' with no special options

     19 reps @ 264.2087 msec (    3.78/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     19 reps @ 261.7616 msec (    3.82/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     19 reps @ 334.4923 msec (    2.99/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     19 reps @ 264.9569 msec (    3.77/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     19 reps @ 261.3339 msec (    3.83/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     95 trep @ 277.3507 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     14 reps @ 249.9643 msec (    4.00/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 235.6439 msec (    4.24/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 337.3181 msec (    2.96/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 247.8506 msec (    4.03/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 240.6232 msec (    4.16/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     70 trep @ 262.2800 msec (    3.81/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     12 reps @ 192.1999 msec (    5.20/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 360.2437 msec (    2.78/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 190.7019 msec (    5.24/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 360.7813 msec (    2.77/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 188.3111 msec (    5.31/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     60 trep @ 258.4476 msec (    3.87/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 274.2143 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 276.4978 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 279.5747 msec (    3.58/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 280.2179 msec (    3.57/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 277.8256 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 277.6661 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 277.3134 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 276.6571 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 272.5117 msec (    3.67/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 282.4748 msec (    3.54/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 244.9841 msec (    4.08/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 270.7882 msec (    3.69/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 267.5895 msec (    3.74/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 282.1178 msec (    3.54/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 276.8581 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 273.1414 msec (    3.66/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 273.0924 msec (    3.66/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 274.5598 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 3560.5785 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3691.9350 msec (    0.27/sec): use dc to output first 1,000 factorials
      2 reps @ 3762.3445 msec (    0.27/sec): use dc to output first 1,000 factorials
      2 reps @ 3523.6830 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3607.5185 msec (    0.28/sec): use dc to output first 1,000 factorials
     10 trep @ 3629.2119 msec (    0.28/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0101 msec ( 98700.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0101 msec ( 98800.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0103 msec ( 96800.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0103 msec ( 97000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0103 msec ( 97000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0102 msec ( 97700.0/sec): Connect 4 game boards evaluated during alpha-beta search

  23732 reps @   0.2111 msec (  4740.0/sec): use regcomp to compile 51 char literal, then regfree
  23732 reps @   0.2111 msec (  4740.0/sec): use regcomp to compile 51 char literal, then regfree
  23732 reps @   0.2115 msec (  4730.0/sec): use regcomp to compile 51 char literal, then regfree
  23732 reps @   0.2111 msec (  4740.0/sec): use regcomp to compile 51 char literal, then regfree
  23732 reps @   0.2111 msec (  4740.0/sec): use regcomp to compile 51 char literal, then regfree
 118660 trep @   0.2112 msec (  4740.0/sec): use regcomp to compile 51 char literal, then regfree

      2 reps @ 3746.0180 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3746.4380 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3745.3110 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3750.9050 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3745.3675 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text
     10 trep @ 3746.8079 msec (    0.27/sec): use regexec with 51 char literal to search 142 kilobyte text

  30324 reps @   0.1635 msec (  6120.0/sec): use regcomp to compile long .* pattern, then regfree
  30324 reps @   0.1635 msec (  6110.0/sec): use regcomp to compile long .* pattern, then regfree
  30324 reps @   0.1635 msec (  6120.0/sec): use regcomp to compile long .* pattern, then regfree
  30324 reps @   0.1635 msec (  6120.0/sec): use regcomp to compile long .* pattern, then regfree
  30324 reps @   0.1635 msec (  6120.0/sec): use regcomp to compile long .* pattern, then regfree
 151620 trep @   0.1635 msec (  6120.0/sec): use regcomp to compile long .* pattern, then regfree

      3 reps @ 1979.2223 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1979.0910 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1979.4587 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1978.9400 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1978.9800 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text
     15 trep @ 1979.1384 msec (    0.51/sec): use regexec with long .* pattern to search 142 kilobyte text

