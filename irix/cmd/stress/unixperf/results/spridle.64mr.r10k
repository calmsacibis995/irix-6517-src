UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: spridle
Operating system: IRIX64 6.4
Compiler version: 7.1
Instruction set: MIPS 4
Application binary interface: N32
2 195 MHZ IP30 Processors
CPU: MIPS R10000 Processor Chip Revision: 2.6
FPU: MIPS R10010 Floating Point Chip Revision: 0.0
Main memory size: 128 Mbytes
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version QL1040B
  Disk drive: unit 1 on SCSI controller 0
Integral SCSI controller 1: Version QL1040B
IOC3 serial port: tty1
IOC3 serial port: tty2
IOC3 parallel port: plp1
Graphics board: MXI
Integral Fast Ethernet: ef0, version 1
Iris Audio Processor: version RAD revision 12.0, number 1
Uptime:  4:40
Users: 2
Load average: 1.30, 3.18, 2.54
File IO test directory: /usr/tmp
File IO test filesystem: xfs (4205.63 MB total, 1369.51 MB available)
Date: Tue Mar 18 07:40:28 1997

7753872 reps @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply
7753872 reps @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply
7753872 reps @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply
7753872 reps @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply
7753872 reps @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply
38769360 trep @   0.0006 msec (1560000.0/sec): 4 by 4 double matrix multiply

8067924 reps @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply
8067924 reps @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply
8067924 reps @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply
8067924 reps @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply
8067924 reps @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply
40339620 trep @   0.0006 msec (1610000.0/sec): 4 by 4 float matrix multiply

 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
 303500 reps @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return
1517500 trep @   0.0165 msec ( 60700.0/sec): recurse 250 simple function calls and return

9352800 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1900000.0/sec): bcopy of 256 bytes
9352800 reps @   0.0005 msec (1880000.0/sec): bcopy of 256 bytes
46764000 trep @   0.0005 msec (1890000.0/sec): bcopy of 256 bytes

 216240 reps @   0.0231 msec ( 43200.0/sec): bcopy of 16 kilobytes
 216240 reps @   0.0231 msec ( 43300.0/sec): bcopy of 16 kilobytes
 216240 reps @   0.0231 msec ( 43200.0/sec): bcopy of 16 kilobytes
 216240 reps @   0.0231 msec ( 43300.0/sec): bcopy of 16 kilobytes
 216240 reps @   0.0231 msec ( 43200.0/sec): bcopy of 16 kilobytes
1081200 trep @   0.0231 msec ( 43300.0/sec): bcopy of 16 kilobytes

  16876 reps @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes
  16876 reps @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes
  16876 reps @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes
  16876 reps @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes
  16876 reps @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes
  84380 trep @   0.2952 msec (  3390.0/sec): bcopy of 100 kilobytes

    644 reps @   7.7887 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7908 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7908 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7889 msec (   128.0/sec): bcopy of 1 megabyte
    644 reps @   7.7911 msec (   128.0/sec): bcopy of 1 megabyte
   3220 trep @   7.7901 msec (   128.0/sec): bcopy of 1 megabyte

     60 reps @  78.3025 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2755 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.3005 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2938 msec (    12.8/sec): bcopy of 10 megabytes
     60 reps @  78.2861 msec (    12.8/sec): bcopy of 10 megabytes
    300 trep @  78.2917 msec (    12.8/sec): bcopy of 10 megabytes

     68 reps @  76.7265 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7330 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7368 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7394 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
     68 reps @  76.7333 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)
    340 trep @  76.7338 msec (    13.0/sec): bcopy of 10 megabytes (cacheline-aligned)

     64 reps @  81.6510 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6515 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6602 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6519 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
     64 reps @  81.6597 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)
    320 trep @  81.6549 msec (    12.2/sec): bcopy of 10 megabytes (word mis-aligned)

     60 reps @  83.7990 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.8071 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.7989 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.8031 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  83.8092 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)
    300 trep @  83.8035 msec (    11.9/sec): bcopy of 10 megabytes (dword mis-aligned)

16203200 reps @   0.0003 msec (3240000.0/sec): bzero of 256 bytes
16203200 reps @   0.0003 msec (3240000.0/sec): bzero of 256 bytes
16203200 reps @   0.0003 msec (3240000.0/sec): bzero of 256 bytes
16203200 reps @   0.0003 msec (3240000.0/sec): bzero of 256 bytes
16203200 reps @   0.0003 msec (3240000.0/sec): bzero of 256 bytes
81016000 trep @   0.0003 msec (3240000.0/sec): bzero of 256 bytes

 349400 reps @   0.0143 msec ( 69900.0/sec): bzero of 16 kilobytes
 349400 reps @   0.0142 msec ( 70400.0/sec): bzero of 16 kilobytes
 349400 reps @   0.0143 msec ( 70100.0/sec): bzero of 16 kilobytes
 349400 reps @   0.0142 msec ( 70300.0/sec): bzero of 16 kilobytes
 349400 reps @   0.0143 msec ( 70100.0/sec): bzero of 16 kilobytes
1747000 trep @   0.0143 msec ( 70200.0/sec): bzero of 16 kilobytes

  23824 reps @   0.2091 msec (  4780.0/sec): bzero of 100 kilobytes
  23824 reps @   0.2091 msec (  4780.0/sec): bzero of 100 kilobytes
  23824 reps @   0.2091 msec (  4780.0/sec): bzero of 100 kilobytes
  23824 reps @   0.2091 msec (  4780.0/sec): bzero of 100 kilobytes
  23824 reps @   0.2090 msec (  4780.0/sec): bzero of 100 kilobytes
 119120 trep @   0.2091 msec (  4780.0/sec): bzero of 100 kilobytes

   1280 reps @   3.8925 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8925 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8935 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8927 msec (   257.0/sec): bzero of 1 megabyte
   1280 reps @   3.8931 msec (   257.0/sec): bzero of 1 megabyte
   6400 trep @   3.8929 msec (   257.0/sec): bzero of 1 megabyte

    116 reps @  43.3394 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3393 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3352 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3462 msec (    23.1/sec): bzero of 10 megabytes
    116 reps @  43.3362 msec (    23.1/sec): bzero of 10 megabytes
    580 trep @  43.3393 msec (    23.1/sec): bzero of 10 megabytes

    116 reps @  43.3535 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3385 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3373 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3365 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    116 reps @  43.3472 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)
    580 trep @  43.3426 msec (    23.1/sec): bzero of 10 megabytes (cacheline-aligned)

    120 reps @  42.7942 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7924 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7940 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7907 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    120 reps @  42.7963 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)
    600 trep @  42.7935 msec (    23.4/sec): bzero of 10 megabytes (word mis-aligned)

    120 reps @  43.0752 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0671 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0678 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0651 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    120 reps @  43.0607 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)
    600 trep @  43.0671 msec (    23.2/sec): bzero of 10 megabytes (dword mis-aligned)

  11518 reps @   0.4341 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers
  11518 reps @   0.4341 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers
  11518 reps @   0.4342 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers
  11518 reps @   0.4341 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers
  11518 reps @   0.4342 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers
  57590 trep @   0.4341 msec (  2300.0/sec): bcopy then qsort 400 32-bit integers

    181 reps @  27.6651 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6655 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6673 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6671 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    181 reps @  27.6653 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers
    905 trep @  27.6661 msec (    36.1/sec): bcopy then qsort 16,000 32-bit integers

     39 reps @ 127.8783 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 127.8795 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 127.9011 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 127.8891 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers
     39 reps @ 127.8883 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers
    195 trep @ 127.8873 msec (    7.82/sec): bcopy then qsort 64,000 32-bit integers

25247500 reps @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25247500 reps @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25247500 reps @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25247500 reps @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25247500 reps @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
126237500 trep @   0.0002 msec (5050000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

21632500 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
21632500 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
21632500 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
21632500 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
21632500 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
108162500 trep @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)

2153500 reps @   0.0023 msec (430000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2153500 reps @   0.0023 msec (429000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2153500 reps @   0.0023 msec (430000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2153500 reps @   0.0023 msec (430000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2153500 reps @   0.0023 msec (429000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
10767500 trep @   0.0023 msec (429000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  26100 reps @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)
  26100 reps @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)
  26100 reps @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)
  26100 reps @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)
  26100 reps @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)
 130500 trep @   0.1918 msec (  5210.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   6.0640 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.0659 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.0679 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.0675 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.0603 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   6.0651 msec (   165.0/sec): Tower of Hanoi recursion test (15 deep)

 668500 reps @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 668500 reps @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 668500 reps @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 668500 reps @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 668500 reps @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
3342500 trep @   0.0075 msec (134000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

 213200 reps @   0.0239 msec ( 41900.0/sec): write 80 bytes to a log file
 213200 reps @   0.0241 msec ( 41400.0/sec): write 80 bytes to a log file
 213200 reps @   0.0248 msec ( 40300.0/sec): write 80 bytes to a log file
 213200 reps @   0.0285 msec ( 35100.0/sec): write 80 bytes to a log file
 213200 reps @   0.0288 msec ( 34800.0/sec): write 80 bytes to a log file
1066000 trep @   0.0260 msec ( 38400.0/sec): write 80 bytes to a log file

   1100 reps @   4.1210 msec (   243.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0005 msec (   250.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0507 msec (   247.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0451 msec (   247.0/sec): per-file cost of creating 100 files then unlinking them all
   1100 reps @   4.0006 msec (   250.0/sec): per-file cost of creating 100 files then unlinking them all
   5500 trep @   4.0436 msec (   247.0/sec): per-file cost of creating 100 files then unlinking them all

  63000 reps @   0.0795 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
  63000 reps @   0.0796 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
  63000 reps @   0.0796 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
  63000 reps @   0.0796 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
  63000 reps @   0.0796 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files
 315000 trep @   0.0796 msec ( 12600.0/sec): per-file cost of open and immediate close of 100 files

  60200 reps @   0.0949 msec ( 10500.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0850 msec ( 11800.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0843 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0835 msec ( 12000.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  60200 reps @   0.0837 msec ( 11900.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 301000 trep @   0.0863 msec ( 11600.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 345500 reps @   0.0155 msec ( 64600.0/sec): cost of stat'ing current dir
 345500 reps @   0.0157 msec ( 63900.0/sec): cost of stat'ing current dir
 345500 reps @   0.0156 msec ( 63900.0/sec): cost of stat'ing current dir
 345500 reps @   0.0157 msec ( 63900.0/sec): cost of stat'ing current dir
 345500 reps @   0.0156 msec ( 63900.0/sec): cost of stat'ing current dir
1727500 trep @   0.0156 msec ( 64000.0/sec): cost of stat'ing current dir

  79000 reps @   0.0646 msec ( 15500.0/sec): cost of stat'ing 5 component path
  79000 reps @   0.0662 msec ( 15100.0/sec): cost of stat'ing 5 component path
  79000 reps @   0.0662 msec ( 15100.0/sec): cost of stat'ing 5 component path
  79000 reps @   0.0666 msec ( 15000.0/sec): cost of stat'ing 5 component path
  79000 reps @   0.0667 msec ( 15000.0/sec): cost of stat'ing 5 component path
 395000 trep @   0.0661 msec ( 15100.0/sec): cost of stat'ing 5 component path

   2106 reps @   2.3754 msec (   421.0/sec): open directory and stat 100 files in it
   2106 reps @   2.3866 msec (   419.0/sec): open directory and stat 100 files in it
   2106 reps @   2.3804 msec (   420.0/sec): open directory and stat 100 files in it
   2106 reps @   2.3440 msec (   427.0/sec): open directory and stat 100 files in it
   2106 reps @   2.2247 msec (   450.0/sec): open directory and stat 100 files in it
  10530 trep @   2.3422 msec (   427.0/sec): open directory and stat 100 files in it

   1200 reps @   4.3693 msec (   229.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   3.9047 msec (   256.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   3.9191 msec (   255.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   3.9540 msec (   253.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   1200 reps @   3.9678 msec (   252.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   6000 trep @   4.0230 msec (   249.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 405900 reps @   0.0123 msec ( 81100.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0123 msec ( 81100.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0124 msec ( 80800.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0121 msec ( 82500.0/sec): ndbm lookup into database with 900 entries
 405900 reps @   0.0121 msec ( 82500.0/sec): ndbm lookup into database with 900 entries
2029500 trep @   0.0123 msec ( 81600.0/sec): ndbm lookup into database with 900 entries

  70000 reps @   0.0718 msec ( 13900.0/sec): 1 byte token passing between two processes using two pipes
  70000 reps @   0.0717 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  70000 reps @   0.0717 msec ( 14000.0/sec): 1 byte token passing between two processes using two pipes
  70000 reps @   0.0718 msec ( 13900.0/sec): 1 byte token passing between two processes using two pipes
  70000 reps @   0.0718 msec ( 13900.0/sec): 1 byte token passing between two processes using two pipes
 350000 trep @   0.0718 msec ( 13900.0/sec): 1 byte token passing between two processes using two pipes

  56400 reps @   0.0916 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes
  56400 reps @   0.0920 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes
  56400 reps @   0.0920 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes
  56400 reps @   0.0919 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes
  56400 reps @   0.0918 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes
 282000 trep @   0.0919 msec ( 10900.0/sec): 1 kilobyte token passing between two processes using two pipes

12052000 reps @   0.0004 msec (2430000.0/sec): setjmp/longjmp
12052000 reps @   0.0004 msec (2460000.0/sec): setjmp/longjmp
12052000 reps @   0.0004 msec (2450000.0/sec): setjmp/longjmp
12052000 reps @   0.0004 msec (2450000.0/sec): setjmp/longjmp
12052000 reps @   0.0004 msec (2450000.0/sec): setjmp/longjmp
60260000 trep @   0.0004 msec (2450000.0/sec): setjmp/longjmp

 268000 reps @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 268000 reps @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 268000 reps @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 268000 reps @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 268000 reps @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1340000 trep @   0.0189 msec ( 53000.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    240 reps @  21.0009 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle
    240 reps @  20.9996 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle
    240 reps @  21.0050 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle
    240 reps @  21.0008 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle
    240 reps @  21.0050 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle
   1200 trep @  21.0023 msec (    47.6/sec): create/destroy client UDP-based SunRPC handle

  14800 reps @   0.2863 msec (  3490.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.2851 msec (  3510.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.2867 msec (  3490.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.2844 msec (  3520.0/sec): TCP-based SunRPC to negate an integer
  14800 reps @   0.2845 msec (  3510.0/sec): TCP-based SunRPC to negate an integer
  74000 trep @   0.2854 msec (  3500.0/sec): TCP-based SunRPC to negate an integer

  19200 reps @   0.2624 msec (  3810.0/sec): UDP-based SunRPC to negate an integer
  19200 reps @   0.2622 msec (  3810.0/sec): UDP-based SunRPC to negate an integer
  19200 reps @   0.2616 msec (  3820.0/sec): UDP-based SunRPC to negate an integer
  19200 reps @   0.2616 msec (  3820.0/sec): UDP-based SunRPC to negate an integer
  19200 reps @   0.2630 msec (  3800.0/sec): UDP-based SunRPC to negate an integer
  96000 trep @   0.2622 msec (  3810.0/sec): UDP-based SunRPC to negate an integer

  15200 reps @   0.2820 msec (  3550.0/sec): TCP-based SunRPC no-op
  15200 reps @   0.2883 msec (  3470.0/sec): TCP-based SunRPC no-op
  15200 reps @   0.2841 msec (  3520.0/sec): TCP-based SunRPC no-op
  15200 reps @   0.2847 msec (  3510.0/sec): TCP-based SunRPC no-op
  15200 reps @   0.2822 msec (  3540.0/sec): TCP-based SunRPC no-op
  76000 trep @   0.2843 msec (  3520.0/sec): TCP-based SunRPC no-op

  13600 reps @   0.2592 msec (  3860.0/sec): UDP-based SunRPC no-op
  13600 reps @   0.2600 msec (  3850.0/sec): UDP-based SunRPC no-op
  13600 reps @   0.2593 msec (  3860.0/sec): UDP-based SunRPC no-op
  13600 reps @   0.2612 msec (  3830.0/sec): UDP-based SunRPC no-op
  13600 reps @   0.2599 msec (  3850.0/sec): UDP-based SunRPC no-op
  68000 trep @   0.2599 msec (  3850.0/sec): UDP-based SunRPC no-op

2263000 reps @   0.0022 msec (452000.0/sec): getpid system call
2263000 reps @   0.0022 msec (452000.0/sec): getpid system call
2263000 reps @   0.0022 msec (460000.0/sec): getpid system call
2263000 reps @   0.0022 msec (461000.0/sec): getpid system call
2263000 reps @   0.0022 msec (461000.0/sec): getpid system call
11315000 trep @   0.0022 msec (457000.0/sec): getpid system call

 294500 reps @   0.0170 msec ( 58800.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0169 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 294500 reps @   0.0169 msec ( 59100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1472500 trep @   0.0170 msec ( 59000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 949200 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 949200 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 949200 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 949200 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
 949200 reps @   0.0053 msec (190000.0/sec): gettimeofday system call
4746000 trep @   0.0053 msec (190000.0/sec): gettimeofday system call

    750 reps @   6.8511 msec (   146.0/sec): fork, child immediately exits, parent waits
    750 reps @   6.8696 msec (   146.0/sec): fork, child immediately exits, parent waits
    750 reps @   6.7970 msec (   147.0/sec): fork, child immediately exits, parent waits
    750 reps @   6.9418 msec (   144.0/sec): fork, child immediately exits, parent waits
    750 reps @   6.7945 msec (   147.0/sec): fork, child immediately exits, parent waits
   3750 trep @   6.8508 msec (   146.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1011.0382 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0338 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0348 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0354 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1011.0360 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1011.0356 msec (    0.99/sec): sleep for one second (validates test time)

 884500 reps @   0.0056 msec (177000.0/sec): select on no fds with no timeout
 884500 reps @   0.0056 msec (177000.0/sec): select on no fds with no timeout
 884500 reps @   0.0056 msec (177000.0/sec): select on no fds with no timeout
 884500 reps @   0.0056 msec (177000.0/sec): select on no fds with no timeout
 884500 reps @   0.0056 msec (177000.0/sec): select on no fds with no timeout
4422500 trep @   0.0056 msec (177000.0/sec): select on no fds with no timeout

 272800 reps @   0.0183 msec ( 54500.0/sec): select on 16 pipe read fds with immediate timeout
 272800 reps @   0.0184 msec ( 54200.0/sec): select on 16 pipe read fds with immediate timeout
 272800 reps @   0.0185 msec ( 54200.0/sec): select on 16 pipe read fds with immediate timeout
 272800 reps @   0.0184 msec ( 54300.0/sec): select on 16 pipe read fds with immediate timeout
 272800 reps @   0.0184 msec ( 54300.0/sec): select on 16 pipe read fds with immediate timeout
1364000 trep @   0.0184 msec ( 54300.0/sec): select on 16 pipe read fds with immediate timeout

 152900 reps @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout
 152900 reps @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout
 152900 reps @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout
 152900 reps @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout
 152900 reps @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout
 764500 trep @   0.0327 msec ( 30600.0/sec): select on 32 pipe read fds with immediate timeout

 264800 reps @   0.0189 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
 264800 reps @   0.0190 msec ( 52700.0/sec): select on 16 pipe write fds with immediate timeout
 264800 reps @   0.0190 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout
1324000 trep @   0.0190 msec ( 52800.0/sec): select on 16 pipe write fds with immediate timeout

 264800 reps @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout
 264800 reps @   0.0189 msec ( 52900.0/sec): select on 32 pipe write fds with immediate timeout
1324000 trep @   0.0189 msec ( 53000.0/sec): select on 32 pipe write fds with immediate timeout

  40300 reps @   0.1236 msec (  8090.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1237 msec (  8080.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1237 msec (  8080.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1237 msec (  8080.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  40300 reps @   0.1238 msec (  8080.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 201500 trep @   0.1237 msec (  8080.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    210 reps @  15.0065 msec (    66.6/sec): popen and read from "/bin/echo hello"
    210 reps @  14.9970 msec (    66.7/sec): popen and read from "/bin/echo hello"
    210 reps @  14.9967 msec (    66.7/sec): popen and read from "/bin/echo hello"
    210 reps @  15.0036 msec (    66.7/sec): popen and read from "/bin/echo hello"
    210 reps @  14.9946 msec (    66.7/sec): popen and read from "/bin/echo hello"
   1050 trep @  14.9997 msec (    66.7/sec): popen and read from "/bin/echo hello"

  48150 reps @   0.1041 msec (  9610.0/sec): mmap megabyte /dev/zero region 
  48150 reps @   0.1011 msec (  9890.0/sec): mmap megabyte /dev/zero region 
  48150 reps @   0.1009 msec (  9910.0/sec): mmap megabyte /dev/zero region 
  48150 reps @   0.1009 msec (  9910.0/sec): mmap megabyte /dev/zero region 
  48150 reps @   0.1008 msec (  9920.0/sec): mmap megabyte /dev/zero region 
 240750 trep @   0.1016 msec (  9850.0/sec): mmap megabyte /dev/zero region 

    697 reps @   7.1614 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    697 reps @   7.1612 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    697 reps @   7.1627 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    697 reps @   7.1616 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    697 reps @   7.1614 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   3485 trep @   7.1617 msec (   140.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

   1329 reps @   3.7910 msec (   264.0/sec): copy every byte of newly mmaped megabyte file
   1329 reps @   3.8024 msec (   263.0/sec): copy every byte of newly mmaped megabyte file
   1329 reps @   3.8113 msec (   262.0/sec): copy every byte of newly mmaped megabyte file
   1329 reps @   3.8185 msec (   262.0/sec): copy every byte of newly mmaped megabyte file
   1329 reps @   3.8762 msec (   258.0/sec): copy every byte of newly mmaped megabyte file
   6645 trep @   3.8199 msec (   262.0/sec): copy every byte of newly mmaped megabyte file

     54 reps @  59.9967 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     54 reps @  60.0164 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     54 reps @  59.9770 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     54 reps @  60.0243 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
     54 reps @  59.9870 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers
    270 trep @  60.0003 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers

      3 reps @ 196.5913 msec (    5.09/sec): compile ANSI C `hello world' with no special options
      3 reps @ 196.6107 msec (    5.09/sec): compile ANSI C `hello world' with no special options
      3 reps @ 193.7860 msec (    5.16/sec): compile ANSI C `hello world' with no special options
      3 reps @ 193.5317 msec (    5.17/sec): compile ANSI C `hello world' with no special options
      3 reps @ 196.6453 msec (    5.09/sec): compile ANSI C `hello world' with no special options
     15 trep @ 195.4330 msec (    5.12/sec): compile ANSI C `hello world' with no special options

     15 reps @ 261.0841 msec (    3.83/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 302.6723 msec (    3.30/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 282.6707 msec (    3.54/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 309.3425 msec (    3.23/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     15 reps @ 264.0021 msec (    3.79/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     75 trep @ 283.9543 msec (    3.52/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     14 reps @ 266.6664 msec (    3.75/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 288.9958 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 311.3035 msec (    3.21/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 303.7684 msec (    3.29/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 266.3316 msec (    3.75/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     70 trep @ 287.4131 msec (    3.48/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     16 reps @ 252.5101 msec (    3.96/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 304.3742 msec (    3.29/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 291.5646 msec (    3.43/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 285.3036 msec (    3.51/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     16 reps @ 299.3720 msec (    3.34/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     80 trep @ 286.6249 msec (    3.49/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 278.7530 msec (    3.59/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 289.9966 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 285.5560 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 285.0604 msec (    3.51/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 289.9977 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 285.8727 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 284.2122 msec (    3.52/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 285.4186 msec (    3.50/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 293.3385 msec (    3.41/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 295.7031 msec (    3.38/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 286.4815 msec (    3.49/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 289.0308 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     32 reps @ 295.8615 msec (    3.38/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 287.6857 msec (    3.48/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 289.1066 msec (    3.46/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 290.4115 msec (    3.44/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 289.8049 msec (    3.45/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    160 trep @ 290.5740 msec (    3.44/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      4 reps @ 1443.7570 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1441.2690 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1453.5600 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1451.1418 msec (    0.69/sec): use dc to output first 1,000 factorials
      4 reps @ 1453.5520 msec (    0.69/sec): use dc to output first 1,000 factorials
     20 trep @ 1448.6560 msec (    0.69/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0039 msec (255000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0039 msec (256000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0039 msec (256000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0039 msec (256000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0039 msec (256000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0039 msec (255000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  93320 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93320 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93320 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93320 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
  93320 reps @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree
 466600 trep @   0.0536 msec ( 18700.0/sec): use regcomp to compile 51 char literal, then regfree

      5 reps @ 1050.1910 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1049.9856 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1051.2740 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1050.4788 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1052.0124 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text
     25 trep @ 1050.7884 msec (    0.95/sec): use regexec with 51 char literal to search 142 kilobyte text

 123440 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123440 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123440 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123440 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 123440 reps @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree
 617200 trep @   0.0405 msec ( 24700.0/sec): use regcomp to compile long .* pattern, then regfree

     10 reps @ 535.0379 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.4751 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 534.8905 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.3025 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     10 reps @ 535.2624 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text
     50 trep @ 535.1937 msec (    1.87/sec): use regexec with long .* pattern to search 142 kilobyte text

