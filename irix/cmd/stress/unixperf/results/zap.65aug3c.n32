UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: zap
Operating system: IRIX 6.5-ALPHA-1274022532
Compiler version: 7.2
Instruction set: MIPS 3
Application binary interface: N32
CPU: MIPS R5000 Processor Chip Revision: 1.0
FPU: MIPS R5000 Floating Point Coprocessor Revision: 1.0
1 180 MHZ IP22 Processor
Main memory size: 96 Mbytes
Secondary unified instruction/data cache size: 512 Kbytes on Processor 0
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Integral SCSI controller 0: Version WD33C93B, revision D
  Disk drive: unit 1 on SCSI controller 0
  CDROM: unit 4 on SCSI controller 0
  Tape drive: unit 7 on SCSI controller 0: DAT
On-board serial ports: 2
On-board bi-directional parallel port
Graphics board: GR3-XZ
Integral Ethernet: ec0, version 1
Integral ISDN: Basic Rate Interface unit 0, revision 1.0
Iris Audio Processor: version A2 revision 4.1.0
Vino video: unit 0, revision 0, IndyCam connected
Uptime: 20:45
Users: 1
Load average: 0.41, 0.64, 0.32
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1915.95 MB total, 440.22 MB available)
Date: Tue Aug 12 19:47:39 1997

2185896 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2185896 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2185896 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
2185896 reps @   0.0023 msec (441000.0/sec): 4 by 4 double matrix multiply
2185896 reps @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply
10929480 trep @   0.0023 msec (440000.0/sec): 4 by 4 double matrix multiply

2259048 reps @   0.0022 msec (452000.0/sec): 4 by 4 float matrix multiply
2259048 reps @   0.0022 msec (451000.0/sec): 4 by 4 float matrix multiply
2259048 reps @   0.0022 msec (451000.0/sec): 4 by 4 float matrix multiply
2259048 reps @   0.0022 msec (452000.0/sec): 4 by 4 float matrix multiply
2259048 reps @   0.0022 msec (452000.0/sec): 4 by 4 float matrix multiply
11295240 trep @   0.0022 msec (452000.0/sec): 4 by 4 float matrix multiply

 272000 reps @   0.0184 msec ( 54200.0/sec): recurse 250 simple function calls and return
 272000 reps @   0.0184 msec ( 54300.0/sec): recurse 250 simple function calls and return
 272000 reps @   0.0184 msec ( 54200.0/sec): recurse 250 simple function calls and return
 272000 reps @   0.0184 msec ( 54300.0/sec): recurse 250 simple function calls and return
 272000 reps @   0.0184 msec ( 54300.0/sec): recurse 250 simple function calls and return
1360000 trep @   0.0184 msec ( 54300.0/sec): recurse 250 simple function calls and return

6437200 reps @   0.0008 msec (1290000.0/sec): bcopy of 256 bytes
6437200 reps @   0.0008 msec (1280000.0/sec): bcopy of 256 bytes
6437200 reps @   0.0008 msec (1290000.0/sec): bcopy of 256 bytes
6437200 reps @   0.0008 msec (1280000.0/sec): bcopy of 256 bytes
6437200 reps @   0.0008 msec (1290000.0/sec): bcopy of 256 bytes
32186000 trep @   0.0008 msec (1290000.0/sec): bcopy of 256 bytes

 158600 reps @   0.0313 msec ( 31900.0/sec): bcopy of 16 kilobytes
 158600 reps @   0.0313 msec ( 31900.0/sec): bcopy of 16 kilobytes
 158600 reps @   0.0314 msec ( 31900.0/sec): bcopy of 16 kilobytes
 158600 reps @   0.0313 msec ( 31900.0/sec): bcopy of 16 kilobytes
 158600 reps @   0.0313 msec ( 31900.0/sec): bcopy of 16 kilobytes
 793000 trep @   0.0313 msec ( 31900.0/sec): bcopy of 16 kilobytes

   2404 reps @   2.0762 msec (   482.0/sec): bcopy of 100 kilobytes
   2404 reps @   2.0736 msec (   482.0/sec): bcopy of 100 kilobytes
   2404 reps @   2.0773 msec (   481.0/sec): bcopy of 100 kilobytes
   2404 reps @   2.0753 msec (   482.0/sec): bcopy of 100 kilobytes
   2404 reps @   2.0761 msec (   482.0/sec): bcopy of 100 kilobytes
  12020 trep @   2.0757 msec (   482.0/sec): bcopy of 100 kilobytes

    112 reps @  40.2407 msec (    24.9/sec): bcopy of 1 megabyte
    112 reps @  40.2656 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2685 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2710 msec (    24.8/sec): bcopy of 1 megabyte
    112 reps @  40.2570 msec (    24.8/sec): bcopy of 1 megabyte
    560 trep @  40.2606 msec (    24.8/sec): bcopy of 1 megabyte

     12 reps @ 405.7881 msec (    2.46/sec): bcopy of 10 megabytes
     12 reps @ 405.5984 msec (    2.47/sec): bcopy of 10 megabytes
     12 reps @ 405.4681 msec (    2.47/sec): bcopy of 10 megabytes
     12 reps @ 405.3737 msec (    2.47/sec): bcopy of 10 megabytes
     12 reps @ 405.9651 msec (    2.46/sec): bcopy of 10 megabytes
     60 trep @ 405.6387 msec (    2.47/sec): bcopy of 10 megabytes

     16 reps @ 404.9808 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 404.7650 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 404.6385 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 404.8054 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     16 reps @ 404.9722 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     80 trep @ 404.8324 msec (    2.47/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 407.7482 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.0992 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 407.9557 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.0109 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 408.1214 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 407.9871 msec (    2.45/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 410.3069 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.4483 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.4869 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.1481 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 410.5161 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 410.3813 msec (    2.44/sec): bcopy of 10 megabytes (dword mis-aligned)

12305200 reps @   0.0004 msec (2470000.0/sec): bzero of 256 bytes
12305200 reps @   0.0004 msec (2460000.0/sec): bzero of 256 bytes
12305200 reps @   0.0004 msec (2460000.0/sec): bzero of 256 bytes
12305200 reps @   0.0004 msec (2470000.0/sec): bzero of 256 bytes
12305200 reps @   0.0004 msec (2470000.0/sec): bzero of 256 bytes
61526000 trep @   0.0004 msec (2460000.0/sec): bzero of 256 bytes

 219160 reps @   0.0227 msec ( 44000.0/sec): bzero of 16 kilobytes
 219160 reps @   0.0227 msec ( 44000.0/sec): bzero of 16 kilobytes
 219160 reps @   0.0228 msec ( 43900.0/sec): bzero of 16 kilobytes
 219160 reps @   0.0228 msec ( 44000.0/sec): bzero of 16 kilobytes
 219160 reps @   0.0227 msec ( 44000.0/sec): bzero of 16 kilobytes
1095800 trep @   0.0227 msec ( 44000.0/sec): bzero of 16 kilobytes

   3764 reps @   1.3255 msec (   754.0/sec): bzero of 100 kilobytes
   3764 reps @   1.3263 msec (   754.0/sec): bzero of 100 kilobytes
   3764 reps @   1.3263 msec (   754.0/sec): bzero of 100 kilobytes
   3764 reps @   1.3259 msec (   754.0/sec): bzero of 100 kilobytes
   3764 reps @   1.3263 msec (   754.0/sec): bzero of 100 kilobytes
  18820 trep @   1.3261 msec (   754.0/sec): bzero of 100 kilobytes

    212 reps @  23.8095 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.7570 msec (    42.1/sec): bzero of 1 megabyte
    212 reps @  23.8106 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.8049 msec (    42.0/sec): bzero of 1 megabyte
    212 reps @  23.8412 msec (    41.9/sec): bzero of 1 megabyte
   1060 trep @  23.8047 msec (    42.0/sec): bzero of 1 megabyte

     24 reps @ 239.7479 msec (    4.17/sec): bzero of 10 megabytes
     24 reps @ 239.7910 msec (    4.17/sec): bzero of 10 megabytes
     24 reps @ 239.8273 msec (    4.17/sec): bzero of 10 megabytes
     24 reps @ 239.7500 msec (    4.17/sec): bzero of 10 megabytes
     24 reps @ 240.0373 msec (    4.17/sec): bzero of 10 megabytes
    120 trep @ 239.8307 msec (    4.17/sec): bzero of 10 megabytes

     24 reps @ 239.9001 msec (    4.17/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.0968 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.0178 msec (    4.17/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 239.8790 msec (    4.17/sec): bzero of 10 megabytes (cacheline-aligned)
     24 reps @ 240.1480 msec (    4.16/sec): bzero of 10 megabytes (cacheline-aligned)
    120 trep @ 240.0084 msec (    4.17/sec): bzero of 10 megabytes (cacheline-aligned)

     24 reps @ 239.6837 msec (    4.17/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 239.7281 msec (    4.17/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 239.8675 msec (    4.17/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 239.7327 msec (    4.17/sec): bzero of 10 megabytes (word mis-aligned)
     24 reps @ 240.1262 msec (    4.16/sec): bzero of 10 megabytes (word mis-aligned)
    120 trep @ 239.8276 msec (    4.17/sec): bzero of 10 megabytes (word mis-aligned)

     24 reps @ 239.9066 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 239.8883 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 239.9741 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 239.7182 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)
     24 reps @ 239.9595 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)
    120 trep @ 239.8893 msec (    4.17/sec): bzero of 10 megabytes (dword mis-aligned)

   7486 reps @   0.6661 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers
   7486 reps @   0.6661 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers
   7486 reps @   0.6663 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers
   7486 reps @   0.6658 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers
   7486 reps @   0.6663 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers
  37430 trep @   0.6661 msec (  1500.0/sec): bcopy then qsort 400 32-bit integers

    110 reps @  45.2179 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers
    110 reps @  45.1846 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers
    110 reps @  45.2243 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers
    110 reps @  45.2475 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers
    110 reps @  45.1956 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers
    550 trep @  45.2140 msec (    22.1/sec): bcopy then qsort 16,000 32-bit integers

     23 reps @ 214.4761 msec (    4.66/sec): bcopy then qsort 64,000 32-bit integers
     23 reps @ 214.3319 msec (    4.67/sec): bcopy then qsort 64,000 32-bit integers
     23 reps @ 214.2763 msec (    4.67/sec): bcopy then qsort 64,000 32-bit integers
     23 reps @ 214.4299 msec (    4.66/sec): bcopy then qsort 64,000 32-bit integers
     23 reps @ 214.2103 msec (    4.67/sec): bcopy then qsort 64,000 32-bit integers
    115 trep @ 214.3449 msec (    4.67/sec): bcopy then qsort 64,000 32-bit integers

12445000 reps @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
12445000 reps @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
12445000 reps @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
12445000 reps @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
12445000 reps @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
62225000 trep @   0.0004 msec (2490000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

10227500 reps @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)
10227500 reps @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)
10227500 reps @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)
10227500 reps @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)
10227500 reps @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)
51137500 trep @   0.0005 msec (2050000.0/sec): basic double trigonometric function (sin/cos/tan)

1380000 reps @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
1380000 reps @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
6900000 trep @   0.0036 msec (275000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  20400 reps @   0.2464 msec (  4060.0/sec): Tower of Hanoi recursion test (10 deep)
  20400 reps @   0.2462 msec (  4060.0/sec): Tower of Hanoi recursion test (10 deep)
  20400 reps @   0.2464 msec (  4060.0/sec): Tower of Hanoi recursion test (10 deep)
  20400 reps @   0.2462 msec (  4060.0/sec): Tower of Hanoi recursion test (10 deep)
  20400 reps @   0.2468 msec (  4050.0/sec): Tower of Hanoi recursion test (10 deep)
 102000 trep @   0.2464 msec (  4060.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   7.8913 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.8918 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.8919 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.8948 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   7.8915 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   7.8922 msec (   127.0/sec): Tower of Hanoi recursion test (15 deep)

 301000 reps @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 301000 reps @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 301000 reps @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 301000 reps @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 301000 reps @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1505000 trep @   0.0166 msec ( 60300.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  85200 reps @   0.0606 msec ( 16500.0/sec): write 80 bytes to a log file
  85200 reps @   0.0630 msec ( 15900.0/sec): write 80 bytes to a log file
  85200 reps @   0.0659 msec ( 15200.0/sec): write 80 bytes to a log file
  85200 reps @   0.0673 msec ( 14900.0/sec): write 80 bytes to a log file
  85200 reps @   0.0735 msec ( 13600.0/sec): write 80 bytes to a log file
 426000 trep @   0.0661 msec ( 15100.0/sec): write 80 bytes to a log file

    900 reps @   6.0948 msec (   164.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.0891 msec (   164.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.0259 msec (   166.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   6.0437 msec (   165.0/sec): per-file cost of creating 100 files then unlinking them all
    900 reps @   5.9803 msec (   167.0/sec): per-file cost of creating 100 files then unlinking them all
   4500 trep @   6.0468 msec (   165.0/sec): per-file cost of creating 100 files then unlinking them all

  37000 reps @   0.1349 msec (  7410.0/sec): per-file cost of open and immediate close of 100 files
  37000 reps @   0.1348 msec (  7420.0/sec): per-file cost of open and immediate close of 100 files
  37000 reps @   0.1347 msec (  7420.0/sec): per-file cost of open and immediate close of 100 files
  37000 reps @   0.1348 msec (  7420.0/sec): per-file cost of open and immediate close of 100 files
  37000 reps @   0.1346 msec (  7430.0/sec): per-file cost of open and immediate close of 100 files
 185000 trep @   0.1348 msec (  7420.0/sec): per-file cost of open and immediate close of 100 files

  40000 reps @   0.1366 msec (  7320.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1243 msec (  8040.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1259 msec (  7940.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1254 msec (  7970.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  40000 reps @   0.1244 msec (  8040.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 200000 trep @   0.1273 msec (  7850.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 257000 reps @   0.0194 msec ( 51500.0/sec): cost of stat'ing current dir
 257000 reps @   0.0200 msec ( 49900.0/sec): cost of stat'ing current dir
 257000 reps @   0.0203 msec ( 49400.0/sec): cost of stat'ing current dir
 257000 reps @   0.0203 msec ( 49300.0/sec): cost of stat'ing current dir
 257000 reps @   0.0203 msec ( 49300.0/sec): cost of stat'ing current dir
1285000 trep @   0.0201 msec ( 49900.0/sec): cost of stat'ing current dir

  57500 reps @   0.0870 msec ( 11500.0/sec): cost of stat'ing 5 component path
  57500 reps @   0.0874 msec ( 11400.0/sec): cost of stat'ing 5 component path
  57500 reps @   0.0879 msec ( 11400.0/sec): cost of stat'ing 5 component path
  57500 reps @   0.0878 msec ( 11400.0/sec): cost of stat'ing 5 component path
  57500 reps @   0.0879 msec ( 11400.0/sec): cost of stat'ing 5 component path
 287500 trep @   0.0876 msec ( 11400.0/sec): cost of stat'ing 5 component path

   1372 reps @   3.6038 msec (   277.0/sec): open directory and stat 100 files in it
   1372 reps @   3.5805 msec (   279.0/sec): open directory and stat 100 files in it
   1372 reps @   3.5981 msec (   278.0/sec): open directory and stat 100 files in it
   1372 reps @   3.6095 msec (   277.0/sec): open directory and stat 100 files in it
   1372 reps @   3.5918 msec (   278.0/sec): open directory and stat 100 files in it
   6860 trep @   3.5967 msec (   278.0/sec): open directory and stat 100 files in it

    800 reps @   6.5833 msec (   152.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.0003 msec (   167.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.7405 msec (   174.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.7112 msec (   175.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.8239 msec (   172.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4000 trep @   5.9718 msec (   167.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 200700 reps @   0.0247 msec ( 40400.0/sec): ndbm lookup into database with 900 entries
 200700 reps @   0.0249 msec ( 40200.0/sec): ndbm lookup into database with 900 entries
 200700 reps @   0.0248 msec ( 40400.0/sec): ndbm lookup into database with 900 entries
 200700 reps @   0.0248 msec ( 40400.0/sec): ndbm lookup into database with 900 entries
 200700 reps @   0.0241 msec ( 41600.0/sec): ndbm lookup into database with 900 entries
1003500 trep @   0.0246 msec ( 40600.0/sec): ndbm lookup into database with 900 entries

  49600 reps @   0.1001 msec (  9990.0/sec): 1 byte token passing between two processes using two pipes
  49600 reps @   0.1005 msec (  9950.0/sec): 1 byte token passing between two processes using two pipes
  49600 reps @   0.1003 msec (  9970.0/sec): 1 byte token passing between two processes using two pipes
  49600 reps @   0.1001 msec (  9990.0/sec): 1 byte token passing between two processes using two pipes
  49600 reps @   0.0998 msec ( 10000.0/sec): 1 byte token passing between two processes using two pipes
 248000 trep @   0.1001 msec (  9990.0/sec): 1 byte token passing between two processes using two pipes

  40800 reps @   0.1213 msec (  8250.0/sec): 1 kilobyte token passing between two processes using two pipes
  40800 reps @   0.1209 msec (  8270.0/sec): 1 kilobyte token passing between two processes using two pipes
  40800 reps @   0.1214 msec (  8240.0/sec): 1 kilobyte token passing between two processes using two pipes
  40800 reps @   0.1211 msec (  8260.0/sec): 1 kilobyte token passing between two processes using two pipes
  40800 reps @   0.1210 msec (  8270.0/sec): 1 kilobyte token passing between two processes using two pipes
 204000 trep @   0.1211 msec (  8260.0/sec): 1 kilobyte token passing between two processes using two pipes

12796000 reps @   0.0004 msec (2570000.0/sec): setjmp/longjmp
12796000 reps @   0.0004 msec (2560000.0/sec): setjmp/longjmp
12796000 reps @   0.0004 msec (2560000.0/sec): setjmp/longjmp
12796000 reps @   0.0004 msec (2560000.0/sec): setjmp/longjmp
12796000 reps @   0.0004 msec (2560000.0/sec): setjmp/longjmp
63980000 trep @   0.0004 msec (2560000.0/sec): setjmp/longjmp

 132000 reps @   0.0382 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 132000 reps @   0.0381 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 132000 reps @   0.0382 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 132000 reps @   0.0382 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 132000 reps @   0.0382 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 660000 trep @   0.0382 msec ( 26200.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1295 reps @   3.8417 msec (   260.0/sec): create/destroy client UDP-based SunRPC handle
   1295 reps @   3.8304 msec (   261.0/sec): create/destroy client UDP-based SunRPC handle
   1295 reps @   3.8313 msec (   261.0/sec): create/destroy client UDP-based SunRPC handle
   1295 reps @   3.8253 msec (   261.0/sec): create/destroy client UDP-based SunRPC handle
   1295 reps @   3.8278 msec (   261.0/sec): create/destroy client UDP-based SunRPC handle
   6475 trep @   3.8313 msec (   261.0/sec): create/destroy client UDP-based SunRPC handle

   5600 reps @   0.9336 msec (  1070.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9319 msec (  1070.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9324 msec (  1070.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9343 msec (  1070.0/sec): TCP-based SunRPC to negate an integer
   5600 reps @   0.9347 msec (  1070.0/sec): TCP-based SunRPC to negate an integer
  28000 trep @   0.9334 msec (  1070.0/sec): TCP-based SunRPC to negate an integer

   5600 reps @   0.8593 msec (  1160.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.8584 msec (  1160.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.8596 msec (  1160.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.8586 msec (  1160.0/sec): UDP-based SunRPC to negate an integer
   5600 reps @   0.8591 msec (  1160.0/sec): UDP-based SunRPC to negate an integer
  28000 trep @   0.8590 msec (  1160.0/sec): UDP-based SunRPC to negate an integer

   5200 reps @   0.9169 msec (  1090.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9207 msec (  1090.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9203 msec (  1090.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9198 msec (  1090.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9193 msec (  1090.0/sec): TCP-based SunRPC no-op
  26000 trep @   0.9194 msec (  1090.0/sec): TCP-based SunRPC no-op

   6000 reps @   0.8547 msec (  1170.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8515 msec (  1170.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8524 msec (  1170.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8519 msec (  1170.0/sec): UDP-based SunRPC no-op
   6000 reps @   0.8523 msec (  1170.0/sec): UDP-based SunRPC no-op
  30000 trep @   0.8526 msec (  1170.0/sec): UDP-based SunRPC no-op

1571500 reps @   0.0032 msec (313000.0/sec): getpid system call
1571500 reps @   0.0032 msec (314000.0/sec): getpid system call
1571500 reps @   0.0032 msec (314000.0/sec): getpid system call
1571500 reps @   0.0032 msec (314000.0/sec): getpid system call
1571500 reps @   0.0032 msec (314000.0/sec): getpid system call
7857500 trep @   0.0032 msec (314000.0/sec): getpid system call

 211000 reps @   0.0238 msec ( 42000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 211000 reps @   0.0238 msec ( 42100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 211000 reps @   0.0238 msec ( 42000.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 211000 reps @   0.0238 msec ( 42100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 211000 reps @   0.0238 msec ( 42100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1055000 trep @   0.0238 msec ( 42100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 908800 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
 908800 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
 908800 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
 908800 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
 908800 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
4544000 trep @   0.0055 msec (182000.0/sec): gettimeofday system call

    250 reps @  23.8706 msec (    41.9/sec): fork, child immediately exits, parent waits
    250 reps @  24.6322 msec (    40.6/sec): fork, child immediately exits, parent waits
    250 reps @  23.0006 msec (    43.5/sec): fork, child immediately exits, parent waits
    250 reps @  22.9973 msec (    43.5/sec): fork, child immediately exits, parent waits
    250 reps @  23.7682 msec (    42.1/sec): fork, child immediately exits, parent waits
   1250 trep @  23.6538 msec (    42.3/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.9804 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9486 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9320 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9582 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9372 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.9513 msec (    0.99/sec): sleep for one second (validates test time)

 645400 reps @   0.0079 msec (126000.0/sec): select on no fds with no timeout
 645400 reps @   0.0079 msec (127000.0/sec): select on no fds with no timeout
 645400 reps @   0.0079 msec (126000.0/sec): select on no fds with no timeout
 645400 reps @   0.0079 msec (126000.0/sec): select on no fds with no timeout
 645400 reps @   0.0079 msec (126000.0/sec): select on no fds with no timeout
3227000 trep @   0.0079 msec (126000.0/sec): select on no fds with no timeout

 127700 reps @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 127700 reps @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 127700 reps @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 127700 reps @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 127700 reps @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout
 638500 trep @   0.0396 msec ( 25200.0/sec): select on 16 pipe read fds with immediate timeout

  58700 reps @   0.0850 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout
  58700 reps @   0.0850 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout
  58700 reps @   0.0851 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout
  58700 reps @   0.0850 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout
  58700 reps @   0.0851 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout
 293500 trep @   0.0850 msec ( 11800.0/sec): select on 32 pipe read fds with immediate timeout

 121400 reps @   0.0411 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout
 121400 reps @   0.0412 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout
 121400 reps @   0.0411 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout
 121400 reps @   0.0412 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout
 121400 reps @   0.0412 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout
 607000 trep @   0.0411 msec ( 24300.0/sec): select on 16 pipe write fds with immediate timeout

 121000 reps @   0.0413 msec ( 24200.0/sec): select on 32 pipe write fds with immediate timeout
 121000 reps @   0.0412 msec ( 24200.0/sec): select on 32 pipe write fds with immediate timeout
 121000 reps @   0.0413 msec ( 24200.0/sec): select on 32 pipe write fds with immediate timeout
 121000 reps @   0.0412 msec ( 24300.0/sec): select on 32 pipe write fds with immediate timeout
 121000 reps @   0.0413 msec ( 24200.0/sec): select on 32 pipe write fds with immediate timeout
 605000 trep @   0.0413 msec ( 24200.0/sec): select on 32 pipe write fds with immediate timeout

  11400 reps @   0.4453 msec (  2250.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11400 reps @   0.4456 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11400 reps @   0.4463 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11400 reps @   0.4455 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  11400 reps @   0.4454 msec (  2250.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  57000 trep @   0.4456 msec (  2240.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

     90 reps @  53.7522 msec (    18.6/sec): popen and read from "/bin/echo hello"
     90 reps @  53.9922 msec (    18.5/sec): popen and read from "/bin/echo hello"
     90 reps @  53.8529 msec (    18.6/sec): popen and read from "/bin/echo hello"
     90 reps @  53.7290 msec (    18.6/sec): popen and read from "/bin/echo hello"
     90 reps @  53.8779 msec (    18.6/sec): popen and read from "/bin/echo hello"
    450 trep @  53.8409 msec (    18.6/sec): popen and read from "/bin/echo hello"

  17900 reps @   0.2810 msec (  3560.0/sec): mmap megabyte /dev/zero region 
  17900 reps @   0.2812 msec (  3560.0/sec): mmap megabyte /dev/zero region 
  17900 reps @   0.2807 msec (  3560.0/sec): mmap megabyte /dev/zero region 
  17900 reps @   0.2808 msec (  3560.0/sec): mmap megabyte /dev/zero region 
  17900 reps @   0.2804 msec (  3570.0/sec): mmap megabyte /dev/zero region 
  89500 trep @   0.2808 msec (  3560.0/sec): mmap megabyte /dev/zero region 

    133 reps @  37.6781 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    133 reps @  37.6828 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    133 reps @  37.6820 msec (    26.5/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    133 reps @  37.6569 msec (    26.6/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    133 reps @  37.6047 msec (    26.6/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    665 trep @  37.6609 msec (    26.6/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    175 reps @  28.6205 msec (    34.9/sec): copy every byte of newly mmaped megabyte file
    175 reps @  28.7270 msec (    34.8/sec): copy every byte of newly mmaped megabyte file
    175 reps @  29.0141 msec (    34.5/sec): copy every byte of newly mmaped megabyte file
    175 reps @  28.8668 msec (    34.6/sec): copy every byte of newly mmaped megabyte file
    175 reps @  28.8851 msec (    34.6/sec): copy every byte of newly mmaped megabyte file
    875 trep @  28.8227 msec (    34.7/sec): copy every byte of newly mmaped megabyte file

     25 reps @ 190.1916 msec (    5.26/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.3111 msec (    5.23/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.8528 msec (    5.21/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.9951 msec (    5.21/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 191.9746 msec (    5.21/sec): compress & uncompress 52 kilobyte text file of numbers
    125 trep @ 191.4650 msec (    5.22/sec): compress & uncompress 52 kilobyte text file of numbers

      4 reps @ 597.4077 msec (    1.67/sec): compile ANSI C `hello world' with no special options
      4 reps @ 594.5098 msec (    1.68/sec): compile ANSI C `hello world' with no special options
      4 reps @ 591.8285 msec (    1.69/sec): compile ANSI C `hello world' with no special options
      4 reps @ 591.9805 msec (    1.69/sec): compile ANSI C `hello world' with no special options
      4 reps @ 592.5310 msec (    1.69/sec): compile ANSI C `hello world' with no special options
     20 trep @ 593.6515 msec (    1.68/sec): compile ANSI C `hello world' with no special options

     10 reps @ 612.4327 msec (    1.63/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 499.8317 msec (    2.00/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 514.5013 msec (    1.94/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 564.5327 msec (    1.77/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     10 reps @ 581.3778 msec (    1.72/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     50 trep @ 554.5352 msec (    1.80/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

      8 reps @ 533.3034 msec (    1.88/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 481.2058 msec (    2.08/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 691.4820 msec (    1.45/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 502.4495 msec (    1.99/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
      8 reps @ 458.7557 msec (    2.18/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     40 trep @ 533.4393 msec (    1.87/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

      8 reps @ 543.7444 msec (    1.84/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 580.0667 msec (    1.72/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 539.7509 msec (    1.85/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 527.4429 msec (    1.90/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
      8 reps @ 564.6685 msec (    1.77/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     40 trep @ 551.1347 msec (    1.81/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

