UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.2
Compiler version: 7.1
Instruction set: MIPS 3
Application binary interface: N32
4 150 MHZ IP19 Processors
CPU: MIPS R4400 Processor Chip Revision: 5.0
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
Secondary unified instruction/data cache size: 1 Mbyte
Data cache size: 16 Kbytes
Instruction cache size: 16 Kbytes
Main memory size: 512 Mbytes, 2-way interleaved
I/O board, Ebus slot 3: IO4 revision 1
Integral EPC serial ports: 4
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
EPC external interrupts
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 10 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 1 on SCSI controller 1
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
CC synchronization join counter
Integral EPC parallel port: Ebus slot 3
VME bus: adapter 0 mapped to adapter 13
VME bus: adapter 13
Uptime: 18 mins
Users: 2
Load average: 0.24, 0.46, 0.24
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1786.64 MB total, 685.25 MB available)
Date: Mon Jul 21 19:11:04 1997

1410840 reps @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply
1410840 reps @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply
1410840 reps @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply
1410840 reps @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply
1410840 reps @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply
7054200 trep @   0.0035 msec (282000.0/sec): 4 by 4 double matrix multiply

1455456 reps @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply
1455456 reps @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply
1455456 reps @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply
1455456 reps @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply
1455456 reps @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply
7277280 trep @   0.0034 msec (292000.0/sec): 4 by 4 float matrix multiply

 157000 reps @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return
 157000 reps @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return
 157000 reps @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return
 157000 reps @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return
 157000 reps @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return
 785000 trep @   0.0320 msec ( 31300.0/sec): recurse 250 simple function calls and return

4210400 reps @   0.0012 msec (841000.0/sec): bcopy of 256 bytes
4210400 reps @   0.0012 msec (842000.0/sec): bcopy of 256 bytes
4210400 reps @   0.0012 msec (842000.0/sec): bcopy of 256 bytes
4210400 reps @   0.0012 msec (842000.0/sec): bcopy of 256 bytes
4210400 reps @   0.0012 msec (842000.0/sec): bcopy of 256 bytes
21052000 trep @   0.0012 msec (842000.0/sec): bcopy of 256 bytes

  47080 reps @   0.1056 msec (  9470.0/sec): bcopy of 16 kilobytes
  47080 reps @   0.1056 msec (  9470.0/sec): bcopy of 16 kilobytes
  47080 reps @   0.1057 msec (  9460.0/sec): bcopy of 16 kilobytes
  47080 reps @   0.1056 msec (  9470.0/sec): bcopy of 16 kilobytes
  47080 reps @   0.1056 msec (  9470.0/sec): bcopy of 16 kilobytes
 235400 trep @   0.1056 msec (  9470.0/sec): bcopy of 16 kilobytes

   4664 reps @   1.0685 msec (   936.0/sec): bcopy of 100 kilobytes
   4664 reps @   1.0690 msec (   935.0/sec): bcopy of 100 kilobytes
   4664 reps @   1.0688 msec (   936.0/sec): bcopy of 100 kilobytes
   4664 reps @   1.0685 msec (   936.0/sec): bcopy of 100 kilobytes
   4664 reps @   1.0953 msec (   913.0/sec): bcopy of 100 kilobytes
  23320 trep @   1.0740 msec (   931.0/sec): bcopy of 100 kilobytes

    116 reps @  39.1797 msec (    25.5/sec): bcopy of 1 megabyte
    116 reps @  38.8245 msec (    25.8/sec): bcopy of 1 megabyte
    116 reps @  37.9612 msec (    26.3/sec): bcopy of 1 megabyte
    116 reps @  37.9643 msec (    26.3/sec): bcopy of 1 megabyte
    116 reps @  37.9735 msec (    26.3/sec): bcopy of 1 megabyte
    580 trep @  38.3807 msec (    26.1/sec): bcopy of 1 megabyte

     12 reps @ 464.7179 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.0143 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 464.9558 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 465.2554 msec (    2.15/sec): bcopy of 10 megabytes
     12 reps @ 464.8997 msec (    2.15/sec): bcopy of 10 megabytes
     60 trep @ 464.9686 msec (    2.15/sec): bcopy of 10 megabytes

     20 reps @ 288.3839 msec (    3.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 288.3399 msec (    3.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 288.2504 msec (    3.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 288.3678 msec (    3.47/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 288.6411 msec (    3.46/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 288.3966 msec (    3.47/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 398.2305 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 398.1488 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 398.1656 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 398.2253 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 398.1976 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 398.1936 msec (    2.51/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 344.9460 msec (    2.90/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 345.1637 msec (    2.90/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 344.9837 msec (    2.90/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 345.9952 msec (    2.89/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 344.9666 msec (    2.90/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 345.2110 msec (    2.90/sec): bcopy of 10 megabytes (dword mis-aligned)

8072400 reps @   0.0006 msec (1640000.0/sec): bzero of 256 bytes
8072400 reps @   0.0006 msec (1640000.0/sec): bzero of 256 bytes
8072400 reps @   0.0006 msec (1640000.0/sec): bzero of 256 bytes
8072400 reps @   0.0006 msec (1640000.0/sec): bzero of 256 bytes
8072400 reps @   0.0006 msec (1640000.0/sec): bzero of 256 bytes
40362000 trep @   0.0006 msec (1640000.0/sec): bzero of 256 bytes

  53240 reps @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes
  53240 reps @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes
  53240 reps @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes
  53240 reps @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes
  53240 reps @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes
 266200 trep @   0.0938 msec ( 10700.0/sec): bzero of 16 kilobytes

   8460 reps @   0.5894 msec (  1700.0/sec): bzero of 100 kilobytes
   8460 reps @   0.5882 msec (  1700.0/sec): bzero of 100 kilobytes
   8460 reps @   0.5885 msec (  1700.0/sec): bzero of 100 kilobytes
   8460 reps @   0.5884 msec (  1700.0/sec): bzero of 100 kilobytes
   8460 reps @   0.5883 msec (  1700.0/sec): bzero of 100 kilobytes
  42300 trep @   0.5886 msec (  1700.0/sec): bzero of 100 kilobytes

    332 reps @  15.1272 msec (    66.1/sec): bzero of 1 megabyte
    332 reps @  15.1313 msec (    66.1/sec): bzero of 1 megabyte
    332 reps @  15.1518 msec (    66.0/sec): bzero of 1 megabyte
    332 reps @  15.1287 msec (    66.1/sec): bzero of 1 megabyte
    332 reps @  15.1316 msec (    66.1/sec): bzero of 1 megabyte
   1660 trep @  15.1341 msec (    66.1/sec): bzero of 1 megabyte

     36 reps @ 151.6793 msec (    6.59/sec): bzero of 10 megabytes
     36 reps @ 151.6576 msec (    6.59/sec): bzero of 10 megabytes
     36 reps @ 151.7372 msec (    6.59/sec): bzero of 10 megabytes
     36 reps @ 151.6559 msec (    6.59/sec): bzero of 10 megabytes
     36 reps @ 151.6834 msec (    6.59/sec): bzero of 10 megabytes
    180 trep @ 151.6827 msec (    6.59/sec): bzero of 10 megabytes

     36 reps @ 151.8268 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 151.7224 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 151.6635 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 151.7272 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 151.6466 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)
    180 trep @ 151.7173 msec (    6.59/sec): bzero of 10 megabytes (cacheline-aligned)

     36 reps @ 151.7879 msec (    6.59/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 151.7686 msec (    6.59/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 151.9118 msec (    6.58/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 151.7011 msec (    6.59/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 151.8038 msec (    6.59/sec): bzero of 10 megabytes (word mis-aligned)
    180 trep @ 151.7946 msec (    6.59/sec): bzero of 10 megabytes (word mis-aligned)

     36 reps @ 151.6648 msec (    6.59/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.7080 msec (    6.59/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.6772 msec (    6.59/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.7594 msec (    6.59/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 151.5597 msec (    6.60/sec): bzero of 10 megabytes (dword mis-aligned)
    180 trep @ 151.6738 msec (    6.59/sec): bzero of 10 megabytes (dword mis-aligned)

   4793 reps @   1.0404 msec (   961.0/sec): bcopy then qsort 400 32-bit integers
   4793 reps @   1.0386 msec (   963.0/sec): bcopy then qsort 400 32-bit integers
   4793 reps @   1.0386 msec (   963.0/sec): bcopy then qsort 400 32-bit integers
   4793 reps @   1.0384 msec (   963.0/sec): bcopy then qsort 400 32-bit integers
   4793 reps @   1.0386 msec (   963.0/sec): bcopy then qsort 400 32-bit integers
  23965 trep @   1.0389 msec (   963.0/sec): bcopy then qsort 400 32-bit integers

     73 reps @  69.1042 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers
     73 reps @  69.0683 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers
     73 reps @  69.0789 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers
     73 reps @  69.1373 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers
     73 reps @  69.0794 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers
    365 trep @  69.0936 msec (    14.5/sec): bcopy then qsort 16,000 32-bit integers

     16 reps @ 315.6199 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 315.7284 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 315.6626 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 315.6503 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 315.7043 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers
     80 trep @ 315.6731 msec (    3.17/sec): bcopy then qsort 64,000 32-bit integers

3655000 reps @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3655000 reps @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3655000 reps @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3655000 reps @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
3655000 reps @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
18275000 trep @   0.0009 msec (1130000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

3167500 reps @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)
3167500 reps @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)
3167500 reps @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)
3167500 reps @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)
3167500 reps @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)
15837500 trep @   0.0012 msec (849000.0/sec): basic double trigonometric function (sin/cos/tan)

 961500 reps @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 961500 reps @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 961500 reps @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 961500 reps @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 961500 reps @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4807500 trep @   0.0052 msec (193000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  13800 reps @   0.3646 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)
  13800 reps @   0.3646 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)
  13800 reps @   0.3646 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)
  13800 reps @   0.3646 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)
  13800 reps @   0.3650 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)
  69000 trep @   0.3647 msec (  2740.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  11.6795 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.6810 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.6803 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.6794 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.6791 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  11.6799 msec (    85.6/sec): Tower of Hanoi recursion test (15 deep)

 216000 reps @   0.0232 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 216000 reps @   0.0231 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 216000 reps @   0.0231 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 216000 reps @   0.0231 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 216000 reps @   0.0231 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1080000 trep @   0.0231 msec ( 43200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  51200 reps @   0.1006 msec (  9940.0/sec): write 80 bytes to a log file
  51200 reps @   0.1078 msec (  9280.0/sec): write 80 bytes to a log file
  51200 reps @   0.1211 msec (  8260.0/sec): write 80 bytes to a log file
  51200 reps @   0.1170 msec (  8540.0/sec): write 80 bytes to a log file
  51200 reps @   0.1173 msec (  8520.0/sec): write 80 bytes to a log file
 256000 trep @   0.1127 msec (  8870.0/sec): write 80 bytes to a log file

    700 reps @   7.4886 msec (   134.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   7.0913 msec (   141.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   7.3444 msec (   136.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   7.1708 msec (   139.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   7.0915 msec (   141.0/sec): per-file cost of creating 100 files then unlinking them all
   3500 trep @   7.2374 msec (   138.0/sec): per-file cost of creating 100 files then unlinking them all

  20200 reps @   0.2473 msec (  4040.0/sec): per-file cost of open and immediate close of 100 files
  20200 reps @   0.2472 msec (  4040.0/sec): per-file cost of open and immediate close of 100 files
  20200 reps @   0.2484 msec (  4030.0/sec): per-file cost of open and immediate close of 100 files
  20200 reps @   0.2444 msec (  4090.0/sec): per-file cost of open and immediate close of 100 files
  20200 reps @   0.2430 msec (  4120.0/sec): per-file cost of open and immediate close of 100 files
 101000 trep @   0.2461 msec (  4060.0/sec): per-file cost of open and immediate close of 100 files

  20400 reps @   0.1907 msec (  5240.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  20400 reps @   0.1763 msec (  5670.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  20400 reps @   0.1770 msec (  5650.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  20400 reps @   0.1763 msec (  5670.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  20400 reps @   0.1765 msec (  5670.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 102000 trep @   0.1794 msec (  5580.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 104000 reps @   0.0480 msec ( 20900.0/sec): cost of stat'ing current dir
 104000 reps @   0.0480 msec ( 20800.0/sec): cost of stat'ing current dir
 104000 reps @   0.0479 msec ( 20900.0/sec): cost of stat'ing current dir
 104000 reps @   0.0484 msec ( 20700.0/sec): cost of stat'ing current dir
 104000 reps @   0.0501 msec ( 20000.0/sec): cost of stat'ing current dir
 520000 trep @   0.0485 msec ( 20600.0/sec): cost of stat'ing current dir

  23000 reps @   0.2178 msec (  4590.0/sec): cost of stat'ing 5 component path
  23000 reps @   0.2181 msec (  4580.0/sec): cost of stat'ing 5 component path
  23000 reps @   0.2178 msec (  4590.0/sec): cost of stat'ing 5 component path
  23000 reps @   0.2178 msec (  4590.0/sec): cost of stat'ing 5 component path
  23000 reps @   0.2185 msec (  4580.0/sec): cost of stat'ing 5 component path
 115000 trep @   0.2180 msec (  4590.0/sec): cost of stat'ing 5 component path

    644 reps @   7.6989 msec (   130.0/sec): open directory and stat 100 files in it
    644 reps @   7.7015 msec (   130.0/sec): open directory and stat 100 files in it
    644 reps @   7.6964 msec (   130.0/sec): open directory and stat 100 files in it
    644 reps @   7.6996 msec (   130.0/sec): open directory and stat 100 files in it
    644 reps @   7.7111 msec (   130.0/sec): open directory and stat 100 files in it
   3220 trep @   7.7015 msec (   130.0/sec): open directory and stat 100 files in it

    800 reps @   6.9038 msec (   145.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.3491 msec (   158.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.3921 msec (   156.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.5716 msec (   152.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.3075 msec (   159.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4000 trep @   6.5048 msec (   154.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 135000 reps @   0.0367 msec ( 27200.0/sec): ndbm lookup into database with 900 entries
 135000 reps @   0.0375 msec ( 26700.0/sec): ndbm lookup into database with 900 entries
 135000 reps @   0.0363 msec ( 27600.0/sec): ndbm lookup into database with 900 entries
 135000 reps @   0.0363 msec ( 27600.0/sec): ndbm lookup into database with 900 entries
 135000 reps @   0.0363 msec ( 27600.0/sec): ndbm lookup into database with 900 entries
 675000 trep @   0.0366 msec ( 27300.0/sec): ndbm lookup into database with 900 entries

  16800 reps @   0.3014 msec (  3320.0/sec): 1 byte token passing between two processes using two pipes
  16800 reps @   0.3015 msec (  3320.0/sec): 1 byte token passing between two processes using two pipes
  16800 reps @   0.3000 msec (  3330.0/sec): 1 byte token passing between two processes using two pipes
  16800 reps @   0.3004 msec (  3330.0/sec): 1 byte token passing between two processes using two pipes
  16800 reps @   0.3023 msec (  3310.0/sec): 1 byte token passing between two processes using two pipes
  84000 trep @   0.3011 msec (  3320.0/sec): 1 byte token passing between two processes using two pipes

  14800 reps @   0.3333 msec (  3000.0/sec): 1 kilobyte token passing between two processes using two pipes
  14800 reps @   0.3343 msec (  2990.0/sec): 1 kilobyte token passing between two processes using two pipes
  14800 reps @   0.3372 msec (  2970.0/sec): 1 kilobyte token passing between two processes using two pipes
  14800 reps @   0.3375 msec (  2960.0/sec): 1 kilobyte token passing between two processes using two pipes
  14800 reps @   0.3317 msec (  3020.0/sec): 1 kilobyte token passing between two processes using two pipes
  74000 trep @   0.3348 msec (  2990.0/sec): 1 kilobyte token passing between two processes using two pipes

9184000 reps @   0.0005 msec (1840000.0/sec): setjmp/longjmp
9184000 reps @   0.0005 msec (1840000.0/sec): setjmp/longjmp
9184000 reps @   0.0005 msec (1830000.0/sec): setjmp/longjmp
9184000 reps @   0.0005 msec (1840000.0/sec): setjmp/longjmp
9184000 reps @   0.0005 msec (1840000.0/sec): setjmp/longjmp
45920000 trep @   0.0005 msec (1830000.0/sec): setjmp/longjmp

 104000 reps @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 104000 reps @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 104000 reps @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 104000 reps @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 104000 reps @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 520000 trep @   0.0491 msec ( 20400.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   1285 reps @   4.1045 msec (   244.0/sec): create/destroy client UDP-based SunRPC handle
   1285 reps @   3.9496 msec (   253.0/sec): create/destroy client UDP-based SunRPC handle
   1285 reps @   4.1109 msec (   243.0/sec): create/destroy client UDP-based SunRPC handle
   1285 reps @   4.0331 msec (   248.0/sec): create/destroy client UDP-based SunRPC handle
   1285 reps @   3.8919 msec (   257.0/sec): create/destroy client UDP-based SunRPC handle
   6425 trep @   4.0180 msec (   249.0/sec): create/destroy client UDP-based SunRPC handle

   4400 reps @   1.0879 msec (   919.0/sec): TCP-based SunRPC to negate an integer
   4400 reps @   1.1005 msec (   909.0/sec): TCP-based SunRPC to negate an integer
   4400 reps @   1.1048 msec (   905.0/sec): TCP-based SunRPC to negate an integer
   4400 reps @   1.1108 msec (   900.0/sec): TCP-based SunRPC to negate an integer
   4400 reps @   1.0583 msec (   945.0/sec): TCP-based SunRPC to negate an integer
  22000 trep @   1.0924 msec (   915.0/sec): TCP-based SunRPC to negate an integer

   2400 reps @   2.2616 msec (   442.0/sec): UDP-based SunRPC to negate an integer
   2400 reps @   2.2510 msec (   444.0/sec): UDP-based SunRPC to negate an integer
   2400 reps @   2.2465 msec (   445.0/sec): UDP-based SunRPC to negate an integer
   2400 reps @   2.2587 msec (   443.0/sec): UDP-based SunRPC to negate an integer
   2400 reps @   2.2645 msec (   442.0/sec): UDP-based SunRPC to negate an integer
  12000 trep @   2.2565 msec (   443.0/sec): UDP-based SunRPC to negate an integer

   4800 reps @   1.0540 msec (   949.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0654 msec (   939.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.1076 msec (   903.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0840 msec (   923.0/sec): TCP-based SunRPC no-op
   4800 reps @   1.0887 msec (   919.0/sec): TCP-based SunRPC no-op
  24000 trep @   1.0799 msec (   926.0/sec): TCP-based SunRPC no-op

   2400 reps @   2.2074 msec (   453.0/sec): UDP-based SunRPC no-op
   2400 reps @   2.2054 msec (   453.0/sec): UDP-based SunRPC no-op
   2400 reps @   2.2273 msec (   449.0/sec): UDP-based SunRPC no-op
   2400 reps @   2.2253 msec (   449.0/sec): UDP-based SunRPC no-op
   2400 reps @   2.2154 msec (   451.0/sec): UDP-based SunRPC no-op
  12000 trep @   2.2162 msec (   451.0/sec): UDP-based SunRPC no-op

1105000 reps @   0.0045 msec (220000.0/sec): getpid system call
1105000 reps @   0.0045 msec (221000.0/sec): getpid system call
1105000 reps @   0.0045 msec (221000.0/sec): getpid system call
1105000 reps @   0.0045 msec (221000.0/sec): getpid system call
1105000 reps @   0.0045 msec (221000.0/sec): getpid system call
5525000 trep @   0.0045 msec (221000.0/sec): getpid system call

 114500 reps @   0.0479 msec ( 20900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 114500 reps @   0.0557 msec ( 17900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 114500 reps @   0.0557 msec ( 17900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 114500 reps @   0.0557 msec ( 17900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 114500 reps @   0.0557 msec ( 17900.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 572500 trep @   0.0542 msec ( 18500.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 293600 reps @   0.0171 msec ( 58600.0/sec): gettimeofday system call
 293600 reps @   0.0171 msec ( 58500.0/sec): gettimeofday system call
 293600 reps @   0.0171 msec ( 58600.0/sec): gettimeofday system call
 293600 reps @   0.0171 msec ( 58600.0/sec): gettimeofday system call
 293600 reps @   0.0171 msec ( 58600.0/sec): gettimeofday system call
1468000 trep @   0.0171 msec ( 58600.0/sec): gettimeofday system call

    550 reps @   9.4209 msec (   106.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.3923 msec (   106.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.4848 msec (   105.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.4920 msec (   105.0/sec): fork, child immediately exits, parent waits
    550 reps @   9.4535 msec (   106.0/sec): fork, child immediately exits, parent waits
   2750 trep @   9.4487 msec (   106.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1009.9756 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9502 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9532 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9518 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1009.9586 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1009.9579 msec (    0.99/sec): sleep for one second (validates test time)

 307600 reps @   0.0163 msec ( 61300.0/sec): select on no fds with no timeout
 307600 reps @   0.0163 msec ( 61400.0/sec): select on no fds with no timeout
 307600 reps @   0.0163 msec ( 61400.0/sec): select on no fds with no timeout
 307600 reps @   0.0163 msec ( 61400.0/sec): select on no fds with no timeout
 307600 reps @   0.0163 msec ( 61400.0/sec): select on no fds with no timeout
1538000 trep @   0.0163 msec ( 61400.0/sec): select on no fds with no timeout

  95900 reps @   0.0522 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout
  95900 reps @   0.0522 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout
  95900 reps @   0.0522 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout
  95900 reps @   0.0521 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout
  95900 reps @   0.0522 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout
 479500 trep @   0.0522 msec ( 19200.0/sec): select on 16 pipe read fds with immediate timeout

  55600 reps @   0.0892 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout
  55600 reps @   0.0892 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout
  55600 reps @   0.0894 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout
  55600 reps @   0.0894 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout
  55600 reps @   0.0892 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout
 278000 trep @   0.0893 msec ( 11200.0/sec): select on 32 pipe read fds with immediate timeout

  93100 reps @   0.0536 msec ( 18700.0/sec): select on 16 pipe write fds with immediate timeout
  93100 reps @   0.0536 msec ( 18700.0/sec): select on 16 pipe write fds with immediate timeout
  93100 reps @   0.0537 msec ( 18600.0/sec): select on 16 pipe write fds with immediate timeout
  93100 reps @   0.0536 msec ( 18700.0/sec): select on 16 pipe write fds with immediate timeout
  93100 reps @   0.0536 msec ( 18700.0/sec): select on 16 pipe write fds with immediate timeout
 465500 trep @   0.0536 msec ( 18600.0/sec): select on 16 pipe write fds with immediate timeout

  93500 reps @   0.0537 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout
  93500 reps @   0.0537 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout
  93500 reps @   0.0537 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout
  93500 reps @   0.0536 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout
  93500 reps @   0.0537 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout
 467500 trep @   0.0537 msec ( 18600.0/sec): select on 32 pipe write fds with immediate timeout

  13900 reps @   0.3601 msec (  2780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  13900 reps @   0.3608 msec (  2770.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  13900 reps @   0.3608 msec (  2770.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  13900 reps @   0.3602 msec (  2780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  13900 reps @   0.3603 msec (  2780.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  69500 trep @   0.3604 msec (  2770.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    180 reps @  29.2456 msec (    34.2/sec): popen and read from "/bin/echo hello"
    180 reps @  29.2451 msec (    34.2/sec): popen and read from "/bin/echo hello"
    180 reps @  29.0984 msec (    34.4/sec): popen and read from "/bin/echo hello"
    180 reps @  29.0964 msec (    34.4/sec): popen and read from "/bin/echo hello"
    180 reps @  29.2592 msec (    34.2/sec): popen and read from "/bin/echo hello"
    900 trep @  29.1889 msec (    34.3/sec): popen and read from "/bin/echo hello"

  21500 reps @   0.2253 msec (  4440.0/sec): mmap megabyte /dev/zero region 
  21500 reps @   0.2237 msec (  4470.0/sec): mmap megabyte /dev/zero region 
  21500 reps @   0.2238 msec (  4470.0/sec): mmap megabyte /dev/zero region 
  21500 reps @   0.2242 msec (  4460.0/sec): mmap megabyte /dev/zero region 
  21500 reps @   0.2237 msec (  4470.0/sec): mmap megabyte /dev/zero region 
 107500 trep @   0.2242 msec (  4460.0/sec): mmap megabyte /dev/zero region 

    246 reps @  20.0219 msec (    49.9/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    246 reps @  20.0342 msec (    49.9/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    246 reps @  20.0121 msec (    50.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    246 reps @  20.0106 msec (    50.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    246 reps @  20.0492 msec (    49.9/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1230 trep @  20.0256 msec (    49.9/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    413 reps @  12.1451 msec (    82.3/sec): copy every byte of newly mmaped megabyte file
    413 reps @  12.1499 msec (    82.3/sec): copy every byte of newly mmaped megabyte file
    413 reps @  12.6010 msec (    79.4/sec): copy every byte of newly mmaped megabyte file
    413 reps @  12.6832 msec (    78.8/sec): copy every byte of newly mmaped megabyte file
    413 reps @  12.6976 msec (    78.8/sec): copy every byte of newly mmaped megabyte file
   2065 trep @  12.4554 msec (    80.3/sec): copy every byte of newly mmaped megabyte file

     32 reps @ 151.9843 msec (    6.58/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 165.9662 msec (    6.03/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 151.1496 msec (    6.62/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 170.4559 msec (    5.87/sec): compress & uncompress 52 kilobyte text file of numbers
     32 reps @ 150.6226 msec (    6.64/sec): compress & uncompress 52 kilobyte text file of numbers
    160 trep @ 158.0357 msec (    6.33/sec): compress & uncompress 52 kilobyte text file of numbers

     16 reps @ 360.5870 msec (    2.77/sec): compile ANSI C `hello world' with no special options
     16 reps @ 355.7521 msec (    2.81/sec): compile ANSI C `hello world' with no special options
     16 reps @ 356.4859 msec (    2.81/sec): compile ANSI C `hello world' with no special options
     16 reps @ 355.1137 msec (    2.82/sec): compile ANSI C `hello world' with no special options
     16 reps @ 355.3069 msec (    2.81/sec): compile ANSI C `hello world' with no special options
     80 trep @ 356.6491 msec (    2.80/sec): compile ANSI C `hello world' with no special options

     12 reps @ 453.9157 msec (    2.20/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 385.0370 msec (    2.60/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 392.7072 msec (    2.55/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 400.3382 msec (    2.50/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     12 reps @ 441.0233 msec (    2.27/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     60 trep @ 414.6043 msec (    2.41/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     16 reps @ 395.0273 msec (    2.53/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 410.6089 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 416.7493 msec (    2.40/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 435.5074 msec (    2.30/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     16 reps @ 394.1589 msec (    2.54/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     80 trep @ 410.4104 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     12 reps @ 371.5347 msec (    2.69/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 452.5545 msec (    2.21/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 340.5830 msec (    2.94/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 468.1569 msec (    2.14/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     12 reps @ 430.1342 msec (    2.32/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     60 trep @ 412.5926 msec (    2.42/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     16 reps @ 410.2334 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 424.1735 msec (    2.36/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 394.6209 msec (    2.53/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 403.3218 msec (    2.48/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     16 reps @ 411.2267 msec (    2.43/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     80 trep @ 408.7153 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 413.8264 msec (    2.42/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 413.6610 msec (    2.42/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 411.8943 msec (    2.43/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 396.8475 msec (    2.52/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 405.3352 msec (    2.47/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 408.3129 msec (    2.45/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     16 reps @ 416.3521 msec (    2.40/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 400.0368 msec (    2.50/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 417.6384 msec (    2.39/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 392.7951 msec (    2.55/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     16 reps @ 423.1051 msec (    2.36/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 trep @ 409.9855 msec (    2.44/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 4069.6655 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4101.9300 msec (    0.24/sec): use dc to output first 1,000 factorials
      2 reps @ 4065.6385 msec (    0.25/sec): use dc to output first 1,000 factorials
      2 reps @ 4079.3085 msec (    0.24/sec): use dc to output first 1,000 factorials
      2 reps @ 4074.6965 msec (    0.24/sec): use dc to output first 1,000 factorials
     10 trep @ 4078.2478 msec (    0.24/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0100 msec (100000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0098 msec (102000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  28332 reps @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree
  28332 reps @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree
  28332 reps @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree
  28332 reps @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree
  28332 reps @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree
 141660 trep @   0.1764 msec (  5670.0/sec): use regcomp to compile 51 char literal, then regfree

      3 reps @ 2050.7517 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 2050.3877 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 2050.5910 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 2050.3767 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text
      3 reps @ 2050.5717 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text
     15 trep @ 2050.5357 msec (    0.49/sec): use regexec with 51 char literal to search 142 kilobyte text

  34808 reps @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree
  34808 reps @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree
  34808 reps @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree
  34808 reps @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree
  34808 reps @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree
 174040 trep @   0.1436 msec (  6960.0/sec): use regcomp to compile long .* pattern, then regfree

      5 reps @ 1187.3454 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text
      5 reps @ 1187.3338 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text
      5 reps @ 1187.2232 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text
      5 reps @ 1187.2286 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text
      5 reps @ 1187.2406 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text
     25 trep @ 1187.2743 msec (    0.84/sec): use regexec with long .* pattern to search 142 kilobyte text

