UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: is
Operating system: IRIX64 6.4
Compiler version: 7.1
Instruction set: MIPS 4
Application binary interface: N32
FPU: MIPS R10010 Floating Point Chip Revision: 0.0
CPU: MIPS R10000 Processor Chip Revision: 2.6
8 195 MHZ IP27 Processors
Main memory size: 1152 Mbytes
Instruction cache size: 32 Kbytes
Data cache size: 32 Kbytes
Secondary unified instruction/data cache size: 4 Mbytes
Integral SCSI controller 0: Version QL1040B
  Disk drive: unit 1 on SCSI controller 0
  Disk drive: unit 2 on SCSI controller 0
  Disk drive: unit 3 on SCSI controller 0
  Disk drive: unit 4 on SCSI controller 0
  Disk drive: unit 5 on SCSI controller 0
Integral SCSI controller 1: Version QL1040B
  CDROM: unit 5 on SCSI controller 1
  Tape drive: unit 6 on SCSI controller 1: DAT
  Tape drive: unit 7 on SCSI controller 1: QIC 150
Integral SCSI controller 2: Version QL1040B
Integral SCSI controller 3: Version QL1040B
Integral SCSI controller 4: Version QL1040B
Integral SCSI controller 5: Version QL1040B
IOC3 serial port: tty1
IOC3 serial port: tty2
IOC3 serial port: tty3
IOC3 serial port: tty4
IOC3 parallel port: plp1
Graphics board: InfiniteReality2
HIPPI-Serial adapter: unit 1, in module 1 I/O slot 8
Integral Fast Ethernet: ef0, version 1
HIPPI-Serial adapter: unit 0, in module 1 I/O slot 4
Iris Audio Processor: version RAD revision 7.0, number 1
IOC3 external interrupts: 1
Uptime: 12:55
Users: 2
Load average: 0.00, 0.00, 0.00
File IO test directory: /usr/tmp
File IO test filesystem: xfs (1915.61 MB total, 93.64 MB available)
Date: Wed Feb 19 01:13:55 1997

7546032 reps @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply
7546032 reps @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply
7546032 reps @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply
7546032 reps @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply
7546032 reps @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply
37730160 trep @   0.0007 msec (1510000.0/sec): 4 by 4 double matrix multiply

7108536 reps @   0.0007 msec (1500000.0/sec): 4 by 4 float matrix multiply
7108536 reps @   0.0007 msec (1500000.0/sec): 4 by 4 float matrix multiply
7108536 reps @   0.0007 msec (1500000.0/sec): 4 by 4 float matrix multiply
7108536 reps @   0.0007 msec (1500000.0/sec): 4 by 4 float matrix multiply
7108536 reps @   0.0006 msec (1540000.0/sec): 4 by 4 float matrix multiply
35542680 trep @   0.0007 msec (1510000.0/sec): 4 by 4 float matrix multiply

 303000 reps @   0.0165 msec ( 60500.0/sec): recurse 250 simple function calls and return
 303000 reps @   0.0165 msec ( 60600.0/sec): recurse 250 simple function calls and return
 303000 reps @   0.0165 msec ( 60500.0/sec): recurse 250 simple function calls and return
 303000 reps @   0.0165 msec ( 60600.0/sec): recurse 250 simple function calls and return
 303000 reps @   0.0165 msec ( 60500.0/sec): recurse 250 simple function calls and return
1515000 trep @   0.0165 msec ( 60600.0/sec): recurse 250 simple function calls and return

9342400 reps @   0.0005 msec (1830000.0/sec): bcopy of 256 bytes
9342400 reps @   0.0005 msec (1840000.0/sec): bcopy of 256 bytes
9342400 reps @   0.0005 msec (1820000.0/sec): bcopy of 256 bytes
9342400 reps @   0.0005 msec (1840000.0/sec): bcopy of 256 bytes
9342400 reps @   0.0005 msec (1820000.0/sec): bcopy of 256 bytes
46712000 trep @   0.0005 msec (1830000.0/sec): bcopy of 256 bytes

 192440 reps @   0.0260 msec ( 38500.0/sec): bcopy of 16 kilobytes
 192440 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 192440 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 192440 reps @   0.0259 msec ( 38600.0/sec): bcopy of 16 kilobytes
 192440 reps @   0.0265 msec ( 37700.0/sec): bcopy of 16 kilobytes
 962200 trep @   0.0260 msec ( 38400.0/sec): bcopy of 16 kilobytes

  16240 reps @   0.3065 msec (  3260.0/sec): bcopy of 100 kilobytes
  16240 reps @   0.3065 msec (  3260.0/sec): bcopy of 100 kilobytes
  16240 reps @   0.3063 msec (  3260.0/sec): bcopy of 100 kilobytes
  16240 reps @   0.3065 msec (  3260.0/sec): bcopy of 100 kilobytes
  16240 reps @   0.3074 msec (  3250.0/sec): bcopy of 100 kilobytes
  81200 trep @   0.3066 msec (  3260.0/sec): bcopy of 100 kilobytes

   1152 reps @   4.4724 msec (   224.0/sec): bcopy of 1 megabyte
   1152 reps @   4.4074 msec (   227.0/sec): bcopy of 1 megabyte
   1152 reps @   3.7101 msec (   270.0/sec): bcopy of 1 megabyte
   1152 reps @   4.4754 msec (   223.0/sec): bcopy of 1 megabyte
   1152 reps @   4.4363 msec (   225.0/sec): bcopy of 1 megabyte
   5760 trep @   4.3003 msec (   233.0/sec): bcopy of 1 megabyte

     48 reps @  92.6794 msec (    10.8/sec): bcopy of 10 megabytes
     48 reps @  92.8824 msec (    10.8/sec): bcopy of 10 megabytes
     48 reps @  92.6636 msec (    10.8/sec): bcopy of 10 megabytes
     48 reps @  92.6831 msec (    10.8/sec): bcopy of 10 megabytes
     48 reps @  92.7061 msec (    10.8/sec): bcopy of 10 megabytes
    240 trep @  92.7229 msec (    10.8/sec): bcopy of 10 megabytes

     60 reps @  86.7544 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)
     60 reps @  86.8174 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)
     60 reps @  86.7652 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)
     60 reps @  86.7528 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)
     60 reps @  86.8704 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)
    300 trep @  86.7920 msec (    11.5/sec): bcopy of 10 megabytes (cacheline-aligned)

     60 reps @  86.7649 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)
     60 reps @  86.7494 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)
     60 reps @  86.9686 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)
     60 reps @  86.6725 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)
     60 reps @  86.7945 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)
    300 trep @  86.7900 msec (    11.5/sec): bcopy of 10 megabytes (word mis-aligned)

     60 reps @  88.2423 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  88.7015 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  88.2756 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  88.5717 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)
     60 reps @  88.2089 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)
    300 trep @  88.4000 msec (    11.3/sec): bcopy of 10 megabytes (dword mis-aligned)

15426400 reps @   0.0003 msec (3100000.0/sec): bzero of 256 bytes
15426400 reps @   0.0003 msec (3180000.0/sec): bzero of 256 bytes
15426400 reps @   0.0003 msec (3220000.0/sec): bzero of 256 bytes
15426400 reps @   0.0003 msec (3220000.0/sec): bzero of 256 bytes
15426400 reps @   0.0003 msec (3220000.0/sec): bzero of 256 bytes
77132000 trep @   0.0003 msec (3190000.0/sec): bzero of 256 bytes

 336560 reps @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes
 336560 reps @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes
 336560 reps @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes
 336560 reps @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes
 336560 reps @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes
1682800 trep @   0.0147 msec ( 68000.0/sec): bzero of 16 kilobytes

  24684 reps @   0.2022 msec (  4950.0/sec): bzero of 100 kilobytes
  24684 reps @   0.2021 msec (  4950.0/sec): bzero of 100 kilobytes
  24684 reps @   0.2021 msec (  4950.0/sec): bzero of 100 kilobytes
  24684 reps @   0.2022 msec (  4950.0/sec): bzero of 100 kilobytes
  24684 reps @   0.2021 msec (  4950.0/sec): bzero of 100 kilobytes
 123420 trep @   0.2021 msec (  4950.0/sec): bzero of 100 kilobytes

   2440 reps @   2.0539 msec (   487.0/sec): bzero of 1 megabyte
   2440 reps @   2.0759 msec (   482.0/sec): bzero of 1 megabyte
   2440 reps @   2.1295 msec (   470.0/sec): bzero of 1 megabyte
   2440 reps @   2.1324 msec (   469.0/sec): bzero of 1 megabyte
   2440 reps @   2.1404 msec (   467.0/sec): bzero of 1 megabyte
  12200 trep @   2.1064 msec (   475.0/sec): bzero of 1 megabyte

    108 reps @  45.3044 msec (    22.1/sec): bzero of 10 megabytes
    108 reps @  45.2586 msec (    22.1/sec): bzero of 10 megabytes
    108 reps @  45.2582 msec (    22.1/sec): bzero of 10 megabytes
    108 reps @  45.1758 msec (    22.1/sec): bzero of 10 megabytes
    108 reps @  45.1021 msec (    22.2/sec): bzero of 10 megabytes
    540 trep @  45.2198 msec (    22.1/sec): bzero of 10 megabytes

    104 reps @  45.4131 msec (    22.0/sec): bzero of 10 megabytes (cacheline-aligned)
    104 reps @  45.3774 msec (    22.0/sec): bzero of 10 megabytes (cacheline-aligned)
    104 reps @  45.6319 msec (    21.9/sec): bzero of 10 megabytes (cacheline-aligned)
    104 reps @  45.5970 msec (    21.9/sec): bzero of 10 megabytes (cacheline-aligned)
    104 reps @  45.4927 msec (    22.0/sec): bzero of 10 megabytes (cacheline-aligned)
    520 trep @  45.5024 msec (    22.0/sec): bzero of 10 megabytes (cacheline-aligned)

    112 reps @  45.0755 msec (    22.2/sec): bzero of 10 megabytes (word mis-aligned)
    112 reps @  45.1859 msec (    22.1/sec): bzero of 10 megabytes (word mis-aligned)
    112 reps @  44.9614 msec (    22.2/sec): bzero of 10 megabytes (word mis-aligned)
    112 reps @  44.9355 msec (    22.3/sec): bzero of 10 megabytes (word mis-aligned)
    112 reps @  45.2800 msec (    22.1/sec): bzero of 10 megabytes (word mis-aligned)
    560 trep @  45.0877 msec (    22.2/sec): bzero of 10 megabytes (word mis-aligned)

    112 reps @  45.1956 msec (    22.1/sec): bzero of 10 megabytes (dword mis-aligned)
    112 reps @  45.3871 msec (    22.0/sec): bzero of 10 megabytes (dword mis-aligned)
    112 reps @  45.3117 msec (    22.1/sec): bzero of 10 megabytes (dword mis-aligned)
    112 reps @  45.3475 msec (    22.1/sec): bzero of 10 megabytes (dword mis-aligned)
    112 reps @  45.4365 msec (    22.0/sec): bzero of 10 megabytes (dword mis-aligned)
    560 trep @  45.3357 msec (    22.1/sec): bzero of 10 megabytes (dword mis-aligned)

  10672 reps @   0.4642 msec (  2150.0/sec): bcopy then qsort 400 32-bit integers
  10672 reps @   0.4642 msec (  2150.0/sec): bcopy then qsort 400 32-bit integers
  10672 reps @   0.4629 msec (  2160.0/sec): bcopy then qsort 400 32-bit integers
  10672 reps @   0.4647 msec (  2150.0/sec): bcopy then qsort 400 32-bit integers
  10672 reps @   0.4643 msec (  2150.0/sec): bcopy then qsort 400 32-bit integers
  53360 trep @   0.4641 msec (  2150.0/sec): bcopy then qsort 400 32-bit integers

    168 reps @  29.6591 msec (    33.7/sec): bcopy then qsort 16,000 32-bit integers
    168 reps @  29.5810 msec (    33.8/sec): bcopy then qsort 16,000 32-bit integers
    168 reps @  29.5949 msec (    33.8/sec): bcopy then qsort 16,000 32-bit integers
    168 reps @  29.6337 msec (    33.7/sec): bcopy then qsort 16,000 32-bit integers
    168 reps @  28.5973 msec (    35.0/sec): bcopy then qsort 16,000 32-bit integers
    840 trep @  29.4132 msec (    34.0/sec): bcopy then qsort 16,000 32-bit integers

     37 reps @ 131.5135 msec (    7.60/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 131.8679 msec (    7.58/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 131.8783 msec (    7.58/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 132.0662 msec (    7.57/sec): bcopy then qsort 64,000 32-bit integers
     37 reps @ 131.4013 msec (    7.61/sec): bcopy then qsort 64,000 32-bit integers
    185 trep @ 131.7454 msec (    7.59/sec): bcopy then qsort 64,000 32-bit integers

25060000 reps @   0.0002 msec (5020000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25060000 reps @   0.0002 msec (5010000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25060000 reps @   0.0002 msec (5010000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25060000 reps @   0.0002 msec (5010000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
25060000 reps @   0.0002 msec (5020000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
125300000 trep @   0.0002 msec (5010000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

21640000 reps @   0.0002 msec (4340000.0/sec): basic double trigonometric function (sin/cos/tan)
21640000 reps @   0.0002 msec (4340000.0/sec): basic double trigonometric function (sin/cos/tan)
21640000 reps @   0.0002 msec (4340000.0/sec): basic double trigonometric function (sin/cos/tan)
21640000 reps @   0.0002 msec (4330000.0/sec): basic double trigonometric function (sin/cos/tan)
21640000 reps @   0.0002 msec (4260000.0/sec): basic double trigonometric function (sin/cos/tan)
108200000 trep @   0.0002 msec (4320000.0/sec): basic double trigonometric function (sin/cos/tan)

2040000 reps @   0.0024 msec (409000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2040000 reps @   0.0024 msec (411000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2040000 reps @   0.0024 msec (411000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2040000 reps @   0.0024 msec (410000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
2040000 reps @   0.0024 msec (410000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
10200000 trep @   0.0024 msec (410000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  25500 reps @   0.1966 msec (  5090.0/sec): Tower of Hanoi recursion test (10 deep)
  25500 reps @   0.1967 msec (  5090.0/sec): Tower of Hanoi recursion test (10 deep)
  25500 reps @   0.1967 msec (  5080.0/sec): Tower of Hanoi recursion test (10 deep)
  25500 reps @   0.1966 msec (  5090.0/sec): Tower of Hanoi recursion test (10 deep)
  25500 reps @   0.1967 msec (  5090.0/sec): Tower of Hanoi recursion test (10 deep)
 127500 trep @   0.1967 msec (  5090.0/sec): Tower of Hanoi recursion test (10 deep)

    900 reps @   6.3457 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.3434 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.3430 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.3462 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)
    900 reps @   6.3437 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)
   4500 trep @   6.3444 msec (   158.0/sec): Tower of Hanoi recursion test (15 deep)

 640500 reps @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 640500 reps @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 640500 reps @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 640500 reps @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 640500 reps @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
3202500 trep @   0.0078 msec (128000.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

 176800 reps @   0.0285 msec ( 35000.0/sec): write 80 bytes to a log file
 176800 reps @   0.0310 msec ( 32300.0/sec): write 80 bytes to a log file
 176800 reps @   0.0348 msec ( 28700.0/sec): write 80 bytes to a log file
 176800 reps @   0.0355 msec ( 28200.0/sec): write 80 bytes to a log file
 176800 reps @   0.0369 msec ( 27100.0/sec): write 80 bytes to a log file
 884000 trep @   0.0333 msec ( 30000.0/sec): write 80 bytes to a log file

    800 reps @   7.9885 msec (   125.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   7.5081 msec (   133.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   7.5124 msec (   133.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   7.4668 msec (   134.0/sec): per-file cost of creating 100 files then unlinking them all
    800 reps @   7.1415 msec (   140.0/sec): per-file cost of creating 100 files then unlinking them all
   4000 trep @   7.5234 msec (   133.0/sec): per-file cost of creating 100 files then unlinking them all

  51500 reps @   0.0976 msec ( 10200.0/sec): per-file cost of open and immediate close of 100 files
  51500 reps @   0.0978 msec ( 10200.0/sec): per-file cost of open and immediate close of 100 files
  51500 reps @   0.0978 msec ( 10200.0/sec): per-file cost of open and immediate close of 100 files
  51500 reps @   0.0959 msec ( 10400.0/sec): per-file cost of open and immediate close of 100 files
  51500 reps @   0.0935 msec ( 10700.0/sec): per-file cost of open and immediate close of 100 files
 257500 trep @   0.0965 msec ( 10400.0/sec): per-file cost of open and immediate close of 100 files

  25800 reps @   0.1330 msec (  7520.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  25800 reps @   0.1209 msec (  8270.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  25800 reps @   0.1216 msec (  8220.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  25800 reps @   0.1231 msec (  8120.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  25800 reps @   0.1213 msec (  8250.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 129000 trep @   0.1240 msec (  8070.0/sec): per-chmod cost of chmod permissions toggle of 100 files

 294000 reps @   0.0170 msec ( 58900.0/sec): cost of stat'ing current dir
 294000 reps @   0.0165 msec ( 60500.0/sec): cost of stat'ing current dir
 294000 reps @   0.0183 msec ( 54700.0/sec): cost of stat'ing current dir
 294000 reps @   0.0177 msec ( 56300.0/sec): cost of stat'ing current dir
 294000 reps @   0.0186 msec ( 53700.0/sec): cost of stat'ing current dir
1470000 trep @   0.0176 msec ( 56700.0/sec): cost of stat'ing current dir

  59500 reps @   0.0836 msec ( 12000.0/sec): cost of stat'ing 5 component path
  59500 reps @   0.0848 msec ( 11800.0/sec): cost of stat'ing 5 component path
  59500 reps @   0.0846 msec ( 11800.0/sec): cost of stat'ing 5 component path
  59500 reps @   0.0838 msec ( 11900.0/sec): cost of stat'ing 5 component path
  59500 reps @   0.0838 msec ( 11900.0/sec): cost of stat'ing 5 component path
 297500 trep @   0.0841 msec ( 11900.0/sec): cost of stat'ing 5 component path

   1929 reps @   2.6365 msec (   379.0/sec): open directory and stat 100 files in it
   1929 reps @   2.7150 msec (   368.0/sec): open directory and stat 100 files in it
   1929 reps @   2.6705 msec (   374.0/sec): open directory and stat 100 files in it
   1929 reps @   2.5297 msec (   395.0/sec): open directory and stat 100 files in it
   1929 reps @   2.4962 msec (   401.0/sec): open directory and stat 100 files in it
   9645 trep @   2.6096 msec (   383.0/sec): open directory and stat 100 files in it

    800 reps @   7.4204 msec (   135.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.8640 msec (   171.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   5.9074 msec (   169.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.2574 msec (   160.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    800 reps @   6.0342 msec (   166.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4000 trep @   6.2967 msec (   159.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 353700 reps @   0.0142 msec ( 70600.0/sec): ndbm lookup into database with 900 entries
 353700 reps @   0.0142 msec ( 70600.0/sec): ndbm lookup into database with 900 entries
 353700 reps @   0.0142 msec ( 70500.0/sec): ndbm lookup into database with 900 entries
 353700 reps @   0.0142 msec ( 70700.0/sec): ndbm lookup into database with 900 entries
 353700 reps @   0.0137 msec ( 72800.0/sec): ndbm lookup into database with 900 entries
1768500 trep @   0.0141 msec ( 71000.0/sec): ndbm lookup into database with 900 entries

  36800 reps @   0.1444 msec (  6920.0/sec): 1 byte token passing between two processes using two pipes
  36800 reps @   0.1461 msec (  6840.0/sec): 1 byte token passing between two processes using two pipes
  36800 reps @   0.1469 msec (  6810.0/sec): 1 byte token passing between two processes using two pipes
  36800 reps @   0.1462 msec (  6840.0/sec): 1 byte token passing between two processes using two pipes
  36800 reps @   0.1446 msec (  6910.0/sec): 1 byte token passing between two processes using two pipes
 184000 trep @   0.1457 msec (  6870.0/sec): 1 byte token passing between two processes using two pipes

  30000 reps @   0.1637 msec (  6110.0/sec): 1 kilobyte token passing between two processes using two pipes
  30000 reps @   0.1607 msec (  6220.0/sec): 1 kilobyte token passing between two processes using two pipes
  30000 reps @   0.1668 msec (  6000.0/sec): 1 kilobyte token passing between two processes using two pipes
  30000 reps @   0.1643 msec (  6090.0/sec): 1 kilobyte token passing between two processes using two pipes
  30000 reps @   0.1636 msec (  6110.0/sec): 1 kilobyte token passing between two processes using two pipes
 150000 trep @   0.1638 msec (  6100.0/sec): 1 kilobyte token passing between two processes using two pipes

11796000 reps @   0.0004 msec (2370000.0/sec): setjmp/longjmp
11796000 reps @   0.0004 msec (2410000.0/sec): setjmp/longjmp
11796000 reps @   0.0004 msec (2470000.0/sec): setjmp/longjmp
11796000 reps @   0.0004 msec (2460000.0/sec): setjmp/longjmp
11796000 reps @   0.0004 msec (2470000.0/sec): setjmp/longjmp
58980000 trep @   0.0004 msec (2440000.0/sec): setjmp/longjmp

 256000 reps @   0.0196 msec ( 50900.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 256000 reps @   0.0196 msec ( 51000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 256000 reps @   0.0196 msec ( 50900.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 256000 reps @   0.0196 msec ( 51000.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 256000 reps @   0.0196 msec ( 50900.0/sec): sigsetjmp/siglongjmp (saving signal mask)
1280000 trep @   0.0196 msec ( 51000.0/sec): sigsetjmp/siglongjmp (saving signal mask)

   5390 reps @   0.9904 msec (  1010.0/sec): create/destroy client UDP-based SunRPC handle
   5390 reps @   0.9813 msec (  1020.0/sec): create/destroy client UDP-based SunRPC handle
   5390 reps @   0.9869 msec (  1010.0/sec): create/destroy client UDP-based SunRPC handle
   5390 reps @   0.9860 msec (  1010.0/sec): create/destroy client UDP-based SunRPC handle
   5390 reps @   0.9778 msec (  1020.0/sec): create/destroy client UDP-based SunRPC handle
  26950 trep @   0.9845 msec (  1020.0/sec): create/destroy client UDP-based SunRPC handle

  10800 reps @   0.4711 msec (  2120.0/sec): TCP-based SunRPC to negate an integer
  10800 reps @   0.4936 msec (  2030.0/sec): TCP-based SunRPC to negate an integer
  10800 reps @   0.5027 msec (  1990.0/sec): TCP-based SunRPC to negate an integer
  10800 reps @   0.5038 msec (  1990.0/sec): TCP-based SunRPC to negate an integer
  10800 reps @   0.4767 msec (  2100.0/sec): TCP-based SunRPC to negate an integer
  54000 trep @   0.4896 msec (  2040.0/sec): TCP-based SunRPC to negate an integer

  11200 reps @   0.4707 msec (  2120.0/sec): UDP-based SunRPC to negate an integer
  11200 reps @   0.4493 msec (  2230.0/sec): UDP-based SunRPC to negate an integer
  11200 reps @   0.4611 msec (  2170.0/sec): UDP-based SunRPC to negate an integer
  11200 reps @   0.4637 msec (  2160.0/sec): UDP-based SunRPC to negate an integer
  11200 reps @   0.4745 msec (  2110.0/sec): UDP-based SunRPC to negate an integer
  56000 trep @   0.4639 msec (  2160.0/sec): UDP-based SunRPC to negate an integer

  10000 reps @   0.5139 msec (  1950.0/sec): TCP-based SunRPC no-op
  10000 reps @   0.4995 msec (  2000.0/sec): TCP-based SunRPC no-op
  10000 reps @   0.5133 msec (  1950.0/sec): TCP-based SunRPC no-op
  10000 reps @   0.5090 msec (  1960.0/sec): TCP-based SunRPC no-op
  10000 reps @   0.5176 msec (  1930.0/sec): TCP-based SunRPC no-op
  50000 trep @   0.5107 msec (  1960.0/sec): TCP-based SunRPC no-op

  10400 reps @   0.4788 msec (  2090.0/sec): UDP-based SunRPC no-op
  10400 reps @   0.4760 msec (  2100.0/sec): UDP-based SunRPC no-op
  10400 reps @   0.4941 msec (  2020.0/sec): UDP-based SunRPC no-op
  10400 reps @   0.4959 msec (  2020.0/sec): UDP-based SunRPC no-op
  10400 reps @   0.4852 msec (  2060.0/sec): UDP-based SunRPC no-op
  52000 trep @   0.4860 msec (  2060.0/sec): UDP-based SunRPC no-op

2230500 reps @   0.0022 msec (445000.0/sec): getpid system call
2230500 reps @   0.0022 msec (445000.0/sec): getpid system call
2230500 reps @   0.0022 msec (445000.0/sec): getpid system call
2230500 reps @   0.0022 msec (445000.0/sec): getpid system call
2230500 reps @   0.0022 msec (445000.0/sec): getpid system call
11152500 trep @   0.0022 msec (445000.0/sec): getpid system call

 262000 reps @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 262000 reps @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 262000 reps @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 262000 reps @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 262000 reps @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
1310000 trep @   0.0191 msec ( 52400.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 863200 reps @   0.0058 msec (173000.0/sec): gettimeofday system call
 863200 reps @   0.0058 msec (174000.0/sec): gettimeofday system call
 863200 reps @   0.0058 msec (173000.0/sec): gettimeofday system call
 863200 reps @   0.0055 msec (182000.0/sec): gettimeofday system call
 863200 reps @   0.0052 msec (194000.0/sec): gettimeofday system call
4316000 trep @   0.0056 msec (179000.0/sec): gettimeofday system call

    600 reps @   8.0109 msec (   125.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.0573 msec (   124.0/sec): fork, child immediately exits, parent waits
    600 reps @   7.8684 msec (   127.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.0200 msec (   125.0/sec): fork, child immediately exits, parent waits
    600 reps @   8.0154 msec (   125.0/sec): fork, child immediately exits, parent waits
   3000 trep @   7.9944 msec (   125.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.3502 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.3452 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.3474 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.3472 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.3468 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.3474 msec (    0.99/sec): sleep for one second (validates test time)

 914500 reps @   0.0055 msec (182000.0/sec): select on no fds with no timeout
 914500 reps @   0.0055 msec (182000.0/sec): select on no fds with no timeout
 914500 reps @   0.0055 msec (182000.0/sec): select on no fds with no timeout
 914500 reps @   0.0056 msec (179000.0/sec): select on no fds with no timeout
 914500 reps @   0.0057 msec (176000.0/sec): select on no fds with no timeout
4572500 trep @   0.0055 msec (180000.0/sec): select on no fds with no timeout

 215000 reps @   0.0233 msec ( 43000.0/sec): select on 16 pipe read fds with immediate timeout
 215000 reps @   0.0232 msec ( 43100.0/sec): select on 16 pipe read fds with immediate timeout
 215000 reps @   0.0232 msec ( 43000.0/sec): select on 16 pipe read fds with immediate timeout
 215000 reps @   0.0232 msec ( 43000.0/sec): select on 16 pipe read fds with immediate timeout
 215000 reps @   0.0233 msec ( 43000.0/sec): select on 16 pipe read fds with immediate timeout
1075000 trep @   0.0232 msec ( 43000.0/sec): select on 16 pipe read fds with immediate timeout

 120800 reps @   0.0414 msec ( 24100.0/sec): select on 32 pipe read fds with immediate timeout
 120800 reps @   0.0414 msec ( 24100.0/sec): select on 32 pipe read fds with immediate timeout
 120800 reps @   0.0415 msec ( 24100.0/sec): select on 32 pipe read fds with immediate timeout
 120800 reps @   0.0416 msec ( 24000.0/sec): select on 32 pipe read fds with immediate timeout
 120800 reps @   0.0415 msec ( 24100.0/sec): select on 32 pipe read fds with immediate timeout
 604000 trep @   0.0415 msec ( 24100.0/sec): select on 32 pipe read fds with immediate timeout

 210700 reps @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout
 210700 reps @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout
 210700 reps @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout
 210700 reps @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout
 210700 reps @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout
1053500 trep @   0.0237 msec ( 42200.0/sec): select on 16 pipe write fds with immediate timeout

 210800 reps @   0.0237 msec ( 42200.0/sec): select on 32 pipe write fds with immediate timeout
 210800 reps @   0.0238 msec ( 42100.0/sec): select on 32 pipe write fds with immediate timeout
 210800 reps @   0.0238 msec ( 42100.0/sec): select on 32 pipe write fds with immediate timeout
 210800 reps @   0.0237 msec ( 42100.0/sec): select on 32 pipe write fds with immediate timeout
 210800 reps @   0.0237 msec ( 42100.0/sec): select on 32 pipe write fds with immediate timeout
1054000 trep @   0.0237 msec ( 42100.0/sec): select on 32 pipe write fds with immediate timeout

  28000 reps @   0.1786 msec (  5600.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  28000 reps @   0.1774 msec (  5640.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  28000 reps @   0.1780 msec (  5620.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  28000 reps @   0.1772 msec (  5640.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  28000 reps @   0.1774 msec (  5640.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
 140000 trep @   0.1777 msec (  5630.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    300 reps @  16.0623 msec (    62.3/sec): popen and read from "/bin/echo hello"
    300 reps @  16.1088 msec (    62.1/sec): popen and read from "/bin/echo hello"
    300 reps @  16.0953 msec (    62.1/sec): popen and read from "/bin/echo hello"
    300 reps @  15.9792 msec (    62.6/sec): popen and read from "/bin/echo hello"
    300 reps @  15.8874 msec (    62.9/sec): popen and read from "/bin/echo hello"
   1500 trep @  16.0266 msec (    62.4/sec): popen and read from "/bin/echo hello"

  39550 reps @   0.1253 msec (  7980.0/sec): mmap megabyte /dev/zero region 
  39550 reps @   0.1220 msec (  8200.0/sec): mmap megabyte /dev/zero region 
  39550 reps @   0.1220 msec (  8200.0/sec): mmap megabyte /dev/zero region 
  39550 reps @   0.1219 msec (  8200.0/sec): mmap megabyte /dev/zero region 
  39550 reps @   0.1224 msec (  8170.0/sec): mmap megabyte /dev/zero region 
 197750 trep @   0.1227 msec (  8150.0/sec): mmap megabyte /dev/zero region 

    812 reps @   6.0663 msec (   165.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    812 reps @   5.5988 msec (   179.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    812 reps @   5.7967 msec (   173.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    812 reps @   6.0867 msec (   164.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    812 reps @   5.5214 msec (   181.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   4060 trep @   5.8140 msec (   172.0/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

   1318 reps @   3.8094 msec (   263.0/sec): copy every byte of newly mmaped megabyte file
   1318 reps @   3.7999 msec (   263.0/sec): copy every byte of newly mmaped megabyte file
   1318 reps @   3.8075 msec (   263.0/sec): copy every byte of newly mmaped megabyte file
   1318 reps @   3.8108 msec (   262.0/sec): copy every byte of newly mmaped megabyte file
   1318 reps @   3.8368 msec (   261.0/sec): copy every byte of newly mmaped megabyte file
   6590 trep @   3.8129 msec (   262.0/sec): copy every byte of newly mmaped megabyte file

     74 reps @  57.9146 msec (    17.3/sec): compress & uncompress 52 kilobyte text file of numbers
     74 reps @  59.0502 msec (    16.9/sec): compress & uncompress 52 kilobyte text file of numbers
     74 reps @  60.6906 msec (    16.5/sec): compress & uncompress 52 kilobyte text file of numbers
     74 reps @  60.5843 msec (    16.5/sec): compress & uncompress 52 kilobyte text file of numbers
     74 reps @  60.4635 msec (    16.5/sec): compress & uncompress 52 kilobyte text file of numbers
    370 trep @  59.7406 msec (    16.7/sec): compress & uncompress 52 kilobyte text file of numbers

      5 reps @ 195.1974 msec (    5.12/sec): compile ANSI C `hello world' with no special options
      5 reps @ 199.7864 msec (    5.01/sec): compile ANSI C `hello world' with no special options
      5 reps @ 197.5654 msec (    5.06/sec): compile ANSI C `hello world' with no special options
      5 reps @ 195.2548 msec (    5.12/sec): compile ANSI C `hello world' with no special options
      5 reps @ 199.9314 msec (    5.00/sec): compile ANSI C `hello world' with no special options
     25 trep @ 197.5471 msec (    5.06/sec): compile ANSI C `hello world' with no special options

     45 reps @ 106.1816 msec (    9.42/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     45 reps @  95.2989 msec (    10.5/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     45 reps @ 105.8377 msec (    9.45/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     45 reps @  94.9991 msec (    10.5/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     45 reps @ 105.3213 msec (    9.49/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
    225 trep @ 101.5277 msec (    9.85/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     50 reps @ 106.7051 msec (    9.37/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 reps @  97.7696 msec (    10.2/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 reps @  97.5443 msec (    10.3/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 reps @ 106.0800 msec (    9.43/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     50 reps @  98.7294 msec (    10.1/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
    250 trep @ 101.3657 msec (    9.87/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     44 reps @  73.9917 msec (    13.5/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     44 reps @  82.5363 msec (    12.1/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     44 reps @  74.3383 msec (    13.5/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     44 reps @  81.8963 msec (    12.2/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     44 reps @  74.2789 msec (    13.5/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
    220 trep @  77.4083 msec (    12.9/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     56 reps @  79.6605 msec (    12.6/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     56 reps @  78.0230 msec (    12.8/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     56 reps @  78.3537 msec (    12.8/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     56 reps @  77.7446 msec (    12.9/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     56 reps @  77.8278 msec (    12.8/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
    280 trep @  78.3219 msec (    12.8/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     84 reps @  79.7759 msec (    12.5/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     84 reps @  78.6758 msec (    12.7/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     84 reps @  77.5051 msec (    12.9/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     84 reps @  76.6894 msec (    13.0/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     84 reps @  78.7017 msec (    12.7/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    420 trep @  78.2696 msec (    12.8/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     80 reps @  76.9027 msec (    13.0/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 reps @  77.4011 msec (    12.9/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 reps @  75.4189 msec (    13.3/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 reps @  73.5695 msec (    13.6/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     80 reps @  74.7961 msec (    13.4/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    400 trep @  75.6177 msec (    13.2/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      4 reps @ 1422.9043 msec (    0.70/sec): use dc to output first 1,000 factorials
      4 reps @ 1420.3815 msec (    0.70/sec): use dc to output first 1,000 factorials
      4 reps @ 1422.0645 msec (    0.70/sec): use dc to output first 1,000 factorials
      4 reps @ 1418.6157 msec (    0.70/sec): use dc to output first 1,000 factorials
      4 reps @ 1419.7490 msec (    0.70/sec): use dc to output first 1,000 factorials
     20 trep @ 1420.7430 msec (    0.70/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0034 msec (297000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0033 msec (301000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0034 msec (293000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0035 msec (290000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0035 msec (289000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0034 msec (294000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  92472 reps @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree
  92472 reps @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree
  92472 reps @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree
  92472 reps @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree
  92472 reps @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree
 462360 trep @   0.0541 msec ( 18500.0/sec): use regcomp to compile 51 char literal, then regfree

      5 reps @ 1098.7204 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1100.5368 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1098.1630 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1098.4204 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text
      5 reps @ 1099.4354 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text
     25 trep @ 1099.0552 msec (    0.91/sec): use regexec with 51 char literal to search 142 kilobyte text

 120616 reps @   0.0414 msec ( 24100.0/sec): use regcomp to compile long .* pattern, then regfree
 120616 reps @   0.0414 msec ( 24100.0/sec): use regcomp to compile long .* pattern, then regfree
 120616 reps @   0.0414 msec ( 24200.0/sec): use regcomp to compile long .* pattern, then regfree
 120616 reps @   0.0414 msec ( 24200.0/sec): use regcomp to compile long .* pattern, then regfree
 120616 reps @   0.0414 msec ( 24200.0/sec): use regcomp to compile long .* pattern, then regfree
 603080 trep @   0.0414 msec ( 24200.0/sec): use regcomp to compile long .* pattern, then regfree

      9 reps @ 559.0549 msec (    1.79/sec): use regexec with long .* pattern to search 142 kilobyte text
      9 reps @ 559.0819 msec (    1.79/sec): use regexec with long .* pattern to search 142 kilobyte text
      9 reps @ 560.2334 msec (    1.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      9 reps @ 560.3981 msec (    1.78/sec): use regexec with long .* pattern to search 142 kilobyte text
      9 reps @ 559.3459 msec (    1.79/sec): use regexec with long .* pattern to search 142 kilobyte text
     45 trep @ 559.6228 msec (    1.79/sec): use regexec with long .* pattern to search 142 kilobyte text

