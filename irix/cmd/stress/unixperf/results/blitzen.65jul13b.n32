UNIX PERFORMANCE REPORT (generated by unixperf v1.0)
------------------------------------------------------
Hostname: blitzen
Operating system: IRIX64 6.5-ALPHA-1273972131
Compiler version: 7.2
Instruction set: MIPS 3
Application binary interface: N32
FPU: MIPS R4000 Floating Point Coprocessor Revision: 0.0
CPU: MIPS R4400 Processor Chip Revision: 5.0
4 150 MHZ IP19 Processors
Main memory size: 512 Mbytes, 2-way interleaved
Instruction cache size: 16 Kbytes
Data cache size: 16 Kbytes
Secondary unified instruction/data cache size: 1 Mbyte
Integral SCSI controller 0: Version WD33C95A, single ended, revision 0
Integral SCSI controller 1: Version WD33C95A, differential, revision 0
  Disk drive: unit 1 on SCSI controller 1
  Disk drive: unit 2 on SCSI controller 1
  Disk drive: unit 7 on SCSI controller 1
  Disk drive: unit 8 on SCSI controller 1
  Disk drive: unit 9 on SCSI controller 1
  Disk drive: unit 10 on SCSI controller 1
Integral EPC serial ports: 4
Integral EPC parallel port: Ebus slot 3
Graphics board: InfiniteReality
Integral Ethernet controller: et0, Ebus slot 3
I/O board, Ebus slot 3: IO4 revision 1
VME bus: adapter 13
VME bus: adapter 0 mapped to adapter 13
EPC external interrupts
Uptime: 20 mins
Users: 1
Load average: 0.02, 0.06, 0.01
File IO test directory: /usr/tmp
File IO test filesystem: xfs (2105.14 MB total, 240.38 MB available)
Date: Sun Jul 20 23:46:20 1997

1138392 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1138392 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1138392 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1138392 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
1138392 reps @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply
5691960 trep @   0.0044 msec (227000.0/sec): 4 by 4 double matrix multiply

1271256 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271256 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271256 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271256 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
1271256 reps @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply
6356280 trep @   0.0039 msec (254000.0/sec): 4 by 4 float matrix multiply

 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 136000 reps @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return
 680000 trep @   0.0368 msec ( 27200.0/sec): recurse 250 simple function calls and return

4124000 reps @   0.0012 msec (825000.0/sec): bcopy of 256 bytes
4124000 reps @   0.0012 msec (824000.0/sec): bcopy of 256 bytes
4124000 reps @   0.0012 msec (824000.0/sec): bcopy of 256 bytes
4124000 reps @   0.0012 msec (824000.0/sec): bcopy of 256 bytes
4124000 reps @   0.0012 msec (824000.0/sec): bcopy of 256 bytes
20620000 trep @   0.0012 msec (824000.0/sec): bcopy of 256 bytes

  46320 reps @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes
  46320 reps @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes
 231600 trep @   0.1069 msec (  9350.0/sec): bcopy of 16 kilobytes

   4720 reps @   1.0558 msec (   947.0/sec): bcopy of 100 kilobytes
   4720 reps @   1.0558 msec (   947.0/sec): bcopy of 100 kilobytes
   4720 reps @   1.0558 msec (   947.0/sec): bcopy of 100 kilobytes
   4720 reps @   1.0558 msec (   947.0/sec): bcopy of 100 kilobytes
   4720 reps @   1.0559 msec (   947.0/sec): bcopy of 100 kilobytes
  23600 trep @   1.0558 msec (   947.0/sec): bcopy of 100 kilobytes

    112 reps @  38.7956 msec (    25.8/sec): bcopy of 1 megabyte
    112 reps @  38.7946 msec (    25.8/sec): bcopy of 1 megabyte
    112 reps @  38.7978 msec (    25.8/sec): bcopy of 1 megabyte
    112 reps @  38.7962 msec (    25.8/sec): bcopy of 1 megabyte
    112 reps @  38.8003 msec (    25.8/sec): bcopy of 1 megabyte
    560 trep @  38.7969 msec (    25.8/sec): bcopy of 1 megabyte

     12 reps @ 466.9131 msec (    2.14/sec): bcopy of 10 megabytes
     12 reps @ 466.9598 msec (    2.14/sec): bcopy of 10 megabytes
     12 reps @ 467.1078 msec (    2.14/sec): bcopy of 10 megabytes
     12 reps @ 467.0730 msec (    2.14/sec): bcopy of 10 megabytes
     12 reps @ 466.9096 msec (    2.14/sec): bcopy of 10 megabytes
     60 trep @ 466.9927 msec (    2.14/sec): bcopy of 10 megabytes

     20 reps @ 285.2563 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.2570 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.2595 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.2806 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)
     20 reps @ 285.2714 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)
    100 trep @ 285.2650 msec (    3.51/sec): bcopy of 10 megabytes (cacheline-aligned)

     16 reps @ 396.5842 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 396.4928 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 396.4651 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 396.5482 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     16 reps @ 396.5330 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)
     80 trep @ 396.5247 msec (    2.52/sec): bcopy of 10 megabytes (word mis-aligned)

     16 reps @ 342.9858 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.8626 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.7291 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.9004 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     16 reps @ 342.8049 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)
     80 trep @ 342.8566 msec (    2.92/sec): bcopy of 10 megabytes (dword mis-aligned)

7795600 reps @   0.0006 msec (1560000.0/sec): bzero of 256 bytes
7795600 reps @   0.0006 msec (1560000.0/sec): bzero of 256 bytes
7795600 reps @   0.0006 msec (1560000.0/sec): bzero of 256 bytes
7795600 reps @   0.0006 msec (1560000.0/sec): bzero of 256 bytes
7795600 reps @   0.0006 msec (1560000.0/sec): bzero of 256 bytes
38978000 trep @   0.0006 msec (1560000.0/sec): bzero of 256 bytes

  53560 reps @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes
  53560 reps @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes
  53560 reps @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes
  53560 reps @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes
  53560 reps @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes
 267800 trep @   0.0934 msec ( 10700.0/sec): bzero of 16 kilobytes

   8572 reps @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes
   8572 reps @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes
   8572 reps @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes
   8572 reps @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes
   8572 reps @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes
  42860 trep @   0.5818 msec (  1720.0/sec): bzero of 100 kilobytes

    340 reps @  14.8942 msec (    67.1/sec): bzero of 1 megabyte
    340 reps @  14.8942 msec (    67.1/sec): bzero of 1 megabyte
    340 reps @  14.8936 msec (    67.1/sec): bzero of 1 megabyte
    340 reps @  14.9013 msec (    67.1/sec): bzero of 1 megabyte
    340 reps @  14.9052 msec (    67.1/sec): bzero of 1 megabyte
   1700 trep @  14.8977 msec (    67.1/sec): bzero of 1 megabyte

     36 reps @ 149.4179 msec (    6.69/sec): bzero of 10 megabytes
     36 reps @ 149.2851 msec (    6.70/sec): bzero of 10 megabytes
     36 reps @ 149.2868 msec (    6.70/sec): bzero of 10 megabytes
     36 reps @ 149.2869 msec (    6.70/sec): bzero of 10 megabytes
     36 reps @ 149.2770 msec (    6.70/sec): bzero of 10 megabytes
    180 trep @ 149.3107 msec (    6.70/sec): bzero of 10 megabytes

     36 reps @ 149.2884 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.2860 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.2733 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.2879 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)
     36 reps @ 149.2843 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)
    180 trep @ 149.2840 msec (    6.70/sec): bzero of 10 megabytes (cacheline-aligned)

     36 reps @ 149.6100 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 149.7289 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 149.6176 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 149.6024 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)
     36 reps @ 149.6017 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)
    180 trep @ 149.6321 msec (    6.68/sec): bzero of 10 megabytes (word mis-aligned)

     36 reps @ 149.4496 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 149.4363 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 149.4379 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 149.4399 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)
     36 reps @ 149.4288 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)
    180 trep @ 149.4385 msec (    6.69/sec): bzero of 10 megabytes (dword mis-aligned)

   4942 reps @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers
   4942 reps @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers
   4942 reps @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers
   4942 reps @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers
   4942 reps @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers
  24710 trep @   1.0095 msec (   991.0/sec): bcopy then qsort 400 32-bit integers

     76 reps @  65.4006 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers
     76 reps @  65.4012 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers
     76 reps @  65.4014 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers
     76 reps @  65.4011 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers
     76 reps @  65.4004 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers
    380 trep @  65.4010 msec (    15.3/sec): bcopy then qsort 16,000 32-bit integers

     16 reps @ 308.1958 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 308.1936 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 308.2150 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 308.2047 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers
     16 reps @ 308.1962 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers
     80 trep @ 308.2011 msec (    3.24/sec): bcopy then qsort 64,000 32-bit integers

6780000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6780000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6780000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6780000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
6780000 reps @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)
33900000 trep @   0.0007 msec (1360000.0/sec): basic float trigonometric function (sinf/cosf/tanf)

4552500 reps @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)
4552500 reps @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)
4552500 reps @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)
4552500 reps @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)
4552500 reps @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)
22762500 trep @   0.0011 msec (910000.0/sec): basic double trigonometric function (sin/cos/tan)

 803000 reps @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 803000 reps @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 803000 reps @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 803000 reps @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
 803000 reps @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)
4015000 trep @   0.0062 msec (161000.0/sec): Dhrystone 2 (from Byte Unix benchmark)

  12000 reps @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)
  12000 reps @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)
  12000 reps @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)
  12000 reps @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)
  12000 reps @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)
  60000 trep @   0.4175 msec (  2400.0/sec): Tower of Hanoi recursion test (10 deep)

    600 reps @  11.3545 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.3544 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.3544 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.3545 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)
    600 reps @  11.3545 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)
   3000 trep @  11.3545 msec (    88.1/sec): Tower of Hanoi recursion test (15 deep)

 211500 reps @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 211500 reps @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 211500 reps @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 211500 reps @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
 211500 reps @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES
1057500 trep @   0.0237 msec ( 42200.0/sec): encrypt/decrypt of 64-bit block using Levy88 fast DES

  50200 reps @   0.1011 msec (  9890.0/sec): write 80 bytes to a log file
  50200 reps @   0.1037 msec (  9640.0/sec): write 80 bytes to a log file
  50200 reps @   0.1073 msec (  9320.0/sec): write 80 bytes to a log file
  50200 reps @   0.1084 msec (  9220.0/sec): write 80 bytes to a log file
  50200 reps @   0.1159 msec (  8620.0/sec): write 80 bytes to a log file
 251000 trep @   0.1073 msec (  9320.0/sec): write 80 bytes to a log file

    700 reps @   5.7326 msec (   174.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   5.3536 msec (   187.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   5.4191 msec (   185.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   5.3753 msec (   186.0/sec): per-file cost of creating 100 files then unlinking them all
    700 reps @   5.4474 msec (   184.0/sec): per-file cost of creating 100 files then unlinking them all
   3500 trep @   5.4656 msec (   183.0/sec): per-file cost of creating 100 files then unlinking them all

  16600 reps @   0.3019 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files
  16600 reps @   0.3018 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files
  16600 reps @   0.3018 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files
  16600 reps @   0.3018 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files
  16600 reps @   0.3019 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files
  83000 trep @   0.3019 msec (  3310.0/sec): per-file cost of open and immediate close of 100 files

  26800 reps @   0.2057 msec (  4860.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  26800 reps @   0.1916 msec (  5220.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  26800 reps @   0.1874 msec (  5340.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  26800 reps @   0.1873 msec (  5340.0/sec): per-chmod cost of chmod permissions toggle of 100 files
  26800 reps @   0.1872 msec (  5340.0/sec): per-chmod cost of chmod permissions toggle of 100 files
 134000 trep @   0.1919 msec (  5210.0/sec): per-chmod cost of chmod permissions toggle of 100 files

  73500 reps @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir
  73500 reps @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir
  73500 reps @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir
  73500 reps @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir
  73500 reps @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir
 367500 trep @   0.0685 msec ( 14600.0/sec): cost of stat'ing current dir

  21000 reps @   0.2436 msec (  4110.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2441 msec (  4100.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2441 msec (  4100.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2441 msec (  4100.0/sec): cost of stat'ing 5 component path
  21000 reps @   0.2441 msec (  4100.0/sec): cost of stat'ing 5 component path
 105000 trep @   0.2440 msec (  4100.0/sec): cost of stat'ing 5 component path

    537 reps @   9.3106 msec (   107.0/sec): open directory and stat 100 files in it
    537 reps @   9.3227 msec (   107.0/sec): open directory and stat 100 files in it
    537 reps @   9.3108 msec (   107.0/sec): open directory and stat 100 files in it
    537 reps @   9.3107 msec (   107.0/sec): open directory and stat 100 files in it
    537 reps @   9.2343 msec (   108.0/sec): open directory and stat 100 files in it
   2685 trep @   9.2978 msec (   108.0/sec): open directory and stat 100 files in it

    900 reps @   4.9808 msec (   201.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.6806 msec (   214.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.7680 msec (   210.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.6832 msec (   214.0/sec): per-dir cost of making 100 dirs then rmdiring them all
    900 reps @   4.7205 msec (   212.0/sec): per-dir cost of making 100 dirs then rmdiring them all
   4500 trep @   4.7666 msec (   210.0/sec): per-dir cost of making 100 dirs then rmdiring them all

 123300 reps @   0.0437 msec ( 22900.0/sec): ndbm lookup into database with 900 entries
 123300 reps @   0.0400 msec ( 25000.0/sec): ndbm lookup into database with 900 entries
 123300 reps @   0.0400 msec ( 25000.0/sec): ndbm lookup into database with 900 entries
 123300 reps @   0.0400 msec ( 25000.0/sec): ndbm lookup into database with 900 entries
 123300 reps @   0.0400 msec ( 25000.0/sec): ndbm lookup into database with 900 entries
 616500 trep @   0.0408 msec ( 24500.0/sec): ndbm lookup into database with 900 entries

  31200 reps @   0.1745 msec (  5730.0/sec): 1 byte token passing between two processes using two pipes
  31200 reps @   0.1565 msec (  6390.0/sec): 1 byte token passing between two processes using two pipes
  31200 reps @   0.1684 msec (  5940.0/sec): 1 byte token passing between two processes using two pipes
  31200 reps @   0.1565 msec (  6390.0/sec): 1 byte token passing between two processes using two pipes
  31200 reps @   0.1624 msec (  6160.0/sec): 1 byte token passing between two processes using two pipes
 156000 trep @   0.1637 msec (  6110.0/sec): 1 byte token passing between two processes using two pipes

  22000 reps @   0.2286 msec (  4370.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2318 msec (  4310.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2288 msec (  4370.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2286 msec (  4370.0/sec): 1 kilobyte token passing between two processes using two pipes
  22000 reps @   0.2321 msec (  4310.0/sec): 1 kilobyte token passing between two processes using two pipes
 110000 trep @   0.2300 msec (  4350.0/sec): 1 kilobyte token passing between two processes using two pipes

9000000 reps @   0.0006 msec (1800000.0/sec): setjmp/longjmp
9000000 reps @   0.0006 msec (1810000.0/sec): setjmp/longjmp
9000000 reps @   0.0006 msec (1820000.0/sec): setjmp/longjmp
9000000 reps @   0.0006 msec (1820000.0/sec): setjmp/longjmp
9000000 reps @   0.0006 msec (1820000.0/sec): setjmp/longjmp
45000000 trep @   0.0006 msec (1810000.0/sec): setjmp/longjmp

  56000 reps @   0.0940 msec ( 10600.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0940 msec ( 10600.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0937 msec ( 10700.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0937 msec ( 10700.0/sec): sigsetjmp/siglongjmp (saving signal mask)
  56000 reps @   0.0937 msec ( 10700.0/sec): sigsetjmp/siglongjmp (saving signal mask)
 280000 trep @   0.0938 msec ( 10700.0/sec): sigsetjmp/siglongjmp (saving signal mask)

    955 reps @   5.3000 msec (   189.0/sec): create/destroy client UDP-based SunRPC handle
    955 reps @   5.2380 msec (   191.0/sec): create/destroy client UDP-based SunRPC handle
    955 reps @   5.2450 msec (   191.0/sec): create/destroy client UDP-based SunRPC handle
    955 reps @   5.2261 msec (   191.0/sec): create/destroy client UDP-based SunRPC handle
    955 reps @   5.1823 msec (   193.0/sec): create/destroy client UDP-based SunRPC handle
   4775 trep @   5.2383 msec (   191.0/sec): create/destroy client UDP-based SunRPC handle

   5200 reps @   1.0113 msec (   989.0/sec): TCP-based SunRPC to negate an integer
   5200 reps @   1.0108 msec (   989.0/sec): TCP-based SunRPC to negate an integer
   5200 reps @   1.0019 msec (   998.0/sec): TCP-based SunRPC to negate an integer
   5200 reps @   0.9752 msec (  1030.0/sec): TCP-based SunRPC to negate an integer
   5200 reps @   0.9841 msec (  1020.0/sec): TCP-based SunRPC to negate an integer
  26000 trep @   0.9967 msec (  1000.0/sec): TCP-based SunRPC to negate an integer

   5200 reps @   0.8932 msec (  1120.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.8944 msec (  1120.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.8942 msec (  1120.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.8965 msec (  1120.0/sec): UDP-based SunRPC to negate an integer
   5200 reps @   0.8940 msec (  1120.0/sec): UDP-based SunRPC to negate an integer
  26000 trep @   0.8945 msec (  1120.0/sec): UDP-based SunRPC to negate an integer

   5200 reps @   0.9685 msec (  1030.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9633 msec (  1040.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9778 msec (  1020.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9771 msec (  1020.0/sec): TCP-based SunRPC no-op
   5200 reps @   0.9886 msec (  1010.0/sec): TCP-based SunRPC no-op
  26000 trep @   0.9751 msec (  1030.0/sec): TCP-based SunRPC no-op

   5600 reps @   0.8946 msec (  1120.0/sec): UDP-based SunRPC no-op
   5600 reps @   0.8938 msec (  1120.0/sec): UDP-based SunRPC no-op
   5600 reps @   0.8952 msec (  1120.0/sec): UDP-based SunRPC no-op
   5600 reps @   0.9085 msec (  1100.0/sec): UDP-based SunRPC no-op
   5600 reps @   0.8942 msec (  1120.0/sec): UDP-based SunRPC no-op
  28000 trep @   0.8973 msec (  1110.0/sec): UDP-based SunRPC no-op

 989000 reps @   0.0051 msec (198000.0/sec): getpid system call
 989000 reps @   0.0051 msec (198000.0/sec): getpid system call
 989000 reps @   0.0051 msec (198000.0/sec): getpid system call
 989000 reps @   0.0051 msec (198000.0/sec): getpid system call
 989000 reps @   0.0051 msec (198000.0/sec): getpid system call
4945000 trep @   0.0051 msec (198000.0/sec): getpid system call

 116000 reps @   0.0432 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 116000 reps @   0.0433 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 116000 reps @   0.0433 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 116000 reps @   0.0433 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 116000 reps @   0.0433 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask
 580000 trep @   0.0433 msec ( 23100.0/sec): easy system calls, ie. dup/close/getpid/getuid/umask

 489600 reps @   0.0102 msec ( 97900.0/sec): gettimeofday system call
 489600 reps @   0.0102 msec ( 97900.0/sec): gettimeofday system call
 489600 reps @   0.0102 msec ( 97900.0/sec): gettimeofday system call
 489600 reps @   0.0102 msec ( 97900.0/sec): gettimeofday system call
 489600 reps @   0.0102 msec ( 97900.0/sec): gettimeofday system call
2448000 trep @   0.0102 msec ( 97900.0/sec): gettimeofday system call

    350 reps @  15.9489 msec (    62.7/sec): fork, child immediately exits, parent waits
    350 reps @  15.7960 msec (    63.3/sec): fork, child immediately exits, parent waits
    350 reps @  16.3037 msec (    61.3/sec): fork, child immediately exits, parent waits
    350 reps @  16.2680 msec (    61.5/sec): fork, child immediately exits, parent waits
    350 reps @  16.3866 msec (    61.0/sec): fork, child immediately exits, parent waits
   1750 trep @  16.1407 msec (    62.0/sec): fork, child immediately exits, parent waits

      5 reps @ 1010.9780 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9522 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9536 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9474 msec (    0.99/sec): sleep for one second (validates test time)
      5 reps @ 1010.9534 msec (    0.99/sec): sleep for one second (validates test time)
     25 trep @ 1010.9569 msec (    0.99/sec): sleep for one second (validates test time)

 132000 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 132000 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 132000 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 132000 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 132000 reps @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout
 660000 trep @   0.0379 msec ( 26400.0/sec): select on no fds with no timeout

  54100 reps @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout
  54100 reps @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout
  54100 reps @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout
  54100 reps @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout
  54100 reps @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout
 270500 trep @   0.0925 msec ( 10800.0/sec): select on 16 pipe read fds with immediate timeout

  34200 reps @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout
  34200 reps @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout
  34200 reps @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout
  34200 reps @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout
  34200 reps @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout
 171000 trep @   0.1464 msec (  6830.0/sec): select on 32 pipe read fds with immediate timeout

  56400 reps @   0.0886 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout
  56400 reps @   0.0886 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout
  56400 reps @   0.0886 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout
 282000 trep @   0.0886 msec ( 11300.0/sec): select on 16 pipe write fds with immediate timeout

  56400 reps @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout
  56400 reps @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout
 282000 trep @   0.0887 msec ( 11300.0/sec): select on 32 pipe write fds with immediate timeout

   9800 reps @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9800 reps @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9800 reps @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9800 reps @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
   9800 reps @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout
  49000 trep @   0.5129 msec (  1950.0/sec): select on 64 pipe read & 64 pipe write fds with immediate timeout

    100 reps @  51.9515 msec (    19.2/sec): popen and read from "/bin/echo hello"
    100 reps @  52.0714 msec (    19.2/sec): popen and read from "/bin/echo hello"
    100 reps @  52.3954 msec (    19.1/sec): popen and read from "/bin/echo hello"
    100 reps @  52.2166 msec (    19.2/sec): popen and read from "/bin/echo hello"
    100 reps @  52.1048 msec (    19.2/sec): popen and read from "/bin/echo hello"
    500 trep @  52.1480 msec (    19.2/sec): popen and read from "/bin/echo hello"

  16150 reps @   0.3100 msec (  3230.0/sec): mmap megabyte /dev/zero region 
  16150 reps @   0.3099 msec (  3230.0/sec): mmap megabyte /dev/zero region 
  16150 reps @   0.3099 msec (  3230.0/sec): mmap megabyte /dev/zero region 
  16150 reps @   0.3083 msec (  3240.0/sec): mmap megabyte /dev/zero region 
  16150 reps @   0.3047 msec (  3280.0/sec): mmap megabyte /dev/zero region 
  80750 trep @   0.3086 msec (  3240.0/sec): mmap megabyte /dev/zero region 

    218 reps @  23.0737 msec (    43.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.1316 msec (    43.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.1256 msec (    43.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.1122 msec (    43.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
    218 reps @  23.1312 msec (    43.2/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes
   1090 trep @  23.1149 msec (    43.3/sec): touch newly mmaped megabyte /dev/zero region at every 1024 bytes

    347 reps @  14.4085 msec (    69.4/sec): copy every byte of newly mmaped megabyte file
    347 reps @  14.4055 msec (    69.4/sec): copy every byte of newly mmaped megabyte file
    347 reps @  14.4212 msec (    69.3/sec): copy every byte of newly mmaped megabyte file
    347 reps @  14.4081 msec (    69.4/sec): copy every byte of newly mmaped megabyte file
    347 reps @  14.4087 msec (    69.4/sec): copy every byte of newly mmaped megabyte file
   1735 trep @  14.4104 msec (    69.4/sec): copy every byte of newly mmaped megabyte file

     25 reps @ 186.3939 msec (    5.36/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 186.9288 msec (    5.35/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 187.5555 msec (    5.33/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 187.2926 msec (    5.34/sec): compress & uncompress 52 kilobyte text file of numbers
     25 reps @ 186.8306 msec (    5.35/sec): compress & uncompress 52 kilobyte text file of numbers
    125 trep @ 187.0003 msec (    5.35/sec): compress & uncompress 52 kilobyte text file of numbers

      4 reps @ 608.7470 msec (    1.64/sec): compile ANSI C `hello world' with no special options
      4 reps @ 631.4545 msec (    1.58/sec): compile ANSI C `hello world' with no special options
      4 reps @ 614.4897 msec (    1.63/sec): compile ANSI C `hello world' with no special options
      4 reps @ 618.8447 msec (    1.62/sec): compile ANSI C `hello world' with no special options
      4 reps @ 617.5545 msec (    1.62/sec): compile ANSI C `hello world' with no special options
     20 trep @ 618.2181 msec (    1.62/sec): compile ANSI C `hello world' with no special options

     18 reps @ 274.5708 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 274.0168 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 272.2107 msec (    3.67/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 277.7116 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     18 reps @ 275.3563 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel
     90 trep @ 274.7732 msec (    3.64/sec): use dc to output sqrt(2) to 500 digits, 1 job parallel

     14 reps @ 243.5234 msec (    4.11/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 336.0336 msec (    2.98/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 237.2011 msec (    4.22/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 246.5712 msec (    4.06/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     14 reps @ 339.2019 msec (    2.95/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel
     70 trep @ 280.5063 msec (    3.56/sec): use dc to output sqrt(2) to 500 digits, 2 job parallel

     92 reps @ 284.4615 msec (    3.52/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     92 reps @ 268.0546 msec (    3.73/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     92 reps @ 286.4886 msec (    3.49/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     92 reps @ 270.7747 msec (    3.69/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
     92 reps @ 283.1530 msec (    3.53/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel
    460 trep @ 278.5865 msec (    3.59/sec): use dc to output sqrt(2) to 500 digits, 4 job parallel

     24 reps @ 275.4208 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 275.5198 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 273.7442 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 279.0345 msec (    3.58/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
     24 reps @ 282.7191 msec (    3.54/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel
    120 trep @ 277.2877 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 8 job parallel

     24 reps @ 275.6987 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 273.9660 msec (    3.65/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 276.7631 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 276.6225 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
     24 reps @ 275.8224 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel
    120 trep @ 275.7745 msec (    3.63/sec): use dc to output sqrt(2) to 500 digits, 12 job parallel

     32 reps @ 277.8778 msec (    3.60/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 273.5953 msec (    3.66/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 281.0715 msec (    3.56/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 276.9407 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
     32 reps @ 276.1807 msec (    3.62/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel
    160 trep @ 277.1332 msec (    3.61/sec): use dc to output sqrt(2) to 500 digits, 16 job parallel

      2 reps @ 3598.4880 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3585.9615 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3562.3230 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3615.4180 msec (    0.28/sec): use dc to output first 1,000 factorials
      2 reps @ 3560.6695 msec (    0.28/sec): use dc to output first 1,000 factorials
     10 trep @ 3584.5720 msec (    0.28/sec): use dc to output first 1,000 factorials

3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
3871322 reps @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search
19356610 trep @   0.0099 msec (101000.0/sec): Connect 4 game boards evaluated during alpha-beta search

  25000 reps @   0.1980 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree
  25000 reps @   0.1980 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree
  25000 reps @   0.1980 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree
  25000 reps @   0.1980 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree
  25000 reps @   0.1981 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree
 125000 trep @   0.1981 msec (  5050.0/sec): use regcomp to compile 51 char literal, then regfree

      2 reps @ 3554.5985 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3555.1630 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3554.7685 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3555.7285 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text
      2 reps @ 3558.1195 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text
     10 trep @ 3555.6756 msec (    0.28/sec): use regexec with 51 char literal to search 142 kilobyte text

  32100 reps @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree
  32100 reps @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree
  32100 reps @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree
  32100 reps @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree
  32100 reps @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree
 160500 trep @   0.1551 msec (  6450.0/sec): use regcomp to compile long .* pattern, then regfree

      3 reps @ 1900.0790 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1902.4927 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1900.0627 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1899.6157 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text
      3 reps @ 1900.2040 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text
     15 trep @ 1900.4908 msec (    0.53/sec): use regexec with long .* pattern to search 142 kilobyte text

