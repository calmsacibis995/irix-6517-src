--
-- mib.txt
-- To be used with CMU utilities
--

		  mgmt	     OBJECT IDENTIFIER ::= { iso org(3) dod(6) internet(1) mgmt(2) }
                  mib-2        OBJECT IDENTIFIER ::= { mgmt 1 }
		  directory  OBJECT IDENTIFIER ::= { internet 1 }
		  experimental   OBJECT IDENTIFIER ::= { internet 3 }
		  private    OBJECT IDENTIFIER ::= { internet 4 }
		  enterprises OBJECT IDENTIFIER ::= { private 1 }

		  peer		OBJECT IDENTIFIER ::= { enterprises 442 }
		  peer-products   OBJECT IDENTIFIER ::= { peer 1 }
		  peer-demos      OBJECT IDENTIFIER ::= { peer 2 }

                  system     OBJECT IDENTIFIER ::= { mib-2 1 }
                  interfaces OBJECT IDENTIFIER ::= { mib-2 2 }
                  at         OBJECT IDENTIFIER ::= { mib-2 3 }
                  ip         OBJECT IDENTIFIER ::= { mib-2 4 }
                  icmp       OBJECT IDENTIFIER ::= { mib-2 5 }
                  tcp        OBJECT IDENTIFIER ::= { mib-2 6 }
                  udp        OBJECT IDENTIFIER ::= { mib-2 7 }
                  egp        OBJECT IDENTIFIER ::= { mib-2 8 }
		  -- historical (some say hysterical)
		  -- cmot      OBJECT IDENTIFIER ::= { mib-2 9 }
		  transmission OBJECT IDENTIFIER ::= { mib-2 10 }		            
          	  snmp       OBJECT IDENTIFIER ::= { mib-2 11 }


                  -- object types

                  -- the System group

                  sysDescr OBJECT-TYPE
                          SYNTAX  OCTET STRING
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { system 1 }

                  sysObjectID OBJECT-TYPE
                          SYNTAX  OBJECT IDENTIFIER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { system 2 }

                  sysUpTime OBJECT-TYPE
                          SYNTAX  TimeTicks
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { system 3 }

          sysContact OBJECT-TYPE
              SYNTAX  DisplayString 
              ACCESS  read-write
              STATUS  mandatory
              ::= { system 4 }

          sysName OBJECT-TYPE
              SYNTAX  DisplayString
              ACCESS  read-write
              STATUS  mandatory
              ::= { system 5 }

          sysLocation OBJECT-TYPE
              SYNTAX  DisplayString 
              ACCESS  read-write
              STATUS  mandatory
              ::= { system 6 }

          sysServices OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              ::= { system 7 }

                  -- the Interfaces group

                  ifNumber OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { interfaces 1 }

                  -- the Interfaces table

                  ifTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF IfEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { interfaces 2 }

                  ifEntry OBJECT-TYPE
                          SYNTAX  IfEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ifTable 1 }

                  IfEntry ::= SEQUENCE {
                      ifIndex
                          INTEGER,
                      ifDescr
                          OCTET STRING,
                      ifType
                          INTEGER,
                      ifMtu
                          INTEGER,
                      ifSpeed
                          Gauge,
                      ifPhysAddress
                          OCTET STRING,
                      ifAdminStatus
                          INTEGER,
                      ifOperStatus
                          INTEGER,
                      ifLastChange
                          TimeTicks,
                      ifInOctets
                          Counter,
                      ifInUcastPkts
                          Counter,
                      ifInNUcastPkts
                          Counter,
                      ifInDiscards
                          Counter,
                      ifInErrors
                          Counter,
                      ifInUnknownProtos
                          Counter,
                      ifOutOctets
                          Counter,
                      ifOutUcastPkts
                          Counter,
                      ifOutNUcastPkts
                          Counter,
                      ifOutDiscards
                          Counter,
                      ifOutErrors
                          Counter,
                      ifOutQLen
                          Gauge,
		      ifSpecific
			  OBJECT IDENTIFIER
                  }

                  ifIndex OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 1 }

                  ifDescr OBJECT-TYPE
                          SYNTAX  OCTET STRING
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 2 }

                  ifType OBJECT-TYPE
                          SYNTAX  INTEGER {
                                  other(1),     -- none of the following
                                  regular1822(2),
                                  hdh1822(3),
                                  ddn-x25(4),
                                  rfc877-x25(5),
                                  ethernet-csmacd(6),
                                  iso88023-csmacd(7),
                                  iso88024-tokenBus(8),
                                  iso88025-tokenRing(9),
                                  iso88026-man(10),
                                  starLan(11),
                                  proteon-10MBit(12),
                                  proteon-80MBit(13),
                                  hyperchannel(14),
                                  fddi(15),
                                  lapb(16),
                                  sdlc(17),
                                  t1-carrier(18),
                                  cept(19),
                                  basicIsdn(20),
                                  primaryIsdn(21),
                                                   -- proprietary serial
                                  propPointToPointSerial(22)
                              }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 3 }

                  ifMtu OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 4 }

                  ifSpeed OBJECT-TYPE
                          SYNTAX  Gauge
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 5 }

                  ifPhysAddress OBJECT-TYPE
                          SYNTAX  OCTET STRING
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 6 }

                  ifAdminStatus OBJECT-TYPE
                          SYNTAX  INTEGER {
                                  up(1),        -- ready to pass packets
                                  down(2),
                                  testing(3)    -- in some test mode
                                  }
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ifEntry 7 }

                  ifOperStatus OBJECT-TYPE
                          SYNTAX  INTEGER {
                                  up(1),        -- ready to pass packets
                                  down(2),
                                  testing(3)    -- in some test mode
                                  }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 8 }

                  ifLastChange OBJECT-TYPE
                          SYNTAX  TimeTicks
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 9 }

                  ifInOctets OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 10 }

                  ifInUcastPkts OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::=  { ifEntry 11 }

                  ifInNUcastPkts OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 12 }

                  ifInDiscards OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 13 }

                  ifInErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 14 }

                  ifInUnknownProtos OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 15 }

                  ifOutOctets OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 16 }

                  ifOutUcastPkts OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 17 }

                  ifOutNUcastPkts OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 18 }

                  ifOutDiscards OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 19 }

                  ifOutErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 20 }

                  ifOutQLen OBJECT-TYPE
                          SYNTAX  Gauge
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 21 }

                  ifSpecific OBJECT-TYPE
                          SYNTAX  OBJECT IDENTIFIER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ifEntry 22 }

                  -- the Address Translation group

                  atTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF AtEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { at 1 }

                  atEntry OBJECT-TYPE
                          SYNTAX  AtEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { atTable 1 }

                  AtEntry ::= SEQUENCE {
                      atIfIndex
                          INTEGER,
                      atPhysAddress
                          OCTET STRING,
                      atNetAddress
                          NetworkAddress
                  }

                  atIfIndex OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { atEntry 1 }

                  atPhysAddress OBJECT-TYPE
                          SYNTAX  OCTET STRING
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { atEntry 2 }

                  atNetAddress OBJECT-TYPE
                          SYNTAX  NetworkAddress
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { atEntry 3 }

                  -- the IP group

                  ipForwarding OBJECT-TYPE
                          SYNTAX  INTEGER {
                        gateway(1), -- entity forwards datagrams
                        host(2)     -- entity does NOT forward datagrams
                                  }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 1 }

                  ipDefaultTTL OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ip 2 }

                  ipInReceives OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 3 }

                  ipInHdrErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 4 }

                  ipInAddrErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 5 }

                  ipForwDatagrams OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 6 }

                  ipInUnknownProtos OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 7 }

                  ipInDiscards OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 8 }

                  ipInDelivers OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 9 }

                  ipOutRequests OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 10 }

                  ipOutDiscards OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 11 }

                  ipOutNoRoutes OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 12 }

                  ipReasmTimeout OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 13 }

                  ipReasmReqds OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 14 }

                  ipReasmOKs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 15 }

                  ipReasmFails OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 16 }

                  ipFragOKs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 17 }

                  ipFragFails OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 18 }

                  ipFragCreates OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 19 }

                  -- the IP Interface table

                  ipAddrTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF IpAddrEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ip 20 }

                  ipAddrEntry OBJECT-TYPE
                          SYNTAX  IpAddrEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ipAddrTable 1 }

                  IpAddrEntry ::= SEQUENCE {
                      ipAdEntAddr
                          IpAddress,
                      ipAdEntIfIndex
                          INTEGER,
                      ipAdEntNetMask
                          IpAddress,
                      ipAdEntBcastAddr
                          INTEGER
                  }

                  ipAdEntAddr OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-only
                          STATUS  mandatory
                          ::=  { ipAddrEntry 1 }

                  ipAdEntIfIndex OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::=  { ipAddrEntry 2 }

                  ipAdEntNetMask OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-only
                          STATUS  mandatory
                          ::=  { ipAddrEntry 3 }

                  ipAdEntBcastAddr OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ipAddrEntry 4 }

                  -- the IP Routing table

                  ipRoutingTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF IpRouteEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ip 21 }

                  ipRouteEntry OBJECT-TYPE
                          SYNTAX  IpRouteEntry
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRoutingTable 1 }

                  IpRouteEntry ::= SEQUENCE {
                      ipRouteDest
                          IpAddress,
                      ipRouteIfIndex
                          INTEGER,
                      ipRouteMetric1
                          INTEGER,
                      ipRouteMetric2
                          INTEGER,
                      ipRouteMetric3
                          INTEGER,
                      ipRouteMetric4
                          INTEGER,
                      ipRouteNextHop
                          IpAddress,
                      ipRouteType
                          INTEGER,
                      ipRouteProto
                          INTEGER,
                      ipRouteAge
                          INTEGER,
                      ipRouteMask
                          IpAddress,
                      ipRouteMetric5
                          INTEGER,
		      ipRouteInfo
                          OBJECT IDENTIFIER
                  }

                  ipRouteDest OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 1 }

                  ipRouteIfIndex  OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 2 }

                  ipRouteMetric1 OBJECT-TYPE

                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 3 }

                  ipRouteMetric2 OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 4 }

                  ipRouteMetric3 OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 5 }

                  ipRouteMetric4 OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 6 }

                  ipRouteNextHop OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 7 }

                  ipRouteType OBJECT-TYPE
                          SYNTAX  INTEGER {
                            other(1),      -- none of the following

                            invalid(2),    -- an invalidated route

                                           -- route to directly
                            direct(3),     -- connected (sub-)network

                                           -- route to a non-local
                            remote(4),     -- host/network/sub-network
                              }
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 8 }

                  ipRouteProto OBJECT-TYPE
                          SYNTAX  INTEGER {
                            other(1),     -- none of the following

                                          -- non-protocol information
                                          --   e.g., manually
                            local(2),     --   configured entries

                                          -- set via a network
                            netmgmt(3),   --   management protocol

                                          -- obtained via ICMP,
                            icmp(4),      --   e.g., Redirect

                                          -- the following are
                                          -- gateway routing protocols
                            egp(5),
                            ggp(6),
                            hello(7),
                            rip(8),
                            is-is(9),
                            es-is(10),
                            ciscoIgrp(11),
                            bbnSpfIgp(12),
                            oigp(13)
                              }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { ipRouteEntry 9 }

                  ipRouteAge OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-write
                          STATUS  mandatory
                          ::= { ipRouteEntry 10 }

          	  ipRouteMask OBJECT-TYPE
              	  	  SYNTAX  IpAddress
              	  	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipRouteEntry 11 }

          	  ipRouteMetric5 OBJECT-TYPE
              	  	  SYNTAX  INTEGER
              	 	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipRouteEntry 12 }

          	  ipRouteInfo OBJECT-TYPE
              	  	  SYNTAX  OBJECT IDENTIFIER
              	  	  ACCESS  read-only
              	  	  STATUS  mandatory
              	  	  ::= { ipRouteEntry 13 }

          	  -- the IP Address Translation table

          	  -- The IP address translation table contain the IpAddress to
          	  -- `physical' address equivalences.  Some interfaces do not
          	  -- use translation tables for determining address
          	  -- equivalences (e.g., DDN-X.25 has an algorithmic method);
          	  -- if all interfaces are of this type, then the Address
          	  -- Translation table is empty, i.e., has zero entries.

          	  ipNetToMediaTable OBJECT-TYPE
              	  	  SYNTAX  SEQUENCE OF IpNetToMediaEntry
              	  	  ACCESS  not-accessible
              	  	  STATUS  mandatory
              	  	  ::= { ip 22 }

          	  ipNetToMediaEntry OBJECT-TYPE
              	  	  SYNTAX  IpNetToMediaEntry
              	  	  ACCESS  not-accessible
              	  	  STATUS  mandatory
              	  	  -- INDEX   { ipNetToMediaIfIndex,
                        	  -- ipNetToMediaNetAddress }
              	  	  ::= { ipNetToMediaTable 1 }

          	  IpNetToMediaEntry ::=
              	  	  SEQUENCE {
                  	  	  ipNetToMediaIfIndex
                      	  	  INTEGER,
                  	  	  ipNetToMediaPhysAddress
                      	  	  PhysAddress,
                  	  	  ipNetToMediaNetAddress
                      	  	  IpAddress,
                  	  	  ipNetToMediaType
                      	  	  INTEGER
              	  	  }

          	  ipNetToMediaIfIndex OBJECT-TYPE
              	  	  SYNTAX  INTEGER
              	  	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipNetToMediaEntry 1 }

          	  ipNetToMediaPhysAddress OBJECT-TYPE
              	  	  SYNTAX  PhysAddress
              	  	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipNetToMediaEntry 2 }

          	  ipNetToMediaNetAddress OBJECT-TYPE
              	  	  SYNTAX  IpAddress
              	  	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipNetToMediaEntry 3 }

          	  ipNetToMediaType OBJECT-TYPE
              	  	  SYNTAX  INTEGER {
                          	  	  other(1),        -- none of the following
                          	  	  invalid(2),      -- an invalidated mapping
                          	  	  dynamic(3),
                          	  	  static(4)
                      	  	  }
              	  	  ACCESS  read-write
              	  	  STATUS  mandatory
              	  	  ::= { ipNetToMediaEntry 4 }

          	  -- additional IP objects
	  
          	  ipRoutingDiscards OBJECT-TYPE
              	  	  SYNTAX  Counter
              	  	  ACCESS  read-only
              	  	  STATUS  mandatory
              	  	  ::= { ip 23 }

                  -- the ICMP group

                  icmpInMsgs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 1 }

                  icmpInErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 2 }

                  icmpInDestUnreachs OBJECT-TYPE
                          SYNTAX  Counter

                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 3 }

                  icmpInTimeExcds OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 4 }

                  icmpInParmProbs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 5 }

                  icmpInSrcQuenchs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 6 }

                  icmpInRedirects OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 7 }

                  icmpInEchos OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 8 }

                  icmpInEchoReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 9 }

                  icmpInTimestamps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 10 }

                  icmpInTimestampReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 11 }

                  icmpInAddrMasks OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 12 }

                  icmpInAddrMaskReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 13 }

                  icmpOutMsgs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 14 }

                  icmpOutErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 15 }

                  icmpOutDestUnreachs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 16 }

                  icmpOutTimeExcds OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 17 }

                  icmpOutParmProbs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 18 }

                  icmpOutSrcQuenchs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 19 }

                  icmpOutRedirects OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 20 }

                  icmpOutEchos OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 21 }

                  icmpOutEchoReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 22 }

                  icmpOutTimestamps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 23 }

                  icmpOutTimestampReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 24 }

                  icmpOutAddrMasks OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 25 }

                  icmpOutAddrMaskReps OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { icmp 26 }

                  -- the TCP group

                  tcpRtoAlgorithm OBJECT-TYPE
                          SYNTAX  INTEGER {
                          other(1),    -- none of the following
                          constant(2), -- a constant rto
                          rsre(3),     -- MIL-STD-1778, Appendix B
                          vanj(4)      -- Van Jacobson's algorithm [11]
                                  }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 1 }

                  tcpRtoMin OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 2 }

                  tcpRtoMax OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 3 }

                  tcpMaxConn OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 4 }

                  tcpActiveOpens OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 5 }

                  tcpPassiveOpens OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 6 }

                  tcpAttemptFails OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 7 }

                  tcpEstabResets OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 8 }

                  tcpCurrEstab OBJECT-TYPE
                          SYNTAX  Gauge
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 9 }

                  tcpInSegs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 10 }

                  tcpOutSegs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 11 }

                  tcpRetransSegs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 12 }

                  -- the TCP connections table

                  tcpConnTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF TcpConnEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcp 13 }

                  tcpConnEntry OBJECT-TYPE
                          SYNTAX  TcpConnEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnTable 1 }

                  TcpConnEntry ::= SEQUENCE {
                      tcpConnState
                          INTEGER,
                      tcpConnLocalAddress
                          IpAddress,
                      tcpConnLocalPort
                          INTEGER
                      tcpConnRemAddress
                          IpAddress,
                      tcpConnRemPort
                          INTEGER
                  }

                  tcpConnState OBJECT-TYPE
                          SYNTAX  INTEGER {
                                      closed(1),
                                      listen(2),
                                      synSent(3),
                                      synReceived(4),
                                      established(5),
                                      finWait1(6),
                                      finWait2(7),
                                      closeWait(8),
                                      lastAck(9),
                                      closing(10),
                                      timeWait(11)
                                  }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnEntry 1 }

                  tcpConnLocalAddress OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnEntry 2 }

                  tcpConnLocalPort OBJECT-TYPE
                          SYNTAX  INTEGER
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnEntry 3 }

                  tcpConnRemAddress OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnEntry 4 }

                  tcpConnRemPort OBJECT-TYPE
                          SYNTAX  INTEGER (0..65535)
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { tcpConnEntry 5 }

                  -- the UDP group

                  udpInDatagrams OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { udp 1 }

                  udpNoPorts OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { udp 2 }

                  udpInErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { udp 3 }

                  udpOutDatagrams OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { udp 4 }

          	  -- the UDP Listener table

          	  -- The UDP listener table contains information about this
          	  -- entity's UDP end-points on which a local application is
          	  -- currently accepting datagrams.

          	  udpTable OBJECT-TYPE
              	  	  SYNTAX  SEQUENCE OF UdpEntry
              	  	  ACCESS  not-accessible
              	  	  STATUS  mandatory
              	  	  ::= { udp 5 }

          	  udpEntry OBJECT-TYPE
              	  	  SYNTAX  UdpEntry
              	  	  ACCESS  not-accessible
              	  	  STATUS  mandatory
              	  	  -- INDEX   { udpLocalAddress, udpLocalPort }
              	  	  ::= { udpTable 1 }

          	  UdpEntry ::=
              	  	  SEQUENCE {
                  	  	  udpLocalAddress
                      	  	  IpAddress,
                  	  	  udpLocalPort
                      	  INTEGER (0..65535)
              	  	  }

          	  udpLocalAddress OBJECT-TYPE
              	  	  SYNTAX  IpAddress
              	  	  ACCESS  read-only
              	  	  STATUS  mandatory
              	  	  ::= { udpEntry 1 }

          	  udpLocalPort OBJECT-TYPE
              	  	  SYNTAX  INTEGER (0..65535)
              	  	  ACCESS  read-only
              	  	  STATUS  mandatory
              	  	  ::= { udpEntry 2 }

                  -- the EGP group

                  egpInMsgs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egp 1 }

                  egpInErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egp 2 }

                  egpOutMsgs OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egp 3 }

                  egpOutErrors OBJECT-TYPE
                          SYNTAX  Counter
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egp 4 }

                  -- the EGP Neighbor table

                  egpNeighTable OBJECT-TYPE
                          SYNTAX  SEQUENCE OF EgpNeighEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egp 5 }

                  egpNeighEntry OBJECT-TYPE
                          SYNTAX  EgpNeighEntry
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egpNeighTable 1 }

                  EgpNeighEntry ::= SEQUENCE {
                      egpNeighState
                          INTEGER,
                      egpNeighAddr
                          IpAddress
                  }

                  egpNeighState OBJECT-TYPE
                          SYNTAX  INTEGER {
                                      idle(1),
                                      acquisition(2),
                                      down(3),
                                      up(4),
                                      cease(5)
                                  }
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egpNeighEntry 1 }

                  egpNeighAddr OBJECT-TYPE
                          SYNTAX  IpAddress
                          ACCESS  read-only
                          STATUS  mandatory
                          ::= { egpNeighEntry 2 }

hp 		OBJECT IDENTIFIER ::= { enterprises 11 }
nm		OBJECT IDENTIFIER ::= { hp 2 }
hpsystem		OBJECT IDENTIFIER ::= { nm 3 }
interface	OBJECT IDENTIFIER ::= { nm 4 }
hpicmp		OBJECT IDENTIFIER ::= { nm 7 }
hpsnmp		OBJECT IDENTIFIER ::= { nm 13 }
openView	OBJECT IDENTIFIER ::= { nm 17 }
general		OBJECT IDENTIFIER ::= { hpsystem 1 }
computerSystem	OBJECT IDENTIFIER ::= { general 1 } 
fileSystem	OBJECT IDENTIFIER ::= { general 2 }
processes	OBJECT IDENTIFIER ::= { general 4 }
trap		OBJECT IDENTIFIER ::= { hpsnmp 1 }
snmpdConf	OBJECT IDENTIFIER ::= { hpsnmp 2 }
authfail	OBJECT IDENTIFIER ::= { hpsnmp 4 }
openViewTrapVars OBJECT IDENTIFIER ::= { openView 2 }



computerSystemUpTime OBJECT-TYPE
	SYNTAX	TimeTicks
	ACCESS	read-only
	STATUS	mandatory
	::= { computerSystem 1 }

computerSystemUsers OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS	read-only
	STATUS	mandatory
	::= { computerSystem 2 }

computerSystemAvgJobs1 OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 3 }

computerSystemAvgJobs5 OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 4 }

computerSystemAvgJobs15 OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 5 }

computerSystemMaxProc OBJECT-TYPE
	SYNTAX 	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 6 }

computerSystemFreeMemory OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 7 }

computerSystemPhysMemory OBJECT-TYPE
	SYNTAX 	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 8 }

computerSystemMaxUserMem OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 9 }

computerSystemSwapConfig OBJECT-TYPE
	SYNTAX 	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 10 }

computerSystemEnabledSwap OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 11 }

computerSystemFreeSwap OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 12 }

computerSystemUserCPU OBJECT-TYPE
	SYNTAX 	Counter
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 13 }

computerSystemSysCPU OBJECT-TYPE
	SYNTAX 	Counter
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 14 }

computerSystemIdleCPU OBJECT-TYPE
	SYNTAX 	Counter
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 15 }

computerSystemNiceCPU OBJECT-TYPE
	SYNTAX 	Counter
	ACCESS 	read-only
	STATUS	mandatory
	::= { computerSystem 16 }


fileSystemMounted OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystem 1 }


fileSystemTable OBJECT-TYPE
	SYNTAX	SEQUENCE OF FileSystemEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { fileSystem 2 }

fileSystemEntry OBJECT-TYPE
	SYNTAX	FileSystemEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { fileSystemTable 1 }

FileSystemEntry ::= SEQUENCE {
    fileSystemID1
	INTEGER,
    fileSystemID2
	INTEGER,
    fileSystemName
	DisplayString,
    fileSystemBlock
	INTEGER,
    fileSystemBfree
	INTEGER,
    fileSystemBavail
	INTEGER,
    fileSystemBsize
	INTEGER,
    fileSystemFiles
	INTEGER,
    fileSystemFfree
	INTEGER,
    fileSystemDir
	DisplayString
}

fileSystemID1 OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 1 }

fileSystemID2 OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory    
	::= { fileSystemEntry 2 }

fileSystemName OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 3 }

fileSystemBlock OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 4 }

fileSystemBfree OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 5 }

fileSystemBavail OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 6 }

fileSystemBsize OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 7 }

fileSystemFiles OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 8 }

fileSystemFfree OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 9 }

fileSystemDir OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS 	read-only
	STATUS	mandatory
	::= { fileSystemEntry 10 }


processNum OBJECT-TYPE
	SYNTAX 	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { processes 1 }


processTable OBJECT-TYPE
	SYNTAX	SEQUENCE OF ProcessEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { processes 2 }

processEntry	OBJECT-TYPE
	SYNTAX	ProcessEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { processTable 1 }

ProcessEntry ::= SEQUENCE {
    processPID
	INTEGER,
    processIdx
	INTEGER,
    processUID
	INTEGER,
    processPPID
	INTEGER,
    processDsize
	Gauge,
    processTsize
	Gauge,
    processSsize
	Gauge,
    processNice
	Gauge,
    processMajor
	INTEGER,
    processMinor
	INTEGER,
    processPgrp
	INTEGER,
    processPrio
	INTEGER,
    processAddr
	INTEGER,
    processCPU
	Gauge,
    processUtime
	TimeTicks,
    processStime
	TimeTicks,
    processStart
	TimeTicks,
    processFlags
	INTEGER,
    processStatus
	INTEGER,
    processWchan
	INTEGER,
    processProcNum
	INTEGER,
    processCmd
	DisplayString,
    processTime
	INTEGER,
    processCPUticks
	Counter,
    processCPUticksTotal
	Counter,
    processFss
	INTEGER,
    processPctCPU
	Gauge,
    processRssize
	Gauge,
    processSUID
	INTEGER,
    processUname
	DisplayString,
    processTTY
	DisplayString
}

processPID OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 1 }

processIdx OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 2 }

processUID OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 3 }

processPPID OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 4 }

processDsize OBJECT-TYPE
	SYNTAX	Gauge 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 5 }

processTsize OBJECT-TYPE
	SYNTAX	Gauge 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 6 }

processSsize OBJECT-TYPE
	SYNTAX	Gauge 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 7 }

processNice OBJECT-TYPE
	SYNTAX	Gauge 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 8 }

processMajor OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 9 }

processMinor OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 10 }

processPgrp OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 11 }

processPrio OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 12 }

processAddr OBJECT-TYPE
	SYNTAX	INTEGER 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 13 }

processCPU OBJECT-TYPE
	SYNTAX	Gauge 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 14 }

processUtime OBJECT-TYPE
	SYNTAX	TimeTicks
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 15 }

processStime OBJECT-TYPE
	SYNTAX	TimeTicks 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 16 }

processStart OBJECT-TYPE
	SYNTAX	TimeTicks 
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 17 }

processFlags OBJECT-TYPE
	SYNTAX	INTEGER {
		incore(1),
		sys(2),
		locked(4),
		trace(8),
		trace2(16)
		}
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 18 }

processStatus OBJECT-TYPE
	SYNTAX	INTEGER {
		sleep(1),
		run(2),
		stop(3),
		zombie(4),
		other(5),
		idle(6)
		}
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 19 }

processWchan OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 20 }

processProcNum OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 21 }

processCmd OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 22 }

processTime OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 23 }

processCPUticks OBJECT-TYPE
	SYNTAX	Counter
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 24 }

processCPUticksTotal OBJECT-TYPE
	SYNTAX	Counter
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 25 }

processFss OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 26 }

processPctCPU OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 27 }

processRssize OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 28 }

processSUID OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 29 }

processUname OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 30 }

processTTY OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS	read-only
	STATUS	mandatory
	::= { processEntry 31 }


icmpEchoReq OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { hpicmp 1 }


trapDestinationNum OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS 	read-only
	STATUS	mandatory
	::= { trap 1 }


trapDestinationTable OBJECT-TYPE
	SYNTAX	SEQUENCE OF TrapDestinationEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { trap 2 }

trapDestinationEntry OBJECT-TYPE
	SYNTAX	TrapDestinationEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { trapDestinationTable 1 }

TrapDestinationEntry ::= SEQUENCE {
    trapDestination
	NetworkAddress
}

trapDestination OBJECT-TYPE
	SYNTAX	NetworkAddress
	ACCESS 	read-write
	STATUS	mandatory
    	::= { trapDestinationEntry 1 }


snmpdConfRespond OBJECT-TYPE
	SYNTAX	INTEGER {
		    true(1),
		    false(2)
		}
	ACCESS 	read-write
	STATUS	mandatory
	::= { snmpdConf 1 }

snmpdReConfigure OBJECT-TYPE
	SYNTAX	INTEGER {
		    reset(1)
		}
	ACCESS 	read-write
	STATUS	mandatory
	::= { snmpdConf 2 }

snmpdFlag OBJECT-TYPE
	SYNTAX	INTEGER {
		    removetrap(1),
		    netwareproxy(2)
		}
	ACCESS 	read-only
	STATUS	mandatory
	::= { snmpdConf 3 }

snmpdLogMask	OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-write
	STATUS	mandatory
	::= { snmpdConf 4 }

snmpdVersion	OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { snmpdConf 5 }

snmpdStatus OBJECT-TYPE
	SYNTAX	INTEGER {
		    up(1),
		    down(2)
		}
	ACCESS 	read-write
	STATUS	mandatory
	::= { snmpdConf 6 }

snmpdSize OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS 	read-only
	STATUS	mandatory
	::= { snmpdConf 7 }

snmpdWhatString OBJECT-TYPE
	SYNTAX	DisplayString
	ACCESS 	read-only
	STATUS	mandatory
	::= { snmpdConf 9 }


authFailTable OBJECT-TYPE
	SYNTAX	SEQUENCE OF AuthFailEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { authfail 1 }

authFailEntry OBJECT-TYPE
	SYNTAX	AuthFailEntry
	ACCESS 	not-accessible
	STATUS	mandatory
	::= { authFailTable 1 }

AuthFailEntry ::= SEQUENCE {
    authIpAddress
	NetworkAddress,
    authTime
	TimeTicks,
    authCommunityName 
	OBJECT-TYPE
}

authIpAddress OBJECT-TYPE
	SYNTAX	NetworkAddress
	ACCESS 	read-only
	STATUS	mandatory
    	::= { authFailEntry 1 }

authTime OBJECT-TYPE
	SYNTAX	TimeTicks
	ACCESS 	read-only
	STATUS	mandatory
    	::= { authFailEntry 2 }

authCommunityName OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS 	read-only
	STATUS	mandatory
    	::= { authFailEntry 3 }

 
openViewSourceId OBJECT-TYPE
	SYNTAX	INTEGER
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 1 }

openViewSourceName OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 2 }

openViewObjectId OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 3 }

openViewData OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 4 }

openViewSeverity OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 5 }

openViewCategory OBJECT-TYPE
	SYNTAX	OCTET STRING
	ACCESS	not-accessible
	STATUS	mandatory
	::= { openViewTrapVars 6 }

-- the SNMP group

-- Implementation of the SNMP group is mandatory for all
-- systems which support an SNMP protocol entity.  Some of
-- the objects defined below will be zero-valued in those
-- SNMP implementations that are optimized to support only
-- those functions specific to either a management agent or
-- a management station.  In particular, it should be
-- observed that the objects below refer to an SNMP entity,
-- and there may be several SNMP entities residing on a
-- managed node (e.g., if the node is hosting acting as
-- a management station).

snmpInPkts OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 1 }
	
snmpOutPkts OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 2 }

snmpInBadVersions OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 3 }

snmpInBadCommunityNames OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 4 }

snmpInBadCommunityUses OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 5 }

snmpInASNParseErrs OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 6 }

-- { snmp 7 } is not used
snmpInTooBigs OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 8 }

snmpInNoSuchNames OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 9 }

snmpInBadValues OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 10 }

snmpInReadOnlys OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 11 }

snmpInGenErrs OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 12 }

snmpInTotalReqVars OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 13 }

snmpInTotalSetVars OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 14 }

snmpInGetRequests OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 15 }

snmpInGetNexts OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 16 }

snmpInSetRequests OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 17 }

snmpInGetResponses OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 18 }

snmpInTraps OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 19 }

snmpOutTooBigs OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 20 }

snmpOutNoSuchNames OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 21 }

snmpOutBadValues OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 22 }

-- { snmp 23 } is not used
snmpOutGenErrs OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 24 }
	
snmpOutGetRequests OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 25 }

snmpOutGetNexts OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 26 }

snmpOutSetRequests OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 27 }

snmpOutGetResponses OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 28 }

snmpOutTraps OBJECT-TYPE
	SYNTAX  Counter
	ACCESS  read-only
	STATUS  mandatory
	::= { snmp 29 }

snmpEnableAuthenTraps OBJECT-TYPE
	SYNTAX  INTEGER { enabled(1), disabled(2) }
	ACCESS  read-write
	STATUS  mandatory
	::= { snmp 30 }

-- the SGI MIB group
-- This is the private SGI MIB group.

sgi		OBJECT IDENTIFIER ::= { enterprises 59 }
sgiSystem	OBJECT IDENTIFIER ::= { sgi 3 }

sgiProcessor	OBJECT IDENTIFIER ::= { sgiSystem 1 }

sgiProcTable	  OBJECT-TYPE
	SYNTAX  SEQUENCE OF SgiProcEntry
	ACCESS  read-write
	STATUS  mandatory
	::= { sgiProcessor 1 }

sgiProcEntry OBJECT-TYPE
	SYNTAX  SgiProcEntry
	ACCESS  read-write
	STATUS  mandatory
	::= { sgiProcTable 1 }

SgiProcEntry ::= SEQUENCE {
	sgiProcIndex
		INTEGER,
	sgiProcType
		INTEGER,
	sgiProcFrequency
		INTEGER,
	sgiProcCpuType
		INTEGER,
	sgiProcCpuMajorRev
		INTEGER,
	sgiProcCpuMinorRev
		INTEGER,
	sgiProcFpuType
		INTEGER,
	sgiProcFpuMajorRev
		INTEGER,
	sgiProcFpuMinorRev
		INTEGER,
	sgiProcEnabled
		INTEGER,
	sgiProcMaster
		INTEGER,
	sgiProcClock
		INTEGER,
	sgiProcFastClock
		INTEGER,
	sgiProcIsolated
		INTEGER,
	sgiProcBroadcast
		INTEGER,
	sgiProcPreemptive
		INTEGER
}

sgiProcIndex OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 1 }

sgiProcType OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 2 }

sgiProcFrequency OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 3 }

sgiProcCpuType OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 4 }

sgiProcCpuMajorRev OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 5 }

sgiProcCpuMinorRev OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 6 }
                          
sgiProcFpuType OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 7 }
                          
sgiProcFpuMajorRev OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 8 }
                          
sgiProcFpuMinorRev OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 9 }
                         	 
sgiProcEnabled OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 10 }
                          
sgiProcMaster OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 11 }
                          
sgiProcClock OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 12 }
                          
sgiProcFastClock OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 13 }
	
sgiProcIsolated OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 14 }

sgiProcBroadcast OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 15 }

sgiProcPreemptive OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcEntry 16 }

-- The SGI graphics processor group

sgiGraphicsTable	  OBJECT-TYPE
	SYNTAX  SEQUENCE OF SgiGraphicsEntry
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiProcessor 2 }

sgiGraphicsEntry OBJECT-TYPE
	SYNTAX  SgiGraphicsEntry
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiGraphicsTable 1 }

SgiGraphicsEntry ::= SEQUENCE {
	sgiGraphicsIndex
		INTEGER,
	sgiGraphicsType
		INTEGER,
	sgiGraphicsQual
		INTEGER
}

sgiGraphicsIndex OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiGraphicsEntry 1 }

sgiGraphicsType OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiGraphicsEntry 2 }

sgiGraphicsQual OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiGraphicsEntry 3 }

-- SGI NetVisualizer group

sgiNv OBJECT IDENTIFIER ::= { sgi 4 }

sgiNvStationType	  OBJECT-TYPE
	SYNTAX  INTEGER
	ACCESS  read-only
	STATUS  mandatory
	::= { sgiNv 1 }



          unix    OBJECT IDENTIFIER ::= { enterprises 4 }

          smux    OBJECT IDENTIFIER ::= { unix 4 }

          smuxPeerTable   OBJECT-TYPE
                  SYNTAX  SEQUENCE OF SmuxPeerEntry
                  ACCESS  not-accessible
                  STATUS  mandatory
                  ::= { smux 1 }

          smuxPeerEntry   OBJECT-TYPE
                  SYNTAX  SmuxPeerEntry
                  ACCESS  not-accessible
                  STATUS  mandatory
                  ::= { smuxPeerTable 1 }

          SmuxPeerEntry ::=
              SEQUENCE {
                  smuxPindex
                      INTEGER,
                  smuxPidentity
                      OBJECT IDENTIFIER,
                  smuxPdescription
                      DisplayString,
                  smuxPstatus
                      INTEGER
              }

          smuxPindex      OBJECT-TYPE
                  SYNTAX  INTEGER
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxPeerEntry 1 }

          smuxPidentity   OBJECT-TYPE
                  SYNTAX  OBJECT IDENTIFIER
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxPeerEntry 2 }

          smuxPdescription OBJECT-TYPE
                  SYNTAX  DisplayString
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxPeerEntry 3 }

          smuxPstatus     OBJECT-TYPE
                  SYNTAX  INTEGER { 
			valid(1), 
			invalid(2), 
			connecting(3) 
		}
                  ACCESS  read-write
                  STATUS  mandatory
                  ::= { smuxPeerEntry 4 }

          smuxTreeTable   OBJECT-TYPE
                  SYNTAX  SEQUENCE OF SmuxTreeEntry
                  ACCESS  not-accessible
                  STATUS  mandatory
                  ::= { smux 2 }

          smuxTreeEntry   OBJECT-TYPE
                  SYNTAX  SmuxTreeEntry
                  ACCESS  not-accessible
                  STATUS  mandatory
                  ::= { smuxTreeTable 1 }

          SmuxTreeEntry ::=
              SEQUENCE {
                  smuxTsubtree
                      OBJECT IDENTIFIER,
                  smuxTpriority
                      INTEGER,
                  smuxTindex
                      INTEGER,
                  smuxTstatus
                      INTEGER
              }

          smuxTsubtree    OBJECT-TYPE
                  SYNTAX  OBJECT IDENTIFIER
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxTreeEntry 1 }

          smuxTpriority OBJECT-TYPE
                  SYNTAX  INTEGER 
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxTreeEntry 2 }

          smuxTindex OBJECT-TYPE
                  SYNTAX  INTEGER
                  ACCESS  read-only
                  STATUS  mandatory
                  ::= { smuxTreeEntry 3 }

          smuxTstatus     OBJECT-TYPE
                  SYNTAX  INTEGER { 
			valid(1), 
			invalid(2) 
		}
                  ACCESS  read-write
                  STATUS  mandatory
                  ::= { smuxTreeEntry 4 }

--
-- Peer Networks demo MIBs
--

  dir      	OBJECT IDENTIFIER ::= { peer-demos 4 }

--
-- the table group has one attribute of its own - the number of rows in the
-- contained table.  It also contains the table of names.
--

  dirName 	OBJECT-TYPE
      SYNTAX  	DisplayString 
      ACCESS  	read-write
      STATUS  mandatory
      ::= { dir 1 }

  dirFiles 	OBJECT-TYPE
      SYNTAX  	SEQUENCE OF FileEntry
      ACCESS  	not-accessible
      STATUS  	mandatory
      ::= { dir 2 }

  fileEntry 	OBJECT-TYPE
      SYNTAX  	FileEntry
      ACCESS  	not-accessible
      STATUS  	mandatory
      -- INDEX   	{ fileName }
      ::= { dirFiles 1 }

  FileEntry ::=
      SEQUENCE {
	  fileName
	      DisplayString
      }

  fileName	OBJECT-TYPE
      SYNTAX  	DisplayString 
      ACCESS  	read-only
      STATUS  mandatory
      ::= { fileEntry 1 }


--
--	tblTrap - MIB for sample program illustrating generation of TRAPs
--	for indexed MIB variables
--

  tblTrap	OBJECT IDENTIFIER ::= { peer-demos 9 }

  tblTrapCards	OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS	read-only
	STATUS	mandatory
	::= { tblTrap 1 }

  tblTrapPorts	OBJECT-TYPE
	SYNTAX	Gauge
	ACCESS	read-only
	STATUS	mandatory
	::= { tblTrap 2 }

  tblTrapTable 	OBJECT-TYPE
	SYNTAX  	SEQUENCE OF TableEntry
	ACCESS  	not-accessible
	STATUS  	mandatory
	::= { tblTrap 3 }

  tblTrapTableEntry 	OBJECT-TYPE
	SYNTAX  	TableEntry
	ACCESS  	not-accessible
	STATUS  	mandatory
	-- INDEX   	{ cardNumber, portNumber }
      ::= { tblTrapTable 1 }

  TableEntry ::= SEQUENCE {
	  cardNumber	INTEGER,
	  portNumber	INTEGER,
	  ratio		DisplayString
      }

  cardNumber	OBJECT-TYPE
      SYNTAX  	INTEGER 
      ACCESS  	read-only
      STATUS  mandatory
      ::= { tblTrapTableEntry 1 }


  portNumber	OBJECT-TYPE
      SYNTAX  	INTEGER
      ACCESS  	read-only
      STATUS  mandatory
      ::= { tblTrapTableEntry 2 }


  ratio		OBJECT-TYPE
	SYNTAX  DisplayString
	ACCESS  read-only
	STATUS  mandatory
      ::= { tblTrapTableEntry 3 }


