#
# Sun Makefile definitions for cmd/netman subdirectories.
#

#
# SGI Commonrules
#
#------------------------

# Notes:
#   - Definitions with the same names only need to be passed on the
#     command line of recursive makes if they would be redefined by
#     the sub-makefile.  Definitions passed on the command line are
#     not reset by the environment or the definitions in the makefile.
#
COMMONRULES= $(DEPTH)/Commonrules.sun
COMMONTARGS= clobber clean rmtargets depend incdepend fluff tags
PRODUCTDEFS= $(ROOT)/usr/include/make/$(PRODUCT)defs
RELEASEDEFS= $(ROOT)/usr/include/make/releasedefs


#
# Make tools, i.e., programs which must exist on both native and cross
# development systems to build the software.  $(ECHO) is a make tool because
# echo usage in makefiles should be portable.
#
AR	= $(TOOLROOT)/usr/5bin/ar
AS	= $(TOOLROOT)/usr/bin/as
AWK	= $(TOOLROOT)/usr/bin/awk
C++	= $(TOOLROOT)/usr/bin/CC
CC	= $(TOOLROOT)/usr/lang/acc
CPS	= $(TOOLROOT)/usr/sbin/cps
ECHO	= $(TOOLROOT)/usr/5bin/echo
F77	= $(TOOLROOT)/usr/bin/f77
FC	= $(F77)		# for MIPS compatibility
LD	= $(TOOLROOT)/usr/bin/ld
LEX	= $(TOOLROOT)/usr/bin/lex
LIBSPEC	= $(TOOLROOT)/usr/sbin/libspec
LINT	= $(TOOLROOT)/usr/bin/lint
LORDER	= $(TOOLROOT)/usr/bin/lorder
M4	= $(TOOLROOT)/usr/bin/m4
MKF2C	= $(TOOLROOT)/usr/bin/mkf2c
MKSHLIB	= $(TOOLROOT)/usr/bin/mkshlib
NAWK	= $(TOOLROOT)/usr/bin/nawk
NM	= $(TOOLROOT)/usr/bin/nm
OAWK	= $(TOOLROOT)/usr/bin/oawk
PC	= $(TOOLROOT)/usr/bin/pc
RANLIB	= $(TOOLROOT)/usr/bin/ranlib
SIZE	= $(TOOLROOT)/usr/bin/size
STRIP	= $(TOOLROOT)/usr/bin/strip
SHELL	= $(TOOLROOT)/bin/sh
YACC	= $(TOOLROOT)/usr/bin/yacc


#
# Cc flags, composed of variable (set on the command line), local
# (defined in the makefile), and global (defined in this file) parts, in
# that order.  This ordering has been used so that the variable or
# locally specified include directories are searched before the globally
# specified ones.
#
CFLAGS	= $(CVERSION) $(VCFLAGS) $(LCFLAGS) $(GCFLAGS)

#
# Each of these three components is divided into defines (-D's and -U's),
# includes (-I's), and other options.  By segregating the different
# classes of flag to cc, the defines (CDEFS) and includes (CINCS) can be
# easily given to other programs, e.g., lint.
#
# Notes:
#   - The local assignments should be to LCOPTS, LCDEFS, and LCINCS, not to
#     LCFLAGS, although CFLAGS will be correctly set if this is done.
#   - If a program cannot be optimized, it should override the setting of
#     OPTIMIZER with a line such as "OPTIMIZER=" in its make file.
#   - If a program cannot be compiled with prototype checking, its makefile
#     should reset PROTOTYPES to the empty string.
#
VCFLAGS	= $(VCDEFS) $(VCINCS) $(VCOPTS)
LCFLAGS	= $(LCDEFS) $(LCINCS) $(LCOPTS)
GCFLAGS	= $(GCDEFS) $(GCINCS) $(GCOPTS)

COPTS	= $(VCOPTS) $(LCOPTS) $(GCOPTS)
CDEFS	= $(VCDEFS) $(LCDEFS) $(GCDEFS)
CINCS	= $(VCINCS) $(LCINCS) $(GCINCS)

# ENDIAN is defined only when cross-compiling, and is currently
# only used for 4D30LE; it normally comes from the productdefs file.
#
# The nullary -I flag is defined to defeat searches of /usr/include in
# a cross development environment.  Where it is placed on the command line
# does not matter.
#
GCOPTS	= $(OPTIMIZER) $(PROTOTYPES) $(ENDIAN)
GCDEFS	= 
GCINCS	= -I -I$(INCLDIR)

#
# Default optimizer and prototype options
#
OPTIMIZER  = -O
#PROTOTYPES = -prototypes
#CVERSION   = -cckr


#
# C++ flags are decomposed using the same hierarchy as C flags.
#
C++FLAGS  = $(CVERSION) $(VC++FLAGS) $(LC++FLAGS) $(GC++FLAGS)

VC++FLAGS = $(VC++DEFS) $(VC++INCS) $(VC++OPTS)
LC++FLAGS = $(LC++DEFS) $(LC++INCS) $(LC++OPTS)
GC++FLAGS = $(GC++DEFS) $(GC++INCS) $(GC++OPTS)

C++OPTS   = $(VC++OPTS) $(LC++OPTS) $(GC++OPTS)
C++DEFS   = $(VC++DEFS) $(LC++DEFS) $(GC++DEFS)
C++INCS   = $(VC++INCS) $(LC++INCS) $(GC++INCS)

GC++OPTS  = $(OPTIMIZER)
GC++INCS  = -I -I$(INCLDIR)/CC -I$(INCLDIR)


#
# Loader flags, composed of library (-l's) and option parts, with
# the libraries appearing last.  Both of these are divided into variable,
# local, and global parts.  The composition of LDFLAGS is done in the
# other "direction" from CFLAGS so that all the -L's, which are part of
# LDOPTS, appear before any of the -l's, which are part of LDLIBS.
# Another benefit of segregating the libraries from the remaining of the
# loader options is that the libraries alone can easily be given to
# another program, e.g., lint.
#
# Notes:
#   - -s belongs in GCOPTS or in the IDB program that does the actual
#     installation.
#   - If a program should not be linked with the shared version of libc,
#     then its make file should override the setting of SHDLIBC with a
#     line such as "SHDLIBC=".
#
LDFLAGS	= $(LDOPTS) $(LDLIBS) $(ENDIAN)

LDOPTS	= $(VLDOPTS) $(LLDOPTS) $(GLDOPTS)
LDLIBS	= $(VLDLIBS) $(LLDLIBS) $(GLDLIBS)

GLDOPTS= -L -L$(ROOT)/usr/lib
GLDLIBS= $(SHDLIBC)

#
# In order to be able to turn off shared library usage, we set up macros
# defining shared library options here.
#
SHDLIBC=-lc
SHDGL=-lgl


#
# F77 flags are just like cc flags.
#
FFLAGS= $(VFFLAGS) $(LFFLAGS) $(GFFLAGS)

VFFLAGS	= $(VF77DEFS) $(VF77INCS) $(VF77OPTS)
LFFLAGS	= $(LF77DEFS) $(LF77INCS) $(LF77OPTS)
GFFLAGS	= $(GF77DEFS) $(GF77INCS) $(GF77OPTS)

F77OPTS	= $(VF77OPTS) $(LF77OPTS) $(GF77OPTS)
F77DEFS	= $(VF77DEFS) $(LF77DEFS) $(GF77DEFS)
F77INCS	= $(VF77INCS) $(LF77INCS) $(GF77INCS)

GF77OPTS= $(GCOPTS)
GF77DEFS= $(GCDEFS)
GF77INCS= $(GCINCS)


#
# Pc flags are just like cc flags.
#
PFLAGS	= $(VPFLAGS) $(LPFLAGS) $(GPFLAGS)

VPFLAGS	= $(VPDEFS) $(VPINCS) $(VPOPTS)
LPFLAGS	= $(LPDEFS) $(LPINCS) $(LPOPTS)
GPFLAGS	= $(GPDEFS) $(GPINCS) $(GPOPTS)

POPTS	= $(VPOPTS) $(LPOPTS) $(GPOPTS)
PDEFS	= $(VPDEFS) $(LPDEFS) $(GPDEFS)
PINCS	= $(VPINCS) $(LPINCS) $(GPINCS)

GPOPTS	= $(GCOPTS)
GPDEFS	= $(GCDEFS)
GPINCS	= $(GCINCS)


#
# The install command to use.
#
INSTALL	= $(TOOLROOT)/usr/bin/install

ALLGFXMACH = mach(GFXBOARD=LIGHT SUBGR=LIGHT GFXBOARD=ECLIPSE SUBGR=ECLIPSE \
		  GFXBOARD=CLOVER1 SUBGR=IP4G GFXBOARD=CLOVER2 SUBGR=IP4GT \
		  GFXBOARD=CLOVER2 SUBGR=IP5GT GFXBOARD=CLOVER2 SUBGR=IP7GT \
		  GFXBOARD=STAPUFT SUBGR=IP7GT GFXBOARD=STAPUFT SUBGR=SKYWR)

#
# Shell script for generating make dependencies.  MKDEPEND is a shorthand
# for the tool's absolute pathname.  MKDEPENDC adds MKDEPCFLAGS and the -c
# mkdepend option to this.  The other language's mkdepend variables try to
# include their language's name in the variable names.  Unfortunately, a
# lot of makefiles already use the nondescript LMKDEPFLAGS for C language
# mkdepend options, so we initialize LMKDEPCFLAGS with $(LMKDEPFLAGS).
#
MKDEPEND     = $(DEPTH)/mkdepend
MKDEPENDAS   = $(MKDEPEND) $(MKDEPASFLAGS) -c "$(CC) $(ASFLAGS) -M"
MKDEPENDC++  = $(MKDEPEND) $(MKDEPC++FLAGS) -c "$(C++F) -M"
MKDEPENDC    = $(MKDEPEND) $(MKDEPCFLAGS) -c "$(CCF) -M"

MKDEPASFLAGS  = $(VMKDEPASFLAGS) $(LMKDEPASFLAGS) $(GMKDEPASFLAGS)
MKDEPC++FLAGS = $(VMKDEPC++FLAGS) $(LMKDEPC++FLAGS) $(GMKDEPC++FLAGS)
MKDEPCFLAGS   = $(VMKDEPCFLAGS) $(LMKDEPCFLAGS) $(GMKDEPCFLAGS)
LMKDEPCFLAGS  = $(LMKDEPFLAGS)

GMKDEPFLAGS    = -e 's@ $(INCLDIR)/@ $$(INCLDIR)/@' -e 's@ $(ROOT)/@ $$(ROOT)/@'
GMKDEPASFLAGS  = $(GMKDEPFLAGS) -s ASM
GMKDEPC++FLAGS = $(GMKDEPFLAGS) -s C++ -e 's@\.o++: @\.o: @'
GMKDEPCFLAGS   = $(GMKDEPFLAGS)

#
# Macro to add to LMKDEPCFLAGS or LMKDEPC++FLAGS if your makefile builds
# single-source programs using null suffix rules (e.g., .c:).  This option
# works for both C and C++ make depend.
#
NULLSUFFIX_MKDEPFLAG= -e 's@\.o+*:@:@'

#
# MKDEPFILE is the name of the dependency database, included by commonrules.
#
MKDEPFILE = Makedepend

#
# CDEPFILES lists all C or cc-compiled source files that depend on header
# files computable by $(MKDEPENDC).  C++DEPFILES lists all C++ files having
# dependencies computable by $(MKDEPENDC++).  If you develop yacc/C++ source,
# reset these variables after the include of commondefs and before including
# commonrules to move $(YFILES) from the C to the C++ list.
#
ASDEPFILES  = $(ASFILES)
C++DEPFILES = $(C++FILES)
CDEPFILES   = $(CFILES) $(LFILES) $(YFILES)
DEPFILES    = $(ASDEPFILES) $(C++DEPFILES) $(CDEPFILES)

#
# Directory shorthands, mainly for make depend (see GMKDEPFLAGS above).
#
INCLDIR	= $(ROOT)/usr/include


#
# Convenient command macros that include the flags macros.
#
# You should always invoke make in makefiles via $(MAKE), as make passes
# all command-line variables through the environment to sub-makes.
#
# Never use just $(CCF), etc. in rules that link executables; LDFLAGS
# needs to be included after your objects in the command line.
#
# ENDIAN is inclued in ASF because ASFLAGS is usually defined
# on an as-needed basis in makefiles, but ASF is almost never redefined
ASF	= $(AS) $(ASFLAGS) $(ENDIAN)
C++F	= $(C++) $(C++FLAGS)
CCF	= $(CC) $(CFLAGS)
F77F	= $(F77) $(FFLAGS)
LDF	= $(LD) $(LDFLAGS)
LEXF	= $(LEX) $(LFLAGS)
PCF	= $(PC) $(PFLAGS)
YACCF	= $(YACC) $(YFLAGS)


#
# Local definitions. These are used for debugging purposes. Make sure that
# the product builds properly without the local definitions, unless these
# local definitions are checked in!
#
# To access a localdefs file outside the current directory, you can
# set LOCALDEFS on the command line. Similarly for localrules. Or,
# you can have the localdefs file just sinclude the appropriate other
# include file.
#
LOCALDEFS  = ./localdefs
LOCALRULES = ./localrules

#sinclude $(LOCALDEFS)
#------------------------

#
# More stuff for cmd/netman
#
MAKERULES= ${DEPTH}/Makerules.sun

METERING= -DMETERING
NDEBUG= -UNDEBUG

CVERSION=
LCDEFS= ${NCDEFS} ${METERING} ${NDEBUG} -D_LANGUAGE_C
LCINCS= ${NCINCS} -I${DEPTH}/include -I/usr/lang/SC1.0/ansi_include -I/usr/5include
LCOPTS= ${NCOPTS}
LDOPTS= -L/usr/lang/SC1.0/ansi_lib -L/usr/5lib
LLDLIBS= ${NLDLIBS}

LIBDIR= ${DEPTH}/lib
LIBNAME= libnetman.a
LIBRARY= ${LIBDIR}/${LIBNAME}

SUNOWN= -o root -g staff
SUNPATH= /usr/netvis
