/*
 * Copyright 1991, Silicon Graphics, Inc.
 * All Rights Reserved.
 *
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
 * the contents of this file may not be disclosed to third parties, copied or
 * duplicated in any form, in whole or in part, without the prior written
 * permission of Silicon Graphics, Inc.
 *
 * RESTRICTED RIGHTS LEGEND:
 * Use, duplication or disclosure by the Government is subject to restrictions
 * as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
 * and Computer Software clause at DFARS 252.227-7013, and/or in similar or
 * successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
 * rights reserved under the Copyright Laws of the United States.
 *
 * $Revision: 1.3 $
 */

/*
 * AppleTalk Datagram Delivery Protocol
 */
import elap;
import llc;

%{
extern void nbp_snoop_lkupreply(DataStream *, ProtoStack *);
%}

%pragma ddp.indexload=7

export	ddp.type, ddp.dstsocknum, ddp.srcsocknum,
	ddp.dstnetnum, ddp.srcnetnum, ddp.dstnodeid, ddp.srcnodeid;

protocol ddp "AppleTalk Datagram Delivery Protocol"
	     (type:dstsocknum, type:srcsocknum, type)
	     : elap(1), elap(2), llc(0x809b)
{
    enum ddptype {
	rtmpResp=1, nbpType=2, atpType=3, aepType=4, rtmpReq=5,
	zipType=6, adspType=7
    };

    switch (elap.type)
    {
      case 1:
	u_short	pad "Padding" : 6 -vv;
	u_short	len "Datagram Length" : 10 -v;

      default:
	u_short	pad "Padding" : 2 -vv;
	u_short	hopcnt "Hop Count" : 4 -v;
	u_short	len "Datagram Length" : 10 -v;
	u_short	chksum "DDP Checksum" -v;
	u_short	dstnetnum "Destination Network Number";
	u_short	srcnetnum "Source Network Number";
	u_char	dstnodeid "Destination Node ID" -v;
	u_char	srcnodeid "Source Node ID" -v;
    }
    u_char	dstsocknum "Destination Socket Number";
    u_char	srcsocknum "Source Socket Number";
    ddptype	type "DDP Type" : 8 -vv;

    ddp_trim_ether_padding($ds, elap.type, len);
    if (type == nbpType)
	nbp_snoop_lkupreply($ds, $ps);
}

%{
static void
ddp_trim_ether_padding(DataStream *ds, int type, int len)
{
	int pad;

	len -= (type == 1) ? 5 : 13;
	pad = ds->ds_count - len;
	if (pad > 0) {
		ds->ds_size -= pad;
		ds->ds_count = len;
	}
}

static Expr *
ddp_resolve(char *name, int len, struct snooper *sn)
{
        unsigned long addr;
        Expr *ex;

        if (ddp_hostaddr(name, &addr))
		return 0;
        ex = expr(EXOP_NUMBER, EX_NULLARY, name);
        ex->ex_val = addr;
        return ex;
}
%}

