/*
 * Copyright 1992, Silicon Graphics, Inc.
 * All Rights Reserved.
 *
 * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
 * the contents of this file may not be disclosed to third parties, copied or
 * duplicated in any form, in whole or in part, without the prior written
 * permission of Silicon Graphics, Inc.
 *
 * RESTRICTED RIGHTS LEGEND:
 * Use, duplication or disclosure by the Government is subject to restrictions
 * as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
 * and Computer Software clause at DFARS 252.227-7013, and/or in similar or
 * successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
 * rights reserved under the Copyright Laws of the United States.
 *
 * $Revision: 1.1 $
 */

/*
 * Sun Network Lock Manager Protocol over RPC/UDP
 */
import sunrpc;

protocol nlm "Network Lock Manager Protocol" : sunrpc (100021)
{
	enum nlmproc {
		NLM_NULL=0,
		NLM_TEST=1,
		NLM_LOCK=2,
		NLM_CANCEL=3,
		NLM_UNLOCK=4,
		NLM_GRANTED=5,
		NLM_TEST_MSG=6,
		NLM_LOCK_MSG=7,
		NLM_CANCEL_MSG=8,
		NLM_UNLOCK_MSG=9,
		NLM_GRANTED_MSG=10,
		NLM_TEST_RES=11,
		NLM_LOCK_RES=12,
		NLM_CANCEL_RES=13,
		NLM_UNLOCK_RES=14,
		NLM_GRANTED_RES=15,
		// XXX decode the following
		NLM_SHARE=20,		
		NLM_UNSHARE=21,
		NLM_NM_LOCK=22,
		NLM_FREE_ALL=23
	};

	struct netobj {
		u_long	nlen -v;
		u_char	nbytes [rndup(nlen)];
	};
	struct ohnetobj {
		u_long	ohlen -v;
		char	ohname [rndup(ohlen)];
	};

	enum nlm_stats {
		Granted = 0,
		Denied = 1,
		DeniedNoLocks = 2,
		Blocked = 3,
		DeniedGracePeriod = 4,
		Deadlck = 5
	};

	struct nlm_holder {
		u_long exclusive;	// bool
		u_long svid;
		ohnetobj owner;
		u_long offset;
		u_long len;
	};

	struct nlm_testrply {
		nlm_stats stat : 32;
		if (stat == Denied) {
			struct nlm_holder holder;
		}
	};

	struct nlm_testres {
		netobj cookie;
		nlm_testrply stat;
	};

	struct nlm_lock {
		u_long	caller_len;
		char	caller [rndup(caller_len)];
		netobj	fh -v;
		ohnetobj owner;
		u_long	svid;
		u_long	offset;
		u_long	len;
	};

	struct nlm_lockargs {
		netobj cookie;
		u_long block;		// bool
		u_long exclusive;	// bool
		struct nlm_lock alock;
		u_long reclaim;		// bool
		u_long state;
	};

	struct nlm_cancargs {
		netobj cookie;		
		u_long block;		// bool
		u_long exclusive;	// bool
		struct nlm_lock alock;
	};

	struct nlm_testargs {
		netobj cookie;		
		u_long exclusive;	// bool
		struct nlm_lock alock;
	};

	struct nlm_unlockargs {
		netobj cookie;		
		struct nlm_lock alock;
	};

//----------------------------------------------------------------------

	nlmproc procedure = sunrpc.proc;

	if (sunrpc.direction == sunrpc.CALL) {
	    switch(procedure) {
		case NLM_TEST:
		case NLM_TEST_MSG:
			nlm_testargs testargs;

		case NLM_LOCK:
		case NLM_LOCK_MSG:
			nlm_lockargs lockargs;

		case NLM_CANCEL:
		case NLM_CANCEL_MSG:
			nlm_cancargs cancargs;

		case NLM_UNLOCK:
		case NLM_UNLOCK_MSG:
			nlm_unlockargs unlockargs;

		case NLM_GRANTED:
		case NLM_GRANTED_MSG:
			nlm_testargs grantargs;

		case NLM_TEST_RES:
			nlm_testres testres;

		case NLM_LOCK_RES:
		case NLM_CANCEL_RES:
		case NLM_UNLOCK_RES:
		case NLM_GRANTED_RES:
			netobj cookie;
			nlm_stats status : 32;
	    }
	} else {	// direction == REPLY
	    switch(procedure) {
		case NLM_TEST:
			nlm_testres testres;
		case NLM_LOCK:
		case NLM_CANCEL:
		case NLM_UNLOCK:
		case NLM_GRANTED:
			netobj cookie;
			nlm_stats status : 32;
	    }
	}
}

%{
static int
rndup(int len)
{
        return ((len+3)/4)*4;
}
%}
