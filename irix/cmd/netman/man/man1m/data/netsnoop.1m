'\"macro stdmacro
.TH NETSNOOP 1M local "Silicon Graphics, Inc."
.SH NAME
netsnoop \- capture and decode network traffic
.SH SYNOPSIS
.B /usr/sbin/netsnoop
.RB [ \-L\0 \f2protocols\fP]
.RB [ \-b\0 \f2buffer\fP]
.RB [ \-c\0 \f2count\fP]
.RB [ \-d ]
.RB [ \-e\0 \f2flags\fP]
.RB [ \-h\0 \f2hexprotos\fP]
.RB [ \-i\0 \f2interface\fP]
.RB [ \-l\0 \f2length\fP]
.RB [ \-n\0 \f2nullprotos\fP]
.RB [ \-o\0 \f2tracefile\fP]
.RB [ \-p\0 \f2protopts\fP]
.RB [ \-q\0 \f2limit\fP]
.RB [ \-t\0 \f2interval\fP]
.RB [ \-rsvxy ]
.RI [ "filter ..." ]
.SH DESCRIPTION
.I Netsnoop
captures packets which match an optional
.I filter
from a network
.I interface
or saved
.IR tracefile .
If
.I filter
is omitted and no
.B \-e
option is given, it captures packets promiscuously.
For each packet,
.I netsnoop
prints decoded frames of protocol data on standard output.
It stores captured packets in a buffer before decoding them;
the default buffer size is one.
After decoding buffered packets,
.I netsnoop
resumes capturing.
Only the superuser can run
.I netsnoop
on a local network interface.
Users accepted by the
.IR snoopd (1M)
authorization file on a NetVisualyzer station can
.I netsnoop
from interfaces on that host.
.SS Options
.TP 16
\-L \f2protocols\fP
List information on standard output about the symbols and options defined by
.IR protocols ,
a comma-separated list of protocol names.
List information defined by all protocols if
.I protocols
is
.BR \s-1all\s0 .
If
.I protocols
or a part of it has the form
.IR protocol.name ,
list information about
.I name
only.
.B \-L
causes
.I netsnoop
to ignore other options and to exit after listing protocol information.
.TP 16
\-b \f2buffer\fP
Set the capture buffer size to
.I buffer
packets.
.TP 16
\-c \f2count\fP
Stop capturing after receiving
.I count
packets that match
.IR filter .
All
.I count
packets are buffered before they are decoded; that is, \f3\-c\fP \f2count\fP
implies \f3\-b\fP \f2count\fP.
.TP 16
\-d
Dump entire packets in hexadecimal rather than decoding them symbolically.
This option overrides the partial hex dump options
.B \-h
and
.BR \-x .
.TP 16
\-e \f2flags\fP
Capture packets received with the data link errors specified by
.IR flags ,
a comma-separated list of flag names.
The following flags are supported:
.BR \s-1any\s0 ,
.BR \s-1frame\s0 ,
.BR \s-1checksum\s0 ,
.BR \s-1toobig\s0 ,
.BR \s-1toosmall\s0 ,
.BR \s-1nobufs\s0 ,
.BR \s-1overflow\s0 ,
and
.BR \s-1memory\s0 .
See
.IR snoop (7P)
for more about
.I netsnoop
error flags.
If the
.I filter
argument is omitted,
.I netsnoop
captures only packets received non-promiscuously with the specified errors.
Otherwise it captures both packets matching
.I filter
and packets received with errors.
.TP 16
\-h \f2hexprotos\fP
Dump the frames for the protocols named in the comma-separated
.I hexprotos
list in hexadecimal rather than decoding them symbolically.
.TP 16
\-i \f2interface\fP
Snoop on the network associated with
.IR interface .
By default,
.I netsnoop
captures packets from a host's primary interface.
.I Interface
may name a network interface, a host that addresses a configured interface,
an interface on a host (\f2host\fP\|:\|\f2ifname\fP) running
.IR snoopd ,
or a tracefile created by the
.BR \-o
option.
Invoke
.IR netstat (1M)
with the
.B \-i
option to list configured interfaces and their hostnames.
.TP 16
\-l \f2length\fP
Set the length in bytes of packet data to capture.
By default,
.I netsnoop
captures all bytes of packet data.
.TP 16
\-n \f2nullprotos\fP
Do not decode or dump frames for the protocols named in the comma-separated
.I nullprotos
list.
.TP 16
\-o \f2tracefile\fP
Output undecoded packets to
.IR tracefile .
By deferring packet decoding until a subsequent
.I netsnoop
invocation, this option improves capture effectiveness.
It typically produces a smaller tracefile than would result
from redirecting decoded output.
.TP 16
\-p \f2protopts\fP
Set protocol options.
Each option in the comma-separated
.I protopts
list has one of these forms:
.if t .sp .5
.if n .sp
.nf
.IR protocol.option
.IR protocol.\f3\s-1no\s0\fPoption
.IR protocol.option=value
.fi
.if t .sp .5
.if n .sp
Use \f3\s-1netsnoop \-L\s0\fP \f2protocol\fP to list a protocol's options.
.TP 16
\-q \f2limit\fP
Reserve
.I limit
bytes for packet buffering in
.IR netsnoop 's
kernel input queue.
The default reservation is 60000 bytes.
.TP 16
\-r
Decode received sequence numbers rather than numbers rewritten to count
only matches against
.I filter
and reception gaps.
.TP 16
\-s
After decoding, print statistics telling how many packets were
received by the network interface, and how many were subsequently
dropped due to kernel resource limits.
.TP 16
\-t \f2interval\fP
Capture for
.I interval
seconds.
This option may be used with
.B \-c
to capture at most
.I count
packets in a given
.IR interval .
.TP 16
\-v
Verbose decoding: decode more packet fields.
This option accumulates, so
.B \-vv
causes
.I netsnoop
to show a very verbose representation of protocol data.
.TP 16
\-x
Dump packet data not interpreted by protocol decoders in hexadecimal.
.TP 16
\-y
Consult the NIS name service when translating numbers to names.
By default,
.I netsnoop
uses local databases such as
.I /etc/hosts
and
.IR /etc/services .
.SS Filter Syntax
.I Netsnoop
concatenates all
.I filter
arguments after the last option and interprets the resulting string as
an expression of operands joined by operators.
Operands are sub-expressions, path expressions, C integer constants,
or protocol-specific strings.
All C operators except the assignment operators and
.B \s-1?:\s0
are supported.
The keywords
.B \s-1and\s0
and
.B \s-1or\s0
may be used in place of
.B \s-1&&\s0
and
.BR \s-1||\s0 ,
respectively.
A single 
.B \s-1=\s0
may be used in place of
.BR \s-1==\s0 .
The keyword
.B \s-1not\s0
may be used in place of
.BR \s-1!\s0 .
Operators that are shell metawords must be quoted if
.I netsnoop
is invoked from a shell.
The subtraction operator
.B \s-1\-\s0
must be preceded by white space; otherwise it is taken to be part of
a protocol-specific string (an IP hostname, for example).
.PP
A path expression is a period-separated sequence of components, of which all
but the last must be well-formed C identifiers.
Each identifier except the last must name a protocol encapsulated by the
preceding component's protocol, or a structured field in the last protocol.
The first identifier in a path names a field in the network interface's
data link protocol, or a network protocol encapsulated by the data link
protocol.
Supported data link protocols include 10 Mb/s Ethernet, 100 Mb/s FDDI,
Serial Line IP, and the loopback pseudo-protocol.
.PP
If the last identifier in a path expression names a protocol, then the
expression evaluates to 1 given a packet containing the listed protocols'
frames, nested in the expressed order; otherwise it evaluates to 0.
If the last identifier names a protocol field of structure or array type,
then the expression evaluates to 1 given a packet containing such a field,
and to 0 otherwise.
If the last identifier names a protocol field of scalar type, then the
expression evaluates to the field's contents in host order, given a packet
that contains the field and that matches the path preceding the field.
If the last identifier names a protocol macro,
.I netsnoop
parses the macro's definition in the preceding protocol's context.
Otherwise the last component in a path must be a protocol-specific string,
for example, the name of a well-known port.
.PP
.I Netsnoop
decodes a packet only if
.I filter
evaluates to a non-zero value.
.SS Error Correction
A filter may lack
.B \s-1=\s0
.RB ( \s-1==\s0 )
and
.B \s-1and\s0
.RB ( \s-1&&\s0 )
operators in many cases.
.IR Netsnoop 's
filter parser will correct such errors by inserting the appropriate operator,
based on the type of the operand to the left of the insertion point.
For example, the filter
.Ex 1
ip.dst fergie udp.dport 1023
.Ee
.if n .sp
will be corrected as follows.
First, the parser inserts
.B \s-1==\s0
after
.BR \s-1ip.dst\s0 ,
because the latter is not a comparison:
.Ex 1
ip.dst == fergie udp.dport 1023
.Ee
.if n .sp
Then, because no operator was found after the comparison
.BR "\s-1ip.dst == fergie\s0" ,
the parser inserts
.BR \s-1&&\s0 :
.Ex 1
ip.dst == fergie && udp.dport 1023
.Ee
.if n .sp
Finally,
.B \s-1==\s0
is inserted after
.BR \s-1udp.dport\s0 ,
for the same reason that
.B \s-1==\s0
was inserted after
.BR \s-1ip.dst\s0 ,
above:
.Ex 1
ip.dst == fergie && udp.dport == 1023
.Ee
.PP
.I Netsnoop
prints the corrected filter enclosed by brackets ([]) before it starts
capturing, so that the user can verify the correction.
.SS Protocol Strings
Each protocol name in a path opens a scope containing resolved strings,
such as hostnames and addresses.
For example, the Internet Protocol (IP) resolves
.B \s-1ip.broadcast\s0
to the IP broadcast address configured for the
network interface being snooped,
.B \s-1ip.netmask\s0
to the configured IP netmask, and
.B \s-1192.26.75.12\s0
to a four-byte IP address in host order.
.PP
If a string occurs in an expression without a qualifying protocol path,
.I netsnoop
tries to resolve it in the scope of the last protocol to its left in
the expression's parse tree.
If that fails, it tries the data link protocol's scope.
Thus
.B "\s-1ip.dst=broadcast\s0"
matches packets destined for the local network's IP broadcast address,
while
.B "\s-1broadcast=ip.dst\s0"
applied to an Ethernet interface cannot be parsed, because
.B \s-1broadcast\s0
is unresolved in Ethernet's scope (but
.B "\s-1ip.broadcast=ip.dst\s0"
parses).
.SS Macros
Protocols define macros in their own scopes to provide
manifest names for magic numbers and to provide shorthand for common
lengthy expressions.
For example, the Ethernet protocol defines
.B \s-1BROADCAST\s0
as the Ethernet broadcast address,
.BR \s-1ff:ff:ff:ff:ff:ff\s0 .
Protocols also define macros in encapsulating protocol scopes to provide
nicknames for long protocol path expressions.
For example, IP defines
.B \s-1nfs\s0
as a nickname for
.B \s-1ip.udp.sunrpc.nfs\s0
in all data link protocols that contain
.BR \s-1ip\s0 .
Macros may have arguments, which follow the macro name either separated
by white space, or in a parenthesized, comma-separated list containing
arbitrary white space.
.PP
To define a macro in the subject interface's data link protocol, use
.BR "\s-1define(\f2name\fP, \f2def\fP)\s0" .
Calls to
.B \s-1define\s0
may be preceded by a protocol path, to define macros in
higher-level protocols.
Strings of the form \f3$\fP\f2N\fP within
.I def
represent formal arguments to
.IR name .
Each such formal is replaced by the
.IR N th
actual argument supplied when
.I name
is called.
The number of formal and actual arguments must agree.
Calls to
.B \s-1define\s0
expand to
.BR \s-11\s0 ,
so the
.B \s-1,\s0
(comma) or
.B \s-1&&\s0
.RB ( \s-1and\s0 )
operator must be used to join definitions with expressions in a complex
.I filter
argument.
.SS Output Format
Each decoded packet begins with a header telling its sequence number,
length in bytes, and reception time.
The sequence number starts with zero and counts only packets that
match
.I filter
and packets dropped by the kernel, which are assumed to match
(use the
.B \-r
option to decode reception, rather than matched, sequence numbers).
The reception time is displayed in hours, minutes, seconds, and
milliseconds.
For packets received with errors,
.I netsnoop
prints an exclamation point after the sequence number and prints
error flag mnemonics after the reception time.
.PP
After the header come lines containing decoded protocol data.
Data are grouped into frames labeled by protocol names.
Each frame consists of field names and field contents.
Field names are as in filter expressions.
By default,
.I netsnoop
decodes only interesting fields within a frame.
The
.B \-v
option increases the level of decoding detail.
With the
.B \-x
option, any data not interpreted by protocol decoders is dumped in lines
of hexadecimal (with ASCII), labeled by byte offset from the beginning of
the packet.
For example, below is the output of
.BR "\s-1netsnoop -vxc 1 tcp\s0" :
.Ex 12
.in -.5i
0000:   len  102   time 11:40:31.925
    ether:  src 8:0:69:2:c:a7/SGI         dst 8:0:69:2:31:30/SGI       
    ip:     len 44              id 6393             off 0
            src twilight.wpd.sgi.com      dst england.wpd.sgi.com      
    tcp:    sport 1023                    dport 1021                  
            seq 627,392,000     ack 0               flags SYN       
            win 16,384          urp 0
            maxseg 1460 
    00058:                                00 00 00 00 00 06            ......
    00064:  00 14 7f 00 00 01 7f 00 00 01 00 6f 13 49 00 00  ...........o.I..
    00080:  00 00 00 00 00 00 50 00 00 00 00 00 00 00 00 00  ......P.........
    00096:  00 00 ff eb                                      ....
.in +.5i
.Ee
.SS Environment
By default,
.I netsnoop
maps names to numbers using local database files such as
.IR /etc/hosts .
The
.B \s-1ip.hostresorder\s0
protocol option governs IP hostname/address resolution.
See
.IR sethostresorder (3N)
and
.IR resolver (4)
for the format of this option's value.
.I Netsnoop
caches name/number associations in protocol-specific files in
.IR /tmp ,
so that subsequent invocations can more quickly map numbers that occur
frequently in network traffic.
Cache entries have a cache-specific ``time-to-live'' \(em older cache files
are unlinked at startup, and reconstituted to contain new-found associations
upon termination.
.PP
When
.I netsnoop
is started, it tries to read a file named
.I .netsnooprc
in the user's home directory.
A valid
.I .netsnooprc
file consists of blank lines, comment lines beginning with
.BR # ,
macro definitions, default command options, and protocol option settings.
Macro definition have the form
.Ex 1
define	ip.udst	ip.dst == $1 && udp.dport == $2
.Ee
.PP
Default options may be set as follows:
.Ex 1
option	\-x \-n ether
.Ee
.PP
Protocol options are set as with the
.B \-p
option (white space may be used as well as commas to separate options):
.PP
.Ex 1
set	ip.noetherupdate arpip.noetherupdate
.Ee
.PP
.IR Netsnoop 's
command line overrides
.IR .netsnooprc .
.PP
.SH EXAMPLES
To capture all packets received without errors and decode every byte
in each packet, issue:
.Ex 1
netsnoop \-vvvx
.Ee
.PP
To capture
.IR rlogin (1)
traffic between
.B \s-1jake\s0
and
.BR \s-1elwood\s0 ,
issue:
.Ex 1
netsnoop ip.between jake elwood and tcp.port login
.Ee
.PP
The following invocation captures all packets, good or bad:
.Ex 1
netsnoop \-e any 1
.Ee
.PP
A constant non-zero filter expression must be used with
.B \-e
in order to capture all packets.
Without the
.BR \s-11\s0 ,
only bad packets destined for the snooping host would be captured.
.PP
To capture 10 UDP broadcast packets from host
.BR \s-1jake\s0 ,
issue:
.Ex 1
netsnoop \-c 10 udp and ip.src=jake and ip.dst=broadcast
.Ee
.PP
The following invocation captures NFS traffic from
.B \s-1elwood\s0
to
.BR \s-1jake\s0 ,
and makes use of error correction:
.Ex 2
netsnoop nfs ip.src elwood ip.dst jake
[nfs && ip.src == elwood && ip.dst == jake]
.Ee
.SH FILES
.nf
\&.netsnooprc
$HOME/.netsnooprc		User customization file
/tmp/.*.cache			Protocol-dependent caches
/usr/sbin/netsnoop		Executable
.fi
.SH SEE ALSO
analyzer(1M), snoopd(1M), ypfiles(4), ethernet(7), snoop(7P),
\f2NetVisualyzer User's Guide\fP.
.SH BUGS
You cannot start capturing based on match, interval, or count;
nor is there an option to stop capturing based on match.
.\".SH AUTHOR
.\"Brendan Eich
.\"so /pubs/tools/origin.sgi
