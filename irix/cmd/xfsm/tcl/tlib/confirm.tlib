###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	confirm.tlib
# Version:	$Revision: 1.3 $
# Synopsis:	Generic functions to get confirmation of an action by the user.
# Packages:	Confirm-Base
#		Confirm-Get
#
# Note:		A "handle" is an identifier that is used as a key to store
#		the widget ids and any instance specific data an instance
#		of a dialog.  This makes it possible to have multiple
#		instances of this dialog and still be able to get the data
#		associated with a specific instance.
#
#
#%COMMENT_END

#%COMMENT_BEGIN
# Package:	Confirm-Base
# Functions:	cfrm:realize
#		cfrm:manage
#		cfrm:fill
#		cfrm:attachSubSection
#		cfrm:_create
#
# Function:	cfrm:realize
# Synopsis:
# Arguments:	- handle	The identifier for this instance of the dialog.
#		- parent	The parent widget for this instance.
#
# Function:	cfrm:manage
# Synopsis:	Manages an instance of the confirmation dialog.
# Arguments:	- handle	The identifier for the desired instance.
#
# Function:	cfrm:fill
# Synopsis:	Fills in the dialog with data.  The data includes the question
#		to be posed to the user along with the objects that the user
#		chose for the operation.
# Arguments:	- handle	The identifier for the desired instance.
#		- question
#		- objects
#
# Function:	cfrm:attachSubSection
# Synopsis:	Attaches a widget to the dialog.  This allows the caller to
#		add some instance specific widgets to the dialog.
# Arguments:	- handle	The identifier for the desired instance.
#		- w		The id of the widget to be attached to
#				the dialog.
#
# Function:	cfrm:_create
# Synopsis:	Creates an instance of the confirmation dialog.
# Arguments:	- handle	The identifier for this instance of the dialog.
#		- parent	The parent widget for this instance.
#
#
#%COMMENT_END

#@package: Confirm-Base	cfrm:realize cfrm:manage cfrm:fill cfrm:attachSubSection

proc cfrm:realize { handle parent } \
{
	global	_GW_cfrm _GD_cfrm

	if {! [info exists _GW_cfrm($handle,dialog)]} {
		set _GD_cfrm(maxRcSize) 1
		set _GW_cfrm($handle,dialog) [cfrm:_create $handle $parent]
	}
}

proc cfrm:manage { handle } \
{
	global	_GW_cfrm; $_GW_cfrm($handle,dialog) manageChild
}

proc cfrm:fill { handle question objects } \
{
	global	_GW_cfrm _GD_cfrm

	$_GW_cfrm($handle,dialog) setValues -messageString $question

	foreach item $objects {
		obj:parse $item o_class o_host o_nm o_type
		lappend items $o_nm
	}

	set len	[llength $items]
	if {$len <= $_GD_cfrm(maxRcSize)} {

		[$_GW_cfrm($handle,sl) parent] unmanageChild
		$_GW_cfrm($handle,rc) manageChild

		for {set i 0} {$i < $len} {incr i} {
			$_GW_cfrm($handle,rc).$i setValues \
					-labelString [lindex $items $i]
			$_GW_cfrm($handle,rc).$i manageChild
		}
		for {set i $len} {$i < $_GD_cfrm(maxRcSize)} {incr i} {
			$_GW_cfrm($handle,rc).$i unmanageChild
		}
	} else {
		$_GW_cfrm($handle,rc) unmanageChild
		$_GW_cfrm($handle,sl) manageChild
		[$_GW_cfrm($handle,sl) parent] manageChild

		set visible [expr { ($len < 8) ? $len : 8 }]
		$_GW_cfrm($handle,sl) setValues \
				-items $items \
				-itemCount $len \
				-visibleItemCount $visible
	}
}

proc cfrm:attachSubSection { handle w } \
{
	global	_GW_cfrm

	$w setValues \
		-topAttachment attach_none \
		-leftAttachment attach_form \
		-rightAttachment attach_form \
		-bottomAttachment attach_form

	$_GW_cfrm($handle,obj_area) setValues \
		-topAttachment attach_form \
		-leftAttachment attach_form \
		-rightAttachment attach_form \
		-bottomAttachment attach_widget \
		-bottomWidget $w
}

#########################################
#		Private			#
#########################################
proc cfrm:_create { handle parent } \
{
	global	_GW_cfrm _GD_cfrm

	set dialog [xmQuestionDialog $parent.$handle \
			-messageAlignment alignment_center \
			-okLabelString Yes \
			-cancelLabelString No \
			-dialogStyle dialog_full_application_modal \
			-noResize true]

	set _GW_cfrm($handle,work) [xmForm $dialog.workarea managed]

	set _GW_cfrm($handle,obj_area) \
			[xmForm $_GW_cfrm($handle,work).obj_area managed \
			-topAttachment attach_form \
			-leftAttachment attach_form \
			-rightAttachment attach_form \
			-bottomAttachment attach_form]

	set _GW_cfrm($handle,rc) \
			[xmRowColumn $_GW_cfrm($handle,obj_area).rc \
			-orientation vertical \
			-entryAlignment alignment_beginning \
			-topAttachment attach_form \
			-leftAttachment attach_form \
			-rightAttachment attach_form \
			-bottomAttachment attach_form]
	loop i 0 $_GD_cfrm(maxRcSize) 1 {
		xmLabel $_GW_cfrm($handle,rc).$i
	}

	set _GW_cfrm($handle,sl) \
			[xmScrolledList $_GW_cfrm($handle,obj_area).sl \
			-fontList 9x15bold \
			-topAttachment attach_form \
			-leftAttachment attach_form \
			-rightAttachment attach_form \
			-bottomAttachment attach_form \
			-translations "#override \
			    <Btn1Down>:action(xfs:actionIgnore)"]

	return $dialog
}

#@packend

#%COMMENT_BEGIN
# Package:	Confirm-GET
# Functions:	cfrm:getDialog
#		cfrm:getWorkArea
#
# Function:	cfrm:getDialog
# Synopsis:	Returns the widget id for an instance of the dialog.
# Arguments:	- handle	The identifier for this instance of the dialog.
#
# Function:	cfrm:getWorkArea
# Synopsis:	Returns the widget id for the work area of an instance
#		of the dialog.
# Arguments:	- handle	The identifier for the desired instance.
#
#%COMMENT_END

#@package: Confirm-Get	cfrm:getDialog cfrm:getWorkArea

proc cfrm:getDialog { handle } \
{
	global	_GW_cfrm

	if {[info exists _GW_cfrm($handle,dialog)]} {
		return $_GW_cfrm($handle,dialog)
	}
	return ""
}

proc cfrm:getWorkArea { handle } \
{
	global	_GW_cfrm

	return $_GW_cfrm($handle,work)
}

#@packend
