--------------------------------
Filename:	combo.tlib
Version:	$Revision: 1.1 $
Synopsis:	Convenience functions for interfacing with combo-boxes.
Packages:	Combo-Get
		Combo-Set
		Combo-Update


Package:	Combo-Get
Functions:	combo:getValue
		combo:getItems
		combo:getSelectedItem

Function:	combo:getValue
Synopsis:	Returns the current value of the combo-box.
Arguments:	- w		The widget id for the combo-box.

Function:	combo:getItems
Synopsis:	Returns the current list of items for the combo-box.
Arguments:	- w		The widget id for the combo-box.

Function:	combo:getSelectedItem
Synopsis:	Returns the currently selected item for the combo-box.
Arguments:	- w		The widget id for the combo-box.

Package:	Combo-Set
Functions:	combo:setValue
		combo:setItems
		combo:selectItem

Function:	combo:getValue
Synopsis:	Sets the current value of the combo-box.
Arguments:	- w		The widget id for the combo-box.
		- val		The desired value.

Function:	combo:setItems
Synopsis:	Sets the current list of items for the combo-box.
Arguments:	- w		The widget id for the combo-box.
		- items		The list of items
		- visible	An optional argument that specifies how
				many of the items should be visible in
				the pulldown scrolled list.

Function:	combo:selectItem
Synopsis:	Sets the currently selected item for the combo-box.
Arguments:	- w		The widget id for the combo-box.
		- val		The desired item.
		- notify	An optional argument that specifies whether
				or not the combo-box selection callbacks
				should be called.  This is only relevant
				if the desired item is in the list.

Package:	Combo-Update
Functions:	combo:updateHostList
		combo:updateDiskList
		combo:updatePartitionList
		combo:updateExportList
		combo:updateFsLocalList

Function:	combo:updateHostList
Synopsis:	Sets the current list of items in the combo-box to the list
		of hosts retrieved from the given host.
Arguments:	- w		The widget id for the combo-box.
		- host		The host from which to retrieve the list
				of hosts.

Function:	combo:updateDiskList
Synopsis:	Sets the current list of items in the combo-box to the list
		of disks retrieved from the given host.
Arguments:	- w		The widget id for the combo-box.
		- host		The host from which to retrieve the list
				of disks.

Function:	combo:updatePartitionList
Synopsis:	Sets the current list of items in the combo-box to the list
		of partitions for a given disk on a given host.
Arguments:	- w		The widget id for the combo-box.
		- host		The host on which the disk resides.
		- disk		The name of the disk from which the partition
				list is to be retrieved.

Function:	combo:updateExportList
Synopsis:	Sets the current list of items in the combo-box to the list
		of exported _file systems_ on a given host.  Note that this
		only finds the file systems that are exported.  It does not
		find any directories that are exported.
Arguments:	- w		The widget id for the combo-box.
		- host		The host from which to retrieve the list
				of exported file systems.
		- state		An optional argument that defines what state
				the returned file systems should be in.  This
				may be one of: any, mounted, unmounted.
				The default is any.

Function:	combo:updateFsLocalList
Synopsis:	Sets the current list of items in the combo-box to the list
		of local file systems on a given host.  Local file systems
		are any file systems that are not NFS mounted.
Arguments:	- w		The widget id for the combo-box.
		- host		The host from which to retrieve the list
				of local file systems.
		- state		An optional argument that defines what state
				the returned file systems should be in.  This
				may be one of: any, mounted, unmounted.
				The default is any.




--------------------------------
Filename:	confirm.tlib
Version:	$Revision: 1.1 $
Synopsis:	Generic functions to get confirmation of an action by the user.
Packages:	Confirm-Base
		Confirm-Get

Note:		A "handle" is an identifier that is used as a key to store
		the widget ids and any instance specific data an instance
		of a dialog.  This makes it possible to have multiple
		instances of this dialog and still be able to get the data
		associated with a specific instance.


Package:	Confirm-Base
Functions:	cfrm:realize
		cfrm:manage
		cfrm:fill
		cfrm:attachSubSection
		cfrm:_create

Function:	cfrm:realize
Synopsis:
Arguments:	- handle	The identifier for this instance of the dialog.
		- parent	The parent widget for this instance.

Function:	cfrm:manage
Synopsis:	Manages an instance of the confirmation dialog.
Arguments:	- handle	The identifier for the desired instance.

Function:	cfrm:fill
Synopsis:	Fills in the dialog with data.  The data includes the question
		to be posed to the user along with the objects that the user
		chose for the operation.
Arguments:	- handle	The identifier for the desired instance.
		- question
		- objects

Function:	cfrm:attachSubSection
Synopsis:	Attaches a widget to the dialog.  This allows the caller to
		add some instance specific widgets to the dialog.
Arguments:	- handle	The identifier for the desired instance.
		- w		The id of the widget to be attached to
				the dialog.

Function:	cfrm:_create
Synopsis:	Creates an instance of the confirmation dialog.
Arguments:	- handle	The identifier for this instance of the dialog.
		- parent	The parent widget for this instance.


Package:	Confirm-GET
Functions:	cfrm:getDialog
		cfrm:getWorkArea

Function:	cfrm:getDialog
Synopsis:	Returns the widget id for an instance of the dialog.
Arguments:	- handle	The identifier for this instance of the dialog.

Function:	cfrm:getWorkArea
Synopsis:	Returns the widget id for the work area of an instance
		of the dialog.
Arguments:	- handle	The identifier for the desired instance.




--------------------------------
Filename:	tu.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions for converting between bytes and other units.
Packages:	Cvt-Base

Note:		When converting to units, the default action is to convert
		to the largest unit possible.  This can be overridden by
		specifying a "desired" unit.

		The following (case insensitive) strings are recognized
		as units:
				GB - Gigabytes
				MB - Megabytes
				KB - Kilobytes
				b  - Blocks


Package:	Cvt-Base
Functions:	cvt:bytesToUnits
		cvt:unitsToBytes
		cvt:parseSizeString

Function:	cvt:bytesToUnits
Synopsis:	Convert a number bytes to a given unit.
Arguments:	- validUnit	A list of valid units to convert to.  The list
				is a subset of: g, m, k
		- bytes		The number of bytes.
		- vSize		A reference to a variable in which the
				converted number is to be stored.
		- vUnit		A reference to a variable in which the
				converted unit is to be stored.
		- dUnit		An optional parameter that specifies the
				desired unit to convert to.
		- bSize		The size of a block.  This is used when "dUnit"
				is set to "b".

Function:	cvt:unitsToBytes
Synopsis:	Convert a number and a unit to a number of bytes.
Arguments:	- str		A string containing a number a possibly a
				unit specification.
		- vSize		A reference to a variable in which the
				converted number is to be stored.
		- vUnit		A reference to a variable in which the
				current unit is to be stored.
		- dUnit		An optional parameter that specifies what
				unit to use if the "str" argument contains
				only a number and not a unit.
		- bSize		The size of a block.  This is used when the
				current unit is determined to be "blocks".

Function:	cvt:parseSizeString
Synopsis:	Parse a string to separate the number portion from the
		unit specification.
Arguments:	- str		A string containing a number a possibly a
				unit specification.
		- vSize		A reference to a variable in which the
				parsed number is to be stored.
		- vUnit		A reference to a variable in which the
				parsed unit is to be stored.



--------------------------------
Filename:	err.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions used to display error messages.
Packages:	ErrorMessage-Base


Package:	ErrorMessage-Base
Functions:	em:getSeverity
		em:setMessageString
		em:storeMsg
		em:simpleMsg
		em:_displayMsg

Function:	em:getSeverity
Synopsis:	Returns the current severity level.
Arguments:	- handle	Reserved for future use.

Function:	em:setMessageString
Synopsis:	Stores the string that will used to set the XmNmessageString
		resource of the error dialog.
Arguments:	- handle	Reserved for future use.
		- msg		The value to which XmNmessageString will be set.

Function:	em:storeMsg
Synopsis:	This is used when the application wants to be able to display
		a variable length message for later display.  A timer is
		set so that the message dialog is popped up when control is
		returned to the event processing procedure.  It can be called
		any number of times with any size message.  The messages are
		eventually concatenated and displayed in a scrolled text area.
Arguments:	- handle	Reserved for future use.
		- severity	Used to determine the value of XmNdialogType.
		- msg		This string is stored for when the dialog is
				displayed.

Function:	em:simpleMsg
Synopsis:	Immediately creates a XmMessageBox dialog (if necessary),
		sets the XmNdialogType and XmNmessageString resources, and
		manages the dialog.
Arguments:	- handle	Reserved for future use.
		- severity	Used to determine the value of XmNdialogType.
		- msg		The value to which XmNmessageString is set.
		- parent	The parent of the dialog.  This is an optional
				parameter.  If it is not provided the parent
				will be the top-level shell (.)

Function:	em:_displayMsg
Synopsis:	This is a private function.  It is called indirectly when the
		timer set by em:storeMsg expires.  It concatenates all messages
		stored by calls to em:storeMsg since the last time the dialog
		was managed.  The message is prefixed with a date/time stamp
		and the most recent value stored by em:setMessageString.  The
		scrolled text area is positioned such that the top of the
		message is visible.
Arguments:	None



--------------------------------
Filename:	fsu.tlib
Version:	$Revision: 1.1 $
Synopsis:	General file system utilities.
Packages:	FS-Base
		FS-Util
		FS-Meta


Package:	FS-Base
Functions:	fsu:getLocalObjs
		fsu:getExportObjs

Function:	fsu:getLocalObjs
Synopsis:	Gets the current list of local file systems on a given host.
		Local file systems are any file systems that are not NFS
		mounted.
Arguments:	- host		The host from which to retrieve the list
				of local file systems.
		- state		An optional argument that defines what state
				the returned file systems should be in.  This
				may be one of: any, mounted, unmounted.
				The default is any.

Function:	fsu:getExportObjs
Synopsis:	Gets the current list of of exported _file systems_ on a
		given host.  Note that this only finds the file systems
		that are exported.  It does not find any directories that
		are exported.
Arguments:	- host		The host from which to retrieve the list
				of exported file systems.
		- state		An optional argument that defines what state
				the returned file systems should be in.  This
				may be one of: any, mounted, unmounted.
				The default is any.

Package:	FS-Util
Functions:	fsu:isMounted
		fsu:objsToMountPt

Function:	fsu:isMounted
Synopsis:	Determines whether or not the file system represented by the
		given object signature is mounted.
Arguments:	- object	The object signature representing the file
				system to be queried.
		- mount_pt	A reference to a variable in which the mount
				point for the given object is to be stored.

Function:	fsu:objsToMountPt
Synopsis:	Given a list of object signatures, return a corresponding
		list of mount points.
Arguments:	- objects	A list of object signatures representing the
				file system to be queried.
		- state		Reserved for future use.

Package:	FS-Meta
Functions:	fsu:makeMetaObjs
		fsu:sortMetaObjs

Function:	fsu:makeMetaObjs
Synopsis:	Given a list of object signatures, return a list containing
		the object signatures and their mount points.
Arguments:	- objects	The object signature representing the file
				system to be queried.

Function:	fsu:sortMetaObjs
Synopsis:	A sorting routine that can be used as an argument to
		the "lsort" command.
Arguments:	- x		A meta-object.
		- y		A meta-object.




--------------------------------
Filename:	hostUtil.tlib
Version:	$Revision: 1.1 $
Synopsis:	General functions for getting host related information.
Packages:	HostUtil-Base


Package:	HostUtil-Base
Functions:	hu:getHosts
		hu:getRealHostName
		hu:getIpAddress

Function:	hu:getHosts
Synopsis:	Returns a list of hosts retrieved from the given host.
Arguments:	- host		The host from which to retrieve the list
				of hosts.
		- type		An optional argument that specifies where
				to get the information.  This may have the
				value "etc" or "nis".  If the value is given
				as "etc" the the "hostfile" argument is read.
				If the value is "nis" the list of hosts will
				be retrieved from the nis server.
				The default value is "etc".
		- hostfile	An optional argument that specifies which
				file to read as a hosts file.  This permits
				users to define custom host files that contain
				the list of hosts they most commonly work with.
				The format for this file is the same as for
				/etc/hosts (the default).

Function:	hu:getRealHostName
Synopsis:	
Arguments:	- host		The host from which to retrieve the real
				host name.

Function:	hu:getIpAddress
Synopsis:	
Arguments:	- host		The host from which to retrieve the real
				host name.
		- fullname	A reference to a variable in which to store
				the fully qualified host name.
		- ipaddr	A reference to a variable in which to store
				the IP address (in dot notation) of the host.
		- hostfile	An optional parameter that specifies which
				file to use as the hosts file.



--------------------------------
Filename:	info.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions that create and display data in a general-purpose
		information dialog.
Packages:	Info-Base


Package:	Info-Base
Functions:	iu:createDlg
		iu:createMatrix
		iu:getObjectInfo
		iu:setData
		iu:cookRawData

Function:	iu:createDlg
Synopsis:	Creates a generic information dialog that contains an
		xbaeMatrixWidget.
Arguments:	- handle	An identifier used when storing the widget
				id's in "widgets_arr".
		- parent	The parent widget for this dialog.
		- name		The name of the dialog.
		- mdata_arr	A reference to an array variable which contains
				the data for creating the matrix.
		- wdata_arr	A referenct to an array variable in which
				to store the id's for the created widgets.

Function:	iu:createMatrix
Synopsis:	Creates a generic information dialog that contains an
		xbaeMatrixWidget.  The matrix is made "uneditable".
Arguments:	- parent	The parent widget for the matrix widget.
		- name		The name to be used for the matrix widget.
		- columns	The number of columns for the matrix widget.
		- cwidths	A list of comma separated numbers defining
				the initial width of each column.

Function:	iu:getObjectInfo
Synopsis:	Returns a list of lists.  Each sublist contains the information
		for the corresponding item in the given object list.
Arguments:	- objects	The list of objects for which information
				is desired.

Function:	iu:setData
Synopsis:	Fills in a matrix widget with the data provided.  It first
		loops through all the data to determine the column widths
		required to display the data.
Arguments:	- name		Reserved for future use.
		- matrix	The widget id for the matrix to be filled.
		- cwidths	A comma separated list of the original widths
				for each column in the matrix.
		- data		A list of lists containing the data to be
				displayed.  Each sublist represents a row
				in the matrix.

Function:	iu:cookRawData
Synopsis:	Takes the raw data (one of the sublists returned by
		iu:getObjectInfo) and formats it so that it can be
		displayed in a matrix widget.
Arguments:	- name		This is used in conjunction with "mdata_arr"
				to access the keys for each column in the
				matrix.
		- data		The raw data.
		- mdata_arr	A reference to an array variable which contains
				the information describing which pieces of
				information go in which column.



--------------------------------
Filename:	ipanel.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions used to create and interface with icon panels.
Packages:	IPanel-Base
		IPanel-Util


Package:	IPanel-Base
Functions:	ip:create
		ip:viewCb
		ip:registerMVC
		ip:_setOpt
		ip:_setStyle
		ip:_renameTemplate

Function:	ip:create
Synopsis:	Creates a plethora of widgets including:
			+ A main icon panel
			+ A template icon panel
			+ A label/value pair for displaying the current hostname
			+ Toggle buttons for changing the icon panel style
			+ A toggle button for displaying the template icon panel
			+ A thumbwheel for controlling the size of the icons
			+ in the main icon panel
		In addition two popup menus may be created, one for the
		main icon panel and one for the template icon panel.

Arguments:	- handle	An identifier that is used as a key for storing
				(and later retrieving) the created widgets.
		- parent	The parent widget for the created widgets.
				This is assumed to be a XmForm widget
		- style		The initial style for the icon panel.
		- po_panel	A reference to a variable in which to store
				the widget id of the popup menu for the
				main icon panel.
		- po_tmpl	A reference to a variable in which to store
				the widget id of the popup menu for the
				template icon panel.

Function:	ip:viewCb
Synopsis:	The callback function for the view toggle buttons.
Arguments:	- handle	Identifies which panel the action occured in.
		- set		Whether or not the toggle button was set.
		- item		Identifies the style that the toggle
				button represents.

Function:	ip:registerMVC
Synopsis:	This is used to tie the toggle buttons in the icon panel
		area to the toggle buttons in the "View" pulldown menu
		of the XmMainWindow menu bar.
Arguments:	- handle	Identifies which panel the action occured in.
		- item		The string representing the style
		- control	The widget id for the toggle button that
				represents the "item" argument.

Function:	ip:_setOpt
Synopsis:	Set the state of the template icon panel (managed or
		unmanaged) and modifies the state of the corresponding
		toggle button.
Arguments:	- handle	Identifies which panel the action occured in.
		- set		Whether or not the toggle button was set.
		- opt

Function:	ip:_setStyle
Synopsis:	Sets the main icon panel to the desired style.
Arguments:	- handle	Identifies which panel the action occured in.
		- set		Whether or not the toggle button was set.
		- style		The desired style.

Function:	ip:_renameTemplate
Synopsis:	Allows the templates to be renamed via the icon rename method.
Arguments:	- handle	Identifies which panel the action occured in.
		- panel		The widget id of the template icon panel.

Package:	IPanel-Util
Functions:	ip:setHostName
		ip:setObjDisplayName
		ip:fillPanel
		ip:remove
		ip:uniqueToObject
		ip:objectToUnique
		ip:encodeToObject
		ip:_mapObjectToIcon
		ip:_mapTemplateToIcon
		ip:_mapIconTypeToObject

Function:	ip:setHostName
Synopsis:	Sets the value of the hostname widget label.
Arguments:	- handle	Identifies which panel the action occured in.
		- host		The value to be displayed as the current host.

Function:	ip:setObjDisplayName
Synopsis:	Sets the "display name" for a given icon object.
Arguments:	- handle	Identifies which panel the action occured in.
		- obj		The object signature representing the icon
				whose display name is to be changed.
		- nm		The value of the new display name.

Function:	ip:fillPanel
Synopsis:	Adds a list of objects to the icon panel.
Arguments:	- handle	Identifies which panel the action occured in.
		- objs		A list of objects for which to create and
				display icons.

Function:	ip:remove
Synopsis:	Removes a list of objects from the icon panel.
Arguments:	- handle	Identifies which panel the action occured in.
		- objs		A list of objects which are to be deleted
				from the icon panel.

Function:	ip:uniqueToObject
Synopsis:	Converts from the "UniqueName" format to the object signature
		format.
Arguments:	- unique_objs	A list of items in "UniqueName" format.
		- objs		A reference to a variable in which to store
				the list of converted objects.

Function:	ip:objectToUniqe
Synopsis:	Converts from the object signature format to the "UniqueName"
		format.
Arguments:	- xfs_objs	A list of objects.
		- unique_objs	A reference to a variable in which to store
				the list of converted objects.

Function:	ip:encodeToObject
Synopsis:	Converts from the "encode" format used by icon panel icons to
		the object signature format.
Arguments:	- encode_objs	A list of encoded objects.
		- objs		A reference to a variable in which to store
				the list of converted objects.

Function:	ip:_mapObjectToIcon
Synopsis:	Return the appropriate icon for a given an object class
		and an object type.
Arguments:	- class		The object class.
		- type		The object type.

Function:	ip:_mapTemplateToIcon
Synopsis:	Return the appropriate icon for the template of a given
		an object class and an object type.
Arguments:	- class		The object class.
		- type		The object type.

Function:	ip:_mapIconTypeToObject
Synopsis:	Return the appropriate icon for the template of a given
		an object class and an object type.
Arguments:	- icon_type	The type of the icon.
		- class		A reference to a variable in which to store
				the object class for given icon.
		- type		A reference to a variable in which to store
				the type for the given icon.
		- template	A reference to a variable in which to store
				a boolean value indicating whether or not
				the icon is for a template.




--------------------------------
Filename:	list.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions used to join up to four seperate lists into a single
		formatted list suitable for display in an XmList widget
Packages:	List-Base


Package:	List-Base
Functions:	lu:getMaxLen
		lu:getFormatString
		lu:formatLists
		lu:format

Function:	lu:getMaxLen
Synopsis:	Determines the length of the longest string in a list.
Arguments:	- lst		The list to process

Function:	lu:getFormatString
Synopsis:	Given a list of lists and a list of justification
		specifications for the columns in the final list,
		create and return a format string suitable for use
		with the format command.
Arguments:	- ll		A reference to a variable containing a
				list of lists.
		- jl		A reference to a variable containing a
				list of justification specifications

Function:	lu:formatLists
Synopsis:	A convenience routine that first gets the format specification
		required for joining the lists and then calls lu:format to
		actually join the lists.
Arguments:	- list_list	A list of lists.
		- sep_list	A list of separator strings.
		- justify_list	A list of justification specifications.

Function:	lu:format
Synopsis:	Joins up to four lists into a single list using the format
		string and separator specification passed into the function.
		The two lists are joined such that they can be displayed in
		an XmList widget and be nicely formatted into columns.
		The N-th list in the list of lists becomes the N-th column
		in the resulting list.
		The items in each column are separated by the separator
		string passed in to the function and whatever number of
		spaces is required to align the columns.  If there are N
		lists to be joined, then the separator list should contain
		N+1 specifications.  This allows the programmer to prepend/
		append an arbitrary string to each item in the resulting list.
Arguments:	- fmt		The format string used to join the lists.
		- ll		A reference to a variable containing a
				list of lists.
		- jl		A reference to a variable containing a
				list of justification specifications



--------------------------------
Filename:	matrix.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions for doing some things with/for the matrix widget.
Packages:	Matrix-Base


Package:	ErrorMessage-Base
Functions:	matrix:getBackground
		matrix:ignoreEnterCb

Function:	matrix:getMatrixBackground
Synopsis:	The name of this function is a little misleading owing to
		historical reasons.  Its' utility has mutated over time
		to be a function that returns one of several colors all
		based upon the background color of a text field widget.
		Its' primary use is for setting the background/row/column
		colors for the xbaeMatrixWidget.  To do this it creates
		a text field widget and extracts the colors from its'
		resources.
Arguments:	- which		Specifies which of the many colors that
				should be returned.  Possible values are:
				- bg    XmNbackground
				- ts    XmNtopShadowColor
				- bs    XmNbottomShadowColor
				- odd   synonym for ts
				- even  synonym for bg
				- bs,ts XmNtopShadowColor using the
					XmNbottomShadowColor as a base
				- bs,bs XmNbottomShadowColor using the
					XmNbottomShadowColor as a base

Function:	matrix:ignoreEnterCb
Synopsis:	A callback function for the matrix XmNenterCellCallback
		resource.  It makes the matrix uneditable.
Arguments:	- di		A reference to the "doit" variable.




--------------------------------
Filename:	mu.tlib
Version:	$Revision: 1.1 $
Synopsis:	Menu utilities.
Packages:	MU-Base


Package:	MU-Base
Functions:	mu:ipSelectCb

Function:	mu:ipSelectCb
Synopsis:	This is called when icons are selected/deselected in an
		icon panel.  It sets the sensitivity of menu items based
		upon the selection state and data passed in indicating
		which menu items are available when there are no icons
		selected.
Arguments:	- panel		Reserved for future use.
		- data_arr	A reference to an array variable which
				contains the information necessary to
				determine what sensitivity the menu
				items should have when icons in the
				panel are selected or not.
		- menu_list	A list of references to array variables
				that contain the widget id's for menus.



--------------------------------
Filename:	obj.tlib
Version:	$Revision: 1.1 $
Synopsis:	General utility functions for dealing with objects.
Packages:	Obj-Base
		Obj-Util
		Obj-Ext


Package:	Obj-Base
Functions:	obj:sort
		obj:parse
		obj:unparse

Function:	obj:sort
Synopsis:	A sorting routine that can be used as an agument to the "lsort"
		command.  The objects are sorted on their name.
Arguments:	- x		An object.
		- y		An object.

Function:	obj:parse
Synopsis:	Parses an object storing each piece of the signature into
		the passed in references to variables.
Arguments:	- cls		A reference to a variable in which to store
				the object class.
		- hst		A reference to a variable in which to store
				the host that the object resides on.
		- nm		A reference to a variable in which to store
				the object name.
		- typ		A reference to a variable in which to store
				the object type.

Function:	obj:unparse
Synopsis:	Create the object represented byt the components passed in.
Arguments:	- cls		The object class.
		- hst		The object host.
		- nm		The object name.
		- typ		The object type.

Package:	Obj-Util
Functions:	obj:isXfsmTemplate
		obj:isXfsmObject

Function:	obj:isXfsmTemplate
Synopsis:	Determines whether or not an object is a XFSM template.
Arguments:	- object	The object.
		- class		An optional parameter that allows checking for
				a specific class of template.
		- type		An optional parameter that allows checking for
				a specific type of template.

Function:	obj:isXfsmObject
Synopsis:	Determines whether or not an object is a XFSM object.
Arguments:	- object	The object.
		- class		An optional parameter that allows checking for
				a specific class of object.
		- type		An optional parameter that allows checking for
				a specific type of object.

Package:	Obj-Ext
Functions:	obj:getHost
		obj:getClass
		obj:getName
		obj:getType

Function:	obj:getHost
Synopsis:	Returns the host component of an object.
Arguments:	- object	The object.

Function:	obj:getClass
Synopsis:	Returns the class component of an object.
Arguments:	- object	The object.

Function:	obj:getName
Synopsis:	Returns the name component of an object.
Arguments:	- object	The object.

Function:	obj:getType
Synopsis:	Returns the type component of an object.
Arguments:	- object	The object.




--------------------------------
Filename:	objUtil.tlib
Version:	$Revision: 1.1 $
Synopsis:	High level object functions.
Packages:	ObjUtil-Base


Package:	ObjUtil-Base
Functions:	ou:getObjsOnHost
		ou:getPartsOnDisk

Function:	ou:getObjsOnHost
Synopsis:	Gets a list of objects from a host.
Arguments:	- objects	A reference to a variable in which to store
				the returned list of objects.
		- host		The host from which to get the information.
		- class		The class of objects to retrieve (one of:
				DISK, FS, VOL).
		- pattern	An optional parameter allowing the caller to
				narrow the focus of the request to get only
				objects whose names match "pattern" (using
				glob-style matching).

Function:	ou:getPartsOnDisk
Synopsis:	Gets partition information for a given disk on a given host.
		The information is returned as a set of lists.  Each list
		contains information about a single partition.  The information
		that is contained in the list is dependent upon the "info"
		parameter.
Arguments:	- host		The host from which to get the information.
		- disk		The name of the disk whose partitions are
				to be retrieved.
		- info		An optional parameter that allows the caller
				to specify what information to retrieve.
				This parameter is a list containing one
				or more of the following values:
					raw	all information (the default)
					name	partition name
					device	partition device
					size	size of partition (in blocks)
					start	start of partition (in blocks)
					end	end of partition (in blocks)
					type	type of partition



--------------------------------
Filename:	svTmpl.tlib
Version:	$Revision: 1.1 $
Synopsis:	Functions used to display error messages.
Packages:	SvTmpl-Base


Package:	SvTmpl-Base
Functions:	svTmpl:realize
		svTmpl:manage
		svTmpl:fill
		svTmpl:_create
		svTmpl:_dialogCb
		svTmpl:_modifyVerifyCb

Function:	svTmpl:realize
Synopsis:	Creates a dialog and realizes it (if necessary).
Arguments:	- handle	An identifier that is used as a key for storing
(and later retrieving) the created widgets.
		- parent	The parent widget for the created dialog.

Function:	svTmpl:manage
Synopsis:	Manages an instance of the dialog.
Arguments:	- handle	The identifier of the desired instance
				of the dialog.

Function:	svTmpl:fill
Synopsis:	Manages an instance of the dialog.
Arguments:	- handle	The identifier of the desired instance
				of the dialog.
		- class		The class of template.
		- saveFunc	The function to call when the user accepts
				the operation.

Function:	svTmpl:_create
Synopsis:	Creates an XmSelectionDialog and defines callbacks for the
		dialog buttons.
Arguments:	- handle	An identifier that is used as a key for storing
(and later retrieving) the created widgets.
		- parent	The parent widget for the created dialog.

Function:	svTmpl:_dialogCb
Synopsis:	The callback function defined on the dialog buttons.
Arguments:	- handle	An identifier that is used as a key for storing
(and later retrieving) the created widgets.
		- value		The value of the string in the XmTextField
				widget of the XmSelectionDialog.
		- op		Either "apply" or "ok", depending upon which
				dialog button the user selected.

Function:	svTmpl:_modifyVerifyCb
Synopsis:	The callback function defined for the XmTextField widget.
		This is used to enforce rules upon the name for the file.
Arguments:	- pointer	The data that was entered.
		- length	The length of the pointer string.
		- doit		If set to 0, this will cancel the modification.



--------------------------------
Filename:	tfu.tlib
Version:	$Revision: 1.1 $
Synopsis:	XmNmodifyVerifyCallback callbacks for text field widgets.
Packages:	TF-Callbacks


Package:	TF-Callbacks
Functions:	tfu:sizeMvCb
		tfu:noSpaceCb
		tfu:dirNameMvCb
		tfu:onlyIntsCb
		tfu:onlyRealsCb

Function:	tfu:sizeMvCb
Synopsis:	Verifies that the format for a text field that contains a
		size is correct.  This means that it can contain at most
		one period (.), one space, and a unit designation.  It
		ensures that no digits follow the space, and that the
		unit designation is at the end of the string.
Arguments:	- validUnits	List of valid units.
		- w		Text field widget id.
		- pointer	The data that was entered.
		- length	The length of the entered data.
		- do		If set to 0, this will cancel the modification.
		- currInsert	The position in the text field that the
				insert began.

Function:	tfu:noSpaceCb
Synopsis:	Ensures that neither a space nor a tab character are entered
		into the text field.
Arguments:	- w		Text field widget id.
		- pointer	The data that was entered.
		- length	The length of the entered data.
		- do		If set to 0, this will cancel the modification.

Function:	tfu:dirNameMvCb
Synopsis:	Prevents certain "undesirable" characters from being entered
		into the text field.
Arguments:	- w		Text field widget id.
		- pointer	The data that was entered.
		- length	The length of the entered data.
		- do		If set to 0, this will cancel the modification.

Function:	tfu:onlyIntsCb
Synopsis:	Ensures that only digits are entered into the text field.
Arguments:	- w		Text field widget id.
		- pointer	The data that was entered.
		- length	The length of the entered data.
		- do		If set to 0, this will cancel the modification.
		- min		An optional parameter that specifies the
				smallest digit that can be entered (default 0).
		- max		An optional parameter that specifies the
				largest digit that can be entered (default 9).

Function:	tfu:onlyRealsCb
Synopsis:	Ensures that only real numbers are entered into the text field.
Arguments:	- w		Text field widget id.
		- pointer	The data that was entered.
		- length	The length of the entered data.
		- do		If set to 0, this will cancel the modification.



--------------------------------
Filename:	tu.tlib
Version:	$Revision: 1.1 $
Synopsis:	General functions for managing templates.
Packages:	Template-Base
		Template-Util


Package:	Template-Base
Functions:	tu:getCategories
		tu:getTemplates

Function:	tu:getCategories
Synopsis:	Returns a list of existing template classes.
Arguments:	None

Function:	tu:getTemplates
Synopsis:	Returns a list of templates for a given class.
Arguments:	- class		The desired class of templates.

Package:	Template-Base
Functions:	tu:read
		tu:write
		tu:rename

Function:	tu:read
Synopsis:	Reads in a file, verifies that it is a template and
		stores the data in the reference variable passed in.
Arguments:	- class		The class of the template to write.
		- name		The name of the template to write.
		- obj		An object id that identifies the template.
		- data		A reference to a variable in which the
				data is to be stored.

Function:	tu:write
Synopsis:	Reads in a file, verifies that it is a template and
		stores the data in the reference variable passed in.
Arguments:	- class		The class of the template to read.
		- name		The name of the template to read.
		- data		The data associated with the template.

Function:	tu:rename
Synopsis:	Renames a template.
Arguments:	- obj		An object id that identifies the desired
				template.
		- newname	The new name for the template.
Arguments:	- obj		An object id that will be used from now on
				to identify the template.
		- newobj	The data associated with the template.




--------------------------------
Filename:	xdk.tlib
Version:	$Revision: 1.1 $
Synopsis:	Utility functions for the XFSM disk manager application.
Packages:	XDK-Base


Package:	XDK-Base
Functions:	xdk:blockof
		xdk:cylof
		xdk:mkStdParts
		xdk:_mkStdParts

Function:	xdk:blockof
Synopsis:	Determines the block number of given cylinder/head/sector
		for a disk.
Arguments:	- cyl		The cylinder in question.
		- hd		The head in question.
		- sec		The sector in question.
		- d_hds		The number of heads.
		- d_secs	The number of sectors per track.
		- d_spares	The number of spares.

Function:	xdk:cylof
Synopsis:	Determines the cylinder of a given block for a disk.
Arguments:	- blk_num	The cylinder in question.
		- d_hds		The number of heads.
		- d_secs	The number of sectors per track.
		- d_spares	The number of spares.

Function:	xdk:mkStdParts
Synopsis:	Determines the cylinder of a given block for a disk.
Arguments:	- part_data	A reference to an array variable in which
				to store the resultant partition information.
		- style		Identifies which of the predefined partitioning
				algorythms to use.  This in one of:  ROOT,
				USRROOT, OPTION.
		- d_type	The type of the disk (SCSI or RAID).
		- d_cyls	The number of cylinders.
		- d_hds		The number of heads.
		- d_secs	The number of sectors.
		- d_secbytes	The number of bytes per sector.
		- d_spares	The number of spares.

Function:	xdk:mkStdParts
Synopsis:	Determines the cylinder of a given block for a disk.
Arguments:	- part_data	A reference to an array variable in which
				to store the resultant partition information.
		- styles	A list of which of the predefined partitions
				to create.  This is a subset of:  VOLUME,
				VOLHDR, FSROOT, FSSWAP, FSUSR, REPL
		- d_type	The type of the disk (SCSI or RAID).
		- d_cyls	The number of cylinders.
		- d_hds		The number of heads.
		- d_secs	The number of sectors.
		- d_secbytes	The number of bytes per sector.
		- d_spares	The number of spares.



--------------------------------
Filename:	xfs.tlib
Version:	$Revision: 1.1 $
Synopsis:	Utilities used throughout the XFSM application suite.
Packages:	XFS-Create
		XFS-Util


Package:	XFS-Create
Functions:	xfs:createMenu
		xfs:createMenuItems
		xfs:createDialogButtons

Function:	xfs:createMenu
Synopsis:	Creates a pulldown menu an xmCascadeButton and then calls
		mu:createMenuItems to create the children of the pulldown.
Arguments:	- pd_parent	The parent of the pulldown menu.
		- item_parent	The parent for the children of the
				pulldown menu.
		- items		The list that describes the menu.
		- widgets	A reference to an array variable that the
				widget ids of the children are stored.

Function:	xfs:createMenuItems
Synopsis:	Creates all the children of a menu.  This function is capable
		of creating cascading menus.
Arguments:	- pd_parent	Obsolete
		- item_parent	The parent of the widgets.
		- items		The list that describes the menu.
		- widgets	A reference to an array variable that the
				widget ids of the children are stored.

Function:	xfs:createDialogButtons
Synopsis:	Creates a row of buttons for use at the bottom of a dialog.
Arguments:	- parent	The parent for the button area.
		- btns		A list of button names.
		- spacing	An optional parameter for specifying a set
				amount of spacing between buttons.
Package:	XFS-Util
Functions:	xfs:actionIgnore
		xfs:popupMenu
		xfs:readFile

Function:	xfs:actionIgnore
Synopsis:	This is used in connection with defining an X11 action on
		a widget.  Its' sole purpose is to allow the caller to
		specify an action which does nothing
Arguments:	None

Function:	xfs:popupMenu
Synopsis:	This is used in connection with defining an X11 action on
		a widget.  It positions a popup menu where the action that
		triggered this funcion was located and manages the menu.
Arguments:	- event		The X11 event that triggered the action
		- menu		The menu widget to be managed.

Function:	xsh:readFile
Synopsis:	Reads the contents of the named file and stores it in a
		reference to a variable.
Arguments:	- fname		The name of the file to be read.
		- data		A reference to a variable into which the
				contents of the file is to be stored.



--------------------------------
Filename:	xlv.tlib
Version:	$Revision: 1.1 $
Synopsis:	Utility functions for the XFSM volume manager application.
Packages:	XLV-Base
		XLV-Parse


Package:	XLV-Base
Functions:	xlv:validNameCb
		xlv:partCount
		xlv:objPartList

Function:	xlv:validNameCb
Synopsis:	Enforces proper naming conventions for xlv objects.
Arguments:	- do		If set to 0, this will cancel the modification.
		- pointer	The data that was entered.
		- length	The length of the entered data.

Function:	xlv:partCount
Synopsis:	Parses data in the xlv file format.  If given a volume, it
		counts the total number of partitions in each sub-volume.
		If given a stand-alone plex or ve, it counts the total
		number of partitions.
Arguments:	- data_in	Data in xlv file format.
		- data_out	A reference to an array variable in which
				to store the information.

Function:	xlv:objPartList
Synopsis:	Returns a list containing all the partitions used by the
		object in question.
Arguments:	- obj		The object signature for which the partitions
				are desired.
		- partitions	A reference to a variable in which the
				partition list is stored.

Package:	XLV-Parse
Synopsis:	The XLV subsystem has the ability to store the description
		of a volume/plex/ve in ASCII.  The format is an ordered
		set of "commands" separated by newlines (\n).  A state
		machine can be devised to parse the lines.  Each line
		begins with a word that is a key (aka command) as to what
		the rest of the line contains.  There is one private function
		for each possible key in the data.
Functions:	xlv:parseData
		xlv:_vol
		xlv:_log
		xlv:_data
		xlv:_rt
		xlv:_subvolume
		xlv:_plex
		xlv:_ve
		xlv:_end
		xlv:_exit

Function:	xlv:parseData
Synopsis:	Parses data in xlv file format and stores it in an array.
Arguments:	- mode		Either "object" or "template".  The difference
				is that some of the rules are relaxed for
				"template" mode.
		- data_in	Data in xlv file format.
		- data_out	A reference to an array variable in which
				to store the parsed information.

Function:	xlv:_vol
Synopsis:	Parses the "vol" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_log
Synopsis:	Parses the "log" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_data
Synopsis:	Parses the "data" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_rt
Synopsis:	Parses the "rt" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_subvolume
Synopsis:	This is a general function that handles any of the subvolume
		commands (log, data, rt).
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_plex
Synopsis:	Parses the "plex" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_ve
Synopsis:	Parses the "ve" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_end
Synopsis:	Parses the "end" command.
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.

Function:	xlv:_exit
Synopsis:	Parses the "exit
Arguments:	- data_out	A reference to an array variable in which
				to store the parsed information.
		- args		The rest of the line.



