###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	list.tlib
# Version:	$Revision: 1.2 $
# Synopsis:	Functions used to join up to four seperate lists into a single
#		formatted list suitable for display in an XmList widget
# Packages:	List-Base
#
#
#%COMMENT_END


#%COMMENT_BEGIN
# Package:	List-Base
# Functions:	lu:getMaxLen
#		lu:getFormatString
#		lu:formatLists
#		lu:format
#
# Function:	lu:getMaxLen
# Synopsis:	Determines the length of the longest string in a list.
# Arguments:	- lst		The list to process
#
# Function:	lu:getFormatString
# Synopsis:	Given a list of lists and a list of justification
#		specifications for the columns in the final list,
#		create and return a format string suitable for use
#		with the format command.
# Arguments:	- ll		A reference to a variable containing a
#				list of lists.
#		- jl		A reference to a variable containing a
#				list of justification specifications
#
# Function:	lu:formatLists
# Synopsis:	A convenience routine that first gets the format specification
#		required for joining the lists and then calls lu:format to
#		actually join the lists.
# Arguments:	- list_list	A list of lists.
#		- sep_list	A list of separator strings.
#		- justify_list	A list of justification specifications.
#
# Function:	lu:format
# Synopsis:	Joins up to four lists into a single list using the format
#		string and separator specification passed into the function.
#		The two lists are joined such that they can be displayed in
#		an XmList widget and be nicely formatted into columns.
#		The N-th list in the list of lists becomes the N-th column
#		in the resulting list.
#		The items in each column are separated by the separator
#		string passed in to the function and whatever number of
#		spaces is required to align the columns.  If there are N
#		lists to be joined, then the separator list should contain
#		N+1 specifications.  This allows the programmer to prepend/
#		append an arbitrary string to each item in the resulting list.
# Arguments:	- fmt		The format string used to join the lists.
#		- ll		A reference to a variable containing a
#				list of lists.
#		- jl		A reference to a variable containing a
#				list of justification specifications
#%COMMENT_END

#@package: List-Base	\
	lu:getMaxLen \
	lu:getFormatString \
	lu:formatLists \
	lu:format

proc lu:getMaxLen { lst } \
{
	set max 0

	loop i 0 [llength $lst] 1 {
		set tlen [string length [lindex $lst $i]]
		set max [expr { ($max) < $tlen ? $tlen : $max }]
	}

	return $max
}

proc lu:getFormatString { ll jl } \
{
	upvar	$ll	list_list
	upvar	$jl	justify_list

	set n_lists 0
	foreach item $list_list {
		lappend max_list [lu:getMaxLen $item]
		incr n_lists
	}

	if {$n_lists > 0} {
		set s s; set i 0
		foreach item $max_list {
			if {[lindex $justify_list $i] == "left"} {
				lappend fmt_list %-$item.$item$s
			} else {
				lappend fmt_list %$item.$item$s
			}
			incr i
		}
		set fmt [join $fmt_list "%s"]
		return "%s$fmt%s"
	} else {
		return ""
	}
}

proc lu:formatLists { list_list sep_list justify_list } \
{
	set fmt [lu:getFormatString list_list justify_list]

	return [lu:format $fmt list_list sep_list]
}

proc lu:format { fmt ll sl } \
{
	upvar	$ll	list_list
	upvar	$sl	sep_list

	set newlist {}
	set n_lists 0
	foreach item $list_list {
		lappend len_list [llength $item]
		incr n_lists
	}

	if {$n_lists == 0 || $n_lists > 4} {
		return {}
	} elseif {$n_lists == 1} {
		return $list_list
	}

	if {$n_lists != [expr [llength $sep_list] - 1]} {
		return {}
	}

	set len [lindex $len_list 0]
	foreach item $len_list {
		if {$item != $len} { return {} }
	}

	if {$n_lists == 2} {
		lassign $list_list list1 list2
		lassign $sep_list sep1 sep2 sep3
		loop i 0 $len 1 {
			lappend newlist [format "\"$fmt\"" \
				$sep1 [lvarpop list1] \
				$sep2 [lvarpop list2] $sep3]
		}
	} elseif {$n_lists == 3} {
		lassign $list_list list1 list2 list3
		lassign $sep_list sep1 sep2 sep3 sep4
		loop i 0 $len 1 {
			lappend newlist [format "\"$fmt\"" \
				$sep1 [lvarpop list1] \
				$sep2 [lvarpop list2] \
				$sep3 [lvarpop list3] $sep4]
		}
	} elseif {$n_lists == 4} {
		lassign $list_list list1 list2 list3 list4
		lassign $sep_list sep1 sep2 sep3 sep4 sep5
		loop i 0 $len 1 {
			lappend newlist [format "\"$fmt\"" \
				$sep1 [lvarpop list1] \
				$sep2 [lvarpop list2] \
				$sep3 [lvarpop list3] \
				$sep4 [lvarpop list4] $sep5]
		}
	}

	return $newlist
}
#@packend
