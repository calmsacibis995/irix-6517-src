###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	combo.tlib
# Version:	$Revision: 1.1 $
# Synopsis:	Convenience functions for interfacing with combo-boxes.
# Packages:	Combo-Get
#		Combo-Set
#		Combo-Update
#
#
#%COMMENT_END


#%COMMENT_BEGIN
# Package:	Combo-Get
# Functions:	combo:getValue
#		combo:getItems
#		combo:getSelectedItem
#
# Function:	combo:getValue
# Synopsis:	Returns the current value of the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#
# Function:	combo:getItems
# Synopsis:	Returns the current list of items for the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#
# Function:	combo:getSelectedItem
# Synopsis:	Returns the currently selected item for the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#
#%COMMENT_END

#@package: Combo-Get	combo:getValue combo:getItems combo:getSelectedItem

proc combo:getValue { w } \
{
        return [$w.Edit getString]
}

proc combo:getItems { w } \
{
        $w getValues -items items
	return $items
}

proc combo:getSelectedItem { w } \
{
	set items ""
	$w.List getValues -selectedItems items
	return $items
}
#@packend

#%COMMENT_BEGIN
# Package:	Combo-Set
# Functions:	combo:setValue
#		combo:setItems
#		combo:selectItem
#
# Function:	combo:getValue
# Synopsis:	Sets the current value of the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#		- val		The desired value.
#
# Function:	combo:setItems
# Synopsis:	Sets the current list of items for the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#		- items		The list of items
#		- visible	An optional argument that specifies how
#				many of the items should be visible in
#				the pulldown scrolled list.
#
# Function:	combo:selectItem
# Synopsis:	Sets the currently selected item for the combo-box.
# Arguments:	- w		The widget id for the combo-box.
#		- val		The desired item.
#		- notify	An optional argument that specifies whether
#				or not the combo-box selection callbacks
#				should be called.  This is only relevant
#				if the desired item is in the list.
#
#%COMMENT_END

#@package: Combo-Set	combo:setValue combo:setItems combo:selectItem

proc combo:setValue { w val } \
{
	if {[$w.List itemExists $val]} {
		$w setItem $val
	} else {
		$w.Edit setString $val
	}
}

proc combo:setItems { w items {visible 8} } \
{
        $w setValues \
		-items $items \
		-itemCount [llength $items] \
		-visibleItemCount $visible \
		-selectedPosition 0
}

proc combo:selectItem { w val {notify false} } \
{
	if {[$w.List itemExists $val]} {
		$w selectItem $val $notify
	} else {
		$w.Edit setString $val
	}
}
#@packend

#%COMMENT_BEGIN
# Package:	Combo-Update
# Functions:	combo:updateHostList
#		combo:updateDiskList
#		combo:updatePartitionList
#		combo:updateExportList
#		combo:updateFsLocalList
#
# Function:	combo:updateHostList
# Synopsis:	Sets the current list of items in the combo-box to the list
#		of hosts retrieved from the given host.
# Arguments:	- w		The widget id for the combo-box.
#		- host		The host from which to retrieve the list
#				of hosts.
#
# Function:	combo:updateDiskList
# Synopsis:	Sets the current list of items in the combo-box to the list
#		of disks retrieved from the given host.
# Arguments:	- w		The widget id for the combo-box.
#		- host		The host from which to retrieve the list
#				of disks.
#
# Function:	combo:updatePartitionList
# Synopsis:	Sets the current list of items in the combo-box to the list
#		of partitions for a given disk on a given host.
# Arguments:	- w		The widget id for the combo-box.
#		- host		The host on which the disk resides.
#		- disk		The name of the disk from which the partition
#				list is to be retrieved.
#
# Function:	combo:updateExportList
# Synopsis:	Sets the current list of items in the combo-box to the list
#		of exported _file systems_ on a given host.  Note that this
#		only finds the file systems that are exported.  It does not
#		find any directories that are exported.
# Arguments:	- w		The widget id for the combo-box.
#		- host		The host from which to retrieve the list
#				of exported file systems.
#		- state		An optional argument that defines what state
#				the returned file systems should be in.  This
#				may be one of: any, mounted, unmounted.
#				The default is any.
#
# Function:	combo:updateFsLocalList
# Synopsis:	Sets the current list of items in the combo-box to the list
#		of local file systems on a given host.  Local file systems
#		are any file systems that are not NFS mounted.
# Arguments:	- w		The widget id for the combo-box.
#		- host		The host from which to retrieve the list
#				of local file systems.
#		- state		An optional argument that defines what state
#				the returned file systems should be in.  This
#				may be one of: any, mounted, unmounted.
#				The default is any.
#
#%COMMENT_END

#@package: Combo-Update	\
	combo:updateHostList \
	combo:updateDiskList \
	combo:updatePartitionList \
	combo:updateExportList \
	combo:updateFsLocalList

proc combo:updateHostList { w host } \
{
	set hosts [hu:getHosts $host etc /etc/hosts]
	$w setValues -items $hosts -itemCount [llength $hosts]
}

proc combo:updateDiskList { w host } \
{
	if {! [ou:getObjsOnHost objects $host DISK]} {
		set disks ""
	} else {
		foreach item $objects {
			lappend disks [obj:getName $item]
		}
		set disks [xfsmSort partNames $disks]
	}

	$w setValues -items $disks -itemCount [llength $disks]
}

proc combo:updatePartitionList { w host disk } \
{
	set parts [ou:getPartsOnDisk $host $disk device]

	$w setValues -items $parts -itemCount [llength $parts]

	if {[llength $parts] != 0} {
		####	TODO:	If we do drag and drop then we won't want
		####		to select the first item, but the one
		####		that was dropped.
		$w selectItem [lindex $parts 0] false
	}
}

proc combo:updateExportList { w host {state any} } \
{
	set fsys [fsu:getExportObjs $host $state]
	if {$fsys != ""} {
		set fsys [fsu:objsToMountPt $fsys]
	}
	$w setValues -items $fsys -itemCount [llength $fsys]

	if {[llength $fsys] != 0} {
		$w selectItem [lindex $fsys 0] false
	}
}

proc combo:updateFsLocalList { w host {state any} } \
{
	set fsys [fsu:getLocalObjs $host $state]
	if {$fsys != ""} {
		set fsys [fsu:objsToMountPt $fsys]
	}
	$w setValues -items $fsys -itemCount [llength $fsys]

	if {[llength $fsys] != 0} {
		$w selectItem [lindex $fsys 0] false
	}
}
#@packend
