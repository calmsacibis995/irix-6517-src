###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	xfs.tlib
# Version:	$Revision: 1.6 $
# Synopsis:	Utilities used throughout the XFSM application suite.
# Packages:	XFS-Create
#		XFS-Util
#
#
#%COMMENT_END


#%COMMENT_BEGIN
# Package:	XFS-Create
# Functions:	xfs:createMenu
#		xfs:createMenuItems
#		xfs:createDialogButtons
#
# Function:	xfs:createMenu
# Synopsis:	Creates a pulldown menu an xmCascadeButton and then calls
#		mu:createMenuItems to create the children of the pulldown.
# Arguments:	- pd_parent	The parent of the pulldown menu.
#		- item_parent	The parent for the children of the
#				pulldown menu.
#		- items		The list that describes the menu.
#		- widgets	A reference to an array variable that the
#				widget ids of the children are stored.
#
# Function:	xfs:createMenuItems
# Synopsis:	Creates all the children of a menu.  This function is capable
#		of creating cascading menus.
# Arguments:	- pd_parent	Obsolete
#		- item_parent	The parent of the widgets.
#		- items		The list that describes the menu.
#		- widgets	A reference to an array variable that the
#				widget ids of the children are stored.
#
# Function:	xfs:createDialogButtons
# Synopsis:	Creates a row of buttons for use at the bottom of a dialog.
# Arguments:	- parent	The parent for the button area.
#		- btns		A list of button names.
#		- spacing	An optional parameter for specifying a set
#				amount of spacing between buttons.
#%COMMENT_END

#@package: XFS-Create	\
	xfs:createMenu \
	xfs:createMenuItems \
	xfs:createDialogButtons

proc xfs:createMenu { pd_parent item_parent items widgets } \
{
	upvar 1 $widgets wids

	lassign $items name type aux
	set pd [xmPulldownMenu $pd_parent.menu_$name]
	set wids($name) [xmCascadeButton $item_parent.$name managed \
			-subMenuId $pd]

	xfs:createMenuItems $pd_parent $pd $aux wids
}

proc xfs:createMenuItems { pd_parent item_parent items widgets } \
{
	upvar 1 $widgets wids

	foreach item $items {
		lassign $item name type aux
		if {$type == "xmCascadeButton"} {
			xfs:createMenu $item_parent $item_parent $item wids

		} else {
			set wids($name) [$type $item_parent.$name managed]
		}
	}
}

proc xfs:createDialogButtons { parent btns {spacing ""} } \
{
	set numColumns [expr ([llength $btns] * 2) - 1]
	sgiGrid $parent.action -numRows 1 -numColumns $numColumns \
		-autoLayout false

	set column 0
	foreach i $btns {
		xmPushButton $parent.action.$i managed -row 0 -column $column \
				-gravity 5
		incr column 2
	}
	if {$spacing != ""} {
		loop column 1 $numColumns 2 {
			$parent.action columnMargin $column $spacing
			$parent.action columnResizable $column false
		}
	}

	return $parent.action
}
#@packend

#%COMMENT_BEGIN
# Package:	XFS-Util
# Functions:	xfs:openDSO
#		xfs:actionIgnore
#		xfs:popupMenu
#		xfs:readFile
#		xfs:setDialogMinMax
#		xfs:nextName
#
# Function:	xfs:engergize
# Synopsis:	This gets the whole ball of wax rolling by initializing the dso.
# Arguments:	reason		A reference to a variable in which to store the
#				result from the call to dlopen.
#
# Function:	xfs:actionIgnore
# Synopsis:	This is used in connection with defining an X11 action on
#		a widget.  Its' sole purpose is to allow the caller to
#		specify an action which does nothing
# Arguments:	None
#
# Function:	xfs:popupMenu
# Synopsis:	This is used in connection with defining an X11 action on
#		a widget.  It positions a popup menu where the action that
#		triggered this funcion was located and manages the menu.
# Arguments:	- event		The X11 event that triggered the action
#		- menu		The menu widget to be managed.
#
# Function:	xsh:readFile
# Synopsis:	Reads the contents of the named file and stores it in a
#		reference to a variable.
# Arguments:	- fname		The name of the file to be read.
#		- data		A reference to a variable into which the
#				contents of the file is to be stored.
#
# Function:	xfs:setDialogMinMax
# Synopsis:	Sets the minimum and maximum size for the dialog to the
#		specified width and height.
# Arguments:	- dialog	The widget id for the dialog.
#		- h_min		The desired minimum height.
#		- h_max		The desired maximum height.
#		- w_min		The desired minimum width.
#		- w_max		The desired maximum width.
#
# Function:	xfs:nextName
# Synopsis:	Returns what would be the next name in a series.  If the
#		current name end in a number, the number is incremented and
#		the result is returned (e.g, ve_12 ==> ve_13).  If the current
#		name does not end in a number a zero is appended and the result
#		is returned (e.g., ve_db ==> ve_db0).
# Arguments:	- name		The name for which the next in the series is
#				to be determined.
#%COMMENT_END

#@package: XFS-Util	xfs:openDSO xfs:actionIgnore xfs:popupMenu \
			xfs:readFile xfs:setDialogMinMax xfs:nextName \
			xfs:parseArgs

proc xfs:openDSO { reason } \
{
	global	env
	upvar	$reason	reas

	if {[info exists env(XFSTCL_LIB)]} {
		set xfs_dso $env(XFSTCL_LIB)/libxfsmtcl.so
	} else {
		set xfs_dso /usr/xfsm/lib/libxfsmtcl.so
	}

	if {[catch {set x [dlopen $xfs_dso init xfsInit]} reas]} {
		puts stderr "Error: dlopen of $xfs_dso failed."
		return 0
	}

	return 1
}

proc xfs:actionIgnore {} {}

proc xfs:popupMenu { event menu } \
{
        $menu menuPosition $event
        $menu manageChild
}

proc xfs:readFile { fname data } \
{
        upvar $data dat

        if {[file readable $fname]} {
                set fid [open $fname]
                set dat [read -nonewline $fid]
                close $fid
                return 1
        }
	return 0
}

proc xfs:setDialogMinMax { dialog {h_min ""} {h_max ""} {w_min ""} {w_max ""} } \
{
	if {$h_min != ""} { .$dialog setValues -minHeight $h_min }
	if {$h_max != ""} { .$dialog setValues -maxHeight $h_max }
	if {$w_min != ""} { .$dialog setValues -minWidth $w_min }
	if {$w_max != ""} { .$dialog setValues -maxWidth $w_max }

}

proc xfs:nextName { name } \
{
	set number ""; set base ""

	loop i [expr [clength $name] - 1] -1 -1 {
		set ch [cindex $name $i]
		if {[ctype digit $ch]} {
			lvarpush number $ch 0 
		} else {
			break
		}
	}
	if {$i != -1} { set base [crange $name 0 $i] }

	if {[cequal $number ""]} {
		set number 0
	} else {
		set number [join $number ""]
		incr number
	}

	return $base$number
}

proc xfs:parseArgs { hostname hostfile } \
{
	global	argv argv0
	upvar $hostname hname
	upvar $hostfile hfile

	if {[set idx [lsearch -exact $argv "-hostName"]] != -1} {
		incr idx
		if {[llength $argv] > $idx} {
			set hname [lindex $argv $idx]
		}
	}
	if {[set idx [lsearch -exact $argv "-hostsFile"]] != -1} {
		incr idx
		if {[llength $argv] > $idx} {
			set hfile [lindex $argv $idx]
		}
	}
}

#@packend
