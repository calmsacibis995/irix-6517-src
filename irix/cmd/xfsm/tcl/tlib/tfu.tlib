###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	tfu.tlib
# Version:	$Revision: 1.3 $
# Synopsis:	XmNmodifyVerifyCallback callbacks for text field widgets.
# Packages:	TF-Callbacks
#
#
#%COMMENT_END


#%COMMENT_BEGIN
# Package:	TF-Callbacks
# Functions:	tfu:sizeMvCb
#		tfu:noSpaceCb
#		tfu:dirNameMvCb
#		tfu:onlyIntsCb
#		tfu:onlyRealsCb
#
# Function:	tfu:sizeMvCb
# Synopsis:	Verifies that the format for a text field that contains a
#		size is correct.  This means that it can contain at most
#		one period (.), one space, and a unit designation.  It
#		ensures that no digits follow the space, and that the
#		unit designation is at the end of the string.
# Arguments:	- validUnits	List of valid units.
#		- w		Text field widget id.
#		- pointer	The data that was entered.
#		- length	The length of the entered data.
#		- do		If set to 0, this will cancel the modification.
#		- currInsert	The position in the text field that the
#				insert began.
#
# Function:	tfu:noSpaceCb
# Synopsis:	Ensures that neither a space nor a tab character are entered
#		into the text field.
# Arguments:	- w		Text field widget id.
#		- pointer	The data that was entered.
#		- length	The length of the entered data.
#		- do		If set to 0, this will cancel the modification.
#
# Function:	tfu:dirNameMvCb
# Synopsis:	Prevents certain "undesirable" characters from being entered
#		into the text field.
# Arguments:	- w		Text field widget id.
#		- pointer	The data that was entered.
#		- length	The length of the entered data.
#		- do		If set to 0, this will cancel the modification.
#
# Function:	tfu:onlyIntsCb
# Synopsis:	Ensures that only digits are entered into the text field.
# Arguments:	- w		Text field widget id.
#		- pointer	The data that was entered.
#		- length	The length of the entered data.
#		- do		If set to 0, this will cancel the modification.
#		- startPos	The position in the text field that
#				the insert began.
#		- endPos	The position in the text field that
#				the insert ended.
#		- min		An optional parameter that specifies the
#				smallest digit that can be entered (default "").
#		- max		An optional parameter that specifies the
#				largest digit that can be entered (default "").
#
# Function:	tfu:onlyRealsCb
# Synopsis:	Ensures that only real numbers are entered into the text field.
# Arguments:	- w		Text field widget id.
#		- pointer	The data that was entered.
#		- length	The length of the entered data.
#		- do		If set to 0, this will cancel the modification.
#%COMMENT_END

#@package: TF-Callbacks	tfu:sizeMvCb tfu:noSpaceMvCb tfu:dirNameMvCb \
			tfu:onlyIntsCb tfu:onlyRealsCb

proc tfu:sizeMvCb { validUnits w pointer length do currInsert } \
{
	upvar $pointer ptr; upvar $length len; upvar $do doit

	if {$len == 0} { return }

	set str [string tolower [$w getString]]
	set nptr [string tolower $ptr]

	foreach item {alpha1 alpha2 space . g m k b} {
		set has($item) 0
		set before($item) 0
		set after($item) 0
	}

	loop i 0 $currInsert 1 {
		set c [string index $str $i]
		if {$c == " "} {
			incr has(space);  incr before(space)
		} elseif {$c == "."} {
			incr has(.);	  incr before(.)
		} elseif {$c == "g"} {
			incr has(g);	  incr before(g)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "m"} {
			incr has(m);	  incr before(m)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "k"} {
			incr has(k);	  incr before(k)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "b"} {
			incr has(b);	  incr before(b)
			incr has(alpha2); incr before(alpha2)
		}
	}

	loop i $currInsert [string length $str] 1 {
		set c [string index $str $i]
		if {$c == " "} {
			incr has(space);  incr after(space)
		} elseif {$c == "."} {
			incr has(.);	  incr after(.)
		} elseif {$c == "g"} {
			incr has(g);	  incr after(g)
			incr has(alpha1); incr after(alpha2)
		} elseif {$c == "m"} {
			incr has(m);	  incr after(m)
			incr has(alpha1); incr after(alpha2)
		} elseif {$c == "k"} {
			incr has(k);	  incr after(k)
			incr has(alpha1); incr after(alpha2)
		} elseif {$c == "b"} {
			incr has(b);	  incr after(b)
			incr has(alpha2); incr after(alpha2)
		}
	}

	loop i 0 $len 1 {
		set c [string index $nptr $i]
		if {$c == " "} {
			incr has(space); incr before(space)
		} elseif {$c == "."} {
			if {$before(alpha1) > 0 || \
			    $before(alpha2) > 0 || \
			    $before(space) > 0} {
				set doit false; return
			}
			incr has(.); incr before(.)
		} elseif {$c == "g"} {
			if {$before(alpha1) > 0 || \
			    $before(alpha2) > 0 || \
			    $before(space) == 0 ||
			    [lsearch -exact $validUnits $c] == -1} {
				set doit false; return
			}
			incr has(g);	  incr before(g)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "m"} {
			if {$before(alpha1) > 0 || \
			    $before(alpha2) > 0 || \
			    $before(space) == 0 ||
			    [lsearch -exact $validUnits $c] == -1} {
				set doit false; return
			}
			incr has(m);	  incr before(m)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "k"} {
			if {$before(alpha1) > 0 || \
			    $before(alpha2) > 0 || \
			    $before(space) == 0 ||
			    [lsearch -exact $validUnits $c] == -1} {
				set doit false; return
			}
			incr has(k);	  incr before(k)
			incr has(alpha1); incr before(alpha1)
		} elseif {$c == "b"} {
			if {$before(space) == 0 ||
			    [lsearch -exact $validUnits $c] == -1} {
				set doit false; return
			}
			incr has(b);	  incr before(b)
			incr has(alpha2); incr before(alpha2)
		} else {
			####	Must be a digit (caveat: the digit cannot
			####	follow a space or letter
			if {! [ctype digit $c] || \
			    $before(alpha1) > 0 || \
			    $before(alpha2)} {
				set doit false; return
			} else {
				foreach item {space g m k b} {
					if {$before($item) > 0} {
						set doit false; return
					}
				}
			}
		}
	}

	foreach item {space . g m k b} {
		if {$has($item) > 1} {
			set doit false; return
		}
	}
}

proc tfu:noSpaceMvCb { w pointer length do } \
{
	upvar $pointer ptr
	upvar $length len
	upvar $do doit

	loop i 0 $len 1 {
		set c [string index $ptr $i]
		if {$c == " " || $c == "\t"} {
			set doit false
		}
	}
}

proc tfu:dirNameMvCb { w pointer length do } \
{
	upvar $pointer ptr
	upvar $length len
	upvar $do doit

	loop i 0 $len 1 {
		set c [string index $ptr $i]
		if {$c == "\{" || $c == "\}" || $c == "\[" || $c == "\]"} {
			set doit 0
		}
		if {[string match *$c* { !@#$%^&*|"`'<>()}] == 1} {
			set doit 0
		}
	}
}

proc tfu:onlyIntsCb { w pointer length startPos endPos do {min ""} {max ""} } \
{
	upvar $pointer ptr
	upvar $do doit

	if {[clength $ptr] && ! [ctype digit $ptr]} { set doit 0; return }
	if {[cequal $min ""] && [cequal $max ""]} { return }

	upvar $length len
	upvar $startPos start
	upvar $endPos end

	set str [$w getString]

	set newstr ""
	if {! [cequal $ptr ""]} {
		####	Inserting
		set str1 [csubstr $str 0 $start]
		set str2 [crange $str $end end]
		set newstr $str1$ptr$str2
	} else {
		####	Deleting
		loop i 0 [clength $str] {
			if {$i < $start || $i >= $end} {
				set newstr $newstr[cindex $str $i]
			}
		}
	}

	if {[cequal $newstr ""]} { return }

	if {! [cequal $min ""]} {
		if {[expr $newstr < $min]} { set doit 0 }
	}
	if {! [cequal $max ""]} {
		if {[expr $newstr > $max]} { set doit 0 }
	}
}

proc tfu:onlyRealsCb { w pointer length do } \
{
	upvar $pointer ptr
	upvar $length len
	upvar $do doit

	if {[string first "." [$w getString]] != -1} {
		set dot 1
	}

	loop n 0 $len 1 {
		set ch [string index $ptr $n]
		if {$ch == "."} {
			if {[info exists dot]} {
				set doit 0
			} else {
				set dot 1
			}
		} elseif {! [ctype digit $ch]} {
			set doit 0
		}
	}
}

#@packend
