###########################################################################
#                                                                         #
#               Copyright (C) 1995, Silicon Graphics, Inc.                #
#                                                                         #
#   These coded instructions, statements, and computer programs  contain  #
#   unpublished  proprietary  information of Silicon Graphics, Inc., and  #
#   are protected by Federal copyright law.  They  may  not be disclosed  #
#   to  third  parties  or copied or duplicated in any form, in whole or  #
#   in part, without the prior written consent of Silicon Graphics, Inc.  #
#                                                                         #
###########################################################################

#%COMMENT_BEGIN
# Filename:	tu.tlib
# Version:	$Revision: 1.3 $
# Synopsis:	Functions for converting between bytes and other units.
# Packages:	Cvt-Base
#
# Note:		When converting to units, the default action is to convert
#		to the largest unit possible.  This can be overridden by
#		specifying a "desired" unit.
#
#		The following (case insensitive) strings are recognized
#		as units:
#				GB - Gigabytes
#				MB - Megabytes
#				KB - Kilobytes
#				b  - Blocks
#
#
#%COMMENT_END


#%COMMENT_BEGIN
# Package:	Cvt-Base
# Functions:	cvt:bytesToUnits
#		cvt:unitsToBytes
#		cvt:parseSizeString
#
# Function:	cvt:bytesToUnits
# Synopsis:	Convert a number bytes to a given unit.
# Arguments:	- validUnit	A list of valid units to convert to.  The list
#				is a subset of: g, m, k
#		- bytes		The number of bytes.
#		- vSize		A reference to a variable in which the
#				converted number is to be stored.
#		- vUnit		A reference to a variable in which the
#				converted unit is to be stored.
#		- dUnit		An optional parameter that specifies the
#				desired unit to convert to.
#		- bSize		The size of a block.  This is used when "dUnit"
#				is set to "b".
#
# Function:	cvt:unitsToBytes
# Synopsis:	Convert a number and a unit to a number of bytes.
# Arguments:	- str		A string containing a number a possibly a
#				unit specification.
#		- vSize		A reference to a variable in which the
#				converted number is to be stored.
#		- vUnit		A reference to a variable in which the
#				current unit is to be stored.
#		- dUnit		An optional parameter that specifies what
#				unit to use if the "str" argument contains
#				only a number and not a unit.
#		- bSize		The size of a block.  This is used when the
#				current unit is determined to be "blocks".
#
# Function:	cvt:parseSizeString
# Synopsis:	Parse a string to separate the number portion from the
#		unit specification.
# Arguments:	- str		A string containing a number a possibly a
#				unit specification.
#		- vSize		A reference to a variable in which the
#				parsed number is to be stored.
#		- vUnit		A reference to a variable in which the
#				parsed unit is to be stored.
#%COMMENT_END

#@package: Cvt-Base	cvt:bytesToUnits cvt:unitsToBytes cvt:parseSizeString

set tcl_precision 17

proc cvt:bytesToUnits {validUnit bytes vSize vUnit {dUnit ""} {bSize 512.0}} \
{
	upvar $vSize	size
	upvar $vUnit	unit

	if {$dUnit != ""} {
		set dUnit [string tolower $dUnit]
		if {$dUnit == "gb"} {
			set type " GB"
		} elseif {$dUnit == "mb"} {
			set type " MB"
		} elseif {$dUnit == "kb"} {
			set type " KB"
		} elseif {$dUnit == "b"} {
			set type " b"
		} else {
			set type ""
		}
	}

	if {! [info exists type]} {
		if {[expr $bytes >= 1073741824.0] && \
		    [lsearch -exact $validUnit g] != -1} {
			set type " GB"
		} elseif {[expr $bytes >= 1048576.0] && \
		    [lsearch -exact $validUnit m] != -1} {
			set type " MB"
		} elseif {[expr $bytes >= 1024.0] && \
		    [lsearch -exact $validUnit k] != -1} {
			set type " KB"
		} else {
			set type ""
		}
	}

	if {[expr $bytes == 0]} {
		set size 0
	} elseif {$type == " GB"} {
		set unit gb; set size [expr $bytes / 1073741824.0]
	} elseif {$type == " MB"} {
		set unit mb; set size [expr $bytes / 1048576.0]
	} elseif {$type == " KB"} {
		set unit kb; set size [expr $bytes / 1024.0]
	} elseif {$type == " b"} {
		set unit k;  set size [expr $bytes / $bSize]
	} else {
		set unit ""; set size $bytes
	}

	
	if {$type != ""} {
		return [format "%.2f$type" $size]
	} else {
		return $size
	}
}

proc cvt:unitsToBytes {str vSize vUnit {dUnit ""} {bSize 512.0}} \
{
	upvar $vSize	size
	upvar $vUnit	unit

	scan $str "%f%s" size unit

	if {! [info exists size]} {
		return 0
	}

	if {! [info exists unit]} {
		set unit [string tolower $dUnit]
	} else {
		set unit [string tolower $unit]
	}

	if {$unit != ""} {
		set ch [string index $unit 0]

		if {$ch == "b"} {
			set size [expr $size * $bSize]
		} elseif {$ch == "k"} {
			set size [expr $size * 1024.0]
		} elseif {$ch == "m"} {
			set size [expr $size * 1048576.0]
		} elseif {$ch == "g"} {
			set size [expr $size * 1073741824.0]
		}
	}

	return $size
}

proc cvt:parseSizeString {str vSize vUnit} \
{
	upvar $vSize	size
	upvar $vUnit	unit

	set n [scan $str "%f%s" size unit]
	if {$n == 0} {
		set size 0; set unit ""
	} elseif {$n == 1} {
		set unit ""
	} else {
		set unit [string tolower $unit]
	}

	return $n
}

