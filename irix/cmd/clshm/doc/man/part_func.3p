'\"macro stdmacro
.na
.TH PART_FUNC 3P
.SH NAME
\f4part_func\fP: \f4part_getid\fP, \f4part_getcount\fP,
\f4part_getlist\fP, \f4part_gethostname\fP, \f4part_getpart\fP,
\f4part_setpmo\fP, \f4part_getnode\fP 
\- CrayLink Shared Memory Helper
Functions
.SH SYNOPSIS
.na
\f4#include <xp_shm.h>\fP
.PP
\f4partid_t part_getid(void);\fP
.PP
\f4int part_getcount(void);\fP
.PP
\f4int part_getlist(partid_t *part_list, int max_parts);\fP
.PP
\f4int part_gethostname(partid_t part, char *name, int max_len);\fP
.PP
\f4partid_t part_getpart(int shmid);\fP
.PP
\f4int part_setpmo(key_t key, pmo_handle_t pmo_handle, pmo_type_t pmo_type);\fP
.PP
\f4int part_getnode(int shmid, char *hwpath, int maxlen);\fP

.in
.SH DESCRIPTION

\f4part_func\fP calls are part of the \f4xp_func\fP(3p) user library
interface for Craylink shared memory (clshm).  They are functions that
do not map directly to system V shared memory like calls that the
\f4xp_func\fP(3p) calls do.

.PP

\f4part_getid\fP gets the partition id number for the partition that the
process is running on.


.PP

\f4part_getcount\fP gets the number of partitions that are currently
active according to the partition that the process is running on.

.PP

\f4part_getlist\fP returns the number of partitions that are currently
active.  The partition numbers of the active partitions are placed int
the \f2part_list\fP array whose lenth is passed in through the
\f2max_parts\fP parameter.

.PP

\f4part_gethostname\fP takes a active partition number and places the
hostname of that partition in the \f2name\fP string.  The maximum length
this string can be filled up to is passed in the \f2max_len\fP
parameter.

.PP

\f4part_getpart\fP takes a \f2shmid\fP and returns the partition id of
the partition that hosts the memory associated with this \f2shmid\fP.

.PP

\f4part_setpmo\fP takes a \f2key\fP, \f2pmo_handle\fP, and
\f2pmo_type\fP and associates the pmo information with the \f2key\fP.
The \f2key\fP must come from \f4xp_ftok\fP(3p) and must be hosted by the
partition that the current process is running on.  This call must be
made before any \f4xp_shmget\fP(3p) calls are made to associate a
\f2shmid\fP with this \f2key\fP.  See the \f4mld\fP(3) interface for how
to use memory locality domains to control the placement of memory for
this \f2key\fP.

.PP

\f4part_getnode\fP takes a \f2shmid\fP and \f2hwpath\fP string with
maximum length of \f2max_len\fP to fill in the \f4hwgraph\fP(4) path of
the node that the \f2shmid\fP shared memory has been allocated on.  This
is only guaranteed to return a valid string if both \f4part_setpmo\fP
and \f4xp_shmget\fP both succeeded for the \f2shmid\fP and the
\f4part_getnode\fP function is being called from the partition that
hosts the \f2shmid\fP shared memory.  However, if all memory associated
with a shared memory segment is placed on the same node without
\f4part_setpmo\fP being called, then this call will also return a valid
\f4hwgraph\fP(4) string, given that it is called from the correct
partition.

.PP

All \f4part_func\fP calls will fail and not perform any function if one
of the following are true:

.TP 14
\f3ENOMEM\fP
A \f4malloc\fP(3c) call failed.

.TP 14
\f3EPROTO\fP
This version of the library is not compatable with the local
\f4clshmd\fP(1m) daemon's version.

.TP 14
\f3EIO\fP
There has been a communication problem with the local \f4clshmd\fP(1m)
daemon.

.TP 14
\f3EINVAL\fP
The function was sent invalid arguments.

.TP 14
\f3ENOSYS\fP
The argument passed in is not supported at this time.

.TP 14
\f3EFAULT\fP
There has been an internal problem with the user library or
\f4clshmd\fP(1m) daemon.

.TP 14
\f3ENAMETOOLONG\fP
The path is too long to put into the specified buffer.

.PP
These functions can also fail with the \f3errno\fP returned from various
unix calls that the library makes.


.SH SEE ALSO
\f4xp_func\fP(3p), \f4mld\fP(3), \f4hwgarph\fP(4), \f4clshmctl\fP(1m),
\f4clshmd\fP(1m), \f4mkpart\fP(1m)

.SH DIAGNOSTICS
Upon successful completion, the return values are as follows:
.IP
\f4part_getid\fP returns a valid partition id.
.IP
\f4part_getcount\fP returns the number of active partitions.
.IP
\f4part_getlist\fP returns the number of active partitions and fills in
the \f2part_list\fP array.
.IP
\f4part_gethostname\fP returns 0.
.IP 
\f4part_getpart\fP returns the partition number of the partition hosting
the \f2shmid\fP memory.
.IP 
\f4part_setpmo\fP returns 0.
.IP 
\f4part_getnode\fP returns 0.
.PP 
Otherwise, a value of -1 is returned and \f3errno\fP is set to indicate
the error.
