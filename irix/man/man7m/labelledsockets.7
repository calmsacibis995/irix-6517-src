'\"macro stdmacro
.if n .pH g7.labelledsockets @(#)labelledsockets        1.1 of 11/1/91
.nr X
.if \nX=0 .ds x} LABELLEDSOCKETS 7 "" "\&"
.if \nX=1 .ds x} LABELLEDSOCKETS 7 ""
.if \nX=2 .ds x} LABELLEDSOCKETS 7 "" "\&"
.if \nX=3 .ds x} LABELLEDSOCKETS "" "" "\&"
.TH \*(x}
.SH NAME
labelledsockets \- ioctl commands supporting network mandatory and discretionary
access control
.SH SYNOPSIS
.B #include <net/if.h>
.sp 0
.B #include <net/soioctl.h>
.sp 0
.B #include <sys/sesmgr.h>
.sp 0
.B #include <sys/sesmgr_soacl.h>
.br
.B "int ioctl (int fildes, int command, struct ifreq \(** arg);"
.br
.B "int ioctl (int fildes, int command, mac_label \(** arg);"
.br
.B "int ioctl (int fildes, int command, struct soacl \(** arg);"
.br
.B "int ioctl (int fildes, int command, uid_t \(** arg);"
.SH DESCRIPTION
\s-1LABELLEDSOCKETS\s0 ioctl commands are
a subset of \f2ioctl\f1(2) system calls which
perform a variety of control functions on sockets and interfaces.
The \s-1LABELLEDSOCKETS\s0 ioctl commands allow modification of the
socket and network interface attributes used for mandatory access control
(MAC) and discretionary access control (DAC).
.PP
The arguments \f2command\f1 and \f2arg\f1
are passed to the file designated by \f2fildes\f1.
[See \f2ioctl\f1(2) and \f2intro\f1(2).]
.PP
.I fildes
is an open file descriptor that refers to a socket.
.I command
determines the control function to be performed as described below.
.I arg
represents additional information that is needed by this command.
The type of
.I arg
is a pointer to a command-specific data structure.
.SH "COMMAND FUNCTIONS"
The following \f2ioctl\f1 commands,
with error values indicated,
are applicable to sockets:
.TP 13
.SM SIOCSIFLABEL
sets the mandatory attribute set, label range, and default attributes
for the interface.
.sp 1
.I arg
is of type
.I "struct ifreq \(**."
In Trusted IRIX, this structure points to a structure of type
.I t6ifreq_t.
The definition of
.I t6ifreq_t
is:
.sp 1
.nf
typedef struct t6ifreq {
        char            ifsec_name[IFNAMSIZ];
        t6mask_t        ifsec_mand_attrs;
        msen_t          ifsec_min_msen;
        msen_t          ifsec_max_msen;
        mint_t          ifsec_min_mint;
        mint_t          ifsec_max_mint;
        struct {
                t6mask_t        dflt_attrs;
                msen_t          dflt_msen;
                mint_t          dflt_mint;
                uid_t           dflt_sid;
                msen_t          dflt_clearance;
                acl_t           dflt_acl;
                cap_t           dflt_privs;
                uid_t           dflt_audit_id;
                uid_t           dflt_uid;
                gid_t           dflt_gid;
                t6groups_t *    dflt_groups;
        } ifsec_dflt;
} t6ifreq_t;
.fi
.sp 1
.I ifsec_mand_attrs
specifies the set of attributes which are required to be present,
after defaults are applied, in order to allow reception of a packet.
Note that specifying required items which have defaults will not do
anything interesting.
.sp
.I ifsec_min_msen
and
.I ifsec_max_msen
specify the minimum and maximum required sensitivity.
.sp
.I ifsec_min_mint
and
.I ifsec_max_mint
specify the minimum and maximum required integrity.
.sp
.I ifsec_defaults
is a structure of type
.I t6default_attrs_t
which specifies any default security attributes for incoming packets
missing those attributes.
The definition of
.I t6default_attrs_t
is:
.sp 1
.nf
typedef struct t6default_attrs {
        t6mask_t        dflt_attrs;
        msen_t          dflt_msen;
        mint_t          dflt_mint;
        uid_t           dflt_sid;
        msen_t          dflt_clearance;
        acl_t           dflt_acl;
        cap_t           dflt_privs;
        uid_t           dflt_audit_id;
        uid_t           dflt_uid;
        gid_t           dflt_gid;
        t6groups_t *    dflt_groups;
} t6default_attrs_t;
.fi
.sp 1
.IR iflabel (1m)
describes the configuration of network interfaces
for mandatory and discretionary access control in greater detail.
.sp 1
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EPERM] 
Only superuser may execute this ioctl command.
.TP 13
.SM [EINVAL]
Either one of
the mandatory access control label arguments is invalid,
or else
the maxlabel argument fails to dominate the minlabel argument.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.TP 13
.SM SIOCGIFLABEL
gets the mandatory attribute set, label range, default label, default
socket ACL, default uid, and default capability set for the interface.
.sp 1
.I arg
is of type
.I "struct ifreq \(**."
The mandatory access control fields
in this structure are described above,
under the header
.B SIOCSIFLABEL.
.sp 1
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [ENOTCONN]
The specified interface has not been labelled yet.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.TP 13
.SM SIOCSETLABEL
sets the label of the socket.
.sp
.ft B
NOTE: This command is obsolete, and may disappear in a future release of
Trusted IRIX.  Use the TSIX library to manipulate the security attributes
on a socket.
.ft P
.sp
After this ioctl is called, all messages sent out on the socket bear
the specified label in their Internet Protocol Security Option subheader.
This command is not supported for
.SM UNIX\c
-domain sockets.
.sp 1
.I arg
is of type
.I "mac_label \(**."
.sp 1
Before this ioctl is called, the socket label is the same as
the label of the process that created the socket.
.sp 1
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 16
.SM [EPERM]
Only superuser may execute this ioctl command.
.TP
.SM [EISCONN]
The socket label can't be set because there is already data in the buffer.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [EINVAL]
The mandatory access control label argument is invalid.
.TP
.SM [ENOPROTOOPT]
This ioctl command is not supported for sockets in the AF_UNIX domain.
.RE
.TP 13
.SM SIOCGETLABEL
gets the label of the socket.
.sp
.ft B
NOTE: This command is obsolete, and may disappear in a future release of
Trusted IRIX.  Use the TSIX library to manipulate the security attributes
on a socket.
.ft P
.sp 1
.I arg
is of type
.I "mac_label \(**."
.sp 1
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.SH NOTE
The administrator may effectively "turn off" socket DAC, in the
.SM INET
domain only, by setting the idiom of all network interfaces to
a "non-uid" idiom, such as IDIOM_SGIPSO2_NO_UID,
and setting all default interface uids to "root".
However, it is not possible to do this in the
.SM UNIX
domain because nothing comparable to a "network interface" exists.
.PP
One way that the superuser can "turn off" socket DAC in both domains,
at least for programs invoked by users logged in at the console, 
is to assign the value "wildacl" to the 
.BR xdm (1)
resource 
.IR DisplayManager.psoacl .
.PP
In order to get security attribute information off an end point, refer 
to the Trusted Security Information eXchange (TSIX) libarary man page.
.SH "SEE ALSO"
iflabel(1m),
newpsoacl(1),
psoacl(1),
xdm(1),
intro(2),
getpsoacl(2),
ioctl(2),
open(2),
rhost(1m),
setsockopt(2),
tsix(7)
libt6(3n)
.SH DIAGNOSTICS
Unless specified otherwise above, the return value from \f2ioctl\f1 is
0 upon success and -1 upon failure with \f2errno\f1 set as indicated.
.Ee
