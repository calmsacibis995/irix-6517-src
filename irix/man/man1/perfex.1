.TH PERFEX 1
.SH NAME
\f3perfex\f1 \- Command line interface to processor event counters
.SH SYNOPSIS
\f3perfex\f1 
[\f3-a\f1 | \f3-e\f1 \f2event0\f1 [\f3-e\f1 \f2event1\f1]] 
[\f3-mp\f1 | \f3-s\f1 | \f3-p\f1] 
[\f3-x\f1] 
[\f3-k\f1] 
[\f3-y\f1] 
[\f3-t\f1]
[\f3-T\f1]
[\f3-o \f2file\f1] 
[\f3-c \f2file\f1] 
\f2command\f1

.SH DESCRIPTION
The given \f2command\f1 is executed; after
it is complete, \f2perfex\f1 prints the values of various hardware
performance counters.  The counts returned are aggregated over all 
processes that are descendants of the target command, as long 
as their parent process controls the child through \f3wait\f1 (see 
\f3wait\f1(2)). 
.PP
The R10000 event counters are different from R12000 event
counters.  See the \f3r10k_counters\f1(5) man page for
differences.
.pp
For R10000 CPUs, the integers \f2event0\f1 and \f2event1\f1 index the
following table:
.SP
.nf
     0 = Cycles
     1 = Issued instructions
     2 = Issued loads
     3 = Issued stores
     4 = Issued store conditionals
     5 = Failed store conditionals
     6 = Decoded branches.  (This changes meaning in 3.x
     	  versions of R10000.  It becomes resolved branches).
     7 = Quadwords written back from secondary cache
     8 = Correctable secondary cache data array ECC errors
     9 = Primary (L1) instruction cache misses
     10 = Secondary (L2) instruction cache misses
     11 = Instruction misprediction from secondary cache way prediction table
     12 = External interventions
     13 = External invalidations
     14 = Virtual coherency conditions.  (This changes meaning in 3.x
     	  versions of R10000.  It becomes ALU/FPU forward progress
     	  cycles.  On the R12000, this counter is always 0).
     15 = Graduated instructions
     16 = Cycles
     17 = Graduated instructions
     18 = Graduated loads
     19 = Graduated stores
     20 = Graduated store conditionals
     21 = Graduated floating point instructions
     22 = Quadwords written back from primary data cache
     23 = TLB misses
     24 = Mispredicted branches
     25 = Primary (L1) data cache misses
     26 = Secondary (L2) data cache misses
     27 = Data misprediction from secondary cache way prediction table
     28 = External intervention hits in secondary cache (L2)
     29 = External invalidation hits in secondary cache
     30 = Store/prefetch exclusive to clean block in secondary cache
     31 = Store/prefetch exclusive to shared block in secondary cache
.fi
.PP
For R12000 CPUs, the integers \f2event0\f1 and \f2event1\f1 index the
following table:
.SP
.nf
     0 = Cycles
     1 = Decoded instructions
     2 = Decoded loads
     3 = Decoded stores
     4 = Miss handling table occupancy
     5 = Failed store conditionals
     6 = Resolved conditional branches
     7 = Quadwords written back from secondary cache
     8 = Correctable secondary cache data array ECC errors
     9 = Primary (L1) instruction cache misses
     10 = Secondary (L2) instruction cache misses
     11 = Instruction misprediction from secondary cache way prediction table
     12 = External interventions
     13 = External invalidations
     14 = ALU/FPU progress cycles.  (This counter in current versions of R12000
     	  is always 0).
     15 = Graduated instructions
     16 = Executed prefetch instructions
     17 = Prefetch primary data cache misses
     18 = Graduated loads
     19 = Graduated stores
     20 = Graduated store conditionals
     21 = Graduated floating-point instructions
     22 = Quadwords written back from primary data cache
     23 = TLB misses
     24 = Mispredicted branches
     25 = Primary data cache misses
     26 = Secondary data cache misses
     27 = Data misprediction from secondary cache way prediction table
     28 = State of intervention hits in secondary cache (L2)
     29 = State of invalidation hits in secondary cache
     30 = Store/prefetch exclusive to clean block in secondary cache
     31 = Store/prefetch exclusive to shared block in secondary cache
.fi
.SH BASIC OPTIONS

.TP 18
\f3-e\f1 \f2event\f1
Specify an event to be counted.  

2, 1, or 0 event specifiers may be given, the default events being to
count cycles.  Events may also be specified by setting one or both of
the environment variables \f3T5_EVENT0\f1 and \f3T5_EVENT1\f1. Command
line event specifiers, if present, override the
environment variables. The order of
events specified is not important.  The counts, together with an event
description, are written to \f3stderr\f1 unless redirected with the 
\f3-o\f1 option. Two events that \f3must\f1 be counted on the same 
hardware counter (see \f3r10k_counters\f1(5)) will cause a conflicting 
counters error.
.TP 
\f3-a\f1
Multiplexes over all events, projecting totals.  
Ignores event specifiers.

The option \f3-a\f1 produces counts for all events by multiplexing
over 16 events per counter. The OS does the switching round robin at
clock interrupt boundaries. The resulting counts are normalized by
multiplying by 16 to give an estimate of the values they would have
had for exclusive counting. Due to the equal-time nature of the
multiplexing, events present
in large enough numbers to contribute significantly to the execution
time will be fairly represented. Events concentrated in a few short
regions (for instance, instruction cache misses) 
may not be projected very accurately.

.TP
\f3-mp\f1
Report per-thread counts for multiprocessing
programs as well as (default) totals.

By default, \f3perfex\f1 aggregates the counts of all the child threads and
reports this number for each selected event. The \f3-mp\f1 option
causes the counters for each thread to be collected at thread exit
time and printed out; 
the counts aggregated across all threads are printed next.
The per-thread counts are labeled by process ID (pid).


.TP
\f3-o\f1 \f2file\f1
Redirects \f3perfex\f1 output to the specified file. 

In the \f3-mp\f1
case, the file name includes the pid of the \f3sproc\f1 child thread.

.TP
\f3-s\f1
Starts (or stops) counting when a \f3SIGUSR1\f1 (or \f3SIGUSR2\f1) signal 
is received by a \f3perfex\f1 process.

.TP
\f3-p\f1 \f2period\f1
Profiles (samples) the counters with the given period.

This option causes \f3perfex\f1 to wait until it (i.e., the 
\f3perfex\f1 process) receives a \f3SIGUSR1\f1 before it starts 
counting (for the child
process, the target). It will stop counting if it receives a
\f3SIGUSR2\f1. Repeated cycles of this will aggregate counts. If no
\f3SIGUSR2\f1 is received (the usual case), 
the counting will continue until the child
exits.  Note that counting for descendants of the 
child will not be affected, meaning counting for mp programs cannot 
be controlled with this option.  

.TP
\f3-x\f1
Counts at exception level (as well as the default user level).

Exception level includes time spent on behalf of the user during, for
example,  
TLB refill exceptions.  Other counting modes (kernel, supervisor) are 
available through the OS \f3ioctl\f1 interface (see \f3r10k_counters\f1(5) ).

.TP
\f3-k\f1
Counts at kernel level (as well as user and exception level, if set),
program superuser privileges.

.SH EXAMPLE

To collect instruction and data secondary cache miss counts on a program 
normally executed by 
.nf.

   % bar < bar.in > bar.out 

.fi
 would be accomplished by 
.nf

   % perfex -e 26 -e 10 bar < bar.in > bar.out .

.fi

.SH COST ESTIMATE OPTIONS 

.TP
\f3-y\f1
Report statistics and ranges of estimated times per event.

Without the \f3-y\f1 option, \f3perfex\f1 reports the counts recorded by the
event counters for the events requested. Since they are simply
raw counts, it is difficult to know by inspection which events are
responsible for significant portions of the job's run time. The \f3-y\f1
option associates time cost with some of the event counts.

The reported times are approximate.  Due to the superscalar nature of
the R10000 and R12000 CPUs, and their ability to hide latency, stating a
precise cost for a single occurrence of many of the events is
not possible. Cache
misses, for example, can be overlapped with other operations, so there
is a wide range of times possible for any cache miss.

To account for the fact that the cost of many events cannot be known
precisely, \f3perfex -y\f1 reports a range of time costs for each event.
"Maximum," "minimum," and "typical" time costs are
reported. Each is obtained by consulting an internal table that holds
the maximum, minimum, and typical costs for each event, and
multiplying this cost by the count for the event. Event costs are
usually measured in terms of machine cycles, and so the cost of an
event generally depends on the clock speed of the processor, which is
also reported in the output.

The maximum value contained in the table corresponds to the
worst case cost of a single occurrence of the event. Sometimes this
can be a very pessimistic estimate. For example, the maximum cost for
graduated floating-point instructions assumes that all such
instructions are double precision reciprocal square roots, since that
is the most costly floating-point instruction.

Due to the latency-hiding capabilities of the CPUs, the minimum
cost of virtually any event could be zero, since most events can be
overlapped with other operations. To avoid simply reporting minimum
costs of 0, which would be of no practical use, the minimum time
reported by \f3perfex -y\f1 corresponds to the "best case" cost of a single
occurrence of the event. The best case cost is obtained by running
the maximum number of simultaneous occurrences of that event and
averaging the cost. For example, two floating-point instructions can
complete per cycle, so the best case cost on the R10000 is 0.5 cycles per 
floating-point instruction.

The typical cost falls somewhere between minimum and maximum and
is meant to correspond to the cost one would expect to see in average
programs. For example, to measure the typical cost of a cache miss,
stride-1 accesses to an array too big to fit in cache were timed, and
the number of cache misses generated was counted. The same number of
stride-1 accesses to an in-cache array were then timed. The difference
in times corresponds to the cost of the cache misses, and this was
used to calculate the average cost of a cache miss. This typical
cost is lower than the worst case in which each cache miss cannot be
overlapped, and it is higher than the best case, in which several
independent, and hence, overlapping, cache misses are generated.
(Note that on Origin systems, this methodology yields the time for secondary
cache misses to local memory only.)  Naturally, these typical costs
are somewhat arbitrary.  If they do not seem right for the application
being measuring by \f3perfex\f1, they can be replaced by user-supplied
values. See the \f3-c\f1 option below.

\f3perfex -y\f1 prints the event counts and associated cost estimates sorted
from most costly to least costly. While resembling a profiling output,
it is not a true profile. The event costs reported are only
estimates. Furthermore, since events do overlap with each other, the
sum of the estimated times will usually exceed the program's run time.
This output should only be used to identify which events are
responsible for significant portions of the program's run time and to
get a rough idea of what those costs might be.

With this in mind, the built-in cost table does not make an attempt to
provide detailed costs for all events. Some events provide summary or
redundant information. These events are assigned minimum and
typical costs of 0, so that they sort to the bottom of the output.
The maximum costs are set to 1 cycle, so that you can get an
indication of the time corresponding to these events.  Issued
instructions and graduated instructions are examples of such
events.  In addition to these summary or redundant events, detailed
cost information has not been provided for a few other events, such as
external interventions and external invalidations, since it is
difficult to assign costs to these asynchronous events. The built-in
cost values may be overridden by user-supplied values using the \f3-c\f1
option.

In addition the event counts and cost estimates, \f3perfex -y\f1 also
reports a number of statistics derived from the typical costs. The
meaning of many of the statistics is self-evident (for example,
graduated instructions/cycle). The following are statistics whose
definitions require more explanation.  These are available with both
R10000 and R12000 CPUs.

.TP
Data mispredict/Data secondary cache hits

This is the ratio of the counts for data misprediction
from secondary cache way prediction table and secondary data
cache misses.

.TP
Instruction mispredict/Instruction secondary cache hits

This is the ratio of the counts for instruction
misprediction from secondary cache way prediction table and
secondary instruction cache misses.

.TP
Primary cache line reuse

The is the number of times, on average, that a primary
data cache line is used after it has been moved into
the cache. It is calculated as graduated loads plus
graduated stores minus primary data cache misses, all
divided by primary data cache misses.

.TP
Secondary Cache Line Reuse

The is the number of times, on average, that a secondary
data cache line is used after it has been moved into
the cache. It is calculated as primary data cache
misses minus secondary data cache misses, all divided
by secondary data cache misses.
.TP
Primary Data Cache Hit Rate

This is the fraction of data accesses that are satisfied
from a cache line already resident in the primary data
cache. It is calculated as 1.0 - (primary data cache
misses divided by the sum of graduated loads and
graduated stores).
.TP
Secondary Data Cache Hit Rate

This is the fraction of data accesses that are satisfied
from a cache line already resident in the secondary data
cache. It is calculated as 1.0 - (secondary data cache
misses divided by primary data cache misses).
.TP
Time accessing memory/Total time

This is the sum of the typical costs of graduated
loads, graduated stores, primary data cache misses,
secondary data cache misses, and TLB misses, divided
by the total program run time. The total program run
time is calculated by multiplying cycles by the time
per cycle (the inverse of the processor's clock speed).
.TP
Primary-to-secondary bandwidth used (MB/s, average per process)

This is the amount of data moved between the primary
and secondary data caches, divided by the total program
run time. The amount of data moved is calculated as
the sum of the number of primary data cache misses
multiplied by the primary cache line size and the
number of quadwords written back from primary data
cache multiplied by the size of a quadword (16 bytes).
For multiprocess programs, the resulting figure is a 
per-process average, since the counts measured by \f3perfex\f1
are aggregates of the counts for all the threads. You
must multiply by the number of threads to get the
total program bandwidth.
.TP
Memory bandwidth used (MB/s, average per process)

This is the amount of data moved between the secondary
data cache and main memory, divided by the total program
run time. The anmount of data moved is calculated as
the sum of the number of secondary data cache misses
multiplied by the secondary cache line size and the
number of quadwords written back from secondary data
cache multiplied by the size of a quadword (16 bytes).
For multiprocess programs, the resulting figure is a 
per-process average, since the counts measured by \f3perfex\f1
are aggregates of the counts for all the threads. You must
multiply by the number of threads to get the
total program bandwidth.
.TP
MFLOPS (MB/s, average per process)

This is the ratio of the graduated floating-point
instructions and the total program run time. Note that
while a multiply-add carries out two floating-point
operations, it only counts as one instruction, so this
statistic may underestimate the number of floating-point 
operations per second. For multiprocess
programs, the resulting figure is a per-process
average, since the counts measured by \f3perfex\f1 are
aggregates of the counts for all the threads. You must
multiply by the number of threads to get the total program rate.
.PP
The following statistics are computed only on R12000 CPUs:
.TP
Cache misses in flight per cycle (average)
This is the count of event 4 (Miss Handling Table (MHT) population) divided
by cycles.  It can range between 0 and 5 and represents
the average number of cache misses of any kind that
are outstanding per cycle.
.TP
Prefetch miss rate
This is the count of event 17 (prefetch primary data cache misses)
divided by the count of event 16 (executed prefetch instructions).
A high prefetch miss rate (about 1) is desirable, since prefetch hits
are wasting instruction bandwidth.
.PP
A statistic is only printed if counts for the events which define it
have been gathered.

.TP
\f3-c\f1 \f2file\f1
Load a cost table from \f2file\f1 (requires that \f3-y\f1 is specified).

This option allows you to override the internal event costs used by
the \f3-y\f1 option. \f2file\f1 contains the list of event costs 
that are to be
overridden. This \f2file\f1 must be in the same format as the output
produced by the \f3-c\f1 option. Costs may be specied in units of "clks"
(machine cycles) or "nsec" (nanoseconds). You can override all or only a
subset of the default costs.

You can also use the file \f3/etc/perfex.costs\f1 to override event costs.
If this file exists, any costs listed in it will override those built
into \f3perfex\f1. Costs supplied with the \f3-c\f1 option will override those
provided by the \f3/etc/perfex.costs\f1 file.

.TP
\f3-t \f1
Print the cost table used for \f3perfex -y\f1 cost estimates to \f3stdout\f1.

These internal costs can be overridden by specifying different values
in the file \f3/etc/perfex.costs\f1 or by using the \f3-c\f1 \f2file\f1
option. Both
\f2file\f1 and \f3/etc/perfex.costs\f1 must
use the format as provided by the
\f3-t\f1 option. It is recommended that you capture this output to a file
and edit it to create a suitable file for \f3/etc/perfex.costs\f1 or the 
\f3-c\f1
option. You do not have to specify costs for every event, however.
Lines corresponding to events with values you do not wish to
override may simply be deleted from the file.

.SH MIXED CPU OPTION

The following is an option for systems with both R10000 and R12000 CPUs.

.TP
\f3-T\f1
Allows experienced users to use \f3perfex\f1 on a system of mixed CPUs.
.PP
Although \f3perfex\f1 cannot verify it, the specification of this option
means that you have used either \f3dplace\f1(1) or some other means to
ensure that the program is using either all R10000 CPUs or all R12000
CPUs.
.PP
When used with this option, the \f3-y\f1 option will not produce
cost estimates due to the fact that the cost
estimation cannot know which type of CPU
is actually targeted.  Nothing prevents
you, however, from loading a cost table
with \f3-c\f1.  This cost table could be directly
dumped from a pure-R10000 or pure-R12000 system, depending
on which CPU flavor the program is running.

.SH CHANGE IN BEHAVIOR OF DEFAULT EVENTS FOR R12000 CPUS
.PP
Because of limitations of ABI/API compliance with Irix version
6.5/R10000 in the operating system
counter interface, it is only possible to count cycles and graduated
instructions on counter 0.  Accordingly, when the R12000 user specifies an
event in the range 0-15 to \f3perfex\f1, either through a \f3-e\f1 argument or
environment variables, cycles cannot be counted simultaneously with
that event as they can on the R10000.  (\f3perfex\f1 only multiplexes events
for the \f3-a\f1 option, never for individually specified events).  In these
cases \f3perfex\f1 will count event 16 (executed prefetch instructions) as
the second event.
.PP
For similar reasons, \f3perfex\f1 no longer remaps events 0, 15,
16, and 17 to
fit them on two (R10000) counters, since that would induce a different
behavior for identical arguments on R10000 and R12000 systems. It would
create problems when mixed-CPU systems are supported.  To be
specific, prior to 6.5.3 a user could specify:
.nf
\f3% perfex -e 0 -e 15 a.out\f1
.fi
.PP
This would execute as if the user had specified:
.nf
\f3% perfex -e 0 -e 17 a.out\f1
.fi
.PP
or
.nf
\f3% perfex -e 15 -e 16 a.out\f1
.fi
.PP
After Irix version 6.5.3, this argument combination is an error, and the
user must decide which of the equivalent (for R10000 only)
forms to use.  It is the lack of equivalence for R12000
that makes this regression necessary.
.SH FILES
\f3/etc/perfex.costs\f1

.SH DEPENDENCIES

\f3perfex\f1 only works on an R10000 or R12000 system.  Programs running
on mixed R1000 and R12000 CPUs are not supported,
although specifying the \f3-T\f1 option will permit you to verify that
only CPUs of the same type are being used.  Usually, 
\f3perfex\f1 prints an
informative message and fails on mixed CPU systems.
.PP
For the \f3-mp\f1 option,
only binaries linked-shared are currently supported;
this is due to a dependency on \f3libperfex.so\f1.  The options \f3-s\f1 and 
\f3-mp\f1 are currently mutually exclusive. 

.SH LIMITATIONS

The signal control interface (\f3-s\f1) can control only the immediate target 
process, not any of its descendants.  This makes it unusable with multiprocess 
targets in their parallel regions. 

.SH SEE ALSO

\f3r10k_counters\f1(5),
\f3libperfex\f1(3C), \f3time\f1(1), \f3timex\f1(1)
