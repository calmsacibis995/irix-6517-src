.TH cpr 1
.SH NAME
cpr \- checkpoint and restart processes; info query; delete statefiles
.br
cview \- graphical user interface for checkpoint and restart (CPR)
.SH SYNOPSIS
.BI "cpr \-c " pathname " \-p"
\fIid\fB[:\fItype\fB],[\fIid\fB[:\fItype\fB]...] 
.B "[ -fgku ]"
.br
.BI "cpr \-i " pathname " ..."
.br
.BI "cpr [ \-j ] \-r " pathname " ..."
.br
.BI "cpr \-D " pathname " ..."
.P
.BI "cview [ \-display " XwindowDisplay " ]"
.SH DESCRIPTION
IRIX Checkpoint and Restart (CPR) offers a set of user-transparent
software management tools, allowing system administrators, operators,
and users with suitable privileges to suspend a job or a set of jobs in
mid-execution, and restart them later on.  The jobs may be running on a
single machine or on an array of networking connected machines.
CPR may be used to enhance system availability, provide load and resource
control or balancing, and to facilitate simulation or modelling.
.P
The \fIcview\fP command provides an X Windows interface to CPR,
and is composed of two decks:
the Checkpoint Control Panel and the Restart Control Panel.
See the \fIcview\fP Help menu for more information.
.SH OPTIONS
Use the \-c, \-i, \-r, and \-D options to:
create, query, restart, and delete checkpoints, respectively.
.SS Create Checkpoint
.TP
\-c
Checkpoint a process or set of processes and
create a statefile directory in \fIpathname\fP,
based on the process \fIid\fP specified after \-p.
.TP
\-f
Force overwrite of an existing \fIpathname\fP,
so existing statefiles are replaced with new ones
according to the new checkpoint.
.TP
\-g
Have checkpoint target processes continue running (go)
after this checkpoint is finished.
This overrides the default WILL policy,
and the WILL policy specified in a user's CPR attribute file.
.TP
\-k
Kill checkpoint target processes
after this checkpoint is finished.
This is the default WILL policy,
but overrides a CONT setting in the user's CPR attribute file (see below).
.TP
\-u
Use this option only when issuing a checkpoint
immediately before an operating system upgrade.
This forces a save of all executable files and DSO libraries
used by the current processes, so that target processes
can be restarted in an upgraded environment.
This flag must be used again if restarted processes
must be recursively checkpointed in the new environment.
.TP
\-p
Specifies the process or set of processes to checkpoint.
Processes may have any \fItype\fP in the following list:
.P
.RS
.ta 8n
.nf
PID	for Unix process and POSIX pthread ID (the default type)
GID	for Unix process group ID
SID	for Unix process session ID; see \fItermio\fP(7)
ASH	for IRIX Array Session ID; see \fIarray_services\fP(5)
HID	for process hierarchy (tree) rooted at that PID
SGP	for IRIX sproc shared group; see \fIsproc\fP(2)
.fi
.RE
.P
If \fItype\fP is not given in a checkpoint request,
.I id
is interpreted to use its default type PID.
Here are some examples:
.P
 cpr -c ckpt01 -p 1111
 cpr -c ckpt02 -p 2222:GID
.P
The first example checkpoints a process with PID 1111
to the statefile directory
.IR ./ckpt01 .
The second example checkpoints all processes with process group ID 2222
to the statefile directory
.IR ./ckpt02 .
.P 
Users may checkpoint a random set of processes into one statefile by
specifying more comma-separated \fIid\fPs (with optional \fItype\fP)
after the \-p flag, as in this example:
.P
 cpr -c ckpt03 -p 111:GID,222,333:SID
.P
This saves all processes with process group ID 111, process ID 222,
and process session ID 333 into the statefile directory
.IR ./ckpt03 .
.P
Only the super user and the owner of a process or set of processes
(the checkpoint owner) can checkpoint the targeted processes.
.SS Checkpoint Info
.TP
\-i \fIstatefile ...\fP
Provides information about existing CPR statefile(s):
the statefile revision number, process name(s),
credential information of the process, current working directory,
open file information, and the time when the checkpoint was performed.
.SS Restart Checkpoint
.TP
\-r \fIstatefile ...\fP
Restarts a process or set of processes from the statefile.
If a restart involves more than one processes,
the restart on all processes has to succeed before any process starts running;
otherwise, all restarts are aborted.
.TP
\-j
Make processes interactive and job controllable.
If a checkpoint is issued against an interactive process
or a group of processes rooted at an interactive process,
it can be restarted interactively with the \-j option.
It runs in the foreground, even the original process ran in the background.
Users may issue job control signals to background the process if desired.
An interactive job is defined as a process with a controlling terminal; see
.IR termio (7).
Only one controlling terminal is restored
even if the original process had multiple controlling terminals.
.P
Note that statefile remain unchanged after a restart unless users
use the \-D option to delete the statefile.
.P
A restart may fail due to a number of reasons including:
.P
Resource Limitation:
This happens when the original PID is not
available and the application may not use another PID;
or when certain application-related files, binaries, or libraries
are no longer available on the system if the REPLACE or SUBSTITUTE
option was not set at checkpoint time for missing files;
or when other system resources such as memory or disk run out due to restart.
.P
Security and Data Integrity:
Restart fails if the restarting user lacks
the proper permission to restart the statefile,
or if the restart destroys or replaces data without proper permission.
The basic rule is that only the superuser and checkpoint owner
can restart the processes.
This implies that if the superuser checkpoints a process
owned by a regular user, only the superuser has permission to restart it.
.P
Other Fatal Failures:
If important parts of the original processes cannot be restored
due to any other reasons.
.SS Delete Checkpoint
.TP
\-D statefile ...
Delete one or more statefiles.
After a successful restart,
statefiles might no longer be needed,
and may be removed.
The delete option removes all files associated with the statefile,
including saved open files, mapped files, pipe data, etc.
Only the superuser and checkpoint owner may delete a statefile directory.
.SS Cview Window
How to Checkpoint:
Under the STEP I button, select a process or set of processes from the list.
To checkpoint a process group, a session group, an IRIX array session,
a process hierarchy, or an \fIsproc\fP shared group,
select a category from the Individual Process drop-down menu.
In the filename field below,
enter the name of a directory for storing the statefile.
Click the STEP II button if you want to change checkpoint options,
such as whether to exit or continue the process,
or control open file and mapped file dispositions.
Click the STEP III OK button to initiate the checkpoint,
or the Cancel Checkpoint button to discontinue.
.P
How to Restart:
Click the Restart Control Panel tab at the bottom of the \fIcview\fP window.
From the scrolling list of files and directories,
select a statefile to restart.
Note that all files and directories are shown, not just statefile directories.
If a statefile is located somewhere besides your home directory,
change directories using the icon finder at the top.
Select any options you want, such as whether to retain the original process ID,
whether to restore the original working directory,
or whether to restore the original root directory.
Click the OK Go Restart button to initiate restart.
.P
Querying a Statefile:
From the scrolling list of files and directories, select a statefile to query.
At the bottom of the \fIcview\fP window,
click the Tell Me More About This Statefile button.
.P
Deleting a Statefile:
From the scrolling list of files and directories, select a statefile to delete.
At the bottom of the \fIcview\fP window,
click the Remove This Statefile button.
.SH SIGNALS AND EVENT HANDLING
Two signals, SIGCKPT and SIGRESTART, are designed to give application programs
adequate warning to take special action upon checkpoint or at restart time.
The default action is to ignore both signals
unless applications catch the signals; see signal(2).
By catching the signals, an application gets an opportunity
to set up its signal handler and be prepared for checkpoint or restart.
An application can clean up files, flush buffers, close or reconnect
socket connections, etc.
.P
Meanwhile, the main CPR process waits as long as necessary for the application
to finish the signal handling, before
.I cpr
proceeds with further checkpoint activities after SIGCKPT.
At restart the first thing an application runs is the SIGRESTART
signal handler, if the application is catching the signal.
.P 
However, these two signals (SIGCKPT and SIGRESTART) are not
recommended for direct use by applications wishing to be checkpointed.
Instead, applications call \fIatcheckpoint\fP(3C) and/or \fIatrestart\fP(3C)
to register event handlers for checkpoint and restart,
and activate signal handling.
This is especially important for applications that need to register
multiple callback handlers for checkpoint or restart events.
.P
Warning: if applications catch the two CPR signals directly,
it may undo all of the CPR signal handler registration
provided by \fIatcheckpoint\fP(3C) and \fIatrestart\fP(3C),
including handlers that some libraries reserve
without the application programmer's knowledge. 
.SH FILES
.ta \w'/etc/cpr_proto-0\0'u
.nf
statefile	Directory containing images of checkpointed processes
$HOME/.cpr	User-configurable options for checkpoint and restart
/etc/cpr_proto	Attribute file prototype for creating $HOME/.cpr
.ta \w'/usr/lib/X11/app-defaults/Cview\0\0'u
.P
/usr/lib/X11/app-defaults/Cview	Application defaults file
/usr/lib/images/Cview.icon	Image for minimized window
.fi
.P
The $HOME/.cpr files control CPR behavior,
and consist of one or more CKPT attribute definitions,
each in the following form:
.P
.RS
.nf
CKPT \fIIDtype IDvalue\fP {
    \fIpolicy:  instance:  action\fP
    ...
}
.fi
.RE
.P
The \fIIDtype\fP is the same as for the \-c option; see above.
The \fIIDvalue\fP is the process or process set ID.
Both can be given as a star (*) to represent any \fIIDtype\fP or \fIIDvalue\fP.
.P
Here are the \fIpolicy\fP keywords and what they control:
.P
 FILE   policies of handling open files
 WILL   actions on the original process after checkpoint
 CDIR   policy on the original working directory; see \fIchdir\fP(2)
 RDIR   policy on the original root directory; see \fIchroot\fP(2)
 FORK   policy on original process ID
.P
Only FILE takes an \fIinstance\fP, which is the filename.
FILE offers the following \fIaction\fP keywords:
.P
 MERGE      upon restart, reopen the file and seek to the previous offset
 IGNORE     upon restart, reopen the file as originally opened
 APPEND     upon restart, reopen the file for appending
 REPLACE    save file at checkpoint; replace the original file at restart
 SUBSTITUTE save file at checkpoint; at restart, open the saved file as
            an anonymous substitute, not touching the original file
.P
WILL offers the following \fIaction\fP keywords:
.P
 EXIT       the original process exits after checkpoint (default action)
 CONT       the original process continues to run after checkpoint
.P
CDIR and RDIR offer the following \fIaction\fP keywords:
.P
 REPLACE    restore original current working directory or root directory
	    (default action)
 IGNORE     ignore original current working directory or root directory;
            restart according to new process environment
.P
FORK offers the following \fIaction\fP keywords:
.P
 ORIGINAL   attempt to recover the original process ID (default action)
 ANY        it is acceptable to restart using any process ID
.SH NOTES
Due to the nature of UNIX checkpoint and restart,
it is impossible to claim that everything
a process owns or connects with can be restored.
The bullet items below attempt to list what is supported,
and what is known to be not supported.
For system objects not covered below,
safety decisions must be made by application programmers and users.
.P
The following system objects are checkpoint-safe:
.IP \(bu
UNIX processes, process groups, terminal control sessions, IRIX array sessions, 
process hierarchies, \fIsproc(2)\fP groups, POSIX pthreads (\fIpthread_create(3P)\fP)
and random process
sets
.IP \(bu
all user memory area, including user stack and data regions
.IP \(bu
system states, including process and user information,
signal disposition and signal mask, scheduling information,
owner credentials, accounting data, resource limits, 
current directory, root directory, locked memory, and user semaphores
.IP \(bu
system calls, if applications handle return values and error numbers correctly, 
although slow system calls may return partial results
.IP \(bu
undelivered and queued signals are saved at checkpoint and delivered at restart
.IP \(bu
open files (including NFS-mounted files), mapped files, file locks,
and inherited file descriptors
.IP \(bu
special files /dev/tty, /dev/console, /dev/zero, /dev/null, \fIccsync\fP(7M)
.IP \(bu
open pipes, pipeline data and streams pipe read and write message modes
.IP \(bu
System V shared memory
.IP \(bu
POSIX semaphores (\fIpsema(D3X)\fP)
.IP \(bu
semaphore and lock arenas (\fIusinit(3P)\fP)
.IP \(bu
jobs started with CHALLENGEarray services,
provided they have a unique ASH number; see \fIarray_services\fP(5)
.IP \(bu
applications using node-lock licenses; see \fIIRIX Checkpoint and
Restart Operation Guide\fP on what to do for applications using floating
licenses
.IP \(bu
applications using the prctl() PR_ATTACHADDR option; see \fIprctl\fP(2)
.IP \(bu
applications using blockproc and unblockproc; see \fIblockproc\fP(2)
.IP \(bu
R10000 counters; see \fIlibperfex\fP(3C) and \fIperfex\fP(1)
.P
The following system objects are not checkpoint-safe:
.IP \(bu
network socket connections; see \fIsocket\fP(2)
.IP \(bu
X terminals and X11 client sessions
.IP \(bu
special devices such as tape drivers and CDROM
.IP \(bu
files opened with setuid credential that cannot be reestablished
.IP \(bu
System V semaphores and messages; see \fIsemop\fP(2) and \fImsgop\fP(2)
.IP \(bu
memory mapped files using the /dev/mmem file; see \fImmap\fP(2)
.IP \(bu
open directories
.SH SEE ALSO
.IR atcheckpoint (3C),
.IR atrestart (3C),
.IR ckpt_create (3),
.IR ckpt_remove (3),
.IR ckpt_restart (3),
.IR ckpt_stat (3)
.br
\fIIRIX Checkpoint and Restart Operation Guide\fP
