.TH symmon 1M ""
.SH NAME
symmon \- kernel symbolic debugger
.SH DESCRIPTION
\f2symmon\fP is a standalone program used to debug the
kernel.
It is intended to be used only by those involved in writing
and debugging device drivers or other parts of the kernel.
The
implementation of \f2symmon\f1 is machine dependent and the commands and
functionality described here may not apply to all systems.
.P
To use \f2symmon\f1, several steps must be taken to prepare the system:
.TP 4
1.
\f2symmon\f1 must be manually installed by the user,
because it is not installed on the system as shipped from the factory.
This can be done by installing
the ``Debugging Kernels'' subsystem in the IDO software development option.
.TP
2.
Alterations must be done to the file
\f2/var/sysgen/system/irix.sm\f1 to build
a kernel capable of being debugged; see the comments in that file for
details.
.TP
3.
The program \f2setsym\fP(1M) needs to be run on the newly
generated kernel to allow \f2symmon\f1 to recognize symbols in it.
.TP
4.
\f2symmon\f1
needs to be installed in the volume header of the root drive with
.IR dvhtool (1M).
This normally happens as part of the software installation process.
.P
\f2symmon\f1 is typically used with a terminal as the system
console (see
.IR prom (1M)
for information on how to enable a terminal as the console).
When a
debug kernel is booted, it automatically tries to load
\f2symmon\f1 from the same source.
\f2symmon\f1 can be booted from an alternate device by setting the
\f3dbgname\fP environment variable in the prom.
For example:
.Ex
\f4setenv dbgname scsi(\&1)disk(\&1)rdisk(0)partition(\&8)symmon\f1
.Ee
loads \f2symmon\f1 from a disk 1, connected to SCSI controller 1.
.P
Once \f2symmon\f1 is loaded, the system operates normally until
\f2symmon\f1 is triggered by the keyboard or an exceptional condition happens
in the kernel that causes it to enter the debugger automatically.
To
enter \f2symmon\f1 from the keyboard, type a <Ctrl-a>.
\f2symmon\f1 prompts
with \f3DBG:\f1 and accepts commands described below.
.SS "Built-in Commands"
\f2symmon\f1 has a set of basic commands for setting and clearing breakpoints
and examining system state.
Not all of the commands listed below
are supported on all systems.
Some commands take memory addresses
as arguments.
Addresses can be given directly in decimal,
in hex if preceded
by \f30x\f1, in binary if preceded with \f30b\f1, as names of functions or
data, as names of registers if preceded by \f3$\f1,
or as a combination of those with \f3+\f1 and \f3\-\f1.
Some commands
take a range of addresses specified as either \f2ADDR\f1\f3:\f1\f2ADDR\f1
for an inclusive
range or \f2ADDR\f1\f3#\f1\f2COUNT\f1 for a count of \f2COUNT\f1 starting
at \f2ADDR\f1.
Commands
are listed below:
.TP
\f3brk\f1 [\f2ADDR\f1]
Set a breakpoint at the given address.
If no arguments are given, the
set of current breakpoints is listed.
.TP
\f3bt\f1 [\f2MAX_FRM\f1]
Print a stack back trace of up to \f2MAX_FRM\f1 frames.
See the discussion
about \f3ubt\fP below for an alternate form of stack back trace.
.TP
\f3c\fP
Continue execution from a breakpoint.
.TP
\f3cacheflush\f1 [\f2RANGE\f1]
Flush both the instruction and data caches over the range of address given.
.TP
\f3calc\fP
.PD 0
.TP
\f3call\f1 \f2ADDR\f1 [\f2ARGLIST\f1]
Set up a stack frame and call the procedure at the specified address.
.PD
.TP
\f3clear\fP
Clear the screen.
.TP
\f3dis\f1 [\f2RANGE\f1]
Disassemble instructions in memory over the range specified.
.TP
\f3dump\f1 [\f3\-b\f1|\f3\-h\f1|\f3\-w\f1|\f3-d\f1] [\f3\-o\f1|\f3\-t\f1|\f3\-x\f1|\f3\-c\f1] \f2RANGE\f1
Dump the contents of memory.
The \f3\-b\fP\, \f3\-h\fP, \f3\-w\fP and \f3\-d\fP
flags can be used to specify byte, halfword, word or double word data.
The
\f3\-o\fP, \f3\-t\fP, \f3\-x\fP, and \f3\-c\fP flags can be used
to specify octal, decimal, hexadecimal, or ASCII data formats.
.IP
The specified range of memory to dump can take these forms:
.RS
.IP \(bu 3
.I base
for a single location
.IP \(bu 3
.IB base # count
for
.I count
locations starting at
.I base
.IP \(bu 3
.IB base : limit
for locations whose addresses are greater than or equal to
.I base
but less than
.I limit
.RE
.TP
\f3g\f1 [\f3\-b\f1|\f3\-h\f1|\f3\-w\f1] [\f2ADDR\f1|\f2$regname\f1]
Get and display the contents of memory at the address given.
If a register
name is given, its contents are displayed at the time the kernel was stopped.
.TP
\f3goto\f1 \f2ADDR\fP
Continue execution until the given address or a breakpoint is reached.
This is a short hand way to set a breakpoint at an address, continue,
and then remove that breakpoint.
.TP
\f3help\fP
List a short summary of the built-in commands.
.TP
\f3hx\f1 \f2NAME\fP
The symbol table is searched for entries matching \f2NAME\f1,
and if one is found,
its value is printed.
.TP
\f3kp\f1 [\f2KPNAME\f1]
Kernel print command.
If no arguments are given, a list of the available
kernel print commands is given.
If a name is given, that print function
is executed.
See the discussion on kernel print commands below for more
information.
.TP
\f3lkaddr\f1 \f2ADDR\fP
The given address is matched against the symbol table and the symbols near it
are listed.
.TP
\f3lkup\f1 \f2STRING\fP
The given string is matched against the symbol table and any symbol with
an equal or longer name is printed.
This is convenient when you cannot
remember the precise symbol name.
.TP
\f3msyms\f1 \f2ID\fP
Print dynamically loaded kernel module's symbols.
The module id is
found using either the \f2lboot\f1 \f3\-V\f1 command or the \f2ml\f1
\f3list\f1 command.
See
the \f2mload\fP(4) manual page for more information.
.TP
\f3nm\f1 \f2ADDR\fP
The address given is matched against the symbol table and if an exact match
is found, the symbolic name is printed.
This is a more restrictive version
of the \f3lkaddr\f1 command described above.
.TP
\f3p\f1 [\f3\-b\f1|\f3\-h\f1|\f3\-w\f1] \f2ADDR VALUE\fP
Put the value given into the address given.
This causes a write to memory.
.TP
\f3printregs\fP
List the contents of the general purpose registers when the kernel was stopped.
.TP
\f3quit\fP
Restart the PROM.
.TP
\f3s\f1 [\f2COUNT\f1]
Single step the kernel for either one instruction or the given count.
If
the current instruction is a branch, then both it and the following
instruction are executed.
The next unexecuted instruction is disassembled
when the command completes.
After a \f3step\f1 command is issued, \f2symmon\f1
enters a command repeat mode where a null command causes another
step to be taken.
This repeat mode is indicated by a change to the prompt.
.TP
\f3S\f1 [\f2COUNT\f1]
Same as the \f3step\f1 command above, except that jump-and-link instructions are
stepped over.
.TP
\f3tlbdump\f1 [\f2RANGE\f1]
List the contents of the translation lookaside buffer.
If specified, the
range of TLB entries given is listed.
The range should specify a subset
of the 64 TLB slots.
.TP
\f3tlbflush\f1 [\f2RANGE\f1]
Flush the TLB over the range of entries given or the entire TLB if no
range is specified.
.TP
\f3tlbmap\f1 [\f3\-i\f1 \f2INDEX\f1] [\f3\-n\f1|\f3\-d\f1|\f3\-g\f1|\f3\-v\f1] \f2VADDR PADDR\fP
Inserts an entry in the TLB that maps the virtual address given by \f2VADDR\f1
to the physical address given by \f2PADDR\f1.
If specified, the TLB slot given
by \f2INDEX\f1 is used.
The \f3\-n\fP, \f3\-d\fP, \f3\-g\fP, and \f3\-v\fP flags can be
used to turn on the non-cached, dirty, global, and valid bits.
The
current TLB context number is used.
.TP
\f3tlbpid\f1 [\f2PID\f1]
Get or set the current TLB context number.
If no argument is given,
the current TLB context number is returned; otherwise, the context number
is set to the argument.
.TP
\f3tlbptov\f1 \f2PADDR\fP
Display TLB entries that map a virtual address to the physical address
given.
.TP
\f3tlbvtop\f1 \f2VADDR\f1 [\f2PID\f1]
Find the physical address mapped to the virtual address given by \f2VADDR\f1.
If
\f2PID\f1 is given, then it is used as the TLB context number in the match; otherwise,
the current TLB context number is used.
.TP
\f3unbrk\f1 [\f2BPNUM\f1]\fP
Remove the breakpoint with the breakpoint number given.
The breakpoint
number can by determined by listing the set breakpoints with the \f3brk\f1
command.
.TP
\f3wpt\f1 [\f3r\f1|\f3w\f1|\f3rw\f1] [\f30\f1|\f2PADDR\f1]
Set a read, write or read/write watch point at on physical address using
the R4000 watch point registers.
The address must be double word aligned, and the watch point trips
on any access within the next eight bytes.
An argument of 0 clears the watch point.
Note that the R4000 only supports one watch point at a time.
.TP
[\f2ADDR\f1]\f3/\f1[\f2COUNT\f1][\f3d\f1|\f3D\f1|\f3o\f1|\f3O\f1|\f3x\f1|\f3X\f1|\f3XX\f1|\f3b\f1|\f3s\f1|\f3c\f1|\f3i\f1]
Dump the contents of memory at the given address.
This command functions in a similar manner as the \f2dbx\f1(1) command of
the same syntax.
The \f3XX\f1 is a \f2symmon\f1 specific extension to printing hexadecimal
double words.
.SS "Kernel Print Commands"
The kernel extends the set of built-in \f2symmon\f1 commands with kernel print
commands.
These commands dump various kernel data structures.
.TP
\f3proc\f1 \f2PROCINDEX\fP
Dump the process structure associated with the given process table index.
Note that the process table index is not the same as the IRIX process ID.
.TP
\f3user\f1 \f2PROCINDEX\fP
Dump the contents of the user structure for the process with the process
table index given.
.TP
\f3buf\f1 \f2BUFNUM\fP
Dump the contents of a buffer structure.
The address of the buffer to
be dumped is controlled by the \f3BUFNUM\f1 argument.
If \f3BUFNUM\f1 is a valid
K0, K1, or K2 address, then the buffer at that address is displayed.
If
\f3BUFNUM\f1 is a small integer, it is used as an index into the buffer table.
If \f3BUFNUM\f1 is equal to \-1, summary information about the buffer pool is
displayed.
.TP
\f3qbuf\f1 \f2DEVICE\fP
Dump the contents of buffers queued for the device given.
The device
argument is given as the major/minor device number of the desired device.
.TP
\f3pda\f1 [\f2CPUID\f1]
Dump the contents of the processor private data area for the processor
ID given.
.TP
\f3runq\fP
Dump the run queue.
A short summary of each process waiting for CPU time
is listed.
.TP
\f3eframe\f1 [\f2ADDR\f1]
The exception frame at the given address is displayed.
If the address is
a small integer, the exception frame of the process with that process
table index is used.
The exception frame holds the contents of the general
purpose registers at the time the process last executed.
.TP
\f3ubt\f1 [\f2PROCINDEX\f1]
User process stack back trace.
A stack back trace is listed for the
process whose process table index is given.
.TP
\f3plist\fP
Process table list.
This gives an output similar to
.IR ps (1)
and can be used to find the process table index number for a process.
.TP
\f3pb\fP
Dump console print buffer.
The contents of the console print buffer are
printed.
This can be useful when an important message has scrolled off
the screen.
.SH SEE ALSO
prom(1M).
