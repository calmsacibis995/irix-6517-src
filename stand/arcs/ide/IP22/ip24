# This is a script for diagnostics for Indy 
report=4;
hinv -v;
$stoponerr=1;
$skipvino=0;
$failed=0;
#menu

menu {
echo ""
echo "///////////////////////////////////////////////////////////////////////////"
	version;
echo ""
echo "Command   Description"
echo ""
echo "ip24va    IP24,CPU diagnostics with automatic voltage change"
echo "a2testva  A2 audio diagnostics with automatic voltage change"
echo "ng1va     Newport diagnostics with voltage change"
echo "gr2va     XZ/Elan diagnostics with voltage change"
echo "vino	VINO tests"
echo "camera	camera tests"
echo "The combination scripts below boot unix if they complete without error, unless"
echo "noted otherwise."
echo "c1	IP24 only (Gold NG1, Gold CPU)"
echo "c2	GFX only  (Gold IP24, Gold CPU)"
echo "c3	CPU only  (Gold IP24, Gold GFX)"
echo "c4	CPU+IP24  (Gold GFX)"
echo "c5	IP24+GFX  (Gold CPU)"
echo "c6	GFX+CPU  (Gold IP24)"
echo "c7	IP24+GFX+CPU  (All New Boards)"
echo "c8	GFX only @5.25V"
echo "c9	GFX only @4.8V (Does not boot Unix)"
echo "c10	ISDN Connect Test"
echo "c11	Test SCSIMEZZ, then boot UNIX"
echo ""
echo "s1	Indy Server"
/*
echo "m1	Memory Tests (Address Uniqueness, March, MATs, KH,"
echo "            Altaccess, kh parity, Walking Bit, threebit, marchx, marchy)"
*/
echo "m2	Memory Tests (kh, kh parity, threebit, marchx, marchy,"
echo "            butterfly, ldram, kh doubleword, khlow)" 
echo "pf	Symphony Pixel Formatter Tests"
echo "pf_boot   Symphony Pixel Formatter Tests, then boot unix"
echo "scsimezz  Test HPC3 and WD95a"
echo "///////////////////////////////////////////////////////////////////////////"
}

delay {
   ide_delay -s 10
	}


m2 {
	$tmp=khlow
	if($tmp) {
		echo "Failure detected in Knaizuk Hartmann Low Test\n"
		$failed=1;
		wait;
	}
	$tmp=memtest2 3
	if($tmp) {
		echo "Failure detected in Knaizuk Hartmann Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 5
	if($tmp) {
		echo "Failure detected in Knaizuk Hartmann Parity  Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 10
	if($tmp) {
		echo "Failure detected in Threebit Memory Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 12
	if($tmp) {
		echo "Failure detected in Knaizuk Hartmann Doubleword Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 11
	if($tmp) {
		echo "Failure detected in Butterfly Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 8
	if($tmp) {
		echo "Failure detected in March X Test\n"
		$failed=1;
		wait;
	}	
	$tmp=memtest2 9
	if($tmp) {
		echo "Failure detected in March Y Test\n"
		$failed=1;
		wait;
	}	
	$tmp=ldram 
	if($tmp) { 
		echo "Failure detected in ldram test\n" 
		$failed=1; 
		wait;
	}	
}

memory {

	$tmp=memtest2 0
	if($tmp) {
		echo "Failure detected in memtest test\n"
		$failed=1;
		wait;
	}	
	echo "----------------------------------------------------\n"

	$tmp=ldram -p
	if($tmp) {
		echo "Failure detected in ldram with parity test\n"
		$failed=1;
		wait;
	}	
	$tmp=dram
	if($tmp) {
		echo "Failure detected in dram test\n"
		$failed=1;
		wait;
	}	
	echo "----------------------------------------------------\n"

	$tmp=dram -p
	if($tmp) {
		echo "Failure detected in dram with parity test\n"
		$failed=1;
		wait;
	}	
}

#End Memory


cpusc {
	echo "Checking for R4600sc\n"
        if (is_r4600sc) {
		echo "R4600sc found!!!";
		if(sc_on){
		  	$failed=1;
			wait;
        	}
		if(sc_hit){
			$failed=1;
			wait;
		}
		if(sc_miss){
		  $failed=1;
		  wait;
        	}
        	if(sc_hit_miss){
	  	  $failed=1;
		  wait;
        	}
        	if(sc_tag){
                  $failed=1
		  wait;
        	}
		if(sc_off){
			$failed=1
		}

        }
	else
		{
			echo "R4600sc not found!!!";

			echo "----------------------------------------------------\n"
			if(tlb){
				$failed=1;
				wait;
			}
	
			echo "----------------------------------------------------\n"
			if(utlb){
				$failed=1;
				wait;
			}
	fi
	}

	echo "----------------------------------------------------\n"
	if(dcache1){
		echo "Failure detected in dcache1 test\n"
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	
	$tmp=icache1
	if($tmp) {
		echo "Failure detected in icache1 test\n"
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	
	$tmp=icache2
	if($tmp) {
		echo "Failure detected in icache2 test\n"
		$failed=1;
		wait;
	}

	echo "----------------------------------------------------\n"

	$tmp=scache1
	if($tmp) {
		echo "Failure detected in scache1 test\n"
		$failed=1;
		wait;
	}	
	$tmp=scache2
	if($tmp) {
		echo "Failure detected in scache2 test\n"
		$failed=1;
		wait;
	}	

	echo "----------------------------------------------------\n"
	if(fpu) {
		$failed=1;
		wait;
	}
	echo "----------------------------------------------------\n"

	if ($failed) {
		echo "CPU CARD TEST FAILED";
		wait;
		$cpufailed=1;
		} 
		else
		{ 
			echo "CPU CARD TEST PASSED";
		}
	fi

}

cpupc {

	echo "----------------------------------------------------\n"
	if(tlb){
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	if(utlb){
		$failed=1;
		wait;
	}

	echo "----------------------------------------------------\n"
	if(dcache1){
		echo "Failure detected in dcache1 test\n"
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	
	$tmp=icache1
	if($tmp) {
		echo "Failure detected in icache1 test\n"
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	
	$tmp=icache2
	if($tmp) {
		echo "Failure detected in icache2 test\n"
		$failed=1;
		wait;
	}

	echo "----------------------------------------------------\n"

	if(fpu) {
		$failed=1;
		wait;
	}
	echo "----------------------------------------------------\n"

	if ($failed)  {
		echo "CPU CARD TEST FAILED";
		wait;
		}
}

#End cpu modules

# START OF VINO DIAGNOSTICS
# THE FOLLOWING IS THE STARTUP SCRIPT FOR THE VINO DIAGNOSTICS.
#
# IN ORDER FOR THE SCRIPT TO RUN PROPERLY, THE FOLLOWING MUST BE DONE:
#       1. CONNECT A PAL VIDEO SOURCE TO A JACK
#       2. CONNECT A NTSC VIDEO SOURCE TO A JACK
#
vino {
$tmp = vino_regtest
if ($tmp && $stoponerr) {
	echo "VINO 7191 TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_7191_init
if ($tmp && $stoponerr) {
	echo "VINO 7191 TEST FAILED"
	$failed = 1;
        wait;
	}

vino_inputs c

$tmp = vino_7191_status
if ($tmp && $stoponerr) {
	echo "VINO 7191 TEST FAILED"
	$failed = 1;
        wait;
	}

vino_inputs s

$tmp = vino_7191_status

echo "# IN ORDER FOR THE VINO SCRIPT TO RUN PROPERLY, THE FOLLOWING MUST BE DONE:"
echo "#       1. CONNECT A PAL VIDEO SOURCE TO A JACK"
echo "#       2. CONNECT A NTSC VIDEO SOURCE TO A JACK"

$tmp = vino_dma1 -b -p
if ($tmp && $stoponerr) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma1 -a -p
if ($tmp) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma3 -a -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma3 -b -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma4 -b -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma4 -a -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma5 -b -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma5 -a -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma6 -b -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma6 -a -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma7 -a -b -p
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma1 -a -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma1 -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma3 -a -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma3 -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma4 -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma4 -a -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma5 -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma5 -a -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma6 -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma6 -a -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}

$tmp = vino_dma7 -a -b -n
if ($tmp ) {
	echo "VINO DMA TEST FAILED"
	$failed = 1;
        wait;
	}
}

camera {
$tmp = vino_camera_init
if ($tmp && $stoponerr) {
	echo "FAILED CAMERA INIT"
	$failed = 1;
        wait;
	}
$tmp = vino_camera
if ($tmp && $stoponerr) {
	echo "FAILED CAMERA INIT"
	$failed = 1;
        wait;
	}
}

# END OF VINO DIAGNOSTICS


a2test {
	$loopcount = 0;
#	report =4;
	$a2tst0pass = 0;
	$a2tst0fail = 0;
	$a2tst1pass = 0;
	$a2tst1fail = 0;
	$a2tst2pass = 0;
	$a2tst2fail = 0;
	$a2tst3pass = 0;
	$a2tst3fail = 0;
	$a2tst4pass = 0;
	$a2tst4fail = 0;
	$a2tst5pass = 0;
	$a2tst5fail = 0;
	$a2tst6pass = 0;
	$a2tst6fail = 0;
	$a2tst7pass = 0;
	$a2tst7fail = 0;
	while ( $loopcount < 3 ) {
		echo ""
		echo "----------------------------------------------------"
		echo "Starting audio test loop" $loopcount
		echo "----------------------------------------------------\n"

		$a2tst = audio -t0
		if($a2tst) {
			$a2tst0fail = $a2tst1fail + 1;
			$failed = 1;
		}
		else {
			$a2tst0pass = $a2tst1pass + 1;
		}
		a2tst = audio -t1
		if($a2tst) {
			$a2tst1fail = $a2tst1fail + 1;
			$failed = 1;
		}
		else {
			$a2tst1pass = $a2tst1pass + 1;
		}
		a2tst = audio -t2
		if($a2tst) {
			$a2tst2fail = $a2tst2fail + 1;
			$failed = 1;
		}
		else {
			$a2tst2pass = $a2tst2pass + 1;
		}
		a2tst = audio -t3
		if($a2tst) 
			$a2tst3fail = $a2tst3fail + 1;
		else
			$a2tst3pass = $a2tst3pass + 1;
		a2tst = audio -t4
		if($a2tst)
			$a2tst4fail = $a2tst4fail + 1;
		else
			$a2tst4pass = $a2tst4pass + 1;
		a2tst = audio -t5
		if($a2tst) {
			$a2tst5fail = $a2tst5fail + 1;
			$failed = 1;
		}
		else {
			$a2tst5pass = $a2tst5pass + 1;
		}
		a2tst = audio -t6
		if($a2tst) {
			$a2tst6fail = $a2tst6fail + 1;
			$failed = 1;
		}
		else {
			$a2tst6pass = $a2tst6pass + 1;
		}
		a2tst = audio -t7
		if($a2tst) 
			$a2tst7fail = $a2tst7fail + 1;
		else
			$a2tst7pass = $a2tst7pass + 1;

		$loopcount = $loopcount + 1;
	}
	echo "audio test 0: 	Pass =" $a2tst0pass"	fail =" $a2tst0fail
	echo "audio test 1: 	Pass =" $a2tst1pass"	fail =" $a2tst1fail
	echo "audio test 2: 	Pass =" $a2tst2pass"	fail =" $a2tst2fail
	echo "audio test 3: 	Pass =" $a2tst3pass"	fail =" $a2tst3fail
	echo "audio test 4: 	Pass =" $a2tst4pass"	fail =" $a2tst4fail
	echo "audio test 5: 	Pass =" $a2tst5pass"	fail =" $a2tst5fail
	echo "audio test 6: 	Pass =" $a2tst6pass"	fail =" $a2tst6fail
	echo "audio test 7: 	Pass =" $a2tst7pass"	fail =" $a2tst7fail
	wait;

	if( $a2tst7pass == 0 ) {
		# Rerun audio -t7 ten more times to get it to pass
		echo "Audio test 7 failed three loops."
		echo "Press ENTER to run audio test 7 for 10 more loops"
		wait;
		$report=1
		$loopcount = 0;
		while ( $loopcount < 10 ) {
			a2tst = audio -t7
			if($a2tst) {
				$a2tst7fail = $a2tst7fail + 1;
			}
			else {
				$a2tst7pass = $a2tst7pass + 1;
				$loopcount = 10
			}
			$loopcount = $loopcount + 1;
		}
		if( $a2tst7pass == 0 ) {
			echo "Audio test 7 FAILED."
			echo "Reject this system with an Audio failure"
			$failed = 1;
		}
	}
}

#End a2test

unix {
	echo "<<<< About to to boot UNIX......>>>>"
	boot dksc(0,1,0)unix;
#	boot -f dksc(0,1,8)sash dksc(0,1,0)unix;
}

#End unix


ip {
	echo "----------------------------------------------------\n"
	if (is_symphony)
                {
                        $tmp=hpc3 0
                }
                else
                {
                        $tmp=hpc3
                }
                fi
        if ($tmp)
                {
                $failed=1;
		wait;
        }


	echo "----------------------------------------------------\n"

	if(int2) {
		$failed=1;
		wait;
	}
	echo "----------------------------------------------------\n"
	
	echo "Running ISDN test"
	if( isdn_dis) {
		$failed =1;
		wait;
	}

        echo "----------------------------------------------------\n"
	if($skipvino==0) {
		echo " Running VINO test"
		vino	
	}

#	echo "----------------------------------------------------\n"
#	if(!clock) {
#		$failed=1;
#		wait;
#	}

#	echo "----------------------------------------------------\n"

#	$tmp = memtest  0xa8800000:0xa9000000
#	if($tmp) {
#		$failed=1;
#		wait;
#	}
	
	
#	echo "----------------------------------------------------\n"
	# it takes about 3 minutes
#	echo  "PLEASE WAIT ... THE FOLLOWING TEST TAKES ABOUT 1 1/2 MINUTES"
	
#	$tmp = ldram -p;
	
#	if($tmp){
#		$failed=1;
#		wait;
#	}

#	echo "----------------------------------------------------\n"
#	if(pargenlog) {
#		$failed=1;
#		wait;
#	}

#	echo "----------------------------------------------------\n"
#	if(blk) {
#		$failed=1;
#		wait;
#	}
#	if(dram2) {
#$failed=1;
#wait;
#}
#if(shift) {
#$failed=1;
#wait;
#}

	# illegal i3 e1 e2
	
# Duart External tests turned off and internal tests turned on  rwaits 9/23/92
# originally -i0, -i1 on -i2 off, -e0 off -e2, -e3 on
	echo "----------------------------------------------------\n"
	$tmp=duart -i0;
	
	if($tmp) {
		$failed=1;
		wait;
	}
	
	$tmp= duart -i1;
	
	if($tmp) {
		$failed=1;
		wait;
	}
	
	
#	echo "----------------------------------------------------\n"
	
#loop back needed, fails otherwise
#        $tmp= duart -e0;
#	if($tmp) {
#		$failed=1;
#		wait;
#		}

#	echo "----------------------------------------------------\n"
#	$tmp= duart -e1;
#	if ($tmp) {
#		$failed=1;
#		wait;
#	}
	echo "----------------------------------------------------\n"

	$tmp = led 0;
	
	if($tmp){
		$failed=1;
		wait;
	}
	
	$tmp = led 1;
	
	if($tmp){
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	
	if(parity){
		$failed=1;
		wait;
	}
	
	echo "----------------------------------------------------\n"
	$status1 = scsi;
	if($status1) {
		$failed=1;
		wait;
	}
	
#	echo "----------------------------------------------------\n"
#	if(!timer){
#		$failed=1;
#		wait;
#	}
	
	echo "----------------------------------------------------\n"
	if ($skip_eisa != 1) {
	    if(eisa){
		$failed=1;
		wait;
	    }
	}
	else {
	    echo "Skipping EIU/EISA interface test"
	}

	echo "----------------------------------------------------\n"
	if(print3){
		$failed=1;
		wait;
	}

}	

#End ip

ip24 {
	$failed =0;
	cpusc;
	ip;
	echo "Running Audio Tests"
	if(audio) {
		$failed=1;
		wait;
	}
	if($failed) {
		echo "FAILURES DETECTED IN IP24\n"
		$ip24_failed=1;
		}
	else
		{
		$ip24_failed=0;
		echo "ALL TESTS IN IP24 PASSED\n";
		boot dksc(0,1,0)unix;
	}
	fi
}


ip24jitter {    
	forever { 
		chg_volt 0; 
		echo"**"
		chg_volt 1;
		echo"--"
		};
}



ip24va {
	$failed =0;
	echo "\n*****************************\n"
	echo "Voltage changed to 4.8V\n"
	echo "\n*****************************\n"
	chg_volt 0;
	cpusc;
	ip;
 	echo "Parallel Port Loopback Test\n"	
	if(print3)  {
		echo "Parallel Port Loopback Failed\n"		
		$failed=1;
		wait;
	}	
	echo "----------------------------------------------------\n"
	echo "Audio Test \n"
	if(audio) {
		$failed =1;
		wait;
	}
	echo "\n*****************************\n"
	echo "Voltage changed to 5.25V\n"
	echo "\n*****************************\n"
	chg_volt 2;
	cpusc;
	ip;
	echo "----------------------------------------------------\n"
 	echo "Parallel Port Loopback Test\n"	
	if(print3)  {
		echo "Parallel Port Loopback Failed\n"		
		$failed=1;
		wait;
	}	
	if(audio) {
		$failed =1;
		wait;
	}
	echo "\n*****************************\n"
	echo "Voltage changed to 5.0 V\n"
	echo "\n*****************************\n"
	chg_volt 1;
	echo "----------------------------------------------------\n"
	if($failed) {
		echo "FAILURES DETECTED\n"
		$ip24_failed=1;
		}
	else
		{
		$ip24_failed=0;
		echo "TESTS IN IP24 and CPU PASSED\n";
	}
	fi
}

a2testva {
	chg_volt 0;
	a2test;
	chg_volt 2;
	a2test;
	chg_volt 1;
}




# Initialize variables used by ng1.
$err=0
$ng1failed=0
$ng1_rex3_failed=0
$ng1_bt445_failed=0
$ng1_cmap_failed=0
$ng1_xmap9_failed=0
$ng1_vc2_failed=0
$ng1_vram_failed=0
$ng1_cid_failed=0
$ng1_dma_failed=0
$ng1_dma_result=-1

# Start of NG1 diagnostics 

ng1 {
	$ng1failed=0;
	$err=0;
	buffon

	ng1_probe;
	ng1_setboard 0;
# Test Rex3
	if(ng1_rexregs) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_rex3_failed = 1;
		$err=1;
	}
if ($err==0) {
# Test bt445
	if(ng1_bt445test) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_bt445_failed =1;
		$err=1;
	}
    }
if ($err==0) {
# Test cmap
	if(ng1_cmaptest) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_cmap_failed = 1;
		$err=1;
	}
    }
if ($err==0) {
# Test Xmap9
	if(ng1_xmap9test) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_xmap9_failed = 1;
		$err=1;
	}
    }
if ($err==0) {
# Test VC2 
	if(ng1_vc2test) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_vc2_failed = 1;
		$err=1;
	}
    }
if ($err==0) {
# Test VRAM
	if(ng1_vram) {
		 if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_vram_failed = 1;
		$err=1;
	}
    }
if ($err==0) {
# Test CID
	if(ng1_cid) {
		if (!$report) {
			emfail 2;
			wait;
			exit;
		}
		$ng1_cid_failed = 1;
		$err=1;
	}
    }
if ($err==0) {
# Change Bus width to 64 & run DMA tests
        ng1_setvisual 0;
	ng1_color 0;
	ng1_block 0 0 105 105;
        ng1_buswidth 64;
        ng1_rwpacked 1;
        ng1_rwdouble 1;
        $ng1_dma_result=ng1_dmatest 0 0 100 100;
        if($ng1_dma_result == -1) {
                if (!$report) {
                        emfail 2;
			wait;
                        exit;
                }
                $ng1_dma_failed = 1;
                $err=1;
        }
        ng1_buswidth 32;
    }
	resetcons
	buffoff
if ($err) {
	echo "\nFAILURE SYMPTOM:"

	if($ng1_rex3_failed) {
		echo "		Rex3 Register r/w tests failed.";
		$ng1failed = 1;
	}
	if($ng1_cmap_failed) {
		echo "		Cmap r/w tests failed.";
		$ng1failed = 1;
	}
	if($ng1_xmap9_failed) {
		echo "		Xmap9 r/w tests failed.";
		$ng1failed = 1;
	}
	if($ng1_vc2_failed) {
		echo "		VC2 r/w tests failed.";
		$ng1failed = 1;
	}
	if($ng1_vram_failed) {
		echo "		VRAM test failed.";
		$ng1failed = 1;
	}
	if($ng1_cid_failed) {
		echo "		CID test failed.";
		$ng1failed = 1;
	}
	if($ng1_dma_failed) {
		echo "		DMA tests failed.";
		$ng1failed = 1;
	}
   } else {
	echo "REX3, CMAP, XMAP9, VC2, VRAM, CID & DMA Test Passed.\n"
 	}
	
   if (!$ng1failed) echo "NG1 graphics board tests passed"
   fi
   echo "\n *****************END OF THE TEST *****************"
}

# END OF NG1 SUPPORT
# Start of GR2 diagnostics 
# Initialize variables used by GR2.
$stride_failed=0 ;
$zb_failed=0 ;
$gr2_failed=0;
$chkbt457_failed=0;
$bp_failed=0;
$shramre3_failed=0;
$cpushram_failed=0;
$cpure3_failed=0;
$ctxsw_failed=0;
$vdma_failed=0;
$quad_failed=0;
$fourquad_failed=0;
$mon=0;

$test_xmap_failed = 0;
$test_xmap_clut_failed = 0;

gr2_vhwinit {
	gr2_videoclk 0x47
	if ($mon ==1 ) gr2_initclock 0x132;
	else gr2_initclock 0x107;
	fi
	gr2_wrconfig 0x0
	gr2_delay 3
	gr2_wrconfig 0x1
	gr2_vinitdac
}

gr2_initre {
	$a = gr2_getGR2ver;
	if ($a < 4) gr2_wrfifo 0 0;
	else if ($a == 4) gr2_wrfifo 0 1;
	else gr2_wrfifo 0 2;
}

gr2_initsys {
	gr2_reset
	gr2_vhwinit
	$mon = gr2_getMonType;
	if ($mon == 1) gr2_initvc1 4;
	else gr2_initvc1 20;
	fi
	gr2_xcol
	gr2_inithq
	gr2_load_ucode ge
	gr2_load_ucode hq
	gr2_unstall
	gr2_initre
}

clear {
	gr2_wrfifo 35 0
	gr2_wrfifo 6 0
}
gr2_quad {
	gr2_wrfifo 33 0
}

gr2_fourquad {
	gr2_wrfifo 34 0
}

test_xmap {
	gr2_initsys;
	$a=gr2_txmap;
	return $a;
}

test_xmap_clut {
	gr2_initsys;
	$a=gr2_txmap_clut;
	return $a;
}

gr2_vdma {
	gr2_initsys;
	$b=gr2_cachefdma 32 1;
	$b=$b+gr2_cachefdma 256 1;
	$b=$b+gr2_cachefdma 512 1;
	$b=$b+gr2_cachefdma 128 1;
	$b=$b+gr2_yzoomdma ;
	$b=$b+gr2_yzoomdma 32 32;
	$b=$b+gr2_yzoomdma 128 128;
	$b=$b+gr2_yzoomdma 256 256;
	$b=$b+gr2_stridedma;
	$b=$b+gr2_stridedma 32 32;
	$b=$b+gr2_stridedma 256 1;
	$b=$b+gr2_stridedma 512 0;

	return $b;
}

gr4 {
	$vc1_sram_failed=0;
	$tram0_failed=0;
	$tram1_failed=0;
	$tram2_failed=0;
	$tram3_failed=0;
	$tram4_failed=0;
	$tram5_failed=0;
	$tram6_failed=0;
	$tram7_failed=0;
	$tram8_failed=0;
	$tram9_failed=0;
	$tram10_failed=0;
	$hq2test_failed=0;
	$shram_failed=0;
	$ram12_failed=0;
	$seedrom_failed=0;
	$sqrom_failed=0;
	$gebus_failed=0;
	$gefloat_failed=0;

	$zb_failed=0;
	$err=0;

led 0;

# lower report level so the buffer doesn't get full
 report=3;
	gr2_reset;
	buffon

# HQ2 internal register 19  must read 0xdeadbeef
	gr2_rdhqint 19;

# Test ram 0 at Ge7 at 0
	$tmp = gr2_tram 0;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
		wait;
        	exit;
    	    }	
	    $tram0_failed = 1;
	    $err=1;
	  }
# Test ram 0 at Ge7 at 1
	$tmp = gr2_tram 1;
	if ($tmp){
	    if (!$report) {
        	emfail 2;
		wait;
        	exit;
    	    }	
	    $tram1_failed = $tmp;
	    $err=1;
	}
# Test ram 0 at Ge7 at 2
       $tmp = gr2_tram 2;
       if ($tmp){
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram2_failed = 1;
	    $err=1;
	}
# Test ram 0 at Ge7 at 3
	$tmp = gr2_tram 3 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram3_failed = 1;
	    $err=1;
	}

# Test ram 0 at Ge7 at 4
	$tmp = gr2_tram 4 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram4_failed = 1;
	    $err=1;
	}
# Test ram 0 at Ge7 at 5
	$tmp = gr2_tram 5 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram5_failed = 1;
	    $err=1;
	}
# Test ram 0 at Ge7 at 6
	$tmp = gr2_tram 6 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram6_failed = 1;
	    $err=1;
	}
# Test ram 0 at Ge7 at 7
	$tmp = gr2_tram 7 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram7_failed = 1;
	    $err=1;
	}

if ($err==0) {
led 1;
gr2_reset;
resetcons;
buffoff;
delay;
echo "\nTesting SHRAM and HQ2 ucode....\n";
buffon;
report=4;

# Test shram  
	$tmp = gr2_tram 8 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram8_failed = 1;
	    $err=1;
	}
    }
led 0;

# Test Hq2uram
if ($err==0) {
	$tmp = gr2_tram 9 ;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram9_failed = $tmp;
	    $err=1;
	}
    }

if ($err==0) {
led 1;
gr2_initsys;
resetcons;
buffoff;
echo "PASSED Shram and HQ2 ucode.\n";
delay;
echo "Testing GE7 ucode RAM....\n";
delay;
delay;
buffon;
gr2_reset;

# Test ge7uram (don't run gr2_initsys before this test! Causes exception)
	$tmp = gr2_tram 10;
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $tram10_failed = $tmp;
	    $err=1;
	 }
    }

if ($err==0) {
led 1;
gr2_initsys;
resetcons;
buffoff;
delay;
delay;
delay;
buffon;
# must do initsys before hq2test
gr2_initsys;

# Test HQ2
	if(gr2_hq2test) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $hq2test_failed = 1;
	    $err=1;
	}
    }

if ($err==0) {
led 0;
gr2_initsys;
resetcons;
buffoff;
delay;
delay;
delay;
buffon;
gr2_initsys;

# Test shareram using Ucode
	if (gr2_shram) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $shram_failed = 1;
	    $err=1;
	}
    }

if ($err==0) {
led 1;
resetcons;
buffoff;
delay;
delay;
delay;
buffon;
gr2_initsys;

# Test internal GE7 ram
	if (gr2_ram12) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $ram12_failed =1;
	    $err=1;
	}
    }
led 0;
# Test seedrom 
if ($err==0) {
	if (gr2_seedrom) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $seedrom_failed =1;
	    $err=1;
	}
    }
led 1;
# Test the squaroot rom
if ($err==0) {
	if (gr2_sqrom) { 
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $sqrom_failed =1;
	    $err=1;
	}
	gr2_initsys ;
    }
led 0;
# Test Ge 7 bus
if ($err==0) {
	if (gr2_gebus) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $gebus_failed =1;
	    $err=1;
	}
    }
led 1;
# Test ge floating point unit
if ($err==0) {
	if (gr2_gefloat) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $gefloat_failed = 1;
	    $err=1;
	}
    }

if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nTesting Zbuffer RAM....\n"; 
delay;
delay;
delay;
buffon;
gr2_initsys;

# Test Zbuffer
	$tmp=gr2_zb
	if($tmp)  {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $zb_failed =1;
	    $err=1;
	}
    }

if ($err==1) {
resetcons
buffoff
echo "\nFAILURE SYMPTOM:\n"
if ($vc1_sram_failed)  echo "VC1 SRAM  test failed"; 
if ($tram0_failed)  echo "Ram 0 at GE7 - 0 failed "; 
if ($tram1_failed)  echo "Ram 0 at GE7 - 1 failed "; 
if ($tram2_failed)  echo "Ram 0 at GE7 - 2 failed "; 
if ($tram3_failed)  echo "Ram 0 at GE7 - 3 failed "; 
if ($tram4_failed)  echo "Ram 0 at GE7 - 4 failed "; 
if ($tram5_failed)  echo "Ram 0 at GE7 - 5 failed "; 
if ($tram6_failed)  echo "Ram 0 at GE7 - 6 failed "; 
if ($tram7_failed)  echo "Ram 0 at GE7 - 7 failed "; 
if ($tram8_failed)  echo "Share ram test failed "; 
if ($tram9_failed)  echo "Hq2uram  ram failed "; 
if ($tram10_failed)  echo "ge7uram failed " ;
if ($hq2test_failed) echo "HQ2 Test failed ";
if ($shram_failed) echo "shram test failed";
if ($ram12_failed)  echo "GE7 ram 1/2 test failed "; 
if ($seedrom_failed)  echo "seedrom test failed ";
if ($sqrom_failed)  echo "squaroot teste failed";
if ($gebus_failed)  echo "gebus test failed";
if ($gefloat_failed)  echo "gefloat test failed";
if ($zb_failed)  echo "Zbuffer test failed";

echo "\n*********  TEST ABORTED  ************\n"

$gr2_failed = 1;

    } else {
    resetcons
    buffoff
    echo "\nIndy GR4 tests passed\n"
    }

report=4;
echo "********* END OF GR4 TESTS *********\n"

return $err;

} # END OF GR4 SCRIPT 

vb3 {  # BEGINNING OF VB3 SCRIPT 

        $vc1_sram_failed = 0;

	$chkbt457_failed=0;
	$shramre3_failed=0;
	$cpushram_failed=0;

	$cpure3_failed=0;
	$vdma_failed=0;
	$ctxsw_failed=0;
	$bp_failed=0;
	$stride_failed=0 ;
	$test_xmap_failed=0;
	$test_xmap_clut_failed=0;
	$quad_failed=0;
	$fourquad_failed=0;
	$gr2_failed=0;
	$err=0;

	gr2_reset;
	resetcons
	buffon

# Test VC1 SRAM 
	gr2_vhwinit
	if (gr2_vc1_sram) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $vc1_sram_failed = 1;
	    $err=1
	    resetcons
            buffoff
	}

if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed VC1 SRAM test...\n"; 
delay;
delay;
echo "Testing bt457 RAMDACs...\n"
delay;
buffon;
gr2_initsys;

# Test bt457 
	if (gr2_chkbt457) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $chkbt457_failed = 1;
	    $err=1;
	    resetcons
            buffoff
	}
}

if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed bt457 tests.\n"; 
delay;
delay;
echo "\nTesting Share ram-RE3 DMA....\n"; 
delay;
buffon;
gr2_initsys;
# Test Shared ram-RE3 DMA 
	gr2_initsys
	$tmp = gr2_shramre3
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $shramre3_failed =1;
	    $err=1;
	    resetcons
            buffoff
	}
}
if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed Share ram-RE3 DMA test.\n"; 
delay;
delay;
echo "\nTesting CPU-share RAM DMA...\n"; 
delay;
buffon;
gr2_initsys;
# Test DMA between host and GE7 shared ram
	clear
	$tmp = gr2_cpushram
	if ($tmp)  {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $cpushram_failed =1;
	    $err=1;
	    resetcons
            buffoff
	}
}
if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed CPU-share RAM test.\n"; 
delay;
delay;
echo "\nTesting cpure3 DMA, vdma, context switch, quad drawing....\n"; 
delay;
buffon;
gr2_initsys;
# Test DMA between host and and RE3
	$tmp = gr2_cpure3
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $cpure3_failed =1;
	    $err=1;
	    resetcons
	    buffoff
	}
}
if ($err==0) 
{
#buffoff
#echo "testing vdma"
#buffon
# Test VDMA controller
	if(gr2_vdma) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }
	    $vdma_failed =1;
	    $err=1;
	    resetcons
            buffoff
	}
}
if ($err==0)
{
#buffoff
#echo "testing ctxsw"
#buffon
# Test GE7 context switching
	if(gr2_ctxsw) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $ctxsw_failed =1;
	    $err=1;
	    resetcons
            buffoff
	}
	clear;
}
if ($err==0) 
{
# Test quad drawing
	$tmp = gr2_quad
	if ($tmp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $quad_failed =1;
	    $err=1;
	    resetcons
            buffoff
	}
}
if ($err==0) 
{
	$tmp = gr2_fourquad
	if ($tmp){
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $fourquad_failed = 1;
	    $err=1;
	    resetcons
            buffoff
	}
	clear;
}
if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed cpure3 DMA, vdma, context switch, quad drawing tests.\n"; 
delay;
delay;
echo "\nStarting bitplane and stride DMA testing....\n"; 
delay;
buffon;
gr2_initsys;
# Test bitplane VM2
	if (gr2_bp) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $bp_failed = 1;
	    $err=1;
	    resetcons
            buffoff
	}
    }

if ($err==0) 
    {
# Test stridedma between shram and re3
	resetcons
	buffon
	gr2_initsys
	$tmp = gr2_stride
	if ($tmp)  {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $stride_failed =1 ;
	    $err=1;
	    resetcons
            buffoff
	}
    }

if ($err==0) {
gr2_initsys;
resetcons;
buffoff;
echo "\nPassed Bitplane and stride DMA tests.\n"; 
delay;
delay;
echo "\nTesting XMAP....\n"; 
delay;
buffon;
gr2_initsys;
# Test Xmap 
	if (test_xmap) {
	    if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
    	   $test_xmap_failed =1;
	   $err=1;
	   resetcons
           buffoff
	}
    }

if ($err==0) 
    {
#Test Xmap CLUT 
	if (test_xmap_clut) {
	   if (!$report) {
        	emfail 2;
        	wait;
        	exit;
    	    }	
	    $test_xmap_clut_failed =1;
	    $err=1;
	    resetcons
            buffoff
         }
    }

if ($err>0) {
echo "\nFAILURE SYMPTOM:\n"
if ($chkbt457_failed) echo "Bt457 test failed";
if ($shramre3_failed) echo "shramre3 test failed"
if ($cpushram_failed) echo "CPU shram test failed";
if ($cpure3_failed) echo "cpure3 test failed ";
if ($ctxsw_failed) echo "context switching test failed ";
if ($vdma_failed) echo "vdma controller test failed ";
if ($quad_failed) echo "quad test failed";
if ($fourquad_failed) echo "fourquad test failed";

if ($bp_failed)  echo "bitplane test failed";
if ($stride_failed)  echo "stride test failed"; 
if ($zb_failed)  echo "Zbuffer test failed";
if ($test_xmap_failed) echo "test_xmap test failed";
if ($test_xmap_clut_failed)  echo "test_xmap_clut test failed";

echo "\n*********  TEST ABORTED  ************"
$gr2_failed=1;
} else {
   resetcons 
   buffoff
   echo "\nVB3 Test Passed.\n"
   echo "***************** END OF VB3 TEST *****************"
   }
return $err;
}

gr2 {
	if (gr4==0) {
		if (vb3==0) {
		echo "\n******* PASSED GR4 and VB3 TESTS *********";
		}
          } 
     }


# END OF GR2 SUPPORT

ng1va {
	echo "\n*****************************\n"
	echo "Voltage changed to 4.75V\n"
	echo "\n*****************************\n"
	$ng1vafailed = 0;
	chg_volt 0;
	ng1;
	if ($ng1failed) {
			$ng1vafailed = 1;
			wait;
	} else {
		echo "\n*****************************\n"
		echo "Voltage changed to 5.25V\n"
		echo "\n*****************************\n"
		chg_volt 2;
		ng1;
        	if ($ng1failed) {
                        $ng1vafailed = 1;
			wait;
                        }
		}
	echo "\n*****************************\n"
	echo "Voltage set back to 5.0V\n"
	echo "\n*****************************\n"
	chg_volt 1;
}

# END OF NG1VA
# START OF GR2VA
gr2va {

	echo "\n*****************************\n"
	echo "Voltage changed to 4.75V\n"
	echo "\n*****************************\n"
	$gr2vafailed = 0;
	chg_volt 0;
	gr2;
	if ($gr2_failed) {
			$gr2vafailed = 1;
			wait;
			}
        else {
		echo "\n*****************************\n"
		echo "Voltage changed to 5.25V\n"
		echo "\n*****************************\n"
		chg_volt 2;
		gr2;
        	if ($gr2_failed) {
                        $gr2vafailed = 1;
			wait;
                        }
	}
	echo "\n*****************************\n"
	echo "Voltage set back to 5.0V\n"
	echo "\n*****************************\n"
	chg_volt 1;
}


#Start of Galileo diagnostics
CheckSlot {
        $tmp = gr2_setboard 0;
        if ($tmp) {
		echo "GR2 Board Found in slot 0."
		return 0
        }

        $tmp = gr2_setboard 1;
        if ($tmp) {
		echo "GR2 Board Found in slot 1."
		return 0
        }

	$tmp = ng1_setboard 0;
	if ($tmp) {
		echo "NG1 Board Found in slot 0."
		return 0
	}

	$tmp = ng1_setboard 1;
	if ($tmp) {
		echo "NG1 Board Found in slot 1."
		return 0
	}
}

cc1 {
	CheckSlot;
	echo "CC1 Frame Buffer Test";
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "CC1 Memory Test";
	$status = cc1_mem;
	if ($status)  {
		wait;
	}
	echo "CC1 (DMA MODE)Memory Test";
$status = cc1_dma;
        if ($status) {

		wait;
	}
}

ab1_red {
	CheckSlot;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "AB1 Red Channel Memory Test ";
	ab1_rmem;
}

ab1_blue {
	CheckSlot;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "AB1 Blue Channel Memory Test ";
	ab1_bmem;
}

ab1_green {
	CheckSlot;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "AB1 Green Channel Memory Test ";
	ab1_gmem;
}

ab1 {
	CheckSlot;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "AB1 Memory Test (Red, Green, Blue)";
	status = ab1_mem;
	if ($status)  {
		wait;
	}
}

kva {
	CheckSlot;
    	echo "Voltage changed to 4.75 V\n"
    	chg_volt 0;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "Test Display Control Bus";
	$status = ev1_dcb;
	if ($status)
		wait;
	echo "CC1 Memory Test";
	cc1;
	echo "AB1 Memory Test (Red, Green, Blue)";
	ab1;

    	echo "Voltage changed to 5.25 V\n"
    	chg_volt 2;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "Test Display Control Bus";
	$status = ev1_dcb;
	if ($status)
		wait;
	echo "CC1 Memory Test";
	cc1;
	echo "AB1 Memory Test (Red, Green, Blue)";
	ab1;

    	echo "Voltage changed to 5.0 V\n"
    	chg_volt 1;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	} 
	echo "Galileo Board Initialized Properly"
	echo "Test Display Control Bus";
	$status = ev1_dcb;
	if ($status)
		wait;
	echo "CC1 Memory Test";
	cc1;
	echo "AB1 Memory Test (Red, Green, Blue)";
	ab1;
	unix;
}
kv {
	CheckSlot;
	$status =ev1_init ;
	if ($status)  {
		echo " Galileo Board Initialization FAILED"
		return ($status);
	}
	echo "Galileo Board Initialized Properly"
	echo "Test Display Control Bus";
	$status = ev1_dcb;
	if ($status) {
		wait;
	}
	echo "CC1 Memory Test";
	cc1;
	echo "AB1 Memory Test (Red, Green, Blue)";
	ab1;
}

#END of Galileo diagnostics

c1 {	echo "-------------------";
	echo "Combo 1:  IP24 only";
	echo "-------------------";
	$failed = 0;
	chg_volt 0;
	echo "Testing at 4.75 Volts---"
	ip;
   	if (!$failed) {	
		if (audio){
			echo "AUDIO TEST FAILED";
			$failed = 1;
			wait;
			}
		}

	if (!failed) {
		chg_volt 2;
		echo "Testing at 5.25 Volts---"
		ip;
		}

	if (!$failed) {
		if (audio){
			echo "AUDIO TEST FAILED";
			$failed = 1;
			wait;
			}
		}

	chg_volt 1;
	if ($failed) {
		echo "IP24 BOARD FAILED"
		} else	{
				unix;	
			}
}

c2  {   echo "------------------------";
	echo "Combo 2:  Graphics only";
	echo "------------------------";
        $express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1va;
			if ($ng1vafailed) {
					echo "NG1 BOARD FAILED"
					wait;
			  		  }
			else 
					  {
					unix;
				          }
	                fi
	               }

	if ($express) {
		        gr2va;
			if ($gr2vafailed) {
			                echo "GR4 BOARD FAILED"
					wait;
			                  }
			else 
			                  {
		                	unix;
			                  }
	                 fi
                        }				
}

c3  {
	echo "------------------";
	echo "Combo 3:  CPU only";
	echo "------------------";
	$c3failed = 0;
	$cpufailed = 0;
	chg_volt 0;
	echo "Testing at 4.75 Volts---"
	cpusc;
	if (!$cpufailed) {
		chg_volt 2;
		echo "Testing at 5.25 Volts---"
		cpusc;
		}

	chg_volt 1;

	if ($cpufailed) {
			echo "CPU TEST FAILED"
			$c3failed = 1;
			$failed = 1;
			wait;
			}

	if (!$c3failed)  {
			unix;
			}
}


c4 {
	echo "------------------";
	echo "Combo 4:  IP24+CPU";
	echo "------------------";
	chg_volt 0;
	echo "Testing at 4.75 Volts---"
	$failed = 0;
	$cpufailed = 0;
	$c4failed = 0 ;
	ip;
	if (!$failed) {
            	if (audio) {
                	echo "AUDIO TEST FAILED";
                	$failed = 1;
			$c4failed = 1;	
			wait;
                	}
		}

	if (!$failed) {
		cpusc;
		}
	if ($cpufailed) $failed = 1;

	if (!$failed) {
	     	chg_volt 2;
		echo "Testing at 5.25 Volts---"
		ip;
		}

        if (!$failed) {
            		if (audio) {
                		echo "AUDIO TEST FAILED";
                		$failed = 1;
				$c4failed = 1;	
				wait;
                		}
    			}

	if (!$failed) {
		cpusc;
		}
	if ($cpufailed) $failed = 1;

	if ($failed) {
       			echo "CPU BOARD FAILED";
			$c4failed = 1;  
			wait;
        		}
	
	if (!$c4failed ) {
			echo "CPU AND IP24 BOARDS PASSED";
			chg_volt 1;
			unix;
			}
}

c5  {
	echo "--------------------------";
	echo "Combo 5:  IP24 + Graphics";
	echo "--------------------------";
	$failed = 0;
	$c5failed = 0;
	chg_volt 0;
	echo "Testing at 4.75 Volts---"
	ip;
	if (!$failed) { 
           	   if (audio) {
                		echo "AUDIO TEST FAILED";
				$failed = 1;
				wait;
            			}
		}

	if (!failed) {
	       chg_volt 2;
	       echo "Testing at 5.25 Volts---"
	       ip;
	       }

        if (!$failed) {
           	   if (audio) {
                		echo "AUDIO TEST FAILED";
				$failed = 1;
				wait;
            			}
		 }

	chg_volt 1;

   if (!$failed) {
	$express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1va;
	  
			if ($ng1failed) {
					echo "NG1 BOARD FAILED"
					$c5failed = 1;
					wait;
					 }
			}
	
	if ($express) {
		        gr2va;
	
			if ($gr2_failed) {
				         echo "GR4 BOARD FAILED"
				         $c5failed = 1;
					 wait;
					  }
			}
	}

        if ($failed) {
                echo "IP24 TEST FAILED";
       		$c5failed = 1;  
		wait;
        } 

	if (!$c5failed) {
			unix;
			}
	fi
}

c6  {
	echo "-------------------------";
	echo "Combo 6:  CPU + Graphics";
	echo "-------------------------";
	$cpufailed = 0;
	$failed = 0;
	$c5failed = 0;
	chg_volt 0;
	echo "Testing at 4.75 Volts---"
	cpusc;
	if (!$cpufailed) {
		chg_volt 2;
		echo "Testing at 5.25 Volts---"
		cpusc;
		}

	chg_volt 1;

   	if (!$cpufailed) {
	$express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1va;
	  
			if ($ng1failed) {
					echo "NG1 BOARD FAILED"
					$c5failed = 1;
					wait;
					  }
			}
	
	if ($express) {
		        gr2va;
	
			if ($gr2_failed) {
			                echo "GR4 BOARD FAILED"
			                $c5failed = 1;
					wait;
					  }
			}
	}

	if ($cpufailed) {
		echo "CPU BOARD FAILED";
		$c5failed = 1;	
		$failed = 1;
		wait;
		}

	if (!$c5failed) {
			unix;
			}
}

c7  {
	echo "-------------";
	echo "Combo 7:	ALL";
	echo "-------------";
	$c7failed = 0;	
	$failed = 0;
	$cpufailed = 0;

	$express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1va;
	  
			if ($ng1vafailed) {
					echo "NG1 BOARD FAILED"
					$c7failed = 1;
					wait;
					  }
			}
	
	if ($express) {
		        gr2va;
	
			if ($gr2vafailed) {
			                echo "GR4 BOARD FAILED"
			                $c7failed = 1;
					wait;
					  }
			}

	if (!$c7failed) {
		ip24va;
		if ($ip24_failed)  {
			echo "IP24 TESTS FAILED"
			$c7failed = 1;
			wait;
			}
		fi
	 	}

	if (!$c7failed)  {

				unix;

			} 
}

c8  {
	echo "------------------------------------";
	echo "Combo 8:	Graphics @5.25 (Boots Unix) ";
	echo "------------------------------------";
	chg_volt 2;
	echo "Testing at 5.25 Volts---"
	$ng1vafailed = 0;
	$gr2vafailed = 0;
	
 	$express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1;
	  
			if ($ng1failed) {
					echo "NG1 BOARD FAILED"
					wait;
			  		} else {
					chg_volt 1
					unix;
				        }
	                fi
	               }
	
	if ($express) {
		        gr2;
	
			if ($gr2_failed) {
				         echo "GR4 BOARD FAILED"
					 wait;
			                  }
			else 
			                  {
			                  chg_volt 1
					  unix;
			                  }
	                fi
                       }

chg_volt 1;
}

c9  {
	echo "-----------------------------------------------";
	echo "Combo 9:	Graphics @4.75 (Does not boot Unix) ";
	echo "-----------------------------------------------";
	chg_volt 0;
	echo "Testing at 4.8 Volts---"
	$ng1vafailed = 0;
	$gr2vafailed = 0;
	$express = gr2_probe;
        $newport=ng1_probe;
	if ($newport) {
			ng1;
	  
			if ($ng1failed) {
					echo "NG1 BOARD FAILED"
					$ng1vafailed = 1;
					wait;
					}
			}
	fi
	
	if ($express) {
		        gr2;
	
			if ($gr2_failed) {
				                echo "GR4 BOARD FAILED"
				                $gr2vafailed = 1;
						wait;
					  }
			}
 	fi
	chg_volt 1;

}
c10 {
	echo "---------------------------";
	echo "Combo 10: ISDN Connect Test";
	echo "---------------------------";
	if( isdn_con) {
		$failed =1;
		wait;
	}
	else {
		unix;
	}
}

scsimezz {
	echo "--------------";
	echo "SCSI MEZZ Test";
	echo "--------------";
	$mezzfailed = 0
	$tmp = hpc3 1
	if( $tmp) {
		$mezzfailed =1;
		wait;
	}
	if (wd95a) {
		$mezzfailed =1;
		wait;
	}
	
}
c11 {
	scsimezz;
	if (!$mezzfailed) {
		unix; 
	}
}


pf {
    $pffailed = 0;
    echo "Pixel Formatter host to shared ram test"
    if (pf_hst_ram) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter 68302 register test"
    if (pf_regs) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter 68302 ROM checksum test"
    if (pf_rom_chksum) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter 68302 address line test"
    if (pf_adr_line) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter shared Memory test"
    if (pf_shrd_mem) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter 68302 internal ram test"
    if (pf_intrn_ram) {
        $pffailed = 1;
	wait;
    }
    echo "Pixel Formatter unshared Memory test"
    if (pf_unshrd_mem) {
        $pffailed = 1;
	wait;
    }
}

pf_boot {
	pf;
	if (!$pffailed) {
		unix;
	}
}
	
s1  {
	$skipvino=1;
	$failed=0;	
	$s1failed = 0;	
	$pffailed = 0;
	$cpufailed = 0;
	cpusc;
	if ($cpufailed) {
			echo "CPU BOARD FAILED";
			$s1failed = 1;
			wait;
	}	
	ip;
	memory;
	if ($failed) {
			$s1failed = 1;
			wait;
	}
	if (is_symphony) {
		pf;
		if ($pffailed) {
			$s1failed = 1;
			wait;
		}
	}
	if (!$s1failed)  {
				unix;
	} 
	else {
		echo "s1 FAILED"
		wait;
	}
	fi

}


$skip_eisa=1;
menu;



