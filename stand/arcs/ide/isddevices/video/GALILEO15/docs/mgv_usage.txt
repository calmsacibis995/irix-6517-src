The following is the list of commands available thru IDE
to test Impact Video Board

=================== IMPACT VIDEO IDE COMMANDS ======================
mg_setboard(0)      mg_reset           mgv_init          mgv_galregl1
mgv_abdcb           mgv_abaddrbus      mgv_abdatabus     mgv_abpatrn
mgv_ccdcb           mgv_ccaddrbus      mgv_ccdatabus     mgv_ccpatrn
mgv_vgiregpatrn     mgv_vgiregwalk     mgv_vgiint        mgv_vgidma
mgv_voutl0          mgv_voutl1         mgv_vgivoutl0
mgv_extvin          mgv_vinl1
mgv_cctovgi         mgv_cctovgix       mgv_readcc        mgv_gpitrig
====================================================================
mgv_initall         mgv_aball          mgv_ccall
mgv_vgiregall       mgv_vgiintall      mgv_vgidmaall     mgv_vgiall
mgv_voutall         mgv_vinall         mgv_loopbackall
mgv_all
==================================================

Description of Commands and How to Use them
===========================================
   Following are individual tests that can be run:

mg_setboard 0
-------------
	Probes the Impact Graphics Boards

mg_reset
--------
	Resets the Impact Graphics Board and loads the default timing table

mgv_init
--------
	Initializes the Impact Video Board and all major ASICs

mgv_galregl1
------------
	Tests all indirect G1.5 registers. This will consist of writing
	and confirming (reading) each of six sets of data
	(all 1s, all 0s, alt10, alt01, walk1s, walk 0s) to each register;

mgv_abdcb
---------
	Tests the DCBus to the AB1. The AB1 is tested by using a walking 1 
	pattern on the address regsiter.

mgv_abaddrbus
-------------
	This tests the specified All (R, G, B and A) AB1 DRAM's address buses. 
	Usage: mgv_abaddrbus [-r] [-g] [-b] [-a]

mgv_abdatabus
-------------
	This tests the specified All (R, G, B and A) AB1 DRAM's data buses. 
	Usage: mgv_abdatabus [-r] [-g] [-b] [-a]

mgv_abpatrn
-----------
	This tests the specified All (R, G, B and A) AB1 DRAM's using patterns
	Usage: mgv_abpatrn [-r] [-g] [-b] [-a]

mgv_ccdcb
---------
	Tests the DCBus to the CC1. The CC1 is tested by using a walking 1 
	pattern on the address regsiter.

mgv_ccaddrbus
-------------
	This test writes all four framebuffers of the CC1 using an incrementing
	pattern.  The pattern is a 32 bit word comprising the line number in 
	the upper 16 bits and the pixel number in the lower 16 bits.  Once all 
	four buffers are written, they are read back and verified.

mgv_ccdatabus
-------------
	This test is for the databus into the CC1 framebuffer. It writes a 
	walking one pattern into a single line to test for any shorts/opens.  
	Once the write is done a read is performed and the data is verified.

mgv_ccpatrn
-----------
	This test verifies that each cell of the framebuffer memory can hold 
	a 0 or a 1.  Each field is written and verified with 3 different 
	data values: 0x55550000, 0xAAAA5555, 0x0000AAAA

mgv_vgiregpatrn
---------------
	Tests the VGI1 Registers with a pattern.

mgv_vgiregwalk
--------------
	Tests the VGI1 Registers with a walking 1/0 pattern.

mgv_vgiint
----------
	Tests the interrupt mechanism of VGI1. 
	Usage: mgv_vgiint -c [1|2] -i[0x1|0x4|0x8|0x10]
		 -c --> channel [1|2]
		 -i --> interrupt type [0x1|0x4|0x8|0x10]
			0x1  - Vertical Interrupt
			0x4  - Bad Vertical Length
			0x8  - Bad FIFO
			0x10 - Unused Last Descriptor

mgv_vgidma
----------
	Tests the VGI1 DMA Read (Memory to Video) and 
	VGI1 DMA Write (Video to Memory)
	Usage:mgv_vgidma -c [1|2] -o [1|2|3] -t [1|2|3|4] -v [0|1|2|3]
			 -f [1|2] -z [0|#]
		-c --> channel 1[2]
		-o --> operation 1-mem2vid 2-vid2mem 3-both
		-t --> TV standard 0-NTSC601 1-NTSCSQ 2-PAL601 3-PALSQ
		-v --> Video Format 0-8YUV422 1-10YUV422 2-8ARB 3-10FULL ...
		-f --> Number of fields 1 or 2
		-z --> Freeze 0 or #of fields to DMA
	
mgv_voutl0
----------
	Tests the video output path by sending a series of test pattern 
	frames from the CC1 frame buffer to the video frame buffers and 
	video out (a display monitor). Each pattern will be 1/16 of a full 
	frame, and will be displayed for N seconds at each of the 16 (4x4) 
	screen locations. The next pattern is then displayed at each location. 
	The routine concludes when the last pattern is displayed at the last 
	location. The operator is expected to visually inspect the patterns 
	at each screen location for errors. The 'seconds' term should be set 
	for a long enough period for visual inspection. 
	There is no automatic determination of pass/fail.
	Usage: mgv_voutl0 <chan> <tv_std> <time>
		<chan>   --> channel [1|2]
		<tv_std> --> TV standard 0-NTSC601 1-NTSCSQ 2-PAL601 3-PALSQ
		<time>   --> in seconds for waiting

mgv_voutl1
----------
	Tests that perform write/read testing of the Video Output and Genlock 
	Control registers.  This will consist of writing and confirming 
	(reading) each of six sets of data (all 1s, all 0s, alt10, alt01, 
	walk1s, walk 0s) to each register.

mgv_vgivoutl0
-------------
	Tests the video output path by sending a series of test pattern 
	frames from a VGI1 DMA transfer to the video frame buffers and video 
	out (a display monitor). Each pattern will be a full frozen frame, 
	and will be displayed for N seconds. The routine concludes when the 
	last pattern is displayed on the screen. The operator is expected to
	visually inspect the patterns at each screen location for errors. 
	The 'seconds' term should be set for a long enough period for visual 
	inspection. There is no automatic determination of pass/fail.
	Usage: mgv_vgivoutl0 <chan> <tv_std> <time>
		<chan>   --> channel [1|2]
		<tv_std> --> TV standard 0-NTSC601 1-NTSCSQ 2-PAL601 3-PALSQ
		<time>   --> in seconds for waiting

mgv_extvin
----------
	Tests the video input path by DMA-ing the input Flat Field source
	and displaying it on the operator screen. The test displays the first
	pixel value and waits for 60 seconds. The operator may change
	the pixel values by adjusting the generator buttons and check
	for the change in the pixel values displayed on the operator screen.
	There is no automatic determination of pass/fail.
	Usage: mgv_extvin  <chan> <tv_std>
		<chan>   --> channel [1|2]
		<tv_std> --> TV standard 0-NTSC601 1-NTSCSQ 2-PAL601 3-PALSQ

mgv_vinl1
---------
	Tests that perform write/read testing of the Video Input registers.  
	This will consist of writing and confirming (reading) each of six 
	sets of data (all 1s, all 0s, alt10, alt01, walk1s, walk 0s) to 
	each register.

mgv_cctovgi
-----------
	The operator must connect the loop back from Video Out#1 to Video In#1.
	Tests the data path from CC1 to VGI1. The test sends a known video
	data to CC1 Frame Buffer. The output of the Frame Buffer goes to
	Video Out #1. The test then performs a VGI1 DMA Write and compare 
	the data in memory.
	Usage: mgv_cctovgi <chan> <tv_std> <time>
		<chan>   --> channel [1|2]
		<tv_std> --> TV standard 0-NTSC601 1-NTSCSQ 2-PAL601 3-PALSQ
		<time>   --> in seconds for waiting

mgv_cctovgix
------------
	Similar to "mgv_cctovgi" except the input and output could be either
	channel 1 or 2.
	Usage: mgv_cctovgix <input chan> <output chan>
		<input chan>  --> channel [1|2]
		<output chan> --> channel [1|2]

mgv_readcc
----------
	Dumps the  requested CC1 field data.
	Usage: mgv_readcc <fld>
		<field>  --> 0 - odd; 1 - even

mgv_gpitrig
-----------
	Tests the GPI Trigger Switch
	Usage: mgv_gpitrig -p [0|1]
		-p Polarity 0 - falling edge; 1 - rising edge


==============================================================================
Description of Scripts 
======================
mgv_initall
-----------
	mg_setboard 0;
	mg_reset;
	mgv_init;

mgv_aball
---------
	mgv_init;
	mgv_abdcb;
	mgv_abaddrbus -r -g -b -a;
	mgv_abdatabus -r -g -b -a;
	mgv_abpatrn -r -g -b -a;

mgv_ccall
---------
	mgv_init;
	mgv_ccdcb;
	mgv_ccaddrbus;
	mgv_ccdatabus;

mgv_vgiregall
-------------
	mgv_init;
	mgv_vgiregpatrn;
	mgv_init;
	mgv_vgiregwalk;

mgv_vgiintall
-------------
	mgv_init;
	mgv_vgiint -i 0x1;
	mgv_vgiint -i 0x4;
	mgv_vgiint -i 0x8;
	mgv_vgiint -i 0x10;
	mgv_init;
	mgv_vgiint -c 2 -i 0x1;
	mgv_vgiint -c 2 -i 0x4;
	mgv_vgiint -c 2 -i 0x8;
	mgv_vgiint -c 2 -i 0x10;

mgv_vgidmaall
-------------
	mgv_init;
	mgv_vgidma -z 50;
	mgv_vgidma -t 1 -z 50;
	mgv_vgidma -v 1 -z 50;
	mgv_vgidma -v 2 -z 50;
	mgv_vgidma -v 4 -z 50;
	mgv_vgidma -t 1 -v 5 -z 50;
	mgv_vgidma -t 1 -v 5 -z 50;
	mgv_vgidma -t 1 -v 6 -y 0x40404040  -z 50;
	mgv_init;
	mgv_vgidma -c 2;
	mgv_vgidma -c 2 -t 1;
	mgv_vgidma -c 2 -v 1;
	mgv_vgidma -c 2 -v 2;
	mgv_vgidmamgv_vgidma -c 2 -t 1 -v 5;
	mgv_vgidma -c 2 -t 1 -v 5;
	mgv_vgidma -c 2 -t 1 -v 6 -y 0x40404040 ;

mgv_vgiall
----------
	mgv_vgiregall;
	mgv_vgiintall;
	mgv_vgidmaall;

mgv_voutall
-----------
	mgv_init;
	mgv_voutl0 1;
	mgv_voutl0 2;
	mgv_voutl1 ;
	mgv_init;
	mgv_vgivoutl0;
	mgv_vgivoutl0 2;

mgv_vinall
----------
	mgv_init;
	mgv_extvin;
	mgv_init;
	mgv_extvin 2;
	mgv_init;
	mgv_vinl1;

mgv_loopbackall
---------------
	mgv_init;
	mgv_cctovgi 1;
	mgv_init;
	mgv_cctovgi 2;

mgv_all
-------
	DOES ALL OF THE ABOVE

