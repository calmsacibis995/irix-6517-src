#ifndef _SYS_GR4HW_H_
#define _SYS_GR4HW_H_

/*
** Copyright 1993, Silicon Graphics, Inc.
** All Rights Reserved.
**
** This is UNPUBLISHED PROPRIETARY SOURCE CODE of Silicon Graphics, Inc.;
** the contents of this file may not be disclosed to third parties, copied or
** duplicated in any form, in whole or in part, without the prior written
** permission of Silicon Graphics, Inc.
**
** RESTRICTED RIGHTS LEGEND:
** Use, duplication or disclosure by the Government is subject to restrictions
** as set forth in subdivision (c)(1)(ii) of the Rights in Technical Data
** and Computer Software clause at DFARS 252.227-7013, and/or in similar or
** successor clauses in the FAR, DOD or NASA FAR Supplement. Unpublished -
** rights reserved under the Copyright Laws of the United States.
**
** $Header: /proj/irix6.5.7m/isms/stand/arcs/ide/isddevices/graphics/MGRAS/RCS/mgrashw.h.diag,v 1.1 1994/12/02 00:52:44 kkn Exp $
*/
#include <MGRAS/gl/re4te1reg.h>
#include <MGRAS/gl/re4reg.h>
#include <MGRAS/gl/te1tr1reg.h>
#include <MGRAS/gl/te1reg.h>
#include <MGRAS/gl/tr1reg.h>
#include <MGRAS/gl/pp1reg.h>

/*
** single RSS registers
*/
typedef struct {
    /* double buffered shared RE/TE registers */
    volatile __uint32_t tri_x0;					/* 0x0000 */
    volatile __uint32_t tri_x1;					/* 0x0001 */
    volatile __uint32_t tri_x2;					/* 0x0002 */
    volatile __uint32_t tri_ymax;				/* 0x0003 */
    volatile __uint32_t tri_ymid;				/* 0x0004 */
    volatile __uint32_t tri_ymin;				/* 0x0005 */
    volatile __uint32_t tri_dxdy0;				/* 0x0006 */
    volatile __uint32_t tri_dxdy0_low;				/* 0x0007 */
    volatile __uint32_t tri_dxdy1_hi;				/* 0x0008 */
    volatile __uint32_t tri_dxdy1_low;				/* 0x0009 */
    volatile __uint32_t tri_dxdy2_hi;				/* 0x000a */
    volatile __uint32_t tri_dxdy2_low;				/* 0x000b */
    volatile __uint32_t gline_xstartf;				/* 0x000c */
    volatile __uint32_t gline_ystartf;				/* 0x000d */
    volatile __uint32_t gline_xendf;				/* 0x000e */
    volatile __uint32_t gline_yendf;				/* 0x000f */
    volatile __uint32_t gline_dx;				/* 0x0010 */
    volatile __uint32_t gline_dy;				/* 0x0011 */
    volatile __uint32_t gline_adjust;				/* 0x0012 */
    volatile iru ir;						/* 0x0013 */
    volatile __uint32_t _pad014[0x40-0x14];

    /* double buffered RE registers */
    volatile __uint32_t xline_xystarti;				/* 0x0040 */
    volatile __uint32_t xline_xyendi;				/* 0x0041 */
    volatile __uint32_t xline_inc1;				/* 0x0042 */
    volatile __uint32_t xline_inc2;				/* 0x0043 */
    volatile __uint32_t xline_error_oct;			/* 0x0044 */
    volatile __uint32_t ir_alias;				/* 0x0045 */
    volatile __uint32_t block_xystarti;				/* 0x0046 */
    volatile __uint32_t block_xyendi;				/* 0x0047 */
    volatile __uint32_t block_xymove;				/* 0x0048 */
    volatile __uint32_t block_xsaveoct;				/* 0x0049 */
    volatile __uint32_t _pad04a[0x5b-0x4a];
    volatile __uint32_t packed_color;				/* 0x005b */
    volatile __uint32_t red;					/* 0x005c */
    volatile __uint32_t green;					/* 0x005d */
    volatile __uint32_t blue;					/* 0x005e */
    volatile __uint32_t alpha;					/* 0x005f */
    volatile __uint32_t dre;					/* 0x0060 */
    volatile __uint32_t drx;					/* 0x0061 */
    volatile __uint32_t dge;					/* 0x0062 */
    volatile __uint32_t dgx;					/* 0x0063 */
    volatile __uint32_t dbe;					/* 0x0064 */
    volatile __uint32_t dbx;					/* 0x0065 */
    volatile __uint32_t dae;					/* 0x0066 */
    volatile __uint32_t dax;					/* 0x0067 */
    volatile __uint32_t z_hi;	       				/* 0x0068 */
    volatile __uint32_t z_low;					/* 0x0069 */
    volatile __uint32_t dzx_hi;					/* 0x006a */
    volatile __uint32_t dzx_low;				/* 0x006b */
    volatile __uint32_t dze_hi;					/* 0x006c */
    volatile __uint32_t dze_low;				/* 0x006d */
    volatile __uint32_t _pad06e[0x70-0x6e];
    volatile __uint32_t char_h;					/* 0x0070 */
    volatile __uint32_t char_l;					/* 0x0071 */
    volatile __uint32_t _pad072[0x80-0x72];

    /* double buffered TE registers */
    union {
	/* WARP_ENABLE = 0 */
	struct {
	    volatile __uint32_t sw_u;				/* 0x0080 */
	    volatile __uint32_t sw_l;				/* 0x0081 */
	    volatile __uint32_t tw_dtx_u;			/* 0x0082 */
	    volatile __uint32_t tw_dtx_l;			/* 0x0083 */
	    volatile __uint32_t wi_u;				/* 0x0084 */
	    volatile __uint32_t wi_l;				/* 0x0085 */
	    volatile __uint32_t dwie_u;				/* 0x0086 */
	    volatile __uint32_t dwie_l;				/* 0x0087 */
	    volatile __uint32_t dwix_u;				/* 0x0088 */
	    volatile __uint32_t dwix_l;				/* 0x0089 */
	    volatile __uint32_t dwiy_u;				/* 0x008a */
	    volatile __uint32_t dwiy_l;				/* 0x008b */
	    volatile txscaleu txscale;				/* 0x008c */
	    volatile __uint32_t _pad08d[0xc0-0x8d];
	    volatile __uint32_t dswe_u;				/* 0x00c0 */
	    volatile __uint32_t dswe_l;				/* 0x00c1 */
	    volatile __uint32_t dtwe_u;				/* 0x00c2 */
	    volatile __uint32_t dtwe_l;				/* 0x00c3 */
	    volatile __uint32_t dswx_u;				/* 0x00c4 */
	    volatile __uint32_t dswx_l;				/* 0x00c5 */
	    volatile __uint32_t dtwx_u;				/* 0x00c6 */
	    volatile __uint32_t dtwx_l;				/* 0x00c7 */
	    volatile __uint32_t dswy_u;				/* 0x00c8 */
	    volatile __uint32_t dswy_l;				/* 0x00c9 */
	    volatile __uint32_t dtwy_u;				/* 0x00ca */
	    volatile __uint32_t dtwy_l;				/* 0x00cb */
	    volatile __uint32_t _pad0cc[0x100-0x0cc];
	} nw;
	/* WARP_ENABLE = 1 */
	struct {
	    volatile __uint32_t dsx_u;				/* 0x0080 */
	    volatile __uint32_t dsx_l;				/* 0x0081 */
	    volatile __uint32_t dtx_u;				/* 0x0082 */
	    volatile __uint32_t dtx_l;				/* 0x0083 */
	    volatile __uint32_t swarp_u;			/* 0x0084 */
	    volatile __uint32_t swarp_l;			/* 0x0085 */
	    volatile __uint32_t dse_u;				/* 0x0086 */
	    volatile __uint32_t dse_l;				/* 0x0087 */
	    volatile __uint32_t dte_u;				/* 0x0088 */
	    volatile __uint32_t dte_l;				/* 0x0089 */
	    volatile __uint32_t twarp_u;			/* 0x008a */
	    volatile __uint32_t twarp_l;			/* 0x008b */
	    volatile __uint32_t _pad08c[0xc0-0x8c];
	    volatile __uint32_t dsxe_u;				/* 0x00c0 */
	    volatile __uint32_t dsxe_l;				/* 0x00c1 */
	    volatile __uint32_t dtxe_u;				/* 0x00c2 */
	    volatile __uint32_t dtxe_l;				/* 0x00c3 */
	    volatile __uint32_t dsxx_u;				/* 0x00c4 */
	    volatile __uint32_t dsxx_l;				/* 0x00c5 */
	    volatile __uint32_t dtxx_u;				/* 0x00c6 */
	    volatile __uint32_t dtxx_l;				/* 0x00c7 */
	    volatile __uint32_t dsee_u;				/* 0x00c8 */
	    volatile __uint32_t dsee_l;				/* 0x00c9 */
	    volatile __uint32_t dtee_u;				/* 0x00ca */
	    volatile __uint32_t dtee_l;				/* 0x00cb */
	    volatile __uint32_t dsex_u;				/* 0x00cc */
	    volatile __uint32_t dsex_l;				/* 0x00cd */
	    volatile __uint32_t dtex_u;				/* 0x00ce */
	    volatile __uint32_t dtex_l;				/* 0x00cf */
	    volatile __uint32_t _pad0d0[0x100-0x0d0];
	} w;
    } warp;

    /* single buffered shared RE/TE registers */
    volatile __uint32_t xfrabort;				/* 0x0100 */
    volatile __uint32_t _pad101;
    volatile xfrcontrolu xfrcontrol;				/* 0x0102 */
    volatile __uint32_t _pad103[0x110-0x103];
    volatile fillmodeu fillmode;				/* 0x0110 */
    volatile texmode1u texmode1;				/* 0x0111 */
    volatile configu config;					/* 0x0112 */
    volatile __uint32_t scissorx;				/* 0x0113 */
    volatile __uint32_t scissory;				/* 0x0114 */
    volatile __uint32_t xywin;					/* 0x0115 */
    volatile __uint32_t _pad116[0x140-0x116];

    /* single buffered RE registers */
    volatile __uint32_t bkgrd_rg;				/* 0x0140 */
    volatile __uint32_t bkgrd_ba;				/* 0x0141 */
    volatile texenvrgu txenv_rg;				/* 0x0142 */
    volatile __uint32_t txenv_b;				/* 0x0143 */
    volatile fogrgu fog_rg;					/* 0x0144 */
    volatile __uint32_t fog_b;					/* 0x0145 */
    volatile glineconfigu glineconfig;				/* 0x0146 */
    volatile __uint32_t scrmsk1x;				/* 0x0147 */
    volatile __uint32_t scrmsk1y;				/* 0x0148 */
    volatile __uint32_t scrmsk2x;				/* 0x0149 */
    volatile __uint32_t scrmsk2y;				/* 0x014a */
    volatile __uint32_t scrmsk3x;				/* 0x014b */
    volatile __uint32_t scrmsk3y;				/* 0x014c */
    volatile __uint32_t scrmsk4x;				/* 0x014d */
    volatile __uint32_t scrmsk4y;				/* 0x014e */
    volatile winmodeu winmode;					/* 0x014f */
    volatile __uint32_t _pad150[0x153-0x150];
    volatile __uint32_t xfrsize;				/* 0x0153 */
    volatile __uint32_t xfrinitfactor;				/* 0x0154 */
    volatile __uint32_t xfrfactor;				/* 0x0155 */
    volatile __uint32_t xfrmasklow;				/* 0x0156 */
    volatile __uint32_t xfrmaskhigh;				/* 0x0157 */
    volatile __uint32_t xfrcounters;				/* 0x0158 */
    volatile xfrmodeu xfrmode;					/* 0x0159 */
    volatile __uint32_t lspat;					/* 0x015a */
    volatile lscrlu lscrl;					/* 0x015b */
    volatile __uint32_t device_addr;				/* 0x015c */
    volatile __uint32_t device_data;				/* 0x015d */
    volatile statusu status;					/* 0x015e */
    volatile __uint32_t re_togglecntx;				/* 0x015f */
    volatile __uint32_t PixCmd;					/* 0x0160 */
    volatile ppfillmodeu pp1fillmode;				/* 0x0161 */
    volatile __uint32_t ColorMaskMSBs;				/* 0x0162 */
    volatile __uint32_t ColorMaskLSBsA;				/* 0x0163 */
    volatile __uint32_t ColorMaskLSBsB;				/* 0x0164 */
    volatile ppblendfactoru BlendFactor;			/* 0x0165 */
    volatile ppstencilmodeu Stencilmode;			/* 0x0166 */
    volatile ppstencilmasku Stencilmask;			/* 0x0167 */
    volatile ppzmodeu Zmode;					/* 0x0168 */
    volatile ppafuncmodeu Afuncmode;				/* 0x0169 */
    volatile ppaccmodeu Accmode;				/* 0x016a */
    volatile ppblendcolorrgu BlendcolorRG;			/* 0x016b */
    volatile ppblendcolorbau BlendcolorBA;			/* 0x016c */
    volatile ppdrbpointersu DRBpointers;			/* 0x016d */
    volatile ppdrbsizeu DRBsize;				/* 0x016e */
    volatile pptagmodeu TAGmode;				/* 0x016f */
    volatile pptagdata_ru TAGdata_R;				/* 0x0170 */
    volatile pptagdata_gu TAGdata_G;				/* 0x0171 */
    volatile pptagdata_bu TAGdata_B;				/* 0x0172 */
    volatile pptagdata_au TAGdata_A;				/* 0x0173 */
    volatile __uint32_t TAGdata_Z;				/* 0x0174 */
    volatile pixcoordinateu PixCoordinate;			/* 0x0175 */
    volatile __uint32_t PIXcolorR;				/* 0x0176 */
    volatile __uint32_t PIXcolorG;				/* 0x0177 */
    volatile __uint32_t PIXcolorB;				/* 0x0178 */
    volatile __uint32_t PIXcolorA;				/* 0x0179 */
    volatile __uint32_t PIXcolorAcc;				/* 0x017a */
    volatile ppwinmodeu pp1winmode;				/* 0x017b */
    volatile _pad17c[0x017e-0x017c];
    volatile __uint32_t MainBufSel;				/* 0x017e */
    volatile __uint32_t OlayBufSel;				/* 0x017f */

    /* single buffered TE registers */
    volatile texmode2u texmode2;				/* 0x0180 */
    volatile txsizeu txsize;					/* 0x0181 */
    volatile txtileu txtile;					/* 0x0182 */
    volatile txlodu txlod;					/* 0x0183 */
    volatile txbcolor_rgu txbcolor_rg;				/* 0x0184 */
    volatile txbcolor_bau txbcolor_ba;				/* 0x0185 */
    volatile txbaseu txbase;					/* 0x0186 */
    volatile tram_cntrlu tram_cntrl;				/* 0x0187 */
    volatile max_pixel_rgu max_pixel_rg;			/* 0x0188 */
    volatile max_pixel_bau max_pixel_ba;			/* 0x0189 */
    volatile mddma_cntrlu mddma_cntrl;				/* 0x018a */
    volatile __uint32_t texrbuffer;				/* 0x018b */
    volatile txclampsizeu txclampsize;				/* 0x018c */
    volatile __uint32_t _pad18d[0x190-0x18d];
    volatile txaddru txaddr;					/* 0x0190 */
    volatile txmipmapu txmipmap;				/* 0x0191 */
    volatile txdetailu txdetail;				/* 0x0192 */
    volatile txborderu txborder;				/* 0x0193 */
    volatile detailscaleu detailscale;				/* 0x0194 */
    volatile __uint32_t te_togglecntx;				/* 0x0195 */
    volatile __uint32_t teversion;				/* 0x0196 */
    volatile __uint32_t _pad197[0x1a0-0x197];
    volatile __uint32_t tl_wbuffer;				/* 0x01a0 */
    volatile tl_modeu tl_mode;					/* 0x01a1 */
    volatile tl_specu tl_spec;					/* 0x01a2 */
    volatile tl_addru tl_addr;					/* 0x01a3 */
    volatile tl_mipmapu tl_mipmap;				/* 0x01a4 */
    volatile tl_borderu tl_border;				/* 0x01a5 */
    volatile __uint32_t tl_vidcntrl;				/* 0x01a6 */
    volatile tl_baseu tl_base;					/* 0x01a7 */
    volatile __uint32_t tl_vidabort;				/* 0x01a8 */
    volatile __uint32_t tl_s_size;				/* 0x01a9 */
    volatile __uint32_t tl_t_size;				/* 0x01aa */
    volatile __uint32_t tl_s_left;				/* 0x01ab */
    volatile __uint32_t tl_t_bottom;				/* 0x01ac */
    volatile __uint32_t _pad1ad[0x1af-0x1ad];
    volatile __uint32_t reserved;				/* 0x01af */
} rss_single;

/*
**  single (paired) RSS registers
*/
typedef struct {
    /* double buffered shared RE/TE registers */
    volatile __uint64_t tri_x1_x0;				/* 0x0000 */
    volatile __uint64_t tri_ymax_x2;				/* 0x0002 */
    volatile __uint64_t tri_ymin_ymid;				/* 0x0004 */
    volatile __uint64_t tri_dxdy0;				/* 0x0006 */
    volatile __uint64_t tri_dxdy1;				/* 0x0008 */
    volatile __uint64_t tri_dxdy2;				/* 0x000a */
    volatile __uint64_t gline_ystartf_xstartf;			/* 0x000c */
    volatile __uint64_t gline_yendf_xendf;			/* 0x000e */
    volatile __uint64_t gline_dy_dx;				/* 0x0010 */
    volatile __uint32_t _pad012[0x42-0x12];

    /* double buffered RE registers */
    volatile __uint64_t xline_inc2_inc1;			/* 0x0042 */
    volatile __uint64_t ir_xline_error_oct;			/* 0x0044 */
    volatile __uint32_t _pad046[0x5c-0x46];
    volatile __uint64_t green_red;				/* 0x005c */
    volatile __uint64_t alpha_blue;				/* 0x005e */
    volatile __uint64_t drx_dre;				/* 0x0060 */
    volatile __uint64_t dgx_dge;				/* 0x0062 */
    volatile __uint64_t dbx_dbe;				/* 0x0064 */
    volatile __uint64_t dax_dae;				/* 0x0066 */
} rss_paired;

/*
** extended RSS registers
*/
typedef struct {
    /* double buffered RE registers */
    volatile __uint64_t z;	       				/* 0x0268 */
    volatile __uint64_t dzx;					/* 0x026a */
    volatile __uint64_t dze;					/* 0x026c */
    volatile __uint32_t _pad26e[0x280-0x26e];

    /* double buffered TE registers */
    union {
	/* WARP_ENABLE = 0 */
	struct {
	    volatile __uint64_t sw;				/* 0x0280 */
	    volatile __uint64_t tw_dtx;				/* 0x0282 */
	    volatile __uint64_t wi;				/* 0x0284 */
	    volatile __uint64_t dwie;				/* 0x0286 */
	    volatile __uint64_t dwix;				/* 0x0288 */
	    volatile __uint64_t dwiy;				/* 0x028a */
	    volatile __uint32_t _pad28c[0x2c0-0x28c];
	    volatile __uint64_t dswe;				/* 0x02c0 */
	    volatile __uint64_t dtwe;				/* 0x02c2 */
	    volatile __uint64_t dswx;				/* 0x02c4 */
	    volatile __uint64_t dtwx;				/* 0x02c6 */
	    volatile __uint64_t dswy;				/* 0x02c8 */
	    volatile __uint64_t dtwy;				/* 0x02ca */
	} nw;
	/* WARP_ENABLE = 1 */
	struct {
	    volatile __uint64_t dsx;				/* 0x0280 */
	    volatile __uint64_t dtx;				/* 0x0282 */
	    volatile __uint64_t swarp;				/* 0x0284 */
	    volatile __uint64_t dse;				/* 0x0286 */
	    volatile __uint64_t dte;				/* 0x0288 */
	    volatile __uint64_t twarp;				/* 0x028a */
	    volatile __uint32_t _pad28c[0x2c0-0x28c];
	    volatile __uint64_t dsxe;				/* 0x02c0 */
	    volatile __uint64_t dtxe;				/* 0x02c2 */
	    volatile __uint64_t dsxx;				/* 0x02c4 */
	    volatile __uint64_t dtxx;				/* 0x02c6 */
	    volatile __uint64_t dsee;				/* 0x02c8 */
	    volatile __uint64_t dtee;				/* 0x02ca */
	    volatile __uint64_t dsex;				/* 0x02cc */
	    volatile __uint64_t dtex;				/* 0x02ce */
	} w;
    } warp;
} rss_extended;

/*
** raster subsystem address map
*/
typedef struct {
    union _n {							/* 0x0000 */
	rss_single s;
	rss_paired p;
    } n;
    volatile unsigned char pad[4*0x200-sizeof(rss_single)];
    rss_extended x;						/* 0x0200 */
} raster;

#define BIT(n)	(0x1 << n)

/* DCB constants */
#define MGRAS_DCB_CRS(x)	((x & 0x7) << 7)
#define MGRAS_DCB_ENDATAPACK	BIT(6)
#define MGRAS_DCB_ENCRSINC	BIT(5)
#define MGRAS_DCB_DATAWIDTH_1	(0x1 << 3)
#define MGRAS_DCB_DATAWIDTH_2	(0x2 << 3)
#define MGRAS_DCB_DATAWIDTH_3	(0x3 << 3)
#define MGRAS_DCB_DATAWIDTH_4	(0x0 << 3)

#define MGRAS_XMAP_PP1_SELECT	(MGRAS_DCB_CRS(0) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_XMAP_INDEX	(MGRAS_DCB_CRS(1) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_XMAP_CONFIG	(MGRAS_DCB_CRS(2) | MGRAS_DCB_DATAWIDTH_4)
#define MGRAS_XMAP_BUF_SELECT	(MGRAS_DCB_CRS(3) | MGRAS_DCB_DATAWIDTH_4)
#define MGRAS_XMAP_MAIN_MODE	(MGRAS_DCB_CRS(4) | MGRAS_DCB_DATAWIDTH_4)
#define MGRAS_XMAP_OVERLAY_MODE	(MGRAS_DCB_CRS(5) | MGRAS_DCB_DATAWIDTH_4)
#define MGRAS_XMAP_DIB		(MGRAS_DCB_CRS(6) | MGRAS_DCB_DATAWIDTH_4)
#define MGRAS_XMAP_DIB_DW	(MGRAS_DCB_CRS(6) | MGRAS_DCB_DATAWIDTH_4 | MGRAS_DCB_ENDATAPACK)
#define MGRAS_XMAP_RE_RAC	(MGRAS_DCB_CRS(7) | MGRAS_DCB_DATAWIDTH_4)

typedef struct {
	unsigned char pad0[MGRAS_XMAP_PP1_SELECT];
	volatile unsigned char pp1_sel;
	unsigned char pad1[MGRAS_XMAP_INDEX - MGRAS_XMAP_PP1_SELECT - 1];
	volatile unsigned char index;
	unsigned char pad2[MGRAS_XMAP_CONFIG - MGRAS_XMAP_INDEX - 1];
	volatile __uint32_t config;
	unsigned char pad3[MGRAS_XMAP_BUF_SELECT - MGRAS_XMAP_CONFIG - 4];
	volatile __uint32_t buf_sel;
	unsigned char pad4[MGRAS_XMAP_MAIN_MODE - MGRAS_XMAP_BUF_SELECT - 4];
	volatile __uint32_t main_mode;
	unsigned char pad5[MGRAS_XMAP_OVERLAY_MODE - MGRAS_XMAP_MAIN_MODE - 4];
	volatile __uint32_t ovl_mode;
	unsigned char pad6[MGRAS_XMAP_DIB - MGRAS_XMAP_OVERLAY_MODE - 4];
	volatile __uint32_t dib;
	unsigned char pad7[MGRAS_XMAP_DIB_DW - MGRAS_XMAP_DIB - 4];
	volatile __uint64_t  dib_dw;	
	unsigned char pad8[MGRAS_XMAP_RE_RAC - MGRAS_XMAP_DIB_DW -  8];
	volatile __uint32_t re_rac;
	unsigned char pad9[0x400 - MGRAS_XMAP_RE_RAC - 4];
} _pp1xmap;

/* CMAP CTRL registers */
#define MGRAS_CMAP_ADDRLO  	(MGRAS_DCB_CRS(0) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_CMAP_ADDR 	(MGRAS_DCB_CRS(0) | MGRAS_DCB_DATAWIDTH_2 | MGRAS_DCB_ENCRSINC) 
#define MGRAS_CMAP_ADDRHI  	(MGRAS_DCB_CRS(1) | MGRAS_DCB_DATAWIDTH_1) 
#define MGRAS_CMAP_PAL		(MGRAS_DCB_CRS(2) | MGRAS_DCB_DATAWIDTH_3)
#define MGRAS_CMAP_CMD		(MGRAS_DCB_CRS(3) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_CMAP_STATUS 	(MGRAS_DCB_CRS(4) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_CMAP_REV		(MGRAS_DCB_CRS(6) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_CMAP_RESERVED     (MGRAS_DCB_CRS(7) | MGRAS_DCB_DATAWIDTH_1)


typedef struct {
	unsigned char pad0[MGRAS_CMAP_ADDRLO];
	volatile unsigned char addrlo;
	unsigned char pad1[MGRAS_CMAP_ADDR - MGRAS_CMAP_ADDRLO-1];
	volatile unsigned short addr;
	unsigned char pad2[MGRAS_CMAP_ADDRHI - MGRAS_CMAP_ADDR-2];
	volatile unsigned char addrhi;
	unsigned char pad3[MGRAS_CMAP_PAL - MGRAS_CMAP_ADDRHI-1];
	volatile __uint32_t pal;
	unsigned char pad4[MGRAS_CMAP_CMD - MGRAS_CMAP_PAL-4];
	volatile unsigned char cmd;
	unsigned char pad5[MGRAS_CMAP_STATUS  - MGRAS_CMAP_CMD-1];
	volatile unsigned char status;
	unsigned char pad6[MGRAS_CMAP_REV - MGRAS_CMAP_STATUS-1];
	volatile unsigned char rev;
	unsigned char pad7[MGRAS_CMAP_RESERVED - MGRAS_CMAP_REV-1];
	volatile unsigned char reserved;
	unsigned char pad8[0x400 - MGRAS_CMAP_RESERVED-1];

} _MScmap;

#define MGRAS_DAC_ADDR 	( MGRAS_DCB_CRS(0) | MGRAS_DCB_DATAWIDTH_2)
#define MGRAS_DAC_PAL  	( MGRAS_DCB_CRS(1) | MGRAS_DCB_DATAWIDTH_2)
#define MGRAS_DAC_CMD  	( MGRAS_DCB_CRS(2) | MGRAS_DCB_DATAWIDTH_1)
#define MGRAS_DAC_MODE	( MGRAS_DCB_CRS(3) | MGRAS_DCB_DATAWIDTH_1)

typedef struct {
	unsigned char pad0[MGRAS_DAC_ADDR];
	volatile unsigned short addr;
	unsigned char pad1[MGRAS_DAC_PAL - MGRAS_DAC_ADDR - 2];
	volatile unsigned short pal;
	unsigned char pad2[MGRAS_DAC_CMD - MGRAS_DAC_PAL - 2];
	volatile unsigned char cmd;
	unsigned char pad3[MGRAS_DAC_MODE - MGRAS_DAC_CMD - 1];
	volatile unsigned char mode;
	unsigned char pad4[0x400 - MGRAS_DAC_MODE - 1];
} _ADVdac;


#define MGRAS_VC3_INDEX 	(MGRAS_DCB_CRS(0) | MGRAS_DCB_DATAWIDTH_1)  

#define MGRAS_VC3_INDEXDATA 	(MGRAS_DCB_CRS(0) | MGRAS_DCB_ENCRSINC | MGRAS_DCB_DATAWIDTH_3)	

#define MGRAS_VC3_DATA 		(MGRAS_DCB_CRS(1) | MGRAS_DCB_ENCRSINC | MGRAS_DCB_DATAWIDTH_2)
#define MGRAS_VC3_RAM_64BIT     (MGRAS_DCB_CRS(3) | MGRAS_DCB_DATAWIDTH_4)

#define MGRAS_VC3_RAM	 	(MGRAS_DCB_CRS(3) | MGRAS_DCB_DATAWIDTH_2)

typedef struct {
        unsigned char pad0[MGRAS_VC3_INDEX];
        volatile unsigned char index;
        unsigned char pad1[MGRAS_VC3_INDEXDATA - MGRAS_VC3_INDEX - 1];
        volatile __uint32_t indexdata;
        unsigned char pad2[MGRAS_VC3_DATA - MGRAS_VC3_INDEXDATA - 4];
        volatile unsigned short data;
        unsigned char pad3[MGRAS_VC3_RAM_64BIT - MGRAS_VC3_DATA - 2];
        volatile  __uint64_t ram64;
        unsigned char pad4[MGRAS_VC3_RAM - MGRAS_VC3_RAM_64BIT - 8];
        volatile unsigned short ram;
        unsigned char pad5[0x400 - MGRAS_VC3_RAM - 2];
} _vc3;

#if 0
typedef struct {
	unsigned char pad0[MGRAS_VC3_INDEX];
	volatile unsigned char index;
	unsigned char pad1[MGRAS_VC3_INDEXDATA - MGRAS_VC3_INDEX - 1];
	volatile __uint32_t indexdata;
	unsigned char pad2[MGRAS_VC3_DATA - MGRAS_VC3_INDEXDATA - 4];
	volatile unsigned short data;
	unsigned char pad3[MGRAS_VC3_RAM - MGRAS_VC3_DATA - 2];
	volatile unsigned short ram;
	unsigned char pad4[0x400 - MGRAS_VC3_RAM - 2];
} _vc3;
#endif

typedef struct {
	volatile unsigned char bdvers0;
	unsigned char pad0;
	volatile unsigned char bdvers1;
	unsigned char pad1[0x400-3];
} _mgrasbd;

/* To access data, just use flexdata.data32, or flexdata.data16, etc. */

typedef union {
    struct {
    	volatile __uint64_t	data;
    } bydouble;
    struct {
        volatile __uint32_t	pad;
        volatile __uint32_t	data;
    } byword;
    struct {
        volatile unsigned short pad[3];
        volatile unsigned short data;
    } byshort;
    struct {
        volatile unsigned char pad[7];
        volatile unsigned char data;
    } bybyte;
} dcbdata64;

typedef struct {
    volatile __uint32_t hquc[0x6000/4];		    		/* 0x1f040000 */
    volatile __uint32_t hqpc;				    	/* 0x1f046000 */
    volatile unsigned char pad0[0x7000-0x6000-4];    	   	/* 0x1f04c000 */		    	    
    volatile __uint32_t cp_data;		    	    	/* 0x1f047000 */
    volatile unsigned char pad1[0xC000-0x7000-4];	    
    volatile __uint32_t rss_diag[(0x50000-0x4C000)/4];	    	/* 0x1f04c000 */		    	    
    volatile __uint32_t hq_config;			    	/* 0x1f050000 */
    volatile __uint32_t flag_ctx;				/* 0x1f050004 */
    volatile __uint32_t flag_set_priv;				/* 0x1f050008 */
    volatile __uint32_t flag_clr_priv;			    	/* 0x1f05000C */
    volatile __uint32_t flag_enab_set;			    	/* 0x1f050010 */
    volatile __uint32_t flag_enab_clr;			    	/* 0x1f050014 */
    volatile __uint32_t intr_enab_set;			    	/* 0x1f050018 */
    volatile __uint32_t intr_enab_clr;			    	/* 0x1f05001C */
    volatile __uint32_t cfifo_hw;			    	/* 0x1f050020 */
    volatile __uint32_t cfifo_lw;			    	/* 0x1f050024 */
    volatile __uint32_t cfifo_delay;			    	/* 0x1f050028 */
    volatile __uint32_t dfifo_hw;			    	/* 0x1f05002C */
    volatile __uint32_t dfifo_lw;			    	/* 0x1f050030 */
    volatile __uint32_t dfifo_delay;			    	/* 0x1f050034 */
    volatile unsigned char pad1a[8];
    volatile __uint32_t ge0_diag_d;			    	/* 0x1f050040 */
    volatile __uint32_t ge0_diag_a;			    	/* 0x1f050044 */
    volatile __uint32_t ge1_diag_d;			    	/* 0x1f050048 */
    volatile __uint32_t ge1_diag_a;			    	/* 0x1f05004C */
   volatile unsigned char pad2[0xf0-0x4c-4];	    
    dcbdata64 	cfifo_priv;				    	/* 0x1f0500f0 */
    volatile __uint32_t ctxsw;			    	    	/* 0x1f0500f8 */
    volatile unsigned char pad3[0x100-0xf8-4];	    
    volatile __uint32_t ctx_data;			    	/* 0x1f050100 */
    volatile unsigned char pad4[0x4];
    volatile __uint32_t bfifo_hw;			    	/* 0x1f050108 */
    volatile __uint32_t bfifo_lw;			    	/* 0x1f05010c */
    volatile __uint32_t bfifo_delay;			    	/* 0x1f050110 */
    volatile __uint32_t gio_config;			    	/* 0x1f050114 */
    volatile unsigned char _pad5[0x200-0x114-4];
    volatile __uint32_t reif_ctx[(0x300-0x200)/4];	    	/* 0x1f050200*/
    volatile __uint32_t hag_ctx[(0x500-0x300)/4];    	    	/* 0x1f050300*/
    volatile __uint32_t hif_ctx[(0x600-0x500)/4];    	    	/* 0x1f050500*/
    volatile __uint32_t gio_ctx[(0x700-0x600)/4];    	    	/* 0x1f050600*/
    volatile unsigned char _pad6[0x800-0x700];
    volatile __uint32_t tlb[(0x880-0x800)/4];		    	/* 0x1f050800*/
    volatile __uint32_t tlb_curr_addr;			    	/* 0x1f050880*/
    volatile unsigned char _pad7[0x900-0x880-4];
    volatile __uint32_t tlb_valids;		    	   	/* 0x1f050900*/
    volatile unsigned char _pad8[0x60000-0x50900-4];
    _pp1xmap	xmap;		    	    		   	/* 0x1f060000*/
    _vc3 	vc3;				 	   	/* 0x1f062000*/
    volatile unsigned char _dcbpad1[2*0x400];	/* Place holder for DCB #1-3*/
    _MScmap	cmap0;		    			   	/* 0x1f061800*/
    _MScmap 	cmap1;				 	   	/* 0x1f061C00*/
    _MScmap	cmapall;		    		   	/* 0x1f061400*/
    volatile unsigned char _dcbpad2[0x400];	/* Place holder for DCB #1-3*/
    _ADVdac	dac;		    			   	/* 0x1f061000*/
    _mgrasbd 	bdvers;				 	   	/* 0x1f062400*/
    volatile unsigned char _dcbpad10[0x400*6]; /* Place holder for DCB #10-15*/
    volatile unsigned char _pad9[0x8000-0x4000];			 
    volatile __uint32_t dcbctrl_pp1;		    		/* 0x1f068000*/
    volatile __uint32_t dcbctrl_vc3;		    		/* 0x1f068020*/
    volatile __uint32_t dcbctrl_2;		    		/* 0x1f068008*/
    volatile __uint32_t dcbctrl_3;		    		/* 0x1f06800c*/
    volatile __uint32_t dcbctrl_cmap0;		    		/* 0x1f068018*/
    volatile __uint32_t dcbctrl_cmap1;		    		/* 0x1f06801c*/
    volatile __uint32_t dcbctrl_cmapall;	    		/* 0x1f068014*/
    volatile __uint32_t dcbctrl_1;		    		/* 0x1f068004*/
    volatile __uint32_t dcbctrl_dac;		    		/* 0x1f068010*/
    volatile __uint32_t dcbctrl_bdvers;		    		/* 0x1f068024*/
    volatile __uint32_t dcbctrl_10;		    		/* 0x1f068028*/
    volatile __uint32_t dcbctrl_11;		    		/* 0x1f06802c*/
    volatile __uint32_t dcbctrl_12;		    		/* 0x1f068030*/
    volatile __uint32_t dcbctrl_13;		    		/* 0x1f068034*/
    volatile __uint32_t dcbctrl_14;		    		/* 0x1f068038*/
    volatile __uint32_t dcbctrl_15;		    		/* 0x1f06803c*/
    volatile unsigned char upad0[0x70000-0x6803c-4];
    volatile __uint32_t status;		    	    		/* 0x1f070000*/
    volatile __uint32_t fifo_status;		    		/* 0x1f070004*/
    volatile __uint32_t flag_set;		    		/* 0x1f070008*/
    volatile __uint32_t flag_clr;		    		/* 0x1f07000c*/
    volatile __uint32_t rebus_read_hi;		    		/* 0x1f070010*/
    volatile __uint32_t rebus_read_lo;		    		/* 0x1f070014*/
    volatile unsigned char upad1[0xf0-0x14-4];
    dcbdata64 cfifo;				    		/* 0x1f0700f0*/
    volatile unsigned char upad2[0x100-0xf0-8];
    volatile __uint32_t gio_status;		    		/* 0x1f070100*/
    volatile __uint32_t busy_dma;		    		/* 0x1f070104*/
    volatile unsigned char upad3[0xc000-0x0104-4];
    raster rss;					    		/* 0x1f07c000 */
    volatile unsigned char upad4[0x4000-sizeof(raster)];
    dcbdata64 cfifo_cmd[0x80000/8];    		    		/* 0x1f080000 */
} mgras_hw;

/*
** structs for emulation hardware
*/
typedef struct {
    volatile __uint32_t _pad00;
    volatile __uint32_t addr_bc;			    /* 0x1f500004 */
    volatile __uint32_t _pad08;
    volatile __uint32_t ctrl;				    /* 0x1f50000c */
    volatile __uint32_t _pad10;
    volatile __uint32_t stat;				    /* 0x1f500014 */
    volatile __uint32_t _pad18; 
    volatile __uint32_t pio_rd_add;			    /* 0x1f50001c */
} sgio_regs;

typedef struct {
    int slot;
    unsigned int arb_reg;
} ng1_setgio_args;


/***** RE bit register definitions ********/
/*  RE Config register */
#define CFG_DEST_RE	BIT(0)
#define CFG_YFLIP	BIT(3)
#define CFG_BRES_RND	BIT(4)

/* RE Fillmode register */
#define FM_POLY_STIP_ENAB	BIT(0)
#define FM_CHAR_STIP_EN		BIT(3)
#define FM_CHAR_STIP_OPAQUE	BIT(4)
#define FM_LINE_STIP_EN		BIT(5)
#define FM_LINE_STIP_OPAQUE	BIT(6)
#define FM_LINE_STIP_ADVANCE	BIT(7)
#define FM_LINE_SKIP_LAST	BIT(10)
#define FM_FAST_FILL		BIT(20)
#define FM_BLOCK_TYPE		BIT(22)

/* RE IR register */
#define IR_OPCODE		BIT(0)
#define IR_SETUP		BIT(4)

/* xfrcontrol */
#define XFR_DMA_START		BIT(0)
#define XFR_PIO_START		BIT(1)
#define XFR_DEVICE		BIT(2)
#define XFR_DIRECTION		BIT(3)
#define XFR_STATUS		BIT(4)

/* xfrmode */
#define PIXEL_COMP_TYPE		BIT(0)
#define PIXEL_FORMAT		BIT(4)
#define BEGIN_SKIP_BYTES	BIT(8)
#define BEGIN_SKIP_BITS		BIT(11)
#define STRIDE_SKIP_BYTES	BIT(14)
#define BITMAP_OPAQUE		BIT(23)

/* PP1 Fillmode register */
#define PP_FM_LOGICOP_ENAB	BIT(2)
#define PP_FM_PIXTYPE		BIT(8)
#define PP_FM_BUFCOUNT		BIT(11)
#define PP_FM_BUFSIZE		BIT(13)
#define PP_FM_DRAWBUF		BIT(14)
#define PP_FM_READBUF		BIT(21)
#define PP_FM_LOGICOP		BIT(26)

/* Texmode1 register */
#define BLEND_UNIT_COUNT 	BIT(16)

/**** HQ ****/

#define HQ3_GIO_CONFIG_DEFAULT	0xf
#define HQ3_CONFIG_DEFAULT	0x8e	
#define HQ3_ID(data)		((data & 0xffffff00) >> 8)		
#define HQ3_REV(data)		((data & 0xf0) >> 4)		

#define HQ3_BIGENDIAN	BIT(2)
#define HQ3_UCODE_STALL	BIT(3)
/* HQ settings */
#define HQ3_CONFIG_GEDIAG_MASK	0x30
#define HQ3_DIAG_READ_GE0	(2 << 4)
#define HQ3_DIAG_READ_GE1	(3 << 4)

#define HQ3_DIAG_GIO_CP	BIT(7)

#define HQ3_CFIFO_HIWATER	40
#define HQ3_CFIFO_LOWATER	20
#define HQ3_CFIFO_DELAY	100

#define HQ3_DFIFO_HIWATER	40
#define HQ3_DFIFO_LOWATER	20
#define HQ3_DFIFO_DELAY	100

#define HQ3_BFIFO_MAX		16	
#define HQ3_BFIFO_HIWATER	8	
#define HQ3_BFIFO_LOWATER	2	
#define HQ3_BFIFO_DELAY	100

#define HQ3_CFIFODEPTH(base)	(base->fifo_status & 		0x7f)
#define HQ3_CFIFOVALID(base)	((base->fifo_status &         0x7f80) >> 7)
#define HQ3_DFIFODEPTH(base)	((base->fifo_status & 	    0x3f8000) >> 15)
#define HQ3_CFIFOHWM(base)	((base->fifo_status &     0x1fc00000) >> 22)

#define HQ3_BFIFODEPTH(base)	(base->gio_status & 0x1f)
#define HQ3_DCBBUSY		BIT(5)

#define mgras_BFIFOWAIT(base,n)			\
	while (HQ3_BFIFODEPTH(base) > (64-n))

/**** Board revision registers *****/
#define MGRAS_BOARD_REV(data)		((data & 0x1c) >> 2)
#define MGRAS_NUMTRAM(x)        ((x == 0) ? 1 : ((x == 1) ? 2 : ((x==2) ? 4 : 0)))
#define MGRAS_NUMTRAM_HW	((x == 1) ? 0 : ((x == 2) ? 1 : ((x == 4)? 2: 3)) )

/***** DCB  ****/
#define MGRAS_DCB_ENSYNCACK	BIT(0)
#define MGRAS_DCB_ENASYNCACK	BIT(1)
#define MGRAS_DCB_CSWIDTH(x)	((x & 0x4) << 2)		 
#define MGRAS_DCB_CSHOLD(x)	((x & 0x4) << 6) 		 
#define MGRAS_DCB_CSSETUP(x)	((x & 0x4) << 10) 		 



#define MGRAS_DCBCTRL_CMAPALL	(MGRAS_DCB_CSWIDTH(4) | MGRAS_DCB_CSHOLD(1) | MGRAS_DCB_CSSETUP(1)) 	
#define MGRAS_DCBCTRL_CMAP0	(MGRAS_DCB_CSWIDTH(4) | MGRAS_DCB_CSHOLD(1) | MGRAS_DCB_CSSETUP(1)) 	
#define MGRAS_DCBCTRL_CMAP1	(MGRAS_DCB_CSWIDTH(4) | MGRAS_DCB_CSHOLD(1) | MGRAS_DCB_CSSETUP(1)) 	

#define MGRAS_DCBCTRL_VC3		(MGRAS_DCB_CSHOLD(1) | MGRAS_DCB_CSSETUP(1) | MGRAS_DCB_ENASYNCACK) 	

#define MGRAS_DCBCTRL_DAC		(MGRAS_DCB_CSWIDTH(2) | MGRAS_DCB_CSHOLD(1) | MGRAS_DCB_CSSETUP(1))

#define MGRAS_DCBCTRL_PP1		(MGRAS_DCB_CSWIDTH(1) | MGRAS_DCB_CSHOLD(2) | MGRAS_DCB_CSSETUP(1))	

#define MGRAS_DCBCTRL_BDVERS		(MGRAS_DCB_CSWIDTH(2) | MGRAS_DCB_CSHOLD(0) | MGRAS_DCB_CSSETUP(0))	

/* 
 * CMAP  macros
 */
/* For normal operation, wait for BFIFO to emtpy, then check CMAP0 status */
#define mgras_cmapFIFOWAIT(base)					\
	{								\
		mgras_BFIFOWAIT(base,64);				\
		while (!(base->cmap0.status & 0x08));			\
	}

#define mgras_cmapSetAddr(base, reg) 					\
		base->cmapall.addr = reg 
#define mgras_cmapSetRGB(base,r,g,b) 					\
		base->cmapall.pal = (r << 24 ) | ( g << 16 ) | (b << 8 )
#define mgras_cmapSetCmd(base,data) 					\
		base->cmapall.cmd = data 
#define mgras_cmapGetCmd(base,data) 					\
		data = (which ? base->cmap1.cmd : base->cmap0.cmd) 
#define mgras_cmapGetStatus(base,status) 					\
		status = (which ? base->cmap1.status : base->cmap0.status) 

#define mgras_cmapGetRev(base,rev) 					\
		rev = (which ? base->cmap1.rev : base->cmap0.rev) 

#define mgras_cmapGetRGB(base, which, r, g, b )				\
	 {								\
        __uint32_t _temp;						\
 	_temp = (which ? base->cmap1.pal : base->cmap0.pal);		\
 	r = (_temp & 0xff000000) >> 24;					\
        g = (_temp & 0x00ff0000) >> 16;					\
        b = (_temp & 0x0000ff00) >> 8;					\
        }


/* 
 * VC3 constants
 */
/* Index values */
#define VC3_VID_EP		0	
#define VC3_CURS_EP		1
#define VC3_CURS_X_LOC		2
#define VC3_CURS_Y_LOC		3
#define VC3_DID_EP1		4
#define VC3_DID_EP2		5
#define VC3_SCAN_LENGTH		6
#define VC3_RAM_ADDR		7
#define VC3_VERT_LINE_COUNT 	0xb
#define VC3_CUR_CURSOR_X	0xe
#define VC3_DID_FRAMETAB1 	0x10
#define VC3_DID_LINETAB1  	0x11
#define VC3_DID_FRAMETAB2 	0x12
#define VC3_DID_LINETAB2  	0x13
#define VC3_CURS_CONTROL	0x1d	
#define VC3_DISPLAY_CONTROL 	0x1e
#define VC3_CONFIG		0x1f

/* VC3 Config register bits */
#define VC3_UNRESET	BIT(0)
#define VC3_SLOW_CLOCK	BIT(1)
#define VC3_CURS_ERR	BIT(2)
#define VC3_DID_ERR1	BIT(3)
#define VC3_DID_ERR2	BIT(4)
#define VC3_VTG_ERR	BIT(5)
#define VC3_REV_SHIFT	6
#define VC3_TEMP_HIBYTE_SHIFT		
#define VC3_TEMP_HIBYTE_MASK (0xff << VC3_TEMP_HIBYTE_SHIFT)					

/* VC3 Display bits */
#define VC3_VINTR	BIT(0)
#define VC3_BLACKOUT	BIT(1)
#define VC3_VIDEO_ENAB	BIT(2)
#define VC3_DID_ENAB1	BIT(3)
#define VC3_DID_ENAB2	BIT(4)
#define VC3_GENSYNC	BIT(5)
#define VC3_GENLOCK 	BIT(6)
#define VC3_INTERLACED	BIT(7)
#define VC3_FIELD_ONLY	BIT(8)
#define VC3_ODD_FIELD	BIT(9)
#define VC3_ODD_FIELD_TIMING BIT(10)

/* VC3 Cursor bits */
#define VC3_ENA_CURS_FUNCTION 		BIT(0)
#define VC3_ENA_CURS_DISPLAY  		BIT(1)
#define VC3_CURS_CROSSHAIR		BIT(2)
#define VC3_CURS_GLYPH_64		BIT(3)

#define VC3_CURS_XOFF			31
#define VC3_CURS_YOFF			31

#define mgras_vc3SetIndex(base,addr) 		base->vc3.index = addr 

#define mgras_vc3SetReg(base,reg ,data16) 				\
	base->vc3.indexdata = (reg << 24) | (data16 << 8)

#define mgras_vc3GetReg(base,reg,data16) 				\
	mgras_vc3SetIndex(base,reg);					\
	data16 = base->vc3.data

#define mgras_vc3SetRam(base,data)		base->vc3.ram = data;
#define mgras_vc3GetRam(base,data)		data = base->vc3.ram;

/* VC3 Memory Map
 * 16-bit short addresses
 */ 

#define VC3_VID_LINETAB_ADDR		0x0   /* 768 shorts for line table  */
#define VC3_VID_FRAMETAB_ADDR		0x380 /* 128 shorts for frame table */
#define VC3_CURS_GLYPH_ADDR		0x400 /* 64x64 glyph, needs to be on 256-word bndry */
 
#define VC3_MAX_DID_FRAME_LEN_SHORT	1086	/* HDTV (1085+1) shorts - 
						 * need end-of-frame entry
					   	 */
#define VC3_DID_FRAMETAB1_BASE		0x500
#define VC3_DID_FRAMETAB2_BASE		(VC3_DID_FRAMETAB1_BASE+VC3_MAX_DID_FRAME_LEN_SHORT)	
#define VC3_DID_LINETAB1_BASE		(VC3_DID_FRAMETAB2_BASE+VC3_MAX_DID_FRAME_LEN_SHORT)  
#define VC3_DID_LINETAB1_END		(VC3_DID_LINETAB1_BASE +((0x8000 - VC3_DID_LINETAB1_BASE)/2))	
#define VC3_DID_LINETAB2_BASE		VC3_DID_LINETAB1_END /*7K entries for each buffer*/
#define VC3_DID_LINETAB2_END		0x8000

/* Address of registers in the Control Register */ 
#define MGRAS_DAC_ID_ADDR		0x3
#define MGRAS_DAC_PIXMASK_ADDR		0x4
#define MGRAS_DAC_CMD1_ADDR		0x5
#define MGRAS_DAC_CMD2_ADDR		0x6
#define MGRAS_DAC_CMD3_ADDR		0x7
#define MGRAS_DAC_CMD4_ADDR		0x8
#define MGRAS_DAC_PLL_CTL_ADDR		0x9
#define MGRAS_DAC_STATUS_ADDR		0xa
#define MGRAS_DAC_REV_ADDR		0xb
#define MGRAS_DAC_PLL_R_ADDR		0xc
#define MGRAS_DAC_PLL_V_ADDR		0xf
#define MGRAS_DAC_CURS_ADDR		0x204

#define MGRAS_DAC_MODE_INIT		0x23
#define MGRAS_DAC_PIXMASK_INIT		0xff
#define MGRAS_DAC_PIXMASK_BLANK	0x0
#define MGRAS_DAC_CMD1_INIT		0xc9
#define MGRAS_DAC_CMD2_INIT		0xe4
#define MGRAS_DAC_CMD3_INIT		0xc0
#define MGRAS_DAC_CMD4_INIT		0x06
#define MGRAS_DAC_CURS_DISABLE		0x01

#define mgras_dacSetAddr(base,address)				\
	{							\
	short _tmp;						\
	_tmp = (address & 0xff) << 8;				\
	base->dac.addr = _tmp | ((address & 0xff00) >> 8);	\
	}
	
#define mgras_dacSetRGB(base,r,g,b)				\
	{							\
		base->dac.pal =	((r & 0x3fc) << 6) | (r & 0x3); \
		base->dac.pal =	((g & 0x3fc) << 6) | (g & 0x3); \
		base->dac.pal =	((b & 0x3fc) << 6) | (b & 0x3); \
	}

#define mgras_dacGetRGB(base,r,g,b)				\
	{							\
		short _tmp;					\
		_tmp = base->dac.pal; 				\
		r = (_tmp & (0xff00) >> 6) | (_tmp & 0x3 );	\
		_tmp = base->dac.pal; 				\
		g = (_tmp & (0xff00) >> 6) | (_tmp & 0x3 );	\
		_tmp = base->dac.pal; 				\
		b = (_tmp & (0xff00) >> 6) | (_tmp & 0x3 );	\
	}
#define mgras_dacSetMode(base,data)				\
	base->dac.mode = data 

#define mgras_dacSetAddrCmd(base, addr, data)			\
	{							\
	mgras_dacSetAddr(base,addr);				\
	base->dac.cmd = data;					\
	}


#define MGRAS_XMAP_WRITEALLPP1	0
#define MGRAS_XMAP_AUTOINC	BIT(19)

#define MGRAS_XMAP_CURSORMSB(x)		(x & 0x2ff)	
#define MGRAS_XMAP_CONST_ALPHA(x) 	((x & 0xff) << 11)	
#define MGRAS_XMAP_NUMRSS(x)		((x & 0x3) << 20)	

/* XXX alpha and MSB */
#define MGRAS_XMAP_CONFIG_DEFAULT(numRE)		\
		(MGRAS_XMAP_CURSORMSB(0x3ff) | MGRAS_XMAP_CONST_ALPHA(0xff) | \
		MGRAS_XMAP_AUTOINC | MGRAS_XMAP_NUMRSS(numRE) ) 

#define MGRAS_XMAP_CONFIG_ADDR		0x0	
#define MGRAS_XMAP_REV_ADDR		0x4	
#define MGRAS_XMAP_FIFOCAP_ADDR		0x8	

#define MGRAS_XMAP_MAINBUF_ADDR		0x0
#define MGRAS_XMAP_OVERLAYBUF_ADDR	0x4	

#define MGRAS_XMAP_8BIT_CI		0x0
#define MGRAS_XMAP_OVL_DISABLE		0x0

#define MGRAS_PP1_CLEAN(x)	(x & 0xf)			
#define MGRAS_PP1_DIRTY(x)	(x << 4)

#define PP1_REFENABLE			BIT(0)
#define PP1_STARTREF(start)		(start 	<< 1)			
#define PP1_ENDREF(end)			(end	<< 11)			
#define PP1_REFLINECNT(line)		(line 	<< 21) 
#define PP1_REFBURSTCNT(line)		(line 	<< 21) 
#define MGRAS_XMAP_REFRESH(x,y) 	(PP1_REFLINECNT(x) | PP1_REFBURSTCNT(y))		

#define PP1_REFDEFAULT			(PP1_REFENABLE | PP1_STARTREF(0) | PP1_ENDREF(1023) | MGRAS_XMAP_REFRESH(1,1)) 	

#define mgras_xmapSetPP1Select(base,data)			\
	base->xmap.pp1_sel = data

#define mgras_xmapSetConfig(base,data)				\
	base->xmap.config = data 

#define mgras_xmapGetConfig(base,data)				\
	data = base->xmap.config; 

#define mgras_xmapSetAddr(base,addr)				\
	base->xmap.index = addr 


#define mgras_xmapSetBufSelect(base,data)			\
	base->xmap.buf_sel = data

#define mgras_xmapSetMainMode(base,wid,data)			\
	mgras_xmapSetAddr(base,wid << 2);			\
	base->xmap.main_mode = data
	
/* The number must be less than 32 */
#define mgras_xmapSetOvlMode(base,wid,data)			\
	mgras_xmapSetAddr(base,(wid & 0x1f) << 2);		\
	base->xmap.ovl_mode = data

#define mgras_xmapSetDIBdata(base,data)				\
	base->xmap.dib = data

#define mgras_xmapSetDIBdataDW(base,data)				\
	base->xmap.dib_dw = data

#define mgras_xmapSetRE_RAC(base,wid,data)			\
	base->xmap.re_rac = data
#define mgras_xmapFIFOWAIT(base)				\
	{							\
	mgras_xmapSetAddr(base,MGRAS_XMAP_FIFOCAP_ADDR);	\
	while (base->xmap.config == 0)				\
	   mgras_xmapSetAddr(base,MGRAS_XMAP_FIFOCAP_ADDR);	\
	}
#define mgras_cfifo(base,token,data)			\
	base->cfifo[token] = data			

#define MGRAS_WINLSB(x,y)	((y & 3) << 2) | (x & 3)
#define MGRAS_CIDMATCH(cid)	(cid  << 4)

#define  mgras_re4Set(base, reg, data) 	base->rss.n.s.reg = data

#define MGRAS_8BITCMAP_BASE	0
#define MGRAS_CMAP_NCOLMAPENT	8192

/* Settings for downloading ucode */
#define MGRAS_UCODERAM_INITVAL  0xffffffff
#define GE11_UCODERAM_LEN       256*1024
#define GE11_UCODE_BASE         0x200000

#define GE11_DIAG_EXEC_ADDR     0x40000
#define GE11_GO                 BIT(0)
#define GE11_UCODE_LAT_4        ~BIT(4)
#define GE11_UCODE_LAT_3        BIT(4)

#define GE11_DIAG_MODE_ADDR     0x40038
#define GE11_DIAG_MODE          BIT(0)
#define GE11_OFIFO_WM           (56 << 1)

#endif /* _SYS_GR4HW_H_ */
