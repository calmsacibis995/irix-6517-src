====================================DEBUG TOOL=========================
Debug Tool provides the following functionality to debug Octane Boards:
- individual register read/write operations
- group register read/write operations
- main memory read/writes
- looping 
- writes can be performed at the byte level and upto 64 bits

For more details refer to Epicurus Test Plan

====================================DEBUG TOOL COMMANDS=========================
The following is the list of commands available thru IDE to use the Debug Tool
menu					ip30_help_ep	
ip30_reg_peek		ip30_reg_poke		ip30_mem_peek		ip30_mem_poke
ip30_ioc3_peek		ip30_ioc3_poke 	ip30_rad_peek		ip30_rad_poke
ip30_scsi_peek		ip30_scsi_poke		ip30_bridge_peek	ip30_bridge_poke
ip30_xbow_peek		ip30_xbow_poke		ip30_heart_peek  	ip30_heart_poke
ip30_duart_peek	ip30_duart_poke	ip30_phy_peek  	ip30_phy_poke

=================DEBUG TOOL COMMAND DESCRIPTIONS AND OPTIONS===================
	The following individual operations can be run:
ip30_help_ep
-------
The help command displays chip memory addressable range, example commands and explains
the various tool options.

ip30_reg_peek
--------
A specified register can be read and displayed
Usage: ip30_reg_peek -a<chip> -o<register offset> -l<loopcount> 

ip30_reg_poke 
--------
A specified pattern will be written to the register
Usage: ip30_reg_poke -a<chip> -o<register offset> -l<loopcount> -d<data>

ip30_mem_peek
----
A single memory location, or a range of memory is read and the 
value displayed
Usage: ip30_mem_peek -a<start address:end address> -l<loopcount> -s <size>

ip30_mem_poke
----
A single memory location, or a range of memory is written to
Usage: ip30_mem_poke -a<start address:end address> -l<loopcount> -d data -s <size>

ip30_ioc3_peek
---------
ioc3 registers are read and displayed
Usage: ip30_ioc3_peek -l<loopcount>

ip30_ioc3_poke
---------
ioc3 registers are written to
Usage: ip30_ioc3_poke -l<loopcount> -d <write data>

ip30_rad_peek
--------
rad registers are read and displayed
Usage: ip30_rad_peek  -l<loopcount>

ip30_rad_poke
--------
rad registers are written to
Usage: ip30_rad_poke -l<loopcount> -d <write data>

ip30_scsi_peek
---------
scsi registers are read and displayed
Usage: ip30_scsi_peek -l<loopcount>

ip30_scsi_poke
---------
ip30_scsi registers are written to
Usage: ip30_scsi_poke -l<loopcount> -d <write data>

ip30_bridge_peek	
----------
bridge registers are read and displayed
Usage: ip30_bridge_peek -l<loopcount>

ip30_bridge_poke
----------
bridge registers are written to
Usage: ip30_bridge_poke -l<loopcount> -d <write data>

ip30_xbow_peek
---------
xbow registers are read and displayed
Usage: ip30_xbow_peek -l<loopcount>

ip30_xbow_poke
---------
xbow registers are written to
Usage: ip30_xbow_poke -l<loopcount> -d <write data>

ip30_heart_peek
----------
heart registers are read and displayed
Usage: ip30_heart_peek -l<loopcount>

ip30_heart_poke
---------
heart registers are written to
Usage: ip30_heart_poke -l<loopcount> -d <write data>

ip30_duart_peek
----------
duart registers are read and displayed
Usage: ip30_duart_peek -l<loopcount>

ip30_duart_poke
---------
duart registers are written to
Usage: ip30_duart_poke -l<loopcount> -d <write data>

ip30_phy_peek
----------
phy registers are read and displayed
Usage: ip30_phy_peek -l<loopcount>

ip30_phy_poke
---------
phy registers are written to
Usage: ip30_phy_poke -l<loopcount> -d <write data>

DETAILED OPTION DESCRIPTIONS
-a<chip h=heart, b=bridge, x=xbow, i=ioc3, r=rad, s=scsi, p=phy, d=duart> used in register 
operations to specify the chip to be read or written to.

-a<memory start address:memory end address> used in memory tests to specify
a range to memory to test seperated by a ':'. 
NOTE: The colon is required.

-o<offset> register address. For valid register offsets see EpicurusExamples document.

-l<loop count <1..n> optional argument specifies the number of times the 
user desires to repeat the operation. Default = 1.

-d<write data> (8..64 bits). This option specifies the data to be written.

-s<size 0=8bit, 1=16bit, 2=32Bit, 3=64Bit>

All arguments are required unless specified otherwise. All data input/output
from the tool is hexadecimal (use 0xXXXX).

