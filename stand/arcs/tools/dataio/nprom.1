'\"macro stdmacro
.TH NPROM 1
.SH NAME
nprom \- DATA I/O PROM/PAL programmer interface tool
.SH SYNOPSIS
.B nprom
[
.B \-abcdnrstvwDILJSOUWX
] < PROM/PAL source file
.SH DESCRIPTION
.PP
.I nprom\^
is a program which utilizes the computer remote control feature of 
DATA I/O 29B and Unisite 40 PROM/PAL programmers. 
It reads the data for the programmable device
from standard input, and can be pipelined if so desired.  Most people just
redirect stdin when invoking 
.I nprom\^
on the command line.
.PP
There are numerous options:
.TP
.B  \-a
Alternative tty device flag.  By default, nprom will attempt to write to a 
programmer attached to a serial port that is linked to "/dev/prom".  If you
wish to have nprom send its commands and data to another serial port, use this
option and supply the name of the tty device.
.TP
.B  \-b
Blank check flag.  This flag has meaning only if "-w" is also specified.  If 
set, it causes the DATA I/O programmer to test the device to see if it contains
any illegal bits ("the blank check") before prom/pal burning starts.  If not
set, the DATA I/O programmer still does an illegal bit test to ensure that the
original contents of the prom/pal and the new data are consistent.
.TP
.B  \-c
Family/pinout code flag.  If set, a parameter follows (with or without a space
as a separator) that identifies the family/pinout code
for the prom that the DATAI/O machine needs to know.
This parameter is usually a 4-digit hex number, but may be a 6-digit
hex number for certain devices when using the Unisite 40.  If the part
type is given with the -t flag, the family/pinout code 
need not be specified explicitly.
The -c option is useful if: the prom part type is not
in the "devicecodes" file; if the table has the wrong
family/pinout code in it; if you want to experiment with
different family/pinout codes.

The DATA I/O company will tell you family/pinout codes for
newly released devices.  (408) 437-9600 is their number.
Sometimes a new adaptor gadget is required as well for 29B machines.
.TP
.B  \-d
Debug flag.  This echos to standard output all data sent to the
prom burner.
.TP
.B  \-l
Label flag.  This flag is used only when the -R flag is set.  
This flag should be followed by a string identifier
for the device being programmed, (e.g. INTVEC or
070-0223-002 for a device named INTVEC).
.TP
.B  \-h
Handler flag.  This flag indicates the handler is present, so the handler 
must be properly initialized before attempting communication with the 
Data I/O machine.
.TP
.B  \-n
(like -n in make)
Does not actually burn a prom/pal, but goes through
some of the motions and returns the device code
based on the other flags and based on whatever the
prom burner thinks the device code is.
.TP
.B  \-p
pal checksum flag.
This flag should be followed by the checksum of the pal that is being 
programmed.  Since the checksum of data in the Data I/O ram does not 
match the checksum of the pal, we must pass the pal checksum externally.
This flag is intended to be used in a production
environment along with the -R flag.
.TP
.B  \-r
Read flag.  If the flag is set, the program will read the contents
of a previously burned prom into the internal memory of
the prom burner for purposes of verification or the
production of copies.  The contents are printed on
standard output.  If the flag is not set, the -w flag
applies.
.TP
.B  \-s
Start address flag.
If set, a parameter follows (with or without a space
as a separator) that identifies the starting device
address for burning/reading the prom.  All contents of
the prom before the specified start address will remain
untouched.  The start address is specified in decimal.
.TP
.B  \-t
Type flag.  If set, a parameter follows (with or without a space
as a separator) that identifies the type of prom alpha-
betically, e.g. as AMPAL16L8 or as TI27128A.
This type is looked up in a table that is read in from
the "devicecode" file.  The prom program finds the
family/pinout code for the prom from the same file.
(see -c flag).
.TP
.B  \-v
Verbose flag.  Causes some extra output, but far short of full
debugging information.
.TP
.B  \-w
Write flag.
If the flag is set, the program will burn a prom based
on desired contents (provided by standard input).
This is the default.
.TP
.B  \-D
Decimal format flag.
input format on standard input (with -w), or output
format on standard output (without -w) will be decimal.
Default format is unformatted.
.TP
.B  \-T type
Set format type.
A hexadecimal value specifying the desired type must follow.
For example, 94 specifies Extended Tektronix Hexadecimal.
.TP
.B  \-I
Intel 86 hex format.
input on standard input (with -w) will be in standard
MCS-86 hexadecimal object format.
.TP
.B  \-L
Intel 85 hex format.
input on standard input (with -w) will be in standard
MCS-85 hexadecimal object format.
.TP
.B  \-J
JEDEC format.
input format on standard input (with -w) will be a
standard JEDEC file as generated by ABEL or PALASM.
.TP
.B  \-S
set Set size.
If set, a parameter follows (with or without a space
as a separator) that specifies the set size.
This is used if the number of words (see -W option) in
the input file is more than fits in a single prom and
you want to split up the address range in contiguous
pieces.  The set size is the number of such pieces.
So, the difference between word size and set size is
that word size controls interleaving and set size
controls partitioning of the address range into
appropriately sized blocks.
Example: if you want to download a file of 16K words,
each word being 2 bytes wide, in order to program them
into a set of 4Kx8 bit PROMs, you would select a set
size of 4 (= 16K/4K) and a word size of 16 (= 2*8).
Setting the set size also changes the default for the
word size from 8 to 16, for unknown historical reasons.
.TP
.B  \-O
Octal format flag.
Input format on standard input (with -w), or output
format on standard output (without -w) will be octal.
Default format is unformatted.
.TP
.B  \-U
Unformatted (binary format) flag.
input format on standard input will be in binary, each
byte of input corresponding directly to the data to be
burned at a single address in the prom.
This is the default format (but see also -w ).
.TP
.B  \-W
set Word size.
If set, a parameter follows (with or without a space
as a separator) that specifies the word size.
The word size is the number of bits (must be a multiple
of 8) that have the same prom address; e.g. if the word
size is 16, you want all odd-numbered bytes in the input
file to go to the first (8-bit wide) prom and all even-
numbered bytes to the second prom.  So the word size
selects the degree of interleaving of bytes over
different proms.
.TP
.B  \-X
hexadecimal format flag.
input format on standard input (with -w), or output
format on standard output (without -w) will be hex.
Default format is unformatted.
.SH EXAMPLES
.\" .TP \w'ls\ \ \ 'u
.TP
nprom -v -w -c4BA4 < prom.obj
.br
will load the contents of the file "prom.obj" into a Mitsubishi 27512 EPROM.
.TP
nprom -v -J -w -c9717 < pal.jed
.br
will load the contents of the Jedec file "pal.jed" into an AMD 16L8 PAL.
.TP
nprom -a/dev/ttyd4 -R/dev/ttyd2 -Apal.label -lpal -pABCD -h -v -J -w -c9717 < pal.jed
.br
will program the Autolabel2000/Unisite system to burn an AMD 16L8 PAL with the 
contents of the Jedec file "pal.jed" and label it with the contents of the 
label file "pal.label".
.IP \fBNOTE\fP:
\fIpal.label\fP
must be a very specific format. It can be generated by the 
program 
.B autolabel.
.SH FILES
/usr/local/bin/dataio/devicecodes 
.br
to get Family/pinout codes for use with the -t option.
.br
/usr/local/bin/dataio/autolabel
.br
generates an ascii file that tells the Autolabel 2000 labeler how to print the
labels.  It prints the PLDnumber on the first line and the PLDlabel on the
second line (maximum 10 chars/line). It is invoked by
.IP
autolabel PLDNUMBER PLDLABEL PINCOUNT PARTWIDTH 
.RE
where 
.RS
.IP PLDNUMBER 15 
is the SGI programmed part number, e.g. 
.I 070-0378-002,\^ 
.IP PLDLABEL 15
is the label of the PLD, e.g. 
.I CPUINT,\^ 
.IP PINCOUNT 15 
is the number of pins on the PLD, e.g. 
.I 24,\^ 
and 
.IP PARTWIDTH 15
is the width of the PLD part, usually .300 (most DIPs) or .600 (EPROMS)
.RE
.br
\fIautolabel\fP generates the file $PLDNUMBER.label
.br
/usr/local/bin/dataio/small_label
.br
generates an ascii file that tells the Autolabel 2000 labeler how to print the
labels.  It prints the PLDnumber on the first line and the PLDlabel on the
second line (maximum 8 chars/line). It is invoked the same as \fIautolabel\fP 
described above.
