# rules.unix - host specific rules
#
# modification history
# --------------------
# 01e,04nov95,p_m  took care of missing files in docs rule
# 01d,06jul95,jcf  made sed script global.
# 01c,21jun95,yp   added sed script to prevent hardwiring depend. list.
# 01b,10jun95,yp   changed TARGET_DIR to BSP_NAME
# 01a,01jun95,yp   created
#
# DESCRIPTION
# This file contains rules that are host specific to the unix platform.

## documentation build targets

man	: $(MAN1)/$(TARGET_DIR).1 docs

docs	:
	@- (doc_files="$(DOC_FILES)" ; \
	echo -n "Processing " ; \
	for file in $$doc_files ; do \
		if [ -f $$file.c ];\
		then \
		    echo -n "$$file " ; \
		    $(CPP) -E -C -DDOC -I../../src/drv/ $$file.c 1> \
			$$file.i 2> /dev/null ; \
		    $(MG) -p $(TARGET_DIR) $$file.i ; \
		    $(RM) $$file.i ; \
		fi  \
	done ; \
	echo "complete." )

$(MAN1)/$(TARGET_DIR).1	: target.nr
	$(CP) $? $@

#
# It is possible to generate dependency lists automatically by depending on 
# a make include file:
#
#     with: 		GNU make, SunOS 4.x/5.x make.
#     but not with: 	clearmake, HPUX 9.x make, and probably plenty of others.
#
# If depend.$(BSP_NAME) has been removed and you are haplessly without
# a copy of GNU make:
#
#	% # In the BSP in question...
#	% touch depend.$(BSP_NAME)
#	% make depend.$(BSP_NAME)
#	% make
#
# Order in the Universe should be restored.
#

depend.$(BSP_NAME) :
	$(CC)  -M $(CFLAGS) *.c ../all/*.c \
	| sed -e "s:$(WIND_BASE):$$(WIND_BASE):g" > $@
	$(CPP) -M $(CASFLAGS) romInit.s \
	| sed -e "s:$(WIND_BASE):$$(WIND_BASE):g" >> $@
	$(CPP) -M $(CASFLAGS) sysALib.s \
	| sed -e "s:$(WIND_BASE):$$(WIND_BASE):g" >> $@

# XXX generic rule for assembly files forthcoming

include depend.$(BSP_NAME)
