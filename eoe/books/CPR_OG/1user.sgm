<!-- Produced by version 3.13 (01/04/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="1"><TITLE><XREFTARGET ID="51170">Using Checkpoint and Restart</TITLE><PARAGRAPH>IRIX Checkpoint and Restart (CPR) is a facility for saving a running process or set of processes and, at some later time, restarting the saved process or processes from the point already reached, without starting all over again. The checkpoint image is saved in a set of disk files, and restarted by reading saved state from these files to resume execution.<INDEXTARGET ID="1user1"><!-- POSTPROCESSDATA: 1user1|checkpoint and restart, defined --></PARAGRAPH>
<PARAGRAPH>The <COMMAND>cpr</COMMAND> command provides a command-line interface for checkpointing, restarting checkpointed processes, checking the status of checkpoint and restart operations, and deleting files that contain images of checkpointed processes.<INDEXTARGET ID="1user2"><!-- POSTPROCESSDATA: 1user2|<COMMAND>cpr</COMMAND> command --></PARAGRAPH>
<PARAGRAPH>Checkpointing is useful for halting and continuing resource-intensive programs that take a long time to run. IRIX CPR can help when you need to:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>improve a system's load balancing and scheduling</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>run complex simulation or modelling applications</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>replace hardware for high-availability or failsafe applications</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Processes can continue to run after checkpoint, and can be checkpointed multiple times.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE>Definition of Terms</TITLE><PARAGRAPH>A <ITALICS>statefile</ITALICS> is a directory containing information about a process or set of processes (including the names of open files and system objects). Statefiles contain all available information about a running process, to enable restart. The new process(es) should behave just as if the old process(es) had continued. Statefiles are stored as files inside a directory, and are protected by normal IRIX security mechanisms.<INDEXTARGET ID="1user3"><!-- POSTPROCESSDATA: 1user3|statefile, defined --></PARAGRAPH>
<PARAGRAPH>A <ITALICS>checkpoint owner</ITALICS> is the owner of all checkpointed processes and the resulting statefiles. Only the checkpoint owner or superuser is permitted to perform a checkpoint. If targeted processes have multiple owners, only the superuser is permitted to checkpoint them. Only the checkpoint owner or superuser can restart checkpointed process(es) from a statefile. If the superuser performed a checkpoint, only the superuser can restart it.<INDEXTARGET ID="1user4"><!-- POSTPROCESSDATA: 1user4|checkpoint owner, defined --></PARAGRAPH>
<PARAGRAPH>A <ITALICS>process group</ITALICS> is a set of processes that constitute a logical job&mdash;they share the same process group ID. For example, modern UNIX shells arrange pipelined programs into a process group, so they all can be suspended and managed with the shell's job control facilities. You can determine the process group ID using the <CMDLINEOPT>-j</CMDLINEOPT> option of the <COMMAND>ps</COMMAND> command; see <REFPAGE>ps(1)</REFPAGE>. Programmers can change the process group ID using the <FUNCTION>setpgid()</FUNCTION> system call; see <REFPAGE>setpgid(2)</REFPAGE>.<INDEXTARGET ID="1user5"><!-- POSTPROCESSDATA: 1user5|process group, defined --></PARAGRAPH>
<PARAGRAPH>A <ITALICS>process session</ITALICS> is a set of processes started from the same physical or logical terminal. Such processes share the same session ID. You can determine the process group ID and the session ID (SID) of any process by giving the <CMDLINEOPT>-j</CMDLINEOPT> option to the <COMMAND>ps</COMMAND> command; see <REFPAGE>ps(1)</REFPAGE>. Programmers can change the session ID using the <FUNCTION>setsid()</FUNCTION> system call; see <REFPAGE>setsid(2)</REFPAGE>.<INDEXTARGET ID="1user6"><!-- POSTPROCESSDATA: 1user6|process session, defined --></PARAGRAPH>
<PARAGRAPH>An <ITALICS>IRIX array session </ITALICS>is a set of conceptually related processes running on different nodes in an array. Support is provided by the array services daemon, which knows about array configuration and provides functions for describing and administering the processes of a single job. The principal use of array services is to run jobs that are large enough to span two or more machines.<INDEXTARGET ID="1user7"><!-- POSTPROCESSDATA: 1user7|IRIX array session, defined array session, defined --></PARAGRAPH>
<PARAGRAPH>A <ITALICS>process hierarchy </ITALICS>is the set of all child processes with a common parent. The process hierarchy is identified by giving the process ID of the parent process. A process session is one example of a process hierarchy, but by no means the only example.<INDEXTARGET ID="1user8"><!-- POSTPROCESSDATA: 1user8|process hierarchy, defined --></PARAGRAPH>
<PARAGRAPH>A <ITALICS>share group</ITALICS> is a group of processes created from a common ancestor by <FUNCTION>sproc()</FUNCTION> system calls; see sproc(2). The <FUNCTION>sproc()</FUNCTION> call is like <FUNCTION>fork()</FUNCTION>, except that after <FUNCTION>sproc()</FUNCTION>, the new child process can share the virtual address space of the parent process. The parent and child each have their own program counter value and stack pointer, but text and data space are visible to both processes. This provides a mechanism for building parallel programs.<INDEXTARGET ID="1user9"><!-- POSTPROCESSDATA: 1user9|sproc share group, defined share group, defined --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Verifying eoe.sw.cpr</TITLE><PARAGRAPH>To verify that CPR runs on your system, check that the eoe.sw.cpr subsystem is installed:<INDEXTARGET ID="1user10"><!-- POSTPROCESSDATA: 1user10|eoe.sw.cpr subsystem --></PARAGRAPH>
<CODE>
$ <USERINPUT>versions eoe.sw.cpr</USERINPUT>&space;
I = Installed, R = Removed
&space;  Name                 Date      Description
I  eoe                  09/28/96  IRIX Execution Environment, 6.3
I  eoe.sw               09/14/96  IRIX Execution Environment Software
I  eoe.sw.cpr           09/14/96  Checkpoint and Restart
</CODE>
<PARAGRAPH>If no CPR subsystem is installed, see <XREF IDREF="41739" TYPE="TITLE">&ldquo;Installing eoe.sw.cpr&rdquo;</XREF> for instructions on installing CPR.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Checkpointing Processes</TITLE><PARAGRAPH>To checkpoint a set of processes (one process or more), employ the <CMDLINEOPT>-c</CMDLINEOPT> option of the <INDEXTARGET ID="1user11"><!-- POSTPROCESSDATA: 1user11|-c option (checkpoint) --><COMMAND>cpr</COMMAND> command, providing a <FILENAME>statefile</FILENAME> name, and specifying a process ID with the <CMDLINEOPT>-p</CMDLINEOPT> option. For example, to checkpoint process 111 into statefile <INDEXTARGET ID="1user12"><!-- POSTPROCESSDATA: 1user12|-p option (process ID) --><FILENAME>ckptSep7</FILENAME>, type this command:<INDEXTARGET ID="1user13"><!-- POSTPROCESSDATA: 1user13|checkpointing processes --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c ckptSep7 -p 1111</USERINPUT>
</CODE>
<PARAGRAPH>To checkpoint all processes in a process group, type the process group ID (for example, 123) followed by the :GID modifier:<INDEXTARGET ID="1user14"><!-- POSTPROCESSDATA: 1user14|GID modifier --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;-p 123:GID</USERINPUT>
</CODE>
<PARAGRAPH>To checkpoint all processes in a process session, type the process session ID (for example, 345) followed by the :SID modifier:<INDEXTARGET ID="1user15"><!-- POSTPROCESSDATA: 1user15|SID modifier --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;-p 345:SID</USERINPUT>
</CODE>
<PARAGRAPH>To checkpoint all processes in an IRIX array session, type the array session ID (for example, 0x8000abcd00001111) followed by the :ASH modifier:<INDEXTARGET ID="1user16"><!-- POSTPROCESSDATA: 1user16|ASH modifier --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;-p 0x8000abcd00001111:ASH</USERINPUT>
</CODE>
<PARAGRAPH>To checkpoint all processes in a process hierarchy, type the parent process ID (for example, 567) followed by the :HID modifier:<INDEXTARGET ID="1user17"><!-- POSTPROCESSDATA: 1user17|HID modifier --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;-p 567:HID</USERINPUT>
</CODE>
<PARAGRAPH>To checkpoint all processes in an <FUNCTION>sproc()</FUNCTION> share group, type the share group ID (for example, 789) followed by the :SGP modifier:<INDEXTARGET ID="1user18"><!-- POSTPROCESSDATA: 1user18|SGP modifier --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;-p 789:SGP</USERINPUT>
</CODE>
<PARAGRAPH>It is possible to combine process designators using the comma separator, as in the following example. All processes are recorded in the same <FILENAME>statefile</FILENAME>.</PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -c ckptSep8 -p 1113,1225,1397:HID</USERINPUT>
</CODE>
<SECTION2 LBL="" HELPID = ""><TITLE>Naming the Checkpoint Image</TITLE><PARAGRAPH>You can place the <FILENAME>statefile</FILENAME> anywhere, provided you have write permission for the target directory, and provided there is enough disk space to store the checkpoint images. You might want to include the date as part of the <FILENAME>statefile</FILENAME> name, or you might want to number <FILENAME>statefiles</FILENAME> consecutively. The <CMDLINEOPT>-f</CMDLINEOPT> option forces overwrite of an existing <FILENAME>statefile</FILENAME>.<INDEXTARGET ID="1user19"><!-- POSTPROCESSDATA: 1user19|-f option (force overwrite) --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Job Control Shells</TITLE><PARAGRAPH>The C shell (<COMMAND>csh</COMMAND>), Korn shell (<COMMAND>ksh</COMMAND> or, after IRIX 6.3, <COMMAND>sh</COMMAND>), Tops C shell (<COMMAND>tcsh</COMMAND>), and GNU shell (<COMMAND>bash</COMMAND>) all support job control. The Bourne shell (<INDEXTARGET ID="1user20"><!-- POSTPROCESSDATA: 1user20|C shell Korn shell --><COMMAND>bsh</COMMAND>, formerly <COMMAND>sh</COMMAND>) does not. Jobs can be suspended with <INDEXTARGET ID="1user21"><!-- POSTPROCESSDATA: 1user21|Bourne shell --><SCREENDISPLAY>Ctrl+Z</SCREENDISPLAY>, backgrounded with the <COMMAND>bg</COMMAND> built-in command, or foregrounded with <COMMAND>fg</COMMAND>. All job control shells provide the <COMMAND>jobs</COMMAND> built-in command with an <CMDLINEOPT>-l</CMDLINEOPT> option to list process ID numbers, and a <CMDLINEOPT>-p</CMDLINEOPT> option to show the process group ID of a job.<INDEXTARGET ID="1user22"><!-- POSTPROCESSDATA: 1user22|job control shells shells and job control --></PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Restarting Processes</TITLE><PARAGRAPH>To restart a set of processes (one process or more), employ the <CMDLINEOPT>-r </CMDLINEOPT>option of the <INDEXTARGET ID="1user23"><!-- POSTPROCESSDATA: 1user23|-r option (restart) --><COMMAND>cpr</COMMAND> command, providing just the <FILENAME>statefile</FILENAME> name. For example, to restart the set of processes checkpointed in <FILENAME>ckptSep7</FILENAME>, type this command:<INDEXTARGET ID="1user24"><!-- POSTPROCESSDATA: 1user24|restarting processes --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -j -r ckptSep7 </USERINPUT>
</CODE>
<PARAGRAPH>Use the <CMDLINEOPT>-j</CMDLINEOPT> option if you want to perform interactive job control after restart. Otherwise, the process group restored belongs to <COMMAND>init</COMMAND>, effectively disabling job control.<INDEXTARGET ID="1user25"><!-- POSTPROCESSDATA: 1user25|-j option (interactive job control) --></PARAGRAPH>
<PARAGRAPH>You may restart more than one <FILENAME>statefile</FILENAME> with the same <COMMAND>cpr</COMMAND> command. If a restart involves more than one process, all restarts must succeed before any process is allowed to run; otherwise all restarts fail. Restart failure can occur for any of the following reasons:<INDEXTARGET ID="1user26"><!-- POSTPROCESSDATA: 1user26|restart failure, reasons failure to restart, reasons --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>unavailable PID </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The original process ID is not available (already in use), and the option to allow ANY process ID was not in effect.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>component unavailable </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Application binaries or libraries are no longer available on the system, and neither the REPLACE nor SUBSTITUTE option was in effect.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>security and data integrity </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user lacks proper permission to restart the <FILENAME>statefile</FILENAME>, or the restart will destroy or replace data without proper authorization. Only the checkpoint owner and the superuser may restart a set of processes.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>resource limitation</HANGITEM>
<HANGBODY><PARAGRAPH> &lbreak;System resources such as disk space, memory (swap space), or number of processes allowed, ran out during restart.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>other fatal failure </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Some important part of a process restart failed for unknown reasons.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<SECTION2 LBL="" HELPID = ""><TITLE>Persistence of Statefiles</TITLE><PARAGRAPH>The <FILENAME>statefile</FILENAME> remains unchanged after restart&mdash;<COMMAND>cpr</COMMAND> does not delete it automatically. To free disk space, use the <CMDLINEOPT>-D</CMDLINEOPT> option of <COMMAND>cpr</COMMAND>; see the section <XREF IDREF="40587" TYPE="TITLE">&ldquo;Deleting Statefiles.&rdquo;</XREF>&space;<INDEXTARGET ID="1user27"><!-- POSTPROCESSDATA: 1user27|persistence of statefiles statefile persistence --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Job Control Option</TITLE><PARAGRAPH>If a checkpoint is issued against an interactive process or a group of processes rooted at an interactive process, it can be restarted interactively with the <CMDLINEOPT>-j</CMDLINEOPT> option. This option makes processes interactive and job-controllable. The restarted processes run in the foreground, even the original ones ran in the background. Users may issue job control signals to background the process if desired. An interactive job is defined as a process with a controlling terminal; see <REFPAGE>termio(7)</REFPAGE>. Only one controlling terminal is restored even if the original process had multiple controlling terminals.<INDEXTARGET ID="1user28"><!-- POSTPROCESSDATA: 1user28|-j option (interactive job control) --></PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Querying Checkpoint Status</TITLE><PARAGRAPH>To obtain information about checkpoint status, employ the <CMDLINEOPT>-i </CMDLINEOPT>option of the <INDEXTARGET ID="1user29"><!-- POSTPROCESSDATA: 1user29|-i option (status information) --><COMMAND>cpr</COMMAND> command, providing the <FILENAME>statefile</FILENAME> name. You may query more than one <FILENAME>statefile</FILENAME> at a time. For example, to get information about the set of processes checkpointed in <FILENAME>ckptSep7</FILENAME>, either before or after restart, type this command:<INDEXTARGET ID="1user30"><!-- POSTPROCESSDATA: 1user30|status of checkpoint querying checkpoint status --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -i ckptSep7 </USERINPUT>
</CODE>
<PARAGRAPH>This displays information about the <FILENAME>statefile </FILENAME>revision number, process names, credential information for the processes, the current working directory, open file information, the time when the checkpoint was done, and so forth.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="40587">Deleting Statefiles</TITLE><PARAGRAPH>To delete a <FILENAME>statefile</FILENAME> and its associated open files and system objects, use the <CMDLINEOPT>-D </CMDLINEOPT>option of the <INDEXTARGET ID="1user31"><!-- POSTPROCESSDATA: 1user31|-D option (delete statefile) --><COMMAND>cpr</COMMAND> command, providing a <FILENAME>statefile</FILENAME> name. You may delete more than one <FILENAME>statefile</FILENAME> at a time. For example, to delete the file <FILENAME>ckptSep7</FILENAME>, type this command:<INDEXTARGET ID="1user32"><!-- POSTPROCESSDATA: 1user32|deleting statefiles statefile deletion --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -D ckptSep7 </USERINPUT>
</CODE>
<PARAGRAPH>Only the checkpoint owner and the superuser may delete a <FILENAME>statefile</FILENAME> directory. Once a checkpoint statefile has been deleted, restart is no longer possible.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Graphical Interface&mdash;cview</TITLE><PARAGRAPH>The <COMMAND>cview</COMMAND> command brings up a graphical interface for CPR and provides access to all features of the <INDEXTARGET ID="1user33"><!-- POSTPROCESSDATA: 1user33|<COMMAND>cview</COMMAND> command --><COMMAND>cpr</COMMAND> command. Online help is available. The checkpoint control panel, shown in <INDEXTARGET ID="1user34"><!-- POSTPROCESSDATA: 1user34|graphical user interface, <COMMAND>cview</COMMAND> --><XREF IDREF="50722" TYPE="GRAPHIC">Figure&nbsp;1-1</XREF>, displays a list of processes that may be checkpointed.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="checkpoint.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="1-1"><PREFIX>Figure 1-1 </PREFIX><XREFTARGET ID="50722">Checkpoint Control Panel (<COMMAND>cview</COMMAND>)</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Checkpoint options may be set in step II, and are explained in the section <XREF IDREF="59841" TYPE="TITLE">&ldquo;Checkpoint and Restart Attributes.&rdquo;</XREF> Click the right tab at the bottom to switch panels.</PARAGRAPH>
<PARAGRAPH>The restart control panel, shown in <XREF IDREF="78584" TYPE="GRAPHIC">Figure&nbsp;1-2</XREF>, displays a list of statefiles that may be restarted. The buttons near the bottom query checkpoints and delete statefiles.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="restart.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="1-2"><PREFIX>Figure 1-2 </PREFIX><XREFTARGET ID="78584">Restart Control Panel (<COMMAND>cview</COMMAND>)</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="59841">Checkpoint and Restart Attributes</TITLE><PARAGRAPH>The <COMMAND>cpr</COMMAND> command reads an attribute file at start-up time to set checkpoint configuration and control restart behavior. Typical defaults are given in the <FILENAME>/etc/cpr_proto</FILENAME> sample file. You can control CPR behavior by creating a similar <INDEXTARGET ID="1user35"><!-- POSTPROCESSDATA: 1user35|/etc/cpr_proto sample file attribute file, CPR --><FILENAME>.cpr</FILENAME> attribute file in your home directory (if $HOME is not set, <COMMAND>cpr</COMMAND> consults the password entry). The CPR attribute file consists of one or more CKPT attribute definitions, each in the following format:<INDEXTARGET ID="1user36"><!-- POSTPROCESSDATA: 1user36|.cpr attribute file $HOME/.cpr attribute file --><INDEXTARGET ID="1user37"><!-- POSTPROCESSDATA: 1user37|CKPT attribute definitions --></PARAGRAPH>
<CODE>
CKPT IDtype IDvalue {
&space;   policy:  instance:  action
&space;   ...
}
</CODE>
<PARAGRAPH>Possible values for <VARIABLE>IDtype</VARIABLE>&space;are similar to process ID modifiers for the <INDEXTARGET ID="1user38"><!-- POSTPROCESSDATA: 1user38|IDtype modifier options --><CMDLINEOPT>-c</CMDLINEOPT> option of <COMMAND>cpr</COMMAND>, and are shown in <XREF IDREF="66931" TYPE="TABLE">Table&nbsp;1-1</XREF>. <VARIABLE>IDvalue</VARIABLE>&space;specifies the process ID or process set ID.<INDEXTARGET ID="1user39"><!-- POSTPROCESSDATA: 1user39|IDvalue process set ID --></PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="1-1"><PREFIX>Table 1-1 </PREFIX><XREFTARGET ID="66931">IDtype Modifier Options</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="30"><PARAGRAPH>IDtype</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>Process Type Designation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>PID</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>UNIX process ID or POSIX thread ID.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>GID</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>UNIX process group ID; see <REFPAGE>setpgrp(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>SID</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>UNIX process session ID; see <REFPAGE>setsid(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>ASH</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>IRIX array session ID; see <REFPAGE>array_sessions(5)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>HID</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>Process hierarchy (tree) rooted at the given process ID.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>SGP</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>IRIX <FUNCTION>sproc()</FUNCTION> shared group; see <REFPAGE>sproc(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="30"><PARAGRAPH>*</PARAGRAPH>
</CELL>
<CELL LEFT="35" WIDTH="225"><PARAGRAPH>A wild card for anything.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The <VARIABLE>policy </VARIABLE>lines inside the CKPT block specify default actions for CPR to take. Possible values for <VARIABLE>policy</VARIABLE>&space;are shown in <INDEXTARGET ID="1user40"><!-- POSTPROCESSDATA: 1user40|policy names and actions --><XREF IDREF="79618" TYPE="TABLE">Table&nbsp;1-2</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="1-2"><PREFIX>Table 1-2 </PREFIX><XREFTARGET ID="79618">Policy Names and Actions</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="54"><PARAGRAPH>Policy Name</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Domain of Action</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="54"><PARAGRAPH>FILE</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Policies for handling open files.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="54"><PARAGRAPH>WILL</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Actions on the original process after checkpoint.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="54"><PARAGRAPH>CDIR</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Policy on the original working directory; see <REFPAGE>chdir(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="54"><PARAGRAPH>RDIR</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Policy on the original root directory; see <REFPAGE>chroot(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="54"><PARAGRAPH>FORK</PARAGRAPH>
</CELL>
<CELL LEFT="60" WIDTH="220"><PARAGRAPH>Policy on original process ID.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<SECTION2 LBL="" HELPID = ""><TITLE>FILE Policy</TITLE><PARAGRAPH>The FILE policy is the only one that takes an optional <VARIABLE>instance</VARIABLE> field. This field specifies files that have a unique disposition, other than the default action. For example, in one case you want to replace a file, but in another case you want to append to a file. The <VARIABLE>instance</VARIABLE> field is enclosed in double quotes and may contain wildcards. For example, <SCREENDISPLAY>/tmp/*</SCREENDISPLAY> identifies all files in the <FILENAME>/tmp</FILENAME> directory, and <SCREENDISPLAY>/*</SCREENDISPLAY> identifies all files in the system.<INDEXTARGET ID="1user41"><!-- POSTPROCESSDATA: 1user41|FILE policy action keywords --></PARAGRAPH>
<PARAGRAPH>The following <VARIABLE>action</VARIABLE> keywords are available for the FILE policy:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>MERGE</HANGITEM>
<HANGBODY><PARAGRAPH>No explicit file save at checkpoint. Upon restart, reopen the file and seek to the previous offset. This is the default file disposition. It may be used for files that are not modified after checkpoint, or for files where it is acceptable to overwrite changes made between checkpoint and restart time, particularly past the saved offset point. If programs seek before writing, changes preceding the offset point could be overwritten as well.<INDEXTARGET ID="1user42"><!-- POSTPROCESSDATA: 1user42|MERGE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>IGNORE </HANGITEM>
<HANGBODY><PARAGRAPH>No explicit file save at checkpoint. Upon restart, reopen the file as it was originally opened, at offset zero (even if originally opened for append). If the file was originally opened for writing, as with the <FUNCTION>fopen()</FUNCTION> &ldquo;w&rdquo; or &ldquo;a&rdquo; flag, this action has the effect of overwriting the entire file.<INDEXTARGET ID="1user43"><!-- POSTPROCESSDATA: 1user43|IGNORE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>APPEND </HANGITEM>
<HANGBODY><PARAGRAPH>No explicit file save at checkpoint. Upon restart, append to the end of the file. This disposition is good for log files.<INDEXTARGET ID="1user44"><!-- POSTPROCESSDATA: 1user44|APPEND action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>REPLACE </HANGITEM>
<HANGBODY><PARAGRAPH>Explicitly save the file at checkpoint. Upon restart, replace the original file with the saved one. Any changes made to the original file between checkpoint and restart time are overwritten by the saved file.<INDEXTARGET ID="1user45"><!-- POSTPROCESSDATA: 1user45|REPLACE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>SUBSTITUTE</HANGITEM>
<HANGBODY><PARAGRAPH>Explicitly save the file at checkpoint. Upon restart, reopen the saved file as an anonymous substitution for the original file. This is similar to the REPLACE mode except that the original file remains untouched, unless specifically altered by the program.<INDEXTARGET ID="1user46"><!-- POSTPROCESSDATA: 1user46|SUBSTITUTE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>WILL Policy</TITLE><PARAGRAPH>The following <VARIABLE>action</VARIABLE> keywords are available for the WILL policy:<INDEXTARGET ID="1user47"><!-- POSTPROCESSDATA: 1user47|WILL policy action keywords --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>EXIT</HANGITEM>
<HANGBODY><PARAGRAPH>The original process exits after checkpoint. This is the default action.<INDEXTARGET ID="1user48"><!-- POSTPROCESSDATA: 1user48|EXIT action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>KILL</HANGITEM>
<HANGBODY><PARAGRAPH>Same as above. Has the same effect as the <INDEXTARGET ID="1user49"><!-- POSTPROCESSDATA: 1user49|KILL action keyword --><COMMAND>cpr</COMMAND>&space;<CMDLINEOPT>-k</CMDLINEOPT> option.<INDEXTARGET ID="1user50"><!-- POSTPROCESSDATA: 1user50|-k option (kill process) --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CONT</HANGITEM>
<HANGBODY><PARAGRAPH>The original process continues to run after checkpoint. Has the same effect as the <INDEXTARGET ID="1user51"><!-- POSTPROCESSDATA: 1user51|CONT action keyword --><COMMAND>cpr</COMMAND>&space;<CMDLINEOPT>-g</CMDLINEOPT> option.<INDEXTARGET ID="1user52"><!-- POSTPROCESSDATA: 1user52|-g option (go continue) --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>CDIR or RDIR Policy</TITLE><PARAGRAPH>The following <VARIABLE>action</VARIABLE> keywords are available for the CDIR and RDIR policies:<INDEXTARGET ID="1user53"><!-- POSTPROCESSDATA: 1user53|CDIR policy action keywords RDIR policy action keywords --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>REPLACE </HANGITEM>
<HANGBODY><PARAGRAPH>Set the current working directory (CDIR) or the root directory (RDIR) to those of the original process. This is the default action.<INDEXTARGET ID="1user54"><!-- POSTPROCESSDATA: 1user54|REPLACE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>IGNORE </HANGITEM>
<HANGBODY><PARAGRAPH>Ignore the current working directory (CDIR) or the root directory (RDIR) of the original process, and restart processes based on the current working directory or the root directory of the new process environment.<INDEXTARGET ID="1user55"><!-- POSTPROCESSDATA: 1user55|IGNORE action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>FORK Policy</TITLE><PARAGRAPH>The following <VARIABLE>action</VARIABLE> keywords are available for the FORK policy:<INDEXTARGET ID="1user56"><!-- POSTPROCESSDATA: 1user56|FORK policy action keywords --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>ORIGINAL</HANGITEM>
<HANGBODY><PARAGRAPH>Do a special <FUNCTION>fork()</FUNCTION> to recover the original process ID. This is the default action.<INDEXTARGET ID="1user57"><!-- POSTPROCESSDATA: 1user57|ORIGINAL action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>ANY</HANGITEM>
<HANGBODY><PARAGRAPH>This says it is acceptable for the application to have any process ID as its underlying process if the original process ID is already taken by another running process. In other words, the application itself, internally and in its relationship to other processes, is PID-unaware. If a set of processes is PID-unaware, the ANY action can be specified to avoid PID collisions.<INDEXTARGET ID="1user58"><!-- POSTPROCESSDATA: 1user58|ANY action keyword --></PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>There is no attribute equivalent to the <COMMAND>cpr</COMMAND>&space;<CMDLINEOPT>-u</CMDLINEOPT> option for operating system upgrade.<INDEXTARGET ID="1user59"><!-- POSTPROCESSDATA: 1user59|-u option (upgrade OS) --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Example Attribute File</TITLE><PARAGRAPH>The <FILENAME>$HOME/cpr</FILENAME> file specifies a user's CPR default attributes. Here is an example of a custom <INDEXTARGET ID="1user60"><!-- POSTPROCESSDATA: 1user60|.cpr attribute file attribute file, CPR --><FILENAME>.cpr</FILENAME> attribute file:<INDEXTARGET ID="1user61"><!-- POSTPROCESSDATA: 1user61|.cpr example $HOME/.cpr example --></PARAGRAPH>
<CODE>
CKPT PID 1111 {
&space;   FILE:   "/tmp/*":   REPLACE
&space;   WILL                CONT
&space;   FORK                ANY
}
</CODE>
<PARAGRAPH>This saves and restores all <FILENAME>/tmp</FILENAME> files, allows the process to continue after checkpoint, and permits process ID substitution if needed.</PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
