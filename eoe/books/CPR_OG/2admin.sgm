<!-- Produced by version 3.13 (01/04/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="2"><TITLE><XREFTARGET ID="60915">Administering Checkpoint and Restart</TITLE><SECTION1 LBL="" HELPID = ""><TITLE>Responsibilities of the Administrator</TITLE><PARAGRAPH>IRIX Checkpoint and Restart (CPR) adds the following responsibilities to the system administrator's already long list:<INDEXTARGET ID="2admin1"><!-- POSTPROCESSDATA: 2admin1|responsibilities of administrator system administrator responsibilities --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>install CPR software on server systems as required</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>help users employ CPR on server systems and workstations</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>prevent statefiles from filling up available disk space</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>delete, or encourage users to delete, unneeded old statefiles</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="41739">Installing eoe.sw.cpr</TITLE><PARAGRAPH>The subsystems that make up CPR are listed in <INDEXTARGET ID="2admin2"><!-- POSTPROCESSDATA: 2admin2|eoe.sw.cpr subsystem --><XREF IDREF="70036" TYPE="TABLE">Table&nbsp;2-1</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="2-1"><PREFIX>Table 2-1 </PREFIX><XREFTARGET ID="70036">CPR Product Subsystems</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="72"><PARAGRAPH>Subsystem Name</PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="169"><PARAGRAPH>Contents</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="72"><PARAGRAPH>eoe.sw.cpr</PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="169"><PARAGRAPH>Checkpoint and restart software.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="72"><PARAGRAPH>eoe.man.cpr</PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="169"><PARAGRAPH>CPR reference manual pages.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="72"><PARAGRAPH>eoe.books.cpr</PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="169"><PARAGRAPH>This guide as an IRIS InSight document.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>If CPR is not already installed, follow this procedure to install the software:<INDEXTARGET ID="2admin3"><!-- POSTPROCESSDATA: 2admin3|installing checkpoint and restart --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Load the IRIX software distribution CD-ROM.<INDEXTARGET ID="2admin4"><!-- POSTPROCESSDATA: 2admin4|IRIX software distribution CDROM CDROM containing IRIX --></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>On the server, become superuser and invoke the <COMMAND>inst </COMMAND>command, specifying the location of the CD-ROM software distribution:</PARAGRAPH>
<CODE>
$ <USERINPUT>/bin/su -</USERINPUT>&space;
Password:
# <USERINPUT>inst -f /CDROM/dist </USERINPUT>
</CODE>
</LIST>
<LIST><PARAGRAPH>Prevent installation of all default subsystems using the <COMMAND>keep </COMMAND>subcommand:<INDEXTARGET ID="2admin5"><!-- POSTPROCESSDATA: 2admin5|<COMMAND>inst</COMMAND> command --></PARAGRAPH>
<CODE>
Inst> <USERINPUT>keep *</USERINPUT>
</CODE>
<PARAGRAPH>For additional information on <COMMAND>inst</COMMAND>, see the<DOCTITLE>&space;IRIX Admin: Software Installation and Licensing Guide</DOCTITLE>, or the <REFPAGE>inst(1M)</REFPAGE> reference page.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Make subsystem selections. To install CPR software, the reference manual pages, and the CPR manuals for IRIS InSight, enter these commands:</PARAGRAPH>
<CODE>
Inst> <USERINPUT>install eoe.*.cpr </USERINPUT>
Inst> <USERINPUT>list i</USERINPUT>
Inst> <USERINPUT>go</USERINPUT>&space;
</CODE>
<PARAGRAPH>The <COMMAND>list </COMMAND>subcommand with the <CMDLINEOPT>i</CMDLINEOPT> argument displays all the subsystems marked for installation. The <COMMAND>go</COMMAND> subcommand starts installation, which takes some time.</PARAGRAPH>
<PARAGRAPH>For additional information on available subsystems, see the <DOCTITLE>IRIX Release Notes</DOCTITLE>.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Ensure that the following line exists in the <FILENAME>/var/sysgen/system/irix.sm</FILENAME> file (change <SCREENDISPLAY>cprstub</SCREENDISPLAY> to <SCREENDISPLAY>cpr</SCREENDISPLAY> if necessary):</PARAGRAPH>
<CODE>
USE: cpr 
</CODE>
</LIST>
</ORDEREDLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Managing Checkpoint Images</TITLE><PARAGRAPH>Because of their potential size and longevity, checkpoint images (statefiles) are one aspect of CPR where intervention by the system administrator may be required.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Statefile Location and Content</TITLE><PARAGRAPH>The statefile can exist anywhere on a filesystem where the user has write permission, provided there is enough disk space to store it. Statefiles tend to be slightly larger than their checkpointed process.<INDEXTARGET ID="2admin6"><!-- POSTPROCESSDATA: 2admin6|statefile location and content --></PARAGRAPH>
<PARAGRAPH>As the system administrator, you might want to create a policy saying that checkpoint images stored in temporary directories (such as <FILENAME>/tmp</FILENAME> or <FILENAME>/var/spool</FILENAME>) are not guaranteed to remain there. If users want to preserve a statefile indefinitely, they should place it in a permanent directory that they own themselves, such as their home directory.</PARAGRAPH>
<PARAGRAPH>Checkpoint images contain much information about a process, including process set IDs, copies of user data and stack memory, kernel execution states, signal vectors, a list of open files and devices, pipeline setup, shared memory, array job states, and so on. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Monitoring a Checkpoint</TITLE><PARAGRAPH>To obtain information about a statefile directory, run the <COMMAND>cpr</COMMAND> command with the <CMDLINEOPT>-i </CMDLINEOPT>option:<INDEXTARGET ID="2admin7"><!-- POSTPROCESSDATA: 2admin7|-i option (status information) --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -i </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;... </USERINPUT>
</CODE>
<PARAGRAPH>This displays information about the statefile revision number, process names, credential information for the processes, the current working directory, open file information, the time when the checkpoint was done, and so forth.<INDEXTARGET ID="2admin8"><!-- POSTPROCESSDATA: 2admin8|monitoring a checkpoint information about statefiles --></PARAGRAPH>
<PARAGRAPH>There is no automated way to tell if a user has restarted a statefile or not. You need to ask.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Removing Statefiles</TITLE><PARAGRAPH>First check with the checkpoint owner to request that they remove unneeded statefiles. If there is no reply, and checkpoints are overflowing disk space, look for the oldest statefiles, especially ones in a series, as the best candidates for removal.<INDEXTARGET ID="2admin9"><!-- POSTPROCESSDATA: 2admin9|removing statefiles --></PARAGRAPH>
<PARAGRAPH>To delete an entire statefile directory, run the <COMMAND>cpr</COMMAND> command with the <CMDLINEOPT>-D</CMDLINEOPT> option:<INDEXTARGET ID="2admin10"><!-- POSTPROCESSDATA: 2admin10|-D option (delete statefile) --></PARAGRAPH>
<CODE>
$ <USERINPUT>cpr -D </USERINPUT><VARIABLE>statefile</VARIABLE><USERINPUT>&space;... </USERINPUT>
</CODE>
<PARAGRAPH>Only the checkpoint owner and the superuser may delete a statefile. Once a checkpoint has been deleted, it cannot be restarted until the statefile is restored from backups.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Disabling User Checkpoints</TITLE><PARAGRAPH>If you want to restrict user access to CPR, or if some users abuse the facility by leaving around large statefile directories, you can follow this procedure:<INDEXTARGET ID="2admin11"><!-- POSTPROCESSDATA: 2admin11|disabling user checkpoints preventing checkpoint usage --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Create a &ldquo;cpr&rdquo; group in the CPR server's <FILENAME>/etc/group</FILENAME> file, listing the users who should have access to CPR.<INDEXTARGET ID="2admin12"><!-- POSTPROCESSDATA: 2admin12|group cpr, creating users in cpr group --></PARAGRAPH>
<CODE>
cpr::100:<VARIABLE>user1</VARIABLE>,<VARIABLE>user2</VARIABLE>,<VARIABLE>user3</VARIABLE>,<VARIABLE>user4</VARIABLE>,<VARIABLE>user5</VARIABLE>,<VARIABLE>user6</VARIABLE>&space;
</CODE>
</LIST>
<LIST><PARAGRAPH>Make the <COMMAND>cpr</COMMAND> command group &ldquo;cpr&rdquo; and mode 4750.</PARAGRAPH>
<CODE>
# <USERINPUT>chgrp cpr /usr/sbin/cpr</USERINPUT>&space;
# <USERINPUT>chmod 4750 /usr/sbin/cpr</USERINPUT>&space;
</CODE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>To temporarily disable CPR, make the <FILENAME>/usr/sbin/cpr</FILENAME> command 000 mode. To permanently shut off CPR, use the <COMMAND>inst</COMMAND> command to remove the eoe.sw.cpr subsystem.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Checkpointable Objects</TITLE><PARAGRAPH>The following system objects are checkpoint safe. See <XREF IDREF="63883" TYPE="TITLE">&ldquo;Checkpoint-Safe Objects&rdquo;</XREF> for complete coverage of checkpoint safety.<INDEXTARGET ID="2admin13"><!-- POSTPROCESSDATA: 2admin13|checkpointable objects --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>UNIX processes, process groups, terminal control sessions, IRIX array sessions, process hierarchies, <FUNCTION>sproc()</FUNCTION> groups (see <REFPAGE>sproc(2)</REFPAGE>), and random process sets</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>all user memory area, including user stack and data regions</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>system states, including process and user information, signal disposition and signal mask, scheduling information, owner credentials, accounting data, resource limits, current directory, root directory, locked memory, and user semaphores</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>system calls, if applications handle return values and error numbers correctly, although slow system calls may return partial results</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>undelivered and queued signals are saved at checkpoint and delivered at restart</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>open files (including NFS-mounted files), mapped files, file locks, and inherited file descriptors; this includes open pipes with pipeline data</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>special files <FILENAME>/dev/tty</FILENAME>, <FILENAME>/dev/console</FILENAME>, <FILENAME>/dev/zero</FILENAME>, <FILENAME>/dev/null</FILENAME>, and <REFPAGE>ccsync(7M)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>System V shared memory (but the original shared memory ID is not restored); see shmop(2)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>jobs started with CHALLENGEarray services, provided they have a unique ASH number; see <REFPAGE>array_services(5)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>applications using the <FUNCTION>prctl()</FUNCTION> PR_ATTACHADDR option; see <REFPAGE>prctl(2)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>applications using <FUNCTION>blockproc()</FUNCTION> and <FUNCTION>unblockproc()</FUNCTION>; see <REFPAGE>blockproc(2)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the Power Fortran join synchronization accelerator; see <REFPAGE>ccsync(7M)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>R10000 counters; see <REFPAGE>libperfex(3C)</REFPAGE> and <REFPAGE>perfex(1)</REFPAGE></PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Non-Checkpointable Objects</TITLE><PARAGRAPH>The following system objects are not checkpoint safe. See <XREF IDREF="95268" TYPE="TITLE">&ldquo;Limitations and Caveats&rdquo;</XREF> for more complete coverage of unsupported system objects.<INDEXTARGET ID="2admin14"><!-- POSTPROCESSDATA: 2admin14|non-checkpointable objects --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>network socket connections; see <REFPAGE>socket(2)</REFPAGE></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>X terminals and X11 client sessions</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>special devices such as tape drivers and CD-ROM</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>files opened with setuid credential that cannot be reestablished</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>System V semaphores and messages (as opposed to System V shared memory); see <REFPAGE>semop(2)</REFPAGE> and <REFPAGE>msgop(2)</REFPAGE></PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Troubleshooting</TITLE><PARAGRAPH>This section provides a guide to various error messages that could appear during checkpoint and restart operations, and what these messages might indicate.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Failure to Checkpoint</TITLE><PARAGRAPH>Checkpointing can fail for any of the reasons shown in <INDEXTARGET ID="2admin15"><!-- POSTPROCESSDATA: 2admin15|troubleshooting checkpoint checkpoint failure messages failure to checkpoint, reasons --><XREF IDREF="29441" TYPE="TABLE">Table&nbsp;2-2</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="2-2"><PREFIX>Table 2-2 </PREFIX><XREFTARGET ID="29441">Checkpoint Failure Messages</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Error Message</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>Problem Indicated</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Permission denied</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>Search permission denied on a pathname component of statefile.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Resource busy</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>A resource required by the target process is in use by the system.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Checkpoint error</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>An uncheckpointable resource is associated with the target process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>File exists</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The pathname designated by statefile already exists.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Invalid argument</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>An invalid argument was passed to a function call.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Too many symbolic links</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>A symbolic link loop occurred during pathname resolution.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>No such file or directory</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The pathname to statefile is nonexistent.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Not a directory</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>A component of the path prefix is not a directory.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Filename too long</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The pathname to statefile exceeds the maximum length allowed.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>No space left on device</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>Space remaining on disk is insufficient for the statefile.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Operation not permitted</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The calling process does not have appropriate privileges.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>Read-only file system</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The requested statefile would reside on a read-only filesystem.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="105"><PARAGRAPH>No such process</PARAGRAPH>
</CELL>
<CELL LEFT="110" WIDTH="273"><PARAGRAPH>The process or process group specified by ID does not exist.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Failure to Restart</TITLE><PARAGRAPH>Restart can fail for any of the reasons shown in <INDEXTARGET ID="2admin16"><!-- POSTPROCESSDATA: 2admin16|troubleshooting restart restart failure messages failure to restart, reasons --><XREF IDREF="13781" TYPE="TABLE">Table&nbsp;2-3</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="2-3"><PREFIX>Table 2-3 </PREFIX><XREFTARGET ID="13781">Restart Failure Messages</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Error Message</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>Problem Indicated</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Permission denied</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>Search permission denied on a path component of statefile.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Resource temporarily unavailable</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>Total number of processes for user exceeds system limit.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Checkpoint error</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>An unrestartable resource is associated with target process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Resource deadlock avoided</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>Attempted locking of a system resource would have resulted 
in a deadlock situation.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Invalid argument</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>An invalid argument was passed to the function call.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Too many symbolic links</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>A symbolic link loop occurred during pathname resolution.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Filename too long</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>The pathname to statefile exceeds the maximum length.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>No such file or directory</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>The pathname to statefile is nonexistent.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Not enough space</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>Restarting the target process requires more memory than 
allowed by the hardware or by available swap space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Not a directory</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>A component of the path prefix is not a directory.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="140"><PARAGRAPH>Operation not permitted</PARAGRAPH>
</CELL>
<CELL LEFT="145" WIDTH="245"><PARAGRAPH>The real user ID of the calling process does not match the real 
user ID of one or more processes recorded in the checkpoint, 
or the calling process does not have appropriate privileges to 
restart one or more of the target processes.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
</SECTION1>
</CHAPTER>
