%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.5
%%For: () ()
%%Title: (hi.lev.overview.pci.bus.ai)
%%CreationDate: (2/8/96) ( 7:20 AM)
%%BoundingBox: 136 222 438 528
%%DocumentProcessColors: Magenta Yellow Black
%%DocumentFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%DocumentCustomColors: (blue)
%%+ (brown)
%%+ (copper)
%%+ (custom black)
%%+ (dark green)
%%+ (purple)
%%+ (yellow)
%%CMYKCustomColor: 1 0 0 0 (blue)
%%+ 0.5 0.75 1 0.35 (brown)
%%+ 0.05 0.65 0.8 0 (copper)
%%+ 0 0 0 1 (custom black)
%%+ 0.25 0.55 1 0.4 (dark gold)
%%+ 1 0 0.8 0.25 (dark green)
%%+ 0.25 0.25 0.5 0.25 (equipment grey)
%%+ 0.05 0.5 0.8 0 (flesh)
%%+ 0.15 0.55 1 0 (gold)
%%+ 1 1 0 0 (purple)
%%+ 0 0.15 1 0 (yellow)
%AI3_TemplateBox: 279 364 279 364
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Header
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			break
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
u
0 O
0 0.15 1 0.25 k
0 R
0 G
0 i
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
279 253.415 m
279 240.7483 L
288.1875 236.0833 L
288.1875 248.75 L
279 253.415 L
b
267.6875 259.0175 m
267.6875 246.3508 L
276.875 241.6858 L
276.875 254.3525 L
267.6875 259.0175 L
b
256.375 264.62 m
256.375 251.9533 L
265.5625 247.2883 L
265.5625 259.955 L
256.375 264.62 L
b
222.5 281.3626 m
222.5 268.6959 L
254.25 252.8908 L
254.25 265.5575 L
222.5 281.3626 L
b
U
u
0.5 0.75 1 0.35 (brown) 0.25 x
340.8125 222.4718 m
340.8125 240.0625 L
354.3136 246.7615 L
354.3136 229.1708 L
340.8125 222.4718 L
b
0.5 0.75 1 0.35 (brown) 0.5 x
340.8125 240.0625 m
182.8324 319.0387 L
196.3333 325.7375 L
354.3136 246.7615 L
340.8125 240.0625 L
b
u
0 0.15 1 0.25 k
279 290.3317 m
279 277.665 L
288.1875 273 L
288.1875 285.6667 L
279 290.3317 L
b
267.6875 295.9342 m
267.6875 283.2675 L
276.875 278.6025 L
276.875 291.2692 L
267.6875 295.9342 L
b
256.375 301.5366 m
256.375 288.87 L
265.5625 284.205 L
265.5625 296.8717 L
256.375 301.5366 L
b
222.5 318.2792 m
222.5 305.6126 L
254.25 289.8075 L
254.25 302.4741 L
222.5 318.2792 L
b
U
0.5 0.75 1 0.35 (brown) 0 x
340.8125 222.4718 m
182.8324 301.448 L
182.8324 319.0387 L
340.8125 240.0625 L
340.8125 222.4718 L
b
U
u
0.5 0.75 1 0.35 (brown) 0.25 x
340.8125 258.9718 m
340.8125 276.5625 L
354.3136 283.2615 L
354.3136 265.6708 L
340.8125 258.9718 L
b
0.5 0.75 1 0.35 (brown) 0.5 x
340.8125 276.5625 m
182.8324 355.5387 L
196.3333 362.2375 L
354.3136 283.2615 L
340.8125 276.5625 L
b
u
0 0.15 1 0.25 k
279 326.7134 m
279 314.0467 L
288.1875 309.3817 L
288.1875 322.0484 L
279 326.7134 L
b
267.6875 332.3159 m
267.6875 319.6492 L
276.875 314.9842 L
276.875 327.6509 L
267.6875 332.3159 L
b
256.375 337.9184 m
256.375 325.2517 L
265.5625 320.5867 L
265.5625 333.2534 L
256.375 337.9184 L
b
222.5 354.661 m
222.5 341.9943 L
254.25 326.1892 L
254.25 338.8559 L
222.5 354.661 L
b
U
0.5 0.75 1 0.35 (brown) 0 x
340.8125 258.9718 m
182.8324 337.948 L
182.8324 355.5387 L
340.8125 276.5625 L
340.8125 258.9718 L
b
U
0.05 0.65 0.8 0 (copper) 0 x
305.6867 476.6819 m
300.0625 473.8925 L
315.5 466 L
321.1242 468.7608 L
305.6867 476.6819 L
f
u
0.05 0.65 0.8 0 (copper) 1 x
143.3021 375.8905 m
136.2718 379.3773 L
403.0417 512.9846 L
410.0719 509.5337 L
143.3021 375.8905 L
f
u
0.05 0.65 0.8 0 (copper) 0.9615 x
0.5 w
144.1323 376.3064 m
137.1031 379.7932 L
402.2002 512.563 L
409.2261 509.1132 L
144.1323 376.3064 L
f
0.05 0.65 0.8 0 (copper) 0.9231 x
0.5 w
144.9625 376.7224 m
137.9344 380.2092 L
401.3588 512.1415 L
408.3802 508.6927 L
144.9625 376.7224 L
f
0.05 0.65 0.8 0 (copper) 0.8846 x
145.7924 377.1381 m
138.7654 380.6249 L
400.5176 511.72 L
407.5347 508.2724 L
145.7924 377.1381 L
f
0.05 0.65 0.8 0 (copper) 0.8461 x
0.5 w
146.6226 377.5541 m
139.5967 381.0409 L
399.6761 511.2985 L
406.6889 507.8519 L
146.6226 377.5541 L
f
0.05 0.65 0.8 0 (copper) 0.8077 x
147.4525 377.9698 m
140.4277 381.4566 L
398.835 510.8771 L
405.8434 507.4316 L
147.4525 377.9698 L
f
0.05 0.65 0.8 0 (copper) 0.7692 x
0.5 w
148.2827 378.3858 m
141.259 381.8726 L
397.9935 510.4555 L
404.9976 507.0111 L
148.2827 378.3858 L
f
0.05 0.65 0.8 0 (copper) 0.7308 x
149.1126 378.8015 m
142.09 382.2883 L
397.1524 510.0341 L
404.152 506.5908 L
149.1126 378.8015 L
f
0.05 0.65 0.8 0 (copper) 0.6923 x
0.5 w
149.9429 379.2175 m
142.9213 382.7042 L
396.3109 509.6125 L
403.3062 506.1703 L
149.9429 379.2175 L
f
0.05 0.65 0.8 0 (copper) 0.6538 x
0.5 w
150.7731 379.6334 m
143.7526 383.1202 L
395.4694 509.1909 L
402.4604 505.7498 L
150.7731 379.6334 L
f
0.05 0.65 0.8 0 (copper) 0.6154 x
151.603 380.0492 m
144.5836 383.5359 L
394.6283 508.7695 L
401.6149 505.3295 L
151.603 380.0492 L
f
0.05 0.65 0.8 0 (copper) 0.5769 x
0.5 w
152.4332 380.4651 m
145.4149 383.9519 L
393.7868 508.3479 L
400.7691 504.909 L
152.4332 380.4651 L
f
0.05 0.65 0.8 0 (copper) 0.5385 x
153.2631 380.8809 m
146.2459 384.3676 L
392.9457 507.9265 L
399.9235 504.4887 L
153.2631 380.8809 L
f
0.05 0.65 0.8 0 (copper) 0.5 x
0.5 w
154.0933 381.2968 m
147.0772 384.7835 L
392.1042 507.5049 L
399.0777 504.0682 L
154.0933 381.2968 L
f
0.05 0.65 0.8 0 (copper) 0.4615 x
0.5 w
154.9235 381.7127 m
147.9085 385.1995 L
391.2627 507.0834 L
398.2319 503.6477 L
154.9235 381.7127 L
f
0.05 0.65 0.8 0 (copper) 0.4231 x
155.7534 382.1285 m
148.7395 385.6152 L
390.4216 506.662 L
397.3864 503.2274 L
155.7534 382.1285 L
f
0.05 0.65 0.8 0 (copper) 0.3846 x
0.5 w
156.5836 382.5444 m
149.5708 386.0312 L
389.5801 506.2404 L
396.5406 502.8069 L
156.5836 382.5444 L
f
0.05 0.65 0.8 0 (copper) 0.3462 x
157.4135 382.9602 m
150.4017 386.4469 L
388.739 505.819 L
395.695 502.3865 L
157.4135 382.9602 L
f
0.05 0.65 0.8 0 (copper) 0.3077 x
0.5 w
158.2437 383.3761 m
151.2331 386.8629 L
387.8975 505.3974 L
394.8492 501.966 L
158.2437 383.3761 L
f
0.05 0.65 0.8 0 (copper) 0.2692 x
159.0736 383.7919 m
152.064 387.2786 L
387.0564 504.976 L
394.0037 501.5457 L
159.0736 383.7919 L
f
0.05 0.65 0.8 0 (copper) 0.2308 x
0.5 w
159.9039 384.2078 m
152.8953 387.6945 L
386.2149 504.5544 L
393.1579 501.1252 L
159.9039 384.2078 L
f
0.05 0.65 0.8 0 (copper) 0.1923 x
0.5 w
160.7341 384.6238 m
153.7266 388.1105 L
385.3734 504.1328 L
392.3121 500.7047 L
160.7341 384.6238 L
f
0.05 0.65 0.8 0 (copper) 0.1539 x
161.564 385.0395 m
154.5576 388.5262 L
384.5323 503.7114 L
391.4665 500.2844 L
161.564 385.0395 L
f
0.05 0.65 0.8 0 (copper) 0.1154 x
0.5 w
162.3942 385.4555 m
155.3889 388.9422 L
383.6908 503.2899 L
390.6207 499.8639 L
162.3942 385.4555 L
f
0.05 0.65 0.8 0 (copper) 0.0769 x
163.2241 385.8712 m
156.2199 389.3579 L
382.8496 502.8684 L
389.7752 499.4436 L
163.2241 385.8712 L
f
0.05 0.65 0.8 0 (copper) 0.0385 x
0.5 w
164.0543 386.2872 m
157.0512 389.7739 L
382.0082 502.4469 L
388.9294 499.0231 L
164.0543 386.2872 L
f
U
0.05 0.65 0.8 0 (copper) 0 x
0.5 w
164.8845 386.7031 m
157.8825 390.1898 L
381.1667 502.0253 L
388.0836 498.6026 L
164.8845 386.7031 L
f
310.2251 461.1535 m
304.6009 458.3641 L
354.0384 433.5342 L
359.6626 436.2949 L
310.2251 461.1535 L
f
U
216.1867 432.1819 m
210.5625 429.3925 L
226 421.5 L
231.6242 424.2608 L
216.1867 432.1819 L
f
u
1 1 0 0 (purple) 0.4 x
0 R
0 G
199.361 422.8515 m
199.361 438.4838 L
229.0496 453.3063 L
229.0496 437.6739 L
199.361 422.8515 L
b
1 1 0 0 (purple) 0.8 x
199.361 438.4838 m
155.9991 460.0178 L
185.6875 474.8401 L
229.0496 453.3063 L
199.361 438.4838 L
b
1 1 0 0 (purple) 0 x
199.361 422.8515 m
155.9991 444.3854 L
155.9991 460.0178 L
199.361 438.4838 L
199.361 422.8515 L
b
U
u
0.5 0.75 1 0.35 (brown) 0.25 x
340.8125 295.4718 m
340.8125 313.0625 L
354.3136 319.7615 L
354.3136 302.1708 L
340.8125 295.4718 L
b
0.5 0.75 1 0.35 (brown) 0.5 x
340.8125 313.0625 m
182.8324 392.0387 L
196.3333 398.7375 L
354.3136 319.7615 L
340.8125 313.0625 L
b
0.5 0.75 1 0.35 (brown) 0 x
340.8125 295.4718 m
182.8324 374.448 L
182.8324 392.0387 L
340.8125 313.0625 L
340.8125 295.4718 L
b
U
u
1 0 0.8 0.25 (dark green) 0.4 x
264 456 m
264 470.3355 L
330.2909 503.5 L
330.2909 489.1361 L
264 456 L
b
1 0 0.8 0.25 (dark green) 0.8 x
264 470.3355 m
216.7884 493.929 L
283.0793 527.0649 L
330.2909 503.5 L
264 470.3355 L
b
1 0 0.8 0.25 (dark green) 0 x
264 456 m
216.7884 479.5651 L
216.7884 493.929 L
264 470.3355 L
264 456 L
b
U
1 0 0 0 (blue) 0.4 x
453.3268 108.7205 m
453.3268 596.2795 L
121.6732 596.2795 L
121.6732 108.7205 L
453.3268 108.7205 L
(b) *
u
0 0 0 1 (custom black) 0.4 x
376.3233 396.5733 m
376.3233 407.0215 L
428.6605 433.0411 L
428.6605 422.5929 L
376.3233 396.5733 L
b
0 0 0 1 (custom black) 0.8 x
376.3233 407.0215 m
303.8037 443.481 L
356.1408 469.5004 L
428.6605 433.0411 L
376.3233 407.0215 L
b
0 0 0 1 (custom black) 0 x
376.3233 396.5733 m
303.8037 433.0328 L
303.8037 443.481 L
376.3233 407.0215 L
376.3233 396.5733 L
b
U
0 To
0.8945 -0.447 0 1 177.3333 438.1667 0 Tp
TP
-21.688 0 Td
0 Tr
1 g
1 w
/_Helvetica 8 Tf
0 Ts
95.0058 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(CPU module) Tx 
(\r) TX 
TO
0 To
0.8945 0.447 0 1 297.6667 477.5 0 Tp
TP
-13.8176 0 Td
0 Tr
0 g
(Memory) Tx 
(\r) TX 
TO
0 To
0.8943 0.4475 -0.8938 0.4485 365.6316 438 0 Tp
TP
-21.4893 0 Td
0 Tr
100 Tz
8 0 Tl
(PCI adapter\r) Tx 
-4.6924 -8 Td
(\(custom ASIC\)) Tx 
(\r) TX 
TO
u
0 0.15 1 0 (yellow) 0 x
0 R
0 G
0.5 w
254.25 360.96 m
254.25 371.46 254.25 378.96 269.75 386.46 c
338.25 420.705 L
306.5 436.5101 L
238 402.2651 l
222.5 394.7651 222.5 387.2651 222.5 376.7651 C
254.25 360.96 L
b
u
253.9835 361.4685 m
253.8585 368.781 254.6127 371.9754 256.0502 375.1629 C
224.6913 390.7097 L
223.2538 387.5222 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.0227 k
253.9835 361.4685 m
253.8585 368.781 254.5899 371.731 255.7093 374.5663 C
224.3504 390.1131 L
223.2311 387.2779 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.0455 k
253.9835 361.4685 m
253.8585 368.781 254.5672 371.4867 255.5558 374.2196 C
224.197 389.7665 L
223.2084 387.0335 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.0682 k
253.9835 361.4685 m
253.8585 368.781 254.5445 371.2424 255.3399 373.6855 C
223.9811 389.2324 L
223.1857 386.7893 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.0909 k
253.9835 361.4685 m
253.8585 368.781 254.5218 370.9981 255.1865 373.214 C
223.8277 388.7609 L
223.1629 386.545 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.1136 k
253.9835 361.4685 m
253.8585 368.781 254.499 370.7538 255.0331 372.5549 C
223.6743 388.1018 L
223.1402 386.3006 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.1364 k
253.9835 361.4685 m
253.8585 368.781 254.4763 370.5095 254.8797 371.9583 C
223.5209 387.5052 L
223.1175 386.0563 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.1591 k
253.9835 361.4685 m
253.8585 368.781 254.4536 370.2651 254.7888 371.4867 C
223.43 387.0335 L
223.0947 385.812 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.1818 k
253.9835 361.4685 m
253.8585 368.781 254.4309 370.0209 254.6354 370.9527 C
223.2766 386.4995 L
223.072 385.5677 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.2045 k
253.9835 361.4685 m
253.8585 368.781 254.4081 369.7765 254.4995 370.4128 C
223.1407 385.9596 L
223.0493 385.3234 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.2273 k
253.9835 361.4685 m
253.8585 368.781 254.3854 369.5322 254.4311 369.8503 C
223.0722 385.3972 L
223.0266 385.079 222.625 384.2651 222.75 376.9526 C
253.9835 361.4685 L
f
0 0.15 1 0.25 k
253.9835 361.4685 m
253.8585 368.781 254.3627 369.2879 Y
223.0038 384.8347 L
222.625 384.2651 222.75 376.9526 V
253.9835 361.4685 L
f
U
0 R
0 G
254.25 360.96 m
254.25 371.46 254.25 378.96 269.75 386.46 c
338.25 420.705 L
306.5 436.5101 L
238 402.2651 l
222.5 394.7651 222.5 387.2651 222.5 376.7651 C
254.25 360.96 L
s
U
0 To
0.8943 0.4475 -0.8938 0.4485 314.5 422 0 Tp
TP
-31.3398 0 Td
0 Tr
0 O
0 g
1 w
2 Ta
(AD[31:0]) Tx 
(\r) TX 
TO
0 To
0.8943 0.4475 -0.8938 0.4485 267.875 439.1766 0 Tp
TP
-21.0391 0 Td
0 Tr
1 g
1 Ta
(System bus) Tx 
(\r) TX 
TO
u
u
0 0.15 1 0 (yellow) 0 x
0 R
0 G
0.5 w
265.5625 355.3575 m
265.5625 365.8575 265.5625 373.3575 281.0625 380.8575 c
349.5625 415.1025 L
340.375 419.7675 L
271.875 385.5225 l
256.375 378.0225 256.375 370.5225 256.375 360.0225 C
265.5625 355.3575 L
b
U
u
265.2289 355.8348 m
265.1039 363.1473 265.858 366.3417 267.2955 369.5292 C
258.4992 373.936 L
257.0617 370.7485 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.0227 k
265.2289 355.8348 m
265.1039 363.1473 265.8353 366.0974 266.9546 368.9326 C
258.1583 373.3394 L
257.039 370.5041 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.0455 k
265.2289 355.8348 m
265.1039 363.1473 265.8126 365.853 266.8012 368.586 C
258.0049 372.9927 L
257.0163 370.2598 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.0682 k
265.2289 355.8348 m
265.1039 363.1473 265.7899 365.6087 266.5853 368.0519 C
257.789 372.4586 L
256.9935 370.0155 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.0909 k
265.2289 355.8348 m
265.1039 363.1473 265.7671 365.3644 266.4319 367.5804 C
257.6356 371.9871 L
256.9708 369.7712 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.1136 k
265.2289 355.8348 m
265.1039 363.1473 265.7444 365.1201 266.2785 366.9212 C
257.4822 371.328 L
256.9481 369.5269 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.1364 k
265.2289 355.8348 m
265.1039 363.1473 265.7217 364.8758 266.1251 366.3247 C
257.3288 370.7314 L
256.9253 369.2825 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.1591 k
265.2289 355.8348 m
265.1039 363.1473 265.699 364.6315 266.0342 365.853 C
257.2378 370.2598 L
256.9026 369.0382 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.1818 k
265.2289 355.8348 m
265.1039 363.1473 265.6762 364.3872 265.8808 365.319 C
257.0845 369.7258 L
256.8799 368.7939 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.2045 k
265.2289 355.8348 m
265.1039 363.1473 265.6535 364.1429 265.7449 364.7791 C
256.9485 369.1858 L
256.8572 368.5496 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.2273 k
265.2289 355.8348 m
265.1039 363.1473 265.6308 363.8985 265.6764 364.2166 C
256.8801 368.6234 L
256.8345 368.3053 256.4329 367.4913 256.5579 360.1788 C
265.2289 355.8348 L
f
0 0.15 1 0.25 k
265.2289 355.8348 m
265.1039 363.1473 265.608 363.6542 Y
256.8117 368.061 L
256.4329 367.4913 256.5579 360.1788 V
265.2289 355.8348 L
f
U
u
0 R
0 G
265.5625 355.3575 m
265.5625 365.8575 265.5625 373.3575 281.0625 380.8575 c
349.5625 415.1025 L
340.375 419.7675 L
271.875 385.5225 l
256.375 378.0225 256.375 370.5225 256.375 360.0225 C
265.5625 355.3575 L
s
U
U
0 To
0.8943 0.4475 -0.8938 0.4485 336.8205 410.8287 0 Tp
TP
-38.9512 0 Td
0 Tr
0 O
0 g
1 w
2 Ta
(C/BE#[3:0]) Tx 
(\r) TX 
TO
u
0 0.15 1 0 (yellow) 0 x
0 R
0 G
0.5 w
276.875 349.755 m
276.875 360.255 276.875 367.755 292.375 375.255 c
360.875 409.5 L
351.6875 414.165 L
283.1875 379.92 l
267.6875 372.42 267.6875 364.92 267.6875 354.42 C
276.875 349.755 L
b
u
276.6443 350.1728 m
276.5193 357.4853 277.2734 360.6797 278.7109 363.8672 C
269.9146 368.274 L
268.4771 365.0865 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.0227 k
276.6443 350.1728 m
276.5193 357.4853 277.2507 360.4354 278.37 363.2706 C
269.5737 367.6773 L
268.4544 364.8421 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.0455 k
276.6443 350.1728 m
276.5193 357.4853 277.228 360.191 278.2166 362.924 C
269.4203 367.3307 L
268.4317 364.5978 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.0682 k
276.6443 350.1728 m
276.5193 357.4853 277.2052 359.9467 278.0007 362.3899 C
269.2044 366.7966 L
268.4089 364.3535 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.0909 k
276.6443 350.1728 m
276.5193 357.4853 277.1825 359.7024 277.8473 361.9184 C
269.051 366.3251 L
268.3862 364.1092 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.1136 k
276.6443 350.1728 m
276.5193 357.4853 277.1598 359.4581 277.6939 361.2592 C
268.8976 365.666 L
268.3635 363.8649 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.1364 k
276.6443 350.1728 m
276.5193 357.4853 277.1371 359.2138 277.5405 360.6627 C
268.7442 365.0694 L
268.3407 363.6205 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.1591 k
276.6443 350.1728 m
276.5193 357.4853 277.1143 358.9695 277.4496 360.191 C
268.6532 364.5978 L
268.318 363.3762 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.1818 k
276.6443 350.1728 m
276.5193 357.4853 277.0916 358.7252 277.2962 359.657 C
268.4998 364.0638 L
268.2953 363.1319 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.2045 k
276.6443 350.1728 m
276.5193 357.4853 277.0689 358.4809 277.1602 359.1171 C
268.3639 363.5238 L
268.2726 362.8876 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.2273 k
276.6443 350.1728 m
276.5193 357.4853 277.0462 358.2365 277.0918 358.5546 C
268.2955 362.9614 L
268.2498 362.6433 267.8483 361.8293 267.9733 354.5168 C
276.6443 350.1728 L
f
0 0.15 1 0.25 k
276.6443 350.1728 m
276.5193 357.4853 277.0234 357.9922 Y
268.2271 362.399 L
267.8483 361.8293 267.9733 354.5168 V
276.6443 350.1728 L
f
U
0 R
0 G
276.875 349.755 m
276.875 360.255 276.875 367.755 292.375 375.255 c
360.875 409.5 L
351.6875 414.165 L
283.1875 379.92 l
267.6875 372.42 267.6875 364.92 267.6875 354.42 C
276.875 349.755 L
s
U
0 To
0.8943 0.4475 -0.8938 0.4485 348.141 405.1573 0 Tp
TP
-46.5488 0 Td
0 Tr
0 O
0 g
1 w
(INTA/B/C/D#) Tx 
(\r) TX 
TO
u
0 0.15 1 0 (yellow) 0 x
0 R
0 G
0.5 w
288.1875 344.1525 m
288.1875 354.6525 288.1875 362.1525 303.6875 369.6525 c
372.1875 403.8975 L
363 408.5625 L
294.5 374.3175 l
279 366.8175 279 359.3175 279 348.8175 C
288.1875 344.1525 L
b
u
287.845 344.5047 m
287.72 351.8172 288.4741 355.0116 289.9116 358.1991 C
281.1153 362.6058 L
279.6778 359.4183 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.0227 k
287.845 344.5047 m
287.72 351.8172 288.4514 354.7672 289.5707 357.6025 C
280.7743 362.0092 L
279.655 359.174 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.0455 k
287.845 344.5047 m
287.72 351.8172 288.4286 354.5229 289.4173 357.2558 C
280.6209 361.6626 L
279.6323 358.9297 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.0682 k
287.845 344.5047 m
287.72 351.8172 288.4059 354.2786 289.2013 356.7217 C
280.405 361.1285 L
279.6096 358.6853 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.0909 k
287.845 344.5047 m
287.72 351.8172 288.3832 354.0343 289.048 356.2502 C
280.2516 360.657 L
279.5869 358.4411 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.1136 k
287.845 344.5047 m
287.72 351.8172 288.3605 353.79 288.8945 355.5911 C
280.0982 359.9979 L
279.5641 358.1967 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.1364 k
287.845 344.5047 m
287.72 351.8172 288.3377 353.5457 288.7411 354.9945 C
279.9448 359.4013 L
279.5414 357.9524 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.1591 k
287.845 344.5047 m
287.72 351.8172 288.315 353.3013 288.6502 354.5229 C
279.8539 358.9297 L
279.5187 357.7081 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.1818 k
287.845 344.5047 m
287.72 351.8172 288.2923 353.057 288.4968 353.9889 C
279.7005 358.3956 L
279.4959 357.4638 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.2045 k
287.845 344.5047 m
287.72 351.8172 288.2695 352.8127 288.3609 353.449 C
279.5646 357.8557 L
279.4732 357.2195 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.2273 k
287.845 344.5047 m
287.72 351.8172 288.2468 352.5684 288.2925 352.8865 C
279.4962 357.2933 L
279.4505 356.9751 279.0489 356.1612 279.1739 348.8487 C
287.845 344.5047 L
f
0 0.15 1 0.25 k
287.845 344.5047 m
287.72 351.8172 288.2241 352.3241 Y
279.4278 356.7308 L
279.0489 356.1612 279.1739 348.8487 V
287.845 344.5047 L
f
U
0 R
0 G
288.1875 344.1525 m
288.1875 354.6525 288.1875 362.1525 303.6875 369.6525 c
372.1875 403.8975 L
363 408.5625 L
294.5 374.3175 l
279 366.8175 279 359.3175 279 348.8175 C
288.1875 344.1525 L
s
U
0 To
0.8943 0.4475 -0.8938 0.4485 359.4615 399.486 0 Tp
TP
-46.5527 0 Td
0 Tr
0 O
0 g
1 w
(Other control) Tx 
(\r) TX 
TO
0 To
1 0 0 1 437.0625 252.9375 0 Tp
TP
-50.1289 0 Td
0 Tr
(PCI card slots) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
354.5 311.5 m
383 255 l
S
354.375 274 m
383 255 l
354.5 237.25 l
S
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
