<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="6"><TITLE><XREFTARGET ID="51765">Control of External Interrupts</TITLE><PARAGRAPH>Some Silicon Graphics computer systems can generate and receive <GLOSSARYITEM>external interrupt</GLOSSARYITEM> signals. These are simple, two-state signal lines that cause an interrupt in the receiving system.<INDEXTARGET ID="06-ei1"><!-- POSTPROCESSDATA: 06-ei1|external interrupt --></PARAGRAPH>
<PARAGRAPH>The external interrupt hardware is managed by a kernel-level device driver that is distributed with IRIX and automatically configured when the system supports external interrupts. The driver provides two abilities to user-level processes:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The ability to change the state of an outgoing interrupt line, so as to interrupt the system to which the line is connected.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The ability to capture an incoming interrupt signal with low latency.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>External interrupt support is closely tied to the hardware of the system. The features described in this chapter are hardware-dependent and in many cases cannot be ported from one system type to another without making software changes. System architectures are covered in separate sections:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="74388" TYPE="TITLE">&ldquo;External Interrupts in Challenge and Onyx Systems&rdquo;</XREF> describes external interrupt support in that architectural family.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="21916" TYPE="TITLE">&ldquo;External Interrupts In Origin2000 and Origin200&rdquo;</XREF> describes external interrupt support in systems that use the IOC3 board.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74388">External Interrupts in Challenge and Onyx Systems</TITLE><PARAGRAPH>The hardware architecture of the Challenge/Onyx series supports external interrupt signals as follows:<INDEXTARGET ID="06-ei2"><!-- POSTPROCESSDATA: 06-ei2|external interrupt:Challenge architecture --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Four jacks for outgoing signals are available on the master IO4 board. A user-level program can change the level of these lines individually.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Two jacks for incoming interrupt signals are also provided. The input lines are combined with logical OR and presented as a single interrupt; a program cannot distinguish one input line from another.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The electrical interface to the external interrupt lines is documented at the end of the <REFPAGE>ei(7)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>A program controls the outgoing signals by interacting with the external interrupt device driver. This driver is associated with the device special file <FILENAME>/dev/ei</FILENAME>, and is documented in the <REFPAGE>ei(7)</REFPAGE> reference page. <INDEXTARGET ID="06-ei3"><!-- POSTPROCESSDATA: 06-ei3|device special file:<FILENAME>/dev/ei</FILENAME> --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17371">Generating Outgoing Signals</TITLE><PARAGRAPH>A program can generate an outgoing signal on any one of the four external interrupt lines. To do so, first open <INDEXTARGET ID="06-ei4"><!-- POSTPROCESSDATA: 06-ei4|external interrupt:generate --><FILENAME>/dev/ei</FILENAME>. Then apply <FUNCTION>ioctl()</FUNCTION> on the file descriptor to switch the outgoing lines. The principal ioctl command codes are summarized in <XREF IDREF="25812" TYPE="TABLE">Table&nbsp;6-1</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-1"><PREFIX>Table 6-1 </PREFIX><XREFTARGET ID="25812"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Outgoing External Signals in Challenge</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>Typical ioctl() Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set pulse width to <VARIABLE>N</VARIABLE> microseconds. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETOPW, <VARIABLE>N</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Return current output pulse width. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCGETOPW,&amp;<VARIABLE>var</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Send a pulse on some lines <VARIABLE>M</VARIABLE>.<TABLEXREF IDREF="06-eiTF0a">a</TABLEXREF>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSTROBE, <VARIABLE>M</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set a high (active, asserted) level on lines <VARIABLE>M</VARIABLE>. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETHI, <VARIABLE>M</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set a low (inactive, deasserted) level on lines <VARIABLE>M</VARIABLE>. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETLO, <VARIABLE>M</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
<TABLEFOOTNOTE LBL="a" ID="06-eiTF0a"><VARIABLE>M</VARIABLE> is an unsigned integer whose bits 0, 1, 2, and 3 correspond to the external interrupt lines 
0, 1, 2, and 3. At least one bit must be set.</TABLEFOOTNOTE>
</TABLE>
<PARAGRAPH>In the Challenge and Onyx series, the level on an outgoing external interrupt line is set directly from a CPU. The device driver generates a pulse (function EIIOCSTROBE) by asserting the line, then spinning in a disabled loop until the specified pulse time has elapsed, and finally deasserting the line. Clearly, if the pulse width is set to much more than the default of 5 microseconds, pulse generation could interfere with the handling of other interrupts in that CPU.</PARAGRAPH>
<PARAGRAPH>The calls to assert and deassert the outgoing lines (functions EIIOCSETHI and EIIOCSETLO) do not tie up the kernel. Direct assertion of the outgoing signal should be used only when the desired signal frequency and pulse duration are measured in milliseconds or seconds. No user-level program, running in a CPU that is not isolated and reserved, can hope to generate repeatable pulse durations measured in microseconds using these functions. (A single interrupt occurring between the call to assert the signal and the call to deassert it can stretch the intended pulse width by as much as 200 microseconds.) A real-time program, running in a CPU that is reserved and isolated from interrupts&mdash;perhaps a program that uses the Frame Scheduler&mdash;could generate repeatable millisecond-duration pulses using these functions.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="72633">Responding to Incoming External Interrupts</TITLE><PARAGRAPH>An important feature of the Challenge and Onyx external input line is that interrupts are triggered by the level of the signal, not by the transition from deasserted to asserted. This means that, whenever external interrupts are enabled and any of the input lines are in the asserted state, an external interrupt occurs. The interface between your program and the external interrupt device driver is affected by this hardware design. The functions for incoming signals are summarized in <INDEXTARGET ID="06-ei5"><!-- POSTPROCESSDATA: 06-ei5|external interrupt:input is level-triggered --><XREF IDREF="96694" TYPE="TABLE">Table&nbsp;6-2</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-2"><PREFIX>Table 6-2 </PREFIX><XREFTARGET ID="96694"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Incoming External Interrupts</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>Typical ioctl() Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Enable receipt of external interrupts. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCENABLE)&lbreak;eicinit();</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Disable receipt of external interrupts. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCDISABLE) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Specify which CPU will handle external 
interrupts. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCINTRCPU, <VARIABLE>cpu</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Specify which CPU will execute driver ioctl 
calls, or -1 for the CPU where the call is made. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETSYSCPU, <VARIABLE>cpu</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Block in the driver until an interrupt occurs. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCRECV, &amp;<VARIABLE>eiargs</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Request a signal when an interrupt occurs. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSTSIG, <VARIABLE>signumber</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Wait in an enabled loop for an interrupt. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>eicbusywait(1) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Set expected pulse width of incoming signal. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETIPW, <VARIABLE>microsec</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Set expected time between incoming signals. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETSPW, <VARIABLE>microsec</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="194"><PARAGRAPH>Return current expected time values. </PARAGRAPH>
</CELL>
<CELL LEFT="200" WIDTH="147"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCGETIPW, &amp;<VARIABLE>var</VARIABLE>)&lbreak;ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCGETSPW, &amp;<VARIABLE>var</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<SECTION3 LBL="" HELPID = ""><TITLE>Directing Interrupts to a CPU</TITLE><PARAGRAPH>In real-time applications, certain CPUs can be reserved for critical processing. In this case you may want to use EIIOCINTRCPU, either to direct interrupt handling away from a critical CPU, or to direct onto a CPU that you know has available capacity. Use of this ioctl requires installation of patch 1257 or a successor patch.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22749">Detecting Invalid External Interrupts</TITLE><PARAGRAPH>The external interrupt handler maintains two important numbers:<INDEXTARGET ID="06-ei6"><!-- POSTPROCESSDATA: 06-ei6|external interrupt:pulse widths --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the expected input pulse duration in microseconds</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the minimum pulse-to-pulse interval, called the &ldquo;stuck&rdquo; pulse width because it is used to detect when an input line is &ldquo;stuck&rdquo; in the asserted state</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>When the external interrupt device driver is entered to handle an interrupt, it waits with interrupts disabled until time equal to the expected input pulse duration has passed since the interrupt occurred. The default pulse duration is 5 microseconds, and it typically takes longer than this to recognize and process the interrupt, so no time is wasted in the usual case. However, if a long expected pulse duration is set, the interrupt handler might have to waste some cycles waiting for the end of the pulse.</PARAGRAPH>
<PARAGRAPH>At the end of the expected pulse duration, the interrupt handler counts one external interrupt and returns to the kernel, which enables interrupts and returns to the interrupted process.</PARAGRAPH>
<PARAGRAPH>Normally the input line is deasserted within the expected duration. However, if the input line is still asserted when the time expires, another external interrupt occurs immediately. The external interrupt handler notes that it has been reentered within the &ldquo;stuck&rdquo; pulse time since the last interrupt. It assumes that this is still the same input pulse as before. In order to prevent the stuck pulse from saturating the CPU with interrupts, the interrupt handler disables interrupts from the external interrupt signal.</PARAGRAPH>
<PARAGRAPH>External interrupts remain disabled for one timer tick (10 milliseconds). Then the device driver re-enables external interrupts. If an interrupt occurs immediately, the input line is still asserted. The handler disables external interrupts for another, longer delay. It continues to delay and to test the input signal in this manner until it finds the signal deasserted.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Setting the Expected Pulse Width</TITLE><PARAGRAPH>You can set the expected input pulse width and the minimum pulse-to-pulse time using <INDEXTARGET ID="06-ei7"><!-- POSTPROCESSDATA: 06-ei7|external interrupt:set pulse widths --><FUNCTION>ioctl()</FUNCTION>. For example, you could set the expected pulse width using a function like the one shown in <XREF IDREF="34610" TYPE="TEXT">Example&nbsp;6-1</XREF>.</PARAGRAPH>
<CODE><CAPTION LBL="6-1"><PREFIX>Example 6-1 </PREFIX><XREFTARGET ID="34610">Challenge Function to Test and Set External Interrupt Pulse Width</CAPTION>int setEIPulseWidth(int eifd, int newWidth)
{
&nbsp;&nbsp;&nbsp;int oldWidth;
&nbsp;&nbsp;&nbsp;if ( (0==ioctl(eifd, EIIOCGETIPW, &amp;oldWidth))
&nbsp;&nbsp;&nbsp;&amp;&amp; &nbsp;&nbsp;(0==ioctl(eifd, EIIOCSETIPW, newWidth)) )
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return oldWidth;
&nbsp;&nbsp;&nbsp;perror("setEIPulseWidth");
&nbsp;&nbsp;&nbsp;return 0;
}
</CODE>
<PARAGRAPH>The function retrieves the original pulse width and returns it. If either <FUNCTION>ioctl()</FUNCTION> call fails, it returns 0.</PARAGRAPH>
<PARAGRAPH>The default pulse width is 5 microseconds. Pulse widths shorter than 4 microseconds are not recommended.</PARAGRAPH>
<PARAGRAPH>Since the interrupt handler keeps interrupts disabled for the duration of the expected width, you want to specify as short an expected width as possible. However, it is also important that all legitimate input pulses terminate within the expected time. When a pulse persists past the expected time, the interrupt handler is likely to detect a &ldquo;stuck&rdquo; pulse, and disable external interrupts for several milliseconds.</PARAGRAPH>
<PARAGRAPH>Set the expected pulse width to the duration of the longest valid pulse. It is not necessary to set the expected width longer than the longest valid pulse. A few microseconds are spent just reaching the external interrupt handler, which provides a small margin for error.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Setting the Stuck Pulse Width</TITLE><PARAGRAPH>You can set the minimum pulse-to-pulse width using code like that in <XREF IDREF="34610" TYPE="TEXT">Example&nbsp;6-1</XREF>, using constants EIIOCGETSPW and EIIOCSETSPW.</PARAGRAPH>
<PARAGRAPH>The default stuck-pulse time is 500 microseconds. Set this time to the nominal pulse-to-pulse interval, minus the largest amount of &ldquo;jitter&rdquo; that you anticipate in the signal. In the event that external signals are not produced by a regular oscillator, set this value to the expected pulse width plus the duration of the shortest expected &ldquo;off&rdquo; time, with a minimum of twice the expected pulse width.</PARAGRAPH>
<PARAGRAPH>For example, suppose you expect the input signal to be a 10 microsecond pulse at 1000&nbsp;Hz, both numbers plus or minus 10%. Set the expected pulse width to 10&nbsp;microseconds to ensure that all pulses are seen to complete. Set the stuck pulse width to 900&nbsp;microseconds, so as to permit a legitimate pulse to arrive 10% early.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Receiving Interrupts</TITLE><PARAGRAPH>The external interrupt device driver offers you four different methods of receiving notification of an interrupt. You can</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>have a signal of your choice delivered to your process</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>test for interrupt-received using either an <FUNCTION>ioctl()</FUNCTION> call or a library function</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>sleep until an interrupt arrives or a specified time expires</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>spin-loop until an interrupt arrives</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>You would use a signal (EIIOCSETSIG) when interrupts are infrequent and irregular, and when it is not important to know the precise arrival time. Use a signal when, for example, the external interrupt represents a human-operated switch or some kind of out-of-range alarm condition.</PARAGRAPH>
<PARAGRAPH>The EIIOCRECV call can be used to poll for an interrupt. This is a relatively expensive method of polling because it entails entry to and exit from the kernel. The overhead is not significant if the polling is infrequent&mdash;for example, if one poll call is made every 60th of a second.</PARAGRAPH>
<PARAGRAPH>The EIIOCRECV call can be used to suspend the caller until an interrupt arrives or a timeout expires (see the <REFPAGE>ei(7)</REFPAGE> reference page for details). Use this method when interrupts arrive frequently enough that it is worthwhile devoting a process to handling them. An unknown amount of time can pass between the moment when the interrupt handler unblocks the process and the moment when the kernel dispatches the process. This makes it impossible to timestamp the interrupt at the microsecond level.</PARAGRAPH>
<PARAGRAPH>In order to poll for, or detect, an incoming interrupt with minimum overhead, use the library function <FUNCTION>eicbusywait()</FUNCTION> (see the <REFPAGE>ei(7)</REFPAGE> reference page). You use the <FUNCTION>eicinit()</FUNCTION> function to open <FILENAME>/dev/ei</FILENAME> and prepare to use <FUNCTION>eicbusywait()</FUNCTION>.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>eicbusywait()</FUNCTION> function does not switch into kernel mode, so it can perform a low-overhead poll for a received interrupt. If you ask it to wait until an interrupt occurs, it waits by spinning on a repeated test for an interrupt. This monopolizes the CPU, so this form of waiting is normally used by a process running in an isolated CPU. The benefit is that control returns to the calling process in negligible time after the interrupt handler detects the interrupt, so the interrupt can be handled quickly and timed precisely. </PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="21916">External Interrupts In Origin2000 and Origin200</TITLE><PARAGRAPH>The miscellaneous I/O attachment logic in the Origin2000 and Origin200 architecture is provided by the IOC3 ASIC. Among many other I/O functions, this chip dedicates one input line and one output line for external interrupts.<INDEXTARGET ID="06-ei8"><!-- POSTPROCESSDATA: 06-ei8|external interrupt:Origin2000 architecture --></PARAGRAPH>
<PARAGRAPH>There is one IOC3 chip on the motherboard in a Origin200 deskside unit. There is one IOC3 chip on the IO6 board which provides the base I/O functions in each Origin2000 module; hence in a Origin2000 system there can be as many unique external interrupt signal pairs as there are physical modules.</PARAGRAPH>
<PARAGRAPH>The electrical interface to the external interrupt line is documented at the end of the <REFPAGE>ei(7)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>A program controls the outgoing signals by interacting with the external interrupt device driver. This driver is associated with device special files <FILENAME>/hw/external_interrupt/</FILENAME><BOLD>n</BOLD>, where <VARIABLE>n</VARIABLE> is an integer. The name <FILENAME>/hw/external_interrupt/1</FILENAME> designates the only external interrupt device in a Origin200, or the external interrupt device on the system console module of a Origin2000 system.&space;<INDEXTARGET ID="06-ei9"><!-- POSTPROCESSDATA: 06-ei9|device special file:<FILENAME>/hw/external_interrupt</FILENAME> --></PARAGRAPH>
<PARAGRAPH>There is also a symbolic link <FILENAME>/dev/ei</FILENAME> that refers to <FILENAME>/hw/external_interrupt/1</FILENAME>. <INDEXTARGET ID="06-ei10"><!-- POSTPROCESSDATA: 06-ei10|device special file:<FILENAME>/dev/ei</FILENAME> --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Generating Outgoing Signals</TITLE><PARAGRAPH>A program can generate an outgoing signal&mdash;as a level, a pulse, a pulse train, or a square wave&mdash;on any external interrupt line. To do so, first open the device special file. Then apply <INDEXTARGET ID="06-ei11"><!-- POSTPROCESSDATA: 06-ei11|external interrupt:generate --><FUNCTION>ioctl()</FUNCTION> on the file descriptor to command the output.</PARAGRAPH>
<PARAGRAPH>A command to initiate one kind of output (level, pulse, pulse train or square wave) automatically terminates any other kind of output that might be going on. When all processes have closed the external interrupt device, the output line is forced to a low level.</PARAGRAPH>
<PARAGRAPH>In the Origin2000 and Origin200 systems, the level on an outgoing external interrupt line is set by the IOC3 chip. The device driver issues a command by PIO to the chip, and the pulse or level is generated asynchronously while control returns to the calling process. Owing to the speed of the R10000 CPU and its ability to do out-of-order execution, it is entirely possible for your program to enter the device driver, command a level, and receive control back to program code before the output line has had time to change state.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Generating Fixed Output Levels</TITLE><PARAGRAPH>The ioctl command codes for fixed output levels are summarized in <XREF IDREF="99188" TYPE="TABLE">Table&nbsp;6-3</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-3"><PREFIX>Table 6-3 </PREFIX><XREFTARGET ID="99188"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Fixed External Levels in Origin2000</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>Typical ioctl() Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set a high (active, asserted) level. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETHI) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set a low (inactive, deasserted) level. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="135"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETLO) </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Direct assertion of the outgoing signal (using EIIOCSETHI and EIIOCSETLO) should be used only when the desired signal frequency and pulse duration are measured in milliseconds or seconds. A typical user-level program, running in a CPU that is not isolated and reserved, cannot hope to generate repeatable pulse durations measured in microseconds using these functions. A real-time program, running in a CPU that is reserved and isolated from interrupts may be able to generate repeatable millisecond-duration pulses using these functions.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Generating Pulses and Pulse Trains</TITLE><PARAGRAPH>You can command single pulse of this width, or a train of pulses with a specified repetition period. The ioctl functions are summarized in <XREF IDREF="33976" TYPE="TABLE">Table&nbsp;6-4</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-4"><PREFIX>Table 6-4 </PREFIX><XREFTARGET ID="33976"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Pulses and Pulse Trains in Origin2000</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>Typical ioctl() Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set pulse width to <VARIABLE>N</VARIABLE> microseconds (ignored). </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETOPW, <VARIABLE>N</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Return current output pulse width (23). </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCGETOPW,&amp;<VARIABLE>var</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Send a 23.4 microsecond pulse. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSTROBE) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set the repetition interval to <VARIABLE>N</VARIABLE> microseconds. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETPERIOD, <VARIABLE>N</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Return the current repetition interval. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCGETPERIOD,&amp;<VARIABLE>var</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Initiate regular pulses at the current period. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCPULSE) </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The IOC3 supports only one pulse width: 23.4 microseconds. The EIIOCSETOPW command is accepted for compatibility with the Challenge driver, but is ignored. The EIIOCGETOPW function always returns 23 microseconds.</PARAGRAPH>
<PARAGRAPH>The repetition period can be as short as 23.4 microseconds (pass <VARIABLE>N</VARIABLE>=24) or as long as slightly more than 500000 microseconds (0.5 second). Any period is truncated to a multiple of 7,800 nanoseconds.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Generating a Square Wave</TITLE><PARAGRAPH>You can command a square wave at a specified frequency. The ioctl functions are summarized in <XREF IDREF="31757" TYPE="TABLE">Table&nbsp;6-5</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-5"><PREFIX>Table 6-5 </PREFIX><XREFTARGET ID="31757"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Outgoing External Signals in Origin2000</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>Typical ioctl() Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Set the toggle interval to <VARIABLE>N</VARIABLE> microseconds. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETPERIOD, <VARIABLE>N</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Return the current toggle interval. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCGETPERIOD,&amp;<VARIABLE>var</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="198"><PARAGRAPH>Initiate a square wave. </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="189"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSQUARE) </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The period set by EIIOCSETPERIOD determines the interval between changes of state on the output&mdash;in other words, the period of the square wave is twice the interval. The repetition period can be as short as 23.4 microseconds (pass <VARIABLE>N</VARIABLE>=24) or as long as slightly more than 500000 microseconds (0.5 second). Any period is truncated to a multiple of 23.4 microseconds. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="15842">Responding to Incoming External Interrupts</TITLE><PARAGRAPH>The IOC3 external input line (unlike the input to the Challenge and Onyx external input line) is edge-triggered by a transition to the asserted state, and has no dependence on the level of the signal. There is no concept of an &ldquo;expected&rdquo; pulse width or a &ldquo;stuck&rdquo; pulse width as in the Challenge (see <INDEXTARGET ID="06-ei12"><!-- POSTPROCESSDATA: 06-ei12|external interrupt:input is level-triggered --><XREF IDREF="22749" TYPE="TITLE">&ldquo;Detecting Invalid External Interrupts&rdquo;</XREF>).</PARAGRAPH>
<PARAGRAPH>The external interrupt device driver offers you four different methods of receiving notification of an interrupt. You can</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>have a signal of your choice delivered to your process</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>test for interrupt-received using either an <FUNCTION>ioctl()</FUNCTION> call or a library function</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>sleep until an interrupt arrives or a specified time expires</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>spin-loop until an interrupt arrives</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The functions for incoming signals are summarized in <XREF IDREF="86531" TYPE="TABLE">Table&nbsp;6-6</XREF>. The details of the function calls are found in the <REFPAGE>ei(7)</REFPAGE> reference page. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="6-6"><PREFIX>Table 6-6 </PREFIX><XREFTARGET ID="86531"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Incoming External Interrupts in Challenge</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Operation</PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>Typical Function Call</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Enable receipt of external interrupts. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCENABLE)</PARAGRAPH>
<PARAGRAPH>eicinit();</PARAGRAPH>
<PARAGRAPH><VARIABLE>eihandle</VARIABLE> = eicinit_f(<VARIABLE>eifd</VARIABLE>); </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Disable receipt of external interrupts. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCDISABLE) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Request a signal when an interrupt occurs, or clear 
that request by passing <VARIABLE>signumber</VARIABLE>=0. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>, EIIOCSETSIG, <VARIABLE>signumber</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Poll for an interrupt received. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>eicbusywait(0); </PARAGRAPH>
<PARAGRAPH>eicbusywait_f(<VARIABLE>eifd</VARIABLE>,0); </PARAGRAPH>
<PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCRECV,&amp;<VARIABLE>eiargs</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Block in the driver until an interrupt occurs, or 
until a specified time has elapsed. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>ioctl(<VARIABLE>eifd</VARIABLE>,EIIOCRECV,&amp;<VARIABLE>eiargs</VARIABLE>) </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="207"><PARAGRAPH>Wait in an enabled loop for an interrupt. </PARAGRAPH>
</CELL>
<CELL LEFT="215" WIDTH="180"><PARAGRAPH>eicbusywait(1); </PARAGRAPH>
<PARAGRAPH>eicbusywait_f(<VARIABLE>eihandle</VARIABLE>,1); </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>You would use a signal (EIIOCSETSIG) when interrupts are infrequent and irregular, and when it is not important to know the precise arrival time. Use a signal when, for example, the external interrupt represents a human-operated switch or some kind of out-of-range alarm condition.</PARAGRAPH>
<PARAGRAPH>The EIIOCRECV call can be used to poll for an interrupt. This is a relatively expensive method of polling because it entails entry to and exit from the kernel. This is not significant if the polling is infrequent&mdash;for example, if one poll call is made every 60th of a second.</PARAGRAPH>
<PARAGRAPH>The EIIOCRECV call can be used to suspend the caller until an interrupt arrives or a timeout expires (see the <REFPAGE>ei(7)</REFPAGE> reference page for details). Use this method when interrupts arrive frequently enough that it is worthwhile devoting a process to handling them. An unknown amount of time can pass between the moment when the interrupt handler unblocks the process and the moment when the kernel dispatches the process. This makes it impossible to timestamp the interrupt at the microsecond level.</PARAGRAPH>
<PARAGRAPH>In order to poll for, or detect, an incoming interrupt with minimum overhead, use the library function <FUNCTION>eicbusywait()</FUNCTION> (see the <REFPAGE>ei(7)</REFPAGE> reference page). You use the <FUNCTION>eicinit()</FUNCTION> function to open <FILENAME>/dev/ei</FILENAME> and prepare to use <FUNCTION>eicbusywait()</FUNCTION>; or you can open one of the other special device files and pass the file descriptor to <FUNCTION>eicinit_f()</FUNCTION>.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>eicbusywait()</FUNCTION> function does not switch into kernel mode, so it can perform a low-overhead poll for a received interrupt. If you ask it to wait until an interrupt occurs, it waits by spinning on a repeated test for an interrupt. This monopolizes the CPU, so this form of waiting is normally used by a process running in an isolated CPU. The benefit is that control returns to the calling process in negligible time after the interrupt handler detects the interrupt, so the interrupt can be handled quickly and timed precisely.&space;</PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
