<!-- Fragment document type declaration subset:
ArborText, Inc., 1988-1997, v.4001
<!DOCTYPE SGIDOCBK PUBLIC "-//Silicon Graphics, Inc.//DTD DocBook V2.3-based Subset V1.5//EN" [
<!ENTITY limits.domains SYSTEM "online/limits.domains.gif" NDATA gif>
<!ENTITY job.initiators SYSTEM "online/job.initiators.gif" NDATA gif>
<!ENTITY a11342.drw SYSTEM "a11342.drw" NDATA drw>
<!ENTITY a11934 SYSTEM "online/a11934.gif" NDATA gif>
<!ENTITY a11933 SYSTEM "online/a11933.gif" NDATA gif>
<!ENTITY a11932 SYSTEM "online/a11932.gif" NDATA gif>
<!ENTITY a11931 SYSTEM "online/a11931.gif" NDATA gif>
<!ENTITY a11930 SYSTEM "online/a11930.gif" NDATA gif>
<!ENTITY a11929 SYSTEM "online/a11929.gif" NDATA gif>
<!ENTITY a11928 SYSTEM "online/a11928.gif" NDATA gif>
<!ENTITY a11927 SYSTEM "online/a11927.gif" NDATA gif>
<!ENTITY a11926 SYSTEM "online/a11926.gif" NDATA gif>
<!ENTITY a11981 SYSTEM "online/a11981.gif" NDATA gif>
<!ENTITY AppA.sgml SYSTEM "AppA.sgml">
<!ENTITY a11342 SYSTEM "a11342" NDATA eps>
<!ENTITY a11342.eps SYSTEM "a11342.eps" NDATA eps>
<!ENTITY fig9 SYSTEM "online/fig9.gif" NDATA gif>
<!ENTITY fig8 SYSTEM "online/fig8.gif" NDATA gif>
<!ENTITY fig7 SYSTEM "online/fig7.gif" NDATA gif>
<!ENTITY fig6 SYSTEM "online/fig6.gif" NDATA gif>
<!ENTITY fig5 SYSTEM "online/fig5.gif" NDATA gif>
<!ENTITY fig4 SYSTEM "online/fig4.gif" NDATA gif>
<!ENTITY fig3 SYSTEM "online/fig3.gif" NDATA gif>
<!ENTITY fig2 SYSTEM "online/fig2.gif" NDATA gif>
<!ENTITY fig1 SYSTEM "online/fig1.gif" NDATA gif>
<!ENTITY a10111.gif SYSTEM "a10111.gif" NDATA gif>
<!ENTITY a10112.gif SYSTEM "a10112.gif" NDATA gif>
<!ENTITY a11292.gif SYSTEM "a11292.gif" NDATA gif>
<!ENTITY a11293.gif SYSTEM "a11293.gif" NDATA gif>
<!ENTITY a11294.gif SYSTEM "a11294.gif" NDATA gif>
<!ENTITY a11295.gif SYSTEM "a11295.gif" NDATA gif>
<!ENTITY a11296.gif SYSTEM "a11296.gif" NDATA gif>
<!ENTITY a11297.gif SYSTEM "a11297.gif" NDATA gif>
<!ENTITY chap05acct.sgml SYSTEM "chap05acct.sgml">
<!ENTITY chap04miser.sgml SYSTEM "chap04miser.sgml">
<!ENTITY chap03numa.sgml SYSTEM "chap03numa.sgml">
<!ENTITY chap02sched.sgml SYSTEM "chap02sched.sgml">
<!ENTITY chap01intro.sgml SYSTEM "chap01intro.sgml">
]>
-->
<?Pub Inc>
<chapter id="Z944582055tls" label="2">
<title>Job Limits</title>
<para><indexterm><primary>Job Limits</primary><secondary>introduction</secondary></indexterm>Standard system resource limits are set up so that each process receives the same process-based limits at the time the process is created. While limits on individual processes are useful, they do not restrict individual users to a given share of the system. With the IRIX kernel job limits feature, all processes associated with a particular login session or batch submission are encapsulated as a single logical
unit called a job. The job is the container used to group processes by login session. Limits on resource usage are applied on a per user basis for a particular job and these limits are enforced by the kernel. All processes are associated with a particular job and are identified by a unique job identifier (job ID). The processes belonging to a particular job can be limited, controlled, queried, and accounted for as a unit. This allows a system administrator to set job-specific limits on CPU time, memory,
file space, and other system resources. The user limits database (ULDB) allows user-specific limits for jobs. If no ULDB is defined, job limits are the same for all jobs. Job limits software can help maximize utilization of larger systems in a multiuser environment.</para>
<para>This chapter contains the following sections:<itemizedlist>
<listitem><para><xref linkend="Z944670089tls"></para>
</listitem>
<listitem><para><xref linkend="Z944002641tls"></para>
</listitem>
<listitem><para><xref linkend="Z944152453tls"></para>
</listitem>
<listitem><para><xref linkend="Z944073083tls"></para>
</listitem>
<listitem><para><xref linkend="Z944155578tls"></para>
</listitem>
<listitem><para><xref linkend="Z945381412tls"></para>
</listitem>
<listitem><para><xref linkend="Z944155618tls"></para>
</listitem></itemizedlist></para>
<section id="Z944670089tls">
<title>Read Me First</title>
<para><indexterm><primary>Job Limits</primary><secondary>read me first</secondary></indexterm>The sections in this chapter contain information about installing job limits software on your system. You should reference them in the order they are listed here:<orderedlist><listitem><para>For a general description of jobs and job limits, see <xref linkend="Z944002641tls">, and <xref linkend="Z944152453tls">.</para>
</listitem><listitem><para>To install the job limits package, see <xref linkend="Z944155578tls">.</para>
</listitem><listitem><para>For information about writing a user limits directives input file <replaceable>infile</replaceable> and creating the user limits database (ULDB), see <xref linkend="Z944671805tls">, and <xref linkend="Z944085989tls">, respectively.</para>
<para>For a list of man pages related to job limits, see <xref linkend="Z945119515tls">.</para>
</listitem><listitem><para>For information on how to use the <command>systune </command><replaceable>joblimits</replaceable> command to set systemwide default values for job limits, see <xref linkend="Z944684036tls">.</para>
</listitem><listitem><para>For information on how to view job limits on a system, see <xref linkend="Z944757706tls">.</para>
</listitem><listitem><para>For information on troubleshooting your job limits installation, see <xref linkend="Z944770233tls">.</para>
</listitem><listitem><para>For information on application programming interfaces, see <xref linkend="Z945381412tls"> and <xref linkend="Z944155618tls">.</para>
</listitem></orderedlist></para>
</section>
<section id="Z944002641tls">
<title>Job Limits Overview</title>
<para><indexterm><primary>Job Limits</primary><secondary>overview</secondary></indexterm>Job limits software helps ensure that each user has access to the appropriate amount of system resources such as CPU time and memory and makes sure that users do not exceed their allotted amount. Job limits software can improve system throughput and utilization by restricting how much of a machine each user can use. For information on user-based job limits supported in IRIX, see <xref linkend="Z944152453tls">.
</para>
<para><indexterm><primary>Job Limits</primary><secondary>point of entry processes</secondary><seealso>job initiators</seealso></indexterm>Work on a machine is submitted in a variety of ways, such as an interactive login, a submission from a workload management system, a <literal>cron</literal> job, or a remote access such as <literal>rsh</literal>, <literal>rcp</literal>, <literal>ftp</literal>, or array services. Each of these points of entry create an original shell process and multiple processes
flow from that original point of entry. The IRIX operating system currently supports limits on how many system resources an individual process can consume, but not on the aggregate of the processes resulting from a point of entry process. The kernel job provides a means to limit the resource usage of all the processes resulting from a point of entry. <indexterm><primary>Job Limits</primary><secondary>definition</secondary></indexterm>A job is a group of related processes all descended from a point
of entry process and identified by a unique job ID. A job can contain multiple process groups, sessions, or array sessions and all processes in one of these subgroups are always contained within one job. <xref linkend="Z943975855tls">, shows the point of entry processes that initiate the creation of jobs.<figure id="Z943975855tls" width="wide">
<graphic entityref="job.initiators"></graphic>
<title>Point of Entry Processes</title>
</figure></para>
<para><indexterm><primary>Job Limits</primary><secondary>job characteristics</secondary></indexterm>IRIX job limits have the following characteristics:<itemizedlist>
<listitem><para>A job is an inescapable container. A process cannot leave the job nor can a new process be created outside the job without explicit action, that is, a system call with root privilege.</para>
</listitem>
<listitem><para>Each new process inherits the job ID and limits from its parent process.</para>
</listitem>
<listitem><para><indexterm><primary>Job Limits</primary><secondary>job initiators</secondary><seealso>point of entry processes</seealso></indexterm>All point of entry processes (job initiators) create a new job and set the job limits appropriately.</para>
</listitem>
<listitem><para>Users can raise and lower their own job limits within maximum values specified by the system administrator.</para>
</listitem>
<listitem><para>The job initiator performs authentication and security checks.</para>
</listitem></itemizedlist></para>
<para>The process control initialization process (<command sectionref="1M">init</command>) and startup scripts called by <literal>init</literal> are not part of a job and have a job ID of zero.</para>
<para>Network Queuing Environment (NQE) and Load Sharing Facility (LSF) are not supported in this release of job limits software.</para>
<para><note><para>The existing IRIX commands <command sectionref="1">jobs</command>, <command sectionref="1">fg</command>, and <command sectionref="1">bg</command> man pages apply to shell &ldquo;jobs&rdquo; and are not related to IRIX kernel job limits.</para>
</note></para>
<para><xref linkend="Z945718024smg"> shows two limit domains. Limit domains are a way to categorize work<indexterm><primary>Job Limits</primary><secondary>domain</secondary><tertiary>defintion</tertiary></indexterm>. The job initiators shown in <xref linkend="Z943975855tls">, can be categorized as either interactive or batch processes. Limit domain names are defined by the system administrator when the user limits database (ULDB) is created. Applications that use the ULDB to retrieve job limits information
expect to find limit information with specific names. These names are defined by convention. For additional information on limit domains and the ULDB, see <xref linkend="Z944073083tls">.<figure id="Z943991230tls">
<graphic entityref="limits.domains"></graphic>
<title id="Z945718024smg">Limit Domains</title>
</figure></para>
</section>
<section id="Z944152453tls">
<title>Job Limits Supported</title>
<para><xref linkend="Z944227254glen">, shows job limits supported by the IRIX operating system. Each limit restricts the use of a particular system resource for all the processes contained within a job. Job limits software also introduces a limit unique to jobs called <literal>JLIMIT_NUMPROC</literal> that controls the number of processes in a job.<?Pub _newpage><indexterm><primary>Job Limits</primary><secondary>limits supported</secondary></indexterm></para>
<table frame="topbot" pgwide="wide" id="Z944227254glen">
<tbltitle> Job Limits</tbltitle>
<tgroup cols="5" colsep="0" rowsep="0">
<?PubTbl tgroup dispwid="5.49in">
<colspec colwidth="91*">
<colspec colwidth="80*">
<colspec colwidth="54*">
<colspec colwidth="88*">
<colspec colwidth="82*">
<thead>
<row rowsep="1"><entry align="left" valign="top"><para>Limit Name</para></entry><entry align="left" valign="top"><para>Symbolic ID</para></entry><entry align="left" valign="top"><para>Units</para></entry><entry align="left" valign="top"><para>Description</para></entry><entry align="left" valign="top"><para>Enforcement</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para><literal>jlimit_nproc_cur</literal> <newline><literal>jlimit_nproc_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_NUMPROC</literal></para></entry>
<entry align="left" valign="top"><para>processes</para></entry>
<entry align="left" valign="top"><para>Maximum number of processes within the job</para></entry>
<entry align="left" valign="top"><para>Process creation by any job fails with <literal>errno</literal> set to <literal>EAGAIN</literal></para></entry></row>
<row>
<entry align="left" valign="top"><para><literal>jlimit_nofile_cur</literal><newline> <literal> jlimit_nofile_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_NOFILE</literal></para></entry>
<entry align="left" valign="top"><para>file descriptors</para></entry>
<entry align="left" valign="top"><para>Maximum total number of open file descriptors all processes in job can have</para></entry>
<entry align="left" valign="top"><para><command sectionref="2">open</command> calls by any job fail with <literal>errno</literal> set to <literal>EMFILE</literal></para></entry></row>
<row>
<entry align="left" valign="top"><para><literal>jlimit_rss_cur</literal> <newline><literal>jlimit_rss_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_RSS</literal></para></entry>
<entry align="left" valign="top"><para>bytes</para></entry>
<entry align="left" valign="top"><para>Maximum total resident set size for all processes in a job</para></entry>
<entry align="left" valign="top"><para>Resident pages above limit become prime swap candidates</para></entry></row>
<row>
<entry align="left" valign="top"><para><literal>jlimit_vmem_cur</literal><newline> <literal>jlimit_vmem_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_VMEM</literal></para></entry>
<entry align="left" valign="top"><para>bytes</para></entry>
<entry align="left" valign="top"><para>Maximum total address space for all processes in a job</para></entry>
<entry align="left" valign="top"><para>The <command sectionref="2">brk</command> and <command sectionref="2">mmap</command> calls in any job fail with <literal>errno</literal> set to <literal>ENOMEM</literal></para></entry></row>
<row>
<entry align="left" valign="top"><para><literal>jlimit_data_cur</literal> <newline><literal>jlimit_data_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_DATA</literal></para></entry>
<entry align="left" valign="top"><para>bytes</para></entry>
<entry align="left" valign="top"><para>Maximum total heap size for all processes in job</para></entry>
<entry align="left" valign="top"><para>The <command sectionref="2">brk</command> calls in any job fail with <literal>errno</literal> set to <literal>ENOMEM</literal></para></entry></row>
<row>
<entry align="left" valign="top"><para><literal>jlimit_cpu_cur</literal> <newline><literal>jlimit_cpu_max</literal></para></entry>
<entry align="left" valign="top"><para><literal>JLIMIT_CPU</literal></para></entry>
<entry align="left" valign="top"><para>seconds</para></entry>
<entry align="left" valign="top"><para>Maximum number of CPU seconds allowed for all processes in a job</para></entry>
<entry align="left" valign="top"><para>Termination of all processes in job via <literal>SIGXCPU</literal> signal</para></entry></row></tbody></tgroup></table>
<para>Limits on the consumption of system resources by a job, shown in <xref linkend="Z944227254glen">,  may be obtained with the <command sectionref="2">getjlimit</command> function and set by the <command sectionref="2">setjlimit</command> function. The <command>getjlimit</command> function gets the current and maximum job limits values for the specified job. The <literal>CAP_MAC_READ</literal> capability is needed to retrieve values from jobs belonging to other users.</para>
<para>The <command sectionref="2">setjlimit</command> function sets the current and maximum job limits values for the specified job. If the current job is different from the job being requested, the <literal>setjlimit</literal> function checks for the <literal>CAP_MAC_WRITE</literal> capability. If the maximum (hard) limits are being raised, the <literal>setjlimit</literal> function checks for the <literal>CAP_PROC_MGT</literal> capability.</para>
<para>For additional information, see the <command sectionref="2">getjlimit</command> man page. For more information on the capability mechanism that provides fine grained control over the privileges of a process, see the <command sectionref="4">capability</command> and <command sectionref="4">capabilities</command> man pages.</para>
<para>You can use the <command>systune</command> <replaceable>joblimits</replaceable> command to set system-wide defaults. For additional information, see <xref linkend="Z944684036tls"> and the <command sectionref="1M">systune</command> man page.</para>
<para>The <literal>cpulimit_gracetime</literal> parameter establishes a grace period for processes that exceed the CPU time limit. For additional information on the <literal>cpulimit_gracetime</literal> parameter, see <xref linkend="Z945467339tls">.</para>
<para>Job limits software works in a manner similar to the <literal>cpulimit_gracetime</literal> parameter software. As a process executes, the CPU usage increases. When the limit is reached, the <literal>SIGXCPU</literal> signal is sent individually to each process when it executes. When the <literal>SIGXCPU</literal> is sent to a process, the grace period goes into effect for that process. If the process is still executing when the grace period expires, it is terminated with the <literal>SIGKILL
</literal> signal. Only the processes in a job that are executing, are sent a SIGXCPU signal. Each process in a job gets an individual grace period. Therefore, the SIGXCPU signal cannot be sent en masse to all processes in a job.</para>
</section>
<section id="Z944073083tls">
<title>User Limits Database</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits database</secondary><seealso>ULDB</seealso></indexterm><indexterm><primary>Job Limits</primary><secondary>ULDB</secondary><seealso>user limits database</seealso></indexterm>The User Limits Database (ULDB) contains job limits information which allows a system administrator to control access to a machine on a per user basis. Job initiators, the applications that initiate new jobs on the system like <literal>login</literal>, <literal>
rsh</literal>, <literal>rlogin</literal>, <literal>cron</literal>, <literal>ftp</literal>, and workload management systems like Miser, retrieve job limits values from the ULDB for a particular user and use the information to set limits, appropriately.</para>
<para>For more information on job initiators, see <xref linkend="Z944002641tls">.</para>
<para>The ULDB is used to set job limit and process limit values for jobs when the job limits package is installed. If job limits are not installed, process limits are handled by the current resource limits functionality.</para>
<para>Domain defaults apply to all users unless there is a "user" entry that describes values for that user. User specific values override the domain defaults. Values in the ULDB override the system default values for both job limits and process limits.</para>
<para>This section describes the commands used to create, maintain, and display the contents of the ULDB and the library application programming interface (API), which allows applications access to the ULDB information.</para>
<para><note><para>The ULDB configuration file contained in the <filename>/etc/jlimits.in</filename> file contains a template you can follow when setting up the ULDB on your system.</para>
</note></para>
<para>The <filename>/etc</filename> directory also contains the <filename>jlimits</filename> and <filename>jlimits.m</filename> files. The <filename>jlimits.in</filename> file is parsed into the colon delimited <filename>jlimits</filename> file, which is used to load job limits into the local ULDB <literal>jlimits.m</literal> file or into the NIS master map. The <filename>jlimits</filename> file is automatically generated by the <command sectionref="1M">genlimits</command> command. The <literal>jlimits.m
</literal> file is the local ULDB mdbm file.</para>
<section id="Z944085989tls">
<title>Creating the User Limits Database</title>
<para><indexterm><primary>Job Limits</primary><secondary>ULDB</secondary><tertiary>how to create</tertiary></indexterm>The command to create the ULDB is as follows:<literallayout>genlimits [-i <replaceable>infile</replaceable>] [-l] [-m] [-L <replaceable>local_database</replaceable>] [-N <replaceable>nisfile</replaceable>] [-v]</literallayout></para>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>genlimits</tertiary></indexterm>The <literal>genlimits</literal> command parses the formatted ASCII user limits directives input file (<replaceable>infile</replaceable>) into a colon-delimited ASCII file, which can be used to create one of the following output formats:<itemizedlist>
<listitem><para>Network Information Service (NIS) master server map (<literal>-m</literal> option)</para>
</listitem>
<listitem><para>Local database for NIS or direct (non-NIS) use (<literal>-l </literal> option)</para>
</listitem></itemizedlist></para>
<para>The <command>genlimits</command> command accepts the following options:<deflist>
<deflistentry>
<term><literal>-i </literal><replaceable>infile</replaceable></term>
<listitem><para>Identifies the location of the user limits directives input file. If you do not specify the <literal>-i</literal> option, the default file is <filename>/etc/jlimits.in</filename>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-l</literal></term>
<listitem><para>Creates a local database for Network Information Service (NIS) or direct (non-NIS) use. When NIS is enabled, the local database contains local entries which override or supplement entries from the NIS server. When NIS is not enabled, the local database contains information to set limits on the system. By default, this database is in the <filename>/etc/jlimits.m </filename>file. You cannot use the <literal>-l </literal>option with the <literal>-m </literal>option.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-m</literal></term>
<listitem><para>Creates the NIS master server map. It generates and stores the map in the standard NIS map location. You cannot override this location. You cannot use the <literal>-m</literal> option with the <literal>-l </literal>option.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-L </literal><replaceable>local_database</replaceable></term>
<listitem><para>Specifies an alternate location for the local database. The <literal>-L </literal>option works in conjunction with the <literal>-l </literal>option.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-N </literal><replaceable>nisfile</replaceable></term>
<listitem><para>Specifies a different location for the created NIS database source input file. The default location is the <literal>/etc/jlimits</literal> file. You can use the <literal>-N </literal><replaceable>nisfile</replaceable> option to create a new database without overwriting the existing <literal>/etc/jlimits</literal> file.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-v</literal></term>
<listitem><para>Specifies verbose mode, which prints out messages describing actions of the <command>genlimits</command> command.</para>
</listitem></deflistentry>
</deflist></para>
<para>For additional information, see the <command sectionref="1M">genlimits<?Pub Caret></command> man page.</para>
</section>
<section id="Z944671805tls">
<title>Creating the User Limits Directives Input File</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits directives input file</secondary><tertiary>how to create</tertiary></indexterm>The user limits directive file contains the input to the <command sectionref="1M">genlimits</command> command, defining the information on domains, limits, and users that will be used to generate the ULDB. This section describes how to write a user limits directives input file.</para>
<section>
<title>Comments</title>
<para>Any text following the # character is treated as a comment.</para>
</section>
<section>
<title>Numeric Limit Values</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits directives input file</secondary><tertiary>numeric limit values</tertiary></indexterm>Numeric values can have a letter appended that indicate a multiplier that is applied to the numeric value provided to determine the limit value as follows:<deflist>
<colheads>
<head1>Letter</head1><head2>Multiplier Value</head2></colheads>
<deflistentry>
<term>k (kilo)</term>
<listitem><para>1024 (2**10)</para>
</listitem></deflistentry>
<deflistentry>
<term>m (mega)</term>
<listitem><para>1,048,576 (2**20)</para>
</listitem></deflistentry>
<deflistentry>
<term>g (giga)</term>
<listitem><para>1,073,741,824 (2**30)</para>
</listitem></deflistentry>
<deflistentry>
<term>t (tera)</term>
<listitem><para>1,099,511,627,776 (2**40)</para>
</listitem></deflistentry>
<deflistentry>
<term>H (hours)</term>
<listitem><para>3600</para>
</listitem></deflistentry>
<deflistentry>
<term>M (minutes)</term>
<listitem><para>60</para>
</listitem></deflistentry>
</deflist></para>
<para><itemizedlist>
<listitem><para>Use the k, m, g, and t multipliers when defining memory limits or other large values.</para>
</listitem>
<listitem><para>Use the H and M multipliers when defining time values.</para>
</listitem></itemizedlist></para>
<para>Multiplier values are defined in the <filename>/usr/include/uldb.h</filename> system include file.</para>
<para>There are no requirements that multipliers be use in the above manner.</para>
<para>Numeric limit values can also be specified as &ldquo;unlimited&rdquo; which indicates there is no upper limit for this particular limit type.</para>
<para>For additional information about creating the ULDB, see the <command sectionref="1M">genlimits</command> man page.</para>
</section>
<section>
<title>Domain Directives</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits directives input file</secondary><tertiary>domain directives</tertiary></indexterm>Each limit domain that is mand in the ULDB must first be identified using the "domain" directive. The directive provides the ASCII domain name and a list of the default limit values for the domain. An example domain directive follows:<literallayout> domain domain_name {
      limit_name = value
      limit_name:machname = value
      ...
   }</literallayout></para>
<para>The domains &ldquo;interactive&rdquo; and &ldquo;batch&rdquo; are reserved for user job limits. Other domain names may be created and used for special purposes.</para>
</section>
<section>
<title>User Directives</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits directives input file</secondary><tertiary>user directives</tertiary></indexterm>The "user" directive specifies a set of limits for an individual user. The user name must identify a valid login account. The <literal>uid</literal> value is optional. If <literal>uid</literal> is specified, the <command>genlimits</command> command verifies that the <literal>uid</literal> provided matches the <literal>uid</literal> defined for the user
on the machine where <command>genlimits</command> executes. Domain clauses identify each domain for which the user will have unique limit values. The domain listed in the user directive must already be defined in a prior domain directive. The syntax and semantics of the domain clause is the same as the domain directive. It is not necessary to provide user directives for all users on the system. If there is no user directive for a queried user or there are no values for a queried domain, the default
values for that domain are returned. An example user directive follows:<literallayout>user user_name[:uid] {
      domain_name {
         limit_name = value
         limit_name:machname = value
         ...
      }
      domain_name {
         ...
      }
      ...
   }</literallayout></para>
<para>The limit specifications for both the domain and user directives may include an optional machine name. Limit values specified with a machine name apply only to that machine. Limits without a machine name apply to all machines in the cluster. The directives input file can contain several occurrences of the same limit, each with a different name, as well as an occurrence without a machine name specified.</para>
<para>The <command>genlimits</command> command processes limit values with associated machine names differently depending on the type of database (see <xref linkend="Z944085989tls">) being generated:<itemizedlist>
<listitem><para>If the <literal>-m</literal> option is used to generate a NIS master map, limit values with associated machine names are ignored. Only clusterwide values without machine names are included in the database.</para>
</listitem>
<listitem><para>If the <literal>-l</literal> option is used to generate a local database, the <command>genlimits</command> command selects the limit value with the name of the local machine if present. If there is no limit value with the local machine name, the <command>genlimits</command> command selects the clusterwide value with no machine name. You can determine the local machine name by running the <literal>uname -n</literal> command. For additional information on the <literal>uname</literal>
command, see the <command sectionref="1">uname</command> man page.</para>
</listitem></itemizedlist></para>
</section>
<section>
<title>Setting Up a User Limits Directive Input File Example</title>
<para><indexterm><primary>Job Limits</primary><secondary>user limits directives input file</secondary><tertiary>example</tertiary></indexterm>Because the ULDB is completely rebuilt whenever the <command>genlimits</command> command is invoked, the input directive file must contain a complete representation of the database. When changes are needed, the system administrator must edit the user limits directives input file and then rebuild the database. Because domain defaults are used if there is no user
entry for a particular user, the administrator only needs to provide user entries for named users to overwrite default values. The following example shows a user limits directives input file that specifies three limit types, two domains, and one user with individual limits. The limit and domain names are for this example only. They do not reflect any real limit values. The ULDB only stores the values. The meaning of a value and the units it expresses are up to the application that uses the limit.<note>
<para>If you are updating entries in the ULDB and they do not change the job limit values on your system, make sure that limit names used in the ULDB and limit names used in the <command>systune </command><replaceable>joblimits</replaceable> group are exactly the same. For additional information, see <xref linkend="Z944770233tls">.</para>
</note><literallayout width="wide">

domain interactive {              # domain for interactive logins
   jlimit_cpu_cur = 60
   jlimit_cpu_max = 120           # limit interactive jobs to 120 CPU seconds
   jlimit_vmem_cur = 2m
   jlimit_vmem_max = 4m           # limit interactive jobs to 4 megabytes of virtual memory
   jlimit_numproc_cur =10
   jlimit_numproc_max = 20        # limit interactive jobs to 20 concurrent processes
}
domain batch {                    # domain for batch submissions
   jlimit_cpu_cur = 3600
   jlimit_cpu_max = 7200          # limit batch jobs to two hours of CPU time
   jlimit_vmem_cur = 128m
   jlimit_vmem_max = 256m         # limit batch jobs to 256 megabytes of memory
   jlimit_numproc_cur = unlimited
   jlimit_numproc_max = unlimited # no limit on processes in a batch job
}

user fred:123 {                   # User "fred" gets his own interactive CPU limits
   interactive  {                 #
      jlimit_cpu_cur = 300
      jlimit_cpu_max = 600        # "fred" needs to run longer jobs in interactive mode
    }
}</literallayout></para>
</section>
</section>
<section id="Z944684036tls">
<title>Using <command>systune</command> to Display and Set Job Limits</title>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>systune</tertiary></indexterm>You can use the <command>systune </command><replaceable>joblimits</replaceable> command to view and set systemwide default values for user job limits. The ULDB will override these values if it exists. The <replaceable>joblimits</replaceable> group contains the following variables:</para>
<para><literallayout>

    jlimit_cpu_cur 
    jlimit_cpu_max 
    jlimit_data_cur 
    jlimit_data_max 
    jlimit_vmem_cur 
    jlimit_vmem_max 
    jlimit_rss_cur 
    jlimit_rss_max 
    jlimit_nofile_cur 
    jlimit_nofile_max 
    jlimit_numproc_cur 
    jlimit_numproc_max</literallayout></para>
<para>Output from the <command>systune </command><replaceable>joblimits</replaceable> command follows:</para>
<para><literallayout>$ <emphasis>systune joblimits</emphasis>
group: joblimits (statically changeable)
        jlimit_numproc_max = 1024 (0x400) ll
        jlimit_numproc_cur = 1024 (0x400) ll
        jlimit_nofile_max = 5000 (0x1388) ll
        jlimit_nofile_cur = 400 (0x190) ll
        jlimit_rss_max = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_rss_cur = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_vmem_max = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_vmem_cur = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_data_max = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_data_cur = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_cpu_max = 9223372036854775807 (0x7fffffffffffffff) ll
        jlimit_cpu_cur = 9223372036854775807 (0x7fffffffffffffff) ll

</literallayout></para>
<para>The diplay information is described below:<itemizedlist>
<listitem><para><literal>jlimit_numproc</literal> - Number of processes limit</para>
</listitem>
<listitem><para><literal>jlimit_nofile</literal> - Number of files limit</para>
</listitem>
<listitem><para><literal>jlimit_rss</literal> - Resident set size, default is in bytes</para>
</listitem>
<listitem><para><literal>jlimit_vmem</literal> - Virtual memory limit, default is in bytes</para>
</listitem>
<listitem><para><literal>jlimit_data</literal> &ndash; Data size, default is in bytes</para>
</listitem>
<listitem><para><literal>jlimit_cpu</literal> - CPU time, default in seconds.</para>
</listitem></itemizedlist></para>
<para>For additional information, see the <command sectionref="1M">systune</command> and <command sectionref="1">jlimit</command> man pages.</para>
</section>
<section id="Z944757706tls">
<title>User Commands for Viewing and Setting Job Limits</title>
<para>This section describes the following user commands which can be used to view and set job limits:<itemizedlist>
<listitem><para><xref linkend="Z944771141tls"></para>
</listitem>
<listitem><para><xref linkend="Z944771162tls"></para>
</listitem>
<listitem><para><xref linkend="Z944771113tls"></para>
</listitem></itemizedlist></para>
<section id="Z944771141tls">
<title><literal>showlimits</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>showlimits</tertiary></indexterm>The command to view limit information from the ULDB is as follows:</para>
<para><literallayout>showlimits [-D] [-d] [-u <replaceable>user_name</replaceable>] [<replaceable>domain_name</replaceable>]</literallayout></para>
<para>The <command>showlimits</command> command displays limits information from the user limits database (ULDB).</para>
<para>The <command>showlimits</command> command accepts the following options:<deflist>
<deflistentry>
<term><literal>-D</literal></term>
<listitem><para>Displays the names of all the domains defined in the ULDB. When you specify the <literal>-D</literal> option, the domain name and other options are ignored.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-d</literal></term>
<listitem><para>Displays the domain default limits. When no options are specified, the <command>showlimits</command> command displays the default limits for all domains.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-u </literal><replaceable>user_name</replaceable></term>
<listitem><para>Displays the limits values for the specified user rather than the current user.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>domain_name</replaceable></term>
<listitem><para>Displays the limits values for the specified domain rather than all domains.</para>
</listitem></deflistentry>
</deflist></para>
<para>If no options are specified, the <command>showlimits</command> command displays the current limits information for the current user for all domains as shown below:</para>
<para><literallayout>% <emphasis>showlimits</emphasis>

Domain interactive:
        jlimit_cpu_cur: unlimited
        jlimit_cpu_max: unlimited
        jlimit_data_cur: unlimited
        jlimit_data_max: unlimited
        jlimit_nofile_cur: 400
        jlimit_nofile_max: unlimited
        jlimit_vmem_cur: unlimited
        jlimit_vmem_max: unlimited
        jlimit_rss_cur: unlimited
        jlimit_rss_max: unlimited
        jlimit_pthread_cur: 2k
        jlimit_pthread_max: 65535
        jlimit_numproc_cur: 1k
        jlimit_numproc_max: 65535
        rlimit_cpu_cur: unlimited
        rlimit_cpu_max: unlimited
        rlimit_fsize_cur: unlimited
        rlimit_fsize_max: unlimited
        rlimit_data_max: unlimited
        rlimit_stack_cur: 64m
        rlimit_stack_max: unlimited
        rlimit_core_cur: unlimited
        rlimit_core_max: unlimited
        rlimit_nofile_cur: 200
        rlimit_nofile_max: unlimited
        rlimit_vmem_max: unlimited
        rlimit_rss_max: unlimited
       
Domain batch:
        jlimit_cpu_cur: unlimited
        jlimit_cpu_max: unlimited
        jlimit_data_cur: unlimited
        jlimit_data_max: unlimited
        jlimit_nofile_cur: 400
        jlimit_nofile_max: unlimited
        jlimit_vmem_cur: unlimited
        jlimit_vmem_max: unlimited
        jlimit_rss_cur: unlimited
        jlimit_rss_max: unlimited
        jlimit_pthread_cur: 2k
        jlimit_pthread_max: 65535
        jlimit_numproc_cur: 1k
        jlimit_numproc_max: 65535
        rlimit_cpu_cur: unlimited
        rlimit_cpu_max: unlimited
        rlimit_fsize_cur: unlimited
        rlimit_fsize_max: unlimited
        rlimit_data_max: unlimited
        rlimit_stack_cur: 64m
        rlimit_stack_max: unlimited
        rlimit_core_cur: unlimited
        rlimit_core_max: unlimited
        rlimit_nofile_cur: 200
        rlimit_nofile_max: unlimited
        rlimit_vmem_max: unlimited
        rlimit_rss_max: unlimited

</literallayout></para>
<para><note><para>If the ULDB has changed after the user logged in, the current limits will not be effective. Current limits will be effective for any new users that login.</para>
</note></para>
<para>For a description of the job limit values, see <xref linkend="Z944227254glen">. For a description of the process limit values, see <xref linkend="Z944607718tls">.</para>
<para>For additional information, see the <command sectionref="1">showlimits</command> man page.</para>
</section>
<section id="Z944771162tls">
<title><literal>jlimit</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>jlimit</tertiary></indexterm>The command to display and set job limits is as follows:</para>
<para><literallayout>jlimit [-j <replaceable>job_id</replaceable>] [-h] [<replaceable>limit_name</replaceable> [<replaceable>value</replaceable>]]</literallayout></para>
<para>The <command>jlimit</command> command displays and changes limits on job resource usage. The current and maximum (hard) limits are set when a job starts from values that are contained in the user limits database (ULDB) information for the user. You can raise and lower your current limits within the range not to exceed your maximum limit. You can irrevocably lower your maximum limit. You must have the <literal>CAP_PROC_MGT</literal> capability to raise your maximum limit. Limit enforcement always
occurs at the current limit regardless of your maximum limit value. See the <command sectionref="4">capability</command> and <command sectionref="4">capabilities</command> man pages for additional information on the capability mechanism that provides fine grained control over the privileges of a process.</para>
<para>The <command>jlimit</command> command accepts the following options:<deflist>
<deflistentry>
<term><literal>-j </literal><replaceable>job_id</replaceable></term>
<listitem><para>Specifies a particular job ID for a job where limits are going to be changed. You must have the <literal>CAP_MAC_WRITE</literal> and <literal>CAP_PROC_MGT</literal> capabilities to change job limits for jobs that belong to other users. The job ID is printed out in hexadecimal. When the job ID is specified, the "<literal>0x</literal>" prefix is optional.</para>
</listitem></deflistentry>
<deflistentry>
<term><link>-h</link> </term>
<listitem><para>Specifies that the maximum (hard) limit values for a job are displayed or modified. If you do not specify the <literal>-h</literal> option, the <command>jlimit</command> command displays or modifies current limit values.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>limit_name </replaceable>[<replaceable>value</replaceable>]</term>
<listitem><para>Displays or sets the value for the specified limit:<itemizedlist>
<listitem><para>If no limit name is specified, <command>jlimit</command> displays the values for all limits.</para>
</listitem>
<listitem><para>If the limit name is specified without a value, <command>jlimit</command> displays the value for the limit.</para>
</listitem>
<listitem><para>If both a limit name and a value are specified, <command>jlimit</command> sets the appropriate value for the limit.</para>
</listitem></itemizedlist></para>
</listitem></deflistentry>
</deflist></para>
<para>If the <literal>-j</literal> option with a <replaceable> job_id</replaceable> argument is specified, the <command>jlimit</command> command prints out the following information:</para>
<para><literallayout> % <emphasis>jlimit -j 0x14</emphasis>
cputime: unlimited
datasize: unlimited
files: unlimited
vmemory: unlimited
ressetsize: unlimited
processes: 65535</literallayout></para>
<?Pub _newpage>
<para>For an explanation of the limit values, see <xref linkend="Z944227254glen">.</para>
<para>For additional information, see the <command sectionref="1">jlimit</command> man page.</para>
</section>
<section id="Z944771113tls">
<title><literal>jstat</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>jstat</tertiary></indexterm>The command to display job status information for active jobs is as follows</para>
<para><literallayout>

jstat [-a] [-l] [-p]
jstat [-j <replaceable>job_id</replaceable>] [-l] [-p]</literallayout></para>
<para>The <command>jstat</command> command accepts the following options:</para>
<para><deflist>
<deflistentry>
<term><literal>-a</literal></term>
<listitem><para>Displays information about all jobs.</para>
</listitem></deflistentry>
<deflistentry>
<term> <literal>-j </literal><replaceable>job_id</replaceable></term>
<listitem><para>Displays information only for the specified job ID (<replaceable>job_id</replaceable>).</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-l</literal></term>
<listitem><para>Displays limit information about the current or specified job including the current usage, current limit, and maximum limit.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-p</literal></term>
<listitem><para>Displays information about each process that belongs to the current or specified job including the process ID, state, and executing command.</para>
</listitem></deflistentry>
</deflist></para>
<para>If neither the <literal>-a</literal> or <literal>-j </literal><replaceable>job_id</replaceable> are used, the <command>jstat</command> command displays information on the current job.</para>
<para>If the <literal>-l</literal> option is specified, the <command>jstat</command> command prints out the current usage, high usage, current limit, and maximum limit information for the current job as shown below:</para>
<para><literallayout width="wide">% <emphasis>jstat -l</emphasis>

JID             OWNER          COMMAND       
--------------- -------------- --------------
0x5eac0000001bd terry            -csh          

LIMIT NAME      USAGE          HIGH USAGE     CURRENT LIMIT  MAX LIMIT     
--------------- -------------- -------------- -------------- --------------
cputime         1:05           1:05           unlimited      unlimited     
datasize        400k           400k           unlimited      unlimited     
files           10             35             400            5000          
vmemory         44             201            unlimited      unlimited     
ressetsize      340            357            unlimited      unlimited     
processes       2              4              1024           1024  </literallayout></para>
<para>Summary information is always printed. For an explanation of the limit values, see <xref linkend="Z944227254glen">.</para>
<para>For additional information, see the <command sectionref="1">jstat</command> man page.</para>
</section>
</section>
</section>
<section>
<title>Job Limits and Existing IRIX software</title>
<para><indexterm><primary>Job Limits</primary><secondary>command</secondary><tertiary>ps</tertiary></indexterm>The <command>ps</command> <literal>-j </literal> command prints out the process ID, process group ID, session ID, and job ID in hexadecimal:</para>
<para><literallayout width="wide">% <emphasis>ps -j</emphasis>
        PID       PGID        SID        JID TTY          TIME CMD
     253430     253430     253430     0x5eac001bd ttyq12  0:00 csh 
     254563     254563     253430     0x5eac001bd ttyq12  0:00 ps </literallayout></para>
<para>For additional information, see the <command sectionref="1">ps</command> man page.</para>
<para>The array services daemon, <command sectionref="1M">arrayd</command>, propagates the job ID from the originating machine to any other machines when starting new processes for the job on other machines in a cluster.</para>
<para>For additional information, see the <command sectionref="1M">arrayd</command> man page.</para>
</section>
<section id="Z944155578tls">
<title>Installing Job Limits</title>
<para><indexterm><primary>Job Limits</primary><secondary>software</secondary><tertiary>how to install</tertiary></indexterm>Use the <command sectionref="1M">inst</command> software installation tool or the <command sectionref="1M">swmgr</command> software management tool to install kernel job limits software. For more information on <command sectionref="1M">inst</command> and <command sectionref="1M">swmgr</command>, see <citetitle>IRIX Admin: Software Installation and Licensing</citetitle> in the <citetitle>
IRIX Admin</citetitle> manual set and their respective man pages.</para>
<para>To install the kernel job limits software on IRIX systems, install this subsystem: <literal>eoe.sw.jlimits</literal>.</para>
<para>Once the job limits software is installed, run the <command sectionref="1M">autoconfig</command> command and reboot the system.</para>
<para>Job limits software is only available in the IRIX feature stream.</para>
</section>
<section id="Z944770233tls">
<title>Troubleshooting Job Limits</title>
<para><indexterm><primary>Job Limits</primary><secondary>software</secondary><tertiary>troubleshooting</tertiary></indexterm>If you are updating entries in the ULDB and they do not change the job limit values on your system, make sure that limit names used in the ULDB and limit names used in the <command>systune </command><replaceable>joblimits</replaceable> group are exactly the same. The ULDB cannot determine which job limit variables are valid and which are not. If the symbolic names in the ULDB
are entered incorrectly, values from the <command>systune </command><replaceable>joblimits</replaceable> group will be applied. For information on limit names, see <xref linkend="Z944227254glen">.</para>
</section>
<section id="Z945381412tls">
<title>Application Programming Interface for Job Limits</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface</secondary></indexterm>This section describes the data types and function calls used by the library interface to the application programming interface (API) functions.</para>
<section>
<title>Data Types</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface</secondary><tertiary>data types</tertiary></indexterm>This section describes the specific data types that are used in the library interface to the API functions.</para>
<para>All limit values are specified by the <literal>rlimit</literal> structure defined for process limits in the <filename>/usr/include/sys/resource.h</filename> system include file:</para>
<para><literallayout>typedef unsigned long rlim_t;
   struct rlimit_t {
           rlim_t        rlim_cur;
           rlim_t        rlim_max;
   };</literallayout></para>
<para>The job ID is defined as a signed 64 bit value. It is treated opaquely by applications. The definition of <literal>jid_t</literal> resides in the <filename>sys/types.h</filename> system include file.</para>
<para><literallayout>typedef int64_t jid_t;</literallayout></para>
</section>
<section>
<title>Function Calls</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface</secondary><tertiary>function calls</tertiary></indexterm> The API for job limits is defined by a set of functions defined in the <literal>libc.a</literal> library. Each of the functions invokes the <command sectionref="2">syssgi</command> system interface to perform the necessary operations. The function prototypes reside in the <literal>/usr/include/sys/resource.h</literal> system include file.</para>
<section>
<title><literal>getjlimit</literal> and <literal>setjlimit</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>getjlimit</tertiary></indexterm><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>setjlimit</tertiary></indexterm>The <literal>getjlimit</literal> function retrieves limits on the consumption of a variety of system resources by a job and the <literal>setjlimit</literal> function sets these limits:</para>
<para><literallayout>#include &lt;sys/resource.h>
int getjlimit(jid_t jid, int resource, struct rlimit *rlp)
int setjlimit(jid_t jid, int resource, struct rlimit *rlp)</literallayout></para>
<para>For additional information, see the <command sectionref="2">getjlimit</command> man page.</para>
</section>
<section>
<title><literal>getjusage</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>getjusage</tertiary></indexterm>The <literal>getjusage</literal> function retrieves the resource usage values for the specified job ID:</para>
<para><literallayout>#include &lt;sys/resource.h>
int getjusage(jid_t jid, int resource, struct jobrusage *up)</literallayout></para>
<para>For additional information, see the <command sectionref="2">getjusage</command> man page.</para>
</section>
<section>
<title><literal>getjid</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>getjid</tertiary></indexterm>The <literal>getjid</literal> function returns the job ID associated with the current process:</para>
<para><literallayout>#include &lt;sys/resource.h>
jid_t getjid(void);

</literallayout></para>
<para>For additional information, see the <command sectionref="2">getjid</command> man page.</para>
</section>
<section>
<title><literal>killjob</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>killjob</tertiary></indexterm>The <literal>killjob</literal> function sends a signal to all processes of the specified job ID:</para>
<para><literallayout>#include &lt;sys/resource.h>
int killjob(jid_t jid, int signal)

</literallayout></para>
<para>For additional information, see the <command sectionref="2">killjob</command> man page.</para>
</section>
<section>
<title><literal>makenewjob</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>makenewjob</tertiary></indexterm>The <literal>makenewjob</literal> function creates a new job container:</para>
<para><literallayout>#include &lt;sys/resource.h>
jid_t makenewjob(uid_t user, jid_t rjid)</literallayout></para>
<para>For additional information, see the <command sectionref="2">makenewjob</command> man page.</para>
</section>
<section>
<title><literal>jlimit_startjob</literal></title>
<para><indexterm><primary>Job Limits</primary><secondary>function calls</secondary><tertiary>jlimit_startjob</tertiary></indexterm>The <literal>jlimit_startjob</literal> function creates a new job and sets the job limits to the limit values in the ULDB.</para>
<para>The <literal>jlimit_startjob</literal> follows:</para>
<para><literallayout width="wide">#include &lt;sys/resource.h>
jid_t    jlimit_startjob(char *username, uid_t uid, char *domainname);

</literallayout></para>
</section>
</section>
<section>
<title>Error Messages</title>
<para><indexterm><primary>Job Limits</primary><secondary>error messages</secondary></indexterm>For error message information, see the appropriate man pages or <xref linkend="Z944519495tls">.</para>
</section>
</section>
<section id="Z944155618tls">
<title>Application Programming Interface for the ULDB</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface for the ULDB</secondary></indexterm>This section describes the data types and function calls used by the library interface to the ULDB.</para>
<section>
<title>Data Types</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface for the ULDB</secondary><tertiary>data types</tertiary></indexterm>This section defines the specific data types that are used by the library interface to the user limits information. All ULDB definitions are in the <filename>/usr/include/uldb.h</filename> include file.</para>
<para>Binary limit values are held as unsigned 64 bit values as follows:</para>
<para><literallayout>typedef rlim_t uldb_limit_t;</literallayout></para>
<section>
<title><literal>uldb_namelist_t</literal></title>
<para>The <literal>uldb_namelist_t</literal> data type is used to contain name lists such as limit names, domain names, and so on. The <literal>namelist</literal> structure contains a count of the items and a pointer to a list of pointers to the names. The <literal>uldb_namelist_t</literal> data type is as follows:</para>
<para><literallayout>typedef struct uldb_namelist_s {
      int uldb_nitems,                # number of names in the list
      char **uldb_names               # list of name pointers
   } uldb_namelist_t;</literallayout></para>
</section>
<section>
<title><literal>uldb_limitlist_t</literal></title>
<para>The <literal>uldb_limitlist_t</literal> data type is used to contain a list of binary limit values. The limit list structure contains a count of the items and a pointer to an array of limit values. The <literal>uldb_limitlist_t</literal> data type follows:</para>
<para><literallayout>typedef struct uldb_limitlist_s {
      int uldb_nitems,                # number of limit values in the list
      uldb_limit_t *uldb_limits       # list of limit pointers
   } uldb_limitlist_t;</literallayout></para>
</section>
</section>
<section>
<title>Function Calls</title>
<para><indexterm><primary>Job Limits</primary><secondary>applications programming interface for the ULDB</secondary><tertiary>function calls</tertiary></indexterm>This section defines the function calls that are used by the library interface to the user limits information.</para>
<para>The functions that retrieve limit values are as follows:</para>
<para><itemizedlist>
<listitem><para><literal>uldb_get_limit_values</literal></para>
</listitem>
<listitem><para><literal>uldb_get_limit_names</literal></para>
</listitem>
<listitem><para><literal>uldb_get_domain_names</literal></para>
</listitem></itemizedlist></para>
<section>
<title><literal>uldb_get_limit_values</literal></title>
<para>The <literal>uldb_get_limit_values</literal> function retrieves a set of limit values for a domain or user. If there is no explicit entry for the specified user, the domain defaults are returned. The set of limits requested is provided using the <literal>uldb_namelist_t</literal> structure. The returned limit list pointer references a new <literal>uldb_limitlist_t</literal> structure created by a call to the <literal>malloc</literal> routine that the application is responsible for freeing when
the structure is no longer needed. The order of limit values in the returned <literal>uldb_limitlist_t</literal> structure corresponds to the order of limit names in the input <literal>uldb_namelist_t</literal> structure. If the user name is NULL, the list of limits for the domain are retrieved instead of the user limits.</para>
<para>An example of <literal>uldb_get_limit_values</literal> follows:</para>
<para><literallayout width="wide">#include include/uldb.h
uldb_limitlist_t *        # returns pointer to limit list or NULL if error 
   uldb_get_limit_values (         #
      char *domain_name,           # pointer to domain name
      char *user_name,             # name of user
      uldb_namelist_t *limits);    # namelist containing limit names</literallayout></para>
</section>
<section>
<title><literal>uldb_get_value_units</literal></title>
<para>The <literal>uldb_get_value_units</literal> function returns a limit list structure containing the modifier values or units for the specified list of limits. The accepted modifier values are defined in the <literal>uldb.h</literal> header file. The returned list of names is provided by the <literal>uldb_namelist_t</literal> structure created by a call to the <literal>malloc</literal> function. The application is responsible for freeing this structure when it is no longer needed.</para>
<para>An example of <literal>uldb_get_value_units</literal> follows:</para>
<para><literallayout width="wide">#include &lt;include/uldb.h>
uldb_limitlist_t *        # returns pointer to limit list or NULL if error 
   uldb_get_value_units (          #
      char *domain_name,           # pointer to domain name
      char *user_name,             # name of user
      uldb_namelist_t *limits);    # namelist containing limit names</literallayout></para>
</section>
<section>
<title><literal>uldb_get_limit_names</literal></title>
<para>The <literal>uldb_get_limit_names</literal> function retrieves the complete list of limit names defined for domain. The returned list of names is provided by the <literal>uldb_namelist_t</literal> structure created by a call to the <literal>malloc</literal> function. The application is responsible for freeing this structure when it is no longer needed.</para>
<?Pub _newpage>
<para>An example of <literal>uldb_get_limit_names</literal> follows:</para>
<para><literallayout width="wide">#include &lt;include/uldb.h>
   uldb_namelist_t *               # returns pointer to name list or NULL if error
   uldb_get_limit_names (
       char *domain_name);         # pointer to domain name</literallayout></para>
</section>
<section>
<title><literal>uldb_get_domain_names</literal></title>
<para>The <literal>uldb_get_domain_names</literal> function retrieves the complete list of domain names defined in the ULDB. The returned list of names is provided the <literal>uldb_namelist_t</literal> structure created by a call to the <literal>malloc</literal> function. The application is responsible for freeing this structure when it is no longer needed.</para>
<para><literallayout width="wide">#include &lt;include/uldb.h>
uldb_namelist_t *               # returns pointer to name list or NULL if error
   uldb_get_domain_names (
       void);</literallayout></para>
<para>The functions that manage memory are as follows:</para>
<para><itemizedlist>
<listitem><para><literal>uldb_free_namelist</literal></para>
</listitem>
<listitem><para><literal>uldb_free_limit_list</literal></para>
</listitem></itemizedlist></para>
</section>
<section>
<title> <literal>uldb_free_namelist</literal></title>
<para>The <literal>uldb_free_namelist</literal> function deletes a <literal>namelist</literal> structure and all its components.</para>
<para>An example of <literal>uldb_free_namelist</literal> follows:</para>
<para><literallayout width="wide">#include &lt;include/uldb.h>
void                             # returns 0 if okay, -1 on error
   uldb_free_namelist (            #
      uldb_namelist_t *names);     # pointer to namelist to be freed</literallayout></para>
</section>
<section>
<title><literal>uldb_free_limit_list</literal></title>
<para>The <literal>uldb_free_limit_list</literal> function deletes a limitlist structure and all its components.</para>
<?Pub _newpage>
<para>An example of <literal>uldb_free_limit_list</literal> follows:</para>
<para><literallayout width="wide">#include &lt;include/uldb.h>
void                             # returns 0 if okay, -1 on error
   uldb_free_limit_list (          #
      uldb_limit_list_t *limits);  # pointer to limit list to be freed</literallayout></para>
</section>
<section>
<title>Error Messages</title>
<para>For error message information, see the <command sectionref="3c">uldb_get_limit_values</command> and <command sectionref="3c">jlimit_startjob</command> man pages or <xref linkend="Z944519495tls">.</para>
</section>
</section>
</section>
</chapter>
<?Pub *0000061941 0>
