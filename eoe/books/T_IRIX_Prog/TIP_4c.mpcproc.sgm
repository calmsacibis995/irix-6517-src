<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="12"><TITLE><XREFTARGET ID="43999"><XREFTARGET ID="51186">Process-Level Parallelism</TITLE><PARAGRAPH>The process is the traditional unit of UNIX execution. The concept of the process (and its relationship to the concept of a thread) are covered under <INDEXTARGET ID="TIP_4c.mpcproc1"><!-- POSTPROCESSDATA: TIP_4c.mpcproc1|process --><INDEXTARGET ID="TIP_4c.mpcproc2"><!-- POSTPROCESSDATA: TIP_4c.mpcproc2|parallel computation:process-level --><XREF IDREF="87749" TYPE="TITLE">&ldquo;Process-Level Parallelism&rdquo;</XREF>. The purpose of this chapter is to review how you can use IRIX processes to perform parallel processing in a single program.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE>Using Multiple Processes</TITLE><PARAGRAPH>In general, you can create a new process for each unit of work that your program could do in parallel. The processes can share the address space of the original program, or each can have its own address space. You design the processes so that they coordinate work and share data using any and all of the interprocess communication (IPC) features discussed in <XREF IDREF="61210" TYPE="TITLE">Part II, &ldquo;Interprocess Communication.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>Software products from Silicon Graphics use process-level parallelism. For example, the IRIS Performer graphics library normally creates a separate lightweight process to manage the graphics pipe in parallel with rendering work. The run-time library for statement-level parallelism creates a pool of lightweight processes and dispatches them to execute parts of loop code in parallel (see <XREF IDREF="66886" TYPE="TITLE">&ldquo;Managing Statement-Parallel Execution&rdquo;</XREF>).</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="78136">Process Creation and Share Groups</TITLE><PARAGRAPH>The most important system functions you use to create and manage processes are summarized in <INDEXTARGET ID="TIP_4c.mpcproc3"><!-- POSTPROCESSDATA: TIP_4c.mpcproc3|process:share groupshare groupprocess:creation --><XREF IDREF="33610" TYPE="TABLE">Table&nbsp;12-1</XREF>.</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="12-1"><PREFIX>Table 12-1 </PREFIX><XREFTARGET ID="33610"> <EMPHASIS>(continued)        </EMPHASIS>Commands and System Functions for Process Management</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="99"><PARAGRAPH>Function Name</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Purpose and Operation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>npri(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Command to run a process at a specified nondegrading priority.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>runon(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Command to run a process on a specific CPU.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>fork(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Create a new process with a private address space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>pcreate(3C)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Create a new process with a private address space running a designated 
program with specified arguments.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>sproc(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Create a new process in the caller's address space using a private stack.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>sprocsp(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Create a new process in the caller's address space using a preallocated 
stack area.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>prctl(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query and set assorted process attributes.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>sysmp(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query multiprocessor status and assign processes to CPUs.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH><REFPAGE>syssgi(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query process virtual and real memory use, and other operations.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>You can initiate a program at a specified nondegrading priority (explained under <XREF IDREF="35473" TYPE="TITLE">&ldquo;Process Scheduling&rdquo;</XREF>) using <COMMAND>npri</COMMAND>. You can initiate a program running on a specific CPU of a multiprocessor using <COMMAND>runon</COMMAND>. Both attributes&mdash;the assigned priority and the assigned CPU&mdash;are inherited by any child processes that the program creates.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12191">Process Creation</TITLE><PARAGRAPH>The process that creates another is called the <ITALICS>parent</ITALICS> process. The processes it creates are <ITALICS>child</ITALICS> processes, or siblings. The parent and its children together are a <ITALICS>share group</ITALICS>. IRIX provides special services to share groups. For example, you can send a signal to all processes in a share group.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>fork()</FUNCTION> function is the traditional UNIX way of creating a process. The new process is a duplicate of the parent process, running in a duplicate of the parent's address space. Both execute the identical program text; that is, both processes &ldquo;return&rdquo; from the <FUNCTION>fork()</FUNCTION> call. Your code can distinguish them by the return code, which is 0 in the child process, but in the parent is the new process ID.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>sproc()</FUNCTION> and <FUNCTION>sprocsp()</FUNCTION> functions create a lightweight process. The difference between these calls is that <FUNCTION>sproc()</FUNCTION> allocates a new memory segment to serve as the stack for the new process. You use <FUNCTION>sprocsp()</FUNCTION> to specify a stack segment that you have already allocated&mdash;for example, a block of memory that you allocate and lock against paging using <FUNCTION>mpin()</FUNCTION>.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>sproc()</FUNCTION> calls take as an argument the address of the function that the new process should execute. The new process begins execution in that function, and when that function returns, the process is terminated. Read the <REFPAGE>sproc(2)</REFPAGE> reference page for details on the flags that specify which process attributes a child process shares with its parent, and for other comparisons between <FUNCTION>fork()</FUNCTION> and <FUNCTION>sproc()</FUNCTION>.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The <FUNCTION>sproc()</FUNCTION> and <FUNCTION>sprocsp()</FUNCTION> functions are not available for use in a threaded program (see <XREF IDREF="77267" TYPE="TITLE">Chapter&nbsp;13, &ldquo;Thread-Level Parallelism&rdquo;</XREF>). The pthreads library uses lightweight processes to implement threading, and has to control the creation of processes. Also, when your program uses the MPI library (see <XREF IDREF="18012" TYPE="TITLE">Chapter&nbsp;14, &ldquo;Message-Passing Parallelism&rdquo;</XREF>), the use of <FUNCTION>sproc()</FUNCTION> and <FUNCTION>sprocsp()</FUNCTION> can cause problems.</NOTE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Process Management</TITLE><PARAGRAPH>Certain system functions give you some control over the processes you create. The <FUNCTION>prctl()</FUNCTION> function offers a variety of operations. These are some of the most useful: </PARAGRAPH>
<TABLE COLUMNS="2"><TABLEBODY><ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_MAXPROCS</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query the system limit on processes per user (also available from 
<FUNCTION>sysconf(</FUNCTION>_SC_CHILD_MAX<FUNCTION>)</FUNCTION>, see <REFPAGE>sysconf(2)</REFPAGE>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_MAXPPROCS</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query the maximum number of CPUs that are available to the 
calling process and its children. This reflects both the system 
hardware and reservations made on CPUs, but does not reflect 
system load.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_GETNSHARE</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query the number of processes in the share group with the 
calling process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_GETSTACKSIZE</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Query the maximum size of the stack segment of the calling 
process. For the parent process this reflects the system limit (also 
available from <FUNCTION>getrlimit(</FUNCTION>RLIMIT_STACK<FUNCTION>)</FUNCTION>, see <REFPAGE>getrlimit(2)</REFPAGE>). For 
a process started by <FUNCTION>sprocsp()</FUNCTION>, the size of the allocated stack.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_SETSTACKSIZE</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Set an upper limit on stack growth for the calling process and for 
child processes it creates in the future.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="99"><PARAGRAPH>PR_RESIDENT</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="288"><PARAGRAPH>Prevent the calling process from being swapped out. This has no 
connection to paging, but to swapping out an entire, inactive 
process under heavy system load.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The <FUNCTION>sysmp()</FUNCTION> function gives a privileged process information about and control over the use of a multiprocessor. Some of the operations it provides are as follows: </PARAGRAPH>
<TABLE COLUMNS="2"><TABLEBODY><ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_NPROCS</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Number of CPUs physically in the system.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_NAPROCS</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Number of CPUs available to the scheduler; should be 
the same as <FUNCTION>prctl(</FUNCTION>PR_MAXPPROCS<FUNCTION>)</FUNCTION>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_MUSTRUN</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Assign the calling process to run on a specific CPU.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_MUSTRUN_PID</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Assign a specified other process (typically a just-created 
child process) to run on a specific CPU.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_GETMUSTRUN&lbreak;MP_GETMUSTRUN_PID</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Query the must-run assignment of the calling process or 
of a specified process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="135"><PARAGRAPH>MP_RUNANYWHERE&lbreak;MP_RUNANYWHERE_PID</PARAGRAPH>
</CELL>
<CELL LEFT="140" WIDTH="252"><PARAGRAPH>Allow the calling process, or a specified process, to run 
on any CPU.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The <COMMAND>runon</COMMAND> command (see <XREF IDREF="12191" TYPE="TITLE">&ldquo;Process Creation&rdquo;</XREF> and <REFPAGE>runon(1)</REFPAGE>) initiates the parent process of a program running on a specific CPU. Any child processes also runs on that CPU unless the parent reassigns them to run anywhere, or to run on a different CPU, using <FUNCTION>sysmp()</FUNCTION>. The use of restricted CPUs and assigned CPUs to get predictable real-time performance is discussed at length in the <DOCTITLE>REACT Real-Time Programmer's Guide</DOCTITLE>.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>syssgi()</FUNCTION> function has a number of interesting uses but only one of interest for managing processes: <FUNCTION>syssgi(</FUNCTION>SGI_PROCSZ<FUNCTION>)</FUNCTION> returns the virtual and resident memory occupancy of the calling process.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="49551">Process &ldquo;Reaping&rdquo;</TITLE><PARAGRAPH>A parent process should not terminate while its child processes continue to run. When it does so, the parent process of each child becomes 1, the <INDEXTARGET ID="TIP_4c.mpcproc4"><!-- POSTPROCESSDATA: TIP_4c.mpcproc4|process:parentprocess:reapingreaping child processes --><COMMAND>init</COMMAND> process. This causes problems if a child process should loop or hang. The functions you use to collect (the technical term is to &ldquo;reap&rdquo;) the status of child processes are summarized in <XREF IDREF="76008" TYPE="TABLE">Table&nbsp;12-2</XREF>.&space;<INDEXTARGET ID="TIP_4c.mpcproc5"><!-- POSTPROCESSDATA: TIP_4c.mpcproc5|<FUNCTION>wait()</FUNCTION> --></PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="12-2"><PREFIX>Table 12-2 </PREFIX><XREFTARGET ID="76008"> <EMPHASIS>(continued)        </EMPHASIS>Functions for Child Process Management</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="90"><PARAGRAPH>Function Name</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Purpose and Operation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>wait(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Function to block until a child stops or terminates, and to receive the cause 
of its change of status.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>waitpid(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>POSIX extension of <FUNCTION>wait()</FUNCTION> which allows more selectivity and returns more 
information.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>wait3(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>BSD extension of <FUNCTION>wait()</FUNCTION> that allows you to poll for terminated children 
without suspending.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>waitid(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Function to suspend until one of a selected set of status changes occurs in 
one or more child processes.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>When the parent process has nothing to do after starting the child processes, it can loop on <FUNCTION>wait()</FUNCTION> until <FUNCTION>wait()</FUNCTION> reports no more children exist; then it can exit.</PARAGRAPH>
<PARAGRAPH>Sometimes it is necessary to handle child termination and other work, and the parent cannot suspend. In this case the parent can treat the termination of a child process as an asynchronous event, and trap it in a signal handler for SIGCLD (see <XREF IDREF="35142" TYPE="TITLE">&ldquo;Catching Signals&rdquo;</XREF>). The <REFPAGE>wait(2)</REFPAGE> reference page has extensive discussion of the three methods (BSD, SVR4, and POSIX) for handling this situation, with example code for each.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="35473">Process Scheduling</TITLE><PARAGRAPH>There are two different approaches to setting the scheduling priorities of a process, one compatible with IRIX and BSD, the other POSIX compliant.<INDEXTARGET ID="TIP_4c.mpcproc6"><!-- POSTPROCESSDATA: TIP_4c.mpcproc6|process:scheduling --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Controlling Scheduling With IRIX and BSD-Compatible Facilities</TITLE><PARAGRAPH>The IRIX compatible and BSD compatible scheduling operations are summarized in <INDEXTARGET ID="TIP_4c.mpcproc7"><!-- POSTPROCESSDATA: TIP_4c.mpcproc7|process scheduling:IRIXprocess scheduling:BSD --><XREF IDREF="35297" TYPE="TABLE">Table&nbsp;12-3</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="12-3"><PREFIX>Table 12-3 </PREFIX><XREFTARGET ID="35297"> <EMPHASIS>(continued)        </EMPHASIS>Commands and Functions for Scheduling Control</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="90"><PARAGRAPH>Function Name</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Purpose and Operation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>schedctl(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Query and set IRIX process scheduling attributes.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>getpriority(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Return the scheduling priority of a process or share group.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>setpriority(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Set the priority of a process or process group.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>nice(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Run a program at a positive or negative increment from normal priority.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH><REFPAGE>renice(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="298"><PARAGRAPH>Alter the priority of a running process by a positive or negative increment.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>For BSD compatibility, use the <COMMAND>nice</COMMAND> and <COMMAND>renice</COMMAND> commands to alter priorities, and within a program use <FUNCTION>getpriority()</FUNCTION> and <FUNCTION>setpriority()</FUNCTION> to query and set priorities. These commands and functions use priority numbers ranging from -20 through 0 to +20, with lower arithmetic values having superior access to the CPU. </PARAGRAPH>
<PARAGRAPH>Only the IRIX <FUNCTION>schedctl()</FUNCTION> function gives you complete access to a variety of operations related to process scheduling. Some of the key operations are as follows: </PARAGRAPH>
<TABLE COLUMNS="2"><TABLEBODY><ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>NDPRI</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Set a nondegrading priority for the calling process 
(see&nbsp;text).</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>GETNDPRI</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Query the nondegrading priority of the calling process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>SETMASTER</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Set the master process of a share group. By default the 
parent process is the master process, but it can transfer 
that honor.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>SCHEDMODE, SGS_SINGLE</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Cause all processes in the share group to be suspended 
except the master process (set with SETMASTER).</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>SCHEDMODE, SGS_GANG</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Cause all processes in the share group to be scheduled as 
a &ldquo;gang,&rdquo; with all running concurrently.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>SCHEDMODE, SGS_FREE</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="252"><PARAGRAPH>Schedule the share group in the default fashion.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>A program started interactively inherits a scheduling discipline based on degrading priorities. That is, the longer the process executes without voluntarily suspending, the lower its dispatching priority becomes. This strategy keeps a runaway process from monopolizing the hardware. However, you may have a CPU-intensive application that needs a predictable execution rate. This is the purpose of nondegrading priorities set with <FUNCTION>schedctl(</FUNCTION>NDPRI<FUNCTION>)</FUNCTION> or with the <COMMAND>npri</COMMAND> command (see the <REFPAGE>npri(1)</REFPAGE> reference page).</PARAGRAPH>
<PARAGRAPH>There are three bands of nondegrading priorities, designated by symbolic names declared in <FILENAME>sys/schedctl.h</FILENAME>:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A real-time band from NDPHIMAX to NDPHIMIN. System daemons and real-time programs run in this band, which has higher priority than any interactive process.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A normal band from NDPNORMMAX to NDPNORMMIN. These values have the same priority as interactive programs. Processes at these priorities compete with interactive processes, but their priorities do not degrade with time.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A batch band from NDPLOMAX to NDPLOMIN. Processes at these priorities receive available CPU time and are scheduled from a batch queue.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<TIP><PREFIX>Tip</PREFIX>The IRIX priority numbers are inverted, in the sense that numerically smaller values have superior priority. For example. NDPHIMAX is 30 and NDPHIMIN is 39. However, as long as you declare priority values using symbolic expressions, the numbers work out correctly. For example, the statement</TIP>
<EXAMPLE>
#define NDPHIMIDDLE NDPHIMIN+((NDPHIMAX-NDPHIMIN)/2) 
</EXAMPLE>
<PARAGRAPH>produces a &ldquo;middle&rdquo; value of 35, as it should.</PARAGRAPH>
<PARAGRAPH>When you create a cooperating group of processes, it is important that they all execute at the same time, provided there are enough CPUs to handle all the members of the group that are ready to run. This minimizes the time that members of the share group spend waiting for each other to release locks or semaphores.</PARAGRAPH>
<PARAGRAPH>Use <FUNCTION>schedctl()</FUNCTION> to initiate &ldquo;gang&rdquo; scheduling for the share group. IRIX attempts to schedule all processes to execute at the same time, when possible.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Through IRIX 6.2, <FUNCTION>schedctl()</FUNCTION> also supported a scheduling mode called &ldquo;deadline scheduling.&rdquo; This scheduling mode is being removed and will not be supported in the future. Do not design a program based on the use of deadline scheduling.</NOTE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="34591">Controlling Scheduling With POSIX Functions</TITLE><PARAGRAPH>The POSIX compliant functions to control process scheduling are summarized in <INDEXTARGET ID="TIP_4c.mpcproc8"><!-- POSTPROCESSDATA: TIP_4c.mpcproc8|process scheduling:POSIX --><XREF IDREF="12316" TYPE="TABLE">Table&nbsp;12-4</XREF>.</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="12-4"><PREFIX>Table 12-4 </PREFIX><XREFTARGET ID="12316"> <EMPHASIS>(continued)        </EMPHASIS>POSIX Functions for Scheduling</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Function Name</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Purpose and Operation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><REFPAGE>sched_getparam(2)</REFPAGE> &lbreak;<REFPAGE>sched_setparam(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Query and change the POSIX scheduling priority of a process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><REFPAGE>sched_getscheduler(2)</REFPAGE> &lbreak;<REFPAGE>sched_setscheduler(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Query and change the POSIX scheduling policy and priority of a 
process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><REFPAGE>sched_get_priority_max(2)</REFPAGE> &lbreak;<REFPAGE>sched_get_priority_min(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Query the maximum (most use of CPU) and minimum (least use) 
priority numbers for use with <FUNCTION>sched_getparam()</FUNCTION>.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><REFPAGE>sched_get_rr_interval(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Query the timeslice interval of the round-robin scheduling 
policy.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><REFPAGE>sched_yield(2)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="261"><PARAGRAPH>Let other processes of the same priority execute.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Use the functions <FUNCTION>sched_get_priority_max()</FUNCTION> and <FUNCTION>sched_get_priority_min()</FUNCTION> to get the ranges of priority numbers you can use. Use <FUNCTION>sched_setparam()</FUNCTION> to change priorities. POSIX dispatching priorities are nondegrading. (Note that in a program that links with the pthreads library, these same function names are library functions that return thread scheduling priority numbers unrelated to process scheduling.)</PARAGRAPH>
<TIP><PREFIX>Tip</PREFIX>The POSIX scheduling priority values reported by these functions and declared in <FILENAME>sched.h</FILENAME> are not numerically the same as the bands supported by <FUNCTION>schedctl()</FUNCTION> and declared in <FILENAME>sys/schedctl.h</FILENAME>. The POSIX numbers are numerically higher for superior priority. However, the POSIX range is functionally (but not numerically) equivalent to the &ldquo;normal&rdquo; range supported by <FUNCTION>schedctl()</FUNCTION> (NDPNORMMAX to NDPNORMMIN).</TIP>
<PARAGRAPH>POSIX scheduling uses one of two scheduling policies, strict FIFO and round-robin, which are described in detail in the <REFPAGE>sched_setscheduler(2)</REFPAGE> reference page. The round-robin scheduler, which rotates processes of equal priority on a time-slice basis, is the default. You can query the time-slice interval with <FUNCTION>sched_get_rr_interval()</FUNCTION>. You can change both the policy and the priority by using <FUNCTION>sched_setscheduler()</FUNCTION>.&space;</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Self-Dispatching Processes</TITLE><PARAGRAPH>Often, each child process has a particular role to play in the application, and the function that you name to <INDEXTARGET ID="TIP_4c.mpcproc9"><!-- POSTPROCESSDATA: TIP_4c.mpcproc9|process:self-dispatching --><INDEXTARGET ID="TIP_4c.mpcproc10"><!-- POSTPROCESSDATA: TIP_4c.mpcproc10|parallel computation:self-dispatching process --><FUNCTION>sproc()</FUNCTION> represents that work. The child process stays in that function until it terminates.</PARAGRAPH>
<PARAGRAPH>Another design is possible. In some applications, you may have to manage a flow of many relatively short activities that should be done in parallel. However, the <FUNCTION>sproc()</FUNCTION> function has considerable overhead. It is inefficient to continually create and destroy child processes. You do not want to create a new child process for each small activity and destroy it afterward. Instead, you can create a pool containing a small number of processes. When a piece of work needs to be done, you can dispatch one process to do it. The fragmentary code in <XREF IDREF="68335" TYPE="TEXT">Example&nbsp;12-1</XREF> shows the general approach.</PARAGRAPH>
<CODE><CAPTION LBL="12-1"><PREFIX>Example 12-1 </PREFIX><XREFTARGET ID="68335">Partial Code to Manage a Pool of Processes</CAPTION>typedef&nbsp;void&nbsp;(*workFunc)(void&nbsp;*arg);
struct&nbsp;oneSproc&nbsp;{
&nbsp;&nbsp;&nbsp;struct&nbsp;oneSproc&nbsp;*next;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;->&nbsp;next&nbsp;oneSproc&nbsp;ready&nbsp;to&nbsp;run&nbsp;*/
&nbsp;&nbsp;&nbsp;workFunc&nbsp;calledFunc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;->&nbsp;function&nbsp;the sproc&nbsp;is&nbsp;to&nbsp;call&nbsp;*/
&nbsp;&nbsp;&nbsp;void&nbsp;*callArg;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;argument&nbsp;to&nbsp;pass&nbsp;to&nbsp;the called&nbsp;func&nbsp;*/
&nbsp;&nbsp;&nbsp;usema_t&nbsp;*sprocDone;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;optional&nbsp;sema&nbsp;to&nbsp;post&nbsp;on&nbsp;completion&nbsp;*/
&nbsp;&nbsp;&nbsp;usema_t&nbsp;*sprocWait;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;sproc&nbsp;waits&nbsp;for&nbsp;work&nbsp;here&nbsp;*/
}&nbsp;sprocList[NUMSPROCS];
usema_t&nbsp;*readySprocs;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;count&nbsp;represents&nbsp;sprocs&nbsp;ready&nbsp;to&nbsp;work&nbsp;*/
uslock_t&nbsp;sprocListLock;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;mutex&nbsp;control&nbsp;of&nbsp;sprocList&nbsp;head&nbsp;*/
struct&nbsp;oneSproc&nbsp;*sprocList;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;->&nbsp;first&nbsp;ready&nbsp;oneSproc&nbsp;*/
/*
||&nbsp;Put&nbsp;a&nbsp;oneSproc&nbsp;structure&nbsp;on&nbsp;the&nbsp;ready&nbsp;list&nbsp;and&nbsp;sleep&nbsp;on&nbsp;it.
||&nbsp;Called&nbsp;by&nbsp;a&nbsp;child&nbsp;process&nbsp;when&nbsp;its&nbsp;work&nbsp;is&nbsp;done.
*/
void&nbsp;sprocSleep(struct&nbsp;oneSproc&nbsp;*theSproc)
{
&nbsp;&nbsp;&nbsp;&nbsp;ussetlock(sprocListLock);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;acquire&nbsp;exclusive&nbsp;rights&nbsp;to&nbsp;sprocList&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;theSproc->next&nbsp;=&nbsp;sprocList;&nbsp;&nbsp;/*&nbsp;put&nbsp;self&nbsp;on&nbsp;the&nbsp;list&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;sprocList&nbsp;=&nbsp;theSproc;
&nbsp;&nbsp;&nbsp;&nbsp;usunsetlock(sprocListLock);&nbsp;&nbsp;/*&nbsp;release&nbsp;sprocList&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;usvsema(readySprocs);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;notify&nbsp;master,&nbsp;at&nbsp;least&nbsp;1&nbsp;on&nbsp;the&nbsp;list&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;uspsema(theSproc->sprocWait);/*&nbsp;sleep&nbsp;until&nbsp;master&nbsp;posts&nbsp;me&nbsp;*/
}
/*
||&nbsp;Body&nbsp;of&nbsp;a&nbsp;general-purpose&nbsp;child&nbsp;process.&nbsp;The&nbsp;argument,&nbsp;which&nbsp;must
||&nbsp;be&nbsp;declared&nbsp;void*&nbsp;to&nbsp;match&nbsp;the&nbsp;sproc()&nbsp;prototype,&nbsp;is&nbsp;the&nbsp;oneSproc
||&nbsp;structure&nbsp;that&nbsp;represents&nbsp;this&nbsp;process.&nbsp;&nbsp;&nbsp;The&nbsp;contents&nbsp;of&nbsp;that
||&nbsp;struct,&nbsp;in&nbsp;particular&nbsp;sprocWait,&nbsp;are&nbsp;initialized&nbsp;by&nbsp;the&nbsp;parent.
*/
void&nbsp;childBody(void&nbsp;*theSprocAsVoid)
{
&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;oneSproc&nbsp;*mySproc&nbsp;=&nbsp;(struct&nbsp;oneSproc&nbsp;*)theSprocAsVoid;
&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;here&nbsp;one&nbsp;could&nbsp;establish&nbsp;signal&nbsp;handlers,&nbsp;etc.&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;for(;;)
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprocSleep(mySproc);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;wait&nbsp;for&nbsp;work&nbsp;to&nbsp;do&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mySproc->calledFunc(mySproc->callArg);&nbsp;&nbsp;/*&nbsp;do&nbsp;the&nbsp;work&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mySproc->sprocDone)&nbsp;&nbsp;&nbsp;/*&nbsp;if&nbsp;a&nbsp;completion&nbsp;sema&nbsp;is&nbsp;given,&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usvsema(mySproc->sprocDone);&nbsp;/*&nbsp;..post&nbsp;it&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;}
}
/*
||&nbsp;Acquire&nbsp;a&nbsp;oneSproc&nbsp;structure&nbsp;from&nbsp;the&nbsp;ready&nbsp;list,&nbsp;waiting&nbsp;if&nbsp;necessary.&nbsp;
||&nbsp;Called&nbsp;by&nbsp;the&nbsp;master&nbsp;process&nbsp;as&nbsp;part&nbsp;of&nbsp;dispatching&nbsp;a&nbsp;sproc.
*/
struct oneSproc&nbsp;*getSproc()
{
&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;oneSproc&nbsp;*theSproc;
&nbsp;&nbsp;&nbsp;&nbsp;uspsema(readySprocs);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;wait&nbsp;until&nbsp;at&nbsp;least&nbsp;1&nbsp;sproc&nbsp;is&nbsp;free&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;ussetlock(sprocListLock);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;acquire&nbsp;exclusive&nbsp;rights&nbsp;to&nbsp;sprocList&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;theSproc&nbsp;=&nbsp;sprocList;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;get&nbsp;address&nbsp;of&nbsp;first&nbsp;free&nbsp;oneSproc&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;sprocList&nbsp;=&nbsp;theSproc->next;&nbsp;&nbsp;/*&nbsp;make&nbsp;next&nbsp;in&nbsp;list,&nbsp;the&nbsp;head&nbsp;of&nbsp;list&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;usunsetlock(sprocListLock);&nbsp;&nbsp;/*&nbsp;release&nbsp;sprocList&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;theSproc;
}
/*
||&nbsp;Start&nbsp;a&nbsp;function&nbsp;going&nbsp;asynchronously.&nbsp;Called&nbsp;by&nbsp;master&nbsp;process.
*/
void&nbsp;execFunc(workFunc&nbsp;toCall,&nbsp;void&nbsp;*callWith,&nbsp;usema_t&nbsp;*done)
{
&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;oneSproc&nbsp;*theSproc&nbsp;=&nbsp;getSproc();
&nbsp;&nbsp;&nbsp;&nbsp;theSproc->calledFunc&nbsp;=&nbsp;toCall;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;set&nbsp;address&nbsp;of&nbsp;func&nbsp;to&nbsp;exec&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;theSproc->callArg&nbsp;=&nbsp;callWith;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;set&nbsp;argument&nbsp;to&nbsp;pass&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;theSproc->sprocDone&nbsp;=&nbsp;done;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;set&nbsp;sema&nbsp;to&nbsp;post&nbsp;on&nbsp;completion&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;usvsema(theSproc->sprocWait);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;wake&nbsp;up&nbsp;sleeping&nbsp;process&nbsp;*/
}
</CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Parallelism in Real-Time Applications</TITLE><PARAGRAPH>In real-time programs such as aircraft or vehicle simulators, separate processes are used to divide the work of the simulation and distribute it onto multiple CPUs. In these demanding applications, the programmer frequently uses IRIX facilities to</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>reserve one or more CPUs of a multiprocessor for exclusive use by the application</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>isolate the reserved CPUs from all interrupts</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>assign specific processes to execute on specific, reserved CPUs</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>These facilities are described in detail in the <DOCTITLE>REACT Real-Time Programmer's Guide</DOCTITLE> (007-2499-<ITALICS>nnn</ITALICS>). Also covered in that book is the use of the Frame Scheduler, an alternate process scheduler. The normal process scheduling algorithm of the IRIX kernel attempts to keep all CPUs busy and to keep all processes advancing in a fair manner. This algorithm is in conflict with the stringent needs of a real-time program, which needs to dedicate predictable amounts of hardware capacity to its processes, without regard to fairness.</PARAGRAPH>
<PARAGRAPH>The Frame Scheduler seizes one or more CPUs of a multiprocessor, isolates them, and executes a specified set of processes on each CPU in strict rotation. The Frame Scheduler has much lower overhead than the normal IRIX scheduler, and it has features designed for real-time work, including detection of overrun (when a scheduled process does not complete its work in the necessary time) and underrun (when a scheduled process fails to execute in its turn).</PARAGRAPH>
<PARAGRAPH>At this writing there are no real-time applications that use multiple nodes of an Array system. &space;&space;</PARAGRAPH>
</SECTION1>
</CHAPTER>
