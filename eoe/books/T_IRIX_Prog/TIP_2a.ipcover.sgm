<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="2"><TITLE><XREFTARGET ID="46302">Interprocess Communication</TITLE><PARAGRAPH>The term <ITALICS>interprocess communication</ITALICS> (IPC) describes any method of coordinating the actions of multiple processes, or sending data from one process to another. IPC is commonly used to allow processes to coordinate the use of shared data objects; for instance, to let two programs update the same data in memory without interfering with each other, or to make data acquired by one process available to others.</PARAGRAPH>
<PARAGRAPH>This chapter provides an overview of the IPC implementations available, including:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="76877" TYPE="TITLE">&ldquo;Types of Interprocess Communication Available&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="98749" TYPE="TITLE">&ldquo;Using POSIX IPC&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="66587" TYPE="TITLE">&ldquo;Using IRIX IPC&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="74312" TYPE="TITLE">&ldquo;Using System V IPC&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="85565" TYPE="TITLE">&ldquo;Using 4.2 BSD IPC&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The following chapters in this Part provide details, as follows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="28345" TYPE="TITLE">Chapter&nbsp;3, &ldquo;Sharing Memory Between Processes,&rdquo;</XREF> covers shared memory.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="82386" TYPE="TITLE">Chapter&nbsp;4, &ldquo;Mutual Exclusion,&rdquo;</XREF> covers semaphores, locks, and similar facilities.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="89823" TYPE="TITLE">Chapter&nbsp;5, &ldquo;Signalling Events,&rdquo;</XREF> covers the different signal facilities.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="48324" TYPE="TITLE">Chapter&nbsp;6, &ldquo;Message Queues,&rdquo;</XREF> describes two varieties of message queue.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="76877">Types of Interprocess Communication Available</TITLE><PARAGRAPH>IRIX is compatible with a broad variety of IPC mechanisms. IRIX conforms to the POSIX standards for real-time extensions (IEEE standard 1003.1b) and threads (IEEE 1003.1c). Other IPC features are compatible with the two major schools of UNIX programming: BSD UNIX and AT&amp;T System V Release 4 (SVR4) UNIX.<INDEXTARGET ID="TIP_2a.ipcover1"><!-- POSTPROCESSDATA: TIP_2a.ipcover1|IPC:BSD-styleIPC:SVR4-styleIPC:IRIX-styleIPC:POSIX-styleBSD and IPCSVR4 and IPC IRIX and IPCPOSIX and IPC --></PARAGRAPH>
<PARAGRAPH><XREF IDREF="90525" TYPE="TABLE">Table&nbsp;2-1</XREF> summarizes the types of IPC that IRIX supports, and lists the systems with which IRIX is compatible. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="2-1"><PREFIX>Table 2-1 </PREFIX><XREFTARGET ID="90525">Types of IPC and Compatibility</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Type of IPC</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Purpose</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>Compatibility</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Signals</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>A means of receiving notice of a software or 
hardware event, asynchronously.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>POSIX, SVR4, BSD</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Shared memory</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>A way to create a segment of memory that is mapped 
into the address space of two or more processes, each 
of which can access and alter the memory contents.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>POSIX, IRIX, SVR4</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Semaphores</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Software objects used to coordinate access to 
countable resources.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>POSIX, IRIX, SVR4</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Locks, Mutexes, 
and Condition 
Variables</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Software objects used to ensure exclusive use of 
single resources or code sequences.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>POSIX, IRIX</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Barriers</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Software objects used to ensure that all processes in a 
group are ready before any of them proceed.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>IRIX</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Message Queues</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Software objects used to exchange an ordered 
sequence of messages.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>POSIX, SVR4</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>File Locks</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>A means of gaining exclusive use of all or part of a 
file.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>SVR4, BSD</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Sockets</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="216"><PARAGRAPH>Virtual data connections between processes that may 
be in different systems.</PARAGRAPH>
</CELL>
<CELL LEFT="315" WIDTH="90"><PARAGRAPH>BSD</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The different implementations of these IPC features can be summarized as follows:<INDEXTARGET ID="TIP_2a.ipcover2"><!-- POSTPROCESSDATA: TIP_2a.ipcover2|IPC:portabilityIPC:types --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>POSIX compliant library calls are provided for signal handling, shared memory, semaphores, mutexes, condition variables, and message queues. The implementation is highly tuned and has low system overhead. POSIX facilities are usable from POSIX threads (see <XREF IDREF="77267" TYPE="TITLE">Chapter&nbsp;13, &ldquo;Thread-Level Parallelism&rdquo;</XREF>).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>IRIX unique library calls are provided for shared memory, semaphores, locks, and barriers. The implementation has slightly more overhead than POSIX operations, but sometimes takes advantage of concurrent hardware in multiprocessors, and has a number of special features, such as the ability to apply <FUNCTION>poll()</FUNCTION> to semaphores.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>System function calls compatible with AT&amp;T System V Release 4 are provided for signal handling, shared memory, semaphores, message queues, and file locking. The implementation is provided for ease of porting software, but is not particularly efficient.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Library functions compatible with BSD UNIX are provided for signal handling, file locking, and socket support.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Select your IPC mechanisms based on these guidelines:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Never mix the implementations of a given mechanism in a single program. For example, unpredictable results can follow when a single program mixes POSIX and System V signal-handling functions, or mixes both BSD and System V file locking calls.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The POSIX libraries are the newest implementations, and in many cases they are the most efficient.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A program based on POSIX threads should use POSIX synchronization mechanisms because they are optimized for pthreads use.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Use System V IPC functions for code that must comply with the MIPS ABI, or code that you are porting from another System V operating system.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="98749">Using POSIX IPC</TITLE><PARAGRAPH>In order to use the POSIX IPC functions described in this part of the book, you must include the correct header files and libraries when compiling.<INDEXTARGET ID="TIP_2a.ipcover3"><!-- POSTPROCESSDATA: TIP_2a.ipcover3|IPC:POSIX-style --></PARAGRAPH>
<PARAGRAPH>The header files required for each function are listed in the reference pages for the functions (you will find clickable links to reference pages in the following chapters).</PARAGRAPH>
<PARAGRAPH>POSIX IPC functions are defined in the standard <FILENAME>libc</FILENAME> library. That library is included automatically in any link by the <FILENAME>cc</FILENAME> command.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="66952">POSIX IPC Name Space</TITLE><PARAGRAPH>POSIX shared memory segments, named semaphores, and message queues are persistent objects that survive the termination of the program that creates them (unless the program explicitly removes them). The POSIX standard specifies that these persistent names can be implemented in the filesystem, and the current IRIX implementation does use filenames in the filesystem to represent IPC objects. In order to access a named semaphore or message queue, a program opens the object using a pathname, similar to the way a program opens a disk file.</PARAGRAPH>
<PARAGRAPH>Because these persistent objects are currently implemented as files, you can display and access them using IRIX commands for files such as <COMMAND>ls</COMMAND>, <COMMAND>rm</COMMAND>, <COMMAND>chmod</COMMAND> and <COMMAND>chown</COMMAND>. However, you should keep in mind that this is an implementation choice, not a standardized behavior. Other implementations of POSIX IPC may not use the filesystem as a name space for IPC objects, and the IRIX implementation is free to change its implementation in the future. For best portability, do not assume that IPC objects are always files.</PARAGRAPH>
<PARAGRAPH>If you plan to share an object between processes that could be started from different working directories, you should always open the object using the full pathname starting with a slash (&ldquo;/&rdquo;). That ensures that unrelated processes always refer to the same object, regardless of their current working directory.</PARAGRAPH>
<PARAGRAPH>When a shared object is temporary, you can use the <FUNCTION>tempnam()</FUNCTION> library function to generate a temporary pathname (see the <REFPAGE>tempnam(3)</REFPAGE> reference page).</PARAGRAPH>
<PARAGRAPH>Other POSIX IPC objects&mdash;nameless semaphores, mutexes, and condition variables&mdash;are not persistent, but exist only in memory and are identified only by their addresses. They disappear when the programs that use them terminate.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="66587">Using IRIX IPC</TITLE><PARAGRAPH>The IRIX IPC facilities are designed to meet the demands of parallel programming in multiprocessor systems. They offer advantages for this use, but they are IRIX specific, so programs using them are not portable to other systems.<INDEXTARGET ID="TIP_2a.ipcover4"><!-- POSTPROCESSDATA: TIP_2a.ipcover4|IPC:IRIX-style --><INDEXTARGET ID="TIP_2a.ipcover5"><!-- POSTPROCESSDATA: TIP_2a.ipcover5|IPC:parallel programmingprogramming:parallelparallel programming --></PARAGRAPH>
<PARAGRAPH>In order to use any IRIX IPC functions, you need to include the correct header files and link libraries when compiling. The header files required for each function are listed in the reference pages for the functions (you will find clickable links to reference pages in the following chapters).</PARAGRAPH>
<PARAGRAPH>IRIX IPC functions are defined in the standard <FILENAME>libc</FILENAME> library (it is included automatically in any link by the <FILENAME>cc</FILENAME> command) and in the <FILENAME>libmpc</FILENAME> library, which you include with <COMMAND>-lmpc</COMMAND>.</PARAGRAPH>
<PARAGRAPH>IRIX IPC functions all require the use of a <INDEXTARGET ID="TIP_2a.ipcover6"><!-- POSTPROCESSDATA: TIP_2a.ipcover6|IPC:arenasIPC:IRIX arenasarenas:IRIX IPC --><ITALICS>shared arena</ITALICS>, a segment of memory that can be mapped into the address spaces of multiple processes. The first step in preparing to use any IRIX IPC object is to create a shared arena, as documented under <XREF IDREF="19447" TYPE="TITLE">&ldquo;Initializing Arena Attributes&rdquo;</XREF>.</PARAGRAPH>
<PARAGRAPH>A shared arena is identified with a file that acts as the backing store for the arena memory. Communicating processes gain access to the arena by specifying its filename. All processes using the same arena have access to the same set of IPC objects. This makes it relatively easy for unrelated processes to communicate using IRIX IPC; they only have to know the filename of the arena to gain access.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74312">Using System V IPC</TITLE><PARAGRAPH>IRIX supports SVR4 functions for signals, shared memory, semaphores, message queues, and file locking. To use them you need to include the correct header files when compiling. The header files required for each function are listed in the reference pages for the functions (you will find clickable links to reference pages in the following chapters).</PARAGRAPH>
<PARAGRAPH>System V functions are primarily kernel functions. No special library linkage is required to access them. There is general discussion of SVR4 IPC operations in the <REFPAGE>intro(2)</REFPAGE> reference page.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="10403">SVR4 IPC Name Space</TITLE><PARAGRAPH>All SVR4 IPC objects are named in a special IPC name space. An object such as a shared memory segment or message queue is named by a numeric key, and has the following attributes (which are defined in the header file <FILENAME>sys/ipc.h</FILENAME>):</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the UID and GID of the creating process</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the UID and GID of the owning process (which can be different from the creator)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>access permissions in the same format as used with files</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The commands and functions used to manage the IPC name space are listed in <XREF IDREF="46323" TYPE="TABLE">Table&nbsp;2-2</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="2-2"><PREFIX>Table 2-2 </PREFIX><XREFTARGET ID="46323"> <EMPHASIS>(continued)        </EMPHASIS>SVR4 IPC Name Space Management</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="81"><PARAGRAPH>Function Name</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="306"><PARAGRAPH>Purpose and Operation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH><REFPAGE>ipcs(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="306"><PARAGRAPH>List existing shared memory segments (and other IPC objects) in the system 
name space with their status.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH><REFPAGE>ipcrm(1)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="306"><PARAGRAPH>Remove a shared memory segment (or other IPC object) from the system 
name space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="81"><PARAGRAPH><REFPAGE>ftok(3)</REFPAGE>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="306"><PARAGRAPH>Create a semi-unique numeric key based on a file pathname.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<SECTION3 LBL="" HELPID = ""><TITLE>Configuring the IPC Name Space</TITLE><PARAGRAPH>SVR4 IPC objects are stored in kernel tables of limited, fixed size. You configure the size of these tables by changing kernel tunable parameters. These parameters are documented in detail in the book <DOCTITLE>IRIX Admin: System Configuration and Operation</DOCTITLE> (007-2859-<ITALICS>nnn</ITALICS>). See &ldquo;Appendix A: IRIX Kernel Tunable Parameters.&rdquo;</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Listing and Removing Persistent Objects</TITLE><PARAGRAPH>Objects in the IPC name space are created by programs and can be removed by programs. However, IPC objects by definition are used by multiple processes, and it is sometimes a problem to determine which process should remove an object, and when it is safe to do so.</PARAGRAPH>
<PARAGRAPH>For this reason, IPC objects are often created and never removed. In these cases, they persist until the system is rebooted, or until they are removed manually.</PARAGRAPH>
<PARAGRAPH>You can list all the components of the IPC name space using the <COMMAND>ipcs</COMMAND> command. You can remove an object with the <COMMAND>ipcrm</COMMAND> command. If you remove an object that is in use, unpredictable results will follow.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Access Permissions</TITLE><PARAGRAPH>IPC objects are not part of any filesystem, but access to IPC objects is controlled by rules like the rules that govern file access. For example, if the access permissions of a shared memory segment are set to 640, the segment can be read-write for processes that have the same UID as the segment owner, but the segment is read-only to processes that have only the GID of the owner, and is inaccessible to other processes.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Choosing and Communicating Key Values</TITLE><PARAGRAPH>The &ldquo;name&rdquo; of an IPC object is an integer. Two small problems are: how a program can select a unique key to use when making an IPC object, and how to communicate the key to all the processes that need access to the object. The <FUNCTION>ftok()</FUNCTION> library function can be used to create a predictable key based on a file pathname. For example, unrelated but cooperating programs can agree to use <FUNCTION>ftok()</FUNCTION> with a designated project file and project code, so that each program will arrive at the same key.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Using ID Numbers</TITLE><PARAGRAPH>When an IPC object is created, it has the key it is given by the creating process, but it is also assigned a second integer, the ID. The key number is chosen by the application, and is predictable. If the application creates the object each time the application starts up, the key is always the same. The ID number is arbitrary, and a new ID is created each time an object is created.</PARAGRAPH>
<PARAGRAPH>A process can gain access to an object based on either number, the key or the ID. For example, an SVR4 shared memory segment has a key and an ID. The <FUNCTION>shmget()</FUNCTION> function takes a key and returns the corresponding ID. The ID is used to attach the segment. However, if a process knows the ID, it can simply use it, without first calling <FUNCTION>shmget()</FUNCTION> to obtain it.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Private Key Values</TITLE><PARAGRAPH>When creating an IPC object, you can specify a key of KEY_PRIVATE (0). This causes an object to be created and recorded in the IPC name space with a key of 0. The created object cannot be accessed from another process by key, because if another process uses KEY_PRIVATE, it creates its own object. However, another process can access a key-private object using the object's ID number.</PARAGRAPH>
<PARAGRAPH>You can use the KEY_PRIVATE feature when you want to create an IPC object for use within a single process or share group (a share group is the set of processes that share one address space; see <XREF IDREF="78136" TYPE="TITLE">&ldquo;Process Creation and Share Groups&rdquo;</XREF>). The IPC object can be used within the share group based on its address or by ID number. Because it has no key, it cannot be used outside the share group.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="85565">Using 4.2 BSD IPC</TITLE><PARAGRAPH>The 4.2 BSD functions for signals and file locking are available. To use them, you must include the correct header files and link libraries when compiling. The header files required for each function are listed in the reference pages for the functions (you will find clickable links to reference pages in the following chapters).</PARAGRAPH>
<PARAGRAPH>One header file, <FILENAME>signal.h</FILENAME>, declares both SVR4 and BSD signal-handling functions. Some of the BSD and SVR4 functions have the same names, but different types of arguments or different results when called. In order to declare the BSD family of signal functions in your program, you must be sure to define the compiler variable _BSD_SIGNALS or _BSD_COMPAT to the compiler. You could do this directly in the source code. More often you will manage compilation with <COMMAND>make</COMMAND>, and you will include <COMMAND>-D_BSD_SIGNALS</COMMAND> as one of the compiler options in the Makefile.</PARAGRAPH>
<PARAGRAPH>The BSD compatible function for file locking, <FUNCTION>flock()</FUNCTION>, is defined in the standard <FILENAME>libc</FILENAME> library. That library is included automatically in any link by the <FILENAME>cc</FILENAME> command. However, when you are using C++ (not C), the function name &ldquo;flock&rdquo; conflicts with a structure name declared in <FILENAME>sys/fcntl.h</FILENAME>. In order to define the <FUNCTION>flock()</FUNCTION> function and not the structure, define the compiler variable _BSD_COMPAT.</PARAGRAPH>
<PARAGRAPH>A BSD-compatible kernel function for managing the termination of child processes, wait3(), is discussed under <XREF IDREF="49551" TYPE="TITLE">&ldquo;Process &ldquo;Reaping&rdquo;&rdquo;</XREF>.</PARAGRAPH>
</SECTION1>
</CHAPTER>
