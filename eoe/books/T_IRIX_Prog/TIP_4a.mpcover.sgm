<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="10"><TITLE><XREFTARGET ID="93055">Models of Parallel Computation</TITLE><PARAGRAPH>You design a program to perform computations in parallel in order to get higher performance, by bringing more hardware to bear on the problem concurrently. In order to succeed, you need to understand the hardware architecture of the target system, and also the software interfaces that are available. <INDEXTARGET ID="TIP_4a.mpcover1"><!-- POSTPROCESSDATA: TIP_4a.mpcover1|parallel computation --></PARAGRAPH>
<PARAGRAPH>The purpose of this chapter is to give a high-level overview of parallel programming models and of the hardware that they use. The parallel models are discussed in more detail in following chapters.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="51449">Parallel Hardware Models</TITLE><PARAGRAPH>Silicon Graphics makes a variety of systems:<INDEXTARGET ID="TIP_4a.mpcover2"><!-- POSTPROCESSDATA: TIP_4a.mpcover2|parallel hardwareparallel computation:hardware support for --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The O2, Indy, and Indigo workstations have single CPUs. Although they can perform I/O operations in parallel with computing, they can execute only one stream of instructions at a time, and time-share the CPU across all active processes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The CHALLENGE and Onyx systems (and their POWER versions) are symmetric multiprocessor (SMP) computers. In these systems at least 2, and as many as 36, identical microprocessors access a single, common memory and a common set of peripherals through a high-speed bus.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The OCTANE workstation is a two-CPU SMP.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The POWER CHALLENGEarray comprises 2 or more POWER CHALLENGE systems connected by a high-speed local HIPPI network. Each node in the array is an SMP with 2 to 36 CPUs. Nodes do not share a common memory; communication between programs in different nodes passes through sockets. However, the entire array can be administered and programmed as a single entity.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>An Origin2000 system provides nodes each containing two or four CPUs, connected in systems of 2 to 128 nodes by a high-speed connection fabric. All system memory is uniformly addressable, but there is a time penalty for the use of nonlocal memory (see <XREF IDREF="88017" TYPE="TITLE">&ldquo;Using Origin2000 Nonuniform Memory&rdquo;</XREF>).</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Most programs have a single thread of execution that runs as if it were in a uniprocessor, employing the facilities of a single CPU. The IRIX operating system applies CPUs to different programs in order to maximize system throughput.</PARAGRAPH>
<PARAGRAPH>You can write a program so that it makes use of more than one CPU at a time. The software interface that you use for this is the parallel programming model. The IRIX operating system gives you a variety of such interfaces. Each one is designed around a different set of assumptions about the hardware, especially the memory system.</PARAGRAPH>
<PARAGRAPH>Each model is implemented using a different library of code linked with your program. In some cases you can design a mixed-model program, but in general this is a recipe for confusion.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Parallel Programs on Uniprocessors</TITLE><PARAGRAPH>It might seem a contradiction, but it is possible to execute some parallel programs in uniprocessors. Obviously you would not do this expecting the best performance. However, it is easier to debug a parallel program by running it in the more predictable environment of a single CPU, on a multiprocessor or on a uniprocessor workstation. Also, you might deliberately restrict a parallel program to one CPU in order to establish a performance baseline.</PARAGRAPH>
<PARAGRAPH>Most parallel programming libraries adapt to the available hardware. They run concurrently on multiple CPUs when the CPUs are available (up to some programmer-defined limit). They run on a limited number, or even just one CPU, when necessary. For example, the Fortran programmer can control the number of CPUs used by a MIPSpro Fortran 77 program by setting environment variables before the program starts (see <XREF IDREF="41755" TYPE="TEXT"></XREF>
<BOLD>Chapter&nbsp;11, &ldquo;Statement-Level Parallelism&rdquo;</BOLD><XREF></XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Types of Memory Systems</TITLE><PARAGRAPH>The key memory issue for parallel execution is this: Can one process access data in memory that belongs to another concurrent process, and if so, what is the time penalty for doing so? The answer depends on the hardware architecture, and determines the optimal programming model.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Single Memory Systems</TITLE><PARAGRAPH>The CHALLENGE/Onyx system architecture uses a high speed system bus to connect all components of the system.</PARAGRAPH>
<PARAGRAPH>One component is the physical memory system, which plugs into the bus and is equally available to all other components. Other units that plug into the system bus are I/O adapters, such as the VME bus adapter. CPU modules containing MIPS R4000, R8000, or R10000 CPUs are also plugged into the system bus.</PARAGRAPH>
<PARAGRAPH>In the CHALLENGE/Onyx architecture, the single, common memory has these features:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>There is a single address map; that is, the same word of memory has the same address in every CPU.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>There is no time penalty for communication between processes because every memory word is accessible in the same amount of time from any CPU.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>All peripherals are equally accessible from any process.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The OCTANE workstation also uses a single, common memory that is accessible from either of its CPUs in the same amount of time.</PARAGRAPH>
<PARAGRAPH>The effect of a single, common memory is that processes running in different CPUs can share memory and can update the identical memory locations concurrently. For example, suppose there are four CPUs available to a Fortran program that processes a large array of data. You can divide a single DO-loop so that it executes concurrently on the four CPUs, each CPU working in one-fourth of the array in memory.</PARAGRAPH>
<PARAGRAPH>As another example, IRIX allows processes to map a single segment of memory into the virtual address spaces of two or more concurrent processes (see <XREF IDREF="28345" TYPE="TITLE">Chapter&nbsp;3, &ldquo;Sharing Memory Between Processes&rdquo;</XREF>). Two processes can transfer data at memory speeds, one putting the data into a mapped segment and the other process taking the data out. They can coordinate their access to the data using semaphores located in the shared segment (see <XREF IDREF="82386" TYPE="TITLE">Chapter&nbsp;4, &ldquo;Mutual Exclusion&rdquo;</XREF>).</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Multiple Memory Systems</TITLE><PARAGRAPH>In an Array system, such as a POWER CHALLENGEarray, each node is a computer built on the CHALLENGE/Onyx architecture. However, the only connection between nodes is the high-speed HIPPI bus between nodes. The system does not offer a single system memory; instead, there is a separate memory subsystem in each node. The effect is that:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>There is not a single address map. A word of memory in one node cannot be addressed at all from another node.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>There is a time penalty for some interprocess communication. When data passes between programs in different nodes, it passes over the HIPPI network, which takes longer than a memory-to-memory transfer.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Peripherals are accessible only in the node to which they are physically attached.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Nevertheless, it is possible to design an application that executes concurrently in multiple nodes of an Array. The message-passing interface (MPI) is designed specifically for this.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Hierarchic, Nonuniform Memory Systems</TITLE><PARAGRAPH>The Origin2000 system uses a memory hierarchy. A certain amount of memory is a physical part of each node. The hardware creates the image of a single system memory. The memory installed in any node can be accessed from any other node as if all memory were local. However, the node number is part of the physical address of a word of memory. There is a multiple-level hierarchy of speed: memory in the same node as the CPU is accessed in the least amount of time, while memory in any other node takes an additional fraction of a microsecond to access. The time penalty depends on the relative location of the two nodes in the system.</PARAGRAPH>
<PARAGRAPH>These are the results of this design:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>There is a single address map. A word of memory can be addressed from any node.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>There is a time penalty for some accesses, depending on the node that requests the memory and the node that contains it. However, this time cost is far smaller than the cost of communicating over a socket and a network link.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Peripherals are accessible from any node, but there is a time penalty for access to a peripheral from a node other than the one to which the peripheral is attached.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The implications of these features are explored at more length under <XREF IDREF="88017" TYPE="TITLE">&ldquo;Using Origin2000 Nonuniform Memory&rdquo;</XREF>.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Parallel Execution Models</TITLE><PARAGRAPH>You can compare the available models for parallel programming on two features: <INDEXTARGET ID="TIP_4a.mpcover3"><!-- POSTPROCESSDATA: TIP_4a.mpcover3|parallel computation:models of --></PARAGRAPH>
<TABLE COLUMNS="2"><TABLEBODY><ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH>granularity </PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="297"><PARAGRAPH>The relative size of the unit of computation that executes in 
parallel: a single statement, a function, or an entire process.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="90"><PARAGRAPH>communication 
channel</PARAGRAPH>
</CELL>
<CELL LEFT="95" WIDTH="297"><PARAGRAPH>The basic mechanism by which the independent, concurrent units 
of the program exchange data and synchronize their activity.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>A summary comparison of the available models is shown in <XREF IDREF="86725" TYPE="TABLE">Table&nbsp;10-1</XREF>. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="10-1"><PREFIX>Table 10-1 </PREFIX><XREFTARGET ID="86725">Comparing Parallel Models</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Model</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Granularity</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Communication</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Power Fortran, 
IRIS&nbsp;POWER&nbsp;C</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Looping statement (DO or <VARIABLE>for</VARIABLE> 
statement)</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Shared variables in a single user 
address space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Ada95 tasks</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Ada Procedure</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Shared variables in a single user 
address space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>POSIX threads</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>C function</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Shared variables in a single user 
address space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Lightweight UNIX processes 
(<FUNCTION>sproc()</FUNCTION>)</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>C function</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Arena memory segment in a 
single user address space.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>General UNIX processes 
(<FUNCTION>fork()</FUNCTION>, <FUNCTION>exec()</FUNCTION>)</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Process</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Arena segment mapped to 
multiple address spaces.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Shared Memory (SHMEM)</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Process</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Memory copy.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Parallel Virtual Machine 
(PVM)</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Process</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Memory copy within node; 
HIPPI network between nodes.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Message-Passing (MPI)</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Process</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Memory copy within node; 
special HIPPI Bypass interface 
between nodes.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="87749">Process-Level Parallelism</TITLE><PARAGRAPH>A UNIX process consists of an address space, a large set of process state values, and one thread of execution. The main task of the IRIX kernel is to create processes and to dispatch them to different CPUs to maximize the utilization of the system.<INDEXTARGET ID="TIP_4a.mpcover4"><!-- POSTPROCESSDATA: TIP_4a.mpcover4|process:parallelism --><INDEXTARGET ID="TIP_4a.mpcover5"><!-- POSTPROCESSDATA: TIP_4a.mpcover5|parallel computation:process-level --></PARAGRAPH>
<PARAGRAPH>IRIX contains a variety of interprocess communication (IPC) mechanisms, which are discussed in <XREF IDREF="46302" TYPE="TITLE">Chapter&nbsp;2, &ldquo;Interprocess Communication.&rdquo;</XREF> These mechanisms can be used to exchange data and to coordinate the activities of multiple, asynchronous processes within a single-memory system. (Processes running in different nodes of an Array must use one of the distributed models; see <XREF IDREF="15603" TYPE="TITLE">&ldquo;Message-Passing Models&rdquo;</XREF>.)</PARAGRAPH>
<PARAGRAPH>In traditional UNIX practice, one process creates another with the system call <FUNCTION>fork()</FUNCTION>, which makes a duplicate of the calling process, after which the two copies execute in parallel. Typically the new process immediately uses the <FUNCTION>exec()</FUNCTION> function to load a new program. (The <REFPAGE>fork(2)</REFPAGE> reference page contains a complete list of the state values that are duplicated when a process is created. The <REFPAGE>exec(2)</REFPAGE> reference page details the process of creating a new program image for execution.)</PARAGRAPH>
<PARAGRAPH>IRIX also supports the system function <FUNCTION>sproc()</FUNCTION>, which creates a lightweight process. A process created with <FUNCTION>sproc()</FUNCTION> shares some of its process state values with its parent process (the <REFPAGE>sproc(2)</REFPAGE> reference page details how this sharing is specified).</PARAGRAPH>
<PARAGRAPH>In particular, a process made with <FUNCTION>sproc()</FUNCTION> does not have its own address space. It continues to execute in the address space of the original process. In this respect, a lightweight process is like a thread (see <XREF IDREF="97562" TYPE="TITLE">&ldquo;Thread-Level Parallelism&rdquo;</XREF>). However, a lightweight process differs from a thread in two significant ways:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A lightweight process still has a full set of UNIX state values. Some of these, for example the table of open file descriptors, can be shared with the parent process, but in general a lightweight process carries most of the state information of a process.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Dispatch of lightweight processes is done in the kernel, and has the same overhead as dispatching any process.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The library support for statement-level parallelism is based on the use of lightweight processes (see <XREF IDREF="78417" TYPE="TITLE">&ldquo;Statement-Level Parallelism&rdquo;</XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="97562">Thread-Level Parallelism</TITLE><PARAGRAPH>A thread is an independent execution state within the context of a larger program. The concept of a thread is well-known, but the most common formal definition of threads and their operation is provided by POSIX standard 1003.1c, &ldquo;System Application Program Interface&mdash;Amendment 2: Threads Extension.&rdquo;<INDEXTARGET ID="TIP_4a.mpcover6"><!-- POSTPROCESSDATA: TIP_4a.mpcover6|parallel computation:thread-levelpthreads --></PARAGRAPH>
<PARAGRAPH>There are three key differences between a thread and a process:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A UNIX process has its own set of UNIX state information, for example, its own effective user ID and set of open file descriptors.</PARAGRAPH>
<PARAGRAPH>Threads exist within a process and do not have distinct copies of these UNIX state values. Threads share the single state belonging to their process.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Normally, each UNIX process has a unique address space of memory segments that are accessible only to that process (lightweight processes created with <FUNCTION>sproc()</FUNCTION> share all or part of an address space).</PARAGRAPH>
<PARAGRAPH>Threads within a process always share the single address space belonging to their process.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Processes are scheduled by the IRIX kernel. A change of process requires two context changes, one to enter the kernel domain and one to return to the user domain of the next process. The change from the context of one process to the context of another can entail many instructions.</PARAGRAPH>
<PARAGRAPH>In contrast, threads are scheduled by code that operates largely in the user address space, without kernel assistance. Thread scheduling can be faster than process scheduling.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The POSIX standard for multithreaded programs is supported by IRIX 6.2 with patches&nbsp;1361, 1367, and 1389 installed, and in all subsequent releases of IRIX.</PARAGRAPH>
<PARAGRAPH>In addition, the Silicon Graphics implementation of the Ada95 language includes support for multitasking Ada programs&mdash;using what are essentially threads, although not implemented using the POSIX library. For a complete discussion of the Ada&nbsp;95 task facility, refer to the <DOCTITLE>Ada&nbsp;95 Reference Manual</DOCTITLE>, which installs with the Ada&nbsp;95 compiler (GNAT) product.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="78417">Statement-Level Parallelism</TITLE><PARAGRAPH>The finest level of granularity is to run individual statements in parallel. This is provided using any of three language products: <INDEXTARGET ID="TIP_4a.mpcover7"><!-- POSTPROCESSDATA: TIP_4a.mpcover7|parallel computation:statement-level --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>MIPSpro Fortran 77 supports compiler directives that command parallel execution of the bodies of DO-loops. The MIPSpro POWER Fortran 77 product is a preprocessor that automates the insertion of these directives in a serial program.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>MIPSpro Fortran 90 supports parallelizing directives similar to MIPSpro Fortran 77, and the MIPSpro POWER Fortran 90 product automates their placement.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>MIPSpro POWER C supports compiler pragmas that command parallel execution of segments of code. The IRIS POWER C analyzer automates the insertion of these pragmas in a serial program.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>In all three languages, the run-time library&mdash;which provides the execution environment for the compiled program&mdash;contains support for parallel execution. The compiler generates library calls. The library functions create lightweight processes using <FUNCTION>sproc()</FUNCTION>, and distribute loop iterations among them.</PARAGRAPH>
<PARAGRAPH>The run-time support can adapt itself dynamically to the number of available CPUs. Alternatively, you can control it&mdash;either using program source statements, or using environment variables at execution time&mdash;to use a certain number of CPUs.</PARAGRAPH>
<PARAGRAPH>Statement-level parallel support is based on using common variables in memory, and so it can be used only within the bounds of a single-memory system, a CHALLENGE system or a single node in a POWER CHALLENGEarray system.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="15603">Message-Passing Models</TITLE><PARAGRAPH>One way to design a parallel program is to think of each thread of execution as operating in an independent address space, communicating with other threads by exchanging discrete units of data as messages through an abstract, formal interface for message exchange.</PARAGRAPH>
<PARAGRAPH>The threads of a program designed in this way can be distributed over different computers. Three message-passing execution models are supported by Silicon Graphics systems. Each defines and implements a formal, abstract model for data exchange. Two of the models allow a computation to be distributed across the nodes of a multiple-memory system, without having to reflect the system configuration in the source code. The programming models are:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Shared Memory Model (SHMEM)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Message-Passing Interface (MPI)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Parallel Virtual Machine (PVM)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>All three models are briefly summarized in the following topics, and are discussed in more detail in <XREF IDREF="18012" TYPE="TITLE">Chapter&nbsp;14, &ldquo;Message-Passing Parallelism.&rdquo;</XREF> Support for all three is included in the Message-Passing Toolkit (MPT) product. For an overview of MPT, see this URL:</PARAGRAPH>
<PARAGRAPH>http://www.cray.com/products/software/mpt/mpt.html</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Shared Memory (SHMEM) Model</TITLE><PARAGRAPH>The SHMEM library has been used for some time on Cray systems and is now available for all Silicon Graphics multiprocessors as part of the MPT. A program built on SHMEM is a process-level parallel program. Each process runs in a separate address space. The SHMEM library routines are used to exchange data, and to coordinate execution, between the processes.<INDEXTARGET ID="TIP_4a.mpcover8"><!-- POSTPROCESSDATA: TIP_4a.mpcover8|parallel computation:SHMEMSHMEM --></PARAGRAPH>
<PARAGRAPH>SHMEM routines support remote data transfer through <ITALICS>put</ITALICS> operations, which transfer data to a different process, and <ITALICS>get</ITALICS> operations, which transfer data from a different process. Other operations supported include data broadcast and data reduction; barrier synchronization; as well as atomic memory updates such as a fetch-and-increment on remote or local data objects.</PARAGRAPH>
<PARAGRAPH>SHMEM operations are all memory-to-memory, and as a result have extremely high bandwidth and low latency. However, a SHMEM-based program cannot be distributed across multiple systems.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12752">Message-Passing Interface (MPI) Model</TITLE><PARAGRAPH>MPI is a standard programming interface for the construction of a portable, parallel application in Fortran 77 or in C, especially when the application can be decomposed into a fixed number of processes operating in a fixed topology (for example, a pipeline, grid, or tree). MPI has wide use on many large computers.<INDEXTARGET ID="TIP_4a.mpcover9"><!-- POSTPROCESSDATA: TIP_4a.mpcover9|parallel computation:MPI --><INDEXTARGET ID="TIP_4a.mpcover10"><!-- POSTPROCESSDATA: TIP_4a.mpcover10|MPI --></PARAGRAPH>
<PARAGRAPH>A highly tuned, efficient implementation of MPI is part of the MPT. Within a single system, MPI messages are moved memory-to-memory. Between nodes of an Silicon Graphics Array system, MPI messages are passed over a HIPPI network. Latency and bandwidth are intermediate between memory-to-memory data exchange and socket-based network communication.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="97297">Parallel Virtual Machine (PVM) Model</TITLE><PARAGRAPH>PVM is an integrated set of software tools and libraries that emulates a general-purpose, flexible, heterogeneous, concurrent computing framework on interconnected computers of varied architecture. Using PVM, you can create a parallel application that executes as a set of concurrent processes on a set of computers that can include uniprocessors, multiprocessors, and nodes of Array systems.<INDEXTARGET ID="TIP_4a.mpcover11"><!-- POSTPROCESSDATA: TIP_4a.mpcover11|parallel computation:PVM --><INDEXTARGET ID="TIP_4a.mpcover12"><!-- POSTPROCESSDATA: TIP_4a.mpcover12|PVM --></PARAGRAPH>
<PARAGRAPH>Like MPI, PVM has wide use on many types of supercomputer, including Cray systems. An implementation of PVM is included in the MPT. PVM is discussed in more detail under <XREF IDREF="18012" TYPE="TITLE">Chapter&nbsp;14, &ldquo;Message-Passing Parallelism.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>&space;</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
</CHAPTER>
