<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="5"><TITLE><XREFTARGET ID="73742">Administering Access Control</TITLE><PARAGRAPH>Access control under Trusted IRIX/CMW has been described in general earlier in this guide. This chapter contains a detailed description of the mandatory and discretionary access control mechanisms. The Mandatory Access Control mechanism is the system of labels and clearances that enforce Mandatory Sensitivity and Mandatory Integrity of system objects. The Discretionary Access Control mechanisms are the standard system of file permissions, and the use of Access Control Lists on files and directories.<INDEXTARGET ID="ch51"><!-- POSTPROCESSDATA: ch51|access control:using --><INDEXTARGET ID="ch52"><!-- POSTPROCESSDATA: ch52|access control  --><INDEXTARGET ID="ch53"><!-- POSTPROCESSDATA: ch53|Mandatory Access Control  --></PARAGRAPH>
<PARAGRAPH>Sections in this chapter include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="22452" TYPE="TITLE">&ldquo;Mandatory Access Control&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="45270" TYPE="TITLE">&ldquo;Types of Labels&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="84362" TYPE="TITLE">&ldquo;Working With Labels&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="39394" TYPE="TITLE">&ldquo;Discretionary Access Control&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="51343" TYPE="TITLE">&ldquo;Access Control Lists&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="95917" TYPE="TITLE">&ldquo;Capability Assignment&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22452">Mandatory Access Control</TITLE><PARAGRAPH>Mandatory Access Control (MAC) is the most visible feature of CMW security.  Under MAC, the system associates a label with each process, user, file, or device known to the system. Based on the relationship between the labels of two or more of the items, Trusted IRIX/CMW makes access control decisions.</PARAGRAPH>
<PARAGRAPH>Within MAC, two separate mechanisms control user access to files and programs. One is Mandatory Sensitivity (MSEN) and the other is Mandatory Integrity (MINT). MSEN is simply the level of protection that a file or object needs, and the corresponding clearance of a user to view or use that file or program. MINT is the indication of how much trust the system has that the file or program is secure or valid, not corrupted or suspect. MINT declares the integrity of the file or program. For example, if an instruction to transfer a large amount of money is sent to the computer, the user wants to know that the message was trusted to be valid, and not a security breach being exploited. MINT assures that users with access to protected data have only trusted tools of high integrity with which to work.<INDEXTARGET ID="ch54"><!-- POSTPROCESSDATA: ch54|MSEN:description --><INDEXTARGET ID="ch55"><!-- POSTPROCESSDATA: ch55|Mandatory Sensitivity. See MSEN --><INDEXTARGET ID="ch56"><!-- POSTPROCESSDATA: ch56|MSEN --><INDEXTARGET ID="ch57"><!-- POSTPROCESSDATA: ch57|Mandatory Integrity (MINT) --><INDEXTARGET ID="ch58"><!-- POSTPROCESSDATA: ch58|MINT --><INDEXTARGET ID="ch59"><!-- POSTPROCESSDATA: ch59|MINT:description --><INDEXTARGET ID="ch510"><!-- POSTPROCESSDATA: ch510|Mandatory Integrity. See MINT --></PARAGRAPH>
<PARAGRAPH>Each label for a system subject (such as a user or process) or system object (such as a file or hardware resource) contains several components. These components are the sensitivity level, integrity grade, and possibly a number of sensitivity categories and integrity divisions. Sensitivity categories divide information into working sets. Information in one category is presumably unrelated to information in any other category. Any subject or object may be in multiple categories or have no associated categories. Similarly, integrity divisions classify different types of information based on decisions to trust the integrity of the information. The sensitivity level of a user determines what level of sensitive information he or she is allowed to use. Conversely, the integrity grade determines how trusted the information must be in order for the user to see it. The higher the integrity requirement, the more trusted the information must be.</PARAGRAPH>
<PARAGRAPH>For subjects, which are active entities such as users and processes, the sensitivity level, sensitivity categories, integrity grade, and integrity divisions together are called a clearance. Because subjects usually  access  and modify  objects, subjects require clearance to perform those tasks. Objects, on the other hand, have classifications of sensitivity, integrity, divisions, and categories. The clearance of a subject must be at least equal to the classification of an object for MAC to allow the subject access to the object.</PARAGRAPH>
<PARAGRAPH>When a user logs in, the shell process created by the login program inherits the label that the user entered during the login process. The maximum and minimum clearances of a user are stored by the system in the <FILENAME>/etc/clearance</FILENAME> file. A user can log in at any clearance up to his or her maximum and down to the minimum. The login shell and any subsequently created processes inherit the login clearance as their label.</PARAGRAPH>
<PARAGRAPH>MSEN categories and MINT divisions within a label define the nature of the subject or object. For example, a user with the highest sensitivity in research and development does not necessarily have a need to see personnel or accounting information. Therefore, MAC allows you to create categories of information. A high clearance in one category does not allow access to information in other categories.</PARAGRAPH>
<PARAGRAPH>Each object can be defined in the label as belonging to a number of categories, or to no categories. Each user has a number of categories or no categories in their label. Each new process inherits the label, including all categories of the invoking user. Also, you can define MINT divisions to create a set of tools of known high integrity and limit their use to certain users. A user must have the same or a superset of the MINT divisions of an object in his or her label in order to use the object. All other requirements of sensitivity and general integrity still apply.</PARAGRAPH>
<PARAGRAPH>The concept of label domination and equivalence is central to MAC. If a subject's clearance is greater than an object's classification and the integrity of the object is good enough for the subject, the subject is said to dominate the object. If the clearance and classification are equal, the labels are said to be equal. A subject must  be at least equal to or must dominate an object in order to access it. For more information on label domination and equivalence, see the <INDEXTARGET ID="ch511"><!-- POSTPROCESSDATA: ch511|label domination and equivalence --><INDEXTARGET ID="ch512"><!-- POSTPROCESSDATA: ch512|equivalence of labels --><INDEXTARGET ID="ch513"><!-- POSTPROCESSDATA: ch513|domination of labels  --><INDEXTARGET ID="ch514"><!-- POSTPROCESSDATA: ch514|definition:of label relationships --><REFPAGE>dominance(5)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>When you add categories to MAC, you affect the usual order of dominance of your security classifications. In order to dominate, a label must have the same or higher sensitivity and a set of approved categories that are the same as or a superset of the categories of the object, and the integrity requirement for the user must be met by the file. Also, the integrity divisions of the user must be the same or a superset of the integrity divisions of the object. <INDEXTARGET ID="ch515"><!-- POSTPROCESSDATA: ch515|labels:relationships --><XREF IDREF="81623" TYPE="TABLE">Table&nbsp;5-1</XREF> lists possible label relationships using the default labels supplied with your system. In the table, the levels of sensitivity are unclassified, proprietary, and company sensitive. The categories are green, gray, and gold. The integrity grades are good, choice, and prime. The integrity divisions are cake, cookie, and cracker. The labels are written in the form of sensitivity level-categories, integrity grade-divisions.<INDEXTARGET ID="ch516"><!-- POSTPROCESSDATA: ch516|sample label relationships --><INDEXTARGET ID="ch517"><!-- POSTPROCESSDATA: ch517|label relationships:sample table  --></PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="5-1"><PREFIX>Table 5-1 </PREFIX><XREFTARGET ID="81623"> <EMPHASIS>(continued)        </EMPHASIS> <EMPHASIS>(continued)        </EMPHASIS>Sample Label Relationships</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="85"><PARAGRAPH>Subject Label</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>Object Label</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>Dominates?</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Explanation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/good </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified/prime </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Clearance dominated; 
integrity dominated</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified/good</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>No</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Integrity of the object not 
good enough</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary, green/ 
good </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified-green/
good </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Clearance dominates; 
categories equal; integrity 
equal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary-green/&lbreak;prime, cake</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary-green/&lbreak;prime, cake, cookie,&lbreak;cracker</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Clearances identical;&lbreak;integrity divisions&lbreak;dominate</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/green,
prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>company sensitive, 
green/ prime</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>No </PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Object classification 
higher than subject 
clearance</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary, 
green/prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary, green, 
gray/prime-cake, 
cookie </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>No</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Categories not  equal or 
dominated</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary, green, 
gray/prime, cake, 
cookie</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary, green, 
gray/prime, cake, 
cookie</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>&space;Yes</PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Categories equal;  
integrity equal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary, green, 
gray, gold/choice </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary, green,  
gray/prime</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="68"><PARAGRAPH>Yes </PARAGRAPH>
</CELL>
<CELL LEFT="255" WIDTH="111"><PARAGRAPH>Categories  dominated;  
integrity dominated</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="45270">Types of Labels</TITLE><PARAGRAPH>The following sections describe the various types of security labels used under the Trusted IRIX/CMW system. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Trusted IRIX/CMW Default Labels</TITLE><PARAGRAPH>Your Trusted IRIX/CMW operating system comes with a small set of predefined labels. Do not delete these labels for any reason, because all but one of them are administrative. The defined labels are shown in <INDEXTARGET ID="ch518"><!-- POSTPROCESSDATA: ch518|labels:system defaults --><XREF IDREF="49278" TYPE="TABLE">Table&nbsp;5-2</XREF>. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="5-2"><PREFIX>Table 5-2 </PREFIX><XREFTARGET ID="49278">Trusted IRIX/CMW Default Labels</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="49"><PARAGRAPH>Label</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>Purpose</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>Level/Grade</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="49"><PARAGRAPH>dblow</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>for TCB changes only</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>msenlow/minthigh</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="49"><PARAGRAPH>dbadmin</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>for editing system data files</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>msenadmin/minthigh</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="49"><PARAGRAPH>userlow</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>for creating new user files</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>unclassified/highestgrade</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="49"><PARAGRAPH>equal</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>for /dev/null</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>msenequal/mintequal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="49"><PARAGRAPH>binary</PARAGRAPH>
</CELL>
<CELL LEFT="55" WIDTH="119"><PARAGRAPH>alias for msenlow/mintbiba</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="119"><PARAGRAPH>msenlow/highestgrade</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Additionally, various default MSEN levels and MINT grades are defined in the <FILENAME>/etc/mac</FILENAME> file. You may use these hierarchical components and the default categories and divisions to make more labels or you can define your own.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Equal (Wildcard) Labels</TITLE><PARAGRAPH>Equal (or wildcard) labels are a special type of label reserved for use by the system and by the system administrator. An equal label is sometimes referred to as a <INDEXTARGET ID="ch519"><!-- POSTPROCESSDATA: ch519|equal labels --><INDEXTARGET ID="ch520"><!-- POSTPROCESSDATA: ch520|label types:equal --><INDEXTARGET ID="ch521"><!-- POSTPROCESSDATA: ch521|labels:wildcard --><ITALICS>wildcard</ITALICS> label, because it always compares as equal in any label comparison. For example, a user running at userlow perceives the equal label as also being at userlow, while a user running at userhigh perceives that label as userhigh.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Administrative Labels</TITLE><PARAGRAPH>The administrative labels are dblow and dbadmin. These labels are not considered directly comparable with ordinary user labels. They are arbitrary definitions of the lowest and highest possible sensitivities on the system. These labels are generally reserved for system objects and administrative accounts. dblow files are considered to be part of the TCB, and they are of low sensitivity and the highest integrity. Thus, they are dominated by all labels and accessible to all users. For example, the /bin/cat program is available to all labels. dbadmin files are of the highest integrity and also of the highest sensitivity found on the system. These files contain data that must not be divulged or compromised. For example, the /etc/shadow file, which contains each user's encrypted password, is not available for general perusal.<INDEXTARGET ID="ch522"><!-- POSTPROCESSDATA: ch522|labels:administrative --></PARAGRAPH>
<PARAGRAPH>No user should be able to log in at either of these labels, although exceptions are made for user accounts belonging to system administrators.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>User (TCSEC) Labels</TITLE><PARAGRAPH>Ordinary user labels (also called TCSEC  label types, after the NSA Trusted Computer System Evaluation Criteria) are those that the user sees in day-to-day work. Trusted IRIX/CMW is shipped with only one user-level label configured, userlow. As your user label library grows, remember to keep the hierarchy of labels clear, consistent, and easy to understand.<INDEXTARGET ID="ch523"><!-- POSTPROCESSDATA: ch523|labels:user --><INDEXTARGET ID="ch524"><!-- POSTPROCESSDATA: ch524|labels:TCSEC types --></PARAGRAPH>
<PARAGRAPH>User labels always dominate,  but are never equal to  dblow. No user label can dominate dbadmin.</PARAGRAPH>
<PARAGRAPH>Batch processing jobs (such as those submitted through <COMMAND>at</COMMAND>, <COMMAND>batch</COMMAND>, and <COMMAND>cron</COMMAND>) may be submitted at any label for which the user is cleared, and they are run with that label. Entries in <COMMAND>crontab</COMMAND> files are also allowed at any label for which the user is cleared, with a separate file being maintained at each label requested.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Changing User Default Labels</TITLE><PARAGRAPH>If the user's default label is changed while there are scheduled tasks pending, the tasks will be run at the new default label, not at the label at which they where submitted.</PARAGRAPH>
<PARAGRAPH>Before changing  a default label, the system administrator  must verify that either the user has no outstanding requests or that the requests are appropriate at the user's new default label. The system administrator can find the background task request information in the <FILENAME>/usr/spool/cron/atjobs</FILENAME> and <FILENAME>/usr/spool/cron/crontab</FILENAME> files, as described in the <REFPAGE>cron(1M)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>Complete information on <COMMAND>at</COMMAND>, <COMMAND>batch</COMMAND>, and <COMMAND>cron</COMMAND> is available in their respective reference pages, and in the guide titled <DOCTITLE>IRIX Admin: System Configuration and Operation</DOCTITLE>.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Multilevel Labels</TITLE><PARAGRAPH>It is possible to hold a multilevel label. You can use the following commands to change your current label to multilevel: <INDEXTARGET ID="ch525"><!-- POSTPROCESSDATA: ch525|labels:multilevel --></PARAGRAPH>
<EXAMPLE>
newlabel -m 
su ,username. -m
</EXAMPLE>
<PARAGRAPH>The advantage to multilevel labels is that directories can also be made multilevel. A multilevel directory (or, sometimes, moldy directory) places files of different labels into multiple hidden subdirectories. Each subdirectory bears the label of the files in that subdirectory. Thus, process A with label userhigh sees a different listing of the contents of the mld from process B with label userlow. However, neither process sees the subdirectory structure. Each process sees only files with the same label as the process in the mld. Once your label is multilevel, you can see the multilevel directory structure, but the rules of dominance are still in effect. You cannot see the contents of a subdirectory whose label you do not dominate, though you can see that the subdirectory exists. To create a multilevel directory, use the <INDEXTARGET ID="ch526"><!-- POSTPROCESSDATA: ch526|multilevel directories --><INDEXTARGET ID="ch527"><!-- POSTPROCESSDATA: ch527|mld --><INDEXTARGET ID="ch528"><!-- POSTPROCESSDATA: ch528|moldy directories --><COMMAND>mkdir</COMMAND> command and then use the <COMMAND>chlabel</COMMAND> command with the <CMDLINEOPT>-m</CMDLINEOPT> flag and the name of the directory; the directory becomes multilevel.</PARAGRAPH>
<PARAGRAPH>Three types of multilevel  labels are available: msenmldhigh, <ITALICS>msenmld</ITALICS>, and msenmldlow. msenmldhigh is a multilevel msenhigh clearance to give MSEN (though not necessarily MINT) dominance over all files on the system. <INDEXTARGET ID="ch529"><!-- POSTPROCESSDATA: ch529|senmldhigh --><INDEXTARGET ID="ch530"><!-- POSTPROCESSDATA: ch530|senmldlow --><ITALICS>msenmld</ITALICS> labels at other MSEN levels are subject to the rules of dominance. msenmldlow is a multilevel dblow label for working with the TCB. You can log in with a multilevel label of one of these types, or you can log in at msenhigh/mintequal, dblow, or any label and use <COMMAND>newlabel -m</COMMAND> to make your label multilevel.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="84362">Working With Labels</TITLE><PARAGRAPH>The following sections detail how to examine and manipulate labels on your Trusted IRIX/CMW system:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Checking Labels</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Changing Object Labels</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Changing Process sLabels</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Creatign New Label Names</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Deleting a Label</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE>Checking Labels</TITLE><PARAGRAPH>Frequently, you will find it necessary to check the label of a file or directory, or perhaps the labels of all the files in a moldydirectory. For this purpose, Trusted IRIX/CMW supports the <INDEXTARGET ID="ch531"><!-- POSTPROCESSDATA: ch531|labels:checking --><INDEXTARGET ID="ch532"><!-- POSTPROCESSDATA: ch532|checking:labels --><CMDLINEOPT>-M</CMDLINEOPT> flag to <COMMAND>ls</COMMAND>. The <COMMAND>ls -M</COMMAND> command lists files according to the usual behavior of <COMMAND>ls</COMMAND>, except that the human-readable names of the labels attached to the files or directories are displayed as well.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>id</COMMAND> command displays the calling process ID number and name. It also displays the group ID and name. If the real and effective IDs do not match, both are printed. When invoked with the <CMDLINEOPT>-M</CMDLINEOPT> option,<COMMAND>&space;id</COMMAND> reports the MAC label at which the invoking process is running.  </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Using attrinit to Clean Up Label Corruption</TITLE><PARAGRAPH>If you believe you have experienced corruption of some labels , you can use the <COMMAND>attrinit</COMMAND> command to restore your system labels. See the <REFPAGE>attrinit(1)</REFPAGE> reference page for more information on <COMMAND>attrinit</COMMAND> command.</PARAGRAPH>
<PARAGRAPH>The <FILENAME>/etc/irix.mac</FILENAME> file is used with the <COMMAND>attrinit</COMMAND> command as follows:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Log in as root and change directories to the / directory. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enter this command:</PARAGRAPH>
<EXAMPLE>
attrinit -script=etc/irix.mac 
</EXAMPLE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>It takes several minutes while your labels are restored. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Changing Object Labels</TITLE><PARAGRAPH>You can change the label of an object with the <INDEXTARGET ID="ch533"><!-- POSTPROCESSDATA: ch533|labels:object --><INDEXTARGET ID="ch534"><!-- POSTPROCESSDATA: ch534|changing:MAC labels --><INDEXTARGET ID="ch535"><!-- POSTPROCESSDATA: ch535|MAC:changing labels --><INDEXTARGET ID="ch536"><!-- POSTPROCESSDATA: ch536|<ITALICS>chlabel</ITALICS><ITALICS>(1)</ITALICS> --><COMMAND>chlabel</COMMAND> command. Be aware that you must have access to the object before giving the command. You cannot use <COMMAND>chlabel</COMMAND> to change the label of an inaccessible object. The new label cannot be less sensitive or of higher integrity than the old label. Additionally, the current label of the object must be equal to that of the process attempting the change. The <CMDLINEOPT>-m</CMDLINEOPT> flag to <COMMAND>chlabel</COMMAND> changes the label of a directory to multilevel.</PARAGRAPH>
<PARAGRAPH>The system administrator may set a file or directory to any label; you must have sufficient privilege. If auser accidentally changes the label on a file and can no longer access the file, the system administrator must downgrade the file for the user. The system administrator is also the only user who may set an equal label. For complete information about the <REFPAGE>chlabel</REFPAGE> command, consult the <REFPAGE>chlabel(1)</REFPAGE> reference page.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Changing Process Labels</TITLE><PARAGRAPH>Sometimes you will find it necessary to run a program or other process at a label different from your current login label. For example, the process may require a lower integrity requirement or a higher clearance. The <INDEXTARGET ID="ch537"><!-- POSTPROCESSDATA: ch537|labels:process --><INDEXTARGET ID="ch538"><!-- POSTPROCESSDATA: ch538|changing:process labels --><INDEXTARGET ID="ch539"><!-- POSTPROCESSDATA: ch539|running a process at a new label --><INDEXTARGET ID="ch540"><!-- POSTPROCESSDATA: ch540|MAC:changing to a new label --><INDEXTARGET ID="ch541"><!-- POSTPROCESSDATA: ch541|changing:to a new label --><INDEXTARGET ID="ch542"><!-- POSTPROCESSDATA: ch542|<ITALICS>newlabel</ITALICS><ITALICS>(1)</ITALICS> --><COMMAND>newlabel</COMMAND> command allows you to run a process at a different label. The processes you may run include opening a new shell window and using the command <COMMAND>su -M</COMMAND>.</PARAGRAPH>
<PARAGRAPH>To prevent inappropriate transfers or disclosures of information, all open file descriptors associated with your login shell process are closed before the new process is invoked. This assures that information at a higher classification will not be used as any input to the new process, which may be running at a lower clearance. The default new process is your default command shell, as specified in your environment.</PARAGRAPH>
<PARAGRAPH>Remember that you can execute newlabel only with a specified clearance up to the maximum allowed for your login account. For complete information about <COMMAND>newlabel</COMMAND>, consult the <REFPAGE>newlabel(1)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>You may also use the <COMMAND>su</COMMAND> command with the <CMDLINEOPT>-M</CMDLINEOPT> option to execute a command at a higher label, provided you are cleared for that label, or have the password of an account that is cleared for that label. See the <REFPAGE>su</REFPAGE>(1M) reference page for complete information.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Creating New Label Names</TITLE><PARAGRAPH>From time to time, it may become necessary to create new label names on your system, to adapt to changing usage and new projects. You also must create your starting set of labels when you install your system. The <INDEXTARGET ID="ch543"><!-- POSTPROCESSDATA: ch543|labels:creating new names --><INDEXTARGET ID="ch544"><!-- POSTPROCESSDATA: ch544|creating:new label names --><INDEXTARGET ID="ch545"><!-- POSTPROCESSDATA: ch545|new label names:creating --><INDEXTARGET ID="ch546"><!-- POSTPROCESSDATA: ch546|MAC:creating new label names --><FILENAME>/etc/mac</FILENAME> file defines the sensitivity clearances and categories and the integrity grades and divisions. This file contains  a &ldquo;starter set&rdquo; of predefined labels and label components for you to use. As you add your own labels to this file, remember that in no instance should you delete any of the distributed label components. Trusted IRIX/CMW depends on many of these defined labels and components. Also, remember as you edit that everything you put in the file is case-sensitive. That is to say, the system differentiates between uppercase and lowercase letters in the names of the items. Also, each new label name must be unique. For example, you cannot use the name &ldquo;good&rdquo; for both a sensitivity level and an integrity grade. </PARAGRAPH>
<PARAGRAPH>To add new label names, edit the <FILENAME>/etc/mac</FILENAME> file at  dblow.  The format is </PARAGRAPH>
<EXAMPLE>
name:type:value
</EXAMPLE>
<PARAGRAPH>The following table  is a short summary of the types and values in the  <INDEXTARGET ID="ch547"><!-- POSTPROCESSDATA: ch547|/etc/mac file:summary of types and values --><FILENAME>/etc/mac </FILENAME> file: </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="5-3"><PREFIX>Table 5-3 </PREFIX>Types and Values in the /etc/mac File</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="71"><PARAGRAPH>Type</PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="99"><PARAGRAPH>Value</PARAGRAPH>
</CELL>
<CELL LEFT="185" WIDTH="198"><PARAGRAPH>Definition</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="71"><PARAGRAPH><FILENAME>gradenames</FILENAME></PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="99"><PARAGRAPH><VARIABLE>numeric value</VARIABLE></PARAGRAPH>
</CELL>
<CELL LEFT="185" WIDTH="198"><PARAGRAPH>The <ITALICS>gradenames</ITALICS> type defines integrity grades. 
The higher the numeric value, the greater the 
integrity of the grade. You must decide where 
you wish to position the new grade in your 
integrity hierarchy by examining the numeric 
values of the existing integrity grades and 
assigning the new number at the appropriate 
level.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="71"><PARAGRAPH><FILENAME>divisionnames</FILENAME></PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="99"><PARAGRAPH><VARIABLE>numeric value</VARIABLE></PARAGRAPH>
</CELL>
<CELL LEFT="185" WIDTH="198"><PARAGRAPH>The <ITALICS>divisionnames</ITALICS> type defines integrity 
divisions. For divisions, the numeric value of the 
new definition is arbitrary and for identification 
only. You need only make certain that the new 
number is not already in use. The values 0-99 are 
reserved for system use.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="71"><PARAGRAPH><FILENAME>levelnames</FILENAME></PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="99"><PARAGRAPH><VARIABLE>numeric value</VARIABLE></PARAGRAPH>
</CELL>
<CELL LEFT="185" WIDTH="198"><PARAGRAPH>The <ITALICS>levelnames</ITALICS> type defines sensitivity levels. The 
higher the numeric value, the greater the 
sensitivity of the level. You must decide where 
you wish to position the new level in your 
sensitivity hierarchy by examining the numeric 
values of the existing sensitivity levels and 
assigning the new number at the appropriate 
level. Note that if you are using CIPSO Type 1 as 
your networking environment, only categories 
0-63 can be transmitted.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="71"><PARAGRAPH><FILENAME>categorynames</FILENAME></PARAGRAPH>
</CELL>
<CELL LEFT="80" WIDTH="99"><PARAGRAPH><VARIABLE>numeric value</VARIABLE></PARAGRAPH>
</CELL>
<CELL LEFT="185" WIDTH="198"><PARAGRAPH>The <ITALICS>categorynames</ITALICS> type defines sensitivity 
categories. For categories, the numeric value of 
the new definition is arbitrary and for 
identification only. You need only make certain 
that the new number is not already in use.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Deleting a Label</TITLE><PARAGRAPH>Never delete a label name once it has been used on your system. Change all files that have the label to another label and remove the label from the ranges of all your users. Then, comment out the entry in the /etc/label/labelnames file by placing a pound sign (#) at the beginning of the definition line. In this way, no one can use the label, just as if it had been removed, but a record remains that the label existed. This is necessary to prevent accidental reuse of the label for another purpose. If the name of a sensitivity level,  category, integrity grade, or division is reused, a declassification of information could result. For example, if a sensitive file is left unchanged after a label is removed, and the label name is reused, that sensitive file is available to users not cleared for the information.<INDEXTARGET ID="ch548"><!-- POSTPROCESSDATA: ch548|labels:removing --><INDEXTARGET ID="ch549"><!-- POSTPROCESSDATA: ch549|deleting:labels --><INDEXTARGET ID="ch550"><!-- POSTPROCESSDATA: ch550|MAC:deleting a label --></PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="39394">Discretionary Access Control</TITLE><PARAGRAPH>Discretionary Access Control (DAC) is the name of the standard UNIX system of access permissions that allow the user to control access to files, directories, and other system resources.The added feature of Access Control Lists (ACLs) is implemented in IRIX. The owner of any file or other system object can control access to that object, even by those with equal or dominating clearances, by setting the DAC permissions. Further, the user may set an ACL for any file or directory. ACLs are discussed in the section titled <INDEXTARGET ID="ch551"><!-- POSTPROCESSDATA: ch551|DAC:description --><INDEXTARGET ID="ch552"><!-- POSTPROCESSDATA: ch552|Discretionary Access Control. See DAC --><INDEXTARGET ID="ch553"><!-- POSTPROCESSDATA: ch553|DAC:Discretionary Access Control --><INDEXTARGET ID="ch554"><!-- POSTPROCESSDATA: ch554|IRIX permissions (DAC) --><INDEXTARGET ID="ch555"><!-- POSTPROCESSDATA: ch555|permissions (DAC) --><INDEXTARGET ID="ch556"><!-- POSTPROCESSDATA: ch556|DAC:permissions --><XREF IDREF="51343" TYPE="TITLE">&ldquo;Access Control Lists.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>The significant difference between MAC and DAC is that DAC allows untrusted users to control access to their own files and change that access at will.  Thus, DAC fills an otherwise unmet need for system security at the personal level. Every file on the system is subject to both MAC and DAC. You must meet both MAC and DAC requirements to access a file.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Trusted IRIX/CMW File Permissions</TITLE><PARAGRAPH>Trusted IRIX/CMW divides permissions into three categories, and users into three relationships. The three categories of permissions are read, write, and execute. They are denoted as &ldquo;r&rdquo; for read, &ldquo;w&rdquo; for write, and &ldquo;x&rdquo; for execute.The three relationships are the owner of the file, the owner's user group, and every other user.  If you get a long listing of a directory, you see that the permissions field for each file in the directory looks something like this:<INDEXTARGET ID="ch557"><!-- POSTPROCESSDATA: ch557|DAC:using --><INDEXTARGET ID="ch558"><!-- POSTPROCESSDATA: ch558|permissions:categories --></PARAGRAPH>
<EXAMPLE>
&space;-rwxrwxrwx 
</EXAMPLE>
<PARAGRAPH>Note that the line of permissions has the string <SCREENDISPLAY>rwx</SCREENDISPLAY> repeated three times. The first instance of <SCREENDISPLAY>rwx</SCREENDISPLAY> applies to the file owner, the next instance applies to the group members, and the third applies to all other users on the system. The example above shows full permissions. A more restricted permission set might look like this:</PARAGRAPH>
<EXAMPLE>
-rw-r--r--
</EXAMPLE>
<PARAGRAPH>To get a long listing of file permissions, enter this command at your system prompt in any directory:<INDEXTARGET ID="ch559"><!-- POSTPROCESSDATA: ch559|permissions:long listing --><INDEXTARGET ID="ch560"><!-- POSTPROCESSDATA: ch560|files:permissions --><INDEXTARGET ID="ch561"><!-- POSTPROCESSDATA: ch561|permissions:file --></PARAGRAPH>
<EXAMPLE>
ls -l 
</EXAMPLE>
<PARAGRAPH>Along with the permission information, the <COMMAND>ls -l</COMMAND> command lists the owners of the files, the size of the files, and the date they were last modified.</PARAGRAPH>
<PARAGRAPH>Read permission allows you to look at the contents of a file. Write permission allows you to make changes to or remove a file. Execute permission allows you to run the file as a command from your shell prompt.</PARAGRAPH>
<PARAGRAPH>Each character is separately significant in the permissions listing. Starting at the left, the first character is a dash. A dash in any other position means that no permission is granted and the actions associated with that permission are denied. However, in the leftmost place, the contents of that space describe whether the file is a file or a directory. If it is a directory,  a &ldquo;d&rdquo; appears in that space. Other characters in this place indicate that the file is a pipe, a block or character special device file, or other type of file. See the <REFPAGE>ls</REFPAGE>(1) reference page.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Directory Permissions </TITLE><PARAGRAPH>Directories use the same permissions as files, but their meanings are slightly different. For example, read permission on a directory means that you can use the <INDEXTARGET ID="ch562"><!-- POSTPROCESSDATA: ch562|permissions:directory --><INDEXTARGET ID="ch563"><!-- POSTPROCESSDATA: ch563|directory permissions --><INDEXTARGET ID="ch564"><!-- POSTPROCESSDATA: ch564|DAC:directory permissions --><INDEXTARGET ID="ch565"><!-- POSTPROCESSDATA: ch565|permissions:directory --><COMMAND>ls</COMMAND> command to look at the contents of that directory. Write permission allows you to add, change, or remove files in that directory. (However, even though you may have write permission in that directory, you must also have write permission on the individual files to change or remove them, unless you own the directory.) Finally, execute permission on a directory allows you to use the cd command to change directories into that directory.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>File Permissions </TITLE><PARAGRAPH>The first set of three places after the leftmost place in the permissions field describe the permissions for the owner of the file. Here is an example ofa long listing for a file: <INDEXTARGET ID="ch566"><!-- POSTPROCESSDATA: ch566|permissions:file  --></PARAGRAPH>
<EXAMPLE>
-rwx------ 1 owner grp 6680 Apr 24 16:26 shell.script 
</EXAMPLE>
<PARAGRAPH>The file is not a regular file, so the leftmost space is blank. The characters <SCREENDISPLAY>rwx</SCREENDISPLAY> indicate that the owner of the file, <SCREENDISPLAY>owner</SCREENDISPLAY>, has read, write, and execute permission on this file. The second set of three spaces describe permissions for the owner's group. In this case, the group is <SCREENDISPLAY>grp</SCREENDISPLAY>. Suppose permissions for this file were slightly different, like this: </PARAGRAPH>
<EXAMPLE>
-rwxr-x--- 1 owner grp 6680 Apr 24 16:26 shell.script 
</EXAMPLE>
<PARAGRAPH>Any member of the group <SCREENDISPLAY>grp</SCREENDISPLAY> could read or execute the file, but not change it or remove it. All members of group <SCREENDISPLAY>grp</SCREENDISPLAY> can share a pool of files that are individually owned. Through careful use of group read and write permissions, you can create a set of files that are owned by one person, but any group member can work on them.</PARAGRAPH>
<PARAGRAPH>The third set of spaces provides for all other users on the system and is called the public permissions. A file that is set to be readable by any user on the system is called publicly readable. Remember that even if DAC makes a file publicly readable, a user must still have appropriate MAC clearance to see the file.</PARAGRAPH>
<PARAGRAPH>Here is a long listing of a sample Projects directory: </PARAGRAPH>
<CODE>
total 410 
drw------- 1 owner grp 48879 Mar 29 18:10 critical 
-rw-r--r-- 1 owner grp 1063 Mar 29 18:10 meeting.notes 
-rw-rw-rw- 1 owner grp 2780 Mar 29 18:10 new.deal 
-rwxrwxrwx 1 owner grp 8169 Jun 7 13:41 new.items 
-rw-rw-rw- 1 owner grp 4989 Mar 29 18:10 response 
-rw------- 1 owner grp 23885 Mar 29 18:10 project1 
-rw-r----- 1 owner grp 3378 Jun 7 13:42 saved_mail 
-rw-r--r-- 1 owner grp 2570 Mar 29 18:10 schedules 
-rwxrwxr-x 1 owner grp 6680 Apr 24 16:26 shell.script 
</CODE>
<PARAGRAPH>The files in this directory have varying permissions. Some are restricted to the owner, some can be read only by members of the owner's group, and some can be read, changed, or removed by anybody. The shell script is executable by any user.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Changing Permissions </TITLE><PARAGRAPH>You change the permissions on a file by using the <INDEXTARGET ID="ch567"><!-- POSTPROCESSDATA: ch567|permissions:changing --><COMMAND>chmod</COMMAND> command. You can use <INDEXTARGET ID="ch568"><!-- POSTPROCESSDATA: ch568|changing:permissions --><INDEXTARGET ID="ch569"><!-- POSTPROCESSDATA: ch569|DAC:changing permissions --><INDEXTARGET ID="ch570"><!-- POSTPROCESSDATA: ch570|permissions:changing --><COMMAND>chmod</COMMAND> only to change files that you own. Generally, you use this command to protect files you want to keep secret or private, to protect private directories, and to grant permissions to files that need to be used by others. The command to restrict access to a file or directory to yourself only is as follows: </PARAGRAPH>
<EXAMPLE>
<USERINPUT>chmod 600</USERINPUT>&space;<VARIABLE>filename</VARIABLE>&space;
<USERINPUT>chmod 700</USERINPUT>&space;<VARIABLE>dirname</VARIABLE>&space;
</EXAMPLE>
<PARAGRAPH>Other permissions may be added by using the <COMMAND>chmod</COMMAND> command with the letter associated with the permission. For example, the command to add general write permission to a file is as follows: </PARAGRAPH>
<EXAMPLE>
<USERINPUT>chmod +w</USERINPUT>&space;<VARIABLE>filename</VARIABLE>&space;
</EXAMPLE>
<PARAGRAPH>For more examples, see the <REFPAGE>chmod(1)</REFPAGE> reference page.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="36383">Setting Permissions With umask </TITLE><PARAGRAPH>You can decide what default permissions your files have by placing  the umask command in your .<INDEXTARGET ID="ch571"><!-- POSTPROCESSDATA: ch571|permissions:umask --><INDEXTARGET ID="ch572"><!-- POSTPROCESSDATA: ch572|DAC:umask --><INDEXTARGET ID="ch573"><!-- POSTPROCESSDATA: ch573|umask --><FILENAME>cshrc</FILENAME>, .<FILENAME>profile</FILENAME>, or .<FILENAME>login</FILENAME> file. There is a default umask setting for the entire system in the <FILENAME>/etc/profile</FILENAME> and <FILENAME>/etc/cshrc</FILENAME> files.  By changing the setting of your umask, you can alter the default permissions on your files and directories to any available DAC permission. See the <REFPAGE>umask</REFPAGE>(1) reference page  for more information.</PARAGRAPH>
<PARAGRAPH>A drawback to the <COMMAND>umask</COMMAND> command is that it makes every file you create receive the same permissions. For most purposes, you want the files you create to be accessible by the members of your group. For example, if an individual is suddenly called away and another person must take over that person's portion of a project, the source files must be accessible by the new user. However, you might want the personal files you keep in your home directory to be private, and if you set your umask to allow group read and write access, any member of the group can access your personal files. But mechanisms are available to prevent this access. For example, you can create a directory of private files and alter the permissions on that directory with the <COMMAND>chmod</COMMAND> command to restrict all but your own access. Then no other user would be allowed into the directory.</PARAGRAPH>
<PARAGRAPH>You can also use the Trusted IRIX/CMW utilities to change all the files in your home directory to your chosen permission automatically at your convenience. You can set up your account so that this action happens to any files or directories you indicate every time you log out. For example, say you have three directories, called <ITALICS>personal</ITALICS>, <ITALICS>letters</ITALICS>, and budget. You can set up a <FILENAME>.logout</FILENAME> file in your home directory with commands to be executed each time you log out from the system. The following commands, placed in the <FILENAME>.logout</FILENAME> file, will prevent access to the three example directories for anyone but you:</PARAGRAPH>
<EXAMPLE>
chmod 700 budget personal letters 
chmod 600 budget/* personal/* letters/* 
</EXAMPLE>
<PARAGRAPH>The <COMMAND>umask</COMMAND> command is an important part of DAC. It allows you to maintain security and still allow convenient access to your files. To set your account up to allow group read and write access and no other access, place this line in your <FILENAME>.cshrc</FILENAME> or <FILENAME>.profile</FILENAME> file: </PARAGRAPH>
<EXAMPLE>
umask 006 
</EXAMPLE>
<PARAGRAPH>This makes every file you create have the following permissions: </PARAGRAPH>
<EXAMPLE>
-rw-rw----
</EXAMPLE>
<PARAGRAPH>With your umask set to 006, directories that you create have the following permissions: </PARAGRAPH>
<EXAMPLE>
drwxrwx---
</EXAMPLE>
<PARAGRAPH>In plainer terms, you and your group will have full use of the file or directory. No other user will have access to your files.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="51343">Access Control Lists</TITLE><PARAGRAPH>An Access Control List (ACL) works in the same way as standard file permissions, but it allows you to have a finer level of control over who may access the file or directory than standard permissions allow. ACLs allow you to specify file permissions on a user-by-user basis.<INDEXTARGET ID="ch574"><!-- POSTPROCESSDATA: ch574|ACL:permissions --></PARAGRAPH>
<PARAGRAPH>Every system file or directory has an ACL that governs its discretionary access. This ACL is referred to as the<ITALICS>&space;access ACL</ITALICS> for the file or directory. In addition, a directory may have an associated ACL that governs the initial access for files and to subdirectories created within that directory; this ACL is referred to as a <ITALICS>default ACL</ITALICS>. A user who wishes to gain access to the files in a directory must be allowed by the access ACL and by MAC to gain access successfully. </PARAGRAPH>
<PARAGRAPH>Hereafter in this section, directories are treated as files, and where the term file is used, consider that it also applies to directories. </PARAGRAPH>
<PARAGRAPH>An ACL is stored in the same way that standard file permissions are stored; as an attribute of the file or directory. To view the ACL of a file, use the <COMMAND>ls -D</COMMAND> command, as shown in this example:</PARAGRAPH>
<EXAMPLE>
ls -D <FILENAME>/usr/people/ernie/testfile</FILENAME>&space;
</EXAMPLE>
<PARAGRAPH>This produces output similar to this:</PARAGRAPH>
<PARAGRAPH>testfile [u::rwx,g:rwx,o::rx,u:332:r--.u:ernie:rw,m::xrw</PARAGRAPH>
<PARAGRAPH>This  example shows full permissions for the owner with the first entry on the line, sets read permission for user ID 332 with the second entry, and sets read/write permission for the user account ernie. The specific format of an ACL entry is discussed in the section titled <XREF IDREF="79093" TYPE="TITLE">&ldquo;Long ACL Text Form.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>To set or change an ACL, use the <COMMAND>chacl</COMMAND> command:</PARAGRAPH>
<EXAMPLE>
chacl  <VARIABLE>acl_entry</VARIABLE>[,<VARIABLE>acl_entry</VARIABLE>]...
</EXAMPLE>
<PARAGRAPH>An ACL consists of a set of ACL entries separated by commas. An ACL entry specifies the access permissions on the associated file for an individual user or a group of users. The order of internal storage of entries within an ACL does not affect the order of evaluation. To read an ACL from an object, a process must have read access to the file. To create or change an ACL, the process must own the file. </PARAGRAPH>
<PARAGRAPH>ACLs have long and short text forms. The long text form is defined first in order to give a complete specification with no exceptions. The short text form is defined afterwards because it is specified relative to the long text form.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="79093"><XREFTARGET ID="83037">Long ACL Text Form</TITLE><PARAGRAPH>The long text form is used for either input or output of ACLs and is set up as follows:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>acl_entry</VARIABLE>[,<VARIABLE>acl_entry</VARIABLE>]...
</EXAMPLE>
<PARAGRAPH>Although it is acceptable to place more than one entry on a physical line in a file, placing only one entry per line improves readability. </PARAGRAPH>
<PARAGRAPH>Each entry contains one ACL statement with three required colon-separated fields and an optional comment:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>entry tag type</VARIABLE>:<VARIABLE>entry qualifier</VARIABLE>:<VARIABLE>discretionary access permissions</VARIABLE>#<VARIABLE>comment</VARIABLE>&space;
</EXAMPLE>
<PARAGRAPH>Comments may be included with any entry. If a comment starts at the beginning of a line, then the entire line is interpreted as a comment. The first field must always contain the ACL entry tag type.</PARAGRAPH>
<PARAGRAPH>One of the following ACL entry tag type keywords must appear in the first field:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><VARIABLE>user</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>Access granted to either the file owner or to a specified user account.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>group</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>Access granted to either the file-owning user group or to a specified user group.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>other</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>Access granted to any process that does not match any user, group, or implementation-defined ACL entries.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>mask</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>Maximum access that can be granted by any ACL entry except the <ITALICS>user</ITALICS> entry for the file owner and the <VARIABLE>other</VARIABLE> entry.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>The second field contains the ACL entry qualifier (referred to in the remainder of this section as simply <ITALICS>qualifier</ITALICS>). The following qualifiers are defined by default:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><VARIABLE>uid</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>User account name or a user ID number.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>gid</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>User group name or a group ID number.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>empty</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>No <VARIABLE>uid</VARIABLE> or <VARIABLE>gid</VARIABLE> information is to be applied to the ACL entry. The entry applies to the file owner only. An empty qualifier is represented by an empty string or by white space.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>The third field contains the discretionary access permissions that are to apply to the user or group specified in the first field. The discretionary access permissions field may contain each of the following characters:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>&space;r</HANGITEM>
<HANGBODY><PARAGRAPH>Read access </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>w</HANGITEM>
<HANGBODY><PARAGRAPH>Write access </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>x</HANGITEM>
<HANGBODY><PARAGRAPH>Execute access </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>-</HANGITEM>
<HANGBODY><PARAGRAPH>Placeholder </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>Any or all of these may be replaced by the no-access dash(&ndash;).</PARAGRAPH>
<PARAGRAPH>A user entry with an empty qualifier specifies the access granted to the file owner. A user entry with a <VARIABLE>uid</VARIABLE> qualifier specifies the access permissions granted to the user name matching the <VARIABLE>uid</VARIABLE> value. If the <VARIABLE>uid</VARIABLE> value does not match a user name, then the ACL entry specifies the access permissions granted to the user ID matching the numeric  <VARIABLE>uid</VARIABLE> value.</PARAGRAPH>
<PARAGRAPH>A group entry with an empty qualifier specifies the access granted to the default user group of the file owner. A group entry with a <VARIABLE>gid</VARIABLE> qualifier specifies the access permissions granted to the group name matching the <VARIABLE>gid</VARIABLE> value. If the <VARIABLE>gid</VARIABLE> value does not match a group name, then the ACL entry specifies the access permissions granted to the group ID matching the <VARIABLE>gid</VARIABLE> value. The <VARIABLE>umask</VARIABLE> and other entries contain an empty qualifier. A pound sign (#) starts a comment on an ACL entry. A comment may start at the beginning of a line, or after the required fields and after any custom-defined, colon-separated fields. The end of the line denotes the end of the comment. </PARAGRAPH>
<PARAGRAPH>If an ACL entry contains permissions that are not also contained in the <VARIABLE>umask</VARIABLE> entry, then the output text form for that entry must be displayed as described above followed by a crosshatch (#), the string "effective: ", and the effective file access permissions for that ACL entry. </PARAGRAPH>
<PARAGRAPH>White space is permitted (but not required) in the entries as follows: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>at the start of the line</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>immediately before and after a colon (:) separator</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>immediately before the first pound sign (#) comment character</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>at any point after the first pound sign (#) comment character </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Comments have no effect on the discretionary access check of the object with which they are associated. </PARAGRAPH>
<PARAGRAPH>Here is an example of a correct long text form ACL for a file:</PARAGRAPH>
<CODE>
user::rwx,group::rwx,other::rx,mask::rx,user:332:r,user:ernie:rw
</CODE>
<PARAGRAPH>The above example sets full permissions for the owner with the first entry on the line, sets read permission for user ID 332 with the second entry, and sets read/write permission for the user account <SCREENDISPLAY>ernie</SCREENDISPLAY>. </PARAGRAPH>
<PARAGRAPH>Here are some examples with comments:</PARAGRAPH>
<CODE>
group:10:rw-# User Group 10 has read/write access
other::---# No one else has any permission
mask::rw-# The maximum permission except for the owner is read/write
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Short ACL Text Form</TITLE><PARAGRAPH>The short text form is used by the <REFPAGE>chacl</REFPAGE>(1) command  for input of ACLs, and is set up as follows:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>acl_entry</VARIABLE>[,<VARIABLE>acl_entry</VARIABLE>]...
</EXAMPLE>
<PARAGRAPH>The abbreviations are as follows:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>u</HANGITEM>
<HANGBODY><PARAGRAPH>User </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>g</HANGITEM>
<HANGBODY><PARAGRAPH>Group </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>o</HANGITEM>
<HANGBODY><PARAGRAPH>Other </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>m</HANGITEM>
<HANGBODY><PARAGRAPH>Mask </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>The symbolic string contains, at most, one each of the following characters in any order: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>r </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>w </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>x </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For example, the short form should look very similar to the following:</PARAGRAPH>
<CODE>
u::rwx # The file owner has complete access
g:10:rw- # User Group 10 has read/write access
o::--- # No one else has any permission
m::rw- # The maximum permission except for the owner is read/write
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Using ls -D and chacl</TITLE><PARAGRAPH>You can use the output from the <COMMAND>&space;ls -D</COMMAND> command as the input to <COMMAND>chacl.</COMMAND> This is convenient for situations where you wish to duplicate a complex custom ACL onto a new file in a  directory that does not use the complex ACL as the default.</PARAGRAPH>
<PARAGRAPH>Consider the command:</PARAGRAPH>
<EXAMPLE>
ls -dD testdir 
</EXAMPLE>
<PARAGRAPH>It produces the following output:</PARAGRAPH>
<EXAMPLE>
testdir [u::rwx,g::r-x,o::--x/u::rwx,g::r-x,o::---]
</EXAMPLE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="95917">Capability Assignment</TITLE><PARAGRAPH>The capability-based privilege mechanism, described in Chapter 2, assigns capabilities to the system administrator (<ITALICS>root</ITALICS>) and to the auditor (<ITALICS>auditor</ITALICS>) as requested at login based on the contents of the user capability database file (<FILENAME>/etc/capability</FILENAME>). These capabilities determine the amount of privilege granted by the capability-based privilege mechanism to the system administrator and auditor. (For more information on the format of the user capability database, see the <REFPAGE>capability(4)</REFPAGE> reference page.)</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>In the augmented superuser privilege envirionment, the system administrator has unlimited privilege regardless of the contents of the user capability database, though the auditor is still constrained.</NOTE>
<PARAGRAPH>It is inappropriate to grant capabilities to users other than root and auditor. Software used by ordinary users is automatically granted the capabilities it needs based on file capabilities; a user with capabilities beyond this is some form of administrator. The IRIX administrative model does not support administration by users other than root and auditor, so assignment of user capabilities to other users is not supported by IRIX or Trusted IRIX/CMW systems. </PARAGRAPH>
<PARAGRAPH>In addition to user capabilities, the IRIX system employs capabilities assigned to files. For details on how these work, see the <REFPAGE>capabilities(4)</REFPAGE> reference page. File capabilities can be viewed by using the <COMMAND>ls -P</COMMAND> command and changed by using the <COMMAND>chcap</COMMAND> command. </PARAGRAPH>
<PARAGRAPH>The capability sets assigned to files in the IRIX system and related products are designed to establish appropriate privilege for correct system operation. Changing the file capabilities on an IRIX command or Silicon Graphics product may degrade system functionality or compromise security. You must take care when assigning or change file capabilities to avoid this risk.</PARAGRAPH>
<PARAGRAPH>If  you believe that the file capabilities on your system have become corrupt, you can use the <COMMAND>attrinit</COMMAND> command to restore file capabilities to their original settings (see the <REFPAGE>attrinit(1)</REFPAGE> reference page). The <FILENAME>/etc/irix.cap</FILENAME> file is usedwith the <COMMAND>attrinit</COMMAND> command. </PARAGRAPH>
<PARAGRAPH>Follow these steps:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Log in as <ITALICS>root</ITALICS>.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Change your directory to the / directory.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enter the following command:</PARAGRAPH>
<CODE>
attrinit -script=/etc/irixcap
&space;        -verify=installed
</CODE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>Your capability integrity will be restored. The process may take a few minutes.</PARAGRAPH>
</SECTION1>
</CHAPTER>
