<!DOCTYPE DOCBOOK PUBLIC "-//Cray Research, Inc.//DTD DocBook V2.3-based Subset V1.1//EN" [
<!ENTITY a11591.gif SYSTEM "figures/a11591.gif" NDATA gif>
<!ENTITY a11000.gif SYSTEM "figures/a11000.gif" NDATA gif>
]>


<docbook>
<book id="prototype" os="irix" release="6.5" status="final" security="public">
<title>Cray&reg; Message System Programmer's Guide</title>
<bookinfo>
<bookbiblio>
<pubnumber><pubtype>SG</pubtype><stocknum>2121</stocknum><version>6.5 </version></pubnumber>
<partnumber><classcode>007</classcode><base>3548</base><version>002</version></partnumber>
<publisher><publishername></publishername></publisher>
</bookbiblio><collections></collections>
<acknowledgements>
<!--The frontmatter contains many file entities. If you want to remove a file entity enter the following in the Command window: set showentities=none. Then highlight the file entity and cut it. To view full text again enter the command set showentities=file.-->
<legalnotice>
<para>Copyright &copy; 1991, 1998 <!--I added Silicon Graphics in two places in the copyright statement, as per our new guidelines. susanm -->Silicon Graphics, Inc. and Cray Research, Inc. All Rights Reserved. This manual or parts thereof may not be reproduced in any form unless permitted by contract or by written permission of Silicon Graphics, Inc. or Cray Research, Inc.</para>
</legalnotice>
<legalnotice>
<para>RESTRICTED RIGHTS LEGEND</para>
<para>Use, duplication, or disclosure of the technical data contained in this document by the Government is subject to restrictions as set forth in subdivision (c) (1) (ii) of the Rights in Technical Data and Computer Software clause at DFARS 52.227-7013 and/or in similar or successor clauses in the FAR, or in the DOD or NASA FAR Supplement. Unpublished rights  reserved under the Copyright Laws of the United States. Contractor/manufacturer is Silicon Graphics, Inc., 2011 N. Shoreline Blvd., Mountain  View, CA  94043-1389.</para>
</legalnotice>


<legalnotice>
<para>Autotasking, CF77, CRAY, Cray Ada, CraySoft, CRAY Y-MP, CRAY-1, CRInform,
 CRI/TurboKiva, HSX, LibSci, MPP Apprentice,
SSD, SUPERCLUSTER, UNICOS, and X-MP EA are federally registered trademarks and
 Because no workstation is an island, CCI, CCMT, CF90, CFT, CFT2, CFT77,  ConCurrent Maintenance Tools,
COS, Cray Animation Theater, CRAY APP, CRAY C90,  CRAY C90D,
Cray C++ Compiling System, CrayDoc, CRAY EL, CRAY J90, CRAY J90se,
CrayLink, Cray NQS, Cray/REELlibrarian, CRAY S-MP, CRAY SSD-T90, CRAY T90,
CRAY T3D,  CRAY T3E, CrayTutor, CRAY X-MP, CRAY XMS, CRAY-2, CSIM,
CVT,  Delivering the power . . ., DGauss, Docview, EMDS,
GigaRing, HEXAR, IOS, ND Series Network Disk Array, Network Queuing Environment,
Network Queuing Tools,  OLNET, RQS, SEGLDR, SMARTE, SUPERLINK,  System Maintenance and Remote Testing Environment,
Trusted UNICOS, UNICOS MAX, and UNICOS/mk are trademarks of Cray Research,
Inc.</para>
</legalnotice>

<legalnotice>
<!--I edited the TM bar as follows based upon correct tm attribution: made CHALLENGE, Indigo, IRIX, Onyx, and Indy registered TMs; removed CHALLENGE 10000 and CHALLENGE R4400; changed wording on Indigo2 Extreme; changed Indy R5000 to just R5000 (a MIPS trademark); removed Onyx 10000 and POWER CHALLENGE 10000; deleted CRAY Origin2000 (this is covered separately by the "CRAY" and "Origin2000" entries); added R4000 as a MIPS tm. I made the following changes to the TM bar based upon what tms I found or did not find in the book: removed Indigo2 Extreme, Indigo2 High IMPACT, and POWER Indigo2 Maximum IMPACT, POWER Indigo2 IMPACT, Documenter's Workbench, PostScript, and VT; added Trusted IRIX, the Silicon Graphics logo, . susanm -->
<para>CHALLENGE, Indigo, Indy, IRIX, Onyx, and Silicon Graphics are registered trademarks and Origin2000, Indigo2, , Indigo2 IMPACT, O2, OCTANE, Onyx2, Origin, Origin200, Origin2000, POWER CHALLENGE, POWER Indigo2, POWER Onyx, the Silicon Graphics logo, and Trusted IRIX are trademarks of Silicon Graphics, Inc. Extreme is a trademark used under license by Silicon Graphics, Inc. R4000 and R5000 are registered trademark of MIPS Technologies, Inc. UNIX is a registered trademark in the United States and other countries, licensed exclusively through X/Open Company Limited. X/Open is a trademark of the X/Open Company Limited. </para>
</legalnotice>
<legalnotice>
<para>The UNICOS operating system is derived from UNIX&reg;  System V.  The
UNICOS operating  system is also based in part on the Fourth Berkeley Software
Distribution (BSD) under license  from The Regents of the University of California.
</para>
</legalnotice>

</acknowledgements>
<newfeatures>
<title>New Features</title>
<para>This revision of the Cray Message System Programmer's Guide supports the IRIX 6.5 software release. It incorporates the following changes:<itemizedlist>
<listitem><para>The name of the message system has been changed from &ldquo;UNICOS Message System&rdquo; to &ldquo;Cray Message System&rdquo; in order to reflect its use with the IRIX operating system.</para>
</listitem>
<listitem><para>Printing formatted messages in manuals is no longer supported, and text on this subject has been removed.</para>
</listitem>
<listitem><para>On IRIX systems, the default <literal>NLSPATH</literal>, found in <filename>nl_types.h</filename>, differs from the default UNICOS and UNICOS/mk <literal>NLSPATH</literal>. This may cause problems for packages that do not set the <literal>NLSPATH</literal> using modules and assume the default <literal>NLSPATH</literal>.</para>
</listitem>
<listitem><para>On IRIX systems, assuming the system language is C, if the user has not set <literal>NLSPATH</literal>, and neither <literal>LANG</literal> nor <literal>LC_MESSAGES</literal> is set, and the catalog name <literal>lib.cat</literal> is passed to the <command sectionref="3">catopen</command> utility,  <command sectionref="3">catopen</command> tries to open a catalog using the paths defined by the <literal>DEF_NLSPATH</literal> macro in file <filename>nl_types.h</filename>.</para>
</listitem>
<listitem><para>On IRIX systems, most message and explanation catalogs are located in the <filename>/usr/lib/locale/C/LC_MESSAGES</filename> directory.</para>
</listitem>
<listitem><para>On IRIX systems, message macros for formatting explanation text are defined in the <filename>/usr/share/lib/tmac/tmac.sg</filename> file.</para>
</listitem>
<listitem><para>On IRIX systems, other language, territory, and code set designations are defined and supported in six localized desktops and over 30 basic locales.</para>
</listitem>
<listitem><para>On IRIX systems, catalogs for other languages are installed in the <filename>/usr/lib/locale/LANG/LC_MESSAGES</filename> directory tree.</para>
</listitem>
<listitem><para>On IRIX systems, users control the language in which they receive messages by setting the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> locale category.</para>
</listitem></itemizedlist></para>
</newfeatures>
<revhistory>
<revision>
<!--The date of printing or software version number is indicated in the footer.-->
<revnumber>6.0</revnumber><date>January 1991</date>
<revremark>Original Printing.</revremark>
</revision>
<revision>
<revnumber>7.0</revnumber><date>June 1992</date>
<revremark>Reprint with revision to reflect message system features added in the UNICOS 7.0 release.</revremark>
</revision>
<revision>
<revnumber>8.0</revnumber><date>January 1994</date>
<revremark>Revision to reflect message system features added in the UNICOS 8.0 release. This revision is only distributed online through Docview.</revremark>
</revision>
<revision>
<revnumber>8.3</revnumber><date>January 1995</date>
<revremark>Revision to reflect message system features added in the UNICOS 8.3 release for X/Open compliance. This revision is only distributed online through Docview.</revremark>
</revision>
<revision>
<revnumber>9.0</revnumber><date>July 1995</date>
<revremark>Reprint with revision to reflect message system features added since the last reprint.</revremark>
</revision>
<revision>
<revnumber>6.5</revnumber><date>May 1998</date>
<revremark>Revision to support the IRIX operating system 6.5 release.</revremark>
</revision></revhistory>
</bookinfo>




<preface>
<title>About This Guide</title>
<para>This publication documents the Cray message system, which runs on the
UNICOS, UNICOS/mk, and IRIX operating systems. This publication discusses
the Cray message system from the perspective of a programmer who wants to
issue messages from code by using the message system library routines and
message system catalogs. It contains information about how to create message
and explanation catalogs and how to retrieve messages from those catalogs
from within a program.</para>
<para>This information is useful to programmers using the message system and
to individuals (for example, system administrators) who want to understand
the design of the Cray message system.</para>
<section>
<title>Related Publications</title>
<para>The following documents contain additional information that may be helpful:<itemizedlist>
<listitem><para>For information on the message system from the point of view
of the system administrator who is installing, maintaining, and updating message
catalogs on a UNICOS system, and for information about using the message system
to retrieve message explanations, see <string strname="2301"><citetitle>General
UNICOS System Administration</citetitle>, publication SG-2301</string>.</para>
</listitem>
<listitem><para>For information on the message system from the point of view of the system administrator who is installing, maintaining, and updating message catalogs on a UNICOS/mk system, and for information about using the message system to retrieve message explanations, see <string strname="2601"><citetitle>UNICOS/mk General Administration</citetitle>, publication SG-2601</string>.</para>
</listitem></itemizedlist></para>
</section>
<!--I modified the following section (formerly "Ordering Cray Research Publications") to more closely match the potential needs of the reader to access both SGI and Cray pubs. There is not, however, any standard boilerplate for yet for this, so you can modify it as you see fit. susanm -->
<section>
<title>Ordering Publications</title>
<para>Silicon Graphics maintains publications information on the IRIX operating system and related products at the following URL:</para>
<literallayout><filename>http://techpubs.sgi.com/library </filename></literallayout>
<para>The preceding website contains information that allows you to browse documents online, order documents, and send feedback to Silicon Graphics.</para>
<para>Cray Research maintains publications information on the UNICOS and UNICOS/mk operating systems and related products at the following URL:</para>
<literallayout><filename>http://www.cray.com/swpubs </filename></literallayout>
<para>Also, the <string strname="0099"><citetitle>User Publications Catalog</citetitle>, publication CP-0099</string>, describes the availability and content of all Cray Research hardware and software documents that are available to customers.  Cray Research customers who subscribe to the Cray Inform  (CRInform) program can access this information on the CRInform system.</para>
<para>To order a Cray Research or Silicon Graphics document, either call the Distribution Center in  Mendota Heights, Minnesota, at +1-612-683-5907, or send a  facsimile of your request to fax number +1-612-452-0141.</para>
<para>Silicon Graphics employees may send their orders via electronic mail (using a UNIX system) to <literal>orderdsk</literal>.</para>
<para>Customers outside of the United States and Canada should contact their local service organization for ordering and  documentation information.</para>
</section>
<section id="Z825545312melby">
<title>Conventions</title>
<para>The following conventions are used throughout this document:<deflist>
<colheads>
<head1>Convention</head1><head2>Meaning</head2></colheads>
<deflistentry>
<term><literal>command</literal></term>
<listitem><para>This fixed-space font denotes literal  items such as commands,
files, routines,  path names, signals, messages, and  programming language
structures. </para>
</listitem>
</deflistentry>


<deflistentry>
<term><replaceable>variable</replaceable></term>
<listitem><para>Italic typeface denotes variable entries  and words or concepts being
defined.</para>
</listitem></deflistentry>


<deflistentry>
<term><userinput>user input</userinput></term>
<listitem><para>This bold, fixed-space font denotes literal  items that
the user enters in interactive  sessions.  Output is shown in nonbold,  fixed-space
font.</para>
</listitem></deflistentry>


<deflistentry>
<term>[ ]</term>
<listitem><para>Brackets enclose optional portions of a  command or directive line.</para>
</listitem></deflistentry>


<deflistentry>
<term>...</term>
<listitem><para>Ellipses indicate that a preceding element can be repeated.</para>
</listitem></deflistentry>

</deflist></para>
<!--Delete any of the preceding conventions that are  not used in your manual.-->
<para>The following machine naming conventions may be used throughout this document:<deflist>
<colheads>
<head1>Term</head1><head2>Definition</head2></colheads>
<deflistentry>
<term>UNICOS systems</term>
<listitem><para>All configurations of Cray parallel vector processing (PVP) systems that support the Cray message system</para>
</listitem></deflistentry>
<deflistentry>
<term>UNICOS/mk systems</term>
<listitem><para>All configurations of Cray massively parallel processing (MPP) systems that support the Cray message system</para>
</listitem></deflistentry>





<deflistentry>
<term>IRIX systems</term>
<listitem><para>All configurations of CHALLENGE, CHALLANGE 10000, CRAY, CRAY Origin2000, Indigo2 10000, Indigo R4000, Indigo2, Indy, O2, Octane, Onyx, Onyx Extreme, Onyx2,  Origin 200, Origin 2000, POWER CHALLENGE, POWER CHALLANGE 10000, POWER Indigo2, and POWER Onyx systems that support this release</para>
</listitem></deflistentry>
</deflist></para>
<para>The default shell in the UNICOS and UNICOS/mk operating systems, referred to in Cray Research documentation as the <firstterm>standard shell</firstterm>, is a version of the Korn shell that conforms to the following standards:<itemizedlist>
<listitem><para>Institute of Electrical and Electronics Engineers (IEEE)  Portable Operating System Interface (POSIX) Standard  1003.2-1992</para>
</listitem>
<listitem><para>X/Open Portability Guide, Issue 4 (XPG4)</para>
</listitem></itemizedlist></para>
<para>The UNICOS and UNICOS/mk operating systems also support the optional use of the C shell.</para>

<para>Cray UNICOS Version 10.0 is an X/Open Base 95 branded product.</para>
</section>
<section id="Z825546061melby">
<title>Reader Comments</title>
<para>If you have comments about the technical accuracy, content, or  organization
of this document, please tell us.  You can contact us  in any of the following
ways:<itemizedlist>
<listitem><para>Send us electronic mail at the following address:<literallayout>
techpubs@sgi.com</literallayout></para>
</listitem>
<listitem><para>Contact your customer service representative and ask that
an SPR or PV be filed.  If filing an SPR, use <literal>PUBLICATIONS</literal>
 for the group name, <literal>PUBS</literal> for the command, and <literal>
NO-LICENSE</literal>  for the release name.</para>
</listitem>
<listitem><para>Call our Software Publications Group in Eagan, Minnesota,
 through the Customer Service Call Center, using either of the  following
numbers:<simplelist>
<member>1-800-950-2729 (toll free from the United States
and  Canada)</member>
<member>+1-612-683-5600</member></simplelist></para>
</listitem>
<listitem><para>Send a facsimile of your comments to the attention of  &ldquo;Software
Publications Group&rdquo; in Eagan, Minnesota, at fax  number +1-612-683-5599.
</para>
</listitem></itemizedlist></para>
<para>We value your comments and will respond to them promptly.</para>
</section>

</preface>


<chapter>
<title>Introduction</title>
<para>User messages are the most important part of communication between software and its users. Messages tell users when the hardware or software cannot perform as requested. It is vital in these situations to report in accurate detail the circumstances of the problem and the path to a solution.</para>
<para>Silicon Graphics/Cray Research has systems installed worldwide. Our users require not only accurate message information, but also access to the messages so that they can be translated to the native language of users who do not speak English.</para>
<para>The Cray message system consists of tools and procedures for issuing messages to users from program code and delivering documentation on those messages in a format that is suitable for translation.</para>
<para>The Cray message system is based on the X/Open Native Language    System specification as described in the X/Open Company Standard XPG4. Cray Research has provided extensions to the standard that include a more complete set of tools and procedures for working with messages and message explanations.</para>
<para>Any programmer can use the message system tools in a Cray Research UNICOS or UNICOS/mk environment or in a Silicon Graphics IRIX environment. This manual explains how the message system is designed to work and how you can use it from your programs. The examples in this document assume that you are using the C language; however, any language that   can call C library functions can use the Cray message system.</para>
<warning><para>Sites using the Cray ML-Safe configuration of the UNICOS or UNICOS/mk operating systems or the Trusted IRIX operating system can use the information and procedures outlined in the following sections to change or add messages. However, for changed messages, you must not alter the original, underlying meaning of the message. </para>
</warning>
<section>
<title>Message System Features</title>
<para> The message system includes the following features, which aid in improving error reporting and problem resolution:<itemizedlist>
<listitem><para><glossterm linkend="Z844442074howie">message catalog</glossterm><replaceable>s</replaceable><!--I took the 's' out of the replaceable tags for this and the following glossterms. If this causes problems when you generate a glossary, see me and we can figure out some other way of writing around it. susanm -->, located separately from the program code, which contain the text of the messages issued at run time</para>
</listitem>
<listitem><para><glossterm linkend="Z844441458howie">explanation catalog</glossterm><replaceable>s</replaceable>, located in the same directory as the message catalogs, which contain a discussion of the problem and suggested solutions</para>
</listitem>
<listitem><para>Online access to message explanations through the <command sectionref="1">explain</command> command</para>
</listitem>
<listitem><para>User control of the message format through the <literal>MSG_FORMAT</literal> environment variable</para>
</listitem>
<listitem><para>User control of the language of the message text (where translated messages are supplied) through the <literal>LANG</literal> environment variable</para>
</listitem>
<listitem><para>Message and explanation text source files distributed with the release to allow local modifications of the message or explanation text</para>
</listitem>
<listitem><para>Published guidelines for writing good messages and good message documentation</para>
</listitem></itemizedlist></para>
</section>
<section>
<title>Document Outline</title>
<para>Each chapter of this document discusses an aspect of the message system.</para>
<para><xref role="page" linkend="Z085016300590howie"></xref>, describes each part of the message system and the purpose it serves.</para>
<para><xref role="page" linkend="Z583214170590howie"></xref>, provides a sample procedure for converting an existing piece of software to use the message system.</para>
<para><xref role="page" linkend="Z110509011189howie"></xref>, is an appendix that lists guidelines for writing effective messages and usable message explanations.</para>
</section>
</chapter>



<chapter id="Z085016300590howie">
<title>Message System Design</title>
<para> The Cray message system consists of a set of tools to build <!--I added 's' to actual glossterm tag. Let me know if this causes problems for you. susanm --><glossterm linkend="Z844442082howie">message text file</glossterm><replaceable>s</replaceable> into <glossterm linkend="Z844440961howie">catalog</glossterm><replaceable>s</replaceable>, to retrieve messages from catalogs, and to format messages to be issued to the user. Under the message system, all messages and explanations reside in a binary <glossterm linkend="Z844442074howie">message catalog</glossterm> maintained on disk. No messages need to appear within program code.</para>
<para>This chapter describes each element of the message system from a design perspective. All terms and concepts involved in the message system are introduced.</para>
<para>The procedures for using the message system in a product are described in <xref role="page" linkend="Z583214170590howie"></xref>. That chapter presents a sample procedure for using message system tools in a program.</para>
<section>
<title>Overview</title>
<para>  The elements of the message system are as follows:<itemizedlist>
<listitem><para>Message text files (<replaceable>group</replaceable><literal>.msg</literal>)</para>
</listitem>
<listitem><para>Message and explanation catalogs (<replaceable>group</replaceable><literal>.cat</literal> and <replaceable>group</replaceable><literal>.exp</literal>)</para>
</listitem>
<listitem><para>Catalog creation utilities (<command sectionref="1">caterr</command> and <command sectionref="1">gencat</command>)</para>
</listitem>
<listitem><para>Message retrieval library functions (<command sectionref="3">catopen</command>, <command sectionref="3">catclose</command>, <command sectionref="3">catgetmsg</command>, and <command sectionref="3">catgets</command>)</para>
</listitem>
<listitem><para>Message formatting library function (<command sectionref="3">catmsgfmt</command>)</para>
<!--There's a section (parallel section level to all the others in this list) that occurs here in the text in sequence but which isn't included in the list ("Special Message Types"). Suggest you find some way to include it in this list or reorganize the sections so it isn't at the same level as the others if it doesn't have the same importance. susanm -->
</listitem>
<listitem><para><!--Suggest you make the section title ("User Access to the Message System") and this list item text match a little more recognizably. susanm -->Explanation viewing utility (<command sectionref="1">explain</command>)</para>
</listitem>
<!--The following two listitems don't appear in the order listed here and aren't the same level as the other listitems in this list. Do you need to revamp this list to be more parallel to the sections? Or reorganize the sections to more closely match the list? susanm -->
<listitem><para>Catalog search path utility (<command sectionref="1">whichcat</command>) (UNICOS and UNICOS/mk systems only)</para>
</listitem>
<listitem><para>User environment variables or locales for language, catalog path, and message format (<literal>LANG</literal>, <literal>NLSPATH</literal>, <literal>MSG_FORMAT</literal>, and <literal>CMDMSG_FORMAT</literal>)</para>
</listitem></itemizedlist></para>
<para>These elements are described briefly in the following paragraphs. <xref linkend="Z850144124glen"></xref> shows the relationships among these elements.</para>
<figure id="Z172017300590howie" width="wide">
<title id="Z850144124glen">Message System Overview</title>
<graphic entityref="a11000.gif" magnification="80" width="wide"></graphic></figure>
<para>Under the message system, programs issue messages from catalogs.  Each software product has a catalog of messages and a catalog of  explanations. The source format of these catalogs is maintained in a message text file within the source directory tree for the product. The message system contains tools to build a message catalog and an explanation catalog from the message text file. The message text file and the two catalogs all use the <glossterm linkend="Z844441625howie">group code</glossterm>, which identifies the product or product group,  as part of the file name. </para>
<para>Catalogs can be built from a message text file, either from the command line or from within an <command sectionref="1">nmake</command> makefile (on UNICOS and UNICOS/mk systems) or a <command sectionref="1">make</command> or <command sectionref="1">smake</command> makefile (on IRIX systems).    On UNICOS and UNICOS/mk systems, catalogs are installed in the <filename>/lib</filename> or <filename>
/usr/lib</filename> directory trees. On IRIX systems, catalogs are installed in the <filename>/usr/lib/locale/<replaceable>LANG</replaceable>/LC_MESSAGES</filename> directory tree. (<replaceable>LANG</replaceable> represents either the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> category, both of which the <command sectionref="3c">catopen</command> utility uses to locate the correct message catalog.)</para>
<para>Programs gain run-time access to the message catalogs through library functions. These functions open and close catalogs,  retrieve messages from a catalog, and format messages according to a user-specified pattern.</para>
<para>Users receive information from the online explanation catalog by using the <command sectionref="1">explain</command> utility.   </para>
<para>Users control the type and format of information output with an error message by setting the <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> environment variables.    They control the directory from which the error messages are retrieved by setting the <literal>NLSPATH</literal> environment variable.  On UNICOS and UNICOS/mk systems, users can determine which catalogs are being accessed and what catalog search path is being traversed by using the <command sectionref="1">whichcat</command> utility.    </para>
<para>If the messages are available in multiple languages, users control the language in which they receive messages by setting the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> locale category.   </para>
<para>For a complete description of the library functions, utilities, environment variables, and files that constitute the message system, see the man pages.</para>
<para>Each of the following sections describes part of the message system.</para>
</section>
<section>
<title>Message Text Files</title>
<para> The message text file contains the source text for both the messages issued to users from a program and the message explanations available to users through the <command sectionref="1">explain</command> utility.  The message text file is the source for all messages and explanations to be processed and delivered by the rest of the message system. <xref linkend="Z850144267glen"></xref> illustrates how the message text file is processed by and for other elements
of the message system.</para>
<figure id="Z384010220791cas" width="standard">
<title id="Z850144267glen">Processing the Message Text File</title>
<graphic entityref="a11591.gif" width="standard"></graphic></figure>

<para>The message text file should be named as follows: <literallayout><replaceable>group</replaceable>.msg</literallayout></para>
<para>This name is required to satisfy rules for catalog names and implicit rules in <command sectionref="1">nmake</command> (UNICOS and UNICOS/mk systems).  <replaceable>group</replaceable> is the group code that identifies your product. Several programs can use  the same group code or a single program can use several group codes. The group code helps users determine the source of the message. The <literal>.msg</literal> suffix distinguishes a message text file from a message catalog (<literal>.cat</literal> suffix) or explanation catalog (<literal>.exp</literal> suffix).</para>
<para>The group codes <literal>local</literal>, <literal>Local</literal>, <literal>LOCAL</literal>, and all group codes that begin with <literal>Z</literal> (uppercase only) are reserved for site use. Catalogs supplied by Cray Research do not use these group codes.</para>
<para>The message text file can contain the following four basic types  of information:<itemizedlist>
<listitem><para>Message text, preceded by the <literal>$msg</literal> tag  </para>
</listitem>
<listitem><para>Explanation text containing <command>nroff</command> formatting codes, preceded by the <literal>$nexp</literal> tag  </para>
</listitem>
<listitem><para>Plain ASCII explanation text, preceded by the <literal>$exp</literal> tag  </para>
</listitem>
<listitem><para>Comments, consisting of <literal>$&lt;space></literal> <replaceable>text</replaceable>, <literal>$&lt;tab></literal> <replaceable>text</replaceable>, or <literal>$&lt;newline></literal>  </para>
</listitem></itemizedlist></para>
<para>The following sections describe the text associated with each type of tag.</para>
<section>
<title>Message Text</title>
<para> A <literal>$msg</literal> tag precedes each message in the message text file. This tag is used by the catalog utilities to identify the associated text as a user message to be included in the message catalog. Each message entry must also include the message number.</para>
<para>The following sections discuss these aspects of writing message text:<itemizedlist>
<listitem><para>Numbering of messages</para>
</listitem>
<listitem><para>Ordering of messages</para>
</listitem>
<listitem><para>Variables in messages</para>
</listitem>
<listitem><para>Special characters in messages</para>
</listitem></itemizedlist></para>
<section id="Z295516190991cas"><title>Numbering of Messages</title>
<para>   Each message contained in the message text file must have a message number. The two types of message numbers are as follows:<itemizedlist>
<listitem><para>Literal numbers</para>
</listitem>
<listitem><para>Symbolic names</para>
</listitem></itemizedlist></para>
<para>Literal message numbers are integers that follow the <literal>$msg</literal>  tag. Combined with the group code, the message number provides a unique message identifier for messages issued using the message system.</para>
<para>A typical message with a literal number appears as follows:<literallayout>$msg 6 The daemon is unable to migrate the file.</literallayout></para>
<para>Rather than literal message numbers, it is recommended that you use symbolic message names (that is, a symbol instead of a number).  The purpose of symbolic names is to provide a cross-reference capability between message names and numbers.</para>
<para>A typical message with a symbolic name appears as follows:<literallayout>$msg DGR_UTM The daemon is unable to migrate the file.</literallayout></para>
<para>To use symbolic names, you must perform the following steps:<orderedlist><listitem><para>Create an include file to map the symbolic names to literal numbers.</para>
</listitem><listitem><para>Specify the include file in the message text file.</para>
</listitem><listitem><para>Use the <literal>-s</literal> option of the <command sectionref="1">caterr</command> catalog generation   utility when you generate the message and explanation catalogs from the message text file. (For a complete description of the <command>caterr</command> utility, see <xref role="page" linkend="Z330616311089howie"></xref>.)</para>
</listitem></orderedlist></para>
<para>Suppose you have a message text file (<literal>xyz.msg</literal>) that contains the following message definitions:<literallayout width="wide">$msg EMLEVPAR Missing parameter to MLEV routine<newline>$msg EMLEVPMI Parameter to MLEV routine must be a positive integer</literallayout></para>
<para>An include file (<literal>xyzcodes.h</literal>) can be created to map the symbolic names to literal numbers. This include file would appear as follows:<literallayout width="wide">#define EMLEVPAR 500   /* Missing parameter to MLEV routine */<newline>#define EMLEVPMI 501   /* Parameter to MLEV routine must be positive *</literallayout></para>
<para>You must add the following line before the first message in the message text file:<literallayout>#include "xyzcodes.h"</literallayout></para>
<para>A message catalog (<literal>xyz.cat</literal>) can be created from the message text file that contains the symbolic names by using the following utility:<literallayout>caterr -s -c xyz.cat xyz.msg</literallayout></para>
<para>The <literal>-s</literal> option calls the <command sectionref="1">cpp</command> C language preprocessor,  which maps the symbols to numbers based on the definitions in the include file. These include files also can be included in C source code files to provide access to the same symbolic message names.</para>
<para>Symbolic error codes can be created in any language if the compiler for that language has a capability comparable to <literal>#include</literal>. In some cases, the <command sectionref="1">cpp</command> utility might not be appropriate to do the symbolic-to-numeric mapping, because it processes only C-style include files; instead, a stand-alone program may be required to do the mapping.</para>
<para>Whether you use literal or symbolic message names, separate the <literal>$msg</literal> tag from the message number with at least one space or tab. If you use more than one space or tab, the file is still processed correctly, but the extra spaces or tabs are removed during text-to-catalog processing.</para>
<para>Separate the message number from the message text with one space. If you use more than one space, all spaces after the first are processed as leading spaces in the message text.</para>
</section>
<section><title>Ordering of Messages</title>
<para>  Messages must appear in ascending order, but they are not required to be consecutive. For example, all three of the following message numbering systems are acceptable:<example id="Z850144673glen"><title></title>
<literallayout>$msg 1 Message one<newline>$msg 2 Message two<newline>$msg 3 Message three</literallayout>
</example><example id="Z850144831glen"><title></title>
<literallayout>$msg 100 Message one<newline>$msg 101 Message two<newline>$msg 102 Message three</literallayout>
</example><example id="Z850144853glen"><title></title>
<literallayout>$msg 150 Message one<newline>$msg 160 Message two<newline>$msg 170 Message three</literallayout>
</example></para>
<para>Space is not allocated in the message file for each possible number in the sequence. Therefore, messages numbered as shown in example 2 or 3 require the same storage space as messages numbered as shown in example 1.</para>
</section>
<section><title>Variables in Messages</title>
<para> Many messages contain variables that are supplied at run time. Variables can be included in messages by using the <command sectionref="3">printf</command>   (UNICOS and UNICOS/mk systems) or <command sectionref="3s">printf</command> (IRIX systems) format codes. For example, format codes such as <literal>%s</literal>, <literal>%d</literal>, and <literal>%f</literal>) could be used in the message that appears in the message text file. The message is returned
from the catalog with the code embedded. You construct a print statement that supplies the proper value for the variable at run time.</para>
<note><para>Use single quotation marks (<literal>'  '</literal>) to enclose user-supplied strings (such as file names and user IDs) that are referred to as tokens. The use of quotation marks highlights for users information that is specific to the situation and reduces the possibility of variables being interpreted with a literal meaning. It is not a requirement to use quotation marks to enclose numeric values, language keywords, or other literal replacement strings.</para>
</note>
<para>A typical message text entry might appear as follows:<literallayout>$msg 100 Unknown account name '%s'.</literallayout></para>
<para>When printed at run time for a user who has entered <literal>abcd</literal> as an account name, the message appears as follows:<literallayout>Unknown account name 'abcd'.</literallayout></para>
<para>For an example of code to retrieve a message and modify it, see <xref role="page" linkend="Z360218270991cas"></xref>.</para>
</section>
<section><title>Special Characters in Messages</title>
<para> Messages that extend past the length of one physical line in the message   text file must contain a continuation character (\) at the end of each continued line of message text source. The last line of the message text must not end with a \ character because it is not continued.</para>
<para>The following example illustrates a message that exceeds one line in the message text file:<literallayout>$msg 104 A report modification option was used \<newline>in the command line, but a report was not \<newline>requested.</literallayout></para>
<para>You can embed special characters within the text of the message by using escape sequences (initiated with the \ character). <xref linkend="Z851351581glen"></xref> lists the escape sequences that are allowed in messages and unformatted explanation text.</para>
<table frame="topbot" tocentry="1" id="Z484117300590howie">
<title id="Z851351581glen">Special characters used in messages and explanations</title>
<tgroup align="left" charoff="50" cols="2" colsep="0" rowsep="0">
<colspec charoff="50" colname="c1" colwidth="137*">
<colspec charoff="50" colname="c2" colwidth="319*">
<thead>
<row rowsep="1"><entry align="left" rotate="0" valign="top"><para>Sequence</para></entry><entry align="left" rotate="0" valign="top"><para>Character</para></entry></row></thead>
<tbody valign="top">
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\b</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Backspace</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\f</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Form feed</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\n</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Newline</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\r</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Carriage return</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\t</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Horizontal tab</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\v</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Vertical tab</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\\</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para>Backslash</para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para><literal>\</literal> <replaceable>nnn</replaceable></para></entry>
<entry align="left" rotate="0" valign="top"><para>ASCII character corresponding to the octal value <replaceable>nnn</replaceable></para></entry></row></tbody></tgroup></table>
<para>Use newline characters within a multiline message to indicate where the lines should break on the screen.</para>
<para>Any characters other than those listed in <xref linkend="Z851351581glen"></xref> are passed through without the back slash (for example, <literal>\q</literal> produces <literal>q</literal>).</para>
<para>Although special characters are sometimes necessary in the message text, they make it difficult for users to control the layout of the error message through the <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal>    environment variables. For more information about how the message system formats messages, see <xref role="page" linkend="Z095115311089howie"></xref>.</para>
</section>
</section>
<section>
<title>Explanation Text</title>
<para> Each message entry should have a corresponding explanation. The message system accepts the following two types of explanations:<itemizedlist>
<listitem><para>Formatted explanations that contain formatting macros</para>
</listitem>
<listitem><para>Unformatted explanations that consist of plain ASCII text</para>
</listitem></itemizedlist></para>
<para></para>
<note><para>Message explanations originating within Silicon Graphics/Cray Research software development (as opposed to on site) are formatted using the <command>nroff</command> message macros contained in the <literal>tmac.sg</literal> file (see the <command sectionref="7d">msg</command> man page or the <command sectionref="5">msg</command> reference page). The option to use unformatted ASCII message explanations exists for the convenience of customer programmers who want to use the message system, but do not want to format the explanations.     </para>
</note>
<para>The following sections discuss details specific to formatted and unformatted explanation text.</para>
<section id="Z031517311089howie"><title>Formatted Explanation Text</title>
<para>   An <literal>$nexp</literal> tag at the beginning of the text identifies formatted explanation text. Each formatted explanation text entry must include the message number and the text of the message with variable names inserted in place of variable symbols.</para>
<para>Use the message macros provided with the message system tools to mark up the explanation text. (The message macros are defined in the <filename>/usr/lib/tmac/tmac.sg</filename> file on UNICOS and UNICOS/mk systems and described on the <command sectionref="7d">msg</command> man page. On IRIX systems, message macros are defined in the <filename>/usr/share/lib/tmac/tmac.sg</filename> file and described on the <command sectionref="5">msg</command> reference page.)  The message macros are collections of <command sectionref="1">nroff</command> text formatting directives defined for use with the message system.   </para>
<para>It is a convention to use italics for variable names in formatted message text. (Italic characters usually appear as underscored or reverse video text online.)</para>
<para>An <command>nroff</command> explanation does not require continuation characters at the end of lines.</para>
<para id="Z132614040194cas">An explanation might appear after markup as follows:<literallayout>$nexp 100<newline>The account name \&amp;'\*Vacid\*C' is not recognized.<newline>.PP<newline>The account ID (\fIacid\fR) specified with the<newline>-a option is not a known account name. Verify<newline>that the ID you entered is a valid account ID on<newline>the system.<newline>.ME</literallayout></para>
</section>
<section id="Z032314031090howie"><title>Unformatted Explanation Text</title>
<para>   Sites that elect not to format their explanations, but that want to create a message catalog for site-specific software, can use unformatted message explanations.</para>
<para>Each unformatted explanation text entry begins with an <literal>$exp</literal> tag and includes the message number and the text of the message, with variable names inserted in place of variable symbols. A continuation character (\) must appear at the end of each continued line of a multiline unformatted explanation. The last line of the explanation must not end with a \ character because it is not continued. Use angle brackets (&lt; >) for variable names in unformatted explanation text. (Italics are usually used for variables, but italics are not available in unformatted text.)</para>
<para>You must specify the locations of newline and other special characters in an unformatted explanation. <xref role="table" linkend="Z484117300590howie"></xref>, summarizes the special characters. If you do not specify newline characters, none are used. This could render the explanation unreadable.</para>
<para>The unformatted version of the explanation presented on <xref role="page" linkend="Z132614040194cas"></xref> would appear in the text file as follows:<literallayout>$exp 100 The account name '&lt;acid>' is not recognized.\n\<newline>\n\<newline>The account ID (acid) specified with the\n\<newline>-a option is not a known account name. Verify\n\<newline>that the ID you entered is a valid account ID on\n\<newline>the system.\n</literallayout></para>
</section>
</section>
<section>
<title>Comment Text</title>
<para> The <literal>$</literal> tag indicates that all remaining text on the source file line is a comment. A space or tab must appear between the <literal>$</literal> and the first character of the comment, or the <literal>$</literal> must appear as the only character on the line. Comments cannot consist of more than one line.</para>
<para>The following example shows four comment lines:<literallayout>$ The following text contains the messages<newline>$ and explanations for the ja(1) command.<newline>$ These messages are part of the "acct"<newline>$ software group.</literallayout></para>
<para>Use comments rather than blank lines to create white space in the source file. Blank lines are significant to the <command>nroff</command> and <command>troff</command> text formatters and can create extra vertical spacing in online and printed explanations.</para>
</section>
<section>
<title>Combining Text Types in a File</title>
<para>The only rule governing how you can combine the four types of text in a message file is that messages and explanations must appear in ascending numerical order. One common arrangement is for messages and explanations to appear in an alternating order.</para>
<para>The following example illustrates this arrangement:<literallayout>$msg 100 Text of message 1<newline>$nexp 100<newline>Text of message 1 with variables inserted<newline>.PP<newline>The explanation for message 1<newline>.ME<newline>$<newline>$msg 101 Text of message 2<newline>$nexp 101<newline>Text of message 2 with variables inserted<newline>.PP<newline>The explanation for message 2<newline>.ME</literallayout></para>
<para>Another possible arrangement is to group all of the messages together, followed by all of the explanations.</para>
<para>The following example illustrates this arrangement:<literallayout>$ Messages<newline>$msg 100 Text of message 1<newline>$msg 101 Text of message 2<newline>$<newline>$ Explanations<newline>$nexp 100<newline>Text of message 1 with variables inserted<newline>.PP<newline>The explanation for message 1<newline>.ME<newline>$nexp 101<newline>Text of message 2 with variables inserted<newline>.PP<newline>The explanation for message 2<newline>.ME</literallayout></para>
<para>Any other arrangement in which messages and explanations are presented in ascending order can be processed successfully by the catalog generation tools. For the purposes of arranging the catalog, formatted and unformatted explanations are interchangeable.</para>
<para>Comments can appear before, after, or between any of the other text types (that is, <literal>$msg</literal>, <literal>$nexp</literal>, and <literal>$exp</literal>) but cannot appear within them.</para>
</section>
</section>
<section>
<title>Message and Explanation Catalogs</title>
<para>The message system uses message catalogs and explanation catalogs. Message catalogs contain the text of user messages issued by the program or programs of a particular software group. The message catalog is the run-time source of messages issued to users. Typically, explanation catalogs contain copies of each message in the message catalog, along with an accompanying explanation of the cause of the message, and actions suggested to remedy the error condition.</para>
<para>Both types of catalogs are generated from the message text file.  When you have created a message text file, run the <command sectionref="1">caterr</command> utility, using the message text  file as input, to convert the message text file into the form that is used by the message system library functions. When invoked with the <literal>-c</literal> option, <command>caterr</command> calls a utility named <command sectionref="1">gencat</command> to build a  binary message catalog or a binary explanation catalog. (For more information on <command>caterr</command> and <command>gencat</command>, see <xref role="page" linkend="Z330616311089howie"></xref>.) To produce a message catalog and an explanation catalog from one message text file, you must run <command>caterr</command> twice.</para>
<para>The following sections discuss the location of message and explanation catalogs and explain how to use <command>caterr</command> to build them.</para>
<section>
<title>Catalog Search Path</title>
<para> The <literal>LANG</literal> and <literal>NLSPATH</literal> environment variables and the <literal>LC_MESSAGES</literal> category determine the search path on the disk for the message and explanation catalogs. (The acronym NLS refers to the X/Open Native Language System on which the Cray message system is based.)</para>
<para>The use of environment variables and categories to determine the catalog search path gives users and program developers control over which catalogs the message system library functions access.</para>
<section><title><literal>LANG</literal> Variable</title>
<para>   The <literal>LANG</literal> environment variable and the <literal>LC_MESSAGES</literal> category identify the user's requirements for native language, territory, and coded character set. These components are specified in a string of the following form:<literallayout><replaceable>language</replaceable>[_<replaceable>territory</replaceable>[.<replaceable>codeset</replaceable>]]</literallayout></para>
<para>On UNICOS and UNICOS/mk systems, the string <literal>En</literal> is the designation for the American English language.   On IRIX systems, the string <literal>en_US</literal> is the designation for the American English language. <!--Sounds funny that one designates "English" and the other designates "American English" - is this a true difference (e.g., the UNICOS version spells it "colour"?) If not, use the same term for both. susanm --> </para>
<para>On UNICOS and UNICOS/mk systems, other language, territory, and code set designations (if any) are defined and supported locally.  IRIX systems support six localized desktops and over 30 basic locales produced by Silicon Graphics.</para>
<para>The value of <replaceable>language</replaceable> is part of the internal value of the <literal>NLSPATH</literal> environment variable.<!--You explain the variable "language" but not the other two (_territory and .codeset)- should you? susanm --></para>
</section>
<section><title><literal>NLSPATH</literal> Variable</title>
<para>   The <literal>NLSPATH</literal> environment variable contains the message system search path; that is, the message system searches for catalogs in the directories specified by the value of <literal>NLSPATH</literal>. If the catalog is not found on the user search path (or if the user does not define <literal>NLSPATH</literal>), the internal value of <literal>NLSPATH</literal> is searched.</para>
<para>In addition to string literals, <literal>NLSPATH</literal> can contain any of the following variable fields: <deflist termlength="narrow">
<colheads>
<head1>Field</head1><head2>Description</head2></colheads>
<deflistentry>
<term><literal>%N</literal></term>
<listitem><para>The value of the <replaceable>name</replaceable> parameter passed to <command>catopen</command>. This is the same as the group code.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%L</literal></term>
<listitem><para>The value of the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> category.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%l</literal></term>
<listitem><para>The language component of the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> category. This component determines the language in which messages are displayed.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%t</literal></term>
<listitem><para>The territory component of the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> category.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%c</literal></term>
<listitem><para>The code set component of the <literal>LANG</literal> environment variable or the <literal>LC_MESSAGES</literal> category.</para>
</listitem></deflistentry>
</deflist></para>
<para>The file name specified in the <literal>NLSPATH</literal> environment variable must be the name of the message catalog (not the explanation catalog) to be referenced. For example, to specify that the message system should search the <replaceable>group</replaceable><literal>.cat</literal> file in the <filename>/usr/tmp</filename> directory, specify the following <literal>NLSPATH</literal> definition:<literallayout>/usr/tmp/%N.cat</literallayout></para>
<para>The message system replaces <literal>%N</literal> with the group code you pass to <command sectionref="3">catopen</command>or <command sectionref="1">explain</command>. For example,    if your group code is <literal>lib</literal>, the message system would search for a message catalog called <filename>/usr/tmp/lib.cat</filename>.</para>
<para>On UNICOS and UNICOS/mk systems, the <command>explain</command> utility changes the <literal>.cat</literal> suffix to <literal>.exp</literal> <!--You may want to consider providing an xref somewhere in this area to the next section ("Catalog Names" since that section defines the .cat and .exp suffixes. susanm -->before searching for the explanation catalog. Therefore, using the <literal>NLSPATH</literal> defined in the previous example and a group code of <literal>lib</literal>, the <command>explain</command> utility would search for the explanation catalog named <filename>/usr/tmp/lib.exp</filename>. On IRIX systems, the <command>explain</command> utility will properly display explanations even if the <literal>NLSPATH</literal> definition does not append the <literal>.cat</literal> suffix.
</para>
<para></para>
<note><para>You must always use <literal>%N</literal> for the catalog name in the definition of the <literal>NLSPATH</literal> environment variable. If you hard code the catalog name, the message system tries to retrieve all messages from the catalog you specify. For example, if you set the <literal>NLSPATH</literal> environment variable to <filename>/usr/tmp/lib.cat</filename>, the message system searches this catalog for errors from any product. This could cause a library message to be issued in a situation in which another product's message should have been issued. Using the <literal>%N</literal> variable as the catalog name prevents this error.</para>
<para>Also, you must never specify the explanation catalog in the <literal>NLSPATH</literal> environment variable. If you specify the path name <filename>/usr/tmp/%N.exp</filename> in <literal>NLSPATH</literal>, the message system will access the explanation, rather than the message when it retrieves the message by using the <command sectionref="3">catgetmsg</command> or <command sectionref="3">catgets</command> function. Use the <literal>.cat</literal> (not the <literal>.exp</literal>) suffix in <literal>NLSPATH</literal> declarations.</para>
</note>
<para>If the message system searches the paths specified by the <literal>NLSPATH</literal> variable and does not find the file it is looking for, or if the user has not defined <literal>NLSPATH</literal>, the message system searches its internally specified path. This path  is defined as follows.</para>
<para>(UNICOS and UNICOS/mk systems only)<literallayout>/usr/lib/nls/%l/%N.cat:/lib/nls/%l/%N.cat:\<newline>/usr/lib/nls/En/%N.cat:/lib/nls/En/%N.cat</literallayout></para>
<para>(IRIX systems only)<literallayout>/usr/lib/locale/%L/LC_MESSAGES/%N:\<newline>/usr/lib/locale/%L/Xopen/LC_MESSAGES/%N:\<newline>/usr/lib/locale/%L/LC_MESSAGES/%N.cat:\<newline>/usr/lib/locale/C/LC_MESSAGES/$N:\<newline>/usr/lib/locale/C/LC_MESSAGES/%N.cat</literallayout></para>
<para>Most message and explanation catalogs are located on disk in the  <filename>/usr/lib/nls/En</filename> directory (for UNICOS and UNICOS/mk systems) or in the <filename>/usr/lib/locale/C/LC_MESSAGES</filename> directory (for IRIX systems). Catalogs that must be present for the system to work when the <filename>/usr/lib</filename> file system is not mounted are located in the <filename>/lib/nls/En</filename> directory (UNICOS and UNICOS/mk systems). Thus, if the <literal>LANG</literal> or <literal>LC_MESSAGES</literal> language designation variable is set to an   unsupported value, the English catalog is still searched. Users with an unset or incorrectly set <literal>LANG</literal> environment variable or <literal>LC_MESSAGES</literal> category always receive messages in English. On IRIX systems, if the <literal>LANG</literal> or <literal>LC_MESSAGES</literal> language designation variable is set to an unsupported value, the catalog from <literal>C</literal> locale will be used, and the message will be displayed in American English.</para>
<para>On UNICOS and UNICOS/mk systems, to determine which catalog is returning a message or explanation, use the <command sectionref="1">whichcat</command> utility. This utility verifies that   the expected catalog is being referenced. The syntax <literal>whichcat -l</literal> returns a list of the path names that are searched when looking for the catalog. If no message or explanation catalog is found, this usage can help you to determine why. There is no parallel utility on IRIX systems.</para>
</section>
</section>
<section>
<title>Catalog Names</title>
<para>  Message catalogs are named by group code with a <literal>.cat</literal> suffix added (for example, the messages for the library group are in a catalog named <literal>lib.cat</literal>). Explanation catalogs are named by group code with a <literal>.exp</literal> suffix added (for example, the explanations for the <literal>lib</literal> group are in a catalog named <literal>lib.exp</literal>). This naming convention is required to satisfy rules for catalog names and for UNICOS and UNICOS/mk <command sectionref="1">nmake</command> implicit rules. (<command sectionref="1">
nmake</command> is not available on IRIX systems.)      </para>
<para>The <command sectionref="3">catopen</command> function references the <literal>NLSPATH</literal> environment variable when determining the message catalog to open. For example, on UNICOS and UNICOS/mk systems, if the user has not set <literal>NLSPATH</literal>, and neither <literal>LANG</literal> nor <literal>LC_MESSAGES</literal> is set, and the catalog name <literal>lib</literal> is passed to <command>catopen</command>, <command>catopen</command> tries to open the catalog <filename>/usr/lib/nls//lib.cat</filename>. If this catalog does not exist, <command>catopen</command> tries the next catalog, in this order:<literallayout>/lib/nls//lib.cat<newline>/usr/lib/nls/En/lib.cat<newline>/lib/nls/En/lib.cat</literallayout></para>
<para>On IRIX systems, assuming the system language is C, if the user has not set <literal>NLSPATH</literal>, and neither <literal>LANG</literal> nor <literal>LC_MESSAGES</literal> is set, and the catalog name <literal>lib.cat</literal> is passed to the <command>catopen</command> utility, <command>catopen</command> tries to open a catalog using the paths defined by the <literal>DEF_NLSPATH</literal> macro in file <filename>nl_types.h</filename>, in this order:<literallayout>/usr/lib/locale/C/LC_MESSAGES/lib.cat<newline>/usr/lib/locale/C/Xopen/LC_MESSAGES/lib.cat<newline>/usr/lib/locale/C/LC_MESSAGES/lib.cat.cat<newline>/usr/lib/locale/C/LC_MESSAGES/lib.cat<newline>/usr/lib/locale/C/LC_MESSAGES/lib.cat.cat</literallayout></para>
<para>If no catalog exists, an error condition has been encountered. For information about the different types of catalog errors you may encounter and recommendations for handling them, see <xref role="page" linkend="Z155510011189howie"></xref>.   </para>
<para>The <command sectionref="1">explain</command> user utility references the <literal>NLSPATH</literal> environment variable when determining what explanation catalog to open. For example, a user enters one of the following utilities:<literallayout>explain lib1001</literallayout><literallayout>explain lib-1001</literallayout></para>
<para> Using the internal values of <literal>NLSPATH</literal> and either <literal>LANG</literal> or <literal>LC_MESSAGES</literal> for <literal>%l</literal>, the <command>explain</command> utility searches for the following catalogs in succession on UNICOS and UNICOS/mk systems:<literallayout>/usr/lib/nls/%l/lib.cat.exp<newline>/lib/nls/%l/lib.cat.exp<newline>/usr/lib/nls/En/lib.cat.exp<newline>/lib/nls/En/lib.cat.exp</literallayout></para>
<para>On IRIX systems, if <literal>NL_CAT_LOCALE</literal> is passed to <command sectionref="3c">catopen</command> and <literal>LC_MESSAGES</literal> equals <literal>C</literal>, <command sectionref="1">explain</command> searches for the following catalogs in succession:<literallayout>/usr/lib/locale/C/LC_MESSAGES/lib.exp<newline>/usr/lib/locale/C/Xopen/LC_MESSAGES/lib.exp<newline>/usr/lib/locale/C/LC_MESSAGES/lib.exp.cat</literallayout></para>
<para>Otherwise, <command sectionref="1">explain</command> searches for the following catalogs in succession:<literallayout>/usr/lib/locale/%L/LC_MESSAGES/lib.exp<newline>/usr/lib/locale/%L/Xopen/LC_MESSAGES/lib.exp<newline>/usr/lib/locale/%L/LC_MESSAGES/lib.exp.cat<newline>/usr/lib/locale/C/LC_MESSAGES/lib.exp<newline>/usr/lib/locale/C/LC_MESSAGES/lib.exp.cat</literallayout></para>
<para>You can change the value of <literal>NLSPATH</literal> so that the message catalogs can be located in any directory. You may want to change the value of <literal>NLSPATH</literal> when you are developing code, locate the message catalog in a local directory, and change <literal>NLSPATH</literal> to point to that local directory.</para>
</section>
<section id="Z330616311089howie">
<title>Generating Catalogs</title>
<para>   Use the <command sectionref="1">caterr</command> utility to convert your message text file to a binary message catalog and a binary explanation catalog. You must invoke <command>caterr</command> twice to generate both types of catalogs.</para>
<para>The syntax for <command>caterr</command> is as follows:<synopsis>caterr [-c <replaceable>catfile</replaceable>] [-e] [-s[-P <replaceable>cpp_opts</replaceable>]] [-Y <replaceable>x</replaceable>,<replaceable>pathname</replaceable>] [<replaceable>msgfile</replaceable>]</synopsis></para>
<para>The <command>caterr</command> utility processes the message text file (<replaceable>msgfile</replaceable>) to prepare it for conversion to a catalog. (If <replaceable>msgfile</replaceable> is not specified, the input is read from <literal>stdin</literal>.) The conversion to a catalog is actually performed by a second utility called <command sectionref="1">gencat</command>.   However, you can use the <literal>-c</literal> option to <command>caterr</command> to instruct <command>caterr</command> to call <command>gencat</command> automatically. If you use the <literal>-c</literal> option, <command>caterr</command> outputs
the catalog and names it <replaceable>catfile</replaceable>.</para>
<para>It is recommended that you use <command>caterr</command> with the <literal>-c</literal> option. (The <command>gencat</command> utility exists as a separate utility to maintain compatibility with the X/Open standards for message catalog processing. There is no advantage in calling <command>gencat</command> separately.) By default, <command>caterr</command> looks for <command>gencat</command> in the <filename>/usr/bin/gencat</filename> file.</para>
<para>By default, the <command>caterr</command> utility generates a message catalog. To generate the explanation catalog, use the <literal>-e</literal> option.</para>
<para>Message text files can contain symbolic message codes instead of message numbers. (For a definition of symbolic message codes, see <xref role="page" linkend="Z295516190991cas"></xref>.) The <literal>-s</literal> option to <command>caterr</command> calls the C preprocessor (<command sectionref="1">cpp</command>) to process the  symbolic codes in the message text file into message numbers according to a mapping defined in an include file specified in the message text file. The <literal>-P</literal> suboption to the <literal>-s</literal> option passes the contents of a string enclosed in quotation marks to <command>cpp</command>
for processing. Use the <literal>-P</literal> suboption if you need to pass options and parameters to <command>cpp</command> from the <command>caterr</command> command line.</para>
<para>If <literal>$nexp</literal> explanation tags are encountered in the message text file,   the <command>caterr</command> utility calls the text formatting utility <command>nroff</command> as part of its processing of the message text file. <command>nroff</command> uses message macro definitions to format the explanation text. By default, <command>caterr</command> looks for <command>nroff</command> in the <filename>/usr/bin/nroff</filename> file and for the message macros in the <filename>/usr/lib/tmac/tmac.sg</filename> file.</para>
<para>The <literal>-Y</literal> option lets you specify the version of <command>nroff</command>, <command>gencat</command>, and the <literal>tmac.sg</literal> message macros that     <command>caterr</command> calls. This option is needed primarily when <command>caterr</command> is used in the system generation environment. For examples of using the <literal>-Y</literal> option, see the <command sectionref="1">caterr</command> man page.</para>
<para>The following example uses <command>caterr</command> to generate a message catalog named <literal>lib.cat</literal> from the message text file <literal>lib.msg</literal>:<literallayout>caterr -c lib.cat lib.msg</literallayout></para>
<para>The following example uses <command>caterr</command> to generate an explanation catalog named <literal>lib.exp</literal> from the message text file <literal>lib.msg</literal>:<literallayout>caterr -e -c lib.exp lib.msg</literallayout></para>
<para>Remember to invoke <command>caterr</command> twice to generate both a message and an explanation catalog. For more information about generating catalogs, see the <command sectionref="1">caterr</command> and <command sectionref="1">gencat</command> man pages.</para>
</section>
</section>
<section>
<title>Retrieving Messages</title>
<para>  To access the message catalog from your program on UNICOS and UNICOS/mk systems, use the <command sectionref="3">catopen</command>, <command sectionref="3">catclose</command>, <command sectionref="3">catgetmsg</command>, and <command sectionref="3">catgets</command> library functions. To access the message catalog from your program on IRIX systems, use the <command sectionref="3c">catopen</command>, <command sectionref="3c">catclose</command>, <command sectionref="3c">catgetmsg</command>, and <command sectionref="3c">catgets</command> library functions. For the details of calling
these functions, see the man pages.</para>
<para>To retrieve a message from the catalog, open the catalog by using <command>catopen</command> and then retrieve the message by using      either <command>catgetmsg</command> or <command>catgets</command>. The nature of your program and the
type of messages it issues determines which of these two functions you use. If the program usually issues fatal messages and then aborts, you should use <command>catgetmsg</command>. If the program issues many messages and continues processing, you should use <command>catgets</command>.</para>
<para>On UNICOS and UNICOS/mk systems, the two functions are used in separate situations because they use system resources differently. <command>catgetmsg</command> reads into a user buffer the message corresponding to the message ID that you pass to it. <command>catgets</command> reads the entire set into an internal buffer. This has the effect of reading in the entire catalog, because Cray message catalogs are structured as a single set.</para>
<para>Because of this difference, <command>catgetmsg</command> is more efficient in situations in which only a few messages are issued, where error conditions are usually fatal, or where there are many messages and a program cannot afford the increased size at run time. Library functions and most utilities are examples of programs that should use <command>catgetmsg</command>.</para>
<para>The <command>catgets</command> function is more efficient in situations in which many messages are issued during the execution of the program. It is unnecessary to access the disk each time a message is read from the catalog, because all of the messages are in a buffer. Compilers are an example of programs that can gain an advantage from using <command>catgets</command>.</para>
<para>On IRIX systems, the performance difference is minimal between <command>catgets</command> and <command>catgetmsg</command> on relatively short messages, which are the most common. <command>catgets</command> may be slightly faster than <command>catgetmsg</command> because it does not need to copy the message into a supplied message buffer.</para>
<para>If <command>catgetmsg</command> or <command>catgets</command> fails because the message catalog identified by the catalog descriptor is not available or because the requested message is not in the catalog, a pointer to a null ("") string is returned.</para>
<para>When you are finished with a message catalog, close it by using the <command>catclose</command> library function.  </para>
<section id="Z155510011189howie">
<title>Retrieval Errors</title>
<para> It is possible that an error might occur during your attempt to open the message catalog or to retrieve a message. The message system library functions let you write your code assuming that the message retrieval will succeed. If the retrieval does not succeed, your program can continue processing despite the failure.</para>
<para>You do not need to perform a specific check to determine whether a <command>catopen</command> function fails, because the next <command>catgets</command> or <command>catgetmsg</command> will fail if the catalog is not available.</para>
<para>If you issue a correct <command>catgetmsg</command> or <command>catgets</command> function, you can encounter only two types of errors:<itemizedlist>
<listitem><para>The catalog is unavailable.</para>
</listitem>
<listitem><para>The catalog is available, but the requested message is not available.</para>
</listitem></itemizedlist></para>
<para>The <command>catgets</command> function returns a pointer to the default string <replaceable>s</replaceable>, which you passed to <command>catgets</command>, in response to either of these errors.</para>
<para>The <command>catgetmsg</command> function returns a pointer to a null ("") string in response to either of these errors. You can create a default message by placing it into the buffer used by <command>catgetmsg</command>. If the <command>catgetmsg</command> function fails, your default message will be undisturbed.</para>
<para>This default message capability allows (but does not require) your program to distinguish between these two types of failures. As with almost any call to a library function, you must decide on the level of fault tolerance or error recovery appropriate to your program.</para>
<para>The <!--Are the following routines really supposed to have TWO underscores (or one really long underscore) at the beginning? susanm --><literal>__catopen_error_code</literal>() internal routine also is available to help you diagnose the cause of a failed <command>catopen</command> call. (A failed <command>catopen</command> call is one which returns a value of -1.)</para>
<para>The <literal>__catopen_error_code</literal> routine returns a nonzero value indicating the reason for the failure. A return value less than <!--less than what? Is something missing here? a 0? susanm -->indicates that the problem is an error internal to the program. A return value greater than 0 indicates that the problem is a system error.</para>
<para>The internal error codes have symbolic names defined in the <literal>nl_types.h</literal> header file. These names and definitions are as follows:<deflist>
<colheads>
<head1>Error name</head1><head2>Description</head2></colheads>
<deflistentry>
<term><literal>NL_ERR_ARGCNT</literal></term>
<listitem><para><command>catopen</command> was called with fewer <!--Changed "less" to "fewer" susanm -->than two arguments. (UNICOS and UNICOS/mk systems)</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_ARGNULL</literal></term>
<listitem><para>The <replaceable>name</replaceable> argument to <command>catopen</command> is NULL. (UNICOS and UNICOS/mk systems)</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_HEADER</literal></term>
<listitem><para><command>catopen</command> was not able to validate the message catalog file header as a valid message catalog file. (UNICOS and UNICOS/mk systems)</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_MALLOC</literal></term>
<listitem><para><command>catopen</command> was not able to allocate memory (using <command sectionref="3">malloc</command>) for internal structures. </para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_MAP</literal></term>
<listitem><para>The requested catalog file could not be memory mapped (see the <command sectionref="2">mmap</command> man page). (IRIX systems)</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_MAXOPEN</literal></term>
<listitem><para><!--Added "The" susanm -->The maximum number of per process open message catalogs had been exceeded. See <literal>NL_MAX_OPENED</literal> in the <filename>nl_types.h</filename> file. (IRIX systems)</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>NL_ERR_VERSION</literal></term>
<listitem><para><command>catopen</command> found an invalid version number in the message catalog file header. (UNICOS and UNICOS/mk systems)</para>
</listitem></deflistentry>
</deflist></para>
<para>System error codes are the system return values defined in the <command>errno.h</command> header file. (These codes are documented on the <command sectionref="2">intro</command> man page.) System error codes are generated in the following cases:<itemizedlist>
<listitem><para>(UNICOS and UNICOS/mk systems) <command>catopen</command> was not able to successfully open (using <command sectionref="2">open</command>) any of the message catalog files specified in the <literal>NLSPATH</literal> environment variable search path.</para>
</listitem>
<listitem><para>(UNICOS and UNICOS/mk systems) <command>catopen</command> was not able to successfully read from (using <command sectionref="2">read</command>) or set the read/write file pointer to (using <command sectionref="2">lseek</command>) the message catalog file header and set directory.</para>
</listitem>
<listitem><para>(IRIX systems) <command>catopen</command> was not able to successfully open (using <command sectionref="2">open</command>) any of the message catalog files specified in the <literal>NLSPATH</literal> environment variable search path.</para>
</listitem>
<listitem><para>(IRIX systems) <command>catopen</command> was not able to successfully read from (using <command sectionref="2">read</command>) the message catalog file<!--Changed "fie" to "file"; I assume this is the correct intended meaning? susanm --> header and set directory.</para>
</listitem>
<listitem><para>(IRIX systems) <command>catopen</command> could not obtain file status information (using <command sectionref="2">fstat</command>) for the message catalog.</para>
</listitem></itemizedlist></para>
</section>
</section>
<section id="Z095115311089howie">
<title>Formatting Messages</title>
<para> The message system can format a message before you print it. The message is formatted according to the format pattern specified by the user in the <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> environment variables. For details about the difference between these two message formatting environment variables, see the <command sectionref="1">explain</command> man page.</para>
<para>The <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> environment variables hold a pattern constructed from the following replaceable characters:<deflist termlength="narrow">
<colheads>
<head1>Character</head1><head2>Description</head2></colheads>
<deflistentry>
<term><literal>%C</literal></term>
<listitem><para>Command name</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%D</literal></term>
<listitem><para>Debugging information</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%G</literal></term>
<listitem><para>Group code</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%M</literal></term>
<listitem><para>Message text</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%N</literal></term>
<listitem><para>Message number</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%P</literal></term>
<listitem><para>Position of the error</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%S</literal></term>
<listitem><para>Severity</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%T</literal></term>
<listitem><para>Time stamp</para>
</listitem></deflistentry>
</deflist></para>
<para>If any of the <literal>%</literal> fields is not present in the variable definition, the corresponding message field is not printed.</para>
<para>The format of the time stamp (<literal>%T</literal>) is equivalent to that produced by the <command sectionref="3">cftime</command> function and can be overridden by the <literal>CFTIME</literal> environment variable. For details about time-stamp formats, see the <command sectionref="3">strftime</command> man page, which documents the <command>cftime</command> function.</para>
<para>The <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> environment variables also accept <command sectionref="3">printf</command> escape sequences. <xref linkend="Z850147045glen"></xref> lists these special character sequences. </para>
<table frame="topbot" tocentry="1" id="Z573517300590howie">
<title id="Z850147045glen">Special characters accepted by <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> </title>
<tgroup align="left" char="" charoff="50" cols="3" colsep="0" rowsep="0">
<colspec colname="c1" colwidth="168*">
<colspec colname="c2" colwidth="84*">
<colspec colname="c3" colwidth="103*">
<thead>
<row rowsep="1"><entry align="left" rotate="0" valign="top"><para>Description</para></entry><entry align="left" rotate="0" valign="top"><para>Symbol</para></entry><entry align="left" rotate="0" valign="top"><para>Sequence</para></entry></row></thead>
<tbody valign="top">
<row>
<entry align="left" rotate="0" valign="top"><para>Newline character</para></entry>
<entry align="left" rotate="0" valign="top"><para>NL (LF)</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\n</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Horizontal tab</para></entry>
<entry align="left" rotate="0" valign="top"><para>HT</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\t</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Vertical tab</para></entry>
<entry align="left" rotate="0" valign="top"><para>VT</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\v</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Backspace</para></entry>
<entry align="left" rotate="0" valign="top"><para>BS</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\b</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Carriage return</para></entry>
<entry align="left" rotate="0" valign="top"><para>CR</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\r</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Form feed</para></entry>
<entry align="left" rotate="0" valign="top"><para>FF</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\f</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Audible alert</para></entry>
<entry align="left" rotate="0" valign="top"><para>BEL</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\a</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Backslash</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\</literal></para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\\</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Question mark</para></entry>
<entry align="left" rotate="0" valign="top"><para>?</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\?</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Single quote</para></entry>
<entry align="left" rotate="0" valign="top"><para>'</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\'</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Double quote</para></entry>
<entry align="left" rotate="0" valign="top"><para>"</para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\"</literal></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Octal number</para></entry>
<entry align="left" rotate="0" valign="top"><para><replaceable>ooo</replaceable></para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\</literal><replaceable>ooo</replaceable></para></entry></row>
<row>
<entry align="left" rotate="0" valign="top"><para>Hexadecimal number</para></entry>
<entry align="left" rotate="0" valign="top"><para><replaceable>hh</replaceable></para></entry>
<entry align="left" rotate="0" valign="top"><para><literal>\x</literal><replaceable>hh</replaceable></para></entry></row></tbody></tgroup></table>
<para>The escape \<replaceable>ooo</replaceable> consists of the backslash followed by 1, 2, or 3 octal digits, which are taken to specify the value of the desired character. A common example of this construction is \0, which specifies the null character. The escape <literal>\x</literal><replaceable>hh</replaceable> consists of the backslash, followed by <literal>x</literal>, followed by hexadecimal digits, which are taken to specify the value of the desired character. There is no limit on the number of digits, but the behavior is undefined if the resulting character value exceeds that of the largest character.</para>
<para>Any characters other than those listed in <xref linkend="Z850147045glen"></xref> are passed through without the backslash (for example, <literal>\q</literal> produces <literal>q</literal>).</para>
<para>In most cases, end your <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> specification with a newline character (<literal>\n</literal>) so that any output that follows begins on a new line.</para>
<para>If <literal>MSG_FORMAT</literal> is not defined, messages are formatted   according to the following default format:<literallayout>%G-%N %C: %S %P\n  %M\n</literallayout></para>
<para>For the default format of the <literal>CMDMSG_FORMAT</literal> variable and the order of precedence of variable evaluation, see the <command sectionref="1">explain</command> man page.</para>
<para>This pattern <!--Unclear to me what "This pattern" refers back to. Clarify if able. susanm -->produces a message of the following format:<literallayout><replaceable>groupname-msgnumber</replaceable>  <replaceable>command:</replaceable>  <replaceable>severity</replaceable>  <replaceable>position</replaceable><newline>  <replaceable>The text of the message</replaceable></literallayout></para>
<para>For example, library message number 1001, which is in the <literal>lib</literal> group and has a severity level of unrecoverable, would print as follows:<literallayout>lib-1001  a.out: UNRECOVERABLE<newline>  A READ operation tried to read past the<newline>end-of-file</literallayout></para>
<para>Because no position is specified, <literal>%P</literal> is replaced with a null ("") string.</para>
<para>Use of <literal>MSG_FORMAT</literal> and <literal>CMDMSG_FORMAT</literal> lets users control the message format. This gives users a common format to work with from product to product and allows the construction of more robust scripts to process messages. Users can format messages in a way that a script accepts, rather than changing the script to use the message format imposed by the program.</para>
<para>If you issue a message with replaceable parameters embedded in it, substitute the parameters in the message before passing it to the <command sectionref="3">catmsgfmt</command> message formatting function. For example, suppose you have the following message, which contains replaceable parameters:    <literallayout>The account name '<replaceable>account</replaceable>' is not recognized.</literallayout></para>
<para>The message might be returned from the catalog as follows: <literallayout>The account name '%s' is not recognized.</literallayout></para>
<para>Before passing the message string to <command>catmsgfmt</command>, replace the <literal>%s</literal> character with its value. One way this can be done is by using the <command>sprintf</command> function (see <command sectionref="3">printf</command> on UNICOS and UNICOS/mk systems or <command sectionref="3s">printf</command> on IRIX systems).   </para>
<para>In the following example, the first line of code inserts the value of the <literal>parameter</literal> variable into the message in the buffer to which <literal>p</literal> is a pointer. The result is placed in <literal>buf2</literal>. The second line resets the pointer <literal>p</literal> to point to the modified string.</para>
<literallayout>(void) sprintf(buf2, p, parameter);<newline>p = buf2;</literallayout>
<para>After parameter replacement, you can call <command>catmsgfmt</command> to format the message. <command>catmsgfmt</command> returns a pointer to the buffer that contains the formatted message. You can then print the message in any way and to any device that you choose.</para>
<para>The <command>catmsgfmt</command> function exists as a convenience to those who want to issue messages in the format specified by <literal>MSG_FORMAT</literal>. If you have a need for complex or program-specific  formats, you can control the message formatting yourself with the output functions for the programming language you use.</para>
<note><para>Be cautious in creating hard-coded message formats. Users quickly grow accustomed to the flexibility of an environment variable and may create software that depends on a particular message format under the assumption that they can control message formats by using the <literal>MSG_FORMAT</literal> environment variable. </para>
</note>
</section>
<section>
<title>Special Message Types</title>
<para>Special considerations exist for working with certain types of messages. The following sections discuss issuing the following message types by using the message system:<itemizedlist>
<listitem><para>System messages</para>
</listitem>
<listitem><para>Version messages</para>
</listitem>
<listitem><para>Usage messages</para>
</listitem></itemizedlist></para>
<section>
<title>System Messages</title>
<para> <firstterm>System messages</firstterm> are drawn from the <command>sys_errlist[]</command> structure. These messages are indexed by error number (<literal>errno</literal>) and are used by many programs throughout the system. </para>
<para>On UNICOS and UNICOS/mk systems, the <command>sys_errlist[]</command><!--Should these brackets be part of the literal? susanm --> structure also is contained
in a message catalog with the group code of <literal>sys</literal>. The text of
standard system error messages appears in this catalog. An explanation catalog
that contains explanations for the system messages also is provided. Your
program can draw
the text for system error messages from the catalog by using <literal>sys</literal> as the group code and the value of <literal>errno</literal> as
the message number.</para>
<note><para> Be sure to save the value of <literal>errno</literal> to a variable
before calling the message system. Otherwise, the value of <literal>errno</literal> may be reset during message processing and you could issue an inappropriate
error message. </para>
</note>
<para>On IRIX systems there is no <literal>sys</literal> catalog. To retrieve
system error messages, use the <command>strerror</command>(3c) function.</para>
</section>
<section>
<title>Version Messages</title>
<para> A <firstterm>version message</firstterm> states the version of the product issuing the
message. When issuing a version message from the message system, observe the
following rules:<orderedlist><listitem><para>Pass the version number to be
stated in the message from the calling program rather than coding it into
the message text file. This is important;
if the version number is coded into the message text file, the version message
will return the version of the message catalog, rather than the version of
the product.</para>
</listitem><listitem><para>Use the techniques described in <xref role="page" linkend="Z155510011189howie"></xref>, to ensure that the version message is
always issued, even if the message catalog is unavailable for some reason.
This is important because a discrepancy between the version of the product
and the version of the message catalog cannot be investigated unless the version
of the product is accurately reported by the code.</para>
</listitem></orderedlist></para>
</section>
<section>
<title>Usage Messages</title>
<para> A <firstterm>usage message</firstterm> provides a summary of the correct syntax for a utility.
The explanation for a usage message does not have to describe the utility's
syntax in full detail. Instead, it is sufficient to refer the reader to the
man page for the utility. The man page describes the syntax of the utility
in complete detail.</para>
<para>If the usage message contains a complex syntax that is difficult to
reproduce in the explanation, it is acceptable to restate the message simply
as "Usage error" in the explanation. For example, the following portion of
a message text file defines the full usage message to be issued by the <literal>docexec</literal> code, but abbreviates the message to "Usage error" in the
explanation.</para>
<programlisting width="wide">$msg 100 Usage: \n\<newline>  docexec \n\<newline>  docexec -i\n\<newline>  docexec -b ifile [-o docname] [-l]\n\<newline>  docexec -a docname -t doctitle -n number [-c catname] [-l]\n\<newline>  docexec -d docname [-l]\n\<newline>  docexec -g\n<newline>  docexec -l\n\<newline>$nexp 100<newline>Usage error<newline>.PP<newline>Either an incomplete command line or an unrecognized option<newline>was entered. For details about the \*Cdocexec\fR options, enter<newline>the following command line:<newline>.CS<newline>     man docexec<newline>.CE<newline>.ME</programlisting>
</section>
</section>
<section>
<title>User Access to the Message System</title>
<para>  The message system provides users with online access to message
explanations through the <command sectionref="1">explain</command> utility.
The syntax   of the <command>explain</command> utility
is as follows:<synopsis>explain <replaceable>msgid</replaceable></synopsis></para>
<para>The user supplies the <replaceable>msgid</replaceable> (group code and
message number) of the
message to be expanded. The <command sectionref="1">explain</command> utility
retrieves the message explanation from the appropriate message catalog and
outputs it to standard output.</para>
<para>A sample user session with <command>explain</command> appears as follows:<screen>% <userinput>explain dm100</userinput><newline>A .keep file is not present for '<replaceable>user</replaceable>'.<newline><newline>The dmlim(1) command did not find a file named<newline>.keep in the home directory of the specified user.<newline>To exempt files from migration, you must create a<newline>file named .keep in your home directory. It should<newline>contain the names of the files that you wish to<newline>exempt from migration. The file names in this file<newline>may contain standard wildcard characters.</screen></para>
<para>The output of <command>explain</command> is piped through the pager
specified in the <literal>PAGER</literal> environment variable. If <literal>PAGER</literal> is not specified, the  default pager <literal>more -s</literal> is used.</para>
<para>For a complete description of the <command sectionref="1">explain</command>
utility, see the <command sectionref="1">explain</command> man page.</para>
</section>
</chapter>


<chapter id="Z583214170590howie">
<title>Using the Message System</title>
<para>  Using the Cray message system requires changes to the way messages have traditionally been coded, tested, and documented in most organizations. This chapter explains how to use the message system as an alternative
to coding messages within the program source and addresses some common questions that you may have about message system procedures.</para>
<para>Each section describes a step in a sample procedure for approaching the conversion of a program to use the message system. As the principal developer for a product, you must determine how the procedure applies to your product. The procedure also applies loosely to the creation of new code using the message system.</para>
<para>The procedure assumes that the product you are changing is coded in the C language; however, you can use the message system with any  language that can interface with C language library functions.</para>
<section>
<title>Planning a Conversion</title>
<para> When you are ready to convert a piece of code to the message system, the best first step is to survey the existing code to answer the following questions:<itemizedlist>
<listitem><para>Where are the error messages located? Are they contained within one error-processing routine or are they dispersed throughout the program?</para>
</listitem>
<listitem><para>Are the messages generated using a consistent mechanism?  For example, are all messages printed using <command sectionref="3">fprintf</command>?</para>
<para>If the messages are generated consistently, it is easier to extract them to build a message catalog. If the messages are generated by various mechanisms, you must create some method of extracting the messages.</para>
</listitem>
<listitem><para>What should the software group code be for the product? The group code you choose can be any alphanumeric string. The recommended length of a group code is 3 to 6 characters. Group codes cannot exceed 10 characters.</para>
<para>The group codes <literal>local</literal>, <literal>Local</literal>, <literal>LOCAL</literal>, and all codes that begin with <literal>Z</literal> (uppercase
only) are reserved for site use. It is recommended that sites use these codes
to ensure that the release software does not contain a message file with the
same group code as a local program. Using this naming convention also makes
a clear distinction between local messages and release messages.</para>
<para>The group code for each product must be unique. The <command sectionref="1">explain</command> man page lists many of the group codes in use for the UNICOS,
UNICOS/mk, and IRIX operating systems.</para>
</listitem>
<listitem><para>Is there more than one program in the group? It is possible
for several programs with a related function to share a group code. For example,
the UNICOS <command sectionref="1">ja</command> command (job accounting) may
share a message catalog with other accounting code (for example, Cray system
accounting (CSA)). If this is the case, how are message ID numbers divided
among the various programs
in the group?</para>
<para>One common solution to this problem is to divide the catalog into ranges
(for example, numbers 1 through 1000 are used for the first program in the
group, numbers 1001 through 2000 are used for the second program in the group,
and so on). You should select ranges that are appropriate for your software
group.</para>
</listitem></itemizedlist></para>
</section>
<section id="Z262610010690howie">
<title>Building a Message Text File</title>
<para>When you have looked at the code to be converted, chosen
the group code to use, and decided on an approach to isolating the messages,
you can build the message text file.</para>
<para>Use the following steps to build the message text file:<orderedlist><listitem><para>Extract a copy of the messages from the code and write them
to a text file. UNICOS, UNICOS/mk, and IRIX text processing utilities such
as <command sectionref="1">grep</command>, <command sectionref="1">awk</command>,
and <command sectionref="1">sed</command> are useful for this process. If
the messages are generated by a consistent mechanism, this will be an easy
task. If they are not, this step will take longer.</para>
</listitem><listitem><para>Add a number or symbolic name to the beginning
of each message. Using the convention you decided on during the planning step,
number the messages. Each message must have a unique number. The numbers must
appear in the text file in ascending order, but they do not have to be consecutive.</para>
</listitem><listitem><para>Edit the copy of the messages that you extracted
in step 2. Remove the printing command (<command>fprintf</command>, <command>printf</command>, and so on). Delete variable argument names, the name of
the command issuing the message, the severity level, and any quotation marks
added for print command syntax. (The message formatting function, <command sectionref="3">catmsgfmt</command>, inserts the command name and severity
level when it formats the messages.) If you have a newline character (<literal>\n</literal>) at the end of the message, delete it also. Add the <literal>$msg</literal> tag to the beginning of the message and place single quotation
marks (<literal>' '</literal>) around variables.</para>
<para>For example, suppose your code contains the following message:<literallayout>fprintf(stderr,"ja: Unknown account name<newline>%s\n", arg)</literallayout></para>
<para>You should edit the message line so that it appears in the text file
as follows:<literallayout>$msg 100 Unknown account name '%s'</literallayout></para>
<para>Edit each message in the text file in this way. The following listing
shows a sample message text file.<programlisting width="wide">$ message catalog for ja (part of group 'acct')<newline>$msg 100 Unknown account name '%s'<newline>$msg 101 Unknown group name '%s'<newline>$msg 102 getoptlst() failed<newline>$msg 103 Unknown user name '%s'<newline>$msg 104 report modifying option(s) used without requesting a report<newline>$msg 105 -m option cannot be selected when issuing a report<newline>$msg 106 -m and -t options are mutually exclusive<newline>$msg 107 -h option must be used with -l option<newline>$msg 108 process is not part of a job<newline>$msg 109 can't find TMPDIR in environment<newline>$msg 110 can't make file name<newline>$msg 111 file name exceeds max length<newline>$msg 112 empty or nonexistent job accounting file<newline>$msg 113 no commands seen<newline>$msg 114 '%s' not removed<newline>$msg 115 couldn't get space for selection by name<newline>$msg 116 invalid regular expression for selection by name<newline>$msg 117 couldn't get space for positioning marks<newline>$msg 118 -p option's argument is invalid<newline>$msg 119 cannot position to last entry<newline>$msg 120 unable to position file<newline>$msg 121 error in reading job accounting file<newline>$   Next message is a warning<newline>$msg 122 command flow tree overflow</programlisting></para>
<programlisting></programlisting>
<para>The messages shown in the listing have not been edited to conform with
the guidelines presented in <xref role="page" linkend="Z110509011189howie"></xref>.
You may want to edit your messages with the guidelines in mind at this point
in the procedure, or you may want to complete the conversion of your code,
perform preliminary testing, and then return to the message file and concentrate
on improving the text of the messages.</para>
</listitem><listitem><para>Use the <command sectionref="1">caterr</command>
utility to build the text file into a binary   catalog.
Give <command>caterr</command> the name of your message text file and the
name of the catalog file you want to produce; <command>caterr</command> processes
the message text file into a catalog binary. For details of the syntax of
the <command>caterr</command> utility, see the <command sectionref="1">caterr</command> man page.</para>
<para>For example, to build a catalog file called <filename>/home/me/messages/lib.cat</filename> from a message text file called <literal>lib.msg</literal> in
the current directory, issue the following command:<literallayout>caterr -c /home/me/messages/lib.cat lib.msg</literallayout></para>
</listitem><listitem><para>Change the <literal>NLSPATH</literal> environment
variable to point to the output of   the <command>caterr</command> utility. For example, suppose the catalog binary file is
in the following directory:<literallayout>/home/cypress/me/messages</literallayout></para>
<para>Set <literal>NLSPATH</literal> to the following value:<literallayout>/home/cypress/me/messages/%N.cat</literallayout></para>
<para>This lets you test your program by using a local message catalog.</para>
</listitem></orderedlist></para>
</section>
<section id="Z360218270991cas">
<title>Modifying the Program Source</title>
<para>The next step is to modify your program source to work with the message
system. You must modify the program source in the following ways to call the
message system correctly:<orderedlist><listitem><para>Add a line to include
the <literal>&lt;nl_types.h></literal> header file in the program.  The <literal>&lt;nl_types.h></literal> file defines variables
used by the message system. For a description of the file, see the <command sectionref="5">nl_types</command> man page.</para>
<para>The include line appears in the program as follows:<literallayout>#include &lt;nl_types.h></literallayout></para>
</listitem><listitem><para>Add a line to define a message catalog file descriptor:  <literallayout>nl_catd  mcfd;</literallayout></para>
</listitem><listitem><para>Change the code that issues each message. You can
change the code on a message-by-message basis, or you can write a message
routine that can be called each time you want to issue a user message. You
decide which method works best for you, given the characteristics of your
product.</para>
<para>The following code example illustrates one possible message   processing routine designed to be called each time a
user message is issued. The code is offered here as an example of an error
processing routine. It is specific to one piece of code (<command sectionref="1">ja</command>) and may not work for any other application.</para>
<para>The following assumptions were made when designing the routine:<itemizedlist>
<listitem><para>Only two message severities are used by this code: warning
and unrecoverable.</para>
</listitem>
<listitem><para>No more than one replaceable parameter was used in a single
message.</para>
</listitem>
<listitem><para>Parameters substituted into messages are strings.</para>
</listitem>
<listitem><para>The group code for this product is <command>acct</command>,
and the command issuing the messages is <command>ja</command>.</para>
</listitem></itemizedlist></para>
<para>You could easily modify the code to use more severity levels, more replaceable
parameters, and different types of parameters.</para>
<programlisting width="wide">/*<newline> *  Retrieve and print error message<newline> */<newline>#include &lt;stdio.h><newline>#include &lt;nl_types.h><newline>#define BUFL 200<newline><newline>processerror (<newline>  int err_num,      /* Message error number                    */<newline>  int fatal,        /* Fatal flag (0 = warning, 1 = fatal)     */<newline>  char *parameter   /* Optional substitution string parameter  */<newline>)<newline><newline>{<newline>        char    *s;             /* Error severity                  */<newline>        char    *p;             /* Pointer to error message        */<newline>        char    buf1[BUFL];     /* Error message buffer            */<newline>        char    buf2[BUFL];     /* Error message buffer            */<newline>        char    buf3[BUFL];     /* Error message buffer            */<newline>        nl_catd mcfd;           /* Message catalog file descriptor */<newline>        /* Open the message catalog                                */<newline>        mcfd = catopen("acct", 0);<newline>        p = catgetmsg(mcfd, NL_MSGSET, err_num, buf1, BUFL);<newline><newline>        /* If a parameter was passed in, insert it into the message */<newline>        if (_numargs() >= 3) {<newline>                (void) sprintf(buf2, p, parameter);<newline>                p = buf2;<newline>        }<newline><newline>        /* Set s to the appropriate severity level                 */<newline>        if (fatal == 1)<newline>                s = "UNRECOVERABLE";<newline>        else<newline>                s = "WARNING";<newline><newline>        /* Format the message using the catmsgfmt function         */<newline>        (void) catmsgfmt("ja", "acct", err_num, s, p, buf3, BUFL);<newline><newline>        /* Print the formatted message to stderr                   */<newline>        fprintf(stderr, buf3);<newline><newline>        /* If error is fatal, return error status                  */<newline>        if (fatal == 1)<newline>                return(1);<newline><newline>        return(0);<newline>}</programlisting>
</listitem></orderedlist></para>
<para>With this routine in place, the following line of code could be used to issue error message number 100 as an unrecoverable error with the <command>optarg</command> argument to be placed into the message:<literallayout>processerror(100, 1, optarg);</literallayout></para>
<para>The line or lines of code that print each message in the existing code must be changed to call the error processing routine.</para>
</section>
<section>
<title>Integrating Message System Files in UNICOS and UNICOS/mk Systems</title>
<para><!--No IRIX impact here? (Just double checking) susanm // Yes, it needs an IRIX parallel. It doesn't exist, yet. I working on it with the developer. klj-->If your code is part of the UNICOS or UNICOS/mk system, your completed code and message catalogs must be integrated and built into the UNICOS or UNICOS/mk release. The following sections describe the steps in the integration procedure. If you are using the message system in an application, these integration steps are not necessary. </para>
<section>
<title>Integrating Messages into the PL</title>
<para>  The message and explanation source should be placed in a file called <replaceable>group</replaceable><literal>.msg</literal>. The file should be added to the UNICOS source manager (USM) source control program library (PL) for your product. (USM also works for the UNICOS/mk system.) Modifications to the message source should follow the same procedures as modification to other source elements of your product.</para>
</section>
<section id="Z150309091190cas">
<title>Building and Installing the Catalogs</title>
<para>The <command sectionref="1">nmake</command> makefile for your product must be modified    to build and install the message and explanation catalogs. <command>nmake</command> uses implicit rules to handle
most of the process automatically.
You must explicitly perform the following steps:<orderedlist><listitem><para>Name the message source file as <replaceable>group</replaceable><literal>.msg</literal>; <replaceable>group</replaceable> is the group code for your
product. </para>
</listitem><listitem><para>Decide where to install your catalogs. If your program must execute at times when only the root file system is available, it is usually installed in <filename>/bin</filename>. If this is the case, install the catalogs in <filename>/lib/nls/En</filename>.</para>
<para>If your program is not required to execute when only the root file system is available, it probably resides in <filename>/usr/bin</filename>. In this case, install your catalogs in <filename>/usr/lib/nls/En</filename>.</para>
<para>If your catalogs will be installed in <filename>/lib/nls/En</filename>, add the following statement to your makefile:<literallayout>NLSDIR =    $(ROOT)/lib/nls/En</literallayout></para>
<para>If your catalogs will be installed in <filename>/usr/lib/nls/En</filename>, you do not have to specify a definition for <literal>NLSDIR</literal>. This variable is predefined as <filename>/usr/lib/nls/En</filename>.</para>
</listitem><listitem><para>If you use symbolic message names, add the following line  to the <literal>INIT</literal> section of your <command>nmake</command> makefile:<literallayout>CATERRFLAGS  += -s</literallayout></para>
<para>This line calls <command sectionref="1">caterr</command> by using the <literal>-s</literal> option.</para>
</listitem><listitem><para>Add the target names <replaceable>group</replaceable><literal>.cat</literal> and <replaceable>group</replaceable><literal>.exp</literal> to the <literal>sys</literal> or <literal>sysgen</literal> target list. <command>nmake</command> automatically creates message and explanation catalogs with those names from your <replaceable>group</replaceable><literal>.msg</literal> file.</para>
<para>If your program is called <literal>sample</literal>, and your group code is also <literal>sample</literal>, your target line might appear as follows:<literallayout>sys: sample sample.cat sample.exp</literallayout></para>
</listitem><listitem><para>To install the catalogs, add the following statements to your <literal>installsys</literal> or <literal>installsysgen</literal> target:<programlisting width="wide">$(CPSET) $(CPSETFLAGS) <replaceable>group</replaceable>.cat $(NLSDIR)/. $(CHMODR) $(OWNER) $(GROUP)<newline>if [-s <replaceable>group</replaceable>.exp ]; then<newline>    $(CPSET) $(CPSETFLAGS) <replaceable>group</replaceable>.exp $(NLSDIR)/. $(CHMODR) $(OWNER) $(GROUP)<newline>fi</programlisting></para>
</listitem></orderedlist></para>
<para>The message catalog must always be installed unconditionally.</para>
<para>Generation of the explanation catalog depends on the presence of the <command>nroff</command> program on the system. If <command>nroff</command> is present,  the explanation catalog is generated and installed. If <command>nroff</command> is not present, a zero-length explanation catalog is produced.
This zero-length catalog must not be installed. If the length of the catalog
is 0, the <literal>-s</literal> test in the preceding code segment prevents
installation of the explanation catalog.</para>
<para>The message text source file is delivered as part of both source and
binary releases; therefore, the <replaceable>group</replaceable><literal>.msg</literal> file must not be specified on any of the <command>rm</command>
targets. This prevents removal of this file.</para>
<para>The message catalog (<replaceable>group</replaceable><literal>.cat</literal>)
file should be specified on either the <literal>rmubin</literal> or <literal>rmrbin</literal> target so that the file can be deleted along with other generated
files associated with the product.</para>
<para>The explanation catalog (<replaceable>group</replaceable><literal>.exp</literal>) file can be rebuilt only if <command>nroff</command> is available.
To prevent removal of this file in cases where <command>nroff</command> is
not available, add the following statements to the <literal>rmubin</literal>
or <literal>rmrbin</literal> target:<literallayout>if whence nroff > /dev/null ; then<newline>    ignore $(RM) $(RMFLAGS) group.exp<newline>fi</literallayout></para>
</section>
</section>
<section id="Z080417300590howie">
<title>Maintaining Message System Catalogs</title>
<para>Code that uses the message system and the message system catalogs must
be maintained from release to release. The following sections discuss guidelines
for adding, deleting, and changing messages.</para>
<section>
<title>Deleting a Message from a Release</title>
<para>  You can delete a message from a release by removing its call from
your product code. However, you should not remove the message or explanation
text from the message text file or catalogs. Retain all of this text so that
the message catalogs are upward compatible.</para>
<para>For example, if message number 50 is used for release 6.0 of the product,
but not for release 6.1, the 6.0 version of the product will still execute
correctly using the 6.1 catalog if message 50 is retained in the 6.1 catalog.
Try to retain obsolete messages as long as the release that they support is
still in use. If you are in doubt as to whether the release is still in service,
do not reuse the message number.</para>
<para>Even if you eventually delete a message from the catalog because the
corresponding software is totally obsolete, do not reuse the message number.
Reusing message numbers could cause the wrong error message to be issued for
an error condition. It is good practice to retire the message number, rather
than reusing it.</para>
</section>
<section>
<title>Adding and Changing Messages</title>
<para>   Adding new messages to a catalog is easy.
Simply assign an unused number to the message, add the proper message call
to the code, and add the message text and explanation text to the message
text file.</para>
<para>If you need to change a message from one release to the next, you can
do so by updating the message and the explanation in the message text file.
Be cautious when changing the wording of a message so that you do not change
the meaning. If you need to change the message in any significant way, create
a new message. This policy maintains the upward compatibility of the message
catalogs from release to release.</para>
</section>
</section>
</chapter>



<appendix id="Z110509011189howie">
<title>Guidelines for Messages and Explanations</title>
<para>A message consists of two parts: the message that is printed for the user each time the error occurs, and an expanded explanation of the error condition that appears in the message documentation, both online and in the printed manual.</para>
<para>The message and the explanation should both be clear, concise, and focused; however, the message and the explanation may speak to different audiences.</para>
<para>The message is directed to any user who might encounter the error that the message describes. It should contain a brief description of the problem in unambiguous terms.</para>
<para>The explanation is directed to the user who cannot resolve the error using only the information in the message. This user has sought additional information. The explanation should give a more complete description of the problem, suggest actions that will help resolve the problem, and direct the user to sources of information related to the problem and its resolution.</para>
<para>The following sections give guidelines for writing messages and for writing message explanations.</para>
<note><para>These guidelines are intended for Silicon Graphics/Cray Research software developers who are writing messages for code included in UNICOS, UNICOS/mk, and IRIX software releases. Others may want to follow the guidelines to improve the general usability of their messages and explanations. </para>
</note>
<section>
<title>Guidelines for Messages</title>
<para>A good message provides a user with specific information about the problem that the software has encountered. It conveys the context in which the problem occurred and, when possible, states the problem in a way that implicitly suggests a corrective action. A good message also is written with an awareness of the attitude that is expressed toward the user.</para>
<para>The challenge of writing good messages is conveying as much information as possible concisely. A good rule of thumb for messages is that users who are past the initial learning phase for a product should be able to recognize and correct the problem by using only the information in the message. The explanation exists for users who are new to the product.</para>
<para>Good messages demonstrate the following characteristics:<itemizedlist>
<listitem><para>Clearly stated</para>
</listitem>
<listitem><para>Specific about the problem</para>
</listitem>
<listitem><para>Respectful of users</para>
</listitem>
<listitem><para>Grammatically correct</para>
</listitem></itemizedlist></para>
<para>These characteristics are important for the usability of the messages
in English, and they also improve translatability.</para>
<section>
<title>Clear Messages</title>
<para> Clear messages state the problem as simply as possible without
the use of specialized terminology. A clear message is unambiguous in its
description of the problem.</para>
<para>Observe the following guidelines to make messages clear:<orderedlist><listitem><para>When describing a problem, use plain English instead of terms
familiar only to a limited audience (for example, UNIX system terminology).</para>
<para>For example, the following message is clear to a programmer familiar
with the <command sectionref="2">stat</command> system call, but it is not
clear to most users:<literallayout>Cannot stat file</literallayout></para>
<para>The following message is preferred:<literallayout>Cannot get the status (with stat(2)) of<newline>the '<replaceable>filename</replaceable>' file.</literallayout></para>
</listitem><listitem><para>Choose message syntax carefully. Avoid long strings
of modifiers.</para>
<para>For example, the following message:<literallayout>bad swap superblock magic number</literallayout></para>
<para>could be worded more clearly as follows:<literallayout>The checkword number in the swap superblock<newline>is incorrect.</literallayout></para>
</listitem><listitem><para>Use worded explanations rather than programming-language
expressions.</para>
<para>For example, the following message:<literallayout>end bp forw != NULL</literallayout></para>
<para>would be clearer if rewritten as follows:<literallayout>The I/O chain for the pty/tty device has<newline>failed an internal consistency check.</literallayout></para>
</listitem></orderedlist></para>
<para>Follow these principles wherever possible. Remember that users do not
know as much about the system, the program, or the origin of the error as
you do.</para>
</section>
<section>
<title>Specific Messages</title>
<para> Messages that are specific give users all of the information
needed to correct the problem. Observe the following guidelines to make messages
specific:<orderedlist><listitem><para>Identify the problem specifically, rather
than in a general sense.</para>
<para>For example, the following message is very vague:<literallayout>I/O error</literallayout></para>
<para>Instead, give information that is definite enough to point to a corrective
action.</para>
</listitem><listitem><para>Explain the problem from the user's perspective
rather than the system's perspective.</para>
<para>For example, the following message:<literallayout>No device response</literallayout></para>
<para>would be better stated as follows:<literallayout>Cannot access the device you selected.</literallayout></para>
</listitem><listitem><para>Include information specific to the situation.</para>
<para>Instead of the following message:<literallayout>Terminating job</literallayout></para>
<para>it would be better to write:<literallayout>Terminating job '<replaceable>job-identifier</replaceable>'.</literallayout></para>
</listitem><listitem><para>Include information pertinent to the solution of
the problem; do not force users to guess arbitrary limits.</para>
<para>The following message:<literallayout>Identifier too long</literallayout></para>
<para>would be better stated as follows:<literallayout>The identifier must consist of 14 characters<newline>or less.</literallayout></para>
</listitem></orderedlist></para>
</section>
<section>
<title>Respectful Messages</title>
<para> The message should respect users and the situation. Respect is
shown by adhering to guidelines, as follows.<orderedlist><listitem><para>State the problem neutrally or as a deficiency of the system rather than blaming
the user for the problem.</para>
<para>For example, the following message:<literallayout>Illegal expression '<replaceable>exp</replaceable>' has been specified<newline>in the input file</literallayout></para>
<para>could be stated more neutrally as follows:<literallayout>Cannot accept the expression '<replaceable>exp</replaceable>' in the<newline>input file.</literallayout></para>
</listitem><listitem><para>Avoid unnecessarily hostile, violent, or threatening
terminology. Terms such as <firstterm>catastrophic</firstterm>, <firstterm>abort</firstterm>, <firstterm>illegal</firstterm>, <firstterm>kill</firstterm>, <firstterm>abandon</firstterm>, and <firstterm>disastrous</firstterm> have a negative
effect on users. Rephrase messages containing such words to be more neutral
and less threatening.</para>
<para>It can be difficult to follow this guideline in situations in which
accepted UNIX terminology requires the use of a "hostile" word to provide
an accurate technical description of the situation. For example, UNIX uses
the term <firstterm>kill</firstterm> in a technical sense to describe forced
job termination. In such a situation, it may not be possible to avoid the
term. However, whenever it is within your control, avoid overly dramatic terminology.</para>
</listitem><listitem><para>Avoid introducing attempts at humor.</para>
<para>Humor in messages has many dangers. Everyone's idea of what is funny
differs, especially across cultures. Messages often occur repeatedly, and
the humor wears off quickly. Therefore, the best policy is to avoid making
messages humorous or cute.</para>
</listitem></orderedlist></para>
</section>
<section>
<title>Grammatical Messages</title>
<para> A grammatical message is phrased as a complete sentence, is punctuated according to standard usage, contains no truncated words, uses conventional spelling, and contains articles, auxiliary verbs, and prepositions as dictated by standard English usage. Messages written in standard English are less likely to be misinterpreted and can
be translated more accurately into foreign languages.</para>
<para>Observe the following guidelines to make messages grammatical:<orderedlist><listitem><para>Use capitalization in a standard way; start the message with a capital letter, and capitalize words and abbreviations as they would appear in narrative text.</para>
</listitem><listitem><para>Avoid beginning messages with a special character or a variable. Special characters and variables at the beginning of messages make them difficult to index.</para>
</listitem><listitem><para>Use punctuation in a standard way; include commas and semicolons when appropriate, and end the message with a period.</para>
</listitem><listitem><para>Observe Silicon Graphics trademark and style conventions when using industry terms. Consult a writer or editor if you have questions regarding style conventions.</para>
</listitem><listitem><para>Spell out words completely.</para>
<para>The space and time saved by writing <command>max</command> instead of <literal>maximum</literal> is not worth the lack of clarity it creates in the messages. Use only abbreviations that are very widely understood by users of Silicon Graphics/Cray Research systems. For example, it is sensible to use IOS and OWS in messages instead of I/O subsystem and operator workstation. However, it is inappropriate to use MTU for maximum transmission unit in a message whose audience is the end user.
</para>
</listitem><listitem><para>Write messages as complete sentences; include a verb and all the needed articles (a, an, the), prepositions, and auxiliary verbs.</para>
</listitem></orderedlist></para>
<para>The following example illustrates the intention of these guidelines.</para>
<para>The following message:<literallayout>read error</literallayout></para>
<para>would be more grammatical if phrased as follows:<literallayout>An error occurred during an attempt to read<newline>the '<replaceable>filename</replaceable>' file.</literallayout></para>
<para>The rewritten message is longer, but it is much less likely to be misunderstood or mistranslated. It is more specific, in addition to being more grammatically correct.</para>
</section>
<section>
<title>Severity Levels in Messages</title>
<para>  Each message issued to users should have a severity level associated with it. The severity level should indicate to users how important the message is to the success of the job. To help users assess the impact an error has on a job, it
is important that you use severity level designations in a consistent manner when you develop software.</para>
<para>The following guidelines apply to message severity levels:<itemizedlist>
<listitem><para>Indicate the message severity level in uppercase letters (for example, WARNING). Use of all uppercase letters calls attention to the severity
level.</para>
</listitem>
<listitem><para>Avoid the use of ERROR as a severity level. Messages that
users receive are commonly called <replaceable>error messages</replaceable>.
Therefore, to designate ERROR as a severity level is uninformative and creates
an ambiguity in phrases such as <firstterm>the error message manual</firstterm>.</para>
</listitem>
<listitem><para>If it does not conflict with third-party vendor constraints
on your code, try to restrict your use of severity levels to the following
set:<deflist id="Z849894018glen">
<colheads>
<head1>Level</head1><head2>Description</head2></colheads>
<deflistentry>
<term>INFO</term>
<listitem><para>The system is communicating information to users, usually
about the status of a job or process. An informational message requires no
user action because a problem was not encountered.</para>
</listitem></deflistentry>
<deflistentry>
<term>EFFICIENCY</term>
<listitem><para>An inefficient use of the software or the hardware is suspected.
Users should examine the code for a better way to perform the process.</para>
</listitem></deflistentry>
<deflistentry>
<term>CAUTION</term>
<listitem><para>A possible problem was detected. The output of the program
is still usable, but the results may not be what users expect.</para>
</listitem></deflistentry>
<deflistentry>
<term>WARNING</term>
<listitem><para>A probable problem was encountered. The program continues
to process from this point, but the output or the results are likely to be
incorrect.</para>
</listitem></deflistentry>
<deflistentry>
<term>FATAL</term>
<listitem><para>A definite problem was encountered. The output produced from
this point forward is unusable. Output may be suppressed after this point.</para>
<para>Use this level of message when a fatal error is encountered in the input,
rather than in the processing. If processing encounters an error that is terminal,
issue an unrecoverable error. For example, when a compiler encounters an error
in the program source it is compiling that renders further execution of the
program useless, issue a fatal error message. But, if the compiler program
itself encounters a situation in which it can no longer execute, perhaps because
of hardware or system software problems, issue an unrecoverable error.</para>
<para>Avoid the use of FATAL as a severity level when possible because, although
it is standard in some contexts, <replaceable>fatal</replaceable> is an inappropriate
word to use as a severity level because it is threatening and overused.</para>
</listitem></deflistentry>
<deflistentry>
<term>UNRECOVERABLE</term>
<listitem><para>An error has occurred that renders further processing impossible.
The program terminates immediately.</para>
<para>You should issue this level of message only once and terminate processing
immediately. See the description of FATAL for an example of the difference
between fatal and unrecoverable errors.</para>
</listitem></deflistentry>
</deflist></para>
</listitem></itemizedlist></para>
<para>These guidelines and suggested severity levels may not apply to all
situations. The most important point to remember is that users rely on the
message severity to indicate the nature of the problem. Be as consistent and
as accurate as possible with this information.</para>
</section>
<section>
<title>Substitutable Strings in Messages</title>
<para> Care should be taken to limit the type of
information substituted into messages. Only information that users supply
should be substituted into error messages. Examples of user-supplied information
include variable names, command-line options, and file names. Building messages
from other types of substitutable strings can be a serious impediment to a
correct translation.</para>
<para>Consider the following message:</para>
<para>Example 1:<literallayout>Cannot find the file '<replaceable>filename</replaceable>'.</literallayout></para>
<para>You also may want to apply this message to a situation in which two
file names are supplied by the user and neither is found. To cover this situation,
you should create a second message that is issued when two files are involved
in the error.</para>
<para>The second message might appear as follows:</para>
<para>Example 2:<literallayout>Cannot find the files '<replaceable>filename</replaceable>' and '<replaceable>filename</replaceable>'.</literallayout></para>
<para>An alternative in this situation would be to modify the first message
to accommodate errors on both one or two files. However, doing so would create
a potential for translation errors.</para>
<para>For example, consider the case where you change the message in example
1 to read as shown in example 3 in the message catalog:</para>
<para>Example 3:<literallayout>Cannot find the file%s '%s' %s '%s'.</literallayout></para>
<para>Then you replace the first string with <literal>s</literal> to make
the word <literal>file</literal> plural, replace the second string with a
file name, replace the third string with <command>and</command>, and replace
the fourth string with another file name.</para>
<para>The result would be a message that would appear to users to be identical
to example 2. However, the translator cannot determine which of the replaceable
strings is really a user variable and which is part of the message text. Also,
the pluralization of <literal>file</literal> by adding a trailing <literal>s</literal> is correct in English, but it would not be correct in most other
languages. The insertion of the connective <literal>and</literal> between
the file names might also be incorrect in the target language.</para>
<para>Because of the complexities involved in writing for translation, avoid
writing messages to appear in multiple contexts. If you must issue a message
that is a variation on the syntax of a similar message, write a new message
to cover the variation, rather than try to adjust the first message to accommodate
all cases.</para>
</section>
</section>
<section>
<title>Guidelines for Explanations</title>
<para>Message
explanations exist for the benefit of users who, upon receiving an error message,
cannot resolve the problem without the following additional information:<itemizedlist>
<listitem><para>A more complete description of the problem</para>
</listitem>
<listitem><para>A suggested course of action to solve the problem</para>
</listitem></itemizedlist></para>
<para>A good explanation contains both types of information. The most natural
way to format the information is to describe the problem in the first paragraph
of the explanation and recommend solutions in the second paragraph. In some
cases, more information will be given than comfortably fits in a paragraph.
Add additional paragraph breaks as needed.</para>
<para>The following sections discuss describing problems and solutions to
users in message explanations.</para>
<section>
<title>Describing the Problem</title>
<para> The message explanation provides
a more complete description of the problem than the message itself does. Include
the following information in the message description:<itemizedlist>
<listitem><para>Statement about the cause of the problem</para>
</listitem>
<listitem><para>Context surrounding the cause of the problem</para>
</listitem>
<listitem><para>System or job status affected by the problem</para>
</listitem>
<listitem><para>References to documentation discussing related topics</para>
</listitem></itemizedlist></para>
<para>The following message description states the cause of the problem clearly
and outlines the status of the job:</para>
<literallayout>The catalog specified for reset was not<newline>defined with the RECOVERABLE attribute.<newline>RESETCAT can reset only recoverable<newline>catalogs. The command is terminated. The<newline>catalog and CRA entries have not been<newline>altered. The workfile has not been defined.</literallayout>
<para>The description also could refer users to documentation on the <literal>RESETCAT</literal> command.</para>
</section>
<section id="Z242809240791cas">
<title>Describing the Solution</title>
<para> The solution
portion of the message explanation presents courses of action that users can
pursue in solving the problem. Many messages result from complex or unknown
causes. In these cases, users may have to test several conditions or try several
solutions before arriving at one that applies to the problem. Most users realize
that this is a fact of life. They do not expect a cure-all to be provided
in the message explanation. Rather, they are looking for somewhere to start
to solve the problem.</para>
<para>Include the following information in the message solution:<itemizedlist>
<listitem><para>Suggested problem remedies, listed in the order in which users
should try them.</para>
</listitem>
<listitem><para>Parameters, files, permissions, and other configuration information
that might be related to the problem. Instruct users to check these items.</para>
</listitem>
<listitem><para>Any steps needed to recover from the problem; for example,
if the problem requires that a component be restarted after the problem is
located, be sure to instruct the user to perform the restart.</para>
</listitem>
<listitem><para>Possible or likely consequences of various courses of action,
especially if those consequences are destructive. For example, if a suggested
action might damage or destroy data, you must point that out to users. Do
not assume that they know.</para>
</listitem>
<listitem><para>References to documentation that discusses utilities, procedures,
or configuration information needed to solve the problem.</para>
</listitem>
<listitem><para>Recommendation to seek help if the problem is not a user-level
error. In these cases, direct users to contact the system support staff and
state the purpose of the contact. The following phrase can be used in this
situation:<literallayout>If none of the suggested actions resolve<newline>the error condition, contact your system<newline>support staff and request that<newline><replaceable>fill in an action the support staff should perform</replaceable>.</literallayout></para>
</listitem></itemizedlist></para>
<para>The following paragraph is an example of the solution portion of a message
explanation:<literallayout>To recover a nonrecoverable catalog and its<newline>volumes, you must do a synchronized volume<newline>restore of all volumes owned by the catalog.<newline>If you have incorrectly specified the CATALOG<newline>parameter, correct the parameter. If CATALOG<newline><replaceable>dname</replaceable> was specified, correct the associated<newline>DLBL catalog name. Rerun the command.</literallayout></para>
<para>As with the messages themselves, make the explanations as clear and
specific as possible. Try to create a course of action for users that leads
to the resolution of the problem.</para>
</section>
</section>
</appendix>


<glossary>
<title>Glossary</title>
<glossentry><glossterm>catalog</glossterm>
<glossdef id="Z844440961howie"><para>The binary form of the message or explanation file.  There are two kinds of catalogs:  message catalogs and explanation catalogs.  The <literal>gencat</literal>(1) command produces the catalog from the output of the <literal>caterr</literal>(1) command. The <literal>-c</literal> option of <literal>caterr</literal> calls <literal>gencat</literal>(1) and generates a message or explanation catalog from a message text file in a single step.</para></glossdef>
</glossentry>
<glossentry><glossterm>explanation catalog</glossterm>
<glossdef id="Z844441458howie"><para>A binary file, produced by the <literal>gencat</literal>(1) command, that contains the text of UNICOS, UNICOS/mk, or IRIX error message explanations.  The user accesses and displays these explanations by using the <literal>explain</literal>(1) command.   For more information, see also the <literal>explain</literal>(1) man page.</para></glossdef>
</glossentry>
<glossentry><glossterm>group code</glossterm>
<glossdef id="Z844441625howie"><para>The name given to the catalog of messages for a product; it is a shorthand way to refer to the software products that share one message file.  The group code should consist of 2 to 6 alphanumeric characters; a maximum of 10 characters are allowed.  The group codes <literal>Local</literal>, <literal>local</literal>, and <literal>LOCAL</literal> and all group codes that begin with <literal>Z</literal> (uppercase only) are reserved for site use.</para></glossdef>
</glossentry>
<glossentry><glossterm>message catalog</glossterm>
<glossdef id="Z844442074howie"><para>A binary file produced by the <literal>gencat</literal>(1) command that contains the text of error messages as they are called from the software at run time.</para></glossdef>
</glossentry>
<glossentry><glossterm>message text file</glossterm>
<glossdef id="Z844442082howie"><para>The file that contains the source form of the messages and explanations.  A message text file can contain messages, formatted and unformatted explanations, and comments.</para></glossdef>
</glossentry>
</glossary>


</book></docbook>
