<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="91836">Understanding Access Control</TITLE><PARAGRAPH>Access control is at the heart of a trusted system. Access control allows the administrators to set up policies and accounts that allow each user to have full access to the files and resources he or she needs, but not to other information and resources not immediately necessary to perform assigned tasks.<INDEXTARGET ID="ch31"><!-- POSTPROCESSDATA: ch31|access control --></PARAGRAPH>
<PARAGRAPH>Under Trusted IRIX/CMW, There are two forms of access control: these are called Discretionary Access Control (DAC) and Mandatory Access Control (MAC). MAC is further divided into two interrelated subsystems, Mandatory Sensitivity and Mandatory Integrity.</PARAGRAPH>
<PARAGRAPH>The following topics are included:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="35613" TYPE="TITLE">&ldquo;Discretionary Access Control&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="22980" TYPE="TITLE">&ldquo;Access Control Lists&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="31222" TYPE="TITLE">&ldquo;Mandatory Access Control&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="48346" TYPE="TITLE">&ldquo;Using MAC Labels&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="35613">Discretionary Access Control</TITLE><PARAGRAPH>Discretionary Access Control (DAC)  is the name of the standard UNIX system of access permissions that allow the user to control access to files, directories, and other system resources. The owner of any file or other system object can control access to that object, even by those with equal or dominating clearances, by setting the DAC permissions. Additionally, Access Control Lists (ACLs) can be used to provide a finer granularity of control than is provided by the traditional permission bits.<INDEXTARGET ID="ch32"><!-- POSTPROCESSDATA: ch32|Discretionary Access Control (DAC) --><INDEXTARGET ID="ch33"><!-- POSTPROCESSDATA: ch33|DAC:Discretionary Access Control --><INDEXTARGET ID="ch34"><!-- POSTPROCESSDATA: ch34|IRIX permissions (DAC) --><INDEXTARGET ID="ch35"><!-- POSTPROCESSDATA: ch35|permissions (DAC) --><INDEXTARGET ID="ch36"><!-- POSTPROCESSDATA: ch36|DAC:permissions --></PARAGRAPH>
<PARAGRAPH>The significant difference between MAC and DAC is that DAC allows untrusted users to control access to their own files and change that access at will. The only user who can override those access decisions is the superuser (root). DAC fills an otherwise unmet need for system security at the personal level. Every file on the system is subject to both MAC and DAC. You must meet both MAC and DAC requirements to access a file.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Using Discretionary Access Control</TITLE><PARAGRAPH>Trusted IRIX/CMW divides permissions into three categories and users into three relative groups. The three categories of permissions are read, write, and execute. They are denoted as &ldquo;r&rdquo; for read, &ldquo;w&rdquo; for write, and &ldquo;x&rdquo; for execute in long listings of files. Read permission allows you to look at the contents of a file. Write permission allows you to make changes to or remove a file. Execute permission allows you to run the file as a command from your shell prompt.<INDEXTARGET ID="ch37"><!-- POSTPROCESSDATA: ch37|DAC:using --></PARAGRAPH>
<PARAGRAPH>To get a long listing, enter the <COMMAND>ls -l</COMMAND> command at your system prompt. Thise command shows you more information about the files in the directory than an ordinary listing. Along with the permission information, the <COMMAND>ls -l</COMMAND> command lists the owners of the files and the size of the files and the date they were last modified. Adding the  <CMDLINEOPT>-D</CMDLINEOPT> command-line option to ls displays the ACL for the file or directory as well.</PARAGRAPH>
<PARAGRAPH>The three relative groups are the owner of the file, the owner's group, and every other user. If you get a long listing of a directory, you see that the permissions field looks like this: <SCREENDISPLAY>-rw-r--r--</SCREENDISPLAY> Each character is separately significant in the permissions listing. Starting at the left, the first character is a dash. A dash in any place means that no permission is granted and the actions associated with that permission are denied. However, in the leftmost place, the contents of that space describes whether the file is a file, directory, or special device file. If there is a dash in that place, the file in question is an ordinary file. If it is a directory, a <SCREENDISPLAY>d</SCREENDISPLAY> appears in that space. If the file is a block special device file, a <SCREENDISPLAY>b</SCREENDISPLAY> appears in the space, and if the file is a character special device file, a <SCREENDISPLAY>c</SCREENDISPLAY> appears there. For more complete information, consult the <REFPAGE>ls</REFPAGE><REFPAGE>(1)</REFPAGE> reference page or the <FILENAME>/usr/include/sys/stat.h</FILENAME> file.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Directory Permissions </TITLE><PARAGRAPH>Directories use the same permissions as files, but that their meanings are slightly different. For example, read permission on a directory means that you can use the ls command to look at the contents of that directory. Write permission allows you to add, change, or remove files in that directory. (However, even though you may have write permission in that directory, you must also have write permission on the individual files to change or remove them, unless you own the directory.) Finally, execute permission on a directory allows you to use the <INDEXTARGET ID="ch38"><!-- POSTPROCESSDATA: ch38|directory permissions --><INDEXTARGET ID="ch39"><!-- POSTPROCESSDATA: ch39|DAC:directory permissions --><INDEXTARGET ID="ch310"><!-- POSTPROCESSDATA: ch310|permissions:directory --><COMMAND>cd</COMMAND> command to change directories into that directory.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="83092">File Permissions </TITLE><PARAGRAPH>The first series of three places in the permissions field describes the permissions for the owner of the file. Here is an example of a long listing for a file: <INDEXTARGET ID="ch311"><!-- POSTPROCESSDATA: ch311|file permissions --><INDEXTARGET ID="ch312"><!-- POSTPROCESSDATA: ch312|DAC:file permissions --><INDEXTARGET ID="ch313"><!-- POSTPROCESSDATA: ch313|permissions:file --></PARAGRAPH>
<EXAMPLE>
-rwx------+ 1 owner grp 6680 Apr 24 16:26 shell.script
</EXAMPLE>
<PARAGRAPH>The file is not a directory, so the first space is blank. The characters rwx indicate that the owner of the file, owner, has read, write, and execute permission on this file. The second series of three spaces describes permissions for the owner's group. In this case, the group is grp. Suppose permissions for this file were slightly different, like this: </PARAGRAPH>
<EXAMPLE>
-rwxr-x---+ 1 owner grp 6680 Apr 24 16:26 shell.script 
</EXAMPLE>
<PARAGRAPH>In this case, any member of the group grp could read or execute the file, but he or she could not change it or remove it. All members of group grp can share a pool of files that are individually owned. Through careful use of group read and write permissions, you can create a set of source files that are owned by one person, but any group member can work on them.</PARAGRAPH>
<PARAGRAPH>The third series of spaces provides for all other users on the system and is called the public permissions. </PARAGRAPH>
<PARAGRAPH>The plus sign (+) at the end of the permission string indicates that an ACL is in effect for this file. Use the <COMMAND>ls -D</COMMAND> command to view the ACL for the file. Complete discussion of Access Control Lists is found in the section titled <XREF IDREF="22980" TYPE="TITLE">&ldquo;Access Control Lists.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>On a large system with several groups, MAC labels do not provide the complete coverage desired. The individual groups can tailor their working set of files by using file permissions and ACLs to share some files. A file that is set to be readable by any user on the system is called publicly readable. Remember that even if DAC makes a file publicly readable, a user must still have appropriate MAC clearance to see the file.</PARAGRAPH>
<PARAGRAPH>Here is a long listing of the sample Projects directory: </PARAGRAPH>
<EXAMPLE>
total 410 
drw-------+ 1 owner grp 48879 Mar 29 18:10 critical 
-rw-r--r-- 1 owner grp 1063 Mar 29 18:10 meeting.notes 
-rw-rw-rw- 1 owner grp 2780 Mar 29 18:10 new.deal 
-rwxrwxrwx 1 owner grp 8169 Jun 7 13:41 new.items 
-rw-rw-rw- 1 owner grp 4989 Mar 29 18:10 outside.response 
-rw------- 1 owner grp 23885 Mar 29 18:10 project1 
-rw-r----- 1 owner grp 3378 Jun 7 13:42 saved_mail 
-rw-r--r-- 1 owner grp 2570 Mar 29 18:10 schedules 
-rwxrwxr-x+ 1 owner grp 6680 Apr 24 16:26 shell.script 
</EXAMPLE>
<PARAGRAPH>The files have varying permissions. Some can be read and written to  only by the owner, some can be read only by members of the owner's group, and some can be read, changed, or removed by anybody. The shell script can be executed publicly, subject to its ACL, and the <FILENAME>critical</FILENAME> directory is also subject to an ACL.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Changing Permissions </TITLE><PARAGRAPH>You change the permissions on a file by means of the <COMMAND>chmod</COMMAND> command. You can use <INDEXTARGET ID="ch314"><!-- POSTPROCESSDATA: ch314|changing:permissions --><INDEXTARGET ID="ch315"><!-- POSTPROCESSDATA: ch315|DAC:changing permissions --><INDEXTARGET ID="ch316"><!-- POSTPROCESSDATA: ch316|permissions:changing --><COMMAND>chmod </COMMAND>only to change files that you own. Generally, you use this command to protect files you want to keep secret or private, to protect private directories, and to grant permissions to files that need to be used by others. The command to restrict access to a file or directory to yourself only is: </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>chmod 600 </SCREENDISPLAY><VARIABLE>filename </VARIABLE>
<SCREENDISPLAY>chmod 700 </SCREENDISPLAY><VARIABLE>directoryname</VARIABLE><SCREENDISPLAY>&space;</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>Other permissions may be added by using the <COMMAND>chmod </COMMAND>command with the letter associated with the permission. For example, the command to add general write permission to a file is </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>chmod +w </SCREENDISPLAY><VARIABLE>filename </VARIABLE>
</EXAMPLE>
<PARAGRAPH>For more examples, see the <REFPAGE>chmod</REFPAGE><REFPAGE>(1)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>To set or change an ACL, use the <COMMAND>chacl</COMMAND> command:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>chacl</USERINPUT>  <VARIABLE>acl_entry</VARIABLE>  [, <VARIABLE>acl_entry</VARIABLE> ] ...
</EXAMPLE>
<PARAGRAPH>For more information on <REFPAGE>chacl</REFPAGE> and the acl entry syntax, see the <REFPAGE>chacl(1) </REFPAGE> reference page and the section of this chapter titled <XREF IDREF="79093" TYPE="TITLE">&ldquo;Text Form Representation of ACLs.&rdquo;</XREF></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Setting Permissions with umask </TITLE><PARAGRAPH>You can assign default permissions to your files by using  the <INDEXTARGET ID="ch317"><!-- POSTPROCESSDATA: ch317|permissions:umask --><INDEXTARGET ID="ch318"><!-- POSTPROCESSDATA: ch318|DAC:umask --><INDEXTARGET ID="ch319"><!-- POSTPROCESSDATA: ch319|umask --><COMMAND>umask</COMMAND> command. Place this command in your<FILENAME>&space;.cshrc</FILENAME>,<FILENAME>&space;.profile</FILENAME>, or<FILENAME>&space;.login</FILENAME> file. The <REFPAGE>umask</REFPAGE><REFPAGE>(1)</REFPAGE> reference page is also available for more information. By changing the setting of your <COMMAND>umask</COMMAND>, you can alter the default permissions on your files and directories to any available DAC permission.</PARAGRAPH>
<PARAGRAPH>A drawback to the <COMMAND>umask</COMMAND> command is that it makes every file you create receive the same permissions. For most purposes, you want the files you create to be accessible by the members of your group. For example, if an individual is suddenly called away and another person must take over that person's portion of a project, the source files must be accessible by the new user. However, the personal files you keep in your home directory sometimes need to be private, and if you set your umask to allow group read and write privileges, any member of the group can access your personal files. Mechanisms are available to prevent this access. For example, you can create a directory of private files and alter the permissions on that directory with the <COMMAND>chmod</COMMAND> command to restrict all but your own access. Then it would not matter that the files were readable, because no other user would be allowed into the directory.</PARAGRAPH>
<PARAGRAPH>You can also use the <COMMAND>find</COMMAND> command to change all the files in your home directory to your chosen permission automatically at your convenience. You can set up your account so that this action happens every time you log out.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>umask</COMMAND> command is an important part of DAC. It allows us to maintain security and still allow convenient access to your files. To set your account up to allow group read and write privileges and no other privileges, place this line in your <FILENAME>.cshrc</FILENAME> or <FILENAME>.profile</FILENAME> file: </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>umask 007 </SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>This will make every file you create have the following permissions: </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>-rw-rw----</SCREENDISPLAY>&space;
</EXAMPLE>
<PARAGRAPH>With your umask set to 007, directories that you create have the following permissions: </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>drwxrwx--- </SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>In plainer terms, you will have full use of the file or directory, and your group will have full use. No other user, except the superuser (root), will have access to your files.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22980">Access Control Lists</TITLE><PARAGRAPH>Access Control Lists (ACLs) are a part of the DAC features of your Trusted IRIX/CMW system. An ACL works in the same way as standard file permissions, but it allows you to have a finer level of control over whom may access a file or directory than standard permissions allow. ACLs allow you to specify file permissions on a user by user basis.</PARAGRAPH>
<PARAGRAPH>Every system file or directory has  an ACL that governs its discretionary access. This ACL is referred to as the access ACL for the file or directory. In addition, a directory may have an associated ACL that governs the initial access  for files and subirectories created within that directory. This ACL is referred to as a default ACL. A user who wishes to gain access to the files in a directory must be on both ACLs  and must be allowed by MAC and Trusted IRIX standard file permissions to successfully gain access. If you have not created an access ACL for a file, the default ACL serves both ACL functions. Note that the ACL on a file or directory also acts as an upper limit to the file permissions that can be set automatically with <COMMAND>umask</COMMAND>.</PARAGRAPH>
<PARAGRAPH>Hereafter in this section, directories are treated as files, and where the term file is used, consider it to also apply to directories. </PARAGRAPH>
<PARAGRAPH>An ACL is stored in the same way that standard file permissions are stored; as an attribute of the file or directory. To view the ACL of a file, use the  <CMDLINEOPT>-D</CMDLINEOPT> option to<COMMAND>&space;ls</COMMAND> as shown here:</PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>ls -D </SCREENDISPLAY>/usr/people/ernie/testfile 
</EXAMPLE>
<PARAGRAPH>This produces output similar to this:</PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>testfile [u::rwx,g::rw-,o::---,u:332:r--,u:ernie:rw--,m::rw-</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>The above example shows  full permissions for the owner with the first entry on the line, sets read permission for user ID 332 with the second entry, and sets read and write permission for the user account ernie.  The format of an ACL entry is discussed in the section titled <XREF IDREF="79093" TYPE="TITLE">&ldquo;Text Form Representation of ACLs.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>To set or change an ACL, use the <COMMAND>chacl</COMMAND> command:</PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>chacl  </SCREENDISPLAY><VARIABLE>acl_entry</VARIABLE><SCREENDISPLAY>[,</SCREENDISPLAY><VARIABLE>acl_entry</VARIABLE><SCREENDISPLAY>]...</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>An ACL consists of a set of ACL entries.  An ACL entry specifies the access permissions on the associated file for an individual user or a group of users.  The order of internal storage of entries within an ACL does not affect the order of evaluation. In order to read an ACL from an object, a process must have read access to the file. In order to create  or change an ACL , the process must own the file. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Setting Directory Default ACLs With chacl</TITLE><PARAGRAPH>To set a default ACL for the current directory and all its files and subdirectories, use this command:</PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>chacl -d  </SCREENDISPLAY><VARIABLE>acl_entry</VARIABLE><SCREENDISPLAY>[,</SCREENDISPLAY><VARIABLE>acl_entry</VARIABLE><SCREENDISPLAY>]...</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>For information on the format of an ACL entry, see the section titled <XREF IDREF="79093" TYPE="TITLE">&ldquo;Text Form Representation of ACLs.&rdquo;</XREF></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="79093">Text Form Representation of ACLs</TITLE><PARAGRAPH>This section defines the long and short text forms of ACLs. The long text form is defined first in order to give a complete specification with no exceptions. The short text form is defined afterwards because it is specified relative to the long text form.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="83037">Long Text Form for ACLs</TITLE><PARAGRAPH>The long text form is used for either input or output of ACLs and is defined as follows:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>acl_entry</VARIABLE>[,<VARIABLE>acl_entry</VARIABLE> ]...
</EXAMPLE>
<PARAGRAPH>Although it is acceptable to place more than one entry on a physical line in a file, placing only one entry per line makes it easier to read. </PARAGRAPH>
<PARAGRAPH>Each entry contains one ACL statement with three required colon-separated fields and an optional comment:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>entry tag type</VARIABLE>:<VARIABLE>entry qualifier</VARIABLE>:<VARIABLE>discretionary access permissions</VARIABLE> # <VARIABLE>comment</VARIABLE>&space;
</EXAMPLE>
<PARAGRAPH>Comments may be included with any entry. If a comment starts at the beginning of a line, then the entire line is interpreted as a comment. The first field must always contain the ACL entry tag type.</PARAGRAPH>
<PARAGRAPH>One of the following ACL entry tag type keywords must appear in the first field:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><VARIABLE>user</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>A  <VARIABLE>user</VARIABLE> ACL entry specifies the access granted to either the file owner or to a specified user account.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>group</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>A  <VARIABLE>group</VARIABLE> ACL entry specifies the access granted to either the file-owning user group or to a specified user group.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>other</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>An  <VARIABLE>other</VARIABLE> ACL entry specifies the access granted to any process that does not match any user,  group, or implementation-defined ACL entries.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>mask</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>A  <VARIABLE>mask</VARIABLE>  ACL entry specifies the maximum access that can be granted by any ACL entry except the  user  entry for the file owner and the  <VARIABLE>other</VARIABLE>  entry.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>The second field contains the ACL entry qualifier (referred to in the remainder of this section as simply <ITALICS>qualifier</ITALICS>).</PARAGRAPH>
<PARAGRAPH>The following qualifiers are defined by default:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><VARIABLE>uid</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>This qualifier specifies a user account name or a user ID number.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>gid</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>This qualifier specifies a user group name or a group ID number.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><VARIABLE>empty</VARIABLE></HANGITEM>
<HANGBODY><PARAGRAPH>This qualifier specifies that no  <VARIABLE>uid</VARIABLE>  or  <VARIABLE>gid</VARIABLE>  information is to be applied to the ACL entry. The entry applies to the file owner only. An  empty  qualifier is represented by an empty string or by white space.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>The third field contains the discretionary access permissions that are to apply to the user or group specified in the first field.  The following symbolic discretionary access permissions are recognized in ACLs:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>read access</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>write access</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>execute/search access</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>no access</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The discretionary access permissions field must  contain exactly one each of the following characters in the following order:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>&space;r </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>w </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>x </PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>This would appear as <SCREENDISPLAY>rwx</SCREENDISPLAY>. Any or all of these may be replaced by a dash (-), which is the no-access character.</PARAGRAPH>
<PARAGRAPH>A user entry with an empty qualifier specifies the access granted to the file owner. A  user entry with a <VARIABLE>uid</VARIABLE> qualifier  specifies  the access permissions granted to the user name matching the <VARIABLE>uid</VARIABLE> value. If the <VARIABLE>uid</VARIABLE> value does not match a user name, then the ACL entry  specifies the access permissions granted to the user ID matching the <VARIABLE>uid</VARIABLE> value.</PARAGRAPH>
<PARAGRAPH>A group entry with an empty qualifier specifies the access granted to the default user group of the file owner. A group entry with a <VARIABLE>gid</VARIABLE> qualifier specifies the access permissions granted to the group name matching the <VARIABLE>gid</VARIABLE> value. If the <VARIABLE>gid</VARIABLE> value does not match a group name, then the ACL entry specifies the access permissions granted to the group ID matching the <VARIABLE>gid</VARIABLE> value. The  <VARIABLE>mask</VARIABLE>  and  other entries contain an  empty  qualifier. A pound sign (#) starts a comment on an ACL entry. A comment may start at the beginning of a line, or after the required fields and after any custom-defined, colon-separated fields. The end of the line denotes the end of the comment. </PARAGRAPH>
<PARAGRAPH>If an ACL entry contains permissions that are not also contained in the  <VARIABLE>mask</VARIABLE>  entry, then the output text form for that entry  must be displayed as described above followed by a pound sign (#), the  string <SCREENDISPLAY>effective:</SCREENDISPLAY> , and the effective file access permissions for that ACL entry. </PARAGRAPH>
<PARAGRAPH>White space is permitted (but not required) in the entries as follows:  </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>at the start of the line</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>immediately before and after a colon (:)  separator</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>immediately before  the first pound sign (#) comment character</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>at any point after the first pound sign (#) comment character. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Comments have no effect on the discretionary access check of the object with which they are associated. </PARAGRAPH>
<PARAGRAPH>Here is an example of a correct long text form ACL for a file:</PARAGRAPH>
<CODE>
<SCREENDISPLAY>user::rwx,user:332:r--,user:ernie:rw- </SCREENDISPLAY>
</CODE>
<PARAGRAPH>The above example sets full permissions for the owner with the first entry on the line, sets read permission for user ID 332 with the second entry, and sets read andwrite permission for the user account ernie. </PARAGRAPH>
<PARAGRAPH>Here are some examples with comments:</PARAGRAPH>
<CODE>
group:10:rw- # User Group 10 has read/write access
other::--- # No one else has any permission
mask::rw- # The maximum permission except for the owner is read/write
</CODE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Short Text Form for ACLs</TITLE><PARAGRAPH>The short text form is used only for input of ACLs and is defined as follows:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>acl_entry</VARIABLE>[,<VARIABLE>acl_entry</VARIABLE> ]...
</EXAMPLE>
<PARAGRAPH>Although it is acceptable to place more than one entry on a physical line in a file, placing only one entry per line makes it easier to read. </PARAGRAPH>
<PARAGRAPH>Each line  contains one ACL entry, as defined in <XREF IDREF="83037" TYPE="TITLE">&ldquo;Long Text Form for ACLs&rdquo;</XREF> with two exceptions. The ACL entry tag type keyword must appear in the first field in either its full unabbreviated form or its single-etter abbreviated form.</PARAGRAPH>
<PARAGRAPH>The abbreviation for user  is <SCREENDISPLAY>u</SCREENDISPLAY>, the abbreviation for  group is <SCREENDISPLAY>g</SCREENDISPLAY>. The abbreviation for  other is <SCREENDISPLAY>o</SCREENDISPLAY>, and the abbreviation for mask is <SCREENDISPLAY>m</SCREENDISPLAY>.</PARAGRAPH>
<PARAGRAPH>There are no exceptions for the second field in the short text form for ACLs. The discretionary access permissions must appear in the third field in either absolute symbolic form or relative symbolic form.</PARAGRAPH>
<PARAGRAPH>The relative symbolic form must be preceded by a plus sign (+) to indicate additional access or a caret (^) to indicate that access is to be removed. The relative symbolic string must be at least one character.</PARAGRAPH>
<PARAGRAPH>The symbolic string contains at most one each of the following characters in any order:  </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>r </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>w </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>x </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For example, the short form should look very similar to the following:</PARAGRAPH>
<CODE>
u: :rwx # The file owner has complete access
u:332:+r # User Acct 332 has read access only
g:10:rw- # User Group 10 has read/write access
u:653:^w # User Acct 653 (who is in group 10) has read access only
o::--- # No one else has any permission
m::rw- # The maximum permission except for the owner is read/write
<XREFTARGET ID="97858">casey:all=:all+eip
</CODE>
<EXAMPLE>
<SCREENDISPLAY>chcap CAP_AUDIT_WRITE,CAP_AUDIT_CONTROL,CAP_KILL+eip </SCREENDISPLAY>
</EXAMPLE>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="31222">Mandatory Access Control</TITLE><PARAGRAPH>One of the new features in Trusted IRIX/CMW and in B-level trusted systems that is not available in standard IRIX is Mandatory Access Control (MAC). MAC is essentially different from DAC in that the restrictions placed on file and resource access are not up to the discretion of the individual user, but are mandatory for all users. The system enforces MAC through the security labels of all files, programs, resources, and processes (including user processes) on the system. The concept of label domination and equivalence is used to make MAC decisions. After the sections describing the subdivisions of MAC, there is a section describing the rules of label domination and equivalence.</PARAGRAPH>
<PARAGRAPH>MAC is divided into two parts, Mandatory Sensitivity and Mandatory Integrity. These two concepts work in concert to provide a trusted environment for the users.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="62226">Mandatory Sensitivity</TITLE><PARAGRAPH>Mandatory Sensitivity (MSEN) is a mechanism for implementing strict controls on access to data. A privileged user can never give information protected by Mandatory Sensitivity to someone who is not allowed to see it. Under DAC, a user can change a file's permissions so that any user can read, write, or execute the file. This system provides a good level of security in an open system but does not provide the level of security needed by Trusted IRIX/CMW. MSEN works in addition to DAC to provide an extra level of security.<INDEXTARGET ID="ch320"><!-- POSTPROCESSDATA: ch320|sensitivity:mandatory --><INDEXTARGET ID="ch321"><!-- POSTPROCESSDATA: ch321|mandatory sensitivity --></PARAGRAPH>
<PARAGRAPH>MSEN defines two different kinds of permissions. One kind is for the user and the user's login shell process; the other is for system objects, such as files. The first kind of permission, for users and processes, is called a clearance. A clearance permits a user or the user's process to use system objects with corresponding classifications. All of the processes that run on behalf of a user must be within the user's clearance.</PARAGRAPH>
<PARAGRAPH>Each clearance for a user and the processes associated with that user contain a level of clearance, such as confidential or proprietary. Each user's clearance can also be valid in a number of categories. These categories are used to divide files and information logically by relationship. For example, all development files could be in the category <INDEXTARGET ID="ch322"><!-- POSTPROCESSDATA: ch322|MSEN:clearances --><INDEXTARGET ID="ch323"><!-- POSTPROCESSDATA: ch323|clearance --><INDEXTARGET ID="ch324"><!-- POSTPROCESSDATA: ch324|MSEN:classifications --><INDEXTARGET ID="ch325"><!-- POSTPROCESSDATA: ch325|classifications --><INDEXTARGET ID="ch326"><!-- POSTPROCESSDATA: ch326|MSEN:categories --><INDEXTARGET ID="ch327"><!-- POSTPROCESSDATA: ch327|categories --><INDEXTARGET ID="ch328"><!-- POSTPROCESSDATA: ch328|MAC:labeling --><INDEXTARGET ID="ch329"><!-- POSTPROCESSDATA: ch329|labeling --><INDEXTARGET ID="ch330"><!-- POSTPROCESSDATA: ch330|permissions --><INDEXTARGET ID="ch331"><!-- POSTPROCESSDATA: ch331|MAC:permissions --><ITALICS>ENGR</ITALICS> and all personnel files could be in the category <ITALICS>HR</ITALICS>. A user with clearance in the <ITALICS>ENGR</ITALICS> category would not necessarily have clearance in the <ITALICS>HR</ITALICS> category, even if the two categories are currently running at the same classification. The number and names of your clearances and categories are configurable at any time.</PARAGRAPH>
<PARAGRAPH>The combination of clearance and categories forms the MSEN label of a user or a user's process, while the combination of classification and category forms the MSEN label of an object.</PARAGRAPH>
<PARAGRAPH>An object (a file or system resource) is classified at a level of protection based on the judgment of some person. It is also defined to be in some number of categories. For example, employee salary records could be classified as top secret and in the categories HR, management, and finance. Thus, a user who is cleared for top secret data in the categories of HR, management, and finance could view the data, but a user cleared only to the level of secret could not. A user cleared to top secret in another category, such as ENGR, also could not view the information. To view information that has categories, you must also be cleared for the same or a strict superset of categories. For example a user cleared to top secret in only one category in our example, say finance, could not view the employee salary information.</PARAGRAPH>
<PARAGRAPH>For a person to access a secret file about employee records, the user must be cleared for both that level of secrecy and the category of information. Users cleared to levels higher than the level of a given file can also view the file. For example, a user cleared for top secret information can read a secret file, provided that the user is cleared in the proper category.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38187">Mandatory Integrity</TITLE><PARAGRAPH>The Mandatory Integrity (MINT) system protects important users from files of questionable integrity. Until a program has been certified to be free of security risks, important users should not be allowed to execute it. Mandatory integrity enforces this restriction.<INDEXTARGET ID="ch332"><!-- POSTPROCESSDATA: ch332|mandatory integrity (MINT) --><INDEXTARGET ID="ch333"><!-- POSTPROCESSDATA: ch333|MINT:(mandatory integrity) --></PARAGRAPH>
<PARAGRAPH>The MINT mechanism allows read and execute access only to those processes whose integrity labels are dominated by the object (meaning that the file or program has equal or greater integrity than the user process). Additionally, a process may only write to an object with the same integrity. This is to avoid reducing the integrity of a file by a user with lower integrity.</PARAGRAPH>
<PARAGRAPH>Mandatory Integrity is similar to MSEN in design and implementation, but addresses different issues and threats. While MSEN prevents a user from accessing information that is too sensitive or secret for the user's clearance, MINT prevents a user from accessing information or programs that are of unknown or lower quality or security. For example, a user running at the highest possible clearance who has access to the most secret and important system resources should not be allowed to run every program found on the system. Such a user should be permitted to execute only programs of known good integrity. This step further prevents Trojan Horse attacks on the system.</PARAGRAPH>
<PARAGRAPH>Consider the following scenario: A malicious intruder gains access to the system but only at the lowest level. This person creates a program to remove or publish certain system files and leaves the program in a public directory, calling it run.me. If a high-clearance user finds the file and executes it, serious damage could result. The solution is for the system to attach an integrity label to each file, indicating the known security of the file. A file created by a low-clearance user, such as our intruder, would automatically get a low-integrity label from the system. Any user with higher clearance would not see the low-integrity file when listing the directory contents, and any attempt to run the program would be denied access. Then, the auditor or system administrator would be notified of the denied access through the system audit trail, and the program could be safely removed.</PARAGRAPH>
<PARAGRAPH>Remember that a user's integrity requirement does not prohibit accessing files of greater integrity, only those of lower integrity.</PARAGRAPH>
<PARAGRAPH>MINT divides the objects of the system into divisions and assigns each file and resource a grade. MINT divisions need not be related to the categories used by MSEN on your system. For example, MINT divisions could be programming tools, general utilities, and administrative utilities. Thus, a user who has a MSEN clearance for ENGR might have a MINT requirement in programming tools, and in general utilities, but not in administrative utilities.<INDEXTARGET ID="ch334"><!-- POSTPROCESSDATA: ch334|grades --><INDEXTARGET ID="ch335"><!-- POSTPROCESSDATA: ch335|divisions --><INDEXTARGET ID="ch336"><!-- POSTPROCESSDATA: ch336|MINT:divisions --><INDEXTARGET ID="ch337"><!-- POSTPROCESSDATA: ch337|MINT:grades --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Label Domination and Equivalence</TITLE><PARAGRAPH>The concept of label domination and equivalence is central to MAC. If a user's label clearance is higher than a file's label classification and the integrity grade on the label of the file is good enough for the user's label, the user's label is said to dominate the file's label. If the clearance and classification on both labels are equal, the labels are said to be equal. A user's label must be at least equal to or must dominate an object's label in order to access the object.<INDEXTARGET ID="ch338"><!-- POSTPROCESSDATA: ch338|label domination and equivalence --><INDEXTARGET ID="ch339"><!-- POSTPROCESSDATA: ch339|equivalence of labels --><INDEXTARGET ID="ch340"><!-- POSTPROCESSDATA: ch340|domination of labels  --><INDEXTARGET ID="ch341"><!-- POSTPROCESSDATA: ch341|definition:of label relationships --></PARAGRAPH>
<PARAGRAPH>When you add categories to MAC, you change the order of dominance on your system. In order to dominate, a user's label must have the same or higher sensitivity and a set of approved categories that are the same as or a superset of the categories of the file's label, and the integrity requirement for the user must be met by the file. Also, the integrity divisions of the user must be the same or a superset of the integrity divisions of the file.</PARAGRAPH>
<PARAGRAPH><XREF IDREF="64450" TYPE="TABLE">Table&nbsp;3-1</XREF> lists possible label relationships using the default labels supplied with your system. In the table, the levels of sensitivity are unclassified, proprietary, and company sensitive. The categories are green, gray, and gold. The integrity grades are good, choice, and prime. The integrity divisions are cake, cookie, and cracker. The labels are written in the form of sensitivity level-categories, integrity grade-divisions.<INDEXTARGET ID="ch342"><!-- POSTPROCESSDATA: ch342|sample label relationships --><INDEXTARGET ID="ch343"><!-- POSTPROCESSDATA: ch343|label relationships:sample table  --></PARAGRAPH>
<PARAGRAPH>&space;</PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="3-1"><PREFIX>Table 3-1 </PREFIX><XREFTARGET ID="64450">Sample Label Relationships</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="85"><PARAGRAPH>Subject Label</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>Object Label</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>Dominates?</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Explanation</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/good </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified/prime </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Clearance 
dominated; 
integrity dominated</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified/good</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>No</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Integrity of the file 
not good enough</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary,green/ 
good </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>unclassified-green/
 good </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Clearance 
dominates; 
categories equal; 
integrity equal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary,green/&lbreak;prime,cake</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary-green/&lbreak;prime,cake, cookie,&lbreak;cracker</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>Yes</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Clearances identical&lbreak;integrity divisions&lbreak;dominate</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary/green,&lbreak;prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>company </PARAGRAPH>
<PARAGRAPH>sensitive,green/ </PARAGRAPH>
<PARAGRAPH>prime</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>No </PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>&space;Object 
classification higher 
than user clearance</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary,green/,</PARAGRAPH>
<PARAGRAPH>prime</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary,green,</PARAGRAPH>
<PARAGRAPH>gray/prime-cake,</PARAGRAPH>
<PARAGRAPH>cookie </PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>No</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Categories not </PARAGRAPH>
<PARAGRAPH>equal or dominated</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary,green,</PARAGRAPH>
<PARAGRAPH>gray/ </PARAGRAPH>
<PARAGRAPH>prime,cake,cookie</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary,green,</PARAGRAPH>
<PARAGRAPH>gray/prime,-cake,</PARAGRAPH>
<PARAGRAPH>cookie</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>&space;Yes</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Categories equal; </PARAGRAPH>
<PARAGRAPH>integrity equal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="85"><PARAGRAPH>proprietary,green,</PARAGRAPH>
<PARAGRAPH>gray,gold/choice </PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="85"><PARAGRAPH>proprietary,green,</PARAGRAPH>
<PARAGRAPH>gray/prime</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="85"><PARAGRAPH>Yes </PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="85"><PARAGRAPH>Categories </PARAGRAPH>
<PARAGRAPH>dominated; </PARAGRAPH>
<PARAGRAPH>integrity dominated</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<SECTION3 LBL="" HELPID = ""><TITLE>Wildcard Labels </TITLE><PARAGRAPH>Wildcard labels are special labels for system objects that are always equal to the label of any user process or other system subject that attempts access. For example, many system networking services are implemented through wildcard labels, so that all users can access the service. For example, the /dev/null device has a wildcard label.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="48346">Using MAC Labels</TITLE><PARAGRAPH>While using Trusted IRIX/CMW, you must change your security label from time to time (if you are cleared for more than one label). You must also change the security label of a file from time to time and you must frequently check the label of a file or resource. There is a group of commands that allow you to perform these activities easily.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Changing Your Security Label</TITLE><PARAGRAPH>Sometimes you will find it necessary to run a program or other process at a label different from your current login label. For example, the process may require a lower integrity requirement or a higher clearance. The <INDEXTARGET ID="ch344"><!-- POSTPROCESSDATA: ch344|running a process at a new label --><INDEXTARGET ID="ch345"><!-- POSTPROCESSDATA: ch345|MAC:changing to a new label --><INDEXTARGET ID="ch346"><!-- POSTPROCESSDATA: ch346|changing:to a new label --><INDEXTARGET ID="ch347"><!-- POSTPROCESSDATA: ch347|newlabel(1) --><COMMAND>newlabel</COMMAND> command allows you to run a process at a different label.</PARAGRAPH>
<PARAGRAPH>To prevent inappropriate transfers or disclosures of information, all open file descriptors associated with your login shell process are closed before the new process is invoked. This assures that information at a higher classification will not be used as any input to the new process, which may be running at a lower clearance. The default new process is your default command shell, as specified in your environment.</PARAGRAPH>
<PARAGRAPH>Remember that you can execute newlabel only with a specified clearance up to the maximum allowed for your login account. For complete information about newlabel, consult the <REFPAGE>newlabel</REFPAGE><REFPAGE>(1)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>To execute this command, enter: </PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>newlabel l</SCREENDISPLAY><VARIABLE>abel command</VARIABLE><SCREENDISPLAY>&space;</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>&space;<ITALICS>label</ITALICS> is the new security label you want and <ITALICS>command</ITALICS> is the command to be run at the new label. Assuming the label you have chosen is within your label range, the label is changed immediately for the duration of the command. Remember that only root (the superuser) can use <COMMAND>newlabel</COMMAND> to run a shell.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Changing the Label of a File</TITLE><PARAGRAPH>You are allowed to change the label of any file or program you own, so long as you only upgrade the sensitivity label of the file or downgrade the integrity label. That is, the new label cannot be less sensitive or of higher integrity than the old label. What Trusted IRIX/CMW does when you change the label is to make a copy of the file at the new label, thus allowing the system administrator to undo your change, if necessary. When you make the change, the new label of the file must be equal to the current label of the user attempting the change. Use the <COMMAND>chlabel</COMMAND> command like this:</PARAGRAPH>
<EXAMPLE>
<SCREENDISPLAY>chlabel </SCREENDISPLAY><VARIABLE>label filename</VARIABLE><SCREENDISPLAY>&space;</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH><ITALICS>filename</ITALICS> is the name of the file to be changed and <ITALICS>label</ITALICS> is the new label for the file. The <COMMAND>chlabel</COMMAND> command allows you only to change the label to a label within your clearance range. Remember that the label of the directory that contains the file will not be changed, making future deletion or modification of the file impossible without administrator intervention. It is generally better to upgrade whole directories than individual files.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Determining the Label of a File</TITLE><PARAGRAPH>The <CMDLINEOPT>-M</CMDLINEOPT> flag to the <COMMAND>ls</COMMAND> command displays the security labels for all files and subdirectories in the directory being listed. Note however, that only those files with labels dominated by your current label will appear in any directory listing, with or without the <CMDLINEOPT>-M</CMDLINEOPT> flag. If you ever find yourself in a situation where a file seems to have &ldquo;disappeared&rdquo;, check your label and make certain that the label of the file in question is dominated by your label.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Multilevel Directories</TITLE><PARAGRAPH>Directories are subject to MAC just as any text file or other resource. Most directories have labels that are identical to any file label. The exceptions are called multilevel directories (which are sometimes called moldy directories or mld).<INDEXTARGET ID="ch348"><!-- POSTPROCESSDATA: ch348|multilevel directories --><INDEXTARGET ID="ch349"><!-- POSTPROCESSDATA: ch349|mld --><INDEXTARGET ID="ch350"><!-- POSTPROCESSDATA: ch350|moldy directories --></PARAGRAPH>
<PARAGRAPH>An mld places the files from each label into multiple hidden subdirectories. Thus, user A at label Q will get a different listing of the contents of the mld from user B at label X. However, neither process will see the subdirectory structure. Each process sees only those files in the mld that have the same label as the process.</PARAGRAPH>
<PARAGRAPH>The hidden subdirectories in an mld are visible to a user process that has a moldy label. A user may spawn a process with a moldy label using the <CMDLINEOPT>-m</CMDLINEOPT> option of the <COMMAND>newlabel</COMMAND> command. </PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
