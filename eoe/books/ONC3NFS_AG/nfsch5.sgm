<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="5"><TITLE><XREFTARGET ID="33151">Maintaining ONC3/NFS</TITLE><PARAGRAPH>This chapter provides information about maintaining ONC3/NFS. It explains how to change the default number of NFS daemons and modify automatic mounter maps. It also gives suggestions for using alternative mounting techniques and avoiding mount point conflicts. It also describes how to modify and delete CacheFS file systems.</PARAGRAPH>
<PARAGRAPH>This chapter contains these sections:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="19336" TYPE="TITLE">&ldquo;Changing the Number of NFS Server Daemons&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="32184" TYPE="TITLE">&ldquo;Temporary NFS Mounting&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="16397" TYPE="TITLE">&ldquo;Modifying the Automatic Mounter Maps&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="12303" TYPE="TITLE">&ldquo;Mount Point Conflicts&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="15082" TYPE="TITLE">&ldquo;Modifying CacheFS File System Parameters&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="19472" TYPE="TITLE">&ldquo;Deleting a CacheFS File System&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19336">Changing the Number of NFS Server Daemons</TITLE><PARAGRAPH>Systems set up for NFS normally run four <INDEXTARGET ID="nfsch51"><!-- POSTPROCESSDATA: nfsch51|<ITALICS>nfsd</ITALICS> daemon --><INDEXTARGET ID="nfsch52"><!-- POSTPROCESSDATA: nfsch52|server:daemons --><INDEXTARGET ID="nfsch53"><!-- POSTPROCESSDATA: nfsch53|client:performance --><COMMAND>nfsd</COMMAND> daemons. <COMMAND>nfsd</COMMAND> daemons, called NFS server daemons, accept RPC calls from clients. Four NFS server daemons might be inadequate for the amount of NFS traffic on your server. Degraded NFS performance on clients is usually an indication that their server is overloaded.</PARAGRAPH>
<PARAGRAPH>To change the number of NFS server daemons, create the file <INDEXTARGET ID="nfsch54"><!-- POSTPROCESSDATA: nfsch54|<ITALICS>/etc/config/nfsd.options</ITALICS> file --><FILENAME>/etc/config/nfsd.options </FILENAME>on the server if it doesn't already exist and specify the number of daemons to start at system startup. For example, to have the <COMMAND>/etc/init.d/network</COMMAND> script start eight <ITALICS>nfsd</ITALICS>&space;daemons, the <FILENAME>/etc/config/nfsd.options</FILENAME> file needs to look like this:</PARAGRAPH>
<CODE>
<USERINPUT>cat /etc/config/nfsd.options</USERINPUT>&space;
8
</CODE>
<PARAGRAPH>Modify this number only if a server is overloaded with NFS traffic. In addition to increasing NFS daemons, consider adding another server to your NFS setup. The maximum recommended number of NFS daemons is 24 on a large server. If you increase the number of NFS server daemons, confirm your choice by giving this command:</PARAGRAPH>
<CODE>
<USERINPUT>/usr/etc/nfsstat -s</USERINPUT>&space;
Server NFS V3:
calls        badcalls
2284031      0
null        getattr      setattr     lookup      access      readlink
0  0%       550622 24%   8701  0%    625503 27%  512426 22%  68368  2%
read        write        create      mkdir       symlink      mknod
385682 16%  2965  0%     126  0%     3  0%       138  0%      0  0%
remove      rmdir        rename      link        readdir      readdir+
327  0%     40  0%       55  0%      1  0%       76  0%       21574  0%
fsstat      fsinfo       pathconf    commit
83056 3%    24033  1%    16  0%      319  0%
</CODE>
<PARAGRAPH>If the output shows many null receives, you should consider lowering the number of NFS server daemons. There is no exact formula for choosing the number of NFS daemons, but here are several rules of thumb you can consider:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>One <COMMAND>nfsd</COMMAND> for each CPU plus one to three <COMMAND>nfsd</COMMAND>s as a general resource</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>One <COMMAND>nfsd</COMMAND> for each disk controller plus one to three <COMMAND>nfsd</COMMAND>s as a general resource (a logical volume counts as one controller, no matter how many real controllers it is spread over)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>One <COMMAND>nfsd</COMMAND> for each CPU, one <COMMAND>nfsd</COMMAND> for each controller, and one to three <COMMAND>nfsd</COMMAND>s as a general resource</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32184">Temporary NFS Mounting</TITLE><PARAGRAPH>In cases where an NFS client requires directories not listed in its <INDEXTARGET ID="nfsch55"><!-- POSTPROCESSDATA: nfsch55|mounting:temporary --><INDEXTARGET ID="nfsch56"><!-- POSTPROCESSDATA: nfsch56|<ITALICS>mount</ITALICS> command:temporary mounting --><FILENAME>/etc/fstab</FILENAME> file, you can use manual mounting to temporarily make the NFS resource available. With temporary mounting, you need to supply all the necessary information to the <COMMAND>mount </COMMAND>program through the command line. As with any mount, a temporarily mounted directory requires that a mount point be created before mounting can occur.</PARAGRAPH>
<PARAGRAPH>For example, to mount <FILENAME>/usr/demos</FILENAME> from the server redwood to a local mount point<FILENAME>&space;/n/demos</FILENAME> with read-only, hard, interrupt, and background options, as superuser, give these commands: </PARAGRAPH>
<CODE>
<USERINPUT>mkdir -p /n/demos</USERINPUT>&space;
<USERINPUT>mount &ndash;o ro,bg redwood:/usr/demos /n/demos</USERINPUT>
</CODE>
<PARAGRAPH>A temporarily mounted directory remains in effect until the system is rebooted or until the superuser manually unmounts it. Use this method for one-time mounts.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="16397">Modifying the Automatic Mounter Maps</TITLE><PARAGRAPH>You can modify the automatic mounter maps at any time. AutoFS accepts map modifications at any time, without having to restart the daemon. Simply make the change and run the command <INDEXTARGET ID="nfsch57"><!-- POSTPROCESSDATA: nfsch57|maps:modifying --><INDEXTARGET ID="nfsch58"><!-- POSTPROCESSDATA: nfsch58|automatic mounters:modifying maps --><USERINPUT>/usr/etc/autofs -v</USERINPUT>. This command reconciles any differences between <FILENAME>/etc/mtab</FILENAME> and the current map information.</PARAGRAPH>
<PARAGRAPH>With <COMMAND>automount</COMMAND>, some of your modifications take effect the next time the automatic mounter accesses the map, and others take effect when the system is rebooted. Whether or not booting is required depends on the type of map you modify and the kind of modification you introduce.</PARAGRAPH>
<PARAGRAPH>Rebooting is generally the most effective way to restart <INDEXTARGET ID="nfsch59"><!-- POSTPROCESSDATA: nfsch59|<ITALICS>automount</ITALICS> command --><COMMAND>automount</COMMAND>. You can also kill and restart the automatic mounter using <COMMAND>automount </COMMAND>at the command line. Use this method sparingly, however. (See the <REFPAGE>automount(1M)</REFPAGE>.)</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Modifying the Master Map</TITLE><PARAGRAPH><INDEXTARGET ID="nfsch510"><!-- POSTPROCESSDATA: nfsch510|master maps --><INDEXTARGET ID="nfsch511"><!-- POSTPROCESSDATA: nfsch511|maps:master --><INDEXTARGET ID="nfsch512"><!-- POSTPROCESSDATA: nfsch512|<ITALICS>/etc/auto.master</ITALICS> file --><COMMAND>automount</COMMAND> consults the master map only at startup time. A modification to the master map (<FILENAME>/etc/auto.master</FILENAME><COMMAND>) </COMMAND>takes effect only after the system has been rebooted or <COMMAND>automount</COMMAND> is restarted (see <XREF IDREF="26545" TYPE="TITLE">&ldquo;Modifying Direct Maps&rdquo;</XREF>). With AutofS, the change takes effect after the <COMMAND>autofs</COMMAND> command is run.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Modifying Indirect Maps</TITLE><PARAGRAPH>You can modify, delete, or add to indirect maps (the files listed in <INDEXTARGET ID="nfsch513"><!-- POSTPROCESSDATA: nfsch513|indirect maps --><INDEXTARGET ID="nfsch514"><!-- POSTPROCESSDATA: nfsch514|maps:indirect --><FILENAME>/etc/auto.master</FILENAME> or <FILENAME>/etc/auto_master</FILENAME>) at any time. Any change takes effect the next time the map is used, which is the next time a mount is requested. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="26545">Modifying Direct Maps</TITLE><PARAGRAPH>Each entry in a direct map is an <INDEXTARGET ID="nfsch515"><!-- POSTPROCESSDATA: nfsch515|direct maps:modifying --><INDEXTARGET ID="nfsch516"><!-- POSTPROCESSDATA: nfsch516|maps:direct --><COMMAND>automount</COMMAND> or <COMMAND>autofs </COMMAND>mount point, and the daemon mounts itself at these mount points at startup, and with AutoFS, when <COMMAND>autofs</COMMAND> is run. With <COMMAND>autofs</COMMAND>, the changes are noted immediately, since it stays in sync with <FILENAME>/etc/mtab</FILENAME>.</PARAGRAPH>
<PARAGRAPH>With <COMMAND>automount</COMMAND>, adding or deleting an entry in a direct map takes effect only after you have gracefully killed and restarted the <COMMAND>automountd</COMMAND> daemon or rebooted. However, except for the name of the mount point, you can modify direct map entries while <COMMAND>automount</COMMAND> is running. The modifications take effect when the entry is next mounted, because <COMMAND>automount</COMMAND> consults the direct maps whenever a mount must be done.</PARAGRAPH>
<PARAGRAPH>For instance, with <INDEXTARGET ID="nfsch517"><!-- POSTPROCESSDATA: nfsch517|<ITALICS>/etc/auto.indirect</ITALICS> file --><INDEXTARGET ID="nfsch518"><!-- POSTPROCESSDATA: nfsch518|<ITALICS>automount</ITALICS> command:killing --><COMMAND>automount</COMMAND>, suppose you modify the file <FILENAME>/etc/auto.indirect</FILENAME> so that the directory /usr/src is mounted from a different server. The new entry takes effect immediately (if <FILENAME>/usr/src</FILENAME> is not mounted at this time) when you try to access it. If it is mounted now, you can wait until automatic unmounting takes place to access it. If this is not satisfactory, unmount the directory with the <COMMAND>umount</COMMAND> command, notify <COMMAND>automount</COMMAND> with the command <USERINPUT>/etc/killall&nbsp;-HUP&nbsp;automount</USERINPUT> that the mount table has changed, and then access the directory. The mounting should be done from the new server. However, if you want to delete the entry, you must gracefully kill and restart the <COMMAND>automount</COMMAND> daemon. The <COMMAND>automount</COMMAND> process must be killed with the SIGTERM signal:</PARAGRAPH>
<CODE>
<USERINPUT>/etc/killall -TERM automount</USERINPUT>
</CODE>
<PARAGRAPH>You can then manually restart <COMMAND>automount</COMMAND> or reboot the system.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>If gracefully killing and manually restarting <COMMAND>automount</COMMAND> does not work, rebooting the system should always work.</NOTE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12303">Mount Point Conflicts</TITLE><PARAGRAPH>You can cause a mount conflict by mounting one directory on top of another. For example, say you have a local partition mounted on <INDEXTARGET ID="nfsch519"><!-- POSTPROCESSDATA: nfsch519|mount points:conflicts --><FILENAME>/home</FILENAME>,&space;and&space;you want <COMMAND>automount</COMMAND> to mount other home directories. If the <COMMAND>automount</COMMAND> maps specify <FILENAME>/home</FILENAME> as a mount point, <COMMAND>automount</COMMAND> hides the local home partition whenever it mounts.</PARAGRAPH>
<PARAGRAPH>The solution is to mount the server's <INDEXTARGET ID="nfsch520"><!-- POSTPROCESSDATA: nfsch520|<ITALICS>/etc/fstab</ITALICS> file --><FILENAME>/home</FILENAME> partition somewhere else, such as <FILENAME>/export/home</FILENAME>, for example. You need an entry in <FILENAME>/etc/fstab</FILENAME> like this:</PARAGRAPH>
<CODE>
/net/home    /export/home    xfs rw,raw=/dev/rhome 0 0
</CODE>
<PARAGRAPH>This example assumes that the master file contains a line similar to this:</PARAGRAPH>
<CODE>
/home        /etc/auto.home
</CODE>
<PARAGRAPH>It also assumes an entry in <FILENAME>/etc/auto.home</FILENAME> like this:</PARAGRAPH>
<CODE>
terra        terra:/export/home
</CODE>
<PARAGRAPH>where terra is the name of the system.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Modifying CacheFS File System Parameters<XREFTARGET ID="15082"></TITLE><NOTE><PREFIX>Note</PREFIX>Before changing parameters for a cache, you must unmount all file systems in the cache directory with the <COMMAND>umount</COMMAND> command.</NOTE>
<PARAGRAPH>The following command changes the value of one or more parameters:<INDEXTARGET ID="nfsch521"><!-- POSTPROCESSDATA: nfsch521|cached file systems: modifying parameters<ITALICS>cfsadmin </ITALICS>command --></PARAGRAPH>
<EXAMPLE>
cfsadmin -u &ndash;o p<VARIABLE>arameter_list cache_directory </VARIABLE>
</EXAMPLE>
<NOTE><PREFIX>Note</PREFIX>You can only increase the size of a cache, either by number of blocks or number of inodes. If you want to make a cache smaller, you must remove it and re-create it with new values.</NOTE>
<PARAGRAPH>The following commands unmount <FILENAME>/local/cache3</FILENAME> and change the <CMDLINEOPT>threshfiles</CMDLINEOPT> parameter to 65%:</PARAGRAPH>
<EXAMPLE>
<USERINPUT># umount /local/cache3&lbreak;# cfsadmin -u -o threshfiles=65 /local/cache3</USERINPUT>
</EXAMPLE>
<SECTION2 LBL="" HELPID = ""><TITLE>Displaying Information About Cached File Systems</TITLE><PARAGRAPH>The following command returns information about all file systems cached under the specified cache directory.<INDEXTARGET ID="nfsch522"><!-- POSTPROCESSDATA: nfsch522|cached file systems: displaying information about --></PARAGRAPH>
<EXAMPLE>
cfsadmin -l <VARIABLE>cache_directory</VARIABLE>&space;
</EXAMPLE>
<NOTE><PREFIX>Note</PREFIX>The block size reported by <COMMAND>cfsadmin</COMMAND> is in 8 Kbyte blocks.</NOTE>
<PARAGRAPH>The following command shows information about the cache directory named <FILENAME>/usr/cache/nabokov</FILENAME>:</PARAGRAPH>
<EXAMPLE>
<USERINPUT># cfsadmin -l /usr/cache/nabokov</USERINPUT>
</EXAMPLE>
<CODE>
&space; cfsadmin: list cache FS information
&space;    Version        2   4  50
&space;  maxblocks     90% (1745743 blocks)
&space;   hiblocks     85% (1648757 blocks)
&space;  lowblocks     75% (1454786 blocks)
&space;  maxfiles      90% (188570 files)
&space;   hifiles      85% (178094 files)
&space;  lowfiles      75% (157142 files)
&space; neteng:_old-root-6.2_usr_local_lib:_usr_local_lib
&space; neteng:_usr_annex:_usr_annex
&space; bitbucket:_b_jmy:_usr_people_jmy_work
&space; neteng:_old-root-6.2_usr_local_bin:_usr_local_bin
</CODE>
<PARAGRAPH>This example shows multiple mount points for a single cache: neteng and bitbucket.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19472">Deleting a CacheFS File System</TITLE><PARAGRAPH>The following command deletes a file system in a cache:<INDEXTARGET ID="nfsch523"><!-- POSTPROCESSDATA: nfsch523|cached file systems: deleting deleting: cached file systems<ITALICS>cfsadmin</ITALICS> command --></PARAGRAPH>
<EXAMPLE>
cfsadmin &ndash;d <VARIABLE>cache_id cache_directory</VARIABLE>&space;
</EXAMPLE>
<NOTE><PREFIX>Note</PREFIX>Before deleting a cached file system, you must unmount all the cached files systems for that cache directory.</NOTE>
<PARAGRAPH>The cache ID is part of the information returned by <COMMAND>cfsadmin &ndash;l</COMMAND>. </PARAGRAPH>
<PARAGRAPH>The following commands unmount a cached file system and delete it from the cache<COMMAND>:</COMMAND></PARAGRAPH>
<CODE>
<USERINPUT># umount /usr/work</USERINPUT>&space;
<USERINPUT># cfsadmin -d _dev_dsk_c0t1d0s7 /local/cache1</USERINPUT>
</CODE>
<PARAGRAPH>You can delete all file systems in a particular cache by using <CMDLINEOPT>all</CMDLINEOPT> as an argument to the <CMDLINEOPT>&ndash;d </CMDLINEOPT>option. The following command deletes all file systems cached under <FILENAME>/local/cache1</FILENAME>:</PARAGRAPH>
<EXAMPLE>
<USERINPUT># cfsadmin -d all /local/cache1</USERINPUT>
</EXAMPLE>
<PARAGRAPH>The <CMDLINEOPT>all</CMDLINEOPT> argument to<CMDLINEOPT>&space;&ndash;d</CMDLINEOPT> also deletes the specified cache directory.</PARAGRAPH>
</SECTION1>
</CHAPTER>
