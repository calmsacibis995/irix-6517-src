<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="23604">Using Automatic Mounter Map Options</TITLE><PARAGRAPH>Automatic mounter (<COMMAND>automount</COMMAND> and <COMMAND>autofs</COMMAND>) maps offer a number of options to increase mounting efficiency and make map building easier. This chapter explains each option and provides examples of how to include them in maps. Except as noted, the options described in this chapter can be used in either direct or indirect maps. Direct maps are not supported in <COMMAND>autofs</COMMAND>.</PARAGRAPH>
<PARAGRAPH>This chapter contains these sections:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="21392" TYPE="TITLE">&ldquo;Including Group Mounts in Maps&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="61367" TYPE="TITLE">&ldquo;Using Hierarchical Formats in Group Mounts&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="22616" TYPE="TITLE">&ldquo;Specifying Alternative Servers&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="27038" TYPE="TITLE">&ldquo;Using Metacharacters&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="34023" TYPE="TITLE">&ldquo;Using Environment Variables&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="32003" TYPE="TITLE">&ldquo;Including Supplementary Maps&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="21392">Including Group Mounts in Maps</TITLE><PARAGRAPH><ITALICS><INDEXTARGET ID="nfsch31"><!-- POSTPROCESSDATA: nfsch31|group mounts --></ITALICS><ITALICS><INDEXTARGET ID="nfsch32"><!-- POSTPROCESSDATA: nfsch32|maps:group mounts --></ITALICS><ITALICS>Group</ITALICS> mounts are a means of organizing entries in a direct map so that a single mount provides several directories that users are likely to need simultaneously. Group mounts work only with direct maps. The map entry for a group mount specifies the parent directory to be mounted. Subentries specify the individual child directories the mount makes available and any mount options that apply to them. The directories in a group mount need not be on the same server.</PARAGRAPH>
<PARAGRAPH>A sample group mount entry is:</PARAGRAPH>
<CODE>
/usr/local \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;ivy:/export/local/iris_bin \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/share&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;willow:/usr/local/share \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/src&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;oak:/home/jones/src
</CODE>
<PARAGRAPH>This example shows that, when <FILENAME>/usr/local</FILENAME> is mounted, users have access to three directories: <FILENAME>/export/local/iris_bin</FILENAME>, a read-only directory on server ivy<FILENAME>; /usr/local/share</FILENAME>, a read-write directory on server willow; and <FILENAME>/home/jones/src</FILENAME>, a read-only directory on server oak. The backslash (\) at the end of a line indicates that a continuation line follows. Continuation lines are indented with blank spaces or tabs.</PARAGRAPH>
<PARAGRAPH>Without the group mount feature, the single entry shown in the previous example would require three separate mounts and three individual map entries, as shown in this example:</PARAGRAPH>
<CODE>
/usr/local/bin&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;ivy:/export/local/iris&ndash;bin
/usr/local/share&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;willow:/usr/local/share
/usr/local/src&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;oak:/home/jones/src
</CODE>
<PARAGRAPH>Group mounts and separate entries differ in that group mounts guarantee that all directories in the group are mounted whenever any one of them is referenced. This is not the case for separate entries. For example, notice the error message that occurs in this sequence when the user specifies a relative pathname to change directories: </PARAGRAPH>
<CODE>
% <USERINPUT>cd /usr/local/bin</USERINPUT>
% <USERINPUT>cd ../src</USERINPUT>
UX:csh:ERROR: ../src - No such file or directory
</CODE>
<PARAGRAPH>The error occurs because the directory <FILENAME>/usr/local/src</FILENAME> is not mounted with <FILENAME>/usr/local/bin</FILENAME>. A separate <COMMAND>cd </COMMAND>command is required to mount <FILENAME>/usr/local/src</FILENAME>. </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="61367">Using Hierarchical Formats in Group Mounts</TITLE><PARAGRAPH>When the root of a file hierarchy must be mounted before any other mounts can occur, it must be specified in the map. A <INDEXTARGET ID="nfsch33"><!-- POSTPROCESSDATA: nfsch33|maps:hierarchical --><INDEXTARGET ID="nfsch34"><!-- POSTPROCESSDATA: nfsch34|hierarchical mounts --><ITALICS>hierarchical</ITALICS> mount is a special case of group mounts in which directories in the group must be mounted in a particular order. For hierarchical mounts, the automatic mounter must have a separate mount point for each mount within the hierarchy. </PARAGRAPH>
<PARAGRAPH>The sample group mount entry shown in the previous section illustrates nonhierarchical mounts under <INDEXTARGET ID="nfsch35"><!-- POSTPROCESSDATA: nfsch35|automatic mounters:symbolic links --><FILENAME>/usr/local</FILENAME> when <FILENAME>/usr/local</FILENAME> is already mounted, or when it is a subdirectory of another mounted system. The concept of <ITALICS>root</ITALICS> here is very important. The symbolic link returned by <COMMAND>automount</COMMAND> to the kernel request is a path to the mount root, the root of the hierarchy mounted under <FILENAME>/tmp_mnt</FILENAME>.</PARAGRAPH>
<PARAGRAPH>An example of a hierarchical mount is:</PARAGRAPH>
<CODE>
/usr/local \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;peach:/export/local  \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/bin&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;ivy:/export/local/iris&ndash;bin \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/share&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;willow:/usr/local/share \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/src&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;oak:/home/jones/src
</CODE>
<PARAGRAPH>The mount points used here for the hierarchy are <FILENAME>/</FILENAME>, <FILENAME>/bin</FILENAME>, <FILENAME>/share,</FILENAME> and <FILENAME>/src</FILENAME>. These mount point paths are relative to the mount root, not to the system's file system root. The first entry in this example has <FILENAME>/</FILENAME> as its mount point. It is mounted at the mount root. The first mount of a hierarchy is not required to be at the mount root. <COMMAND>Automount</COMMAND> creates directories to build a path to the first mount point if the mount point is not at the mount root.</PARAGRAPH>
<PARAGRAPH>A true hierarchical mount can be a disadvantage if the server of the root hierarchy becomes unavailable. When this happens, any attempt to unmount the lower branches fail, since unmounting must proceed through the mount root, and the mount root cannot be unmounted while its server is unavailable.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22616">Specifying Alternative Servers</TITLE><PARAGRAPH>In an automatic mounter map, you can specify alternative servers to be used in the event the specified server is unavailable when mounting is attempted. This example illustrates an indirect map in which alternative servers are used: <INDEXTARGET ID="nfsch36"><!-- POSTPROCESSDATA: nfsch36|maps:alternate servers --></PARAGRAPH>
<CODE>
man&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oak:/usr/man \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rose:/usr/man \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/usr/man
frame&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redwood:/usr/frame2.0 \
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;balsa:/export/frame
</CODE>
<PARAGRAPH>The mount point <FILENAME>man</FILENAME> lists three server locations, and <FILENAME>frame</FILENAME> lists two. Mounting can be done from any listed server, as long as it is available. </PARAGRAPH>
<PARAGRAPH>Alternative locations are recommended for mounting read-only hierarchies. However, they are not advised for read-write files, since alternating versions of writable files causes problems with version control.</PARAGRAPH>
<PARAGRAPH>In the example above, multiple mount locations are expressed as a list of mount locations in the map entry. They can also be expressed as a comma-separated list of servers, followed by a colon and the pathname, if the pathname is the same for all alternate servers:</PARAGRAPH>
<CODE>
man&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oak,rose,willow:/usr/man
</CODE>
<PARAGRAPH>In this example, manual pages are mounted from either oak, rose, or willow, but this list of servers does not imply order. However, the automatic mounter does try to connect to servers on the local network first before soliciting servers on a remote network. The first server to respond to the automatic mounter's RPC requests is selected, and <COMMAND>automount</COMMAND> or <COMMAND>autofs </COMMAND>attempts to mount the server.</PARAGRAPH>
<PARAGRAPH>Although this redundancy is very useful in an environment where individual servers may or may not be exporting their file systems, it is beneficial at mount time only. If a server goes down while a mount is in effect, the directory becomes unavailable. An option here is to wait 5 minutes until the auto-unmount takes place and try again. At the next attempt, the automatic mounter chooses one of the available servers. It is also possible, with <INDEXTARGET ID="nfsch37"><!-- POSTPROCESSDATA: nfsch37|<ITALICS>umount</ITALICS> command --><COMMAND>automount</COMMAND>, for you to use the <COMMAND>umount</COMMAND> command to unmount the directory, and inform <COMMAND>automount</COMMAND> of the change in the mount table with the command <USERINPUT>/etc/killall&nbsp;-HUP&nbsp;automount</USERINPUT>. Then retry the mount. See the<REFPAGE>&space;automount(1M)</REFPAGE>, <REFPAGE>killall(1M)</REFPAGE>, and <REFPAGE>umount(1M)</REFPAGE> reference pages for more details. Since the <COMMAND>autofs</COMMAND> daemon holds no state, you need only use the<COMMAND>&space;umount</COMMAND> command to unmount the directory, then retry access. </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="27038">Using Metacharacters</TITLE><PARAGRAPH>The automatic mounter recognizes some characters, <INDEXTARGET ID="nfsch38"><!-- POSTPROCESSDATA: nfsch38|metacharacters --><INDEXTARGET ID="nfsch39"><!-- POSTPROCESSDATA: nfsch39|automatic mounters:metacharacters --><INDEXTARGET ID="nfsch310"><!-- POSTPROCESSDATA: nfsch310|maps:metacharacters --><ITALICS>metacharacters</ITALICS>, as having a special meaning. Metacharacters are used to do substitutions and to disable the effects of special characters. Metacharacters recognized by the automatic mounter are described below.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Ampersand (&amp;) Metacharacter</TITLE><PARAGRAPH>The automatic mounter recognizes an ampersand as a string substitution character. It replaces ampersands in the location field with the directory field character string specification wherever the ampersand occurs in the location specification. For example, assume you have a map containing many subdirectory specifications, like this:<INDEXTARGET ID="nfsch311"><!-- POSTPROCESSDATA: nfsch311|&amp; automatic mounters metacharacter --><INDEXTARGET ID="nfsch312"><!-- POSTPROCESSDATA: nfsch312|maps:&amp; metacharacter --></PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
john&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-nodev&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/john
mary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/mary
joe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/joe
able&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pine:/export/home/able
baker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;peach:/export/home/baker
</CODE>
<PARAGRAPH>Using the ampersand, the map above looks like this:</PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
john&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-nodev&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/&amp;
mary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/&amp;
joe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow/&amp;
able&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pine:/export/home/&amp;
baker&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;peach:/export/home/&amp;
</CODE>
<PARAGRAPH>Let's say the server name and directory name are the same, as in this example:</PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
willow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow:/home/willow
peach&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;peach:/home/peach
pine&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pine:/home/pine
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oak:/home/oak
poplar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poplar:/home/poplar 
</CODE>
<PARAGRAPH>Using the ampersand results in entries that look like this:</PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
willow&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
peach&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
pine&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
poplar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
</CODE>
<PARAGRAPH>You can also use directory substitutions in a direct map. For example, assume a direct map contains this entry:</PARAGRAPH>
<CODE>
/usr/man&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow,cedar,poplar:/usr/man
</CODE>
<PARAGRAPH>Using an ampersand, this entry can be shortened to this:</PARAGRAPH>
<CODE>
/usr/man&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;willow,cedar,poplar:&amp;
</CODE>
<PARAGRAPH>Notice that the ampersand substitution uses the whole directory string. Since directory specifications in a direct map begin with a slash (/), it is important to remember that the slash is carried over when you use the ampersand. For example, if a direct map contains this entry,</PARAGRAPH>
<CODE>
/progs&nbsp;&nbsp;&nbsp;&nbsp;&amp;1,&amp;2,&amp;3:/export/src/progs 
</CODE>
<PARAGRAPH>the automatic mounter interprets the map entry in this way:</PARAGRAPH>
<CODE>
/progs&nbsp;&nbsp;&nbsp;&nbsp;/progs1,/progs2,/progs3:/export/src/progs
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Asterisk (*) Metacharacter</TITLE><PARAGRAPH>The automatic mounter recognizes an asterisk as a wildcard substitution for a directory specification given in a command line. Asterisks must always be the last entry in a map, since the automatic mounter does not read beyond an asterisk entry.<INDEXTARGET ID="nfsch313"><!-- POSTPROCESSDATA: nfsch313|* automatic mounters metacharacter --><INDEXTARGET ID="nfsch314"><!-- POSTPROCESSDATA: nfsch314|maps:* metacharacter --><INDEXTARGET ID="nfsch315"><!-- POSTPROCESSDATA: nfsch315|maps:wild card --></PARAGRAPH>
<PARAGRAPH>Consider the map in this example:</PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/&amp;
poplar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/&amp;
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
</CODE>
<PARAGRAPH>In this example, a command line entry with the directory argument <SCREENDISPLAY>redwood</SCREENDISPLAY> is equivalent to this map entry:</PARAGRAPH>
<CODE>
redwood&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redwood:/home/redwood
</CODE>
<PARAGRAPH>In the next map, the last two entries are always ignored:</PARAGRAPH>
<CODE>
#Directory&nbsp;&nbsp;Mount Options&nbsp;&nbsp;Location
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/&amp;
poplar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;nosuid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/&amp;
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Backslash (\) Disabling Signal</TITLE><PARAGRAPH>The automatic mounter recognizes the backslash as a signal to disable the effects of the special character that follows it. It interprets the special character literally. For example, under certain circumstances, you might need to mount directories whose names could confuse the automatic mounter's map parser. An example might be a directory called rc0:dk1. This name could result in an entry like:<INDEXTARGET ID="nfsch316"><!-- POSTPROCESSDATA: nfsch316|\\ automatic mounters metacharacter --><INDEXTARGET ID="nfsch317"><!-- POSTPROCESSDATA: nfsch317|maps:\\ metacharacter --></PARAGRAPH>
<CODE>
/junk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vmsserver:rc0:dk1
</CODE>
<PARAGRAPH>The presence of the two colons in the location field confuses the automatic mounter's parser. To avoid this confusion, use a backslash to escape the second colon and remove its special meaning of separator:</PARAGRAPH>
<CODE>
/junk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;ro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vmsserver:rc0\:dk1
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Double Quotation Marks (") String Delimiters</TITLE><PARAGRAPH>The automatic mounter recognizes double quotation marks (") as string delimiters. Blank spaces within double quotation marks are not interpreted as the start of a new field. This example illustrates double quotation marks used to hide the blank space in a two-word name: <INDEXTARGET ID="nfsch318"><!-- POSTPROCESSDATA: nfsch318|automatic mounters metacharacter (") --><INDEXTARGET ID="nfsch319"><!-- POSTPROCESSDATA: nfsch319|maps:" metacharacter --></PARAGRAPH>
<CODE>
/smile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dentist:/"front teeth"/smile 
</CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="34023">Using Environment Variables</TITLE><PARAGRAPH>You can use the value of an environment variable by prefixing a dollar sign to its name. You can also use braces to delimit the name of the variable from appended letters or digits. Environment variables can appear anywhere in an entry line, except as a directory.<INDEXTARGET ID="nfsch320"><!-- POSTPROCESSDATA: nfsch320|maps:environment variables --><INDEXTARGET ID="nfsch321"><!-- POSTPROCESSDATA: nfsch321|maps:$ for environment variables --><INDEXTARGET ID="nfsch322"><!-- POSTPROCESSDATA: nfsch322|$ in maps --><INDEXTARGET ID="nfsch323"><!-- POSTPROCESSDATA: nfsch323|maps:{} for environment variables --><INDEXTARGET ID="nfsch324"><!-- POSTPROCESSDATA: nfsch324|{} in maps --><INDEXTARGET ID="nfsch325"><!-- POSTPROCESSDATA: nfsch325|environment variables in maps --></PARAGRAPH>
<PARAGRAPH>The environment variables can be inherited from the environment or can be defined explicitly with the <INDEXTARGET ID="nfsch326"><!-- POSTPROCESSDATA: nfsch326|automatic mounters and environment variables --><CMDLINEOPT>&ndash;D</CMDLINEOPT> command line option. For instance, if you want each client to mount client&ndash;specific files in the network in a replicated format, you could create a specific map for each client according to its name, so that the relevant line for the system oak looks like this:</PARAGRAPH>
<CODE>
/mystuff&nbsp;&nbsp;&nbsp;acorn,ivy,balsa:/export/hostfiles/oak
</CODE>
<PARAGRAPH>For the system willow, the entry looks like this:</PARAGRAPH>
<CODE>
/mystuff&nbsp;&nbsp;&nbsp;acorn,ivy,balsa:/export/hostfiles/willow
</CODE>
<PARAGRAPH>This scheme is viable within small networks, but maintaining system-specific maps across a large network is burdensome. An alternative for large networks is to start the automatic mounter with either of these commands:</PARAGRAPH>
<CODE>
<USERINPUT>/usr/etc/automount &ndash;D HOST=`hostname`</USERINPUT> ...
</CODE>
<PARAGRAPH>or</PARAGRAPH>
<CODE>
<USERINPUT>/usr/etc/autofs &ndash;D HOST=`hostname`</USERINPUT> ...
</CODE>
<PARAGRAPH>The entry in the direct map looks like this:</PARAGRAPH>
<CODE>
/mystuff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acorn,ivy,balsa:/export/hostfiles/$HOST
</CODE>
<PARAGRAPH>Now each system finds its own files in the mystuff directory, and centralized administration and distribution of maps is easier.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32003">Including Supplementary Maps</TITLE><PARAGRAPH>A line of the form +mapname causes the automatic mounter to consult the mentioned map as if it were included in the current map. If mapname is a relative pathname (no slashes), the automatic mounter assumes it is an NIS map. If the pathname is an absolute pathname the automatic mounter looks for a local map of that name. If the map name starts with a dash (&ndash;), the automatic mounter consults the appropriate built-in map.<INDEXTARGET ID="nfsch327"><!-- POSTPROCESSDATA: nfsch327|maps:supplementary maps --><INDEXTARGET ID="nfsch328"><!-- POSTPROCESSDATA: nfsch328|supplementary maps --><INDEXTARGET ID="nfsch329"><!-- POSTPROCESSDATA: nfsch329|NIS:maps --><INDEXTARGET ID="nfsch330"><!-- POSTPROCESSDATA: nfsch330|automatic mounters:NIS maps --><INDEXTARGET ID="nfsch331"><!-- POSTPROCESSDATA: nfsch331|maps:+ in maps --><INDEXTARGET ID="nfsch332"><!-- POSTPROCESSDATA: nfsch332|+ in maps --><INDEXTARGET ID="nfsch333"><!-- POSTPROCESSDATA: nfsch333|&ndash; in maps --><INDEXTARGET ID="nfsch334"><!-- POSTPROCESSDATA: nfsch334|maps:&ndash; in maps --></PARAGRAPH>
<PARAGRAPH>For instance, you can have a few entries in your local auto.home map for the most commonly accessed home directories and follow them with the included NIS map, as shown in this example:</PARAGRAPH>
<CODE>
ivy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/home
+auto.home
</CODE>
<PARAGRAPH>If the automatic mounter finds no match in the included map, it continues scanning the current map. This allows you to use additional entries after the included map, as shown in this example:</PARAGRAPH>
<CODE>
ivy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
oak&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/home
+auto.home
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&ndash;rw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/home/&amp;
</CODE>
<PARAGRAPH>Finally, the included map can be a local file, or even a built-in map:</PARAGRAPH>
<CODE>
+auto.home.finance&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# NIS map 
+auto.home.sales&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# NIS map 
+auto.home.engineering&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# NIS map 
+/etc/auto.mystuff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# local map 
+yourstuff /etc/yourstuff&nbsp;&nbsp;# local map
+auto.home&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# NIS map 
+&ndash;hosts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# built&ndash;in hosts map 
*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;:/export/&amp;&nbsp;&nbsp;&nbsp;&nbsp;# wildcard
</CODE>
<PARAGRAPH>Notice that in all cases the wildcard should be the last entry, since the automatic mounter does not continue consulting the map after it reads the asterisk. It assumes the wildcard has found a match.</PARAGRAPH>
</SECTION1>
</CHAPTER>
