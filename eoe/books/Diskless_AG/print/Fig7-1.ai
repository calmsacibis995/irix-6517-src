%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(TM) 3.0%%For: (Zippy the Pinhead) (Sillycon Graphics, Inc.)%%Title: (fig7-1.ai)%%CreationDate: (8/10/93) (12:39 PM)%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%+ Helvetica-Oblique%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0%%+ procset Adobe_cmykcolor 1.1 0%%+ procset Adobe_cshow 1.1 0%%+ procset Adobe_customcolor 1.0 0%%+ procset Adobe_typography_AI3 1.0 0%%+ procset Adobe_IllustratorA_AI3 1.0 0%%BoundingBox: 136 390 462 572%AI3_ColorUsage: Black&White%AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_Pic%%EndComments%%BeginProlog%%BeginResource: procset Adobe_packedarray 2.0 0%%Title: (Packed Array Operators)%%Version: 2.0 %%CreationDate: (8/2/90) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_packedarray 5 dict dup begin put/initialize			% - initialize -{/packedarray where	{	pop	}	{	Adobe_packedarray begin	Adobe_packedarray		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall	end	} ifelse} def/terminate			% - terminate -{} def/packedarray		% arguments count packedarray array{array astore readonly} def/setpacking			% boolean setpacking -{pop} def/currentpacking		% - setpacking boolean{false} defcurrentdict readonly pop end%%EndResourceAdobe_packedarray /initialize get exec%%BeginResource: procset Adobe_cmykcolor 1.1 0%%Title: (CMYK Color Operators)%%Version: 1.1 %%CreationDate: (1/23/89) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cmykcolor 4 dict dup begin put/initialize			% - initialize -{/setcmykcolor where	{	pop	}	{	userdict /Adobe_cmykcolor_vars 2 dict dup begin put	/_setrgbcolor		/setrgbcolor load def	/_currentrgbcolor		/currentrgbcolor load def	Adobe_cmykcolor begin	Adobe_cmykcolor		{		dup xcheck			{			bind			} if		pop pop		} forall	end	end	Adobe_cmykcolor begin	} ifelse} def/terminate			% - terminate -{currentdict Adobe_cmykcolor eq	{	end	} if} def/setcmykcolor		% cyan magenta yellow black setcmykcolor -{1 sub 4 1 roll3	{	3 index add neg dup 0 lt		{		pop 0		} if	3 1 roll	} repeatAdobe_cmykcolor_vars /_setrgbcolor get execpop} def /currentcmykcolor	% - currentcmykcolor cyan magenta yellow black{Adobe_cmykcolor_vars /_currentrgbcolor get exec3	{	1 sub neg 3 1 roll	} repeat0} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 1.1 0%%Title: (cshow Operator)%%Version: 1.1 %%CreationDate: (1/23/89) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 3 dict dup begin put/initialize			% - initialize -{/cshow where	{	pop	}	{	userdict /Adobe_cshow_vars 1 dict dup begin put	/_cshow		% - _cshow proc		{} def	Adobe_cshow begin	Adobe_cshow		{		dup xcheck			{			bind			} if		userdict 3 1 roll put		} forall	end	end	} ifelse} def/terminate			% - terminate -{} def/cshow				% proc string cshow -{exchAdobe_cshow_vars	exch /_cshow	exch put	{	0 0 Adobe_cshow_vars /_cshow get exec	} forall} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_customcolor 1.0 0%%Title: (Custom Color Operators)%%Version: 1.0 %%CreationDate: (5/9/88) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_customcolor 5 dict dup begin put/initialize			% - initialize -{/setcustomcolor where	{	pop	}	{	Adobe_customcolor begin	Adobe_customcolor		{		dup xcheck			{			bind			} if		pop pop		} forall	end	Adobe_customcolor begin	} ifelse} def/terminate			% - terminate -{currentdict Adobe_customcolor eq	{	end	} if} def/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object{5 packedarray}  def/setcustomcolor		% object tint setcustomcolor -{exchaload pop pop4	{	4 index mul 4 1 roll	} repeat5 -1 roll popsetcmykcolor} def/setoverprint		% boolean setoverprint -{pop} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_typography_AI3 1.0 0%%Title: (Typography Operators)%%Version: 1.0 %%CreationDate:(5/31/90) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI3 46 dict dup begin put/initialize			% - initialize -{/TZ where	{	pop	}	{	Adobe_typography_AI3 begin	Adobe_typography_AI3		{		dup xcheck			{			bind			} if		pop pop		} forall	end	Adobe_typography_AI3 begin	} ifelse} def/terminate			% - terminate -{currentdict Adobe_typography_AI3 eq	{	end	} if} def% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]/modifyEncoding{	/_tempEncode exch ddef		% pointer for sequential encodings	/_pntr 0 ddef		{		% get bottom object		counttomark -1 roll		% is it a mark ?		dup type dup /marktype eq 				{			% exit			pop pop exit		}		{			% ... object ... type ....			% insert if a nametype			/nametype eq			{				% insert the name at _pntr and increment pointer				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				% reset _pntr if it's a number				/_pntr exch ddef								}			ifelse		}		ifelse	}	loop			% return the modified encoding	_tempEncode}def/TE	% Set std platform encoding 	% (encoding pairs) TE -{	StandardEncoding 256 array copy modifyEncoding 	/_nativeEncoding exch def} def% re-define font% expected arguments% for 'normal fonts : %	[ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ%% for cartographic, pictographic, and expert fonts :% 	[ ... number value stream ... /_Helvetica-Bold/Helvetica-Bold %	direction fontScript defaultEncoding TZ/TZ		{	% platform dependent coding flag	/_useNativeEncoding exch def	% pop fontScript & direction	pop pop		% create a new dictionary with length	% equal to original dictionary length + 2	% copy all the key/value pairs except FID	findfont dup length 2 add dict		begin			% copy all the values but the FID		% into the new dictionary		mark exch		{			1 index /FID ne { def } if cleartomark mark		}		forall		% discard last mark		pop				% define FontName		/FontName exch def				% if no re-encoding stream is present		% then if the base encoding vector of the font		% is the same as StandardEncoding		% and the use platform encoding flag is true		% then install AI platform encoding		% else leave the base encoding in effect		counttomark 0 eq		{			Encoding StandardEncoding eq 1 _useNativeEncoding eq and			{				/Encoding _nativeEncoding def			}			if			% clean up			cleartomark		}		{				% custom encoding to be done			% start off with a copy of the font's standard encoding			/Encoding load 256 array copy 			modifyEncoding /Encoding exch def		}		ifelse				FontName currentdict	end		% register the new font	definefont pop}def% text painting operators/tr					% string tr ax ay string {_ax _ay 3 2 roll} def/trj				% string trj cx cy fillchar ax ay string {_cx _cy _sp _ax _ay 6 5 roll} def/a0{/Tx	% text							% textString Tx -	{	dup 	currentpoint 3 2 roll	tr _psf	newpath moveto	tr _ctm _pss	} ddef/Tj	% justified text				% textString Tj -	{	dup	currentpoint 3 2 roll	trj _pjsf	newpath moveto	trj _ctm _pjss	} ddef	} def/a1{W B} def/e0{/Tx	% text							% textString Tx -	{	tr _psf	} ddef/Tj	% justified text				% textString Tj -	{	trj _pjsf	} ddef} def/e1{W F } def/i0{/Tx	% text							% textString Tx -	{	tr sp	} ddef/Tj	% justified text				% textString Tj -	{	trj jsp	} ddef} def/o0{/Tx	% text							% textString Tx -	{	tr sw rmoveto	} ddef/Tj	% justified text				% textString Tj -	{	trj swj rmoveto	} ddef} def/r0{/Tx	% text							% textString Tx -	{	tr _ctm _pss	} ddef/Tj	% justified text				% textString Tj -	{	trj _ctm _pjss	} ddef} def/r1{W S} def% font operators% Binding/To	% begin text 					% bindType To -{	pop _ctm currentmatrix pop} def/TO	% end text					% TO -{	Te _ctm setmatrix newpath} def% Text paths/Tp	% begin text path				% a b c d tx ty startPt Tp -{	pop _tm astore pop _ctm setmatrix 	2 dict begin /W {} def /h {} def} def/TP	% end text path					% TP -{	end	iTm 0 0 moveto} def% Render mode & matrix operators/Tr	% begin render					% render Tr - {	Te currentpoint newpath moveto	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument){_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale} def/Tm % set text matrix				% a b c d tx ty Tm -{_tm astore pop iTm 0 0 moveto} def/Td % translate text matrix 		% tx ty Td -{_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/Te	% end render					% - Te -{	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse	/_render -1 ddef} def% Attributes/Ta	% set alignment					% alignment Ta -{pop} def/Tf	% set font name and size		% fontname size Tf -{dup 1000 div /_fScl exch ddefexch findfont exch scalefont setfont} def/Tl	% set leading					% leading paragraphLeading Tl -{pop0 exch _leading astore pop} def/Tt	% set user tracking				% userTracking Tt -{pop} def/TW % set word spacing				% minSpace optSpace maxSpace TW -{3 npop} def/Tw	% set computed word spacing		% wordSpace Tw{/_cx exch ddef} def/TC % set character spacing			% minSpace optSpace maxSpace TC -{3 npop} def/Tc	% set computed char spacing 	% charSpace Tc -{/_ax exch ddef} def/Ts % set super/subscripting (rise)	% rise Ts -{/_rise exch ddefcurrentpointiTmmoveto} def/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -{3 npop} def/Tz % set horizontal scaling		% scalePercent Tz -{100 div /_hs exch ddefiTm} def/TA % set pairwise kerning			% autoKern TA -									%	autoKern = 0 -> no pair kerning									%			 = 1 -> automatic pair kerning{pop} def/Tq % set hanging quotes			% hangingQuotes Tq -									%	hangingQuotes 	= 0 -> no hanging quotes									%			 		= 1 -> hanging quotes{pop} def% Text Bodies/TX {pop} def%/Tx	% non-justified text			% textString Tx -%/Tj	% justified text				% textString Tj -/Tk	% kern							% autoKern kernValue Tk -									%  	autoKern = 0 -> manual kern, = 1 -> auto kern									%	kernValue = kern value in em/1000 space{exch pop _fScl mul neg 0 rmoveto} def/TK	% non-printing kern				% autoKern kernValue TK -{2 npop} def/T* % carriage return & line feed	% - T* -{_leading aload pop neg Td} def/T*- % carriage return & negative line feed	% - T*- -{_leading aload pop Td} def/T-	% print a discretionary hyphen	% - T- -{_hyphen Tx} def/T+	% discretionary hyphen hyphen	% - T+ -{} def/TR	% reset pattern matrix 			% a b c d tx ty TR -{_ctm currentmatrix pop 	_tm astore pop iTm 0 0 moveto } def/TS	% special chars					% textString justified TS -{0 eq {Tx} {Tj} ifelse} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 0%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)%%Version: 1.0 %%CreationDate: (7/22/89) ()%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_IllustratorA_AI3 61 dict dup begin put% initialization/initialize				% - initialize -{userdict /Adobe_IllustratorA_AI3_vars 46 dict dup begin put% paint operands/_lp /none def/_pf {} def/_ps {} def/_psf {} def/_pss {} def/_pjsf {} def/_pjss {} def/_pola 0 def/_doClip 0 def% paint operators/cf	currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart [/e0 /r0 /a0 /o0 /i0 /i0 /i0 /i0] def /_renderEnd [null null null null /e1 /r1 /a1 /clip] def/_render -1 def/_rise 0 def/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def			% y character spacing/_cx 0 def			% x word spacing/_cy 0 def			% y word spacing/_leading [0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def% typography operators/Tx {} def/Tj {} def% compound path operators/CRender {} def% printing/_AI3_savepage {} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc {} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc {} def/_i null defAdobe_IllustratorA_AI3 beginAdobe_IllustratorA_AI3	{	dup xcheck		{		bind		} if	pop pop	} forallendendAdobe_IllustratorA_AI3 beginAdobe_IllustratorA_AI3_vars beginnewpath} def/terminate				% - terminate -{endend} def% definition operators/_					% - _ nullnull def/ddef				% key value ddef -{Adobe_IllustratorA_AI3_vars 3 1 roll put} def/xput				% key value literal xput -{dup load dup length exch maxlength eq	{	dup dup load dup	length 2 mul dict copy def	} ifload begin def end} def/npop				% integer npop -{	{	pop	} repeat} def% marking operators/sw					% ax ay string sw x y {dup length exch stringwidthexch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add} def/swj				% cx cy fillchar ax ay string swj x y{dup 4 1 rolldup length exch stringwidth exch 5 -1 roll 3 index 1 sub mul add4 1 roll 3 1 roll 1 sub mul add 6 2 roll /_cnt 0 ddef{1 index eq {/_cnt _cnt 1 add ddef} if} forall popexch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss					% ax ay string matrix ss -{4 1 roll	{				% matrix ax ay char 0 0 {proc} -	2 npop 	(0) exch 2 copy 0 exch put pop	gsave	false charpath currentpoint	4 index setmatrix	stroke	grestore	moveto	2 copy rmoveto	} exch cshow3 npop} def/jss				% cx cy fillchar ax ay string matrix jss -{4 1 roll	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   	2 npop 	(0) exch 2 copy 0 exch put 	gsave	_sp eq 		{		exch 6 index 6 index 6 index 5 -1 roll widthshow  		currentpoint		}		{		false charpath currentpoint		4 index setmatrix stroke		}ifelse	grestore	moveto	2 copy rmoveto	} exch cshow6 npop} def% path operators/sp					% ax ay string sp -{	{	2 npop (0) exch	2 copy 0 exch put pop	false charpath	2 copy rmoveto	} exch cshow2 npop} def/jsp					% cx cy fillchar ax ay string jsp -{	{					% cx cy fillchar ax ay char 0 0 {proc} -	2 npop 	(0) exch 2 copy 0 exch put 	_sp eq 		{		exch 5 index 5 index 5 index 5 -1 roll widthshow  		}		{		false charpath		}ifelse	2 copy rmoveto	} exch cshow5 npop} def% path construction operators/pl				% x y pl x y{transform0.25 sub round 0.25 add exch0.25 sub round 0.25 add exchitransform} def/setstrokeadjust where	{	pop true setstrokeadjust	/c				% x1 y1 x2 y2 x3 y3 c -	{	curveto	} def	/C	/c load def	/v				% x2 y2 x3 y3 v -	{	currentpoint 6 2 roll curveto	} def	/V	/v load def	/y				% x1 y1 x2 y2 y -	{	2 copy curveto	} def	/Y	/y load def	/l				% x y l -	{	lineto	} def	/L	/l load def	/m				% x y m -	{	moveto	} def	}	{%else	/c	{	pl curveto	} def	/C	/c load def	/v	{	currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{	pl 2 copy curveto	} def	/Y	/y load def	/l	{	pl lineto	} def	/L	/l load def	/m	{	pl moveto	} def	}ifelse% graphic state operators/d					% array phase d -{setdash} def/cf	{} def			% - cf flatness/i					% flatness i -{dup 0 eq	{	pop cf	} ifsetflat} def/j					% linejoin j -{setlinejoin} def/J					% linecap J -{setlinecap} def/M					% miterlimit M -{setmiterlimit} def/w					% linewidth w -{setlinewidth} def% path painting operators/H					% - H -{} def/h					% - h -{closepath} def/N					% - N -{_pola 0 eq 	{	_doClip 1 eq {clip /_doClip 0 ddef} if 	newpath	} 	{	/CRender {N} ddef	}ifelse} def/n					% - n -{N} def/F					% - F -{_pola 0 eq 	{	_doClip 1 eq 		{		gsave _pf grestore clip newpath /_lp /none ddef _fc 		/_doClip 0 ddef		}		{		_pf		}ifelse	} 	{	/CRender {F} ddef	}ifelse} def/f					% - f -{closepathF} def/S					% - S -{_pola 0 eq 	{	_doClip 1 eq 		{		gsave _ps grestore clip newpath /_lp /none ddef _sc 		/_doClip 0 ddef		}		{		_ps		}ifelse	} 	{	/CRender {S} ddef	}ifelse} def/s					% - s -{closepathS} def/B					% - B -{_pola 0 eq 	{	_doClip 1 eq 	% F clears _doClip	gsave F grestore 		{		gsave S grestore clip newpath /_lp /none ddef _sc		/_doClip 0 ddef		} 		{		S		}ifelse	}	{	/CRender {B} ddef	}ifelse} def/b					% - b -{closepathB} def/W					% - W -{/_doClip 1 ddef} def/*					% - [string] * -{count 0 ne 	{	dup type (stringtype) eq {pop} if	} if _pola 0 eq {newpath} if} def% group operators/u					% - u -{} def/U					% - U -{} def/q					% - q -{_pola 0 eq {gsave} if} def/Q					% - Q -{_pola 0 eq {grestore} if} def/*u					% - *u -{_pola 1 add /_pola exch ddef} def/*U					% - *U -{_pola 1 sub /_pola exch ddef _pola 0 eq {CRender} if} def/D					% polarized D -{pop} def/*w					% - *w -{} def/*W					% - *W -{} def% place operators/`					% matrix llx lly urx ury string ` -{/_i save ddef6 1 roll 4 npopconcatuserdict begin/showpage {} deffalse setoverprintpop} def/~					% - ~ -{end_i restore} def% color operators/O					% flag O -{0 ne/_of exch ddef/_lp /none ddef} def/R					% flag R -{0 ne/_os exch ddef/_lp /none ddef} def/g					% gray g -{/_gf exch ddef/_fc{ _lp /fill ne	{	_of setoverprint	_gf setgray	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/G					% gray G -{/_gs exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_gs setgray	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def/k					% cyan magenta yellow black k -{_cf astore pop/_fc{_lp /fill ne	{	_of setoverprint	_cf aload pop setcmykcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/K					% cyan magenta yellow black K -{_cs astore pop/_sc{_lp /stroke ne	{	_os setoverprint	_cs aload pop setcmykcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def/x					% cyan magenta yellow black name gray x -{/_gf exch ddeffindcmykcustomcolor/_if exch ddef/_fc{ _lp /fill ne	{	_of setoverprint	_if _gf 1 exch sub setcustomcolor	/_lp /fill ddef	} if} ddef/_pf{_fcfill} ddef/_psf{_fcashow} ddef/_pjsf{_fcawidthshow} ddef/_lp /none ddef} def/X					% cyan magenta yellow black name gray X -{/_gs exch ddeffindcmykcustomcolor/_is exch ddef/_sc{_lp /stroke ne	{	_os setoverprint	_is _gs 1 exch sub setcustomcolor	/_lp /stroke ddef	} if} ddef/_ps{_scstroke} ddef/_pss{_scss} ddef/_pjss{_scjss} ddef/_lp /none ddef} def% locked object operator/A					% value A -{pop} defcurrentdict readonly pop endsetpacking% annotate page operator/annotatepage{} def%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helvetica%%IncludeFont: Helvetica-ObliqueAdobe_cmykcolor /initialize get execAdobe_cshow /initialize get execAdobe_customcolor /initialize get execAdobe_typography_AI3 /initialize get execAdobe_IllustratorA_AI3 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique[/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ%AI3_EndEncoding%%EndSetup0 Au0 R0 G0 i 0 J 0 j 0.5 w 4 M []0 d%AI3_Note:0 D461 391 m461 571 L137 571 L137 391 L461 391 Ls299 481 mSU0 To1 0 0 1 149 521 0 TpTP0 Tr0 O0 g1 w/_Helvetica 8 Tf0 Ts100 Tz0 Tt0 TA0 0 5 TC100 100 200 TW0 0 0 Ti0 Ta0 Tq10 0 Tl0 Tc0 Tw(1 - initiates ) Tx /_Helvetica-Oblique 8 Tf(bootp) Tx /_Helvetica 8 Tf( request\r) Tx TOu0 R0 G0.5 w277 542 m277 559 L148 559 L148 542 L277 542 Ls212.5 550.5 mSUu451 542 m451 559 L322 559 L322 542 L451 542 Ls386.5 550.5 mSU0 O0 g1 w277.7142 522.4203 m271.5106 524.5197 l277.6052 526.5796 l276.6356 524.5197 l277.7142 522.4203 lf0 R0 G0.25 w276.6356 524.5197 m325.8231 524.5197 lS0 O0 g1 w321.2858 517.4203 m327.4894 519.5197 l321.3948 521.5796 l322.3644 519.5197 l321.2858 517.4203 lf0 R0 G0.25 w322.3644 519.5197 m272.1769 519.5197 lS0 To1 0 0 1 149 493 0 TpTP0 Tr0 O0 g1 w(2 - kernel is loaded into memory\r) Tx TO277.7142 494.4203 m271.5106 496.5197 l277.6052 498.5796 l276.6356 496.5197 l277.7142 494.4203 lf0 R0 G0.25 w276.6356 496.5197 m325.8231 496.5197 lS0 O0 g1 w321.2858 489.4203 m327.4894 491.5197 l321.3948 493.5796 l322.3644 491.5197 l321.2858 489.4203 lf0 R0 G0.25 w322.3644 491.5197 m272.1769 491.5197 lS0 To1 0 0 1 149 465 0 TpTP0 Tr0 O0 g1 w(3 - initiates a broadcast\r) Tx T*/_Helvetica-Oblique 8 Tf(     rpc.bootparams) Tx /_Helvetica 8 Tf( call        \r) Tx TO277.7142 466.4203 m271.5106 468.5197 l277.6052 470.5796 l276.6356 468.5197 l277.7142 466.4203 lf0 R0 G0.25 w276.6356 468.5197 m325.8231 468.5197 lS0 O0 g1 w321.2858 461.4203 m327.4894 463.5197 l321.3948 465.5796 l322.3644 463.5197 l321.2858 461.4203 lf0 R0 G0.25 w322.3644 463.5197 m272.1769 463.5197 lS0 To1 0 0 1 149 437 0 TpTP0 Tr0 O0 g1 w(4 - initiates a mount request\r) Tx TO277.7142 438.4203 m271.5106 440.5197 l277.6052 442.5796 l276.6356 440.5197 l277.7142 438.4203 lf0 R0 G0.25 w276.6356 440.5197 m325.8231 440.5197 lS0 O0 g1 w321.2858 433.4203 m327.4894 435.5197 l321.3948 437.5796 l322.3644 435.5197 l321.2858 433.4203 lf0 R0 G0.25 w322.3644 435.5197 m272.1769 435.5197 lS0 To1 0 0 1 254 402.5 0 TpTP0 Tr0 O0 g1 w(- mount and boot complete\r) Tx TO0 To1 0 0 1 336 521 0 TpTP0 Tr(- ) Tx /_Helvetica-Oblique 8 Tf(inetd) Tx /_Helvetica 8 Tf( starts the ) Tx /_Helvetica-Oblique 8 Tf(bootp) Tx /_Helvetica 8 Tf( sever\r) Tx TO0 To1 0 0 1 336 493 0 TpTP0 Tr(- bootfile/kernel is downloaded\r) Tx T*(  to client\r) Tx TO0 To1 0 0 1 336 465 0 TpTP0 Tr(- ) Tx /_Helvetica-Oblique 8 Tf(inetd) Tx /_Helvetica 8 Tf( starts the ) Tx /_Helvetica-Oblique 8 Tf(bootparamd) Tx /_Helvetica 8 Tf(\r) Tx T*(  server        \r) Tx TO0 To1 0 0 1 336 437 0 TpTP0 Tr(- ) Tx /_Helvetica-Oblique 8 Tf(inetd ) Tx /_Helvetica 8 Tf(starts the ) Tx /_Helvetica-Oblique 8 Tf(rpc.mountd\r) Tx TO297.8901 418.2024 m300.0175 412.0084 l302.0498 418.1122 l299.9943 417.1333 l297.8901 418.2024 lf0 R0 G0.25 w299.9943 417.1333 m299.7676 430.8201 lS0 To1 0 0 1 212 547 0 TpTP-9.334 0 Td0 Tr0 O0 g1 w/_Helvetica 8 Tf1 Ta(client\r) Tx TO0 To1 0 0 1 386.5 547 0 TpTP-11.1094 0 Td0 Tr(server\r) Tx TO%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_IllustratorA_AI3 /terminate get execAdobe_typography_AI3 /terminate get execAdobe_customcolor /terminate get execAdobe_cshow /terminate get execAdobe_cmykcolor /terminate get execAdobe_packedarray /terminate get exec%%EOF