%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.5
%%For: () ()
%%Title: (Fig9-2.ai)
%%CreationDate: (12/14/98) ( 3:20 PM)
%%BoundingBox: 159 170 368 558
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%DocumentCustomColors: (yellow)
%%CMYKCustomColor: 0 0 0 1 (custom black)
%%+ 0 0.15 1 0 (yellow)
%AI3_TemplateBox: 278 362 278 362
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Header
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			break
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
u
0 O
0 0.15 1 0 (yellow) 0.5 x
0 R
0 G
0 i
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
242.2669 544.4613 m
241.4969 544.0766 241.606 546.4423 240.806 546.0426 C
230.2965 540.7914 L
229.3147 540.3008 229.2966 538.1088 228.6602 537.7909 C
228.6602 503.5997 L
228.9069 499.712 L
270.3388 520.414 L
270.0921 556.1934 L
269.2977 555.7965 269.3859 558.0117 268.4844 557.5613 C
242.2669 544.4613 L
b
271.0158 523.7362 m
271.0158 554.4522 L
270.2214 554.0552 270.3096 556.2705 269.4081 555.8201 C
243.1906 542.7201 L
242.4206 542.3353 242.5297 540.207 241.7297 539.8072 C
231.2202 534.5561 L
230.2384 534.0654 230.2203 531.8735 229.5839 531.5556 C
229.5839 503.1602 l
229.1042 499.6298 l
270.5362 520.3318 l
271.0158 523.7362 L
b
0 0.15 1 0 (yellow) 0 X
229.8151 501.3494 m
270.3104 521.5718 l
S
230.0618 503.3732 m
270.5571 523.5956 l
S
0 0.15 1 0 (yellow) 1 X
0.25 w
229.8151 501.2112 m
270.3104 521.4335 l
S
230.0618 503.2351 m
270.5571 523.4574 l
S
U
u
0 O
0 0.15 1 0 (yellow) 0.5 x
0 G
0.5 w
242.2669 436.1337 m
241.4969 435.749 241.606 438.1148 240.806 437.715 C
230.2965 432.4638 L
229.3147 431.9733 229.2966 429.7812 228.6602 429.4633 C
228.6602 395.2721 L
228.9069 391.3844 L
270.3388 412.0865 L
270.0921 447.8659 L
269.2977 447.4689 269.3859 449.6841 268.4844 449.2337 C
242.2669 436.1337 L
b
271.0158 415.4087 m
271.0158 446.1246 L
270.2214 445.7277 270.3096 447.9429 269.4081 447.4925 C
243.1906 434.3925 L
242.4206 434.0078 242.5297 431.8794 241.7297 431.4797 C
231.2202 426.2285 L
230.2384 425.7379 230.2203 423.5459 229.5839 423.228 C
229.5839 394.8326 l
229.1042 391.3022 l
270.5362 412.0042 l
271.0158 415.4087 L
b
0 0.15 1 0 (yellow) 0 X
229.8151 393.0218 m
270.3104 413.2442 l
S
230.0618 395.0457 m
270.5571 415.2681 l
S
0 0.15 1 0 (yellow) 1 X
0.25 w
229.8151 392.8837 m
270.3104 413.106 l
S
230.0618 394.9075 m
270.5571 415.1298 l
S
U
u
0 O
0 0.15 1 0 (yellow) 0.5 x
0 G
0.5 w
242.2669 339.1337 m
241.4969 338.749 241.606 341.1148 240.806 340.715 C
230.2965 335.4638 L
229.3147 334.9733 229.2966 332.7812 228.6602 332.4633 C
228.6602 298.2721 L
228.9069 294.3844 L
270.3388 315.0865 L
270.0921 350.8659 L
269.2977 350.4689 269.3859 352.6841 268.4844 352.2337 C
242.2669 339.1337 L
b
271.0158 318.4087 m
271.0158 349.1246 L
270.2214 348.7277 270.3096 350.9429 269.4081 350.4925 C
243.1906 337.3925 L
242.4206 337.0078 242.5297 334.8794 241.7297 334.4797 C
231.2202 329.2285 L
230.2384 328.7379 230.2203 326.5459 229.5839 326.228 C
229.5839 297.8326 l
229.1042 294.3022 l
270.5362 315.0042 l
271.0158 318.4087 L
b
0 0.15 1 0 (yellow) 0 X
229.8151 296.0218 m
270.3104 316.2442 l
S
230.0618 298.0457 m
270.5571 318.2681 l
S
0 0.15 1 0 (yellow) 1 X
0.25 w
229.8151 295.8837 m
270.3104 316.106 l
S
230.0618 297.9075 m
270.5571 318.1298 l
S
U
u
0 O
0 0.15 1 0 (yellow) 0.5 x
0 G
0.5 w
330 481 m
329.23 480.6153 329.3391 482.9811 328.5391 482.5813 C
318.0297 477.3301 L
317.0479 476.8395 317.0297 474.6475 316.3933 474.3296 C
316.3933 440.1384 L
316.64 436.2507 L
358.072 456.9528 L
357.8253 492.7321 L
357.0309 492.3352 357.119 494.5504 356.2175 494.1 C
330 481 L
b
358.749 460.275 m
358.749 490.9909 L
357.9546 490.594 358.0428 492.8092 357.1412 492.3588 C
330.9237 479.2588 L
330.1537 478.8741 330.2628 476.7457 329.4628 476.346 C
318.9534 471.0948 L
317.9716 470.6042 317.9534 468.4122 317.317 468.0943 C
317.317 439.6989 l
316.8374 436.1685 l
358.2693 456.8705 l
358.749 460.275 L
b
0 0.15 1 0 (yellow) 0 X
317.5482 437.8881 m
358.0435 458.1105 l
S
317.795 439.912 m
358.2903 460.1343 l
S
0 0.15 1 0 (yellow) 1 X
0.25 w
317.5482 437.75 m
358.0435 457.9722 l
S
317.795 439.7738 m
358.2903 459.9961 l
S
U
u
0 O
0.75 g
0 G
0.5 w
159.9893 397.3606 m
190.5537 412.5722 L
190.5537 350.0749 l
160.3612 339.7881 l
159.9893 397.3606 L
b
1 g
200.2836 351.1738 m
169.0506 335.628 l
160.3612 351.0017 160.3612 377.07 v
160.3612 396.7884 L
190.9257 412 L
190.9257 392.2816 l
190.9257 369.3832 200.2836 351.1738 y
b
[3 1 2 5 1 6 ]0 d
167.628 382.4174 m
185.8267 391.279 L
S
167.628 379.0753 m
185.8267 387.9369 L
S
167.628 375.7332 m
185.8267 384.5948 L
S
167.628 372.3911 m
185.8267 381.2527 L
S
168.6306 369.7174 m
185.8267 377.9106 L
S
168.6306 366.7095 m
185.8267 374.5685 L
S
168.9648 363.7017 m
186.1609 371.5606 L
S
169.6332 360.0253 m
186.8294 367.8843 L
S
170.6358 356.6833 m
187.832 364.5422 L
S
172.9754 353.6754 m
190.1714 361.5343 L
S
0 O
1 g
[]0 d
163.8286 399.3368 m
163.8286 401.0078 162.6171 400.799 162.6171 398.5848 c
162.6171 389.8953 l
162.6171 387.1799 164.2046 387.8483 164.2046 390.898 c
164.2046 392.6996 164.2046 395.7897 164.2046 397.4507 C
164.7059 397.6595 L
164.7059 395.9986 164.7059 392.9085 164.7059 391.1069 c
164.7059 387.0964 162.0322 386.0937 162.0322 389.77 c
162.0322 398.4595 l
162.0322 401.3421 164.2046 401.8434 164.2046 399.5039 C
163.8286 399.3368 L
b
U
u
0.75 g
326.4694 382.7155 m
357.0338 397.9271 L
357.0338 335.4299 l
326.4694 320.2183 l
326.4694 382.7155 L
b
1 g
366.7637 336.5287 m
335.5308 320.983 l
326.8413 336.3566 326.8413 362.425 v
326.8413 382.1434 L
357.4058 397.3549 L
357.4058 377.6365 l
357.4058 354.7381 366.7637 336.5287 y
b
[3 1 2 5 1 6 ]0 d
334.1081 367.7723 m
352.3069 376.6339 L
S
334.1081 364.4302 m
352.3069 373.2918 L
S
334.1081 361.0881 m
352.3069 369.9497 L
S
334.1081 357.746 m
352.3069 366.6076 L
S
335.1107 355.0723 m
352.3069 363.2655 L
S
335.1107 352.0644 m
352.3069 359.9234 L
S
335.4449 349.0566 m
352.641 356.9156 L
S
336.1133 345.3803 m
353.3095 353.2392 L
S
337.116 342.0382 m
354.3121 349.8971 L
S
339.4555 339.0303 m
356.6516 346.8892 L
S
0 O
1 g
[]0 d
330.3087 384.6917 m
330.3087 386.3627 329.0973 386.1539 329.0973 383.9398 c
329.0973 375.2503 l
329.0973 372.5348 330.6847 373.2032 330.6847 376.2529 c
330.6847 378.0546 330.6847 381.1446 330.6847 382.8056 C
331.186 383.0144 L
331.186 381.3535 331.186 378.2634 331.186 376.4618 c
331.186 372.4513 328.5123 371.4486 328.5123 375.1249 c
328.5123 383.8144 l
328.5123 386.697 330.6847 387.1983 330.6847 384.8588 C
330.3087 384.6917 L
b
U
0 g
248.6085 493.4437 m
248.6085 458.4736 l
242.8283 460.2096 l
250.6316 443.2996 L
258.4348 468.0076 l
252.6546 460.4953 l
252.6546 495.4654 L
248.6085 493.4437 L
f
274.8361 503.2189 m
305.0915 485.6823 l
300.691 481.552 l
319.2343 479.8232 L
301.7705 498.9649 l
305.3714 490.1968 l
275.116 507.7334 L
274.8361 503.2189 L
f
226.9875 479.3094 m
198.9285 431.2516 l
194.827 435.679 l
192.9772 417.1475 L
212.2324 434.4857 l
203.441 430.9422 l
231.5 479 L
226.9875 479.3094 L
f
248.6085 384.8606 m
248.6085 363.0361 l
242.8283 364.7721 l
250.6316 347.8621 L
258.4348 372.5701 l
252.6546 365.0578 l
252.6546 386.8823 L
248.6085 384.8606 L
f
338.7791 431.4783 m
338.7791 409.6538 l
332.999 411.3898 l
340.8022 394.4798 L
348.6054 419.1878 l
342.8253 411.6755 l
342.8253 433.5 L
338.7791 431.4783 L
f
0 To
0.8946 0.447 0 1 251.5 501 0 Tp
TP
-25.0674 0 Td
0 Tr
1 w
/_Helvetica 8 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
8 0 Tl
0 Tc
0 Tw
(/usr/local/boot) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 186.5 337.5 0 Tp
TP
-4.2529 0 Td
0 Tr
(sa) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 352 320.7084 0 Tp
TP
-16.7891 0 Td
0 Tr
(unix.IP22) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 251 394.5 0 Tp
TP
-14.3242 0 Td
0 Tr
(roboinst) Tx 
(\r) TX 
TO
u
0.75 g
0 R
0 G
0.5 w
235.9862 240.4552 m
266.5507 255.6668 L
266.5507 193.1695 l
235.9862 177.958 l
235.9862 240.4552 L
b
1 g
276.2806 194.2684 m
245.0476 178.7226 l
236.3582 194.0963 236.3582 220.1646 v
236.3582 239.883 L
266.9227 255.0946 L
266.9227 235.3762 l
266.9227 212.4778 276.2806 194.2684 y
b
[3 1 2 5 1 6 ]0 d
243.625 225.512 m
261.8237 234.3736 L
S
243.625 222.1699 m
261.8237 231.0315 L
S
243.625 218.8278 m
261.8237 227.6894 L
S
243.625 215.4857 m
261.8237 224.3473 L
S
244.6276 212.812 m
261.8237 221.0052 L
S
244.6276 209.8041 m
261.8237 217.6631 L
S
244.9618 206.7963 m
262.1579 214.6552 L
S
245.6302 203.1199 m
262.8264 210.9789 L
S
246.6328 199.7778 m
263.829 207.6368 L
S
248.9723 196.77 m
266.1684 204.6289 L
S
0 O
1 g
[]0 d
239.8256 242.4314 m
239.8256 244.1024 238.6141 243.8936 238.6141 241.6794 c
238.6141 232.9899 l
238.6141 230.2745 240.2016 230.9429 240.2016 233.9926 c
240.2016 235.7942 240.2016 238.8843 240.2016 240.5453 C
240.7029 240.7541 L
240.7029 239.0932 240.7029 236.0031 240.7029 234.2015 c
240.7029 230.191 238.0292 229.1883 238.0292 232.8646 c
238.0292 241.5541 l
238.0292 244.4367 240.2016 244.938 240.2016 242.5985 C
239.8256 242.4314 L
b
U
0 g
248.6085 287.9553 m
248.6085 266.1308 l
242.8283 267.8668 l
250.6316 250.9568 L
258.4348 275.6648 l
252.6546 268.1525 l
252.6546 289.977 L
248.6085 287.9553 L
f
0 To
0.8945 0.447 0 1 262 179.0947 0 Tp
TP
-15.4414 0 Td
0 Tr
1 w
100.0061 Tz
(mrconfig) Tx 
(\r) TX 
TO
0 To
0.8945 0.447 0 1 251 297.5947 0 Tp
TP
-12.9813 0 Td
0 Tr
(custom) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 338.5 438.5 0 Tp
TP
-14.3203 0 Td
0 Tr
100 Tz
(miniroot) Tx 
(\r) TX 
TO
0 0.15 1 0 (yellow) 0.5 x
0 R
0 G
0.5 w
440.8268 120.8031 m
440.8268 611.1968 L
109.1732 611.1968 L
109.1732 120.8031 L
440.8268 120.8031 L
(b) *
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
