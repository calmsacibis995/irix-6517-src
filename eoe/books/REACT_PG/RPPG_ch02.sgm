<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="2"><TITLE><XREFTARGET ID="34779">How IRIX and REACT/Pro Support Real&ndash;Time Programs</TITLE><PARAGRAPH>This chapter provides an overview of the real-time support for programs in IRIX and REACT/Pro. </PARAGRAPH>
<PARAGRAPH>Some of the features mentioned here are discussed in more detail in the following chapters of this guide. For details on other features, you are referred to reference pages or to other manuals. The main topics surveyed are:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="93209" TYPE="TITLE">&ldquo;Kernel Facilities for Real-Time Programs,&rdquo;</XREF> including special scheduling disciplines, isolated CPUs, and locked memory pages</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="18698" TYPE="TITLE">&ldquo;REACT/Pro Frame Scheduler,&rdquo;</XREF> which takes care of the details of scheduling multiple threads on multiple CPUs at guaranteed rates</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="42590" TYPE="TITLE">&ldquo;Synchronization and Communication,&rdquo;</XREF> reviewing the ways that a concurrent, multi-threaded program can coordinate its work</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="85496" TYPE="TITLE">&ldquo;Timers and Clocks,&rdquo;</XREF> reviewing your options for time-stamping and interval timing</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="78556" TYPE="TITLE">&ldquo;Interchassis Communication,&rdquo;</XREF> reviewing two ways of connecting multiple chassis</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="93209">Kernel Facilities for Real-Time Programs</TITLE><PARAGRAPH>The IRIX kernel has a number of features that are valuable when you are designing your real-time program.<INDEXTARGET ID="RPPG_ch021"><!-- POSTPROCESSDATA: RPPG_ch021|kernel:real-time features --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Kernel Optimizations</TITLE><PARAGRAPH>The IRIX kernel has been optimized for performance in a multiprocessor environment. Some of the optimizations are as follows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Instruction paths to system calls and traps are optimized, including some hand coding, to maximize cache utilization.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>In the real-time dispatch class (described further in <XREF IDREF="76094" TYPE="TITLE">&ldquo;Using Priorities and Scheduling Queues&rdquo;</XREF>), the run queue is kept in priority-sorted order for fast dispatching.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Floating point registers are saved only if the next process needs them, and restored only if saved.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The kernel tries to redispatch a process on the same CPU where it most recently ran, looking for some of its data remaining in cache (see <XREF IDREF="25533" TYPE="TITLE">&ldquo;Understanding Affinity Scheduling&rdquo;</XREF>).</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Special Scheduling Disciplines</TITLE><PARAGRAPH>The default IRIX scheduling algorithm is designed to ensure fairness among time-shared users. Called an &ldquo;earnings-based&rdquo; scheduler, the kernel credits each process group with a certain number of microseconds on each dispatch cycle. The process with the fattest &ldquo;bank account&rdquo; is dispatched first. If a process exhausts its &ldquo;bank account&rdquo; it is preempted.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>POSIX Real-Time Policies</TITLE><PARAGRAPH>While the earnings-based scheduler is effective at scheduling timeshare applications, it is not suitable for real-time. For deterministic scheduling, IRIX provides the POSIX real-time policies: first-in-first-out and round robin. These policies share a real-time priority band consisting of 256 priorities. Processes scheduled using the POSIX real-time policies are not subject to &ldquo;earnings&rdquo; controls. For more information about scheduling, see <XREF IDREF="41392" TYPE="TITLE">&ldquo;Understanding the Real-Time Priority Band&rdquo;</XREF> and the <REFPAGE>realtime(5)</REFPAGE> reference page.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Gang Scheduling</TITLE><PARAGRAPH>When your program is structured as a share process group (using <INDEXTARGET ID="RPPG_ch022"><!-- POSTPROCESSDATA: RPPG_ch022|process group --><INDEXTARGET ID="RPPG_ch023"><!-- POSTPROCESSDATA: RPPG_ch023|gang scheduling --><INDEXTARGET ID="RPPG_ch024"><!-- POSTPROCESSDATA: RPPG_ch024|scheduling:gang type --><FUNCTION>sproc()</FUNCTION>), you can request that all the processes of the group be scheduled as a &ldquo;gang.&rdquo; The kernel runs all the members of the gang concurrently, provided there are enough CPUs available to do so. This helps to ensure that, when members of the process group coordinate through the use of locks, a lock is usually be released in a timely manner. Without gang scheduling, the process that holds a lock may not be scheduled in the same interval as another process that is waiting on that lock.</PARAGRAPH>
<PARAGRAPH>For more information, see <XREF IDREF="86141" TYPE="TITLE">&ldquo;Using Gang Scheduling&rdquo;</XREF>.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Locking Virtual Memory</TITLE><PARAGRAPH>IRIX allows a process to lock all or part of its virtual memory into physical memory, so that it cannot be paged out and a page fault cannot occur while it is running. <INDEXTARGET ID="RPPG_ch025"><!-- POSTPROCESSDATA: RPPG_ch025|page fault:prevent by locking memory --><INDEXTARGET ID="RPPG_ch026"><!-- POSTPROCESSDATA: RPPG_ch026|locking virtual memory --><INDEXTARGET ID="RPPG_ch027"><!-- POSTPROCESSDATA: RPPG_ch027|virtual memory:locking --></PARAGRAPH>
<PARAGRAPH>Memory linking prevents unpredictable delays caused by paging. Of course the locked memory is not available for the address spaces of other processes. The system must have enough physical memory to hold the locked address space and space for a minimum of other activities.</PARAGRAPH>
<PARAGRAPH>The system calls used to lock memory, such as <FUNCTION>mlock()</FUNCTION> and <FUNCTION>mlockall(),</FUNCTION> are discussed in detail in <DOCTITLE>Topics in IRIX Programming</DOCTITLE> (see <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Mapping Processes and CPUs</TITLE><PARAGRAPH>Normally IRIX tries to keep all CPUs busy, dispatching the next ready process to the next available CPU. (This simple picture is complicated by the needs of affinity scheduling, and gang scheduling). Since the number of ready processes changes all the time, dispatching is a random process. A normal process cannot predict how often or when it will next be able to run. For normal programs this does not matter, as long as each process continues to run at a satisfactory average rate.<INDEXTARGET ID="RPPG_ch028"><!-- POSTPROCESSDATA: RPPG_ch028|CPU:restricting to assigned processes --><INDEXTARGET ID="RPPG_ch029"><!-- POSTPROCESSDATA: RPPG_ch029|process:mapping to CPU --></PARAGRAPH>
<PARAGRAPH>Real-time processes cannot tolerate this unpredictability. To reduce it, you can dedicate one or more CPUs to real-time work. There are two steps:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Restrict one or more CPUs from normal scheduling, so that they can run only the processes that are specifically assigned to them.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Assign one or more processes to run on the restricted CPUs.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>A process on a dedicated CPU runs when it needs to run, delayed only by interrupt service and by kernel scheduling cycles (if scheduling is enabled on that CPU). For details, see <XREF IDREF="43268" TYPE="TITLE">&ldquo;Assigning Work to a Restricted CPU&rdquo;</XREF>. The REACT/Pro Frame Scheduler takes care of both steps automatically; see <XREF IDREF="18698" TYPE="TITLE">&ldquo;REACT/Pro Frame Scheduler&rdquo;</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Controlling Interrupt Distribution</TITLE><PARAGRAPH>In normal operations, CPUs receive frequent interrupts:<INDEXTARGET ID="RPPG_ch0210"><!-- POSTPROCESSDATA: RPPG_ch0210|interrupt:controlling distribution of --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>I/O interrupts from devices attached to, or near, that CPU.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A scheduling clock causes an interrupt to every CPU every time-slice interval of 10 milliseconds.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Whenever interval timers expire (<XREF IDREF="85496" TYPE="TITLE">&ldquo;Timers and Clocks&rdquo;</XREF>), a CPU handling timers receives timer interrupts.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the map of virtual to physical memory changes, a TLB interrupt is broadcast to all CPUs.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>These interrupts can make the execution time of a process unpredictable. However, you can designate one or more CPUs for real-time use, and keep interrupts of these kinds away from those CPUs. The system calls for interrupt control are discussed further in <XREF IDREF="48058" TYPE="TITLE">&ldquo;Minimizing Overhead Work&rdquo;</XREF>. The REACT/Pro Frame Scheduler also takes care of interrupt isolation.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="18698">REACT/Pro Frame Scheduler</TITLE><PARAGRAPH>Many real-time programs must sustain a fixed frame rate. In such programs, the central design problem is that the program must complete certain activities during every frame interval. </PARAGRAPH>
<PARAGRAPH>The REACT/Pro Frame Scheduler (FRS) is a process execution manager that schedules activities on one or more CPUs in a predefined, cyclic order. The scheduling interval is determined by a repetitive time base, usually a hardware interrupt.<INDEXTARGET ID="RPPG_ch0211"><!-- POSTPROCESSDATA: RPPG_ch0211|Frame Scheduler --><INDEXTARGET ID="RPPG_ch0212"><!-- POSTPROCESSDATA: RPPG_ch0212|real-time program:and Frame Scheduler --></PARAGRAPH>
<PARAGRAPH>The Frame Scheduler makes it easy to organize a real-time program as a set of independent, cooperating threads. The Frame Scheduler manages the housekeeping details of reserving and isolating CPUs. You concentrate on designing the activities and implementing them as threads in a clean, structured way. It is relatively easy to change the number of activities, or their sequence, or the number of CPUs, even late in the project. For detailed information about the Frame Scheduler, see <INDEXTARGET ID="RPPG_ch0213"><!-- POSTPROCESSDATA: RPPG_ch0213|Frame Scheduler:advantages --><XREF IDREF="96303" TYPE="TITLE">Chapter&nbsp;4, &ldquo;Using the Frame Scheduler.&rdquo;</XREF></PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="42590">Synchronization and Communication</TITLE><PARAGRAPH>In a program organized as multiple, cooperating processes, the processes need to share data and coordinate their actions in well-defined ways. IRIX with REACT provides the following mechanisms, which are surveyed in the topics that follow:<INDEXTARGET ID="RPPG_ch0214"><!-- POSTPROCESSDATA: RPPG_ch0214|synchronization and communication --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Shared memory allows a single segment of memory to appear in the address spaces of multiple processes. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Semaphores are used to coordinate access from multiple processes to resources that they share.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Locks provide a low-overhead, high-speed method of mutual exclusion.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Barriers make it easy for multiple processes to synchronize the start of a common activity.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Signals provide asynchronous notification of special events or errors. IRIX supports signal semantics from all major UNIX heritages, but POSIX-standard signals are recommended for real-time programs.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE>Shared Memory Segments</TITLE><PARAGRAPH>IRIX allows you to map a segment of memory into the address spaces of two or more processes at once. The block of shared memory can be read concurrently, and possibly written, by all the processes that share it. IRIX supports the POSIX and the SVR4 models of shared memory, as well as a system of shared arenas unique to IRIX. These facilities are covered in detail in <INDEXTARGET ID="RPPG_ch0215"><!-- POSTPROCESSDATA: RPPG_ch0215|memory:shared. <ITALICS>See</ITALICS> shared memory --><INDEXTARGET ID="RPPG_ch0216"><!-- POSTPROCESSDATA: RPPG_ch0216|shared memory --><DOCTITLE>Topics in IRIX Programming</DOCTITLE> (see <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="30650">Semaphores</TITLE><PARAGRAPH>A semaphore is a flexible synchronization mechanism used to signal an event, limit concurrent access to a resource, or enforce mutual exclusion of critical code regions.<INDEXTARGET ID="RPPG_ch0217"><!-- POSTPROCESSDATA: RPPG_ch0217|semaphore:defined --><INDEXTARGET ID="RPPG_ch0218"><!-- POSTPROCESSDATA: RPPG_ch0218|semaphore --></PARAGRAPH>
<PARAGRAPH>IRIX implements industry standard POSIX and SVR4 semaphores, as well as its own arena-based version. All three versions are discussed in <DOCTITLE>Topics in IRIX Programming</DOCTITLE> (see <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>). While the interfaces and semantics of each type are slightly different, the way they are used is fundamentally the same. </PARAGRAPH>
<PARAGRAPH>Semaphores have two primary operations that allow threads to atomically increment or decrement the value of a semaphore. With POSIX semaphores, these operations are <FUNCTION>sem_post()</FUNCTION> and <FUNCTION>sem_wait()</FUNCTION>, respectively (see <REFPAGE>sem_post(3)</REFPAGE> and <REFPAGE>sem_wait(3)</REFPAGE> for additional information). </PARAGRAPH>
<PARAGRAPH>When a thread decrements a semaphore and causes its value to becomes less than zero, the thread blocks; otherwise, the thread continues without blocking. A thread blocked on a semaphore typically remains blocked until another thread increments the semaphore. </PARAGRAPH>
<PARAGRAPH>The wakeup order depends on the version of semaphore being used:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>POSIX</HANGITEM>
<HANGBODY><PARAGRAPH>Thread with the highest priority waiting for the longest amount of time (priority-based)</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>Arena</HANGITEM>
<HANGBODY><PARAGRAPH>Process waiting the longest amount of time (FIFO-based)</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>SVR4</HANGITEM>
<HANGBODY><PARAGRAPH>Process waiting the longest amount of time (FIFO-based)</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<TIP><PREFIX>Tip</PREFIX>Silicon Graphics recommends using the POSIX semaphores for the synchronization of real-time threads, because they queue blocked threads in priority order and outperform the other semaphore versions with low to no contention.</TIP>
<PARAGRAPH>Following are examples of using semaphores.</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>To implement a lock using POSIX semaphores, an application initializes a semaphore to 1, and uses <FUNCTION>sem_wait()</FUNCTION> to acquire the semaphore and <FUNCTION>sem_post()</FUNCTION> to release it.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>To use semaphores for event notification, an application initializes the semaphore to 0. Threads waiting for the event to occur call <FUNCTION>sem_wait()</FUNCTION>, while threads signaling the event use <FUNCTION>sem_post()</FUNCTION>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22620">Locks</TITLE><PARAGRAPH>A lock is a mutually exclusive synchronization object that represents a shared resource. A process that wants to use the resource sets a lock and later releases the lock when it is finished using the resource.<INDEXTARGET ID="RPPG_ch0219"><!-- POSTPROCESSDATA: RPPG_ch0219|lock:defined --><INDEXTARGET ID="RPPG_ch0220"><!-- POSTPROCESSDATA: RPPG_ch0220|lock --></PARAGRAPH>
<PARAGRAPH>As discussed in <XREF IDREF="30650" TYPE="TITLE">&ldquo;Semaphores&rdquo;</XREF>, a lock is functionally the same as a semaphore that has a count of 1. The set-lock operation acquires a lock for exclusive use of a resource. On a multiprocessor system, one important difference between a lock and semaphore is when a resource is not immediately available, a semaphore always blocks the process, while a lock causes a process to spin until the resource becomes available.</PARAGRAPH>
<PARAGRAPH>A lock, on a multiprocessor system, is set by &ldquo;spinning.&rdquo; The program enters a tight loop using the test-and-set machine instruction to test the lock's value and to set it as soon as the lock is clear. In practice the lock is often already available, and the first execution of test-and-set acquires the lock. In this case, setting the lock takes a trivial amount of time.<INDEXTARGET ID="RPPG_ch0221"><!-- POSTPROCESSDATA: RPPG_ch0221|spin lock --><INDEXTARGET ID="RPPG_ch0222"><!-- POSTPROCESSDATA: RPPG_ch0222|lock:set by spinning --></PARAGRAPH>
<PARAGRAPH>When the lock is already set, the process spins on the test a certain number of times. If the process that holds the lock is executing concurrently in another CPU, and if it releases the lock during this time, the spinning process acquires the lock instantly. There is zero latency between release and acquisition, and no overhead from entering the kernel for a system call.</PARAGRAPH>
<PARAGRAPH>If the process has not acquired the lock after a certain number of spins, it defers to other processes by calling <FUNCTION>sginap()</FUNCTION>. When the lock is released, the process resumes execution.<INDEXTARGET ID="RPPG_ch0223"><!-- POSTPROCESSDATA: RPPG_ch0223|<FUNCTION>sginap()</FUNCTION> --></PARAGRAPH>
<PARAGRAPH>For more information on locks, refer to <DOCTITLE>Topics in IRIX Programming</DOCTITLE> (see <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>), and to the <REFPAGE>usnewlock(3)</REFPAGE>, <REFPAGE>ussetlock(3)</REFPAGE>, and <REFPAGE>usunsetlock(3)</REFPAGE> reference pages. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Mutual Exclusion Primitives</TITLE><PARAGRAPH>IRIX supports library functions that perform atomic (uninterruptable) sample-and-set operations on words of memory. For example, <INDEXTARGET ID="RPPG_ch0224"><!-- POSTPROCESSDATA: RPPG_ch0224|mutual exclusion primitive --><INDEXTARGET ID="RPPG_ch0225"><!-- POSTPROCESSDATA: RPPG_ch0225|test_and_set --><FUNCTION>test_and_set()</FUNCTION> copies the value of a word and stores a new value into the word in a single operation; while <FUNCTION>test_then_add()</FUNCTION> samples a word and then replaces it with the sum of the sampled value and a new value.</PARAGRAPH>
<PARAGRAPH>These primitive operations can be used as the basis of mutual-exclusion protocols using words of shared memory. For details, see the <REFPAGE>test_and_set(3p)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>The <FUNCTION>test_and_set()</FUNCTION> and related functions are based on the MIPS R4000 instructions Load Linked and Store Conditional. Load Linked retrieves a word from memory and tags the processor data cache &ldquo;line&rdquo; from which it comes. The following Store Conditional tests the cache line. If any other processor or device has modified that cache line since the Load Linked was executed, the store is not done. The implementation of <FUNCTION>test_then_add()</FUNCTION> is comparable to the following assembly-language loop:</PARAGRAPH>
<CODE>
1:
&nbsp;&nbsp;&nbsp;&nbsp;ll&nbsp;&nbsp;&nbsp;&nbsp;retreg, offset(targreg)
&nbsp;&nbsp;&nbsp;&nbsp;add&nbsp;&nbsp;&nbsp;tmpreg, retreg, valreg
&nbsp;&nbsp;&nbsp;&nbsp;sc&nbsp;&nbsp;&nbsp;&nbsp;tmpreg, offset(targreg)
&nbsp;&nbsp;&nbsp;&nbsp;beq&nbsp;&nbsp;&nbsp;tmpreg, 0, b1
</CODE>
<PARAGRAPH>The loop continues trying to load, augment, and store the target word until it succeeds. Then it returns the value retrieved. For more details on the R4000 machine language, see one of the books listed in <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>.</PARAGRAPH>
<PARAGRAPH>The Load Linked and Store Conditional instructions operate only on memory locations that can be cached. Uncached pages (for example, pages implemented as reflective shared memory, see <XREF IDREF="32787" TYPE="TITLE">&ldquo;Reflective Shared Memory&rdquo;</XREF>) cannot be set by the <FUNCTION>test_and_set()</FUNCTION> function.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="45686">Signals</TITLE><PARAGRAPH>A signal is a notification of an event, sent asynchronously to a process. Some signals originate from the kernel: for example, the SIGFPE signal that notifies of an arithmetic overflow; or SIGALRM that notifies of the expiration of a timer interval (for the complete list, see the <INDEXTARGET ID="RPPG_ch0226"><!-- POSTPROCESSDATA: RPPG_ch0226|kernel:originates signals --><INDEXTARGET ID="RPPG_ch0227"><!-- POSTPROCESSDATA: RPPG_ch0227|signal --><REFPAGE>signal(5)</REFPAGE> reference page). The Frame Scheduler issues signals to notify your program of errors or termination. Other signals can originate within your own program.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Signal Latency</TITLE><PARAGRAPH>The time that elapses from the moment a signal is generated until your signal handler begins to execute is known as <GLOSSARYITEM>signal latency</GLOSSARYITEM>. Signal latency can be long (as real-time programs measure time) and signal latency has a high variability. (Some of the factors are discussed under <XREF IDREF="54747" TYPE="TITLE">&ldquo;Signal Delivery and Latency&rdquo;</XREF>.) In general, use signals only to deliver infrequent messages of high priority. Do not use the exchange of signals as the basis for scheduling in a real-time program.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Signals are delivered at particular times when using the Frame Scheduler. See <XREF IDREF="72300" TYPE="TITLE">&ldquo;Using Signals Under the Frame Scheduler&rdquo;</XREF>. </NOTE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Signal Families</TITLE><PARAGRAPH>In order to receive a signal, a process must establish a signal handler, a function that is entered when the signal arrives.</PARAGRAPH>
<PARAGRAPH>There are three UNIX traditions for signals, and IRIX supports all three. They differ in the library calls used, in the range of signals allowed, and in the details of signal delivery (see <XREF IDREF="82143" TYPE="TABLE">Table&nbsp;2-1</XREF>). Real-time programs should use the POSIX interface for signals.</PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="2-1"><PREFIX>Table 2-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="82143">Signal Handling Interfaces</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="83"><PARAGRAPH>Function</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH>SVR4-compatible 
Calls</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH>BSD 4.2 Calls</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH>POSIX Calls</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="83"><PARAGRAPH>set and query 
signal handler</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH><REFPAGE>sigset(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>signal(2)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH><REFPAGE>sigvec(3)</REFPAGE>&nbsp;&lbreak;<REFPAGE>signal(3)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH><REFPAGE>sigaction(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigsetops(3)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigaltstack(2)</REFPAGE></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="83"><PARAGRAPH>send a signal</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH><REFPAGE>sigsend(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>kill(2)</REFPAGE>&nbsp;</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH><REFPAGE>kill(3)</REFPAGE>&nbsp;&lbreak;<REFPAGE>killpg(3)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH><REFPAGE>sigqueue(2)</REFPAGE></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="83"><PARAGRAPH>temporarily block 
specified signals</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH><REFPAGE>sighold(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigrelse(2)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH><REFPAGE>sigblock(3)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigsetmask(3)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH><REFPAGE>sigprocmask(2)</REFPAGE></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="83"><PARAGRAPH>query pending 
signals</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH><REFPAGE>sigpending(2)</REFPAGE></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="83"><PARAGRAPH>wait for a signal</PARAGRAPH>
</CELL>
<CELL LEFT="90" WIDTH="83"><PARAGRAPH><REFPAGE>sigpause(2)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="83"><PARAGRAPH><REFPAGE>sigpause(3)</REFPAGE></PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="83"><PARAGRAPH><REFPAGE>sigsuspend(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigwait(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigwaitinfo(2)</REFPAGE>&nbsp;&lbreak;<REFPAGE>sigtimedwait(2)</REFPAGE></PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>The POSIX interface supports the following 64 signal types:<INDEXTARGET ID="RPPG_ch0228"><!-- POSTPROCESSDATA: RPPG_ch0228|signal:signal numbers --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>1-31</HANGITEM>
<HANGBODY><PARAGRAPH>Same as BSD</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>32</HANGITEM>
<HANGBODY><PARAGRAPH>Reserved by IRIX kernel</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>33-48</HANGITEM>
<HANGBODY><PARAGRAPH>Reserved by the POSIX standard for system use</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>49-64</HANGITEM>
<HANGBODY><PARAGRAPH>Reserved by POSIX for real-time programming</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>Signals with smaller numbers have priority for delivery. The low-numbered BSD-compatible signals, which include all kernel-produced signals, are delivered ahead of real-time signals; and signal 49 takes precedence over signal 64. (The BSD-compatible interface supports only signals 1-31. This set includes two user-defined signals.)<INDEXTARGET ID="RPPG_ch0229"><!-- POSTPROCESSDATA: RPPG_ch0229|signal:delivery priority --></PARAGRAPH>
<PARAGRAPH>IRIX supports POSIX signal handling as specified in IEEE 1003.1b-1993. This includes FIFO queueing new signals when a signal type is held, up to a system maximum of queued signals. (The maximum can be adjusted using <COMMAND>systune</COMMAND>; see the systune(1) reference page.)</PARAGRAPH>
<PARAGRAPH>For more information on the POSIX interface to signal handling, refer to <DOCTITLE><DOCTITLE>Topics in IRIX Programming</DOCTITLE></DOCTITLE> and to the <REFPAGE>signal(5)</REFPAGE>,<REFPAGE>&space;sigaction(2)</REFPAGE>, and <REFPAGE>sigqueue(2)</REFPAGE> reference pages.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="85496">Timers and Clocks</TITLE><PARAGRAPH>A real-time program sometimes needs a source of timer interrupts, and some need a way to create a high-precision timestamp. Both of these are provided by IRIX. IRIX supports the POSIX clock and timer facilities as specified in IEEE 1003.1b-1993, as well as the BSD itimer facility. The timer facilities are covered in <DOCTITLE>Topics in IRIX Programming</DOCTITLE>.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="59558">Hardware Cycle Counter</TITLE><PARAGRAPH>The hardware cycle counter is a high-precision hardware counter that is updated continuously. The precision of the cycle counter depends on the system in use, but in most, it is a 64-bit counter.<INDEXTARGET ID="RPPG_ch0230"><!-- POSTPROCESSDATA: RPPG_ch0230|cycle counter --><INDEXTARGET ID="RPPG_ch0231"><!-- POSTPROCESSDATA: RPPG_ch0231|cycle counter:precision of --></PARAGRAPH>
<PARAGRAPH>You sample the cycle counter by calling the POSIX function <FUNCTION>clock_gettime()</FUNCTION> specifying the CLOCK_SGI_CYCLE clock type.</PARAGRAPH>
<PARAGRAPH>The frequency with which the cycle counter is incremented also depends on the hardware system. You can obtain the resolution of the clock by calling the POSIX function <FUNCTION>clock_getres()</FUNCTION>.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The cycle counter is synchronyzed only to the CPU crystal and is not intended as a perfect time standard. If you use it to measure intervals between events, be aware that it can drift by as much as 100 microseconds per second, depending on the hardware system in use.<INDEXTARGET ID="RPPG_ch0232"><!-- POSTPROCESSDATA: RPPG_ch0232|cycle counter:drift rate of --></NOTE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="78556">Interchassis Communication</TITLE><PARAGRAPH>Silicon Graphics systems support three methods for connecting multiple computers:<INDEXTARGET ID="RPPG_ch0233"><!-- POSTPROCESSDATA: RPPG_ch0233|interchassis communication --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Standard network interfaces let you send packets or streams of data over a local network or the Internet.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Reflective shared memory (provided by third-party manufacturers) lets you share segments of memory between computers, so that programs running on different chassis can access the same variables.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>External interrupts let one CHALLENGE/Onyx/Origin system signal another.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE>Socket Programming</TITLE><PARAGRAPH>One standard, portable way to connect processes in different computers is to use the BSD-compatible socket I/O interface. You can use sockets to communicate within the same machine, between machines on a local area network, or between machines on different continents.<INDEXTARGET ID="RPPG_ch0234"><!-- POSTPROCESSDATA: RPPG_ch0234|sockets --></PARAGRAPH>
<PARAGRAPH>For more information about socket programming, refer to one of the networking books listed in <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Message-Passing Interface (MPI)</TITLE><PARAGRAPH>The Message-Passing Interface (MPI) is a standard architecture and programming interface for designing distributed applications. Silicon Graphics, Inc., supports MPI in the POWER CHALLENGE Array product. For the MPI standard, see http://www.mcs.anl.gov/mpi/index.html.</PARAGRAPH>
<PARAGRAPH>The performance of both sockets and MPI depends on the speed of the underlying network. The network that connects nodes (systems) in an Array product has a very high bandwidth.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32787">Reflective Shared Memory</TITLE><PARAGRAPH>Reflective shared memory consists of hardware that makes a segment of memory appear to be accessible from two or more computer chassis. Actually the CHALLENGE/Onyx implementation consists of VME bus devices in each computer, connected by a very high-speed, point-to-point network.<INDEXTARGET ID="RPPG_ch0235"><!-- POSTPROCESSDATA: RPPG_ch0235|shared memory:reflective --><INDEXTARGET ID="RPPG_ch0236"><!-- POSTPROCESSDATA: RPPG_ch0236|reflective shared memory --></PARAGRAPH>
<PARAGRAPH>The VME bus address space of the memory card is mapped into process address space. Firmware on the card handles communication across the network, so as to keep the memory contents of all connected cards consistent. Reflective shared memory is slower than real main memory but faster than socket I/O. Its performance is essentially that of programmed I/O to the VME bus, which is discussed under <XREF IDREF="50284" TYPE="TITLE">&ldquo;PIO Access&rdquo;</XREF>.</PARAGRAPH>
<PARAGRAPH>Reflective shared memory systems are available for Silicon Graphics equipment from several third-party vendors. The details of the software interface differ with each vendor. However, in most cases you use <FUNCTION>mmap()</FUNCTION> to map the shared segment into your process's address space (see <DOCTITLE>Topics in IRIX Programming </DOCTITLE>as well as the <REFPAGE>usrvme(7)</REFPAGE> reference page). </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="53277">External Interrupts</TITLE><PARAGRAPH>The Origin/CHALLENGE/Onyx systems support external interrupt lines for both incoming and outgoing external interrupts. Software support for these lines is described in the <INDEXTARGET ID="RPPG_ch0237"><!-- POSTPROCESSDATA: RPPG_ch0237|interrupt:external. <ITALICS>See</ITALICS> external interrupt --><INDEXTARGET ID="RPPG_ch0238"><!-- POSTPROCESSDATA: RPPG_ch0238|external interrupt --><DOCTITLE>IRIX Device Driver Programmer's Guide</DOCTITLE> and the <REFPAGE>ei(7)</REFPAGE> reference page. You can use the external interrupt as the time base for the Frame Scheduler. In that case, the Frame Scheduler manages the external interrupts for you. (See <XREF IDREF="12213" TYPE="TITLE">&ldquo;Selecting a Time Base&rdquo;</XREF>.) </PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
