<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="5"><TITLE><XREFTARGET ID="36019">Optimizing Disk I/O for a Real-Time Program</TITLE><PARAGRAPH>A real-time program sometimes needs to perform disk I/O under tight time constraints and without affecting the timing of other activities such as data collection. This chapter covers techniques that IRIX supports that can help you meet these performance goals, including these topics:<INDEXTARGET ID="RPPG_ch051"><!-- POSTPROCESSDATA: RPPG_ch051|real-time program:disk I/O by --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="13930" TYPE="TITLE">&ldquo;Memory-Mapped I/O&rdquo;</XREF> points out the uses of mapping a file into memory.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="50967" TYPE="TITLE">&ldquo;Asynchronous I/O&rdquo;</XREF> describes the use of the asynchronous I/O feature of IRIX version 5.3 and later.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="14806" TYPE="TITLE">&ldquo;Guaranteed-Rate I/O (GRIO)&rdquo;</XREF> describes the use of the guaranteed-rate feature of XFS.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="13930">Memory-Mapped I/O</TITLE><PARAGRAPH>When an input file has a fixed size, the simplest as well as the fastest access method is to map the file into memory (for details on mapping files and other objects into memory, see the book <INDEXTARGET ID="RPPG_ch052"><!-- POSTPROCESSDATA: RPPG_ch052|memory mapping:for I/O --><DOCTITLE>Topics in IRIX Programming</DOCTITLE>). A file that represents a data base of some kind&mdash;for example a file of scenery elements, or a file containing a precalculated table of operating parameters for simulated hardware&mdash;is best mapped into memory and accessed as a memory array. A mapped file of reasonable size can be locked into memory so that access to it is always fast.</PARAGRAPH>
<PARAGRAPH>You can also perform output on a memory-mapped file simply by storing into the memory image. When the mapped segment is also locked in memory, you control when the actual write takes place. Output happens only when the program calls <FUNCTION>msync()</FUNCTION> or changes the mapping of the file. At that time the modified pages are written. (See the <REFPAGE>msync(2)</REFPAGE> reference page.) The time-consuming call to <FUNCTION>msync()</FUNCTION> can be made from an asynchronous process. </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="50967">Asynchronous I/O</TITLE><PARAGRAPH>You can use asynchronous I/O to isolate the real-time processes in your program from the unpredictable delays caused by I/O. Asynchronous I/O is implemented in IRIX to conform with the POSIX real-time specification 1003.1c. The details of asynchronous I/O are covered at more length in the manual <INDEXTARGET ID="RPPG_ch053"><!-- POSTPROCESSDATA: RPPG_ch053|asynchronous I/O --><DOCTITLE>Topics in IRIX Programming</DOCTITLE> (see <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>).</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Conventional Synchronous I/O</TITLE><PARAGRAPH>Conventional I/O in UNIX is synchronous; that is, the process that requests the I/O is blocked until the I/O has completed. The effects are different for input and for output.</PARAGRAPH>
<PARAGRAPH>For disk files, the process that calls <FUNCTION>write()</FUNCTION> is normally delayed only as long as it takes to copy the output data to a buffer in kernel address space. The device driver schedules the device write and returns. The actual disk output is asynchronous. As a result, most output requests are blocked for only a short time. However, since a number of disk writes could be pending, the true state of a file on disk is unknown until the file is closed.</PARAGRAPH>
<PARAGRAPH>In order to make sure that all data has been written to disk successfully, a process can call <FUNCTION>fsync()</FUNCTION> for a conventional file or <FUNCTION>msync()</FUNCTION> for a memory-mapped file (see the <REFPAGE>fsync(2)</REFPAGE> and <REFPAGE>msync(2)</REFPAGE> reference pages). The process that calls these functions is blocked until all buffered data has been written. </PARAGRAPH>
<PARAGRAPH>Devices other than disks may block the calling process until the output is complete. It is the device driver logic that determines whether a call to <FUNCTION>write()</FUNCTION> blocks the caller, and for how long. Device drivers for VME devices are often supplied by third parties.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="73732">Asynchronous I/O Basics</TITLE><PARAGRAPH>A real-time process needs to read or write a device, but it cannot tolerate an unpredictable delay. One obvious solution can be summarized as &ldquo;call <FUNCTION>read()</FUNCTION> or <FUNCTION>write()</FUNCTION> from a different process, and run that process in a different CPU.&rdquo; This is the essence of asynchronous I/O. You could implement an asynchronous I/O scheme of your own design, and you may wish to do so in order to integrate the I/O closely with your own design of processes and data structures. However, a standard solution is available.</PARAGRAPH>
<PARAGRAPH>IRIX (since version 5.3) supports asynchronous I/O library calls conforming to POSIX document 1003.1b-1993. You use relatively simple calls to initiate input or output. The library package handles the details of<INDEXTARGET ID="RPPG_ch054"><!-- POSTPROCESSDATA: RPPG_ch054|asynchronous I/O:POSIX 1003.1b-1993 --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>initiating several lightweight processes to perform I/O</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>allocating a shared memory arena and the locks, semaphores, and/or queues used to coordinate between the I/O processes</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>queueing multiple input or output requests to each of multiple file descriptors</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>reporting results back to your processes, either on request, through signals, or through callback functions</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="14806">Guaranteed-Rate I/O (GRIO)</TITLE><PARAGRAPH>Under specific conditions, your program can demand a guaranteed rate of data transfer. You can use this feature, for example, to ensure input of picture data for real-time video display, or to ensure disk output of high-speed telemetry data capture.<INDEXTARGET ID="RPPG_ch055"><!-- POSTPROCESSDATA: RPPG_ch055|GRIO. <ITALICS>See</ITALICS> guaranteed-rate I/O --><INDEXTARGET ID="RPPG_ch056"><!-- POSTPROCESSDATA: RPPG_ch056|guaranteed-rate I/O --></PARAGRAPH>
<PARAGRAPH>The details of guaranteed-rate I/O (GRIO) are covered at length in two other manuals:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>For an overview of concepts, and for instructions on how to set up and configure a volume for GRIO use, see <DOCTITLE>IRIX Administration: Disks and File Systems</DOCTITLE>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>For an overview of the programming use of GRIO, see <DOCTITLE>Topics In IRIX Programming</DOCTITLE>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Both manuals are listed under <XREF IDREF="96700" TYPE="TITLE">&ldquo;Other Useful Books&rdquo;</XREF>.</PARAGRAPH>
</SECTION1>
</CHAPTER>
