<!-- Produced by version 4.3 (11/99) of SGI Frame/SGIDOCBK SGML translator -->
<CHAPTER ID="LE58397-PARENT"><TITLE ID="LE58397-TITLE">Filesystem Concepts</TITLE><PARA>This chapter explains some important concepts about hard disk <FIRSTTERM>filesystems</FIRSTTERM>, the structure by which files and directories are organized in the IRIX system. The chapter describes the primary type of IRIX filesystem, the XFS filesystem, and other disk filesystems. It explains concepts that are important to filesystem administration such as IRIX directory organization, filesystem features, filesystem types, creating filesystems, mounting and unmounting filesystems, and checking filesystems for consistency.</PARA>
<NOTE><PARA><INDEXTERM ID="ITch5-0"><PRIMARY>CXFS filesystems</PRIMARY>
</INDEXTERM>
For information on CXFS filesystems and the cluster environment they support, see the<CITETITLE>&ensp;CXFS Software Installation and Administration Guide</CITETITLE>.</PARA>
</NOTE>
<PARA>The major sections in this chapter are:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA><XREF LINKEND="LE66458-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE47376-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE57004-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE27132-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE25185-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE70942-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE52633-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE21802-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE58279-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA>&ensp;<XREF LINKEND="LE52771-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE36214-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE97590-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE77933-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE13875-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE16325-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE61658-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE27105-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE30074-PARENT"></PARA></LISTITEM>
</ITEMIZEDLIST>
<PARA>Even if you are familiar with the basic concepts of UNIX filesystems, you should read through the following sections. The IRIX XFS filesystem is slightly different internally from other UNIX filesystems and has slightly different administration commands and procedures.</PARA>
<PARA>Filesystem administration procedures are described in <XREF LINKEND="LE35942-TITLE">, and <XREF LINKEND="LE46919-TITLE">.</PARA><PARA>For information about floppy and CD-ROM filesystems, see the guide <LINK BOOK="IA_Periphrls" EXTREF="80575">IRIX Admin: Peripheral Devices</LINK>
.</PARA>
<SECTION  ID="LE66458-PARENT"><TITLE  ID="LE66458-TITLE">IRIX Directory Organization</TITLE><PARA><INDEXTERM ID="ITch5-1"><PRIMARY>directory organization</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-2"><PRIMARY>IRIX directory organization</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-3"><PRIMARY>directories</PRIMARY>
<SECONDARY>standard IRIX</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-4"><PRIMARY>symbolic links</PRIMARY>
<SECONDARY>for older pathnames</SECONDARY>
</INDEXTERM>
Every IRIX system disk contains some standard directories. These directories contain operating system files organized by function. This organization is not entirely logical; it has evolved over time and has its roots in several versions of UNIX. <XREF LINKEND="LE22066-TITLE"> lists the standard directories that most systems have. It also lists alternate names for those directories in some cases. The alternate names are usually an older pathname for the directory and are provided (as symbolic links) to ease the transition from old pathnames to new pathnames as the IRIX directory organization evolves. </PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE22066-TITLE">Standard Directories and Their Contents</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="224*">
<COLSPEC COLWIDTH="192*">
<COLSPEC COLWIDTH="378*">
<THEAD><ROW><ENTRY><PARA>Directory</PARA></ENTRY>
<ENTRY><PARA>Alternate Name</PARA></ENTRY>
<ENTRY><PARA>Contents</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><FILENAME>/</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>The root directory, contains the IRIX kernel 
(<FILENAME>/unix</FILENAME>)<INDEXTERM ID="ITch5-5"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>standard directories</SECONDARY>
</INDEXTERM>
, login files for the root login, and all 
other subdirectories </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/CDROM</FILENAME>&ensp;</PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Mount point for CDROMs, used by the 
<COMMAND>mediad</COMMAND> daemon</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/dev</FILENAME>&ensp;</PARA><PARA></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Device files for terminals, disks, tape drives, 
CD-ROM drives, and so on </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/dev/fd </FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>File descriptor filesystem </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/etc</FILENAME>&ensp;</PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Critical system configuration files and 
maintenance commands </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/etc/config</FILENAME>&ensp;</PARA></ENTRY>
<ENTRY><PARA><FILENAME>/var/config</FILENAME>, 
<FILENAME>/usr/var/config</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Configuration files for the scripts in 
<FILENAME>/etc/init.d </FILENAME></PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/etc/init.d</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Scripts that execute during system 
initialization (the <FILENAME>/etc/rc0.d</FILENAME> and 
<FILENAME>/etc/rc2.d</FILENAME> directories serve a similar 
purpose)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/hosts</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Default mount point for NFS filesystems 
mounted by <COMMAND>autofs</COMMAND></PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/hw</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Hardware graph filesystem</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/lib</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Critical compiler binaries and libraries</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/lib32</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Critical compiler binaries and libraries</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/lib64</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Critical compiler binaries and libraries for 
64-bit systems (IP19, IP21, IP25, IP26, IP27, 
IP28 and IP30)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/lost+found</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Holding area for files recovered by the 
<COMMAND>xfs_repair</COMMAND> and <COMMAND>fsck</COMMAND> commands (there is 
also a <FILENAME>/lost+found</FILENAME> directory in the root of 
all mounted XFS and EFS filesystems)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/ns</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Default mount point for pseudo-filesystem 
interface to the Unified Name Service (UNS) 
supported by the <COMMAND>nsd</COMMAND> daemon. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/opt</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Installation location for some third-party 
software</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/proc</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/debug</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Process (<FILENAME>debug</FILENAME>) filesystem</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/sbin</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Commands needed for minimal system 
operability</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/stand</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Standalone utilities (<COMMAND>fx</COMMAND>)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/tmp</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Temporary files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/tmp_mnt</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Mount point for automounted filesystems</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>On some systems, a filesystem mount point<INDEXTERM ID="ITch5-6"><PRIMARY><FILENAME>usr</FILENAME>
 filesystem</PRIMARY>
<SECONDARY><FILENAME>standard directories</FILENAME>
</SECONDARY>
</INDEXTERM>
</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/bin</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/bin</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Commands</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/bin/X11</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Most standard X window system executables</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/bsd</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Commands</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/demos</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Demo programs</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/etc</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Critical system configuration files and 
maintenance commands</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/freeware</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Location of unsupported free software</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/gnu</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>GNU utilities</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/include</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>C header files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/lib</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Libraries and support files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/lib32</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Libraries and support files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/lib32/internal</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Dynamic shared objects (DSOs) used by 
programs shipped by Silicon Graphics, Inc. 
(not used for compilation)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/lib64</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Libraries and support files for 64-bit systems 
(IP19, IP21, IP25, IP26, IP27, IP28 and IP30)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/lib64/internal</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Dynamic shared objects (DSOs) used by 
programs shipped by Silicon Graphics, Inc. 
(not used for compilation)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/Motif-1.2</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Motif 1.2-specific binaries, headers, and libs</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/people</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Home directories</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/relnotes</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Release notes</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/sbin</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Commands</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/share</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Shared data files for various applications (can 
be mounted via NFS as read-only)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/share/Insight</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>InSight books</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/share/catman</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Reference pages (man pages)</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/usr/var</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Present if <FILENAME>/</FILENAME> and <FILENAME>/usr</FILENAME> are separate filesystems</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>System files likely to be customized or 
machine-specific</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/X11</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>X11 configuration files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/adm</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/usr/adm</FILENAME></PARA></ENTRY>
<ENTRY><PARA>System log files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/inst</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Software installation history</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/inst/patchbase</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Original installed files replaced in patches</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/mail</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/usr/mail</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Incoming mail</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/ns</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>Protocol-specific dynamic shared objects 
(DSOs) and cache files for the <COMMAND>nsd</COMMAND> daemon</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/preserve</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/usr/preserve</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Temporary editor files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/spool</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/usr/spool</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Printer support files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/tmp</FILENAME></PARA></ENTRY>
<ENTRY><PARA><FILENAME>/usr/tmp</FILENAME></PARA></ENTRY>
<ENTRY><PARA>Temporary files</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><FILENAME>/var/yp</FILENAME></PARA></ENTRY>
<ENTRY><PARA></PARA></ENTRY>
<ENTRY><PARA>NIS commands</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
<SECTION  ID="LE47376-PARENT"><TITLE  ID="LE47376-TITLE">General Filesystem Concepts</TITLE><PARA><INDEXTERM ID="ITch5-7"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>definition</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-8"><PRIMARY>filesystems</PRIMARY>
<SECONDARY><EMPHASIS>See also</EMPHASIS>
 EFS filesystems, XFS filesystems.</SECONDARY>
</INDEXTERM>
A <FIRSTTERM>filesystem</FIRSTTERM> is a data structure that organizes files and directories on a disk partition so that they can be easily retrieved. Only one filesystem can reside on a disk partition.</PARA>
<PARA><INDEXTERM ID="ITch5-9"><PRIMARY>files</PRIMARY>
<SECONDARY>definition</SECONDARY>
</INDEXTERM>
A <FIRSTTERM>file</FIRSTTERM> is a one-dimensional array of bytes with no other structure implied. Information about each file is stored in structures called <FIRSTTERM>inodes</FIRSTTERM> (inodes are described in <XREF LINKEND="LE98055-PARENT">). Files cannot span filesystems.</PARA><PARA><INDEXTERM ID="ITch5-10"><PRIMARY>directories</PRIMARY>
<SECONDARY>definition</SECONDARY>
</INDEXTERM>
A <FIRSTTERM>directory</FIRSTTERM> is a container that stores files and other directories. It is merely another type of file that the user is permitted to use, but not allowed to write; the operating system itself retains the responsibility for writing directories. Directories cannot span filesystems. The combination of directories and files make up a filesystem. </PARA>
<PARA><INDEXTERM ID="ITch5-11"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>definition</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-12"><PRIMARY><FILENAME>/</FILENAME>
 filesystem. <FILENAME></FILENAME>
<EMPHASIS>See</EMPHASIS>
 root filesystem.</PRIMARY>
</INDEXTERM>
The starting point of any filesystem is an unnamed directory that serves as the root for that particular filesystem. In the IRIX operating system there is always one filesystem that is itself referred to by that name, the root filesystem. Traditionally, the root directory of the root filesystem is represented by a single slash (/). Filesystems are attached to the directory hierarchy by the <COMMAND>mount</COMMAND> command. The result is the IRIX directory structure shown in <XREF LINKEND="LE29426-TITLE">.</PARA><PARA><FIGURE><GRAPHIC FILEREF="IRIX.filesystem.gif" LOCATION="INLINE" SCALE="NO"></GRAPHIC>
<TITLE  ID="LE29426-TITLE">The IRIX Filesystem<INDEXTERM ID="ITch5-13"><PRIMARY>mounting filesystems</PRIMARY>
<SECONDARY>illustration</SECONDARY>
</INDEXTERM>
</TITLE>
</FIGURE>
</PARA>
<PARA>You can join two or more disk partitions to create a <FIRSTTERM>logical volume</FIRSTTERM>. The logical volume can be treated as if it were a single disk partition, so a filesystem can reside on a logical volume and hence is the only way for a single filesystem to span more than one disk. For more information on XLV logical volumes, see <XREF LINKEND="LE37920-TITLE">.</PARA><PARA>The following subsections describe key components of filesystems.</PARA>
<SECTION  ID="LE98055-PARENT"><TITLE  ID="LE98055-TITLE">Inodes</TITLE><PARA><INDEXTERM ID="ITch5-14"><PRIMARY>inodes</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-15"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>inodes</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-16"><PRIMARY>files</PRIMARY>
<SECONDARY>information in inodes</SECONDARY>
</INDEXTERM>
Information about each file is stored in a structure called an <FIRSTTERM>inode</FIRSTTERM>. The word inode is an abbreviation of the term <FIRSTTERM>index node</FIRSTTERM>. An inode is a data structure that stores all information about a file except its name, which is stored in the directory. Each inode has an identifying inode number, which is unique across the filesystem that includes the file.</PARA>
<PARA>An inode contains the following information:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>The type of the file (see <XREF LINKEND="LE59407-PARENT"> for more information)</PARA></LISTITEM>
<LISTITEM><PARA>The access mode of the file; the mode defines the access permissions <FIRSTTERM>read</FIRSTTERM>, <FIRSTTERM>write</FIRSTTERM>, and <FIRSTTERM>execute</FIRSTTERM> and may also contain security labels and access control lists</PARA>
</LISTITEM>
<LISTITEM><PARA>The number of hard links to the file (see <XREF LINKEND="LE65506-PARENT"> for more information)</PARA></LISTITEM>
<LISTITEM><PARA>Who owns the file (the owner's user-ID number) and the group to which the file belongs (the group-ID number) </PARA>
</LISTITEM>
<LISTITEM><PARA>The size of the file in bytes</PARA>
</LISTITEM>
<LISTITEM><PARA>The date and time the file was last accessed, and last modified</PARA>
</LISTITEM>
<LISTITEM><PARA>Information for finding the file's data within the disk partition or logical volume</PARA>
</LISTITEM>
<LISTITEM><PARA>The pathname of symbolic links (when they fit and on XFS filesystems only)</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>You can use the <COMMAND>ls</COMMAND> command with various options to display the information stored in inodes. For example, the command <COMMAND>ls -l</COMMAND> displays all but the last two items in the list above in the order listed (the date shown is the last modified time). </PARA>
<PARA>Inodes do not contain the name of the file or its directory.</PARA>
</SECTION>
<SECTION  ID="LE59407-PARENT"><TITLE  ID="LE59407-TITLE">Types of Files</TITLE><PARA><INDEXTERM ID="ITch5-17"><PRIMARY>files</PRIMARY>
<SECONDARY>types</SECONDARY>
</INDEXTERM>
Filesystems can contain the types of files listed <XREF LINKEND="LE12155-TITLE">. The type of a file is indicated by the first character in the line of <COMMAND>ls -l</COMMAND> output for the file.</PARA>
<TABLE FRAME="topbot"><TBLTITLE  ID="LE12155-TITLE">Types of Files</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="206*">
<COLSPEC COLWIDTH="124*">
<COLSPEC COLWIDTH="458*">
<THEAD><ROW><ENTRY><PARA>Type of File</PARA></ENTRY>
<ENTRY><PARA>Character</PARA></ENTRY>
<ENTRY><PARA>Description</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA>Regular files </PARA></ENTRY>
<ENTRY><PARA>&ndash;</PARA></ENTRY>
<ENTRY><PARA>Regular files are one-dimensional arrays of bytes. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>Directories </PARA></ENTRY>
<ENTRY><PARA>d</PARA></ENTRY>
<ENTRY><PARA>Directories are containers for files and other directories.<INDEXTERM ID="ITch5-18"><PRIMARY>directories</PRIMARY>
<SECONDARY>as a type of file</SECONDARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>Symbolic links </PARA></ENTRY>
<ENTRY><PARA>l</PARA></ENTRY>
<ENTRY><PARA>Symbolic links are files that contain the name of another 
file or a directory.<INDEXTERM ID="ITch5-19"><PRIMARY>symbolic links</PRIMARY>
<SECONDARY>as a type of file</SECONDARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>Character devices </PARA></ENTRY>
<ENTRY><PARA>c</PARA></ENTRY>
<ENTRY><PARA>Character devices enable communication between 
hardware and IRIX; data is accessed on a character by 
character basis.<INDEXTERM ID="ITch5-20"><PRIMARY>character device files</PRIMARY>
<SECONDARY>as a type of file</SECONDARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>Block devices </PARA></ENTRY>
<ENTRY><PARA>b</PARA></ENTRY>
<ENTRY><PARA>Block devices enable communication between hardware 
and IRIX; data is accessed in blocks from a system buffer 
cache.<INDEXTERM ID="ITch5-21"><PRIMARY>block device files</PRIMARY>
<SECONDARY>as a type of file</SECONDARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>Named pipes (also 
known as FIFOs) </PARA></ENTRY>
<ENTRY><PARA>p</PARA></ENTRY>
<ENTRY><PARA>Named pipes allow communication between two 
unrelated processes running on the same host. They are 
created with the <COMMAND>mknod</COMMAND> command (see the <COMMAND>mknod</COMMAND>(1M) 
reference page for more information on <COMMAND>mknod</COMMAND>).<INDEXTERM ID="ITch5-22"><PRIMARY>named pipes</PRIMARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA>UNIX domain sockets </PARA></ENTRY>
<ENTRY><PARA>s</PARA></ENTRY>
<ENTRY><PARA>UNIX domain sockets are connections between 
processes that allow them to communicate, possibly 
over a network.<INDEXTERM ID="ITch5-23"><PRIMARY>UNIX domain sockets</PRIMARY>
</INDEXTERM>
&ensp;</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
<SECTION  ID="LE65506-PARENT"><TITLE  ID="LE65506-TITLE">Hard Links and Symbolic Links</TITLE><PARA><INDEXTERM ID="ITch5-24"><PRIMARY>files</PRIMARY>
<SECONDARY>and hard links</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-25"><PRIMARY>files</PRIMARY>
<SECONDARY>and symbolic links</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-26"><PRIMARY>hard links</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-27"><PRIMARY>links</PRIMARY>
</INDEXTERM>
As discussed in <XREF LINKEND="LE98055-PARENT">, information about each file, except for the name and directory of the file, is stored in an inode for the file. The name of the file is stored in the file's directory and a link to the file is created by associating the filename with an inode number. This type of link is called a <FIRSTTERM>hard link</FIRSTTERM>. Although every file is a hard link, the term is usually used only when two or more filenames are associated with the same inode number. Because inode numbers are unique only within a filesystem, hard links cannot be created across filesystem boundaries.</PARA>
<PARA><INDEXTERM ID="ITch5-28"><PRIMARY><COMMAND>ln</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>creating hard links</COMMAND>
</SECONDARY>
</INDEXTERM>
The second and later hard links to a file are created with the <COMMAND>ln</COMMAND> command, without the <COMMAND>-s</COMMAND> option. For example, suppose the current directory contains a file called <FILENAME>origfile</FILENAME>. To create a hard link called <FILENAME>linkfile</FILENAME> to the file <FILENAME>origfile</FILENAME>, enter this command:</PARA>
<PROGRAMLISTING>
% <USERINPUT>ln origfile linkfile</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>The output of <COMMAND>ls -l</COMMAND> for <FILENAME>origfile</FILENAME> and <FILENAME>linkfile</FILENAME> shows identical sizes and last modification times:</PARA>
<PROGRAMLISTING>
% <USERINPUT>ls -l origfile linkfile</USERINPUT>
-rw-rw-r--    2 joyce    user         4 Apr  5 11:15 origfile
-rw-rw-r--    2 joyce    user         4 Apr  5 11:15 linkfile
</PROGRAMLISTING>
<PARA>Because <FILENAME>origfile</FILENAME> and <FILENAME>linkfile</FILENAME> are simply two names for the same file, changes in the contents of the file are visible when using either filename. Removing one of the links has no effect on the other. The file is not removed until there are no links to it (the number of links to the file, the <EMPHASIS>link count</EMPHASIS>, is stored in the file's inode).</PARA>
<PARA><INDEXTERM ID="ITch5-29"><PRIMARY>symbolic links</PRIMARY>
<SECONDARY>as a type of file</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-30"><PRIMARY>symbolic links</PRIMARY>
<SECONDARY>dangling</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-31"><PRIMARY>symbolic links</PRIMARY>
<SECONDARY>definition</SECONDARY>
</INDEXTERM>
Another type of link is the <FIRSTTERM>symbolic link</FIRSTTERM>. This type of link is actually a file (see <XREF LINKEND="LE12155-TITLE">). The file contains a text string, which is the pathname of another file or directory. Because a symbolic link is a file, it has its own owners and permissions. The file or directory it points to can be in another filesystem. If the file or directory that a symbolic link points to is removed, it is no longer available and the symbolic link becomes useless until the target is recreated (it is called a <FIRSTTERM>dangling symbolic link</FIRSTTERM>). </PARA>
<PARA><INDEXTERM ID="ITch5-32"><PRIMARY><COMMAND>ln</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>creating symbolic links</COMMAND>
</SECONDARY>
</INDEXTERM>
Symbolic links are created with the <COMMAND>ln</COMMAND> command with the <COMMAND>-s</COMMAND> option. For example, to create a symbolic link called <FILENAME>linkdir</FILENAME> to the directory <FILENAME>origdir</FILENAME>:</PARA>
<PROGRAMLISTING>
% <USERINPUT>ln -s origdir linkdir</USERINPUT>
</PROGRAMLISTING>
<PARA>The output of <COMMAND>ls -ld</COMMAND> for the symbolic link is shown below. Notice that the permissions and other information do not match. The listing for <FILENAME>linkdir</FILENAME> shows that it is a symbolic link to <FILENAME>origdir</FILENAME>. </PARA>
<PROGRAMLISTING>
% <USERINPUT>ls -ld linkdir origdir</USERINPUT>
drwxrwxrwt  13 sys     sys  2048 Apr  5 11:37 origdir
lrwxrwxr-x   1 joyce   user    8 Apr  5 11:52 linkdir -&gt; origdir
</PROGRAMLISTING>
<PARA>When you use &ldquo;..&rdquo; in pathnames that involve symbolic links, be aware that &ldquo;..&rdquo; refers to the parent directory of the true file or directory, not the parent of the directory that contains the symbolic link. </PARA>
<PARA>For more information about hard and symbolic links, see the <COMMAND>ln</COMMAND>(1) reference page and experiment with creating and removing hard and symbolic links.</PARA>
</SECTION>
<SECTION  ID="LE10894-PARENT"><TITLE  ID="LE10894-TITLE">Filesystem Names</TITLE><PARA><INDEXTERM ID="ITch5-33"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>names</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-34"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>names</SECONDARY>
</INDEXTERM>
Filesystems do not have names per se; they are identified by their location on a disk or their position in the directory structure as follows:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>By the block and character device file names of the disk partition or logical volume that contains the filesystem (see <XREF LINKEND="LE45920-TITLE">)</PARA></LISTITEM>
<LISTITEM><PARA>By a mnemonic name for the disk partition or logical volume that contains the filesystem (see <XREF LINKEND="LE50592-TITLE">)</PARA></LISTITEM>
<LISTITEM><PARA>By the mount point for the filesystem (see <XREF LINKEND="LE97590-PARENT">)</PARA></LISTITEM>
</ITEMIZEDLIST>
<PARA>The filesystem identifier from the list above that you use with commands that administer filesystems (such as <COMMAND>mkfs</COMMAND>, <COMMAND>mount</COMMAND>, <COMMAND>umount</COMMAND>, and <COMMAND>fsck</COMMAND>) depends upon the command. See the reference page for the command you want to use or examples in this guide to determine which filesystem name to use.</PARA>
</SECTION>
</SECTION>
<SECTION  ID="LE57004-PARENT"><TITLE  ID="LE57004-TITLE">XFS Filesystems</TITLE><PARA><INDEXTERM ID="ITch5-35"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>features</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-36"><PRIMARY>hardware requirements</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-37"><PRIMARY>prerequisite hardware</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-38"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
XFS is an IRIX filesystem designed for use on most Silicon Graphics systems&mdash;from desktop systems to supercomputer systems. Its major features include:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Full 64-bit file capabilities (files larger than 2 GB)</PARA>
</LISTITEM>
<LISTITEM><PARA>Rapid and reliable recovery after system crashes because of journaling technology</PARA>
</LISTITEM>
<LISTITEM><PARA>Efficient support of large, sparse files (files with &ldquo;holes&rdquo;)</PARA>
</LISTITEM>
<LISTITEM><PARA>Integrated, full-function volume manager, the XLV Volume Manager</PARA>
</LISTITEM>
<LISTITEM><PARA>Extremely high I/O performance that scales well on multiprocessing systems</PARA>
</LISTITEM>
<LISTITEM><PARA>Guaranteed-rate I/O for multimedia and data acquisition uses</PARA>
</LISTITEM>
<LISTITEM><PARA>Compatibility with existing applications and with NFS</PARA>
</LISTITEM>
<LISTITEM><PARA>User-specified filesystem block sizes ranging from 512 bytes up to 64 KB</PARA>
</LISTITEM>
<LISTITEM><PARA>Small directories and symbolic links of 156 characters or less take no space</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>At least 32 MB of memory is recommended for systems with XFS filesystems. </PARA>
<PARA><INDEXTERM ID="ITch5-39"><PRIMARY>NFS compatibility</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-40"><PRIMARY>compatibility</PRIMARY>
<SECONDARY>NFS</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-41"><PRIMARY>compatibility</PRIMARY>
<SECONDARY>32-bit programs and XFS</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-42"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>maximum file size</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-43"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>maximum filesystem size</SECONDARY>
</INDEXTERM>
XFS supports files and filesystems of 2<SUPERSCRIPT>40</SUPERSCRIPT>-1 or 1,099,511,627,775 bytes (one terabyte) on 32-bit systems (IP17, IP20, IP22, and IP32). Files up to 2<SUPERSCRIPT>63</SUPERSCRIPT>-1 bytes and filesystems of unlimited size are supported on 64-bit systems (IP19, IP21, IP25, IP26, and IP27). You can use the filesystem interfaces supplied with the IRIS Development Option (IDO) software option to write 32-bit programs that can track 64-bit position and file size. Many programs work without modification because sequential reads succeed even on files larger than 2 GB. NFS allows you to export 64-bit XFS filesystems to other systems.</PARA>
<PARA><INDEXTERM ID="ITch5-44"><PRIMARY>journaling information</PRIMARY>
</INDEXTERM>
XFS uses database journaling technology to provide high reliability and rapid recovery. Recovery after a system crash is completed within a few seconds, without the use of a filesystem checker such as the <COMMAND>fsck</COMMAND> command. Recovery time is independent of filesystem size.</PARA>
<PARA>XFS is designed to be a very high performance filesystem. Under certain conditions, throughput exceeds 100 MB per second. Its performance scales to complement the CHALLENGE MP architecture and the ORIGIN 2000 architecture. While traditional filesystems suffer from reduced performance as they grow in size, with XFS there is no performance penalty.</PARA>
<PARA><INDEXTERM ID="ITch5-45"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>block sizes</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-46"><PRIMARY>block sizes</PRIMARY>
<SECONDARY>range of sizes</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-47"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>extents</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-48"><PRIMARY>extents</PRIMARY>
<SECONDARY>XFS filesystem</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-49"><PRIMARY><COMMAND>fcntl</COMMAND>
 system call</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-50"><PRIMARY>inodes</PRIMARY>
<SECONDARY>XFS filesystems</SECONDARY>
</INDEXTERM>
You can create filesystems with block sizes ranging from 512 bytes to 64 KB. For real-time data, the maximum <FIRSTTERM>extent</FIRSTTERM> size is 1 GB. Filesystem extents, which provide for contiguous data within a file, are created automatically for normal files and may be configured at file creation time for real-time files using the <COMMAND>fcntl()</COMMAND> system call. Extents are multiples of a filesystem block. Inodes are created as needed by XFS filesystems. You can specify the size of inodes with the <COMMAND>-i</COMMAND> option to the filesystem creation command, <COMMAND>mkfs</COMMAND>. You can also specify the maximum percentage of the space in a filesystem that can be occupied by inodes with the <COMMAND>-i maxpct=</COMMAND> option of the <COMMAND>mkfs</COMMAND> command.</PARA>
<PARA><INDEXTERM ID="ITch5-51"><PRIMARY>Extended Attributes</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-52"><PRIMARY>attributes</PRIMARY>
</INDEXTERM>
A feature of XFS filesystems called extended attributes enables users and applications to associate name and value pairs to files, directories, symbolic links, and inodes. These name and value pairs are called attributes and can be set and displayed with the <COMMAND>attr</COMMAND> command. For more information see the, <COMMAND>attr</COMMAND>(1) reference page.</PARA>
<PARA>Two features of XFS filesystems enable applications to control their I/O bandwidth allocation. Guaranteed-rate I/O, described in <XREF LINKEND="LE40515-TITLE">, enables a process to receive data from a system resource at a predefined rate, regardless of other activity on the system. Priority I/O, described in the <COMMAND>prio</COMMAND><COMMAND>(5)</COMMAND> reference page, enables a process to reserve a portion of the system's resources for its exclusive use for a period of time.</PARA>
<PARA><INDEXTERM ID="ITch5-53"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>and standard commands</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-54"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>commands</SECONDARY>
</INDEXTERM>
Most filesystem commands, such as <COMMAND>du</COMMAND>, <COMMAND>dvhtool</COMMAND>, <COMMAND>ls</COMMAND>, <COMMAND>mount</COMMAND>, <COMMAND>prtvtoc</COMMAND>, and <COMMAND>umount</COMMAND>, work with XFS filesystems with no user-visible changes. A few commands, such as <COMMAND>df</COMMAND>,<COMMAND>&ensp;fx</COMMAND>, and <COMMAND>mkfs</COMMAND> have additional features for XFS. The filesystem commands <COMMAND>clri</COMMAND>, <COMMAND>fsck</COMMAND>,<COMMAND>&ensp;findblk</COMMAND>, and <COMMAND>ncheck</COMMAND> are not used with XFS filesystems.</PARA>
<PARA><INDEXTERM ID="ITch5-55"><PRIMARY>backup and restore</PRIMARY>
<SECONDARY>commands</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-56"><PRIMARY>compatibility</PRIMARY>
<SECONDARY><COMMAND>dump/restore</COMMAND>
 and filesystem type</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-57"><PRIMARY><COMMAND>xfsrestore</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-58"><PRIMARY><COMMAND>xfsdump</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-59"><PRIMARY><COMMAND>restore</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>and XFS filesystems</COMMAND>
</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-60"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY><COMMAND>restore</COMMAND>
 compatibility</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-61"><PRIMARY><COMMAND>dump</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>when to use</COMMAND>
</SECONDARY>
</INDEXTERM>
For backup and restore, use the standard IRIX commands <COMMAND>backup</COMMAND>,<COMMAND>&ensp;bru</COMMAND>,<COMMAND>&ensp;cpio</COMMAND>, <COMMAND>restore</COMMAND>, and <COMMAND>tar</COMMAND> and the optional software product NetWorker for IRIX for files smaller than 2 GB. To dump XFS filesystems, the command <COMMAND>xfsdump</COMMAND> must be used instead of <COMMAND>dump</COMMAND>. Restoring from these dumps is done using <COMMAND>xfsrestore</COMMAND>. For more information about the relationships between <COMMAND>xfsdump</COMMAND>, <COMMAND>xfsrestore</COMMAND>, <COMMAND>dump</COMMAND>, and <COMMAND>restore</COMMAND> on XFS filesystems, see the <LINK BOOK="IA_BakSecAcc" EXTREF="65445">&ldquo;About xfsdump and xfsrestore&rdquo;</LINK>
 section of the &ldquo;Backup and Recovery Procedures&rdquo; chapter of <CITETITLE>IRIX Admin: Backup, Security, and Accounting</CITETITLE>.</PARA>
</SECTION>
<SECTION  ID="LE27132-PARENT"><TITLE  ID="LE27132-TITLE"><INDEXTERM ID="ITch5-62"><PRIMARY>CXFS filesystems</PRIMARY>
</INDEXTERM>
CXFS Filesystems</TITLE><PARA>CXFS is a clustered XFS filesystem that allows for logical file sharing, as with networked filesystems, but with significant performance and functionality advantages.CXFS runs on top of a storage area network (SAN), where each computer system in the cluster has direct high-speed data channels to a shared set of disks. Running CXFS requires a FLEXlm license key.</PARA>
<PARA>For information about the features of CXFS filesystems as well as information about installing and administering CXFS filesystems, see the<CITETITLE>&ensp;CXFS Software Installation and Administration Guide</CITETITLE>.</PARA>
</SECTION>
<SECTION  ID="LE25185-PARENT"><TITLE  ID="LE25185-TITLE">EFS Filesystems</TITLE><NOTE><PARA>Support for EFS filesystems will be discontinued in a future IRIX release. For information on converting EFS filesystems to XFS filesystems, see <XREF LINKEND="LE35942-TITLE">.</PARA></NOTE><PARA><INDEXTERM ID="ITch5-63"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-64"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>maximum file size</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-65"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>maximum filesystem size</SECONDARY>
</INDEXTERM>
The EFS filesystem is the original IRIX filesystem. It contains an enhancement to the standard UNIX filesystem called <FIRSTTERM>extents</FIRSTTERM>, and thus is called the Extent File System (EFS). The maximum size of an EFS filesystem is about 8 GB. It uses a filesystem block size of 512 bytes and allows a maximum file size of 2 GB minus 1 byte.</PARA>
<PARA>Information on EFS filesystems and their administration is provided in <XREF LINKEND="LE81344-TITLE">.</PARA></SECTION>
<SECTION  ID="LE70942-PARENT"><TITLE  ID="LE70942-TITLE">Network File Systems (NFS)</TITLE><PARA><INDEXTERM ID="ITch5-66"><PRIMARY>NFS filesystems</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-67"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>NFS</SECONDARY>
</INDEXTERM>
NFS filesystems are available if you are using the optional NFS software. NFS filesystems are filesystems that are exported from one host and mounted on other hosts across a network.</PARA>
<PARA><INDEXTERM ID="ITch5-68"><PRIMARY><COMMAND>exportfs</COMMAND>
 command</PRIMARY>
</INDEXTERM>
On the hosts where the filesystems reside, they are treated just like any other XFS filesystem. The only special feature of these filesystems is that they are exported for mounting from other workstations. Exporting NFS filesystems is done with the <COMMAND>exportfs</COMMAND> command. On other hosts, these filesystems are mounted with the <COMMAND>mount</COMMAND> command or by using the automount facility of NFS.</PARA>
<TIP><PARA>The section <LINK BOOK="PerSysAdmin" EXTREF="80339">&ldquo;Making Your Disk Space Available to Other Users&rdquo;</LINK>
 in Chapter 4 of the <CITETITLE>Personal System Administration Guide</CITETITLE> and the section <LINK BOOK="PerSysAdmin" EXTREF="15214">&ldquo;Using Disk Space on Other Systems&rdquo;</LINK>
 in Chapter 5 of the <CITETITLE>Personal System Administration Guide</CITETITLE> provide instructions for mounting and exporting NFS filesystems.</PARA>
</TIP>
<PARA>NFS filesystems are described in detail in the <LINK BOOK="ONC3NFS_AG" EXTREF="25730">ONC3/NFS Administrator's Guide</LINK>
, which is included with the NFS software option.</PARA>
</SECTION>
<SECTION  ID="LE52633-PARENT"><TITLE  ID="LE52633-TITLE">Cache File Systems (CacheFS)</TITLE><PARA><INDEXTERM ID="ITch5-69"><PRIMARY>CacheFS filesystems</PRIMARY>
</INDEXTERM>
The Cache File System (CacheFS) is a new filesystem type that provides client-side caching for NFS and other filesystem types. Using CacheFS on NFS clients with local disk space can significantly increase the number of clients a server can support and reduce the data access time for clients using read-only file systems. </PARA>
<PARA><INDEXTERM ID="ITch5-70"><PRIMARY><COMMAND>cfsadmin</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-71"><PRIMARY>mounting filesystems</PRIMARY>
<SECONDARY>CacheFS filesystems</SECONDARY>
</INDEXTERM>
The <COMMAND>cfsadmin</COMMAND> command is used for managing CacheFS filesystems. A special version of the <COMMAND>fsck</COMMAND>&ensp;<COMMAND>command</COMMAND>, <COMMAND>fsck_cachefs<INDEXTERM ID="ITch5-72"><PRIMARY><COMMAND>fsck_cachefs</COMMAND>
 command</PRIMARY>
</INDEXTERM>
</COMMAND> is used to check the integrity of a cache directory. It is automatically invoked when a CacheFS filesystem is mounted. When mounting and unmounting CacheFS filesystems, the <COMMAND>-t cachefs</COMMAND> option must be used. For more information on these commands, see the <COMMAND>cfsadmin</COMMAND>(1M), <COMMAND>fsck_cachefs</COMMAND>(1M), and <COMMAND>mount</COMMAND>(1M) reference pages.</PARA>
<PARA>CacheFS filesystems are available if you are using the optional NFS software. They are described in detail in the <LINK BOOK="ONC3NFS_AG" EXTREF="25730">ONC3/NFS Administrator's Guide</LINK>
, which is included with the NFS software option.</PARA>
</SECTION>
<SECTION  ID="LE21802-PARENT"><TITLE  ID="LE21802-TITLE"> /proc Filesystem</TITLE><PARA><INDEXTERM ID="ITch5-73"><PRIMARY><FILENAME>/proc</FILENAME>
 filesystems</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-74"><PRIMARY>filesystems</PRIMARY>
<SECONDARY><FILENAME>/proc</FILENAME>
</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-75"><PRIMARY><FILENAME>/debug</FILENAME>
 filesystem</PRIMARY>
</INDEXTERM>
The <COMMAND>/proc</COMMAND> filesystem, also known as the debug filesystem, provides an interface to running IRIX processes for use by monitoring programs, such as <COMMAND>ps</COMMAND> and <COMMAND>top</COMMAND>, and debuggers, such as <COMMAND>dbx</COMMAND>. The debug filesystem is usually mounted on <COMMAND>/proc</COMMAND> with a link to <COMMAND>/debug</COMMAND>. To reduce confusion,<COMMAND>&ensp;/proc</COMMAND> is not displayed when you list free space with the <COMMAND>df</COMMAND> command.</PARA>
<PARA>The &ldquo;files&rdquo; of the debug filesystem are of the form <FILENAME>/proc/</FILENAME><REPLACEABLE>nnnnn</REPLACEABLE> and <FIRSTTERM>/proc/pinfo/</FIRSTTERM><REPLACEABLE>nnnnn</REPLACEABLE>, where <REPLACEABLE>nnnnn</REPLACEABLE> is a decimal number corresponding to a process ID. These files do not consume disk space; they are merely handles for debugging processes. <FILENAME>/proc</FILENAME> files cannot be removed.</PARA>
<PARA>See the <COMMAND>proc</COMMAND>(4) reference page for more information on the debug filesystem.</PARA>
</SECTION>
<SECTION  ID="LE58279-PARENT"><TITLE  ID="LE58279-TITLE">/hw Filesystem</TITLE><PARA><INDEXTERM ID="ITch5-76"><PRIMARY>hardware graph</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-77"><PRIMARY>hwgraph</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-78"><PRIMARY><FILENAME>/hw</FILENAME>
 filesystem</PRIMARY>
</INDEXTERM>
The hardware graph, also known as the <FIRSTTERM>hwgraph</FIRSTTERM>, is a feature of IRIX that facilitates the management of large and topologically complex I/O subsystems. The <FILENAME>/hw</FILENAME> filesystem is a visible reflection of the hwgraph. The <FILENAME>/hw</FILENAME> filesystem is a filesystem type, similar to <FILENAME>/proc</FILENAME>. Like <FILENAME>/proc</FILENAME>, <FILENAME>/hw</FILENAME> is not displayed when you list free space with the <COMMAND>df</COMMAND> command. </PARA>
<NOTE><PARA>The contents of the hardware graph and the links in it may change across hardware and software releases. For this reason, an administrator should use the <FILENAME>/dev</FILENAME> directory as the root of the path for all device file usage, even though the directories under <FILENAME>/dev</FILENAME> are links into <FILENAME>/hw</FILENAME>. For example, you should not use device names under<FILENAME>&ensp;/hw</FILENAME> when mounting filesystems or configuring the root filesystem.</PARA>
</NOTE>
<PARA>The hwgraph is a directed graph, consisting of a set of &ldquo;vertexes&rdquo; (points) that represent hardware entities and &ldquo;edges&rdquo; (lines) that connect the vertexes. Each edge is a one-way linkage from a source vertex to a target vertex (this is the definition of a directed graph). Each edge has a label, a character string that names the edge. A small part of a typical hwgraph is depicted in <XREF LINKEND="LE49657-TITLE">.</PARA><PARA><FIGURE><GRAPHIC FILEREF="typical.hwgraph.gif" LOCATION="INLINE" SCALE="NO"></GRAPHIC>
<TITLE  ID="LE49657-TITLE">Part of a Typical Hwgraph</TITLE>
</FIGURE>
</PARA>
<PARA><XREF LINKEND="LE49657-TITLE"> shows the part of the graph that represents block and character access to the whole-volume partition of a disk. Pathname notation is used to identify each hardware entity (vertex). The pathname consists of each of the edges in the path from the root to the hardware entity. For example, the two paths to each of the block and character devices might be:</PARA><PROGRAMLISTING>
/hw/module/1/io/pci/slot/0/scsi_ctlr/0/target/1/lun/0/disk/volume/block
/hw/module/1/io/pci/slot/0/scsi_ctlr/0/target/1/lun/0/disk/volume/char
/hw/module/1/io/dks0d0vol/block
/hw/module/1/io/dks0d0vol/char
</PROGRAMLISTING>
<PARA><INDEXTERM ID="ITch5-79"><PRIMARY><COMMAND>ioconfig</COMMAND>
 command</PRIMARY>
</INDEXTERM>
The hwgraph is built dynamically (it has no on-disk contents) and changes to reflect changes in the hardware inventory. <XREF LINKEND="LE49657-TITLE"> is color-coded to show the parts of graph are built by the kernel (black), the PCI bus adapter (red), the SCSI controller driver (magenta), and the disk device driver (green). In the hwgraph, logical controller numbers are used for each controller in the I/O subsystem, rather than physical controller numbers. These logical controller numbers are specified in the file <FILENAME>/etc/ioconfig.conf</FILENAME>. For more information, see the <COMMAND>ioconfig</COMMAND>(1M) reference page. The <COMMAND>ioconfig</COMMAND>(1M) reference page also describes the configuration file <FILENAME>/etc/ioperms</FILENAME>, which contains information about the owner, group, and permissions of devices in the hwgraph.</PARA>
<PARA>You can navigate the <FILENAME>/hw</FILENAME> filesystem using commands such as <COMMAND>cd</COMMAND>, <COMMAND>ls</COMMAND>, and <COMMAND>find</COMMAND> and browse it to discover the hardware configuration. Symbolic links to <FILENAME>/hw</FILENAME> paths exist to all the device special filenames that are conventionally expected to exist in <FILENAME>/dev</FILENAME>, with the exception of XLV logical volumes. The symbolic links are implemented by creating them from <FILENAME>/dev</FILENAME> to <FILENAME>/hw</FILENAME>. Here is a typical link:</PARA>
<PROGRAMLISTING>
lrwxr-xr-x    1 root    sys  13 Aug  6 11:23 /dev/root -&gt; /hw/disk/root
</PROGRAMLISTING>
<PARA>Do not remove <FILENAME>/hw</FILENAME>; very little on the system works without it.</PARA>
</SECTION>
<SECTION  ID="LE52771-PARENT"><TITLE  ID="LE52771-TITLE">Foreign Filesystems</TITLE><PARA><INDEXTERM ID="ITch5-80"><PRIMARY>foreign filesystems</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-81"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>foreign filesystems</SECONDARY>
</INDEXTERM>
The IRIX operating system supports four filesystem formats native to other operating systems. These filesystem formats are as follows:</PARA>
<DEFLIST><DEFLISTENTRY><TERM><FILENAME>hfs</FILENAME> (<FILENAME>mac</FILENAME>)</TERM>
<LISTITEM><PARA>The filesystem used by Macintosh computers</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><FILENAME>dos</FILENAME> (<FILENAME>fat</FILENAME>)</TERM>
<LISTITEM><PARA>The filesystem used by IBM-compatible personal computers</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><FILENAME>iso9660</FILENAME> (CD-ROM)</TERM>
<LISTITEM><PARA>A CD-ROM filesystem type conforming to ISO standard 9660</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><FILENAME>cdda</FILENAME></TERM>
<LISTITEM><PARA>Compact disk digital audio</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
<PARA>For further information on the filesystem types that IRIX supports, see the <COMMAND>filesystems</COMMAND>(4) reference page. For information on administering <FILENAME>hfs</FILENAME> and <FILENAME>dos</FILENAME> filesystems, see the <COMMAND>mkfp</COMMAND>(1M) and <COMMAND>fpck</COMMAND>(1M) reference pages.</PARA>
</SECTION>
<SECTION  ID="LE36214-PARENT"><TITLE  ID="LE36214-TITLE">XFS Filesystem Creation</TITLE><PARA><INDEXTERM ID="ITch5-82"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>creating</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-83"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>creating</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-84"><PRIMARY><FILENAME>lost+found</FILENAME>
 directories</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-85"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>creating</SECONDARY>
</INDEXTERM>
To turn a disk partition or logical volume into an XFS filesystem, the <COMMAND>mkfs</COMMAND> command must be used. It takes a disk partition or logical volume and divides it up into areas for data blocks, inodes, and free lists, and writes out the appropriate inode tables, superblocks, and block maps. It creates the filesystem's root directory.</PARA>
<PARA>The following <COMMAND>mkfs</COMMAND> example makes an XFS filesystem with a 1 MB internal log section is:</PARA>
<PROGRAMLISTING>
# <USERINPUT>mkfs -l size=1m /dev/rdsk/dks0d2s7</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>The following <COMMAND>mkfs</COMMAND> example makes an XFS filesystem on a logical volume with log and data subvolumes is:</PARA>
<PROGRAMLISTING>
# <USERINPUT>mkfs /dev/rxlv/a</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>For more instructions on making XFS filesystems see <XREF LINKEND="LE35942-TITLE">, and the <COMMAND>mkfs</COMMAND>(1M) and <COMMAND>mkfs_xfs</COMMAND>(1M) reference pages.</PARA>
</SECTION>
<SECTION  ID="LE97590-PARENT"><TITLE  ID="LE97590-TITLE">Filesystem Mounting and Unmounting</TITLE><PARA><INDEXTERM ID="ITch5-86"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>mounting</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-87"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>mounting</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-88"><PRIMARY>mount point</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-89"><PRIMARY>mounting filesystems</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-90"><PRIMARY>mounting filesystems</PRIMARY>
<SECONDARY>illustration</SECONDARY>
</INDEXTERM>
Filesystems must be <FIRSTTERM>mounted</FIRSTTERM> to be used. <XREF LINKEND="LE46708-TITLE"> illustrates this process. When a filesystem is mounted, the name of the device file for the filesystem (<FILENAME>/dev/rdsk/dks0d2s7</FILENAME> in <XREF LINKEND="LE46708-TITLE">) and the name of a directory (<FILENAME>/proj</FILENAME> in <XREF LINKEND="LE46708-TITLE">) are given. This directory, <FILENAME>/proj</FILENAME><FILENAME>,</FILENAME>is called a <FIRSTTERM>mount point</FIRSTTERM> and forms the connection between the filesystem containing the mount point and the filesystem to be mounted. Mounting a filesystem tells the kernel that the mount point is to be considered equivalent to the top level directory of the filesystem when pathnames are resolved. In <XREF LINKEND="LE46708-TITLE">, the files <FILENAME>a</FILENAME>, <FILENAME>b</FILENAME>, and <FILENAME>c</FILENAME> in the <FILENAME>/dev/rdsk/dks0d2s7</FILENAME> filesystem become <FILENAME>/proj/a</FILENAME>, <FILENAME>/proj/b</FILENAME>, and <FILENAME>/proj/c</FILENAME> as shown in the bottom of the figure.</PARA>
<PARA><FIGURE><GRAPHIC FILEREF="mounting.filesystem.gif" LOCATION="INLINE" SCALE="NO"></GRAPHIC>
<TITLE  ID="LE46708-TITLE">Mounting a Filesystem</TITLE>
</FIGURE>
</PARA>
<PARA><INDEXTERM ID="ITch5-91"><PRIMARY>hidden directories</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-92"><PRIMARY>directories</PRIMARY>
<SECONDARY>hidden</SECONDARY>
</INDEXTERM>
When you mount a filesystem, the original contents of the mount point directory are hidden and unavailable until the filesystem is unmounted. However, the mount point directory owner and permissions are not hidden. Restricted permissions can restrict access to the mounted filesystem.</PARA>
<PARA><INDEXTERM ID="ITch5-93"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>mounting and unmounting restrictions</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-94"><PRIMARY><FILENAME>usr</FILENAME>
 filesystem</PRIMARY>
<SECONDARY><FILENAME>required for system operation</FILENAME>
</SECONDARY>
</INDEXTERM>
Unlike other filesystems, the root filesystem (<FILENAME>/</FILENAME>) is mounted as soon as the kernel is running and cannot be unmounted because it is required for system operation. The <FILENAME>usr</FILENAME> filesystem, if it is a separate filesystem from the root filesystem, must also be mounted for the system to operate properly. System administration that requires unmounting the root and <FILENAME>usr</FILENAME> filesystem can be done in the miniroot. See <XREF LINKEND="LE77933-PARENT"> for more information.</PARA><PARA><INDEXTERM ID="ITch5-95"><PRIMARY>mounting filesystems</PRIMARY>
<SECONDARY>methods</SECONDARY>
</INDEXTERM>
You can mount filesystems in several ways:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Manually with the <COMMAND>mount</COMMAND> command (see <XREF LINKEND="LE73128-PARENT">)</PARA></LISTITEM>
<LISTITEM><PARA>Automatically when the system is booted, using information in the file <FILENAME>/etc/fstab</FILENAME> (see <XREF LINKEND="LE47138-PARENT">)</PARA></LISTITEM>
<LISTITEM><PARA>Automatically when the filesystem is accessed (called <FIRSTTERM>automounting</FIRSTTERM>, which applies to NFS (remote) filesystems only; see <XREF LINKEND="LE81003-PARENT">) </PARA></LISTITEM>
<LISTITEM><PARA>Automatically when a removable disk is inserted (see the <COMMAND>mediad</COMMAND>(1M) reference page for information on the daemon that monitors removable media devices)</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA><INDEXTERM ID="ITch5-96"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>unmounting</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-97"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>unmounting</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-98"><PRIMARY>unmounting filesystems</PRIMARY>
<SECONDARY>methods</SECONDARY>
</INDEXTERM>
You can unmount filesystems in two ways:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Shut down the system (filesystems are unmounted automatically)</PARA>
</LISTITEM>
<LISTITEM><PARA>Manually unmount filesystems with the <COMMAND>umount</COMMAND> command (see the section <XREF LINKEND="LE61716-PARENT">)</PARA></LISTITEM>
</ITEMIZEDLIST>
<PARA>The <COMMAND>mount</COMMAND> and <COMMAND>umount</COMMAND> commands are described in detail in <XREF LINKEND="LE21898-PARENT">.</PARA></SECTION>
<SECTION  ID="LE77933-PARENT"><TITLE  ID="LE77933-TITLE">XFS Filesystem Checking</TITLE><PARA><INDEXTERM ID="ITch5-99"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-100"><PRIMARY><COMMAND>xfs_check</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>description</COMMAND>
</SECONDARY>
</INDEXTERM>
The <COMMAND>xfs_check</COMMAND> command checks XFS filesystem consistency. It is normally used only when a filesystem consistency problem is suspected. See the <COMMAND>xfs_check</COMMAND>(1M) reference page for more information.</PARA>
</SECTION>
<SECTION  ID="LE13875-PARENT"><TITLE  ID="LE13875-TITLE">Filesystem Reorganization</TITLE><PARA><INDEXTERM ID="ITch5-101"><PRIMARY><COMMAND>fsr</COMMAND>
 command</PRIMARY>
</INDEXTERM>
Filesystems can become fragmented over time. When a filesystem is fragmented, blocks of free space are small and files have many extents. The <COMMAND>fsr</COMMAND> command reorganizes filesystems so that the layout of the extents is improved. This improves overall performance. </PARA>
<PARA>By default, <COMMAND>fsr</COMMAND> is run automatically once a week from <FILENAME>crontab</FILENAME>. If the <COMMAND>fsr</COMMAND> command determines that a mounted filesystem is an XFS filesystem, the command calls the <COMMAND>fsr_xfs</COMMAND> command. See the <COMMAND>fsr</COMMAND><COMMAND>(1M)</COMMAND>
 reference page for information on the <COMMAND>fsr</COMMAND> command, and the <COMMAND><INDEXTERM ID="ITch5-102"><PRIMARY><COMMAND>fsr_xfs</COMMAND>
</PRIMARY>
</INDEXTERM>
fsr_xfs</COMMAND>(1M) man page for information on the <COMMAND>fsr_xfs</COMMAND> options for the command.</PARA>
</SECTION>
<SECTION  ID="LE16325-PARENT"><TITLE  ID="LE16325-TITLE">Filesystem Administration From the Miniroot</TITLE><PARA><INDEXTERM ID="ITch5-103"><PRIMARY>miniroot, using for filesystem administration</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-104"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>and the miniroot</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-105"><PRIMARY><FILENAME>/root</FILENAME>
 prefix for files</PRIMARY>
</INDEXTERM>
When filesystem modifications or other administrative tasks require that the root filesystem not be mounted or not be in use, the miniroot environment provided by the software installation tools included on IRIX system software release CDs can be used. When using the miniroot, a limited version of IRIX is installed in the swap partition in a filesystem mounted at <FILENAME>/</FILENAME>. The system runs this version of IRIX rather than the standard IRIX in the root and <FILENAME>usr</FILENAME> filesystems. The root and <FILENAME>usr</FILENAME> filesystems are available and mounted at <FILENAME>/root</FILENAME> and <FILENAME>/root/usr</FILENAME>. Thus the pathnames of all files in the root and <FILENAME>usr</FILENAME> filesystems have the prefix <FILENAME>/root</FILENAME>.</PARA>
</SECTION>
<SECTION  ID="LE61658-PARENT"><TITLE  ID="LE61658-TITLE">How to Add Filesystem Space</TITLE><PARA><INDEXTERM ID="ITch5-106"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>adding space</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-107"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>adding space</SECONDARY>
</INDEXTERM>
You can add filesystem space in three ways:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Add a new disk, create a filesystem on it, and mount it as a subdirectory on an existing filesystem.</PARA>
</LISTITEM>
<LISTITEM><PARA>Change the size of the existing filesystems by removing space from one partition and adding it to another partition on the same disk. </PARA>
</LISTITEM>
<LISTITEM><PARA>Add another disk and grow an existing XFS filesystem onto that disk with the <FILENAME>xfs_growfs</FILENAME> command.</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>These three methods of adding filesystem space are discussed in the following subsections.</PARA>
<SECTION  ID="LE31477-PARENT"><TITLE  ID="LE31477-TITLE">Mount a Filesystem as a Subdirectory</TITLE><PARA><INDEXTERM ID="ITch5-108"><PRIMARY>disk drives</PRIMARY>
<SECONDARY>adding a new disk as a filesystem</SECONDARY>
</INDEXTERM>
To mount a filesystem as a subdirectory, you simply add a new disk with a separate filesystem and create a new mount point for it within your filesystem. This is generally considered the safest way to add space. For example, if your <FILENAME>usr</FILENAME> filesystem is short of space, add a new disk and mount the new filesystem on a directory called <FILENAME>/usr/work</FILENAME>. A drawback of this approach is that it does not allow hard links to be created between the original filesystem and the new filesystem.</PARA>
<PARA>See <XREF LINKEND="LE94130-TITLE">, &ldquo;Performing Disk Administration Procedures,&rdquo; for full information on partitioning a disk and making filesystems on it. </PARA></SECTION>
<SECTION><TITLE>&ldquo;Steal&rdquo; Space From Another Filesystem</TITLE><PARA><INDEXTERM ID="ITch5-109"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>changing size</SECONDARY>
</INDEXTERM>
To move disk space from one filesystem on a disk to another filesystem on the same disk, you must back up your existing data on both filesystems; run the <COMMAND>fx</COMMAND> command to repartition the disk; then remake both filesystems with the <COMMAND>mkfs</COMMAND> command. This method has serious drawbacks. It is a great deal of work and has certain risks. For example, to increase the size of a filesystem, you must remove space from other filesystems. You must be sure that when you finish changing the size of your filesystems, your old data still fits on all the new, smaller filesystems. Also, resizing your filesystems may at best be a stop-gap measure until you can acquire additional disk space. </PARA>
<PARA>Repartitioning is documented in <XREF LINKEND="LE38803-PARENT">. For additional solutions when the filesystem is the root filesystem, see <XREF LINKEND="LE54772-PARENT">.</PARA></SECTION>
<SECTION  ID="LE21274-PARENT"><TITLE  ID="LE21274-TITLE">Grow an XFS Filesystem Onto Another Disk</TITLE><PARA><INDEXTERM ID="ITch5-110"><PRIMARY>disk drives</PRIMARY>
<SECONDARY>growing a filesystem onto new</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-111"><PRIMARY><COMMAND>xfs_growfs</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>description</COMMAND>
</SECONDARY>
</INDEXTERM>
Growing an existing filesystem onto an additional disk or disk partition is another way to increase the available space in that filesystem. The original disk partition and the new disk partition become a logical volume. The <FILENAME>xfs_growfs</FILENAME> command preserves the existing data on the hard disk and adds space from the new disk partition to the filesystem. This process is simpler than completely remaking your filesystems. The one drawback to growing a filesystem across disks is that if one disk fails, you may not recover data from the other disk, even if the other disk still works. If your <FILENAME>usr</FILENAME> filesystem is a logical volume, you will be unable to boot the system into multiuser mode. For this reason, it is preferable, if possible, to mount an additional disk and filesystem as a directory on the root or <FILENAME>usr</FILENAME> filesystems (on <FILENAME>/</FILENAME> or <FILENAME>/usr</FILENAME>).</PARA>
<PARA>For instructions on growing a filesystem onto an additional disk, see <XREF LINKEND="LE49326-PARENT">. </PARA></SECTION>
</SECTION>
<SECTION  ID="LE27105-PARENT"><TITLE  ID="LE27105-TITLE">Disk Quotas</TITLE><PARA><INDEXTERM ID="ITch5-112"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-113"><PRIMARY>quotas subsystem</PRIMARY>
</INDEXTERM>
If your system is constantly short of disk space and you cannot increase the amount of available space, you may be forced to implement disk quotas. Quotas allow you to limit the amount of space a user can occupy and the number of files (inodes) each user can own. IRIX provides disk quotas to automate this process. You can use this system to implement specific disk usage quotas for each user on your system. You can implement <FIRSTTERM>hard</FIRSTTERM> or <FIRSTTERM>soft</FIRSTTERM> limits; hard limits are enforced by the system, soft limits merely remind the user to trim disk usage. Disk usage limits are not enforced for <FIRSTTERM>root</FIRSTTERM>.</PARA>
<PARA>With soft limits, whenever a user logs in with a usage greater than the assigned soft limit, that user is warned (by the <COMMAND>login</COMMAND> command). When the user exceeds the soft limit, the timer is enabled. Any time the quota drops below the soft limits, the timer is disabled. If the timer is enabled longer than a time period set by the system administrator, the particular limit that has been exceeded is treated as if the hard limit has been reached, and no more disk space is allocated to the user. The only way to reset this condition is to reduce usage below the quota. Only <FIRSTTERM>root</FIRSTTERM> may set the time limits, and this is done on a per-filesystem basis.</PARA>
<PARA>Several options are available on XFS filesystems. You can impose limits on some users and not others, some filesystems and not others, and on total disk usage per user, or total number of files. In addition, on XFS filesystems there is no limit to the number of accounts and there is little performance penalty for large numbers of users.</PARA>
<PARA>Disk quotas on XFS filesystems can be used to do disk usage accounting. Disk usage accounting monitors disk usage, but does not enforce disk usage limits. See <XREF LINKEND="LE22022-PARENT"> for more information.</PARA><PARA>Disk quotas are described in more detail in the <COMMAND>quotas</COMMAND><COMMAND>(4)</COMMAND> reference page. Procedures for imposing and monitoring disk quotas are described in <XREF LINKEND="LE51526-PARENT">.</PARA></SECTION>
<SECTION  ID="LE30074-PARENT"><TITLE  ID="LE30074-TITLE">Filesystem Corruption</TITLE><PARA><INDEXTERM ID="ITch5-114"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>corruption</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-115"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>corruption</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITch5-116"><PRIMARY>XFS filesystems</PRIMARY>
<SECONDARY>corruption</SECONDARY>
</INDEXTERM>
Most often, a filesystem is corrupted because the system experienced a panic or did not shut down cleanly. This can be caused by system software failure, hardware failure, or human error (for example, pulling the plug). Another possible source of filesystem corruption is overlapping partitions. </PARA>
<PARA>There is no foolproof way to predict hardware failure. The best way to avoid hardware failures is to conscientiously follow recommended diagnostic and maintenance procedures.</PARA>
<PARA>Human error is probably the greatest single cause of filesystem corruption. To avoid problems, follow these rules closely:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Always shut down the system properly. Do not simply turn off power to the system. Use a standard system shutdown tool, such as the <COMMAND>shutdown</COMMAND> command. </PARA>
</LISTITEM>
<LISTITEM><PARA>Never remove a filesystem physically (pull out a hard disk) without first turning off power. </PARA>
</LISTITEM>
<LISTITEM><PARA>Never physically write-protect a mounted filesystem, unless it is mounted read-only.</PARA>
</LISTITEM>
<LISTITEM><PARA>Do not mount filesystems on dual-hosted disks on two systems simultaneously.</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>The best way to insure against data loss is to make regular, careful backups. See <LINK BOOK="IA_BakSecAcc" EXTREF="70848">IRIX Admin: Backup, Security, and Accounting</LINK>
 for complete information on system backups.</PARA>
<PARA>In some cases, XFS filesystem corruption, even on the root file system, can be repaired with the command <COMMAND>xfs_repair</COMMAND>. For more information about <COMMAND>xfs_repair</COMMAND> see <XREF LINKEND="LE92347-PARENT">.</PARA></SECTION>
</CHAPTER>
