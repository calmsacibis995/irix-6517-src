<!-- Produced by version 4.3 (11/99) of SGI Frame/SGIDOCBK SGML translator -->
<APPENDIX ID="LE81344-PARENT"><TITLE ID="LE81344-TITLE">EFS Filesystems</TITLE><NOTE><PARA>Support for EFS filesystems will be discontinued in a future IRIX release. For information on converting EFS filesystems to XFS filesystems, see <XREF LINKEND="LE35942-TITLE">.</PARA></NOTE><PARA>The EFS filesystem is the original IRIX filesystem. This appendix describes the EFS filesystem and provides information on how to perform various administration tasks on EFS filesystems.</PARA>
<PARA>The major sections in this appendix are:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA><XREF LINKEND="LE56624-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE42048-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE13931-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE71405-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE97051-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE71708-PARENT"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE97381-PARENT"></PARA></LISTITEM>
</ITEMIZEDLIST>
<SECTION  ID="LE56624-PARENT"><TITLE  ID="LE56624-TITLE">EFS Filesystem Overview</TITLE><PARA><INDEXTERM ID="ITapp1-0"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>description</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-1"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>maximum file size</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-2"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>maximum filesystem size</SECONDARY>
</INDEXTERM>
The EFS filesystem is the original IRIX filesystem. It contains an enhancement to the standard UNIX filesystem called <FIRSTTERM>extents</FIRSTTERM> (defined below), and thus is called the Extent File System (EFS). The maximum size of an EFS filesystem is about 8 GB. It uses a filesystem block size of 512 bytes and allows a maximum file size of 2 GB minus 1 byte.</PARA>
<PARA><INDEXTERM ID="ITapp1-3"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>inodes</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-4"><PRIMARY>inodes</PRIMARY>
<SECONDARY>in EFS filesystems</SECONDARY>
</INDEXTERM>
Advanced features of EFS are that it keeps multiple inode tables in close proximity to data blocks rather than a single inode table, and it uses a bitmap to keep track of free blocks instead of a list of free blocks.</PARA>
<PARA>Inodes are created when an EFS filesystem is created, not when files are created. When a file is created, an inode is allocated to that file. Thus, the maximum number of files in a filesystem is limited by the number of inodes in that filesystem. By default, the number of inodes created is a function of the size of the partition or logical volume. Typically one inode is created for every 4 KB in the partition or logical volume. You can specify the number of inodes with the <COMMAND>-n</COMMAND> option to the filesystem creation command, <COMMAND>mkfs</COMMAND>. Inodes use disk space, so there is a tradeoff between the number of inodes and the amount of disk space available for files.</PARA>
<PARA><INDEXTERM ID="ITapp1-5"><PRIMARY>super-blocks</PRIMARY>
</INDEXTERM>
The first block of an EFS filesystem is not used. Information about the filesystem is stored in the second block of the filesystem (block 1), called the <FIRSTTERM>superblock</FIRSTTERM>. This information includes:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>The size of the filesystem, in both physical and logical blocks </PARA>
</LISTITEM>
<LISTITEM><PARA>The read-only flag; if set, the filesystem is read only </PARA>
</LISTITEM>
<LISTITEM><PARA>The superblock-modified flag; if set, the superblock has been modified </PARA>
</LISTITEM>
<LISTITEM><PARA>The date and time of the last update </PARA>
</LISTITEM>
<LISTITEM><PARA>The total number of index nodes (<FIRSTTERM>inodes</FIRSTTERM>) allocated </PARA>
</LISTITEM>
<LISTITEM><PARA>The total number of inodes free </PARA>
</LISTITEM>
<LISTITEM><PARA>The total number of free blocks </PARA>
</LISTITEM>
<LISTITEM><PARA>The starting block number of the free block bitmap</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA><INDEXTERM ID="ITapp1-6"><PRIMARY>extents</PRIMARY>
<SECONDARY>EFS filesystem</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-7"><PRIMARY>extents</PRIMARY>
<SECONDARY>indirect</SECONDARY>
</INDEXTERM>
The superblock bitmap is followed by the inodes and data blocks. Each contiguous group of data blocks that make up a file is called an extent. There are 12 extent addresses in an inode. Extents are of variable length, anywhere from 1 to 148 contiguous blocks.</PARA>
<PARA><INDEXTERM ID="ITapp1-8"><PRIMARY>extents</PRIMARY>
<SECONDARY>indirect</SECONDARY>
</INDEXTERM>
An inode contains addresses for 12 extents, which can hold a combined 1536 blocks, or 786,432 bytes. If a file is large enough that it cannot fit in the 12 extents, each extent is then loaded with the address of up to 148 <FIRSTTERM>indirect</FIRSTTERM> extents. The indirect extents then contain the actual data that makes up the file. Because EFS uses indirect extents, you can create files up to 2 GB, assuming you have that much disk space available in your filesystem. </PARA>
<PARA>The last block of the filesystem is a duplicate of the filesystem superblock. This is a safety precaution that provides a backup of the critical information stored in the superblock.</PARA>
</SECTION>
<SECTION  ID="LE42048-PARENT"><TITLE  ID="LE42048-TITLE">EFS Filesystem Creation</TITLE><PARA>To turn a disk partition or logical volume into an EFS filesystem, the <COMMAND>mkfs</COMMAND> command must be used. It takes a disk partition or logical volume and divides it up into areas for data blocks, inodes, and free lists, and writes out the appropriate inode tables, superblocks, and block maps. It creates the filesystem's root directory and a <FILENAME>lost+found</FILENAME> directory.</PARA>
<PARA><INDEXTERM ID="ITapp1-9"><PRIMARY><COMMAND>mkfs</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>example commands</COMMAND>
</SECONDARY>
</INDEXTERM>
An example <COMMAND>mkfs</COMMAND> command for making an EFS filesystem is:</PARA>
<PROGRAMLISTING>
# <USERINPUT>mkfs -t efs /dev/rdsk/dks0d2s7</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>After using <COMMAND>mkfs</COMMAND> to create an EFS filesystem, run the <COMMAND>fsck</COMMAND> command to verify that the disk is consistent. For information on the <COMMAND>fsck</COMMAND> command, see<XREF LINKEND="LE97381-PARENT">.</PARA><PARA>For more instructions on making EFS filesystems see <XREF LINKEND="LE13931-PARENT">, and the <COMMAND>mkfs</COMMAND>(1M) and <COMMAND>mkfs_efs</COMMAND>(1M) reference pages.</PARA>
</SECTION>
<SECTION  ID="LE13931-PARENT"><TITLE  ID="LE13931-TITLE">EFS Filesystem Creation Procedure<INDEXTERM ID="ITapp1-10"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-11"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-12"><PRIMARY><COMMAND>fsck</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>description</COMMAND>
</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-13"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>and <COMMAND>fsck</COMMAND>
</SECONDARY>
</INDEXTERM>
</TITLE><PARA>The procedure in this section explains how to make an EFS filesystem on a disk partition or on a logical volume and mount it. (See <XREF LINKEND="LE38992-TITLE">, for information on creating logical volumes.) This procedure assumes that the disk or logical volume is empty. If it contains valuable data, the data must be backed up because it is destroyed during this procedure.</PARA><TIP><PARA>You can make an EFS filesystem on a disk partition using the Disk Manager in the System Toolchest. For information on the Disk Manager, see the <LINK BOOK="PerSysAdmin" EXTREF="64311">&ldquo;Disk Manager</LINK>
&rdquo; section in Chapter 3 of the <CITETITLE>Personal System Administration Guide</CITETITLE>.</PARA>
</TIP>
<CAUTION><PARA>When you create a filesystem, all files already on the disk partition or logical volume are destroyed.</PARA>
</CAUTION>
<ORDEREDLIST><LISTITEM><PARA>Identify the device name of the partition or logical volume where you plan to create the filesystem. This is the value of <REPLACEABLE>partition</REPLACEABLE> in the examples below. For example, if you plan to use partition 7 (the entire disk) of a SCSI option disk on controller 0 and drive address 2, <REPLACEABLE>partition</REPLACEABLE> is <FILENAME>/dev/dsk/dks0d2s7</FILENAME>. For more information on determining <REPLACEABLE>partition</REPLACEABLE>, see <XREF LINKEND="LE22348-TITLE">, and the <COMMAND>dks</COMMAND>(7M) reference page.</PARA>
</LISTITEM>
<LISTITEM><PARA>If the disk partition is already mounted, unmount it:</PARA>
<PROGRAMLISTING>
# <USERINPUT>umount</USERINPUT>&ensp;<REPLACEABLE>partition</REPLACEABLE>
</PROGRAMLISTING>
<PARA>Any data that is on the disk partition is destroyed. To convert the data rather than destroy it, use the procedure in <XREF LINKEND="LE96722-TITLE"> instead.</PARA></LISTITEM>
<LISTITEM><PARA>Create a new filesystem with the <COMMAND>mkfs</COMMAND> command, for example,</PARA>
<PROGRAMLISTING>
# <USERINPUT>mkfs -t efs /dev/rdsk/dks0d2s7</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>The argument to <COMMAND>mkfs</COMMAND> is the block or character device for the disk partition or logical volume. You can use either the block device or the character device.</PARA>
<PARA>In the above example, <COMMAND>mkfs</COMMAND> uses default values for the filesystem parameters. If you want to use parameters other than the default, you can specify these on the mkfs command line. See the <COMMAND>mkfs_efs</COMMAND>(1M) reference page for information about using command line parameters and proto files.</PARA>
</LISTITEM>
<LISTITEM><PARA>To use the filesystem, you must mount it. For example,</PARA>
<PROGRAMLISTING>
# <USERINPUT>mkdir /rsrch</USERINPUT>&ensp;
# <USERINPUT>mount /dev/dsk/dks0d2s7 /rsrch</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>For more information about mounting filesystems, see <XREF LINKEND="LE73128-TITLE">.</PARA></LISTITEM>
<LISTITEM><PARA>To configure the system so that this filesystem is automatically mounted when the system is booted up, add an entry in the file <FILENAME>/etc/fstab</FILENAME> for the new filesystem. For example,</PARA>
<PROGRAMLISTING>
/dev/dsk/dks0d2s7 /rsrch efs rw,raw=/dev/rdsk/dks0d2s7 0 0 
</PROGRAMLISTING>
<PARA>For more information about automatically mounting filesystems, see <XREF LINKEND="LE47138-TITLE">.</PARA></LISTITEM>
</ORDEREDLIST>
</SECTION>
<SECTION  ID="LE71405-PARENT"><TITLE  ID="LE71405-TITLE">Growing an EFS Filesystem Onto Another Disk</TITLE><PARA>The procedure in this section explains how to grow an EFS filesystem onto another disk. <INDEXTERM ID="ITapp1-14"><PRIMARY>XLV logical volumes</PRIMARY>
<SECONDARY>creating out of old and new disks</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-15"><PRIMARY><COMMAND>xlv_make</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>using to create a logical volume for an existing filesystem</COMMAND>
</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-16"><PRIMARY><COMMAND>xfs_growfs</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>extending a filesystem onto a logical volume</COMMAND>
</SECONDARY>
</INDEXTERM>
</PARA>
<PARA>The following steps show how to grow a filesystem mounted at <FILENAME>/disk2</FILENAME> onto an XLV logical volume created out of the <FILENAME>/disk2</FILENAME> disk partition and a new disk. The procedure assumes that the new disk is installed on the system and partitioned.</PARA>
<CAUTION><PARA>All files on the additional disk are destroyed by this procedure.</PARA>
</CAUTION>
<ORDEREDLIST><LISTITEM><PARA>Make a backup of the filesystem you are going to extend. </PARA>
</LISTITEM>
<LISTITEM><PARA>Unmount the <FILENAME>/disk2</FILENAME> filesystem:</PARA>
<PROGRAMLISTING>
# <USERINPUT>umount /disk2</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Use <COMMAND>xlv_make</COMMAND> to create an XLV logical volume out of the <FILENAME>/disk2</FILENAME> partition and the new disk. The <FILENAME>/disk2</FILENAME> partition must be the first volume element in the data subvolume. For example:</PARA>
<PROGRAMLISTING>
# <USERINPUT>xlv_make</USERINPUT>
xlv_make&gt; <USERINPUT>vol xlv0</USERINPUT>
xlv0
xlv_make&gt; <USERINPUT>data</USERINPUT>
xlv0.data
xlv_make&gt; <USERINPUT>plex</USERINPUT>
xlv0.data.0
xlv_make&gt; <USERINPUT>ve dks0d2s7</USERINPUT>
xlv0.data.0.0
xlv_make&gt; <USERINPUT>ve dks0d3s7</USERINPUT>
xlv0.data.0.1
xlv_make&gt; <USERINPUT>end</USERINPUT>
Object specification completed
xlv_make&gt; <USERINPUT>exit</USERINPUT>
Newly created objects will be written to disk.
Is this what you want?(yes) <USERINPUT>yes</USERINPUT>
Invoking xlv_assemble
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Grow the EFS filesystem into the logical volume with the <COMMAND>growfs</COMMAND> command:</PARA>
<PROGRAMLISTING>
# <USERINPUT>growfs /dev/xlv/xlv0</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Run <COMMAND>fsck</COMMAND> on the expanded filesystem:</PARA>
<PROGRAMLISTING>
# <USERINPUT>fsck /dev/xlv/xlv0</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Mount the logical volume:</PARA>
<PROGRAMLISTING>
# <USERINPUT>mount /dev/xlv/xlv0 /disk2</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Change the entry for <FILENAME>/disk2</FILENAME> in the file <FILENAME>/etc/fstab</FILENAME> to mount the logical volume rather than the disk partition:</PARA>
<PROGRAMLISTING>
/dev/xlv/xlv0 /disk2 efs rw,raw=/dev/rxlv/xlv0 0 0 
</PROGRAMLISTING>
</LISTITEM>
</ORDEREDLIST>
</SECTION>
<SECTION  ID="LE97051-PARENT"><TITLE  ID="LE97051-TITLE">EFS Filesystem Checking</TITLE><PARA><INDEXTERM ID="ITapp1-17"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-18"><PRIMARY>filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-19"><PRIMARY><COMMAND>fsck</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>description</COMMAND>
</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-20"><PRIMARY>root filesystem</PRIMARY>
<SECONDARY>and <COMMAND>fsck</COMMAND>
</SECONDARY>
</INDEXTERM>
The <COMMAND>fsck</COMMAND> command checks EFS filesystem consistency and data integrity. Filesystems are usually checked automatically when the system is booted. Except for the root filesystem, filesystems must be unmounted while being checked. You might want to invoke <COMMAND>fsck</COMMAND> manually at these times:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Before making a backup</PARA>
</LISTITEM>
<LISTITEM><PARA>After doing a restore</PARA>
</LISTITEM>
<LISTITEM><PARA>After doing disk maintenance</PARA>
</LISTITEM>
<LISTITEM><PARA>Before installing software</PARA>
</LISTITEM>
<LISTITEM><PARA>Before manually mounting a dirty filesystem</PARA>
</LISTITEM>
<LISTITEM><PARA>When <COMMAND>fsck</COMMAND> runs automatically and has many errors</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>For a detailed explanation of the checks performed by <COMMAND>fsck</COMMAND> and the options it presents when it finds problems, see <XREF LINKEND="LE97381-PARENT">.</PARA><PARA><INDEXTERM ID="ITapp1-21"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>checking for consistency</SECONDARY>
</INDEXTERM>
Before checking an EFS filesystem other than the root filesystem for consistency, the filesystem should be unmounted. (The root filesystem can be checked while mounted.) Unmounting can be achieved by explicitly unmounting the filesystem, or by shutting the system down and bringing it up in single-user mode. (See<XREF LINKEND="LE61716-TITLE"> for information on unmounting filesystems and the <COMMAND>single</COMMAND>(1M) reference page for information on shutting the system down and bringing it up in single-user mode.) Checking unmounted filesystems is described in <XREF LINKEND="LE85146-PARENT">.</PARA><PARA>If you cannot shut down the system and cannot unmount the filesystem, but you need to perform the check immediately, you can run <COMMAND>fsck</COMMAND> in &ldquo;no-write&rdquo; mode. The <COMMAND>fsck</COMMAND> command checks the filesystem, but makes no changes and does not repair inconsistencies. The procedure is explained in <XREF LINKEND="LE36435-PARENT">.</PARA><PARA>You may find it convenient to check multiple filesystems at once. This is also known as <FIRSTTERM>parallel</FIRSTTERM> checking. The <COMMAND>fsck -m</COMMAND> flag is used for parallel checking. For more information about this and other <COMMAND>fsck</COMMAND> options, see the <COMMAND>fsck</COMMAND>(1M) reference page.</PARA>
<SECTION  ID="LE85146-PARENT"><TITLE  ID="LE85146-TITLE">Checking Unmounted Filesystems</TITLE><PARA><INDEXTERM ID="ITapp1-22"><PRIMARY><COMMAND>fsck</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>using</COMMAND>
</SECONDARY>
</INDEXTERM>
To check a single, unmounted filesystem, enter this command as <FIRSTTERM>root</FIRSTTERM>:</PARA>
<PROGRAMLISTING>
# <USERINPUT>fsck</USERINPUT>&ensp;<REPLACEABLE>filesystem</REPLACEABLE>&ensp;
</PROGRAMLISTING>
<PARA><REPLACEABLE>filesystem</REPLACEABLE> is the device file name of the filesystem's disk partition or logical volume, for example <FILENAME>/dev/usr</FILENAME>, <FILENAME>/dev/dsk/dks0d2s7</FILENAME>, or <FILENAME>/dev/dsk/lv2</FILENAME>; see <XREF LINKEND="LE22348-TITLE"> and <XREF LINKEND="LE10894-TITLE"> for more information.</PARA><PARA>As <COMMAND>fsck</COMMAND> runs, it proceeds through a series of steps, or <FIRSTTERM>phases</FIRSTTERM>. You may see an error-free check:</PARA>
<PROGRAMLISTING>
fsck: Checking /dev/usr 
** Phase 1 - Check Blocks and Sizes
** Phase 2 - Check Pathnames
** Phase 3 - Check Connectivity
** Phase 4 - Check Reference Counts
** Phase 5 - Check Free List
7280 files 491832 blocks 38930 free
</PROGRAMLISTING>
<PARA>If there are no errors, you are finished checking the filesystem.</PARA>
<PARA>If errors are detected in the filesystem, <COMMAND>fsck</COMMAND> displays an error message. <XREF LINKEND="LE97381-PARENT"> explains how to proceed.</PARA></SECTION>
<SECTION  ID="LE36435-PARENT"><TITLE  ID="LE36435-TITLE">Checking Mounted Filesystems</TITLE><PARA>If you cannot shut down the system and cannot unmount the filesystem, but you need to perform the check immediately, you can run <COMMAND>fsck</COMMAND> in &ldquo;no-write&rdquo; mode. The <COMMAND>fsck</COMMAND> command checks the filesystem, but makes no changes and does not repair inconsistencies.</PARA>
<PARA>For example, the following command invokes <COMMAND>fsck</COMMAND> in no-write mode:</PARA>
<PROGRAMLISTING>
# <USERINPUT>fsck -n /dev/usr</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>If inconsistencies are found, they are not repaired. You must run <COMMAND>fsck</COMMAND> again without the <COMMAND>-n</COMMAND> flag to repair any problems. The benefit of this procedure is that you should be able to gauge the severity of the problems with your filesystem. The disadvantage of this procedure is that <COMMAND>fsck</COMMAND> may show inconsistencies that do not really exist (because the filesystem is active).</PARA>
</SECTION>
</SECTION>
<SECTION  ID="LE71708-PARENT"><TITLE  ID="LE71708-TITLE">EFS Filesystem Reorganization</TITLE><PARA>EFS filesystems can become fragmented over time. When a filesystem is fragmented, blocks of free space are small and files have many extents. The <COMMAND>fsr</COMMAND> command, when run on an EFS filesystem, reorganizes filesystems so that the layout of the extents is improved and free disk space is coalesced. This improves overall performance.</PARA>
<PARA>By default, <COMMAND>fsr</COMMAND> is run automatically once a week from <FILENAME>crontab</FILENAME>. If the <COMMAND>fsr</COMMAND> command determines that a mounted filesystem is an EFS filesystem, the command calls the <COMMAND>fsr_efs</COMMAND> command. See the <COMMAND>fsr</COMMAND>(1M) reference page for information on the <COMMAND>fsr</COMMAND> command, and the <COMMAND>fsr_efs</COMMAND>(1M) man page for information on the <COMMAND>fsr_efs</COMMAND> options for the command. <INDEXTERM ID="ITapp1-23"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>fragmentation</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-24"><PRIMARY>fragmentation</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-25"><PRIMARY><COMMAND>fsr</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-26"><PRIMARY><COMMAND>fsr_efs</COMMAND>
 command</PRIMARY>
</INDEXTERM>
</PARA>
</SECTION>
<SECTION><TITLE>EFS Filesystem Disk Space Management</TITLE><PARA><INDEXTERM ID="ITapp1-27"><PRIMARY>fragmentation</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-28"><PRIMARY><COMMAND>fsr</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-29"><PRIMARY>EFS filesystems</PRIMARY>
<SECONDARY>reorganizing</SECONDARY>
</INDEXTERM>
Consider the following characteristics of EFS filesystems when managing your disk space:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>If you find yourself short on disk space, consider that the <FILENAME>lost+found</FILENAME> directory at the root of EFS filesystems may be full. If you log in as <FIRSTTERM>root</FIRSTTERM>, you can check this directory and determine if the files there can be removed.</PARA>
</LISTITEM>
<LISTITEM><PARA>On EFS filesystems, when a filesystem is more than about 90- to 95-percent full, system performance may degrade, depending on the size of the disk. (The number of free disk blocks on a 97-percent full large disk is larger than the number of free disk blocks on a 97-percent full small disk.) Monitor the amount of available space and take steps to keep an adequate amount available.</PARA>
</LISTITEM>
</ITEMIZEDLIST>
</SECTION>
<SECTION><TITLE>Using Disk Quotas on EFS Filesystems</TITLE><PARA><INDEXTERM ID="ITapp1-30"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY>imposing on EFS filesystems</SECONDARY>
</INDEXTERM>
The use of disk quotas to limit users' use of disk space is discussed in the section <XREF LINKEND="LE27105-TITLE">. The following subsections explain how to impose and monitor disk quotas on EFS filesystems. For additional information, see the <COMMAND>quota</COMMAND>(1), <COMMAND>edquota</COMMAND>(1M), <COMMAND>quot</COMMAND>(1M), <COMMAND>quotacheck</COMMAND>(1M), <COMMAND>quotaon</COMMAND>(1M), <COMMAND>repquota</COMMAND>(1M), and <COMMAND>quotas</COMMAND>(4) reference pages.</PARA>
<SECTION  ID="LE58984-PARENT"><TITLE  ID="LE58984-TITLE">Imposing Disk Quotas on EFS Filesystems</TITLE><PARA>To impose soft disk quotas on EFS filesystems, follow these steps:</PARA>
<ORDEREDLIST><LISTITEM><PARA><INDEXTERM ID="ITapp1-31"><PRIMARY><COMMAND>chkconfig</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>quotas</COMMAND>
 option</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-32"><PRIMARY><COMMAND>chkconfig</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>quotacheck</COMMAND>
 option</SECONDARY>
</INDEXTERM>
To enable the quotas subsystem, enter these commands:</PARA>
<PROGRAMLISTING>
# <USERINPUT>chkconfig quotas on</USERINPUT>&ensp;
# <USERINPUT>chkconfig quotacheck on</USERINPUT>  
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA><INDEXTERM ID="ITapp1-33"><PRIMARY><FILENAME>quotas</FILENAME>
 file</PRIMARY>
</INDEXTERM>
Create a file named <FILENAME>quotas</FILENAME> in the root directory of each filesystem that is to have a disk quota. This file should be zero length and should be writable only by <FIRSTTERM>root</FIRSTTERM>. To create the <FILENAME>quotas</FILENAME> file, give this command as <FIRSTTERM>root</FIRSTTERM> in the root directory of each of these filesystems:</PARA>
<PROGRAMLISTING>
# <USERINPUT>touch quotas</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA><INDEXTERM ID="ITapp1-34"><PRIMARY><COMMAND>edquota</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-35"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY><COMMAND>edquota</COMMAND>
 command</SECONDARY>
</INDEXTERM>
Establish the quota amounts for individual users. The <COMMAND>edquota</COMMAND> command can be used to set the limits for each user. For example, to set soft limits of 100 MB and 100 inodes on the user ID <LITERAL>sedgwick</LITERAL>, give the following command:</PARA>
<PROGRAMLISTING>
# <USERINPUT>/usr/etc/edquota sedgwick</USERINPUT>&ensp;
</PROGRAMLISTING>
<PARA>The screen clears, and you are placed in the editor specified by the <LITERAL>EDITOR</LITERAL> environment variable (<COMMAND>vi</COMMAND> if <LITERAL>$EDITOR</LITERAL> is not set) to edit the user's disk quota. You see:</PARA>
<PROGRAMLISTING>
fs /  kbytes(soft=0, hard=0)  inodes(soft=0, hard=0)
</PROGRAMLISTING>
<PARA>The filesystem appears first, in this case the root filesystem (<FILENAME>/</FILENAME>). The numeric values for disk space are in kilobytes, not megabytes, so to specify 100 megabytes, you must multiply the number by 1024. The number of inodes should be entered directly. </PARA>
</LISTITEM>
<LISTITEM><PARA>Edit the line to appear as follows:</PARA>
<PROGRAMLISTING>
<USERINPUT>fs / kbytes(soft=102400, hard=0)  inodes(soft=100, hard=0)</USERINPUT>&ensp;
</PROGRAMLISTING>
</LISTITEM>
<LISTITEM><PARA>Save the file and quit the editor after you enter the correct values. If you leave the value at 0, no limit is imposed. Because you are setting only soft limits in this example, the hard values have not been set.</PARA>
</LISTITEM>
<LISTITEM><PARA>Use the <COMMAND>-p</COMMAND> option of <COMMAND>edquota</COMMAND> to assign the same quota to multiple users. Unless explicitly given a quota, users have no limits set on the amount of disk they can use or the number of files they can create.</PARA>
</LISTITEM>
<LISTITEM><PARA><INDEXTERM ID="ITapp1-36"><PRIMARY><COMMAND>quotaon</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-37"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY><COMMAND>quotaon</COMMAND>
 command</SECONDARY>
</INDEXTERM>
Issue the <COMMAND>quotaon</COMMAND> command to put the quotas into effect. For quotas to be accurate, this command should be issued on a local filesystem immediately after the filesystem has been mounted. The <COMMAND>quotaon</COMMAND> command enables quotas for a particular filesystem, or with the <EMPHASIS>-a</EMPHASIS> option, enables quotas for all filesystems indicated in <FILENAME>/etc/fstab</FILENAME> as using quotas. See the <COMMAND>fstab(4)</COMMAND> reference page for complete details on the <FILENAME>/etc/fstab</FILENAME> file.</PARA>
</LISTITEM>
</ORDEREDLIST>
<PARA><INDEXTERM ID="ITapp1-38"><PRIMARY><COMMAND>quotaoff</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-39"><PRIMARY><COMMAND>chkconfig</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>quotas</COMMAND>
 option</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-40"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY><COMMAND>quotaoff</COMMAND>
 command</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-41"><PRIMARY><FILENAME>/etc/init.d/quotas</FILENAME>
 file</PRIMARY>
</INDEXTERM>
Quotas will be automatically enabled at boot time in the future. The script<FILENAME>&ensp;/etc/init.d/quotas</FILENAME> handles enabling of quotas and uses the <COMMAND>chkconfig</COMMAND> command to check the <LITERAL>quotas</LITERAL> configuration flag to decide whether or not to enable quotas. If you need to turn quotas off, use the <COMMAND>quotaoff</COMMAND> command.</PARA>
</SECTION>
<SECTION  ID="LE99493-PARENT"><TITLE  ID="LE99493-TITLE">Monitoring Disk Quotas on EFS Filesystems</TITLE><PARA><INDEXTERM ID="ITapp1-42"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY>monitoring</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-43"><PRIMARY><COMMAND>quotacheck</COMMAND>
 command</PRIMARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-44"><PRIMARY><COMMAND>chkconfig</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>quotacheck</COMMAND>
 option</SECONDARY>
</INDEXTERM>
<INDEXTERM ID="ITapp1-45"><PRIMARY>disk quotas</PRIMARY>
<SECONDARY><COMMAND>quotacheck</COMMAND>
 command</SECONDARY>
</INDEXTERM>
Periodically, check the records retained in the quota file for consistency with the actual number of blocks and files allocated to the user using the <COMMAND>quotacheck</COMMAND> command. It is not necessary to unmount the filesystem or disable the quota system to run this command, though on active filesystems, slightly inaccurate results may be seen. </PARA>
<PARA><COMMAND>quotacheck</COMMAND> is run automatically at boot time by the <FILENAME>/etc/init.d/quotas</FILENAME> script if the <LITERAL>quotacheck</LITERAL> flag has been turned on with <COMMAND>chkconfig</COMMAND>. <COMMAND>quotacheck</COMMAND> can take a considerable amount of time to execute, so it is convenient to have it done at boot time.</PARA>
</SECTION>
</SECTION>
<SECTION  ID="LE97381-PARENT"><TITLE  ID="LE97381-TITLE">Repairing EFS Filesystem Problems</TITLE><PARA><INDEXTERM ID="ITapp1-46"><PRIMARY><COMMAND>fsck</COMMAND>
 command</PRIMARY>
<SECONDARY><COMMAND>using</COMMAND>
</SECONDARY>
</INDEXTERM>
The <COMMAND>fsck</COMMAND> command checks EFS filesystem consistency and sometimes repairs problems that are found. This section describes the messages that are produced by each phase of <COMMAND>fsck</COMMAND>, what they mean, and what you should do about each one. </PARA>
<SECTION  ID="LE12495-PARENT"><TITLE  ID="LE12495-TITLE">General Errors</TITLE><PARA>The following abbreviations are used in <COMMAND>fsck</COMMAND> error messages:</PARA>
<DEFLIST><DEFLISTENTRY><TERM>BLK </TERM>
<LISTITEM><PARA>Block number </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM>DUP </TERM>
<LISTITEM><PARA>Duplicate block number </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM>DIR </TERM>
<LISTITEM><PARA>Directory name </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM>MTIME </TERM>
<LISTITEM><PARA>Time file was last modified </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM>UNREF </TERM>
<LISTITEM><PARA>Unreferenced</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
<PARA>The following sections use these single-letter abbreviations:</PARA>
<DEFLIST><DEFLISTENTRY><TERM><REPLACEABLE>B</REPLACEABLE> </TERM>
<LISTITEM><PARA>Block number </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>F</REPLACEABLE> </TERM>
<LISTITEM><PARA>File (or directory) name </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>I</REPLACEABLE> </TERM>
<LISTITEM><PARA>Inode number </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>M</REPLACEABLE> </TERM>
<LISTITEM><PARA>File mode </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>O</REPLACEABLE> </TERM>
<LISTITEM><PARA>User ID of a file's owner </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>S</REPLACEABLE> </TERM>
<LISTITEM><PARA>File size </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>T</REPLACEABLE> </TERM>
<LISTITEM><PARA>Time file was last modified </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>X</REPLACEABLE> </TERM>
<LISTITEM><PARA>Link count, or number of BAD, DUP, or MISSING blocks, or number of files (depending on context) </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>Y</REPLACEABLE> </TERM>
<LISTITEM><PARA>Corrected link count number, or number of blocks in filesystem (depending on context)</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>Z</REPLACEABLE> </TERM>
<LISTITEM><PARA>Number of free blocks</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
<PARA>In actual <COMMAND>fsck</COMMAND> output, these abbreviations are replaced by the appropriate numbers.</PARA>
<PARA>Two error messages may appear in any phase. Although <COMMAND>fsck</COMMAND> prompts for you to continue checking the filesystem, it is generally best to regard these errors as fatal. Stop the command and investigate what may have caused the problem.</PARA>
<DEFLIST><DEFLISTENTRY><TERM><LITERAL>CAN NOT READ: BLK </LITERAL><REPLACEABLE>B</REPLACEABLE><LITERAL>&ensp;(CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>The request to read a specified block number B in the filesystem failed. This error indicates a serious problem, probably a hardware failure or an error that causes <COMMAND>fsck</COMMAND> to try to read a block that is not in the filesystem. Press <USERINPUT>n</USERINPUT> to stop <COMMAND>fsck</COMMAND>. Shut down the system to the System Maintenance Menu and run hardware diagnostics on the disk drive and controller.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>CAN NOT WRITE: BLK </LITERAL><REPLACEABLE>B</REPLACEABLE><LITERAL>&ensp;(CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>The request for writing a specified block number B in the filesystem failed. The disk may be write-protected or there may be a hardware problem. Press <USERINPUT>n</USERINPUT> to stop <COMMAND>fsck</COMMAND>. Check to make sure the disk is not set to &ldquo;read only.&rdquo; (Some, though not all, disks have this feature.) If the disk is not write-protected, shut down the system to the System Maintenance Menu and run hardware diagnostics on the disk drive and controller.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE90754-PARENT"><TITLE  ID="LE90754-TITLE">Initialization Phase </TITLE><PARA>The command line syntax is checked. Before the filesystem check can be performed, <COMMAND>fsck</COMMAND> sets up some tables and opens some files. The <COMMAND>fsck</COMMAND> command terminates if there are initialization errors.</PARA>
</SECTION>
<SECTION  ID="LE29196-PARENT"><TITLE  ID="LE29196-TITLE">Phase 1 Check Blocks and Sizes </TITLE><PARA><INDEXTERM ID="ITapp1-47"><PRIMARY>inodes</PRIMARY>
<SECONDARY>checking by <COMMAND>fsck</COMMAND>
</SECONDARY>
</INDEXTERM>
This phase checks the inode list. It reports error conditions resulting from:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Checking inode types </PARA>
</LISTITEM>
<LISTITEM><PARA>Setting up the zero-link-count table </PARA>
</LISTITEM>
<LISTITEM><PARA>Examining inode block numbers for bad or duplicate blocks </PARA>
</LISTITEM>
<LISTITEM><PARA>Checking inode size </PARA>
</LISTITEM>
<LISTITEM><PARA>Checking inode format</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<SECTION><TITLE>Phase 1 Error Messages </TITLE><PARA>Phase 1 has three types of error messages: information messages, messages with a <LITERAL>CONTINUE?</LITERAL> prompt, and messages with a <LITERAL>CLEAR?</LITERAL> prompt. The responses that you give to Phase 1 prompts affect <COMMAND>fsck</COMMAND> functions. The possible responses are discussed in <XREF LINKEND="LE49607-PARENT">. Typically, the right answer is Yes, except as noted.</PARA><DEFLIST><DEFLISTENTRY><TERM><LITERAL>UNKNOWN FILE TYPE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;(CLEAR?</LITERAL>)</TERM>
<LISTITEM><PARA>The mode word of the inode I suggests that the inode is not a pipe, special character inode, regular inode, directory inode, symbolic link, or socket.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>LINK COUNT TABLE OVERFLOW (CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>There is no more room in an internal table for <COMMAND>fsck</COMMAND> containing allocated inodes with a link count of zero.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>B</REPLACEABLE><LITERAL>&ensp;BAD I=</LITERAL><REPLACEABLE>I</REPLACEABLE></TERM>
<LISTITEM><PARA>Inode I contains block number B with a number lower than the number of the first data block in the filesystem or greater than the number of the last block in the filesystem. This error condition may invoke the <LITERAL>EXCESSIVE BAD BLKS</LITERAL> error condition in Phase 1 if inode I has too many block numbers outside the filesystem range. This error condition invokes the <LITERAL>BAD/DUP</LITERAL> error condition in Phase 2 and Phase 4.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>EXCESSIVE BAD BLOCKS I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;(CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>There is more than a tolerable number (usually 50) of blocks with a number lower than the number of the first data block in the filesystem or greater than the number of the last block in the filesystem associated with inode I.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><REPLACEABLE>B</REPLACEABLE><LITERAL>&ensp;DUP I=</LITERAL><REPLACEABLE>I</REPLACEABLE></TERM>
<LISTITEM><PARA>Inode I contains block number B, which is already claimed by another inode. This error condition may invoke the <LITERAL>EXCESSIVE DUP BLKS</LITERAL> error condition in Phase 1 if inode I has too many block numbers claimed by other inodes. This error condition invokes Phase 1B and the <LITERAL>BAD/DUP</LITERAL> error condition in Phase 2 and Phase 4. Typically, you should answer No the first time this error appears and Yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>EXCESSIVE DUP BLKS I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;(CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>There is more than a tolerable number (usually 50) of blocks claimed by other inodes.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DUP TABLE OVERFLOW (CONTINUE?)</LITERAL></TERM>
<LISTITEM><PARA>There is no more room in an internal table in fsck containing duplicate block numbers.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>PARTIALLY ALLOCATED INODE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;(CLEAR?)</LITERAL></TERM>
<LISTITEM><PARA>Inode I is neither allocated nor unallocated.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>RIDICULOUS NUMBER OF EXTENTS (</LITERAL><REPLACEABLE>n</REPLACEABLE><LITERAL>) (max allowed </LITERAL><REPLACEABLE>n</REPLACEABLE>) </TERM>
<LISTITEM><PARA>The number of extents is larger than the maximum the system can set and is therefore ridiculous.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>ILLEGAL NUMBER OF INDIRECT EXTENTS (</LITERAL><REPLACEABLE>n</REPLACEABLE><LITERAL>)</LITERAL></TERM>
<LISTITEM><PARA>The number of extents or pointers to extents (indirect extents) exceeds the number of slots in the inode for describing extents.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>BAD MAGIC IN EXTENT</LITERAL></TERM>
<LISTITEM><PARA>The pointer to an extent contains a &ldquo;magic number.&rdquo; If this number is invalid, the pointer to the extent is probably corrupt.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>EXTENT OUT OF ORDER</LITERAL></TERM>
<LISTITEM><PARA>An extent's idea of where it is in the file is inconsistent with the extent pointer in relation to other extent pointers.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>ZERO LENGTH EXTENT</LITERAL></TERM>
<LISTITEM><PARA>An extent is zero length.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>ZERO SIZE DIRECTORY</LITERAL></TERM>
<LISTITEM><PARA>It is erroneous for a directory inode to claim a size of zero. The corresponding inode is cleared.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DIRECTORY SIZE ERROR</LITERAL></TERM>
<LISTITEM><PARA>A directory's size must be an integer number of blocks. The size is recomputed based on its extents.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DIRECTORY EXTENTS CORRUPTED</LITERAL></TERM>
<LISTITEM><PARA>If the computation of size (above) fails, <COMMAND>fsck</COMMAND> prints this message and asks to clear the inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>NUMBER OF EXTENTS TOO LARGE</LITERAL></TERM>
<LISTITEM><PARA>The number of extents or pointers to extents (indirect extents) exceeds the number of slots in the inode for describing extents.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>POSSIBLE DIRECTORY SIZE ERROR</LITERAL></TERM>
<LISTITEM><PARA>The number of blocks in the directory computed from extent pointer lengths is inconsistent with the number computed from the inode size field.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>POSSIBLE FILE SIZE ERROR</LITERAL></TERM>
<LISTITEM><PARA>The number of blocks in the file computed from extent pointer lengths is inconsistent with the number computed from the inode size field. <COMMAND>fsck</COMMAND> gives the option of clearing the inode in this case.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE49607-PARENT"><TITLE  ID="LE49607-TITLE">Phase 1 Responses</TITLE><PARA><XREF LINKEND="LE88866-TITLE"> explains the significance of responses to Phase 1 prompts:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE88866-TITLE">Meaning of fsck Phase 1 Responses</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="142*">
<COLSPEC COLWIDTH="96*">
<COLSPEC COLWIDTH="552*">
<THEAD><ROW><ENTRY><PARA>Prompt</PARA></ENTRY>
<ENTRY><PARA>Response</PARA></ENTRY>
<ENTRY><PARA>Meaning</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><LITERAL>CONTINUE?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Terminate the command.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><KEYCAP>CONTINUE?</KEYCAP></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Continue with the command. This error condition means that a 
complete check of the filesystem is not possible. A second run of 
<COMMAND>fsck</COMMAND> should be made to recheck this filesystem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CLEAR?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other measures to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CLEAR?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Deallocate inode <REPLACEABLE>I</REPLACEABLE> by zeroing its contents. This may invoke the 
<LITERAL>UNALLOCATED</LITERAL> error condition in Phase 2 for each directory entry 
pointing to this inode. </PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
<SECTION><TITLE>Phase 1B Rescan for More Bad Dups</TITLE><PARA>When a duplicate block is found in the filesystem, the filesystem is rescanned to find the inode that previously claimed that block. When the duplicate block is found, the following information message is printed:</PARA>
<DEFLIST><DEFLISTENTRY><TERM><REPLACEABLE>B</REPLACEABLE><LITERAL>&ensp;DUP I=</LITERAL><REPLACEABLE>I</REPLACEABLE> </TERM>
<LISTITEM><PARA>Inode I contains block number B, which is already claimed by another inode. This error condition invokes the <LITERAL>BAD/DUP</LITERAL> error condition in Phase 2. Inodes with overlapping blocks can be determined by examining this error condition and the <LITERAL>DUP</LITERAL> error condition in Phase 1.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
</SECTION>
<SECTION  ID="LE68954-PARENT"><TITLE  ID="LE68954-TITLE">Phase 2 Check Pathnames </TITLE><PARA>This phase traverses the pathname tree, starting at the root directory. <COMMAND>fsck</COMMAND> examines each inode that is being used by a file in a directory of the filesystem being checked.</PARA>
<PARA>Referenced files are marked in order to detect unreferenced files later on. The command also accumulates a count of all links, which it checks against the link counts found in Phase 4.</PARA>
<PARA>Phase 2 reports error conditions resulting from the following:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Root inode mode and status incorrect </PARA>
</LISTITEM>
<LISTITEM><PARA>Directory inode pointers out of range </PARA>
</LISTITEM>
<LISTITEM><PARA>Directory entries pointing to bad inodes</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA><COMMAND>fsck</COMMAND> examines the root directory inode first, because this directory is where the search for all pathnames must start.</PARA>
<PARA>If the root directory inode is corrupted, or if its type is not<FILENAME>&ensp;directory</FILENAME>, <COMMAND>fsck</COMMAND> prints error messages. Generally, if a severe problem exists with the root directory it is impossible to salvage the filesystem. <COMMAND>fsck</COMMAND> allows attempts to continue under some circumstances.</PARA>
<SECTION><TITLE>Phase 2 Error Messages</TITLE><PARA>The following error messages result from problems with the root directory inode. The possible responses are discussed in <XREF LINKEND="LE96263-PARENT">.</PARA><DEFLIST><DEFLISTENTRY><TERM><LITERAL>ROOT INODE UNALLOCATED. TERMINATING</LITERAL> </TERM>
<LISTITEM><PARA>The root inode points to incorrect information. There is no way to fix this problem, so the command stops.</PARA>
<PARA>If this problem occurs on the root filesystem, you must reinstall IRIX. If it occurs on another filesystem, you must recreate the filesystem using <COMMAND>mkfs</COMMAND> and recover files and data from backups.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>ROOT INODE NOT A DIRECTORY. FIX?</LITERAL> </TERM>
<LISTITEM><PARA>The root directory inode does not seem to describe a directory. This error is usually fatal. The typical answer is Yes.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DUPS/BAD IN ROOT INODE. CONTINUE?</LITERAL> </TERM>
<LISTITEM><PARA>Something is wrong with the block addressing information of the root directory. The typical answer is Yes.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
<PARA>Other Phase 2 messages have a <LITERAL>REMOVE?</LITERAL> prompt. These messages are:</PARA>
<DEFLIST><DEFLISTENTRY><TERM><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OUT OF RANGE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;NAME=</LITERAL><REPLACEABLE>F</REPLACEABLE><LITERAL>&ensp;(REMOVE?)</LITERAL> </TERM>
<LISTITEM><PARA>A directory entry F has an inode number I that is greater than the end of the inode list. The typical answer is Yes.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>UNALLOCATED I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;NAME=</LITERAL><REPLACEABLE>F</REPLACEABLE><LITERAL>(REMOVE?)</LITERAL> </TERM>
<LISTITEM><PARA>A directory entry F has an inode I that is not marked as allocated. The owner O, mode M, size S, modify time T, and filename F are printed. If the filesystem is not mounted and the <COMMAND>-n</COMMAND> option is not specified, and if the inode that the entry points to is size 0, the entry is removed automatically.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DUP/BAD I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;DIR=</LITERAL><REPLACEABLE>F</REPLACEABLE><LITERAL>&ensp;(REMOVE?)</LITERAL> </TERM>
<LISTITEM><PARA>Phase 1 or Phase 1B found duplicate blocks or bad blocks associated with directory entry F, directory inode I. The owner O, mode M, size S, modify time T, and directory name F are printed. Typically, you should answer No the first time this error appears and Yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DUP/BAD I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;FILE=</LITERAL><REPLACEABLE>F</REPLACEABLE><LITERAL>&ensp;(REMOVE?)</LITERAL> </TERM>
<LISTITEM><PARA>Phase 1 or Phase 1B found duplicate blocks or bad blocks associated with file entry F, inode I. The owner O, mode M, size S, modify time T, and filename F are printed. Typically, you should answer No the first time this error appears and Yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE96263-PARENT"><TITLE  ID="LE96263-TITLE">Phase 2 Responses</TITLE><PARA><XREF LINKEND="LE91277-TITLE"> describes the significance of responses to Phase 2 prompts:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE91277-TITLE">Meaning of Phase 2 fsck Responses</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="144*">
<COLSPEC COLWIDTH="98*">
<COLSPEC COLWIDTH="550*">
<THEAD><ROW><ENTRY><PARA>Prompt</PARA></ENTRY>
<ENTRY><PARA>Response</PARA></ENTRY>
<ENTRY><PARA>Meaning</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><LITERAL>FIX?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA><COMMAND>fsck</COMMAND> terminates.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>FIX?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA><COMMAND>fsck</COMMAND> treats the contents of the inode as a directory, even though the 
inode mode indicates otherwise. If the directory is actually intact, 
and only the inode mode is incorrectly set, this may recover the 
directory. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CONTINUE?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA><COMMAND>fsck</COMMAND> terminates.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CONTINUE?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA><COMMAND>fsck</COMMAND> attempts to continue with the check. If some of the root 
directory is still readable, pieces of the files system may be salvaged.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>REMOVE?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>REMOVE?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Remove a bad directory entry.</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
</SECTION>
<SECTION  ID="LE94868-PARENT"><TITLE  ID="LE94868-TITLE">Phase 3 Check Connectivity </TITLE><PARA>Phase 3 of <COMMAND>fsck</COMMAND> locates any unreferenced directories detected in Phase 2 and attempts to reconnect them. It reports error conditions resulting from:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Unreferenced directories </PARA>
</LISTITEM>
<LISTITEM><PARA>Missing or full <FILENAME>lost+found</FILENAME> directories</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<SECTION><TITLE>Phase 3 Error Messages </TITLE><PARA>Phase 3 has two types of error messages: information messages and messages with a <LITERAL>RECONNECT?</LITERAL> prompt. The possible responses are discussed in <XREF LINKEND="LE50973-PARENT">.</PARA><DEFLIST><DEFLISTENTRY><TERM><LITERAL>UNREF DIR I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(RECONNECT?)</LITERAL></TERM>
<LISTITEM><PARA>The directory inode I was not connected to a directory entry when the filesystem was traversed. The owner O, mode M, size S, and modify time T of directory inode I are printed. The <COMMAND>fsck</COMMAND> command forces the reconnection of a nonempty directory. The typical answer is yes.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SORRY. NO lost+found DIRECTORY</LITERAL></TERM>
<LISTITEM><PARA>No <FILENAME>lost+found</FILENAME> directory is in the root directory of the filesystem; <COMMAND>fsck</COMMAND> ignores the request to link a directory in <FILENAME>lost+found</FILENAME>. The unreferenced file is removed.</PARA>
<PARA>Use <COMMAND>fsck -l</COMMAND> to recover and remake the <FILENAME>lost+found</FILENAME> directory as soon as possible. </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SORRY. NO SPACE IN lost+found DIRECTORY</LITERAL></TERM>
<LISTITEM><PARA>There is no space to add another entry to the <FILENAME>lost+found</FILENAME> directory in the root directory of the filesystem; <COMMAND>fsck</COMMAND> ignores the request to link a directory in <FILENAME>lost+found</FILENAME>. The unreferenced file is removed.</PARA>
<PARA>Use <COMMAND>fsck -l </COMMAND>to recover and clean out the <FILENAME>lost+found</FILENAME> directory as soon as possible.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>DIR I=</LITERAL><REPLACEABLE>I1</REPLACEABLE><LITERAL>&ensp;CONNECTED. PARENT WAS I=</LITERAL><REPLACEABLE>I2</REPLACEABLE></TERM>
<LISTITEM><PARA>This is an advisory message indicating that a directory inode I1 was successfully connected to the <FILENAME>lost+found</FILENAME> directory. The parent inode I2 of the directory inode I1 is replaced by the inode number of the <FILENAME>lost+found</FILENAME> directory.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE50973-PARENT"><TITLE  ID="LE50973-TITLE">Phase 3 Responses</TITLE><PARA><XREF LINKEND="LE32401-TITLE"> explains the significance of responses to Phase 3 prompts:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE32401-TITLE">Meaning of fsck Phase 3 Responses</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="152*">
<COLSPEC COLWIDTH="102*">
<COLSPEC COLWIDTH="540*">
<THEAD><ROW><ENTRY><PARA>Prompt</PARA></ENTRY>
<ENTRY><PARA>Response</PARA></ENTRY>
<ENTRY><PARA>Meaning</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><LITERAL>RECONNECT?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. This invokes the <LITERAL>UNREF</LITERAL> error condition 
in Phase 4. A No response is appropriate only if the user intends to 
take other action to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>RECONNECT?</LITERAL></PARA></ENTRY>
<ENTRY><PARA>&ensp;<LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Reconnect directory inode <REPLACEABLE>I</REPLACEABLE> to the filesystem in the directory for 
lost files (<FILENAME>lost+found</FILENAME>). This may invoke a lost+found error 
condition if there are problems connecting directory inode <REPLACEABLE>I</REPLACEABLE> to 
<FILENAME>lost+found</FILENAME>. If the link was successful, this invokes a 
<LITERAL>CONNECTED</LITERAL> information message.</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
</SECTION>
<SECTION  ID="LE54770-PARENT"><TITLE  ID="LE54770-TITLE">Phase 4 Check Reference Counts </TITLE><PARA>This phase checks the link count information seen in Phases 2 and 3 and locates any unreferenced regular files. It reports error conditions resulting from:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Unreferenced files </PARA>
</LISTITEM>
<LISTITEM><PARA>A missing or full <FILENAME>lost+found</FILENAME> directory </PARA>
</LISTITEM>
<LISTITEM><PARA>Incorrect link counts for files, directories, or special files </PARA>
</LISTITEM>
<LISTITEM><PARA>Unreferenced files and directories </PARA>
</LISTITEM>
<LISTITEM><PARA>Bad and duplicate blocks in files and directories </PARA>
</LISTITEM>
<LISTITEM><PARA>Incorrect counts of total free inodes</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<SECTION><TITLE>Phase 4 Error Messages </TITLE><PARA>Phase 4 has five types of error messages:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Information messages </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages with a <LITERAL>RECONNECT?</LITERAL> prompt </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages with a <LITERAL>CLEAR?</LITERAL> prompt </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages with an <LITERAL>ADJUST?</LITERAL> prompt </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages with a <LITERAL>FIX?</LITERAL> prompt</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>The possible responses are discussed in <XREF LINKEND="LE21558-PARENT">.The typical answer is <LITERAL>Yes</LITERAL>, except as noted.</PARA>
<DEFLIST><DEFLISTENTRY><TERM><LITERAL>UNREF FILE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(RECONNECT?)</LITERAL></TERM>
<LISTITEM><PARA>Inode I was not connected to a directory entry when the filesystem was traversed. The owner O, mode M, size S, and modify time T of inode I are printed. If the <COMMAND>-n</COMMAND> option is omitted and the filesystem is not mounted, empty files are cleared automatically. Nonempty files are not cleared.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SORRY. NO lost+found DIRECTORY</LITERAL></TERM>
<LISTITEM><PARA>There is no <FILENAME>lost+found</FILENAME> directory in the root directory of the filesystem; <COMMAND>fsck</COMMAND> ignores the request to link a file in <FILENAME>lost+found</FILENAME>.</PARA>
<PARA>Use <COMMAND>fsck -l</COMMAND> to recover and create the <FILENAME>lost+found</FILENAME> directory as soon as possible.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SORRY. NO SPACE IN lost+found DIRECTORY</LITERAL></TERM>
<LISTITEM><PARA>There is no space to add another entry to the <FILENAME>lost+found</FILENAME> directory in the root directory of the filesystem; <COMMAND>fsck</COMMAND> ignores the request to link a file in <FILENAME>lost+found</FILENAME>.</PARA>
<PARA>Use <COMMAND>fsck -l</COMMAND> to recover and clean out the <FILENAME>lost+found</FILENAME> directory as soon as possible.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>(CLEAR)</LITERAL>
</TERM>
<LISTITEM><PARA><LITERAL></LITERAL>The inode mentioned in the immediately previous <LITERAL>UNREF</LITERAL> error condition cannot be reconnected, so it is cleared.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>LINK COUNT FILE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;COUNT=</LITERAL><REPLACEABLE>X</REPLACEABLE><LITERAL>&ensp;SHOULD BE </LITERAL><REPLACEABLE>Y</REPLACEABLE><LITERAL>&ensp;(ADJUST?)</LITERAL></TERM>
<LISTITEM><PARA>The link count for inode I, which is a file, is X but should be Y. The owner O, mode M, size S, and modify time T are printed.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>LINK COUNT DIR I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;COUNT=</LITERAL><REPLACEABLE>X</REPLACEABLE><LITERAL>&ensp;SHOULD BE </LITERAL><REPLACEABLE>Y</REPLACEABLE><LITERAL>&ensp;(ADJUST?)</LITERAL></TERM>
<LISTITEM><PARA>The link count for inode I, which is a directory, is X but should be Y. The owner O, mode M, size S, and modify time T of directory inode I are printed.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>LINK COUNT </LITERAL><REPLACEABLE>F</REPLACEABLE><LITERAL>&ensp;I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;COUNT=</LITERAL><REPLACEABLE>X</REPLACEABLE><LITERAL>&ensp;SHOULD BE </LITERAL><REPLACEABLE>Y</REPLACEABLE><LITERAL>&ensp;(ADJUST?)</LITERAL></TERM>
<LISTITEM><PARA>The link count for F inode I is X but should be Y. The filename F, owner O, mode M, size S, and modify time T are printed.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>UNREF FILE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(CLEAR?)</LITERAL></TERM>
<LISTITEM><PARA>Inode I, which is a file, was not connected to a directory entry when the filesystem was traversed. The owner O, mode M, size S, and modify time T of inode I are printed. If the <COMMAND>-n</COMMAND> option is omitted and the filesystem is not mounted, empty files are cleared automatically. Nonempty directories are not cleared. Typically, you should answer no the first time this error appears and yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>UNREF DIR I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(CLEAR?)</LITERAL></TERM>
<LISTITEM><PARA>Inode I, which is a directory, was not connected to a directory entry when the filesystem was traversed. The owner O, mode M, size S, and modify time T of inode I are printed. If the <COMMAND>-n</COMMAND> option is omitted and the filesystem is not mounted, empty directories are cleared automatically. Nonempty directories are not cleared. Typically, you should answer no the first time this error appears and yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>BAD/DUP FILE I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(CLEAR?)</LITERAL></TERM>
<LISTITEM><PARA>Phase 1 or Phase 1B found duplicate blocks or bad blocks associated with file inode I. The owner O, mode M, size S, and modify time T of inode I are printed. Typically, you should answer no the first time this error appears and yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>BAD/DUP DIR I=</LITERAL><REPLACEABLE>I</REPLACEABLE><LITERAL>&ensp;OWNER=</LITERAL><REPLACEABLE>O</REPLACEABLE><LITERAL>&ensp;MODE=</LITERAL><REPLACEABLE>M</REPLACEABLE><LITERAL>&ensp;SIZE=</LITERAL><REPLACEABLE>S</REPLACEABLE><LITERAL>&ensp;MTIME=</LITERAL><REPLACEABLE>T</REPLACEABLE><LITERAL>&ensp;(CLEAR?)</LITERAL></TERM>
<LISTITEM><PARA>Phase 1 or Phase 1B found duplicate blocks or bad blocks associated with directory inode I. The owner O, mode M, size S, and modify time T of inode I are printed. Typically, you should answer no the first time this error appears and yes the second time if you know the files claimed by the other inode.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>FREE INODE COUNT WRONG IN SUPERBLK (FIX?)</LITERAL></TERM>
<LISTITEM><PARA><INDEXTERM ID="ITapp1-48"><PRIMARY>super-blocks</PRIMARY>
</INDEXTERM>
The actual count of the free inodes does not match the count in the superblock of the filesystem.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE21558-PARENT"><TITLE  ID="LE21558-TITLE">Phase 4 Responses</TITLE><PARA><XREF LINKEND="LE48937-TITLE"> describes the significance of responses to Phase 4 prompts:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE48937-TITLE">Meaning of fsck Phase 4 Responses</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="152*">
<COLSPEC COLWIDTH="94*">
<COLSPEC COLWIDTH="544*">
<THEAD><ROW><ENTRY><PARA>Prompt</PARA></ENTRY>
<ENTRY><PARA>Response</PARA></ENTRY>
<ENTRY><PARA>Meaning</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><LITERAL>RECONNECT?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore this error condition. This invokes a CLEAR error condition 
later in Phase 4.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>RECONNECT?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Reconnect inode <REPLACEABLE>I</REPLACEABLE> to filesystem in the directory for lost files 
(<FILENAME>lost+found</FILENAME>). This can cause a lost+found error condition in this 
phase if there are problems connecting inode I to <FILENAME>lost+found</FILENAME>. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CLEAR?</LITERAL>&ensp;</PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CLEAR?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Deallocate the inode by zeroing its contents.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>ADJUST?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>ADJUST?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Replace link count of file inode I with the link counted computed 
in Phase 2.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>FIX?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem.</PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>FIX?</LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Fix the problem.</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
</SECTION>
<SECTION  ID="LE19686-PARENT"><TITLE  ID="LE19686-TITLE">Phase 5 Check Free List </TITLE><PARA>Phase 5 checks the free-block list. It reports error conditions resulting from:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Bad blocks in the free-block list </PARA>
</LISTITEM>
<LISTITEM><PARA>Bad free-block count </PARA>
</LISTITEM>
<LISTITEM><PARA>Duplicate blocks in the free-block list </PARA>
</LISTITEM>
<LISTITEM><PARA>Unused blocks from the filesystem not in the free-block list </PARA>
</LISTITEM>
<LISTITEM><PARA>Total free-block count incorrect</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<SECTION><TITLE>Phase 5 Error Messages </TITLE><PARA>Phase 5 has four types of error messages:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA>Information messages </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages that have a <LITERAL>CONTINUE?</LITERAL> prompt </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages that have a <LITERAL>FIX?</LITERAL> prompt </PARA>
</LISTITEM>
<LISTITEM><PARA>Messages that have a <LITERAL>SALVAGE?</LITERAL> prompt</PARA>
</LISTITEM>
</ITEMIZEDLIST>
<PARA>The possible responses are discussed in <XREF LINKEND="LE78389-PARENT">.The typical answer is <LITERAL>Yes</LITERAL>.</PARA>
<DEFLIST><DEFLISTENTRY><TERM><LITERAL>FREE BLK COUNT WRONG IN SUPERBLOCK (FIX?</LITERAL>)</TERM>
<LISTITEM><PARA>The actual count of free blocks does not match the count in the superblock of the filesystem.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>BAD FREE LIST (SALVAGE?)</LITERAL></TERM>
<LISTITEM><PARA>This message is always preceded by one or more of the Phase 5 information messages.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
<SECTION  ID="LE78389-PARENT"><TITLE  ID="LE78389-TITLE">Phase 5 Responses</TITLE><PARA><XREF LINKEND="LE29407-TITLE"> describes the significance of responses to Phase 5 prompts:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE29407-TITLE">Meanings of Phase 5 fsck Responses</TBLTITLE>
<TGROUP COLS="3">
<COLSPEC COLWIDTH="136*">
<COLSPEC COLWIDTH="104*">
<COLSPEC COLWIDTH="550*">
<THEAD><ROW><ENTRY><PARA>Prompt</PARA></ENTRY>
<ENTRY><PARA>Response</PARA></ENTRY>
<ENTRY><PARA>Meaning</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA><LITERAL>CONTINUE?</LITERAL>&ensp;</PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Terminate the command. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>CONTINUE?</LITERAL>&ensp;</PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the rest of the free-block list and continue execution of fsck. 
This error condition always invokes a <LITERAL>BAD BLKS IN FREE LIST</LITERAL> 
error condition later in Phase 5. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>FIX? </LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>FIX? </LITERAL></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Replace count in superblock by actual count. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><LITERAL>SALVAGE?</LITERAL>&ensp;</PARA></ENTRY>
<ENTRY><PARA><LITERAL>n</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Ignore the error condition. A No response is appropriate only if the 
user intends to take other action to fix the problem. </PARA></ENTRY>
</ROW>
<ROW><ENTRY><PARA><KEYCAP>SALVAGE? </KEYCAP></PARA></ENTRY>
<ENTRY><PARA><LITERAL>y</LITERAL></PARA></ENTRY>
<ENTRY><PARA>Replace actual free-block bitmap with a new free-block bitmap. </PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
</SECTION>
</SECTION>
<SECTION  ID="LE19700-PARENT"><TITLE  ID="LE19700-TITLE">Phase 6 Salvage Free List </TITLE><PARA>This phase reconstructs the free-block bitmap. There are no error messages that can be generated in this phase and no responses are required.</PARA>
</SECTION>
<SECTION  ID="LE42973-PARENT"><TITLE  ID="LE42973-TITLE">Cleanup Phase </TITLE><PARA>Once a filesystem has been checked, a few cleanup functions are performed. The cleanup phase displays advisory messages about the filesystem and status of the filesystem.</PARA>
<SECTION><TITLE>Cleanup Phase Messages </TITLE><DEFLIST><DEFLISTENTRY><TERM><REPLACEABLE>X</REPLACEABLE><LITERAL>&ensp;files </LITERAL><REPLACEABLE>Y</REPLACEABLE><LITERAL>&ensp;blocks </LITERAL><REPLACEABLE>Z</REPLACEABLE><LITERAL>&ensp;free</LITERAL></TERM>
<LISTITEM><PARA>This is an advisory message indicating that the filesystem checked contained X files using Y blocks leaving Z blocks free in the filesystem.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SUPERBLOCK MARKED DIRTY</LITERAL></TERM>
<LISTITEM><PARA>A field in the superblock is queried by system commands to decide if <COMMAND>fsck</COMMAND> must be run before mounting a filesystem. If this field is not &ldquo;clean,&rdquo;<COMMAND>&ensp;fsck </COMMAND>reports and asks if it should be cleaned. </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>PRIMARY SUPERBLOCK WAS INVALID</LITERAL></TERM>
<LISTITEM><PARA>If the primary superblock is too corrupt to use, and <COMMAND>fsck</COMMAND> can locate a secondary superblock, it asks to replace the primary superblock with the backup. </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>SECONDARY SUPERBLOCK MISSING</LITERAL></TERM>
<LISTITEM><PARA>If there is no secondary superblock, and <COMMAND>fsck</COMMAND> finds space for one, it asks to create a secondary superblock.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>CHECKSUM WRONG IN SUPERBLOCK</LITERAL></TERM>
<LISTITEM><PARA>An incorrect checksum makes a filesystem unmountable. </PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>***** FILE SYSTEM WAS MODIFIED *****</LITERAL></TERM>
<LISTITEM><PARA>This is an advisory message indicating that the current filesystem was modified by <COMMAND>fsck</COMMAND>.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>***** REMOUNTING ROOT... *****</LITERAL></TERM>
<LISTITEM><PARA>This is an advisory message indicating that <COMMAND>fsck</COMMAND> made changes to a mounted root filesystem. The automatic remount ensures that in-core data structures and the filesystem are consistent.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
</SECTION>
</SECTION>
</SECTION>
</APPENDIX>
