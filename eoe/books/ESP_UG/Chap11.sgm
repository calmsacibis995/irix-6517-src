<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="11"><TITLE><XREFTARGET ID="22435">Logging Events from Applications and Scripts</TITLE><PARAGRAPH>The Embedded Support Partner framework provides two ways for you to send events from your local applications and scripts to Embedded Support Partner:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>By using the <SCREENDISPLAY>eventmon</SCREENDISPLAY> Application Programming Interface (API)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>By using the <SCREENDISPLAY>esplogger</SCREENDISPLAY> tool</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>You can also use the <SCREENDISPLAY>openlog</SCREENDISPLAY>, <SCREENDISPLAY>syslog</SCREENDISPLAY>, and <SCREENDISPLAY>closelog</SCREENDISPLAY> SYSLOG functions to send event information through SYSLOG. Refer to the <REFPAGE>syslog(3c)</REFPAGE> man page for more information.</NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE>Event Classification and Sequence Numbers</TITLE><PARAGRAPH>The Embedded Support Partner framework uses a standardized event classification scheme for the events that it registers. This classification scheme was implemented to:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Provide a meaningful representation of the events that have occurred so that users can easily interpret them</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Provide an easy way to locate the source of an error by providing a general category and more specific information</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>In this scheme, events are categorized by class and type. An event class describes a general area that Embedded Support Partner monitors (for example, SCSI). An event type provides greater detail about individual events (for example, a SCSI controller initialization failure).</PARAGRAPH>
<PARAGRAPH>Embedded Support Partner automatically generates event class and type numbers when you create custom events and classes. You can use these numbers with your local applications and scripts to send event information to the Embedded Support Partner framework through the <SCREENDISPLAY>eventmon</SCREENDISPLAY> API and <SCREENDISPLAY>esplogger</SCREENDISPLAY> tool.</PARAGRAPH>
<PARAGRAPH>The Embedded Support Partner framework also uses unique sequence numbers for system messages. These sequence numbers provide a mechanism that enables Embedded Support Partner to isolate problems at the source code level.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Using the eventmon API</TITLE><PARAGRAPH>The <SCREENDISPLAY>eventmon</SCREENDISPLAY> API contains a set of functions that you can call from your local C or C++ programs to send event information to the event monitoring component of Embedded Support Partner (<SCREENDISPLAY>eventmond</SCREENDISPLAY>). The <SCREENDISPLAY>eventmon</SCREENDISPLAY> API includes the following functions:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><SCREENDISPLAY>int EVMONAPI emapiIsDaemonInstalled();</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This function determines whether the <SCREENDISPLAY>eventmond</SCREENDISPLAY> software is installed on the system. </PARAGRAPH>
<PARAGRAPH><BOLD>Parameters:</BOLD>&space;</PARAGRAPH>
<PARAGRAPH>None</PARAGRAPH>
<PARAGRAPH><BOLD>Return value:</BOLD>&space;</PARAGRAPH>
<PARAGRAPH>An integer: A nonzero value indicates that the <SCREENDISPLAY>/usr/etc/eventmond</SCREENDISPLAY> executable file exists on the system. A zero indicates that the file does not exist on the system.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><SCREENDISPLAY>int EVMONAPI emapiIsDaemonStarted();</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This function determines whether <SCREENDISPLAY>eventmond</SCREENDISPLAY> is running on the system. You should use this function to verify that <SCREENDISPLAY>eventmond</SCREENDISPLAY> is running before you use any other <SCREENDISPLAY>eventmon</SCREENDISPLAY> API functions.</PARAGRAPH>
<PARAGRAPH><BOLD>Parameters:</BOLD>&space;</PARAGRAPH>
<PARAGRAPH>None</PARAGRAPH>
<PARAGRAPH><BOLD>Return value:</BOLD>&space;</PARAGRAPH>
<PARAGRAPH>An integer: A nonzero value indicates that <SCREENDISPLAY>eventmond</SCREENDISPLAY> is running on the system. A zero indicates that <SCREENDISPLAY>eventmond</SCREENDISPLAY> is not running on the system.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><SCREENDISPLAY>int EVMONAPI emapiDeclareDaemonUnload();</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This function unloads <SCREENDISPLAY>eventmond</SCREENDISPLAY> from memory. (Note that the <SCREENDISPLAY>eventmond</SCREENDISPLAY> daemon can remain in the memory for up to 2 seconds after this function is called while the unload process completes.)</PARAGRAPH>
<PARAGRAPH><BOLD>Parameters:</BOLD>&space;</PARAGRAPH>
<PARAGRAPH>None</PARAGRAPH>
<PARAGRAPH><BOLD>Return value: </BOLD></PARAGRAPH>
<PARAGRAPH>An integer: A nonzero value indicates that <SCREENDISPLAY>eventmond</SCREENDISPLAY> successfully unloaded from memory. A zero indicates that an error prevented <SCREENDISPLAY>eventmond</SCREENDISPLAY> from successfully unloading from memory. </PARAGRAPH>
<PARAGRAPH>An application must have root permissions/privileges to call this function.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><SCREENDISPLAY>int EVMONAPI emapiDeclareDaemonReloadConfig();</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This function causes <SCREENDISPLAY>eventmond</SCREENDISPLAY> to reload the configuration information. This process includes three steps:</PARAGRAPH>
<ORDEREDLISTIND><LISTIND><PARAGRAPH>Drop all filtering information from the internal <SCREENDISPLAY>eventmond</SCREENDISPLAY> memory tables.</PARAGRAPH>
</LISTIND>
<LISTIND><PARAGRAPH>Connect to system tables that contain the filtering information.</PARAGRAPH>
</LISTIND>
<LISTIND><PARAGRAPH>Reconfigure the internal <SCREENDISPLAY>eventmond</SCREENDISPLAY> memory tables with the information from the system tables.</PARAGRAPH>
</LISTIND>
</ORDEREDLISTIND>
<PARAGRAPH>This function has the same functionality as the following shell command:</PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>kill -HUP </SCREENDISPLAY><ITALICS>eventmon_pid</ITALICS></PARAGRAPH>
<PARAGRAPH><BOLD>Parameters: </BOLD></PARAGRAPH>
<PARAGRAPH>None</PARAGRAPH>
<PARAGRAPH><BOLD>Return value: </BOLD></PARAGRAPH>
<PARAGRAPH>An integer: A nonzero value indicates that <SCREENDISPLAY>eventmond</SCREENDISPLAY> successfully reloaded the configuration information. A zero indicates that an error prevented <SCREENDISPLAY>eventmond</SCREENDISPLAY> from successfully reloading the configuration information.</PARAGRAPH>
<PARAGRAPH>An application must have root permissions/privileges to call this function.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><SCREENDISPLAY>int EVMONAPI emapiSendEvent(char *hostname_from,unsigned long timehost,int etype, int epri, char *eventbuffer);</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This function sends information about an event (event class sequence number and priority/facility code) to <SCREENDISPLAY>eventmond</SCREENDISPLAY>.</PARAGRAPH>
<PARAGRAPH><BOLD>Parameters</BOLD>:</PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>char *hostname_from </SCREENDISPLAY></PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>The name of the host where the event occurred (Use NULL to indicate the local host.)</PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
<PARAGRAPH><SCREENDISPLAY>unsigned long timehost </SCREENDISPLAY></PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>The name of the host that is sending the event information (Use NULL to indicate the local host.) </PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
<PARAGRAPH><SCREENDISPLAY>int etype </SCREENDISPLAY></PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>A number that specifies the event type (must be a nonzero value)</PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
<PARAGRAPH><SCREENDISPLAY>int epri </SCREENDISPLAY></PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>The priority/facility code </PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
<PARAGRAPH><SCREENDISPLAY>char *eventbuffer </SCREENDISPLAY></PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>A valid ASCIZ buffer that contains the event message string (It must be a valid string pointer and have a nonzero size.) &lbreak;&lbreak;The buffer cannot be larger than the number of bytes specified by EVMONAPI_MAXEVENTSIZE (16 KB, as defined in the <SCREENDISPLAY>eventmonapi.h</SCREENDISPLAY> file).</PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
<PARAGRAPH><BOLD>Return value:</BOLD></PARAGRAPH>
<PARAGRAPH>An integer: A nonzero value indicates that the information was successfully passed to <SCREENDISPLAY>eventmond</SCREENDISPLAY> for processing. A zero indicates that an error prevented the information from successfully reaching <SCREENDISPLAY>eventmond</SCREENDISPLAY>. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The following sample code fragment demonstrates how to use the <SCREENDISPLAY>eventmon</SCREENDISPLAY> API:</PARAGRAPH>
<CODE>
&space;     #include &lt;stdio.h>
&space;     #include &lt;sys/syslog.h>
&space;     #include &lt;eventmonapi.h>

&space;     main()
&space;     { if(!emapiIsDaemonStarted())
&space;       { printf("EventMon daemon not started!0);
&space;         exit(0);
&space;       }
&space;       return emapiSendEvent("legalov.sgi.com",0,0x20101C,
&space;              LOG_MAKEPRI(LOG_USER,LOG_INFO), "Hello world!");
&space;     }
</CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Using the esplogger Tool</TITLE><PARAGRAPH>Use the <SCREENDISPLAY>esplogger</SCREENDISPLAY> tool to pass event information from your local scripts to the event monitoring component of Embedded Support Partner (<SCREENDISPLAY>eventmond</SCREENDISPLAY>). You can run <SCREENDISPLAY>esplogger</SCREENDISPLAY> from a UNIX prompt or from a UNIX shell script. <SCREENDISPLAY>esplogger</SCREENDISPLAY> uses the following command syntax:</PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>esplogger -s </SCREENDISPLAY><ITALICS>sequence_number</ITALICS><SCREENDISPLAY>&space;{-f </SCREENDISPLAY><ITALICS>filename</ITALICS><SCREENDISPLAY>&space;| -m "</SCREENDISPLAY><ITALICS>message</ITALICS><SCREENDISPLAY>"} [-p </SCREENDISPLAY><ITALICS>priority</ITALICS><SCREENDISPLAY>] [-t&nbsp;</SCREENDISPLAY><ITALICS>time</ITALICS><SCREENDISPLAY>]</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>esplogger -h</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>esplogger -V</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>where:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The -<SCREENDISPLAY>s </SCREENDISPLAY><ITALICS>sequence_number</ITALICS> option specifies the sequence number (in decimal or hexadecimal). You must use this option with the <SCREENDISPLAY>-t</SCREENDISPLAY> option and the <SCREENDISPLAY>-f</SCREENDISPLAY> or <SCREENDISPLAY>-m</SCREENDISPLAY> options.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-f </SCREENDISPLAY><ITALICS>filename</ITALICS> option specifies the file that contains data to log in the Embedded Support Partner framework. You must include the <SCREENDISPLAY>-s</SCREENDISPLAY> option with this option. You cannot use this option with the <SCREENDISPLAY>-m</SCREENDISPLAY> option.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-m &ldquo;</SCREENDISPLAY><ITALICS>message</ITALICS>&space;<SCREENDISPLAY>&ldquo;</SCREENDISPLAY> option specifies a message to log in the Embedded Support Partner framework. You must include the <SCREENDISPLAY>-s</SCREENDISPLAY> option with this option. You cannot use this option with the <SCREENDISPLAY>-f</SCREENDISPLAY> option.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-p </SCREENDISPLAY><ITALICS>priority</ITALICS> option specifies the priority (for example, local0.notice). Refer to the <REFPAGE>syslog(3C)</REFPAGE> man page for descriptions of the priority values. If you do not specify a priority value, <SCREENDISPLAY>esplogger</SCREENDISPLAY> sets the priority to local0.info. You must use this option with the <SCREENDISPLAY>-s</SCREENDISPLAY> option and the <SCREENDISPLAY>-f</SCREENDISPLAY> or <SCREENDISPLAY>-m</SCREENDISPLAY> option.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-t </SCREENDISPLAY><ITALICS>time</ITALICS> option specifies the time that the event occurred. You must specify the time in seconds since 00: 00:00 UTC on January 1, 1970 (in decimal notation). If you do not specify the time, <SCREENDISPLAY>esplogger</SCREENDISPLAY> defaults the time to the time that it received the event. You must use this option with the <SCREENDISPLAY>-s</SCREENDISPLAY> option and the <SCREENDISPLAY>-f</SCREENDISPLAY> or <SCREENDISPLAY>-m</SCREENDISPLAY> option.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-h</SCREENDISPLAY> option prints the usage information.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <SCREENDISPLAY>-V</SCREENDISPLAY> option prints the <SCREENDISPLAY>esplogger</SCREENDISPLAY> version number.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>You can also use logger to send event information through SYSLOG. Refer to the <REFPAGE>logger(1)</REFPAGE> man page for more information.</NOTE>
<SECTION2 LBL="" HELPID = ""><TITLE>Example 1</TITLE><EXAMPLE>
<SCREENDISPLAY>esplogger -s 200356 -f availmon.dat</SCREENDISPLAY>
</EXAMPLE>
<PARAGRAPH>This example sets the sequence number to 200356, the priority to local0.info (1030), and the time to the time that <SCREENDISPLAY>esplogger</SCREENDISPLAY> received the event. Then, it passes this information and the data in the <SCREENDISPLAY>availmon.dat</SCREENDISPLAY> file to <SCREENDISPLAY>eventmond</SCREENDISPLAY>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Example 2</TITLE><PARAGRAPH><SCREENDISPLAY>esplogger -s 0x00200000 -p syslog.warning -m "Start SVP"</SCREENDISPLAY></PARAGRAPH>
<PARAGRAPH>This example sets the sequence number to 0x00200000, the priority to syslog.warning (324), and the time to the time that <SCREENDISPLAY>esplogger</SCREENDISPLAY> received the event. Then, it passes this information and the message to <SCREENDISPLAY>eventmond</SCREENDISPLAY>.</PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
