<!-- Produced by version 4.3 (11/99) of SGI Frame/SGIDOCBK SGML translator -->
<CHAPTER ID="LE76497-PARENT"><TITLE ID="LE76497-TITLE">Managing User Processes</TITLE><PARA>This chapter describes the tasks you may perform to manage user processes:</PARA>
<ITEMIZEDLIST><LISTITEM><PARA><XREF LINKEND="LE24354-TITLE"><XREF LINKEND="LE24354-TITLE"><XREF LINKEND="LE24354-TITLE"><XREF LINKEND="LE24354-TITLE"></PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE96195-TITLE">.</PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE24377-TITLE">.</PARA></LISTITEM>
<LISTITEM><PARA><XREF LINKEND="LE38581-TITLE">.</PARA></LISTITEM>
<LISTITEM><PARA>Pointers to <XREF LINKEND="LE12930-TITLE">., <XREF LINKEND="LE12547-TITLE">., <XREF LINKEND="LE23335-TITLE">., and <XREF LINKEND="LE32436-TITLE">.</PARA></LISTITEM>
</ITEMIZEDLIST>
<PARA>Just as files can use up your available disk space, too many processes going at once can use up your available CPU time. When this happens, your system response time gets slower and slower until finally the system cannot execute any processes effectively. If you have not tuned your kernel to allow for more processes, the system refuses new processes long before it reaches a saturation point. However, due to normal variations in system usage, you may experience fluctuations in your system performance without reaching the maximum number of processes allowed by your system.</PARA>
<SECTION  ID="LE24354-PARENT"><TITLE  ID="LE24354-TITLE">Monitoring User Processes </TITLE><PARA>Not all processes require the same amount of system resources. Some processes, such as database applications working with large files, tend to be <FIRSTTERM>disk intensive</FIRSTTERM>, requiring a great deal of reading from and writing to the disk as well as a large amount of space on the disk. These activities take up CPU time. Time is also spent waiting for the hardware to perform the requested operations. Other jobs, such as compiling programs or processing large amounts of data, are <FIRSTTERM>CPU intensive</FIRSTTERM>, since they require a great number of CPU instructions to be performed. Some jobs are <FIRSTTERM>memory intensive</FIRSTTERM>, such as a process that reads a great deal of data and manipulates it in memory. Since the disk, CPU, and memory resources are limited, if you have more than a few intensive processes running at once on your system, you may see a performance degradation.</PARA>
<PARA>As the administrator, you should be on the lookout for general trends in system usage, so you can respond to them and keep the systems running as efficiently as possible. If a system shows signs of being overloaded, and yet the total number of processes is low, your system may still be at or above reasonable capacity. The following sections show four ways to monitor your system processes.</PARA>
<SECTION><TITLE>Process Monitoring with top</TITLE><PARA>The <COMMAND>top</COMMAND> and <COMMAND>gr_top</COMMAND> commands are the most convenient utilities provided with IRIX to monitor the top CPU-using processes on your system. These utilities display the top such processes dynamically, that is, if a listed process exits, it is removed from the table and the next-highest CPU-using process takes its place. <COMMAND>gr_top</COMMAND> graphically displays the same information as <COMMAND>top</COMMAND>. If you are using a non-graphics server, you cannot use <COMMAND>gr_top</COMMAND> locally, but you can use it if you set the display to another system on the network that does have graphics capability. For complete information on configuring and using <COMMAND>top</COMMAND> and <COMMAND>gr_top</COMMAND>, consult the <COMMAND>top(1)</COMMAND> and <COMMAND>gr_top(1)</COMMAND> man pages. For information on resetting the display, see <XREF LINKEND="LE92541-TITLE">..</PARA></SECTION>
<SECTION><TITLE>Process Monitoring on an Array</TITLE><PARA>If you are using the <INDEXTERM ID="ITch07-0"><PRIMARY>Array Services</PRIMARY>
</INDEXTERM>
Array Services product, also see the <CITETITLE><LINK BOOK="GS_Array" EXTREF="48115">Getting Started With Array Systems</LINK>
</CITETITLE> and the <COMMAND>array(1)</COMMAND> man page for more information on managing processes on an <INDEXTERM ID="ITch07-1"><PRIMARY>array</PRIMARY>
</INDEXTERM>
array.</PARA>
</SECTION>
<SECTION><TITLE>Process Monitoring with osview</TITLE><PARA>The <COMMAND>osview</COMMAND> and <COMMAND>gr_osview</COMMAND> commands display kernel execution statistics dynamically. If you have a graphics workstation, you can use the <COMMAND>gr_osview(1)</COMMAND> tool, which provides a real-time graphical display of system memory and CPU usage. <COMMAND>osview</COMMAND> provides the same information in ASCII format. You can configure <COMMAND>gr_osview</COMMAND> to display several different types of information about your system's current status. In its default configuration, <COMMAND>gr_osview</COMMAND> provides information on the amount of CPU time spent on user process execution, system overhead tasks, interrupts, and idle time. For complete information on <COMMAND>osview</COMMAND> and <COMMAND>gr_osview</COMMAND>, see the <COMMAND>osview(1)</COMMAND> and <COMMAND>gr_osview(1)</COMMAND> man pages.</PARA>
</SECTION>
<SECTION><TITLE>Process Monitoring with sar</TITLE><PARA>The System Activity Reporter, <COMMAND>sar</COMMAND>, provides essentially the same information as <COMMAND>osview</COMMAND>, but it represents a snapshot of the system status, not a dynamic reflection. Because <COMMAND>sar</COMMAND> generates a single snapshot, it is easily saved and can be compared with a similar snapshot taken at another time. You can use <COMMAND>sar</COMMAND> automatically with <COMMAND>cron</COMMAND> to get a series of system snapshots over time to help you locate chronic system bottlenecks by establishing baselines of performance for your system at times of light and heavy loads and under loads of various kinds (CPU load, network load, disk load, and so on). For complete information on <COMMAND>sar</COMMAND>, see <CITETITLE><LINK BOOK="IA_BakSecAcc" EXTREF="70848">IRIX Admin: Backup, Security, and Accounting</LINK>
</CITETITLE> and the <COMMAND>sar(1)</COMMAND> man page. For more information on using <COMMAND>sar</COMMAND> to monitor system activity, see <XREF LINKEND="LE86117-TITLE">..</PARA></SECTION>
<SECTION><TITLE>Process Monitoring with ps</TITLE><PARA>The <COMMAND>ps -ef</COMMAND> command allows you to look at all the processes currently running on your system. The output of <COMMAND>ps -ef</COMMAND> follows the format shown in <XREF LINKEND="LE54439-TITLE">:</PARA><TABLE FRAME="topbot"><TBLTITLE  ID="LE54439-TITLE">Output Format of the ps -ef Command</TBLTITLE>
<TGROUP COLS="8">
<COLSPEC COLWIDTH="110*">
<COLSPEC COLWIDTH="102*">
<COLSPEC COLWIDTH="114*">
<COLSPEC COLWIDTH="72*">
<COLSPEC COLWIDTH="110*">
<COLSPEC COLWIDTH="88*">
<COLSPEC COLWIDTH="124*">
<COLSPEC COLWIDTH="92*">
<THEAD><ROW><ENTRY><PARA>Name</PARA></ENTRY>
<ENTRY><PARA>PID</PARA></ENTRY>
<ENTRY><PARA>PPID</PARA></ENTRY>
<ENTRY><PARA>C</PARA></ENTRY>
<ENTRY><PARA>Time</PARA></ENTRY>
<ENTRY><PARA>TTY</PARA></ENTRY>
<ENTRY><PARA>CPU Time</PARA></ENTRY>
<ENTRY><PARA>Process</PARA></ENTRY>
</ROW>
</THEAD>
<TBODY><ROW><ENTRY><PARA>joe</PARA></ENTRY>
<ENTRY><PARA>23328</PARA></ENTRY>
<ENTRY><PARA>316</PARA></ENTRY>
<ENTRY><PARA>1</PARA></ENTRY>
<ENTRY><PARA>May 5</PARA></ENTRY>
<ENTRY><PARA>ttyq1</PARA></ENTRY>
<ENTRY><PARA>1:01</PARA></ENTRY>
<ENTRY><PARA>csh</PARA></ENTRY>
</ROW>
</TBODY>
</TGROUP>
</TABLE>
<PARA>In this table, the process shown is for the user <LITERAL>joe</LITERAL>. In a real situation, each user with processes running on the system is represented. Each field in the output contains useful information</PARA>
<DEFLIST><DEFLISTENTRY><TERM><LITERAL>Name</LITERAL> </TERM>
<LISTITEM><PARA>The login name of the user who owns the process.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>PID</LITERAL> </TERM>
<LISTITEM><PARA>The process identification number.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>PPID</LITERAL> </TERM>
<LISTITEM><PARA>The process identification number of the parent process that spawned or forked the listed process.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>C</LITERAL> </TERM>
<LISTITEM><PARA>Current execution priority. The higher this number, the lower the scheduling priority. This number is based on the recent scheduling of the process and is not a definitive indicator of its overall priority.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>Time</LITERAL> </TERM>
<LISTITEM><PARA>The time when the process began executing. If it began more than 24 hours before the <COMMAND>ps</COMMAND> command was given, the date on which it began is displayed.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>TTY</LITERAL> </TERM>
<LISTITEM><PARA>The TTY (Terminal or window) with which the process is associated.</PARA>
</LISTITEM>
</DEFLISTENTRY>
<DEFLISTENTRY><TERM><LITERAL>CPU</LITERAL> </TERM>
<LISTITEM><PARA>The total amount of CPU time expended to date on this process. This field is useful in determining which processes are using the most CPU time. If a process uses a great deal in a brief period, it can cause a general system slowdown.</PARA>
</LISTITEM>
</DEFLISTENTRY>
</DEFLIST>
<PARA>For even more information, including the general system priority of each process, use the <LITERAL>-l</LITERAL> flag to <COMMAND>ps</COMMAND>. For complete information on interpreting <COMMAND>ps</COMMAND> output, see the <COMMAND>ps(1)</COMMAND> man page.</PARA>
</SECTION>
</SECTION>
<SECTION  ID="LE96195-PARENT"><TITLE  ID="LE96195-TITLE">Prioritizing Processes</TITLE><PARA>IRIX provides methods for users to force their CPU-intensive processes to execute at a lower priority than general user processes. The <COMMAND>nice(1)</COMMAND> and <COMMAND>npri(1M)</COMMAND> commands allow the user to control the priority of their processes on the system.</PARA>
<SECTION><TITLE>Prioritizing Processes with nice</TITLE><PARA>The <COMMAND>nice</COMMAND> command functions as follows:</PARA>
<LITERALLAYOUT>
<USERINPUT>nice [ </USERINPUT><REPLACEABLE>-increment</REPLACEABLE><USERINPUT>&ensp;] </USERINPUT><REPLACEABLE>command</REPLACEABLE>
</LITERALLAYOUT>
<PARA>When you form your command line using <COMMAND>/bin/nice</COMMAND>, you fill in the <REPLACEABLE>increment</REPLACEABLE> field with a number between 1 and 19. If you do not fill in a number, a default of 10 is assumed. The higher the number you use for the <REPLACEABLE>increment</REPLACEABLE>, the lower your process' priority will be (19 is the lowest possible priority; all numbers greater than 19 are interpreted as 19). The <COMMAND>csh(1)</COMMAND> shell has its own internal <COMMAND>nice</COMMAND> functions, which operate differently from the <COMMAND>nice</COMMAND> command, and are documented in the <COMMAND>csh(1)</COMMAND> man page.</PARA>
<PARA>After entering the <COMMAND>nice</COMMAND> command and the increment on your command line, give the <REPLACEABLE>command</REPLACEABLE> as you would ordinarily enter it. For example, if the user joe wants to make his costly compile command happen at the lowest possible priority, he forms the command line as follows:</PARA>
<LITERALLAYOUT>
<USERINPUT>nice -19 cc -o prog prog.c</USERINPUT>
</LITERALLAYOUT>
<PARA>If a process is invoked using <COMMAND>nice</COMMAND>, the total amount of CPU time required to execute the program does not change, but the time is spread out, since the process executes less often. </PARA>
<PARA>The superuser (<LITERAL>root</LITERAL>) is the only user who can give <COMMAND>nice</COMMAND> a negative value and thereby <EMPHASIS>increase</EMPHASIS> the priority of a process. To give <COMMAND>nice</COMMAND> a negative value, use two minus signs before the increment. For example:</PARA>
<LITERALLAYOUT>
<USERINPUT>nice --19 cc -o prog prog.c</USERINPUT>
</LITERALLAYOUT>
<PARA>The above command endows that process with the highest priority a user process can have. The superuser should not use this feature frequently, as even a single process that has been upgraded in priority causes a significant system slowdown for all other users. Note that <FILENAME>/bin/csh</FILENAME> has a built-in <COMMAND>nice</COMMAND> program that uses slightly different syntax from that described here. For complete information on <COMMAND>csh</COMMAND>, see the <COMMAND>csh(1)</COMMAND> man page.</PARA>
</SECTION>
<SECTION><TITLE>Prioritizing Processes with npri</TITLE><PARA>The <COMMAND>npri</COMMAND> command allows users to make their process' priority <FIRSTTERM>nondegrading</FIRSTTERM>. In the normal flow of operations, a process loses priority as it executes, so large jobs typically use fewer CPU cycles per minute as they grow older. (There is a minimum priority, too. This priority degradation simply serves to maintain performance for simple tasks.) By using <COMMAND>npri</COMMAND>, the user can set the <COMMAND>nice</COMMAND> value of a process, make that process nondegrading, and set the default time slice that the CPU allocates to that process. <COMMAND>npri</COMMAND> also allows you to change the priority of a currently running process. The following example of <COMMAND>npri</COMMAND> sets all the possible variables for a command:</PARA>
<LITERALLAYOUT>
<USERINPUT>npri -h 10 -n 10 -t 3 cc -o prog prog.c</USERINPUT>
</LITERALLAYOUT>
<PARA>In this example, the <LITERAL>-h</LITERAL> flag sets the nondegrading priority of the process, while the <LITERAL>-n</LITERAL> flag sets the absolute <COMMAND>nice</COMMAND> priority. The <LITERAL>-t</LITERAL> flag sets the time slice allocated to the process. IRIX uses a 10-millisecond time slice as the default, so the example above sets the time slice to 30 milliseconds. For complete information about <COMMAND>npri</COMMAND> and its flags and options, see the <COMMAND>npri(1)</COMMAND> man page.</PARA>
</SECTION>
<SECTION  ID="LE45478-PARENT"><TITLE  ID="LE45478-TITLE">Changing the Priority of a Running Process</TITLE><PARA>The superuser can change the priority of a running process with the <COMMAND>renice(1M)</COMMAND> or <COMMAND>npri</COMMAND> commands. Only the superuser can use these commands. <COMMAND>renice</COMMAND> is used as follows:</PARA>
<LITERALLAYOUT>
<USERINPUT>renice -n </USERINPUT><REPLACEABLE>increment pid</REPLACEABLE><USERINPUT>&ensp;[-u </USERINPUT><REPLACEABLE>user</REPLACEABLE><USERINPUT>] [-g </USERINPUT><REPLACEABLE>pgrp</REPLACEABLE><USERINPUT>]</USERINPUT>
</LITERALLAYOUT>
<PARA>In the most commonly used form, <COMMAND>renice</COMMAND> is invoked on a specific process that is using system time at an overwhelming rate. However, you can also invoke it with the <LITERAL>-u</LITERAL> flag to lower the priority of all processes associated with a certain user, or with the <LITERAL>-g</LITERAL> flag to lower the priorities of all processes associated with a process group. More options exist and are documented in the <COMMAND>renice(1M)</COMMAND> man page.</PARA>
<PARA>The <COMMAND>npri</COMMAND> command can also be used to change the parameters of a running process. This example changes the parameters of a running process with <COMMAND>npri</COMMAND>:</PARA>
<LITERALLAYOUT>
<USERINPUT>npri -h 10 -n 10 -t 3 -p 11962</USERINPUT>
</LITERALLAYOUT>
<PARA>The superuser can use <COMMAND>renice</COMMAND> or <COMMAND>npri</COMMAND> to increase the priority of a process or user, but this can have a severe impact on system performance.</PARA>
</SECTION>
</SECTION>
<SECTION  ID="LE24377-PARENT"><TITLE  ID="LE24377-TITLE">Terminating Processes</TITLE><PARA>From time to time a process may use so much memory, disk, or CPU time that your only alternative is to terminate it before it causes a system crash. Before you kill a process, make sure that the user who invoked the process does not try to invoke it again. You should, if at all possible, speak to the user before killing the process, and at a minimum notify the user that the process was prematurely terminated and give a reason for the termination. If you do this, the user can reinvoke the process at a lower priority or possibly use the system's job processing facilities (<COMMAND>at</COMMAND>, <COMMAND>batch</COMMAND>, and <COMMAND>cron</COMMAND>) to execute the process at another time.</PARA>
<SECTION><TITLE>Terminating Processes with the kill Command</TITLE><PARA>To terminate a process, use the <COMMAND>kill</COMMAND> command. For most terminations, use the <COMMAND>kill</COMMAND> -15&ensp;variation. The <LITERAL>-15</LITERAL> flag indicates that the process is to be allowed time to exit gracefully, closing any open files and descriptors. The <LITERAL>-9</LITERAL> flag to <COMMAND>kill</COMMAND> terminates the process immediately, with no provision for cleanup. If the process you are going to kill has any child processes executing, using the <COMMAND>kill -9</COMMAND> command may cause those child processes to continue to exist on the process table, though they will not be responsive to input. The <COMMAND>wait(1)</COMMAND> command, given with the process number of the child process, removes them. For complete information about the syntax and usage of the <COMMAND>kill</COMMAND> command, see the <COMMAND>kill(1)</COMMAND> man page. You must always know the PID of the process you intend to kill with the <COMMAND>kill</COMMAND> command.</PARA>
</SECTION>
<SECTION><TITLE>Killing Processes by Name with the killall Command</TITLE><PARA>The <COMMAND>killall</COMMAND> command allows you to kill processes by their command name. For example, if you wish to kill the program <COMMAND>a.out</COMMAND> that you invoked, use the syntax:</PARA>
<LITERALLAYOUT>
<USERINPUT>killall a.out</USERINPUT>
</LITERALLAYOUT>
<PARA>This command allows you to kill processes without the time-consuming task of looking up the process ID number with the <COMMAND>ps</COMMAND> command.</PARA>
<NOTE><PARA>This command kills all instances of the named program running under your shell and if invoked with no arguments, kills all processes on the system that are killable by the user who invoked the command. For ordinary users, these are simply the processes invoked and forked by that user, but if invoked by <LITERAL>root</LITERAL>, all processes on the system are killed. For this reason, this command should be used carefully. For more information on <COMMAND>killall</COMMAND>, refer to the <COMMAND>killall(1M)</COMMAND> man page.</PARA>
</NOTE>
</SECTION>
</SECTION>
<SECTION  ID="LE38581-PARENT"><TITLE  ID="LE38581-TITLE">Defining and Managing cpusets</TITLE><PARA><INDEXTERM ID="ITch07-2"><PRIMARY>Miser</PRIMARY>
<SECONDARY>command-line options file setup</SECONDARY>
</INDEXTERM>
The <COMMAND>miser_cpuset</COMMAND> command is used to define and manage a set of CPUs called a <INDEXTERM ID="ITch07-3"><PRIMARY>Miser</PRIMARY>
<SECONDARY>logical swap space</SECONDARY>
</INDEXTERM>
<FIRSTTERM>cpuset</FIRSTTERM>. A cpuset is a named set of CPUs, which may be defined as restricted or open. The <COMMAND>miser_cpuset</COMMAND> command creates and destroys cpusets, retrieves information about existing cpusets, and attaches a process and all of its children to a cpuset.</PARA>
<NOTE><PARA>The <COMMAND>miser_cpuset</COMMAND> command does not require the use of the Miser batch processing system. The <COMMAND>miser_submit</COMMAND> command cannot currently be used to submit jobs to cpuset queues. For information on Miser usage, see <CITETITLE>IRIX Admin: Resource Administration</CITETITLE>.</PARA>
</NOTE>
<PARA>A restricted cpuset only allows processes that are members of the cpuset to run on the set of CPUs. An open cpuset allows any process to run on its CPUs, but a process that is a member of the cpuset can only run on the CPUs belonging to the cpuset.</PARA>
<PARA>A cpuset is defined by a cpuset configuration file and a name. See the <COMMAND>miser_cpuset(4)</COMMAND> man page for a definition of the file format. The cpuset configuration file is used to list the CPUs that are members of the cpuset. It also contains any additional arguments required to define the cpuset. A cpuset name is between three and eight characters long; names of two or less characters are reserved.</PARA>
<PARA>The file permissions of the configuration file define access to the cpuset. When permissions need to be checked, the current permissions of the file are used. It is therefore possible to change access to a particular cpuset without having to tear it down and recreate it, simply by changing the access permission. Read access allows a user to retrieve information about a cpuset, while execute permission allows a user to attach a process to the cpuset.</PARA>
<PARA><XREF LINKEND="LE25939-TITLE"> is a configuration file that describes an exclusive cpuset containing 3 CPUs:</PARA><EXAMPLE  ID="LE25939-PARENT"><TITLE  ID="LE25939-TITLE">cpuset Configuration File</TITLE><PROGRAMLISTING>
# cpuset configuration file
EXCLUSIVE
&nbsp;
CPU 1
CPU 5
CPU 10
</PROGRAMLISTING>
</EXAMPLE>
<PARA>This specification will create a cpuset containing 3 CPUs and will restrict those CPUs to running threads that have been explicitly assigned to the cpuset.</PARA>
<NOTE><PARA>Conflicts may occur between a CPU that a Miser queue is using and a CPU assigned to a cpuset. Miser does not have access to exclusively configured CPUs.</PARA>
</NOTE>
<PARA>For a description of <COMMAND>miser_cpuset</COMMAND> command arguments and additional information, see the <COMMAND>miser_cpuset(1)</COMMAND> and <COMMAND>miser_cpuset(4)</COMMAND> man pages.</PARA>
</SECTION>
<SECTION  ID="LE12930-PARENT"><TITLE  ID="LE12930-TITLE">Checkpoint and Restart</TITLE><PARA>IRIX <INDEXTERM ID="ITch07-4"><PRIMARY>Checkpoint and Restart</PRIMARY>
</INDEXTERM>
Checkpoint and Restart (<INDEXTERM ID="ITch07-5"><PRIMARY>CPR</PRIMARY>
</INDEXTERM>
CPR) is a facility for saving the state of running processes, and for later resuming execution where the Checkpoint occurred. See the <CITETITLE><LINK BOOK="CPR_OG" EXTREF="51170">IRIX Checkpoint and Restart Operation Guide</LINK>
</CITETITLE> and the <COMMAND>cpr(1)</COMMAND> man page for how to use and administer CPR.</PARA>
</SECTION>
<SECTION  ID="LE12547-PARENT"><TITLE  ID="LE12547-TITLE">NQE</TITLE><PARA>The <INDEXTERM ID="ITch07-6"><PRIMARY>Network Queuing Environment</PRIMARY>
</INDEXTERM>
Network Queuing Environment (<INDEXTERM ID="ITch07-7"><PRIMARY>WQE</PRIMARY>
</INDEXTERM>
NQE) is a workload management environment that provides batch scheduling and interactive load balancing. See <CITETITLE>NQE Administration</CITETITLE> for how to configure, monitor and control NQE. Also see the following URL address:</PARA>
<PARA><EMPHASIS>http://www.cray.com/products/software/nqe</EMPHASIS></PARA>
</SECTION>
<SECTION  ID="LE23335-PARENT"><TITLE  ID="LE23335-TITLE">Share II</TITLE><PARA><INDEXTERM ID="ITch07-8"><PRIMARY>ShareII</PRIMARY>
</INDEXTERM>
Share II is a resource-centric Fair Share scheduler that provides direct administrative control of system resource allocation. See the <CITETITLE><LINK BOOK="ShareII_AG" EXTREF="23305">Share II for IRIX Administrator's Guide</LINK>
</CITETITLE> for how to configure and maintain Share II. Also see the following URL address:</PARA>
<PARA><EMPHASIS>http://www.softway.com.au/share2.html</EMPHASIS></PARA>
</SECTION>
<SECTION  ID="LE32436-PARENT"><TITLE  ID="LE32436-TITLE">Performance Co-Pilot</TITLE><PARA><INDEXTERM ID="ITch07-9"><PRIMARY>Performance Co-Pilot</PRIMARY>
</INDEXTERM>
Performance Co-Pilot (<INDEXTERM ID="ITch07-10"><PRIMARY>PCP</PRIMARY>
</INDEXTERM>
PCP) is a software package of advanced performance management applications. It provides a systems-level suite of tools that cooperate to deliver distributed, integrated performance monitoring and performance management services. See the <CITETITLE><LINK BOOK="PCP_UAG" EXTREF="91944">Performance Co-Pilot User's and Administrator's Guide</LINK>
</CITETITLE> for how to administer PCP.</PARA>
</SECTION>
</CHAPTER>
