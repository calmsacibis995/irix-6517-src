<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="11"><TITLE><XREFTARGET ID="69723">Creating Desktop Icons: An Overview</TITLE><PARAGRAPH>This chapter offers an overview of the basic steps for creating IRIX Interactive Desktop icons and adding them to the Icon Catalog. If you don't feel you need much background information, you can skip to the brief list of instructions provided in <INDEXTARGET ID="11.Overview.Icons1"><!-- POSTPROCESSDATA: 11.Overview.Icons1|iconsdesktop:icons --><INDEXTARGET ID="11.Overview.Icons2"><!-- POSTPROCESSDATA: 11.Overview.Icons2|icons:creating --><INDEXTARGET ID="11.Overview.Icons3"><!-- POSTPROCESSDATA: 11.Overview.Icons3|icons:<ITALICS>See also</ITALICS> IconSmith --><INDEXTARGET ID="11.Overview.Icons4"><!-- POSTPROCESSDATA: 11.Overview.Icons4|applications:creating icons. <ITALICS>See</ITALICS> icons --><XREF IDREF="91887" TYPE="TITLE">&ldquo;Checklist for Creating an Icon&rdquo;</XREF>.</PARAGRAPH>
<PARAGRAPH>This chapter contains these sections:<INDEXTARGET ID="11.Overview.Icons5"><!-- POSTPROCESSDATA: 11.Overview.Icons5|icons:<ITALICS>See also</ITALICS> desktop --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="56002" TYPE="TITLE">&ldquo;About IRIX Interactive Desktop Icons&rdquo;</XREF> briefly discusses the IRIX Interactive Desktop and lists what kinds of icons you'll need to provide for your application.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="35640" TYPE="TITLE">&ldquo;Checklist for Creating an Icon&rdquo;</XREF> lists the basic steps for drawing, programming, compiling, and installing an icon.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="68942" TYPE="TITLE">&ldquo;Creating an Icon: The Basic Steps Explained in Detail&rdquo;</XREF> explains each of the basic icon creation steps in more detail.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>Minimized windows, which represent running applications, aren't Desktop icons. To learn how to customize the image on a minimized window, refer to <XREF IDREF="87269" TYPE="TITLE">Chapter&nbsp;6, &ldquo;Customizing Your Application's Minimized Windows.&rdquo;</XREF></NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="56002">About IRIX Interactive Desktop Icons</TITLE><PARAGRAPH>Files on the Desktop are represented by icons. Users can manipulate these icons to run applications, print documents, and perform other actions. <INDEXTARGET ID="11.Overview.Icons6"><!-- POSTPROCESSDATA: 11.Overview.Icons6|icons:filesfiles:icons --><EXTREF IDREF="37385" BOOK="UI_Glines" FILE="" HDG="37385" INFO="">&ldquo;How Users Interact With Desktop Icons&rdquo; in Chapter&nbsp;1</EXTREF>
 of the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE> describes some of the common user interactions.</PARAGRAPH>
<PARAGRAPH>The Desktop displays different icons to represent the different types of files. For example, the default icon for binary executables is the &ldquo;magic carpet,&rdquo; and the default icon for plain text files is a stack of pages.<INDEXTARGET ID="11.Overview.Icons7"><!-- POSTPROCESSDATA: 11.Overview.Icons7|icons:binary executables --></PARAGRAPH>
<PARAGRAPH>When you create your own application, by default the Desktop uses an appropriate &ldquo;generic&rdquo; icon to represent the application and its associated data files (for example, the magic carpet icon for the executable and the stack of pages icon for text files). You can also design your own custom icons to promote product identity and to indicate associated files. For example, the custom ShowCase icons over a <INDEXTARGET ID="11.Overview.Icons8"><!-- POSTPROCESSDATA: 11.Overview.Icons8|icons:generic --><INDEXTARGET ID="11.Overview.Icons9"><!-- POSTPROCESSDATA: 11.Overview.Icons9|icons:custom --><FILENAME>generic.exec.closed.fti</FILENAME> and a <FILENAME>generic.exec.open.fti</FILENAME> look like this:</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="showcase.gif" POSITION="INLINE" SCALE="FALSE"></FIGURE>
</PARAGRAPH>
<PARAGRAPH>Another advantage of creating custom icons is that you can <ITALICS>program</ITALICS> them to perform certain actions when users interact with them on the Desktop. For example, you can program a custom data file icon so that when a user opens it, the Desktop launches your application and opens the data file.</PARAGRAPH>
<PARAGRAPH>The Desktop determines which icon to display for a particular file by finding a matching <INDEXTARGET ID="11.Overview.Icons10"><!-- POSTPROCESSDATA: 11.Overview.Icons10|icons:and FTRsicons:files type --><INDEXTARGET ID="11.Overview.Icons11"><!-- POSTPROCESSDATA: 11.Overview.Icons11|FTRs:icons --><ITALICS>file type</ITALICS>. A file type consists of a set of <ITALICS>File Typing Rules</ITALICS> (FTRs) that describe which files belong to the file type and how that type's icon looks and acts on the Desktop.</PARAGRAPH>
<PARAGRAPH>The Desktop reads FTRs from compiled versions of special text files called <ITALICS>FTR files</ITALICS>. An FTR file is a file in which one or more file types are defined (typically, you define more than one file type in a single file). FTR files can also contain <ITALICS>print conversion rules</ITALICS>, which define any special filters needed to print given file types. <XREF IDREF="36003" TYPE="TITLE">Chapter&nbsp;13, &ldquo;File Typing Rules,&rdquo;</XREF> discusses the syntax of FTRs, and <XREF IDREF="55672" TYPE="TITLE">Chapter&nbsp;14, &ldquo;Printing From the Desktop,&rdquo;</XREF> discusses print conversion rules.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="35640"><XREFTARGET ID="91887">Checklist for Creating an Icon</TITLE><PARAGRAPH>To provide a comprehensive Desktop icon interface for your application:<INDEXTARGET ID="11.Overview.Icons12"><!-- POSTPROCESSDATA: 11.Overview.Icons12|icons:checklistchecklist:creating iconsicons:steps to creating --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><BOLD>Tag your application. </BOLD>You need to tag the application with its own unique identification number so that the Desktop has a way of matching the application with the corresponding FTRs. See <XREF IDREF="46561" TYPE="TITLE">&ldquo;Step One: Tagging Your Application&rdquo;</XREF> for instructions.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><BOLD>Draw a picture of your icon</BOLD>. Create a distinctive Desktop icon to help users distinguish your application from other applications on the Desktop. Optionally, create an icon for the data files associated with your application. Use the <ITALICS>IconSmith</ITALICS> application to draw your icons. IconSmith allows you to draw an icon and then convert it into the icon description language used by the Desktop. IconSmith is the only tool you can use to create an icon picture. For guidelines on designing icons, see the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE>. For information on how to use IconSmith, see <XREF IDREF="81290" TYPE="TITLE">Chapter&nbsp;12, &ldquo;Using IconSmith.&rdquo;</XREF></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><BOLD>Program your icon.</BOLD> Create the FTRs to define your icons' Desktop interaction. <XREF IDREF="36003" TYPE="TITLE">Chapter&nbsp;13, &ldquo;File Typing Rules,&rdquo;</XREF> describes FTRs in detail. Before programming your icon, think about what users expect from the application and, with that in mind, decide how you want the icon to behave within the Desktop. Before you make these decisions, read the icon programming guidelines in <EXTREF IDREF="25444" BOOK="UI_Glines" FILE="" HDG="25444" INFO="">&ldquo;Defining the Behavior of Icons With FTRs&rdquo; in Chapter&nbsp;2</EXTREF>
 of the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE>. In particular:</PARAGRAPH>
<BULLETLISTIND><BULLETSQUAREIND><PARAGRAPH>Program your Desktop icon to run your application with the most useful options. Include instructions for launching your application when the user opens the icon; opens the icon while holding down the <USERINPUT>&lt;Alt></USERINPUT> key; and drags and drops other icons on the application icon.</PARAGRAPH>
</BULLETSQUAREIND>
<BULLETSQUAREIND><PARAGRAPH>If there are several useful combinations of options that users may want to use when invoking your application, you can incorporate them into a Desktop menu. (These Desktop menu items appear only when the icon is selected.) Users can then select the menu item that corresponds to the behavior they want&mdash;without having to memorize a lot of option flags.</PARAGRAPH>
</BULLETSQUAREIND>
<BULLETSQUAREIND><PARAGRAPH>Where appropriate, provide <ITALICS>print conversion</ITALICS>&space;<ITALICS>rules</ITALICS> that describe how to convert a data file for printing into a type recognized by the Desktop. To print output, users can then just select the appropriate data file icon and choose &ldquo;Print&rdquo; from the Desktop menu rather than having to remember specialized filter information. <XREF IDREF="55672" TYPE="TITLE">Chapter&nbsp;14, &ldquo;Printing From the Desktop,&rdquo;</XREF> describes print conversion rules.</PARAGRAPH>
</BULLETSQUAREIND>
</BULLETLISTIND>
</LIST>
<LIST><PARAGRAPH><BOLD>Compile the source files.</BOLD> Compile the <FILENAME>.ftr </FILENAME>files into an <FILENAME>.otr</FILENAME> file. In particular, the <FILENAME>desktop.otr</FILENAME> file contains the compiled source for existing FTRs. For more information on<FILENAME>&space;.otr</FILENAME> files, see <XREF IDREF="52367" TYPE="TITLE">&ldquo;Step Four: Compiling the Source Files&rdquo;</XREF>.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><BOLD>Add your application to the Icon Catalog.</BOLD> This makes it easier for your users to locate your icon in the Icon Catalog and helps maintain a consistent look for your application in the Desktop. <XREF IDREF="78197" TYPE="TITLE">&ldquo;Step Five: Installing Your Application in the Icon Catalog&rdquo;</XREF> explains how to do this.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><BOLD>Restart the Desktop. </BOLD>You can view your changes after you restart the Desktop. <XREF IDREF="74717" TYPE="TITLE">&ldquo;Step Six: Restarting the Desktop&rdquo;</XREF> explains how to restart the Desktop.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><BOLD>Update your installation process.</BOLD> If you want to install your application on other Silicon Graphics workstations, include in your installation all of the files that you created in the preceding steps. Silicon Graphics recommends you use <COMMAND>swpkg</COMMAND> to package your files for installation. See the <DOCTITLE>Software Packager User's Guide</DOCTITLE> for information for instructions on using <COMMAND>swpkg</COMMAND>. See <XREF IDREF="21525" TYPE="TITLE">&ldquo;Step Seven: Updating Your Installation Process&rdquo;</XREF> for guidelines.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<NOTE><PREFIX>Note</PREFIX>You cannot create your own device, host, or people icons. These are special icons used by the Desktop and can currently be created only by Silicon Graphics.</NOTE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="68942">Creating an Icon: The Basic Steps Explained in Detail</TITLE><PARAGRAPH>This section describes in detail each of the basic steps listed in <XREF IDREF="35640" TYPE="TITLE">&ldquo;Checklist for Creating an Icon&rdquo;</XREF>. The steps are:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="46561" TYPE="TITLE">&ldquo;Step One: Tagging Your Application&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="75048" TYPE="TITLE">&ldquo;Step Two: Drawing a Picture of Your Icon&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="17054" TYPE="TITLE">&ldquo;Step Three: Programming Your Icon&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="52367" TYPE="TITLE">&ldquo;Step Four: Compiling the Source Files&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="78197" TYPE="TITLE">&ldquo;Step Five: Installing Your Application in the Icon Catalog&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="74717" TYPE="TITLE">&ldquo;Step Six: Restarting the Desktop&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="21525" TYPE="TITLE">&ldquo;Step Seven: Updating Your Installation Process&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="46561">Step One: Tagging Your Application</TITLE><PARAGRAPH>The first step is to tag the application or shell script with its own unique identification number so that the Desktop has a way of matching the application with the corresponding FTRs. The easiest way to tag your application is to use the <INDEXTARGET ID="11.Overview.Icons13"><!-- POSTPROCESSDATA: 11.Overview.Icons13|icons:identification numberapplications:icon ID numberidentification number:application icons --><COMMAND>tag</COMMAND> command. In order to use <COMMAND>tag</COMMAND>, your application must be an executable or a shell script, and you must have write and execute permissions for the file.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>You do not tag data or configuration files used by your application. Instead, you provide rules as described in <XREF IDREF="56776" TYPE="TITLE">&ldquo;Matching Files Without the tag Command&rdquo;</XREF> to identify these files.</NOTE>
<PARAGRAPH>If your application does meet the criteria for using the <COMMAND>tag</COMMAND> command, then select a tag number from your block of registered tag numbers. If you do not have a block of registered tag numbers, you can get one by calling 415/933-TAGS or sending an e-mail request to Silicon Graphics at this mail address:</PARAGRAPH>
<EXAMPLE>
desktoptags@sgi.com
</EXAMPLE>
<PARAGRAPH>After Silicon Graphics sends you a block of registered tag numbers, use the <COMMAND>tag</COMMAND>(1) command to assign one to your application. To do this, change to the directory containing your application and enter:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>tag</USERINPUT>&space;<VARIABLE>tagnumber</VARIABLE>&space;<VARIABLE>filename</VARIABLE>&space;
</EXAMPLE>
<PARAGRAPH>where <VARIABLE>tagnumber</VARIABLE> is the number you assign to the application and <VARIABLE>filename</VARIABLE> is the name of the application. </PARAGRAPH>
<PARAGRAPH>For example:</PARAGRAPH>
<CODE>
% /usr/sbin/tag 0X0101011 myapp
</CODE>
<PARAGRAPH>For more detailed information on the <COMMAND>tag</COMMAND> command, see the <REFPAGE>tag(1)</REFPAGE> reference page.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="75048">Step Two: Drawing a Picture of Your Icon</TITLE><PARAGRAPH>The next step is to create the picture for your icon. An icon picture generally consists of a unique <INDEXTARGET ID="11.Overview.Icons14"><!-- POSTPROCESSDATA: 11.Overview.Icons14|icons:drawingicons:badge --><ITALICS>badge</ITALICS> plus a generic component (for example, the &ldquo;magic carpet&rdquo; designating executables). The badge is the part of the icon picture that appears in front of the generic component and that uniquely identifies your application. The generic components are pre-drawn and installed by default when you install the IRIX Interactive Desktop environment.</PARAGRAPH>
<PARAGRAPH><EXTREF IDREF="18888" BOOK="UI_Glines" FILE="" HDG="18888" INFO="">&ldquo;Designing the Appearance of Icons&rdquo; in Chapter&nbsp;2</EXTREF>
 of the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE> provides guidelines for drawing your icon images. If possible, consult with a designer or graphics artist to produce an attractive, descriptive icon. <XREF IDREF="81290" TYPE="TITLE">Chapter&nbsp;12, &ldquo;Using IconSmith,&rdquo;</XREF> describes exactly how to draw such an icon. Save the badge in a file called <FILENAME>&lt;IconName>.fti</FILENAME>, where <VARIABLE>IconName</VARIABLE> is any name you choose. Choose a meaningful name (such as the name of the application or data format). If you have separate pictures representing the open and closed states of the icon, it's a good idea to name them <FILENAME>&lt;IconName>.open.fti</FILENAME> and <FILENAME>&lt;IconName>.closed.fti</FILENAME>, respectively.</PARAGRAPH>
<PARAGRAPH>After drawing your badge with IconSmith (described in <XREF IDREF="81290" TYPE="TITLE">Chapter&nbsp;12</XREF><ITALICS>) </ITALICS>save the picture&mdash;the filename should end in <FILENAME>.fti</FILENAME>&mdash;and put the saved file in the correct directory. The appropriate directory depends on where you put your FTR files:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>If you put your FTR (<ITALICS>.</ITALICS><FILENAME>ftr</FILENAME>) files in the<FILENAME>&space;/usr/lib/filetype/install</FILENAME> directory (where you typically should install your FTR files), then put your badge (<ITALICS>.</ITALICS><FILENAME>fti</FILENAME>) files in the <FILENAME>/usr/lib/filetype/install/iconlib</FILENAME> directory.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>If you put your FTR files in one of the other directories listed in <XREF IDREF="51651" TYPE="TITLE">Appendix&nbsp;F</XREF>, then put your badge file in a subdirectory of that directory. Name the subdirectory <FILENAME>iconlib</FILENAME> if the subdirectory doesn't already exist.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17054">Step Three: Programming Your Icon</TITLE><PARAGRAPH>Programming an icon means creating a file type. Each file type consists of a set of file typing rules, each of which defines some aspect of the look or behavior of the icon. Your file type includes rules that name the file type, and tells the Desktop where to find the associated icon files, what to do when users double-click the icon, and so on. <INDEXTARGET ID="11.Overview.Icons15"><!-- POSTPROCESSDATA: 11.Overview.Icons15|icons:programmingicons:creating file typefile type:icons --><INDEXTARGET ID="11.Overview.Icons16"><!-- POSTPROCESSDATA: 11.Overview.Icons16|FTRs:icon, file type --><XREF IDREF="36003" TYPE="TITLE">Chapter&nbsp;13, &ldquo;File Typing Rules,&rdquo;</XREF> describes how to create the FTR file that defines your file type. <EXTREF IDREF="25444" BOOK="UI_Glines" FILE="" HDG="25444" INFO="">&ldquo;Defining the Behavior of Icons With FTRs&rdquo; in Chapter&nbsp;2</EXTREF>
 of the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE> describes the types of behaviors your icons should support.</PARAGRAPH>
<PARAGRAPH>(This section assumes that you are writing your FTRs completely from scratch. You may prefer instead to modify an existing file type. To learn how to find the FTRs for an existing icon, see <XREF IDREF="80328" TYPE="TITLE">&ldquo;Add the FTRs: An Alternate Method&rdquo;</XREF>.)</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="89793">Where to Put FTR Files</TITLE><PARAGRAPH>Most FTR files that are not created at Silicon Graphics belong in the <INDEXTARGET ID="11.Overview.Icons17"><!-- POSTPROCESSDATA: 11.Overview.Icons17|FTRs:directory location --><FILENAME>/usr/lib/filetype/install</FILENAME> directory. There are also specific FTR directories set aside for site administration. For a list of all FTR directories, see <XREF IDREF="51651" TYPE="TITLE">Appendix&nbsp;F, &ldquo;FTR File Directories.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>If you want to have a look at some existing FTR files, check out the <FILENAME>/usr/lib/filetype/install</FILENAME> directory.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="58709">Naming FTR Files</TITLE><PARAGRAPH>If you have an existing FTR file, you can add the new file type to this file. Otherwise, you need to create a new FTR file, which you should name according to the standard naming convention for application vendors' FTR files. The convention is:<INDEXTARGET ID="11.Overview.Icons18"><!-- POSTPROCESSDATA: 11.Overview.Icons18|FTRs:naming filesicons:naming FTR files --></PARAGRAPH>
<EXAMPLE>
vendor-name[.application-name].ftr
</EXAMPLE>
<PARAGRAPH>where <ITALICS>vendor-name</ITALICS> is the name of your company and <ITALICS>application-name</ITALICS> is the name of your application.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Name the File Type</TITLE><PARAGRAPH>Each file type must have a unique name. To help insure that your file type name is unique, base it as closely as possible on your application name. <INDEXTARGET ID="11.Overview.Icons19"><!-- POSTPROCESSDATA: 11.Overview.Icons19|icons:naming file typeFTRs:naming file type --></PARAGRAPH>
<PARAGRAPH>As an extra check, you can search for your file type name in the <FILENAME>/usr/lib/filetype</FILENAME> directory, to make sure that the name is not already in use:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Change to the <FILENAME>/usr/lib/filetype</FILENAME> directory:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cd /usr/lib/filetype</USERINPUT>&space;
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH><USERINPUT>Search for the file type name:</USERINPUT></PARAGRAPH>
<EXAMPLE>
% <USERINPUT>grep "</USERINPUT><VARIABLE>your_name_here</VARIABLE><USERINPUT>" */*.ftr</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>where <VARIABLE>your_name_here</VARIABLE> is the name you've selected for your file type.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>If you find another file type of the name you have chosen, pick a new name.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Add the FTRs</TITLE><PARAGRAPH>To create a file type, either add the file type definition to an existing FTR file or create a new FTR file. You can define all the necessary file types for your application in a single FTR file.<INDEXTARGET ID="11.Overview.Icons20"><!-- POSTPROCESSDATA: 11.Overview.Icons20|icons:adding FTRsFTRs:addingfile type:definitionFTRs:file type definition --></PARAGRAPH>
<PARAGRAPH>Each file type definition<ITALICS>&space;must</ITALICS> include the following rules: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the TYPE rule, to tell the Desktop that you are declaring and naming a new type (the TYPE rule must go on the first line of each filetype definition)&mdash;a type is a unique type of icon, such as an email icon. For example, the file <FILENAME>myftrs.ftr</FILENAME> contains two filetypes:</PARAGRAPH>
<CODE>
TYPE FOO
MATCH ...
TYPE FOO2
MATCH ...
</CODE>
</BULLET>
<BULLET><PARAGRAPH>the LEGEND rule, to provide a text description when users view icons as a list</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the MATCH rule, to allow the Desktop to match files with the corresponding file type</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the ICON rule, to tell the Desktop how to draw the icon to use for this file type</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>The TYPE, LEGEND, and other rules are typically referred to as &ldquo;rules,&rdquo; and the entire set of rules defining a single file type is called a &ldquo;filetype,&rdquo; or an &ldquo;FTR.&rdquo; </NOTE>
<PARAGRAPH>In addition to these basic components, you can add other rules as necessary for each different filetype you define. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="80328">Add the FTRs: An Alternate Method</TITLE><PARAGRAPH>If you don't want to write the file type from scratch, you can modify an existing file type.</PARAGRAPH>
<PARAGRAPH>The first step is to choose a file type that produces icon behavior similar to what you want from your new file type (that is, does the same thing when you double-click the icon, acts the same way when you drop the icon on another icon, and so on.)</PARAGRAPH>
<PARAGRAPH>To find the set of FTRs that define the file type for the an icon, first locate the icon on the Desktop. If the icon isn't already on the Desktop select &ldquo;File QuickFind&rdquo; from the Find toolchest and use the Find an Icon window to find the icon. (When the icon appears in the drop pocket, drag it onto the Desktop.</PARAGRAPH>
<PARAGRAPH>Select the icon by clicking the left mouse button on it, then hold down the right mouse button to get the Desktop menu. When the menu appears, select the &ldquo;Get Info&rdquo; menu item. A window appears. In the window, look at the line labeled, &ldquo;Type.&rdquo; </PARAGRAPH>
<PARAGRAPH>For example, if you'd selected the <COMMAND>jot</COMMAND> icon, the line would read:</PARAGRAPH>
<EXAMPLE>
Type: jot text editor
</EXAMPLE>
<PARAGRAPH>The string &ldquo;jot text editor&rdquo; is produced by the LEGEND rule. You can use this string to find the FTR that defines the <COMMAND>jot</COMMAND> file type. To do this, open a shell and follow these steps:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Change to the <FILENAME>/usr/lib/filetype</FILENAME> directory</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cd /usr/lib/filetype</USERINPUT>&space;
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>Search for &ldquo;jot text editor&rdquo;</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>grep "jot text editor" */*.ftr</USERINPUT>&space;
</EXAMPLE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>The system responds with this line:</PARAGRAPH>
<EXAMPLE>
system/sgiutil.ftr: LEGEND   :308:jot text editor
</EXAMPLE>
<PARAGRAPH>This line tells you that the <COMMAND>jot</COMMAND> FTR is in the<FILENAME>&space;/usr/lib/filetype/system</FILENAME> directory in a file named <FILENAME>sgiutil.ftr</FILENAME>. The <SCREENDISPLAY>:308:</SCREENDISPLAY> is to allow the jot LEGEND to be localized (translated into languages other than English). The <SCREENDISPLAY>308</SCREENDISPLAY> refers to line number 308 in the <FILENAME>uxsgidesktop</FILENAME> message catalog. See the <REFPAGE>gettxt(1)</REFPAGE> reference page for a description of how to use such message files. If you only intend to ship your application in English speaking countries, you can omit the line number designation (for example, <SCREENDISPLAY>:308:</SCREENDISPLAY>) from your filetype.</PARAGRAPH>
<PARAGRAPH>Now you can open the <FILENAME>sgiutil.ftr</FILENAME> file using the text editor of your choice, and search for the &ldquo;jot text editor&rdquo; string again. This shows exactly where the<COMMAND>&space;jot</COMMAND> FTR is in the <FILENAME>sgiutil.ftr</FILENAME> file.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>&space;If the <COMMAND>jot</COMMAND> file type did not have its own icon, this search would not give you the filename.</NOTE>
<PARAGRAPH>Now you can go to the file with the <COMMAND>jot</COMMAND> FTR and copy it into the FTR file for your new file type. Then rename and modify the copied FTR to fit your new file type, as described in <XREF IDREF="17054" TYPE="TITLE">&ldquo;Step Three: Programming Your Icon&rdquo;</XREF>.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>An Example File Type</TITLE><PARAGRAPH>Here is an example of a simple file type:<INDEXTARGET ID="11.Overview.Icons21"><!-- POSTPROCESSDATA: 11.Overview.Icons21|file type:exampleFTRs:file type exampleicons:FTR file type example --></PARAGRAPH>
<CODE>
TYPE ScrimShaw
&space;   MATCH        tag  == 0x00001005;
&space;   LEGEND       the scrimshaw drawing program
&space;   SUPERTYPE    Executable
&space;   CMD OPEN     $LEADER 
&space;   CMD ALTOPEN  launch -c $LEADER
&space;   ICON {
&space;          if (opened) {
&space;              include("../iconlib/generic.exec.open.fti");
&space;       } else {
&space;              include("../iconlib/generic.exec.closed.fti");
&space;        }
&space;        include("/iconlib/scrimshaw.fti");
&space;   }
</CODE>
<PARAGRAPH>Here's a brief description of what each of these lines does:<INDEXTARGET ID="11.Overview.Icons22"><!-- POSTPROCESSDATA: 11.Overview.Icons22|TYPE ruleLEGEND ruleMATCH ruleSUPERTYPE ruleCMD OPEN ruleCMD ALTOPEN ruleICON rule --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The first line contains the TYPE rule, which you use to name the file type. In this case, the file type is named, <ITALICS>ScrimShaw</ITALICS>. Always place the TYPE rule on the first line of your FTR. The TYPE rule is described in <XREF IDREF="50570" TYPE="TITLE">&ldquo;Naming File Types: The TYPE Rule&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The second line contains the MATCH rule. Use the MATCH rule to tell the Desktop which files belong to this file type. In this example, we are just writing in the identification (tag) number that we have already assigned to the executable. The MATCH rule is described in <XREF IDREF="98067" TYPE="TITLE">&ldquo;Matching File Types With Applications: The MATCH Rule&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The third line contains the LEGEND rule. Use this rule to provide a brief descriptive phrase for the file type. This phrase appears when users view a directory in list form. It also appears when users select the &ldquo;Get File Info&rdquo; item from the Desktop pop-up menu. In this case, the descriptive phrase is &ldquo;the scrimshaw drawing program.&rdquo; The LEGEND rule is described in <XREF IDREF="15180" TYPE="TITLE">&ldquo;Adding a Descriptive Phrase: The LEGEND Rule&rdquo;</XREF>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The fourth line contains the SUPERTYPE rule. Use this rule to name a file type superset for your FTR. In this example, the SUPERSET is &ldquo;Executable.&rdquo; The SUPERTYPE rule is described in <XREF IDREF="27184" TYPE="TITLE">&ldquo;Categorizing File Types: The SUPERTYPE Rule&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The fifth line contains the CMD OPEN rule. This rule tells the Desktop what to do when users double-click the icon. In this example, double-clicking the icon opens the scrimshaw application. The $LEADER variable is a Desktop variable, usually set to the full name of the first selected icon. The Desktop variables are listed and defined in <XREF IDREF="71351" TYPE="TITLE">Appendix&nbsp;B, &ldquo;Desktop Variables.&rdquo;</XREF> The CMD OPEN rule is described in <XREF IDREF="33157" TYPE="TITLE">&ldquo;Programming Open Behavior: The CMD OPEN Rule&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The sixth line contains the CMD ALTOPEN rule. This rule tells the Desktop what to do when users double-click the icon while holding down the <USERINPUT>&lt;Alt></USERINPUT> key. In this example, the Desktop runs<COMMAND>&space;launch</COMMAND>(1), which brings up a small dialog window containing a single text field, so that users can type in command-line arguments to the scrimshaw executable. Again, $LEADER is a Desktop variable (variables are listed in Appendix B). For more information on the <COMMAND>launch</COMMAND> command, see the <REFPAGE>launch(1)</REFPAGE> reference page. The CMD ALTOPEN rule is described in <XREF IDREF="33173" TYPE="TITLE">&ldquo;Programming Alt-Open Behavior: The CMD ALTOPEN Rule&rdquo;</XREF>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The final lines contain the ICON rule. These lines tell the Desktop where to find the generic components (open and closed) as well as the unique application-specific badge. The generic components together with the badge comprise the scrimshaw icon appearance. Note that this rule combines the generic component for open and closed executables with the unique &ldquo;scrimshaw&rdquo; badge that identifies it as a distinctive application. The ICON rule is described in <XREF IDREF="35039" TYPE="TITLE">&ldquo;Getting the Icon Picture: The ICON Rule&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="52367">Step Four: Compiling the Source Files</TITLE><PARAGRAPH>The Desktop compiles FTR source files into files called<INDEXTARGET ID="11.Overview.Icons23"><!-- POSTPROCESSDATA: 11.Overview.Icons23|icons:compiling source filesFTRs:compiling source filescompiling:.otr filescompiling:.ctr files.otr files.ctr files --><FILENAME>&space;.otr</FILENAME> files. These files are in the <FILENAME>/usr/lib/filetype</FILENAME> directory.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Users can create personal <FILENAME>desktop.otr</FILENAME> files. See <FILENAME>/usr/lib/filetype/Makefile.personal</FILENAME> and <DOCTITLE>Desktop User's Guide</DOCTITLE> for information about how to create and use personal desktop icons. </NOTE>
<NOTE><PREFIX>Note</PREFIX>The <FILENAME>.ctr</FILENAME> files are obsolete as of IRIX release 6.3.</NOTE>
<PARAGRAPH>Any time you add or change FTRs (or print conversion rules) you must recompile the <FILENAME>.otr</FILENAME> files by following these steps:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Change to the <FILENAME>/usr/lib/filetype</FILENAME> directory:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cd /usr/lib/filetype</USERINPUT>&space;
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>Become superuser:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>% su </USERINPUT>
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>Recompile the files:</PARAGRAPH>
<EXAMPLE>
# <USERINPUT>make -u</USERINPUT>&space;
</EXAMPLE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>(If you don't use the <BOLD>-u</BOLD> option when you make the files, some of your changes may not take effect.) </PARAGRAPH>
<PARAGRAPH>To activate the new FTRs, quit and restart the Desktop. For instructions on restarting the Desktop, see <XREF IDREF="74717" TYPE="TITLE">&ldquo;Step Six: Restarting the Desktop&rdquo;</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="78197">Step Five: Installing Your Application in the Icon Catalog</TITLE><PARAGRAPH>It's easy to add your icon to the icon catalog. Just install a symbolic link to your application in the <INDEXTARGET ID="11.Overview.Icons24"><!-- POSTPROCESSDATA: 11.Overview.Icons24|icons:installing in Icon CatalogIcon Catalog:adding icons<ITALICS>iconbookedit</ITALICS> commandadding:icon to Icon Cataloginstalling:icon in Icon Catalog --><FILENAME>/usr/lib/desktop/iconcatalog/C/Applications </FILENAME>directory.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The <COMMAND>iconbookedit</COMMAND> command is obsolete as of IRIX release 6.3. </NOTE>
<PARAGRAPH>Then, add the install rule in your Makefile. For example, enter:</PARAGRAPH>
<CODE>
/etc/install -idb myIdbTag -F \
/usr/lib/desktop/iconcatalog/pages/C/Applications -lns /usr/sbin/myapp MyApp 
</CODE>
<PARAGRAPH>where <SCREENDISPLAY>C</SCREENDISPLAY> is the $LANG environment variable, <SCREENDISPLAY>Applications</SCREENDISPLAY> is the page on which the icon will appear in the icon catalog, and <SCREENDISPLAY>MyApp</SCREENDISPLAY> is the name to appear under your icon in the icon catalog (the name can be different from the name of the executable). </PARAGRAPH>
<PARAGRAPH>Another example:</PARAGRAPH>
<CODE>
/etc/install -idb myIdbTag -F /usr/lib/desktop/iconcatalog/pages/C/WebTools \
-lns /usr/sbin/mywebapp MyWebApp
</CODE>
<PARAGRAPH>In this example, the application, <SCREENDISPLAY>mywebapp</SCREENDISPLAY>, will appear on the <SCREENDISPLAY>WebTools</SCREENDISPLAY> icon catalog page, with the name <SCREENDISPLAY>MyWebApp</SCREENDISPLAY> under the icon.</PARAGRAPH>
<PARAGRAPH>For additional information, see <EXTREF IDREF="38425" BOOK="UI_Glines" FILE="" HDG="38425" INFO="">&ldquo;Making Application Icons Accessible&rdquo; in Chapter&nbsp;2</EXTREF>
 of the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE>, which describes the Icon Catalog and how to select the appropriate page of the Icon Catalog for your application.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74717">Step Six: Restarting the Desktop</TITLE><PARAGRAPH>To view your changes and additions, you must restart the Desktop. To restart the Desktop, first kill it by typing:<INDEXTARGET ID="11.Overview.Icons25"><!-- POSTPROCESSDATA: 11.Overview.Icons25|<ITALICS>telldesktop</ITALICS> command --></PARAGRAPH>
<EXAMPLE>
% <USERINPUT>/usr/lib/desktop/telldesktop quit</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>Then, restart the Desktop by selecting &ldquo;In my Home Directory&rdquo; from the Access Files menu on the Desktop toolchest.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="21525">Step Seven: Updating Your Installation Process</TITLE><PARAGRAPH>Silicon Graphics recommends you use <COMMAND>swpkg</COMMAND> to package your files for installation.The <DOCTITLE>Software Packager User's Guide</DOCTITLE> describes how to package your application for installation.</PARAGRAPH>
<PARAGRAPH><BOLD>Your installation process must:</BOLD></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Tag the executables it produces (<XREF IDREF="46561" TYPE="TITLE">&ldquo;Step One: Tagging Your Application&rdquo;</XREF> explains how to tag executables). Put the tag in the <FILENAME>Makefile</FILENAME> before the command that installs your application in the appropriate directory. For example:</PARAGRAPH>
<CODE>
TAG = 0x000010741

$(TARGET): $(OBJECTS)
&space;       $(C++) $(C++FLAGS) $(OBJECTS) $(LDFLAGS) -o $@
&space;       $(TOOLROOT)/usr/sbin/tag $(TAG) $(TARGET)
</CODE>
</BULLET>
<BULLET><PARAGRAPH>Copy<ITALICS>&space;.fti</ITALICS> and<ITALICS>&space;.ftr</ITALICS> files to the appropriate directories (<XREF IDREF="89793" TYPE="TITLE">&ldquo;Where to Put FTR Files&rdquo;</XREF> and <XREF IDREF="77527" TYPE="TITLE">&ldquo;Where to Install Your Completed Icon&rdquo;</XREF> explain which directories these files belong in). With <COMMAND>swpkg</COMMAND>, you can do this by setting the appropriate destination directory and destination filename for each file, using the Edit Permissions and Destinations worksheet. See Chapter&nbsp;5, &ldquo;Editing Permissions and Destinations,&rdquo; in the <DOCTITLE>Software Packager User's Guide</DOCTITLE> for instructions.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Invoke <COMMAND>make</COMMAND> in<FILENAME>&space;/usr/lib/filetype</FILENAME> to update the Desktop's database (<XREF IDREF="52367" TYPE="TITLE">&ldquo;Step Four: Compiling the Source Files&rdquo;</XREF> explains how to update the database). With <COMMAND>swpkg</COMMAND>, you can do this using the <COMMAND>exitop</COMMAND> attribute from the Add Attributes worksheet. Set up the <COMMAND>exitop</COMMAND> attribute to run the <COMMAND>make</COMMAND> command. See Chapter&nbsp;6, &ldquo;Adding Attributes,&rdquo; in the <DOCTITLE>Software Packager User's Guide</DOCTITLE> for instructions.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Add your icon to the Icon Catalog, creating a symbolic link in the <FILENAME>/usr/lib/desktop/iconcatalog/C/Applications</FILENAME> directory. See <XREF IDREF="78197" TYPE="TITLE">&ldquo;Step Five: Installing Your Application in the Icon Catalog&rdquo;</XREF> for instructions.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>See the<REFPAGE>&space;make(1)</REFPAGE>, <REFPAGE>sh(1)</REFPAGE>, and <REFPAGE>tag(1)</REFPAGE> reference pages for more information on these commands.</PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
