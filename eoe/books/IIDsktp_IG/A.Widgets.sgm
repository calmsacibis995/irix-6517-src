<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<APPENDIX LBL="A"><TITLE><XREFTARGET ID="67532">Example Programs for SGI Enhanced Widgets</TITLE><PARAGRAPH>This appendix contains example programs for some of the SGI extended IRIS IM widgets.<INDEXTARGET ID="A.Widgets1"><!-- POSTPROCESSDATA: A.Widgets1|widgets:example programsprograms:widget examplesexample programs:widgets --></PARAGRAPH>
<PARAGRAPH>Makefiles are provided for some of these examples, but to use these examples, you need to:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Link with <CMDLINEOPT>-lXm</CMDLINEOPT> and <CMDLINEOPT>-lSgm</CMDLINEOPT>, making sure to put the <CMDLINEOPT>-lSgm</CMDLINEOPT> before <CMDLINEOPT>-lXm</CMDLINEOPT>. (To replace an unenhanced widget with the enhanced version of that widget in an existing program, you need to re-link.)</PARAGRAPH>
<CODE>
LLDLIBS = -lSgm -lXm -lXt -lX11 -lPW
</CODE>
<PARAGRAPH>You must include <CMDLINEOPT>-lSgm</CMDLINEOPT> to get the enhanced look and the new widgets. If you do not include -lfileicon, you will get a runtime error, since the runtime loader won't be able to find needed symbols. The <CMDLINEOPT>-lXm</CMDLINEOPT> represents the enhanced version of <FILENAME>libXm</FILENAME> (IRIS IM).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Run the program with these resources:</PARAGRAPH>
<CODE>
*sgiMode:        true
*useSchemes:     all
</CODE>
<PARAGRAPH>Set them in your <FILENAME>.Xdefaults</FILENAME> file or create a file for your application in <FILENAME>/usr/lib/X11/app-defaults</FILENAME>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>This appendix provides example programs for:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="83520" TYPE="TITLE">&ldquo;Example Program for Color Chooser&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="74701" TYPE="TITLE">&ldquo;Example Program for Dial&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="84471" TYPE="TITLE">&ldquo;Example Program for Drop Pocket&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="23162" TYPE="TITLE">&ldquo;Example Program for Finder&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="98277" TYPE="TITLE">&ldquo;Example Program for History Button (Dynamenu)&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="30790" TYPE="TITLE">&ldquo;Example Program for ThumbWheel&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="36380" TYPE="TITLE">&ldquo;Example Program for File Selection Box&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="96832" TYPE="TITLE">&ldquo;Example Programs for Scale (Percent Done Indicator) Widget&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="89093" TYPE="TITLE">&ldquo;Example Program for LED Widget&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="83520">Example Program for Color Chooser</TITLE><CODE>
/* 
&space;* colortest.c --
&space;* demonstration of quick-and-easy use of the color
&space;* chooser widget.
&space;*/

#include &lt;stdio.h>

#include &lt;Xm/Xm.h>

#include &lt;Xm/Label.h>
#include &lt;Xm/Form.h>
#include &lt;Sgm/ColorC.h>

static void ColorCallback();
Widget label, colorc;
XtAppContext app;

#if 0

int sgidladd()
{
&space; return 1;
}
#endif

main (argc, argv)
int argc;
char *argv[];
{
&space; Widget toplevel, form;
&space; Arg args[25];
&space; int ac = 0;

&space; toplevel = XtVaAppInitialize(&amp;app, argv[0], NULL, 0, &amp;argc, argv, NULL, NULL);
&space; if (toplevel == (Widget)NULL) {
&space;   printf("AppInitialize failed!\n");
&space;   exit(1);
&space; }

&space; colorc = SgCreateColorChooserDialog(toplevel, "colorc", NULL, 0);
&space; XtAddCallback(colorc, XmNapplyCallback, ColorCallback, (XtPointer)NULL);
&space; XtManageChild(colorc);

&space; form = XmCreateForm(toplevel, "Form", NULL, 0);
&space; XtManageChild(form);

&space; label = XmCreateLabel(form, "I am a color!", NULL, 0);
&space; XtManageChild(label);
&space; ac = 0;

&space; XtRealizeWidget(toplevel);
&space; XtAppMainLoop(app);
}

void ColorCallback(w, client_data, call_data)
Widget w;
XtPointer client_data, call_data;
{
&space; Pixel white;  /* fallback */
&space; SgColorChooserCallbackStruct *cbs =(SgColorChooserCallbackStruct *)call_data;
&space; Display *dpy = XtDisplay(label);
&space; Screen *scr = XtScreen(label);
&space; /*
&space;  * If we were willing to use private structure members,
&space;  * we could be sure to get the correct colormap by using
&space;  * label->core.colormap.  For this demo, however,
&space;  * the default colormap will suffice in most cases.
&space;  */
&space; Colormap colormap = XDefaultColormapOfScreen(scr);
&space; XColor mycolor;
&space; Arg args[1];

&space; white = WhitePixelOfScreen(scr);

&space; mycolor.red = (unsigned short)(cbs->r&lt;&lt;8);
&space; mycolor.green = (unsigned short)(cbs->g&lt;&lt;8);
&space; mycolor.blue = (unsigned short)(cbs->b&lt;&lt;8);
&space; mycolor.flags = (DoRed | DoGreen | DoBlue);

&space; if (XAllocColor(dpy, colormap, &amp;mycolor)) {
&space;   XtSetArg(args[0], XmNbackground, mycolor.pixel);
&space; }
&space; else {
&space;   fprintf(stderr, "No more colors!\n"); fflush(stderr);
&space;   XtSetArg(args[0], XmNbackground, white);
&space; }

&space; XtSetValues(label, args, 1);
}
<INDEXTARGET ID="A.Widgets2"><!-- POSTPROCESSDATA: A.Widgets2|widgets:Color Chooser example programColor Chooser:example program --></CODE>
<SECTION2 LBL="" HELPID = ""><TITLE>Makefile for colortest.c</TITLE><CODE>
ROOT = /
MYLIBS =
XLIBS = -lSgw -lSgm -lXm -lXt -lX11 -lgl
SYSLIBS = -lPW -lm -ll -ly
INCLUDES = -I. -I$(ROOT)usr/include

LDFLAGS = -L -L. -L$(ROOT)usr/lib $(MYLIBS) $(XLIBS) $(SYSLIBS)

all: colortest

colortest: colortest.o
&space;       cc -o colortest colortest.o $(LDFLAGS)

colortest.o: colortest.c
&space;       cc -g $(INCLUDES) -DDEBUG -D_NO_PROTO -c colortest.c
<INDEXTARGET ID="A.Widgets3"><!-- POSTPROCESSDATA: A.Widgets3|widgets:Color Chooser Makefile exampleColor Chooser:Makefile example --></CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74701">Example Program for Dial</TITLE><CODE>
/* 
&space;* Mytest.c --
&space;* create and manage a dial widget.
&space;* Test its resource settings through menu/button actions.
&space;*/

#include &lt;stdio.h>
#include &lt;Xm/Xm.h>
#include &lt;Xm/Form.h>
#include &lt;Xm/DialogS.h>
#include &lt;Xm/Label.h>
#include &lt;Sgm/Dial.h>

/*
&space;* Test framework procedures and globals.
&space;*/

#ifdef _NO_PROTO
static void DragCallback();
#else
static void DragCallback(Widget w, void *client_data, void *call_data);
#endif /* _NO_PROTO */

XtAppContext app;

main (argc, argv)
int argc;
char *argv[];
{
&space; Widget toplevel, form, dial, label;
&space; Arg args[25];
&space; int ac = 0;

&space; /*
&space;  * Create and realize our top level window,
&space;  * with all the menus and buttons for user input.
&space;  */
&space; toplevel = XtVaAppInitialize(&amp;app, "Dialtest", NULL, 0, &amp;argc, argv, NULL, NULL);
&space; if (toplevel == (Widget)NULL) {
&space;   printf("AppInitialize failed!\n");
&space;   exit(1);
&space; }

&space; form = XmCreateForm(toplevel, "Form", NULL, 0);

&space; /* Set up arguments for our widget. */
&space; ac = 0;
&space; XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;

&space; /*
&space;  * We use all-default settings.
&space;  * Do not set any of the dial-specific resources.
&space;  */
&space; dial = SgCreateDial(form, "dial", args, ac);
&space; XtManageChild(dial);

&space; ac = 0;
&space; XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
&space; XtSetArg(args[ac], XmNtopWidget, dial); ac++;
&space; XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNlabelString, XmStringCreateSimple("0")); ac++;
&space; label = XmCreateLabel(form, "valueLabel", args, ac);
&space; XtManageChild(label);

&space; /*
&space;  * Set up callback for the dial.
&space;  */
&space; XtAddCallback(dial, XmNdragCallback, DragCallback, label);

&space; XtManageChild(form);
&space; XtRealizeWidget(toplevel);
&space; XtAppMainLoop(app);
}

void DragCallback(w, client_data, call_data)
Widget w;
XtPointer client_data, call_data;
{
&space; SgDialCallbackStruct *cbs = (SgDialCallbackStruct *) call_data;
&space; Widget label = (Widget)client_data;
&space; static char new_label[256];
&space; Arg args[2];
&space; int ac = 0;

&space; if ((cbs != NULL) &amp;&amp; (label != (Widget)NULL)) { 
&space;   sprintf(new_label, "%d", cbs->position);
&space;   XtSetArg(args[ac], XmNlabelString, XmStringCreateSimple(new_label)); ac++;
&space;   XtSetValues(label, args, ac);
&space; }
}
<INDEXTARGET ID="A.Widgets4"><!-- POSTPROCESSDATA: A.Widgets4|widgets:Dial example programDial widget:example program --></CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="84471">Example Program for Drop Pocket</TITLE><CODE>
/* 
&space;*  Demonstrate the use of the DropPocket
&space;*/

#include &lt;Xm/Form.h>
#include &lt;Xm/PushB.h>
#include &lt;Sgm/DropPocket.h>

static void droppedCB(Widget w, XtPointer clientData, XtPointer cbs ) {
&space; SgDropPocketCallbackStruct * dcbs = (SgDropPocketCallbackStruct *)cbs;
&space; char * name;

&space; if (dcbs->iconName)
&space;   if (!XmStringGetLtoR( dcbs->iconName, XmFONTLIST_DEFAULT_TAG, &amp;name))
&space;     name = NULL;

&space; printf("Dropped file: %s\nFull Data: %s\n", name, dcbs->iconData );
&space; XtFree( name );
}

main( int argc, char * argv[] ) {
&space; Widget toplevel, exitB, dp, topRC;
&space; XtAppContext app;

&space; XtSetLanguageProc(NULL, (XtLanguageProc)NULL, NULL);
&space; toplevel = XtVaAppInitialize( &amp;app, "DropPocket", NULL, 0, &amp;argc, argv, NULL, NULL);
&space; topRC = XtVaCreateManagedWidget( "topRC", xmFormWidgetClass, toplevel, NULL);
&space; dp = XtVaCreateManagedWidget("dp",
&space;                              sgDropPocketWidgetClass, topRC,
&space;                              XmNtopAttachment, XmATTACH_FORM,
&space;                              XmNbottomAttachment, XmATTACH_FORM,
&space;                              XmNleftAttachment, XmATTACH_FORM,
&space;                              XmNrightAttachment, XmATTACH_FORM,
&space;                              XmNheight, 100,
&space;                              XmNwidth, 100,
&space;                              NULL);
&space; XtAddCallback( dp, SgNiconUpdateCallback, droppedCB, NULL);
&space; XtRealizeWidget( toplevel );
&space; XtAppMainLoop( app );
}
<INDEXTARGET ID="A.Widgets5"><!-- POSTPROCESSDATA: A.Widgets5|widgets:Drop Pocket example programdrop pocket:example program --></CODE>
<SECTION2 LBL="" HELPID = ""><TITLE>Makefile for Drop Pocket Example</TITLE><CODE>
#!smake 
#
include /usr/include/make/commondefs

HFILES = \\p        DropPocketP.h \\p        DropPocket.h 

CFILES = \\p        DropPocket.c


TARGETS = dpt

CVERSION = -xansi
MALLOC = /d2/stuff/lib/Malloc
CVERSION = -xansi
OPTIMIZER = -g 
#-I$(MALLOC) -wlint,-pf -woff 813,826,828 

LLDLIBS = -lSgm -lXm -lXt -lX11 -lPW
#LLDLIBS = -u malloc -u XtRealloc -u XtMalloc -u XtCalloc -L /d2/stuff/lib
&space;          -ldbmalloc -lSgm -lXm -lXt -lX11

LCDEFS = -DFUNCPROTO -DDEBUG

targets: $(TARGETS)

include $(COMMONRULES)

#dpt: dpTest.o $(OBJECTS)
#       $(CC) -o $@ dpTest.o $(OBJECTS) $(LDFLAGS)

dpt: dpTest.o
&space;       $(CC) -o $@ dpTest.o $(LDFLAGS)

#dpt2: dpTest2.o $(OBJECTS)
#       $(CC) -o $@ dpTest2.o $(OBJECTS) $(LDFLAGS)

dpt2: dpTest2.o
&space;       $(CC) -o $@ dpTest2.o $(LDFLAGS)

#dpt3: dpTest3.o $(OBJECTS)
#       $(CC) -o $@ dpTest3.o $(OBJECTS) $(LDFLAGS)

dpt3: dpTest3.o
&space;       $(CC) -o $@ dpTest3.o $(LDFLAGS)

#tdt: tdt.o $(OBJECTS)
#       $(CC) -o $@ tdt.o $(OBJECTS) $(LDFLAGS)

tdt: tdt.o
&space;       $(CC) -o $@ tdt.o $(LDFLAGS)

depend:
&space;       makedepend -- $(CFLAGS) -- $(HFILES) $(CFILES)
<INDEXTARGET ID="A.Widgets6"><!-- POSTPROCESSDATA: A.Widgets6|widgets:Drop Pocket Makefile exampledrop pocket:Makefile example --></CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="23162">Example Program for Finder</TITLE><CODE>
/* 
&space;* Finder.c demonstrates the use of the SgFinder widget
&space;*/
#include &lt;stdlib.h>
#include &lt;stdio.h>
#include &lt;Xm/RowColumn.h>
#include &lt;Xm/Label.h>
#include &lt;Sgm/Finder.h>
#include &lt;Sgm/DynaMenu.h>

static char * items[] = { "Archer's favorite songs:",
&space;                           "Draft dodger rag",
&space;                           "Le Roi Renaud",
&space;                           "/usr/sbin",
&space;                           "/lib/libc.so.1",
&space;                           "Calvinist Headgear Expressway",
&space;                         };

static void valueChangeCB( Widget w, XtPointer clientData, XmAnyCallbackStruct * cbs) {
&space; printf("App value change callback\n");
}

static void activateCB( Widget w, XtPointer clientData, XmAnyCallbackStruct * cbs) {
&space; printf("App activate callback\n");
}
main( int argc, char * argv[] ) {
&space; Widget toplevel, rc, label, finder, history;
&space; XtAppContext app;
&space; XmString * list;
&space; int listSize, i;

&space; XtSetLanguageProc(NULL, (XtLanguageProc)NULL, NULL);
&space; toplevel = XtVaAppInitialize( &amp;app, "Finder", NULL, 0, &amp;argc, argv, NULL, NULL);
&space; rc = XtVaCreateWidget( "rc",
&space;                       xmRowColumnWidgetClass, toplevel,
&space;                       XmNresizeWidth, False,
&space;                       XmNresizeHeight, True,
&space;                       NULL);

&space; /* create the original list for the historyMenu */
&space; listSize = XtNumber( items );
&space; list = (XmString *)XtMalloc( sizeof(XmString) * listSize);
&space; for (i = 0; i &lt; listSize; i++)
&space;   list[ i ] = XmStringCreateLocalized( items[ i ] );

&space; label = XtVaCreateManagedWidget( "Things:",
&space;                                 xmLabelWidgetClass, rc,
&space;                                 NULL);
&space; finder = XtVaCreateManagedWidget("finder", sgFinderWidgetClass, rc, NULL);
&space; history = SgFinderGetChild( finder, SgFINDER_HISTORY_MENUBAR );
&space; if (history &amp;&amp; SgIsDynaMenu( history )) {
&space;   XtVaSetValues( history,
&space;                 SgNhistoryListItems, list,
&space;                 SgNhistoryListItemCount, listSize,
&space;                 NULL);
&space; }

&space; for (i = 0; i &lt; listSize; i++)
&space;   if (list[ i ])
&space;     XmStringFree(list[ i ]);
&space; if (list)
&space;   XtFree( (char *)list );

&space; XtAddCallback( finder, XmNvalueChangedCallback, (XtCallbackProc)valueChangeCB, finder);
&space; XtAddCallback( finder, XmNactivateCallback, (XtCallbackProc)activateCB, finder);

&space; XtManageChild( rc );
&space; XtRealizeWidget( toplevel );
&space; XtAppMainLoop( app );
}
<INDEXTARGET ID="A.Widgets7"><!-- POSTPROCESSDATA: A.Widgets7|widgets:Finder example programFinder widget:example program --></CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="98277">Example Program for History Button (Dynamenu)</TITLE><CODE>
#include &lt;Sgm/DynaMenu.h> 
#include &lt;Xm/RowColumn.h>

static char * items[] = { "illegal smile", "/usr/people/stone",
&space;                         "Fish and whistle", "help I'm trapped in the
&space;                          machine", "9th &amp; Hennepin" };

static void dynaPushCB( Widget w, XtPointer clientData, XtPointer cbd ) {
&space; SgDynaMenuCallbackStruct * cbs = (SgDynaMenuCallbackStruct *) cbd;
&space; int num = cbs->button_number;
&space; printf("Selected item number %d\n", num);
}

main( int argc, char * argv[] ) {
&space; XtAppContext app = NULL;
&space; Widget toplevel, rc, dynaMenu;
&space; XmString * list;
&space; int listSize, i;

&space; toplevel = XtVaAppInitialize( &amp;app, "DynaMenu", NULL, 0, &amp;argc,argv, NULL, NULL);
&space; rc = XtVaCreateManagedWidget( "rc", xmRowColumnWidgetClass, toplevel, NULL);

&space; /* create the original list for the dynaMenu */
&space; listSize = XtNumber( items );
&space; list = (XmString *)XtMalloc( sizeof(XmString) * (unsigned int)listSize);
&space; for (i = 0; i &lt; listSize; i++)
&space;   list[ i ] = XmStringCreateLocalized( items[ i ] );

&space; dynaMenu = XtVaCreateManagedWidget("dynaMenu",
&space;                                    sgDynaMenuWidgetClass, rc,
&space;                                    SgNhistoryListItems, list,
&space;                                    SgNhistoryListItemCount, listSize,
&space;                                    NULL);
&space; XtAddCallback( dynaMenu, SgNdynaPushCallback, dynaPushCB, NULL);

&space; for (i = 0; i &lt; listSize; i++)
&space;   XmStringFree( list[ i ] );
&space; XtFree( (char *)list );

&space; XtRealizeWidget( toplevel );
&space; XtAppMainLoop( app );
}
<INDEXTARGET ID="A.Widgets8"><!-- POSTPROCESSDATA: A.Widgets8|widgets:History Button example programHistory Button:example programDynamenu:example program --></CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="30790">Example Program for ThumbWheel</TITLE><CODE>
/* 
&space;* Thumbwheel.c --
&space;* create and manage a thumbwheel.
&space;*/

#include &lt;stdio.h>
#include &lt;Xm/Xm.h>
#include &lt;Xm/Form.h>
#include &lt;Xm/DialogS.h>
#include &lt;Xm/Label.h>
#include &lt;Sgm/ThumbWheel.h>

/*
&space;* Test framework procedures and globals.
&space;*/

#ifdef _NO_PROTO
static void DragCallback();
#else
static void DragCallback(Widget w, void *client_data, void *call_data);
#endif /* _NO_PROTO */

XtAppContext app;

main (argc, argv)
int argc;
char *argv[];
{
&space; Widget toplevel, form, thumbwheel, label;
&space; Arg args[25];
&space; int ac = 0;

&space; /*
&space;  * Create and realize our top level window,
&space;  * with all the menus and buttons for user input.
&space;  */
&space; toplevel = XtVaAppInitialize( &amp;app, "Thumbwheeltest", NULL, 0, &amp;argc, argv, NULL, NULL);
&space; if (toplevel == (Widget)NULL) {
&space;   printf("AppInitialize failed!\n");
&space;   exit(1);
&space; }

&space; form = XmCreateForm(toplevel, "Form", NULL, 0);

&space; /* Set up arguments for our widget. */
&space; ac = 0;
&space; XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNtopAttachment, XmATTACH_FORM); ac++;

&space; /*
&space;  * We use all-default settings, with the exception of orientation.
&space;  * Do not set any other thumbwheel-specific resources.
&space;  */
&space; ac = 0;
&space; XtSetArg(args[ac], XmNorientation, XmHORIZONTAL); ac++;
&space; thumbwheel = SgCreateThumbWheel(form, "thumbwheel", args, ac);
&space; XtManageChild(thumbwheel);

&space; ac = 0;
&space; XtSetArg(args[ac], XmNleftAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNrightAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNtopAttachment, XmATTACH_WIDGET); ac++;
&space; XtSetArg(args[ac], XmNtopWidget, thumbwheel); ac++;
&space; XtSetArg(args[ac], XmNbottomAttachment, XmATTACH_FORM); ac++;
&space; XtSetArg(args[ac], XmNlabelString, XmStringCreateSimple("0")); ac++;
&space; label = XmCreateLabel(form, "valueLabel", args, ac);
&space; XtManageChild(label);

&space; /*
&space;  * Set up callback for the thumbwheel.
&space;  */
&space; XtAddCallback(thumbwheel, XmNdragCallback, DragCallback, label);

&space; XtManageChild(form);
&space; XtRealizeWidget(toplevel);
&space; XtAppMainLoop(app);
}

void DragCallback(w, client_data, call_data)
Widget w;
XtPointer client_data, call_data;
{
&space; SgThumbWheelCallbackStruct *cbs = (SgThumbWheelCallbackStruct *) call_data;
&space; Widget label = (Widget)client_data;
&space; static char new_label[256];
&space; Arg args[2];
&space; int ac = 0;

&space; if ((cbs != NULL) &amp;&amp; (label != (Widget)NULL)) { 
&space;   sprintf(new_label, "%d", cbs->value);
&space;   XtSetArg(args[ac], XmNlabelString, XmStringCreateSimple(new_label)); ac++;
&space;   XtSetValues(label, args, ac);
&space; }
}
<INDEXTARGET ID="A.Widgets9"><!-- POSTPROCESSDATA: A.Widgets9|widgets:ThumbWheel example programThumbWheel widget:example program --></CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="36380">Example Program for File Selection Box</TITLE><PARAGRAPH>To run this program, add these lines to your <INDEXTARGET ID="A.Widgets10"><!-- POSTPROCESSDATA: A.Widgets10|widgets:File Selection Box example programFile Selection Box:example program --><FILENAME>.Xdefaults</FILENAME> file:</PARAGRAPH>
<CODE>
fsb*sgiMode: true
fsb*useSchemes: all
</CODE>
<PARAGRAPH>then type:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>xrdb -load</USERINPUT>
</EXAMPLE>
<PARAGRAPH>Here's the sample program:</PARAGRAPH>
<CODE>
/*-------  fsb.c  -------*/
#include &lt;Xm/RowColumn.h>
#include &lt;Xm/Form.h>
#include &lt;Xm/PushB.h>
#include &lt;stdlib.h>
#include &lt;stdio.h>
#include &lt;Xm/FileSB.h>


void printDirF( Widget w, XtPointer clientData, XmFileSelectionBoxCallbackStruct * cbs) {

&space; char * filename = NULL, * dirname = NULL;

&space; XmStringGetLtoR( cbs->value, XmFONTLIST_DEFAULT_TAG, &amp;filename);

&space; XmStringGetLtoR( cbs->dir, XmFONTLIST_DEFAULT_TAG, &amp;dirname);

&space; printf(&ldquo;Filename selected: %s\n&rdquo;, filename);

&space; if (filename)
&space;   XtFree( filename );
&space; if (dirname)
&space;   XtFree( dirname );
}

static void showDialog( Widget w, XtPointer clientData, XtPointer callData) {

&space; Widget dialog = (Widget) clientData;
&space; XtManageChild( dialog );

}

main (int argc, char *argv[]) {
&space; Widget toplevel, fsb, b1, b2, rc;
&space; XtAppContext app;
&space; XmString textStr;

&space; XtSetLanguageProc( NULL, (XtLanguageProc)NULL, NULL);

&space; toplevel = XtVaAppInitialize( &amp;app, &ldquo;Fsb&rdquo;, NULL, 0, &amp;argc, argv, NULL, NULL);

&space; rc = XtVaCreateManagedWidget( &ldquo;rc&rdquo;, xmFormWidgetClass, toplevel, NULL);

&space; /* Set up a dialog */
&space; if (argc > 1) {

&space;   b1 = XtVaCreateManagedWidget( &ldquo;FSB&rdquo;,
&space;                                 xmPushButtonWidgetClass,
&space;                                 rc,
&space;                                 XmNtopAttachment,
&space;                                 XmATTACH_FORM,
&space;                                 XmNbottomAttachment,
&space;                                 XmATTACH_FORM,
&space;                                 XmNleftAttachment,
&space;                                 XmATTACH_FORM,
&space;                                 XmNrightAttachment,
&space;                                 XmATTACH_FORM,
&space;                                 NULL);

&space;   fsb = XmCreateFileSelectionDialog( b1, &ldquo;FSB Dialog&rdquo;, NULL, 0);

&space;   XtAddCallback( b1, XmNactivateCallback, showDialog, fsb);

&space; } else {
&space;   fsb = XmCreateFileSelectionBox( rc, &ldquo;Select A File&rdquo;, NULL, 0);
&space;   XtVaSetValues( fsb,
&space;                  XmNtopAttachment, XmATTACH_FORM,
&space;                  XmNbottomAttachment, XmATTACH_FORM,
&space;                  XmNleftAttachment, XmATTACH_FORM,
&space;                  XmNrightAttachment, XmATTACH_FORM,
&space;                  NULL);
&space;   XtManageChild( fsb );

&space; }

&space; XtAddCallback( fsb, XmNokCallback, (XtCallbackProc)printDirF, fsb);
&space; XtAddCallback( fsb, XmNcancelCallback, (XtCallbackProc)exit, NULL);

&space; XtRealizeWidget( toplevel );
&space; XtAppMainLoop( app );

}
</CODE>
<SECTION2 LBL="" HELPID = ""><TITLE>Makefile for File Selection Box Example Program</TITLE><CODE>
#!smake 
#
include /usr/include/make/commondefs

CFILES =  fsb.c

TARGETS = fsb

CVERSION = -xansi
OPTIMIZER = -g

LLDLIBS =  -lSgm  -lXm -lXt -lX11 -lPW

LCDEFS = -DFUNCPROTO -DDEBUG

LCINCS = -I. -I$(MOTIF_HEADERS)

targets: $(TARGETS)

include $(COMMONRULES)

fsb: $(OBJECTS)
$(CC) -o $@ $(OBJECTS) $(LDFLAGS)
<INDEXTARGET ID="A.Widgets11"><!-- POSTPROCESSDATA: A.Widgets11|widgets:File Selection Box Makefile exampleFile Selection Box:Makefile example --></CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="96832">Example Programs for Scale (Percent Done Indicator) Widget</TITLE><PARAGRAPH>The following code produces a simple motif scale widget: <INDEXTARGET ID="A.Widgets12"><!-- POSTPROCESSDATA: A.Widgets12|Scale widget:example programwidgets:Scale example programPercent Done Indicator:example programwidgets:Percent Done Indicator example --></PARAGRAPH>
<CODE>
/* progress.c */ 
/* cc -o progress progress.c -lXm -lXt */
&space;#include &lt;Xm/Scale.h>
&space;void main(int argc, char** argv) {
&space;   Widget toplevel, scale;
&space;   XtAppContext app_context;
&space;   Arg args[5];
&space;   int nargs=0;

&space;   toplevel = XtAppInitialize(&amp;app_context, &ldquo;Progress&rdquo;, 
&space;                       NULL, 0, &amp;argc, argv, NULL, NULL, 0);
&space;
&space;   XtSetArg(args[nargs], XmNvalue, 50); nargs++;
&space;   XtSetArg(args[nargs], XmNorientation, XmHORIZONTAL); nargs++;
&space;   scale = XmCreateScale(toplevel, &ldquo;scale&rdquo;, args, nargs);
&space;   XtManageChild(scale);

&space;   XtRealizeWidget(toplevel);
&space;   XtAppMainLoop(app_context);
}
</CODE>
<PARAGRAPH>The following resource file (named &ldquo;Progress&rdquo;) produces the slanted, thermometer look of the SGI percent done indicator. Also see the IRIS Viewkit VkProgressDialog class.</PARAGRAPH>
<CODE>
!Progress - App-default resources for the progress sample program 

*sgiMode: true
*useSchemes: all 

!Change the appearance o  the slider
*scale.sliderVisual:  flat_foreground
*scale.slidingMode:   thermometer
*scale.slanted:       true

!Set the correct scheme colors
Progress*scale*foreground:    SGI_DYNAMIC BasicBackground
Progress*scale*troughColor:   SGI_DYNAMIC TextFieldBackground
</CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="89093">Example Program for LED Widget</TITLE><CODE>
/* ledbutton.c                                                 */		
/* cc -o ledbutton ledbutton.c -lXm -lXt                        */
/* ledbutton -xrm &ldquo;*sgiMode: true&rdquo; -xrm &ldquo;*useSchemes: all&rdquo;       */

#include &lt;Xm/ToggleB.h>

void main(int argc, char** argv)
{
&space;  Widget toplevel, toggle;
&space;  XtAppContext app_context;
&space;  Arg args[5];
&space;  int nargs=0;
&space;  
&space;  toplevel = XtAppInitialize(&amp;app_context, &ldquo;LEDButton&rdquo;, 
		              NULL, 0, &amp;argc, argv, NULL, NULL, 0);

&space;  XtSetArg(args[nargs], XmNindicatorSize, 10);  nargs++;
&space;  XtSetArg(args[nargs], XmNindicatorType, Xm3D_N_OF_MANY);  nargs++;
&space;  toggle = XmCreateToggleButton(toplevel, &ldquo;toggle&rdquo;, args, nargs);
&space;  XtManageChild(toggle);

&space;  XtRealizeWidget(toplevel);
&space;  XtAppMainLoop(app_context);
} 
<INDEXTARGET ID="A.Widgets13"><!-- POSTPROCESSDATA: A.Widgets13|LED widget:example programwidgets:LED example program --></CODE>
</SECTION1>
</APPENDIX>
