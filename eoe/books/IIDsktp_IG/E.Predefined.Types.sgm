<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<APPENDIX LBL="E"><TITLE><XREFTARGET ID="44691">Predefined File Types</TITLE><PARAGRAPH>This appendix lists the predefined file types and their associated tag numbers that are available for your use. Topics include:<INDEXTARGET ID="E.Predefined.Types1"><!-- POSTPROCESSDATA: E.Predefined.Types1|files:types, predefinedpredefined file typestypes:predefined file types --><INDEXTARGET ID="E.Predefined.Types2"><!-- POSTPROCESSDATA: E.Predefined.Types2|files:types, predefined. <ITALICS>See also</ITALICS> predefined file types --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="12764" TYPE="TITLE">&ldquo;Naming Conventions for Predefined File Types&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="45554" TYPE="TITLE">&ldquo;The Predefined File Types and What They Do&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>You can use these predefined file types for utilities that do not need a unique, personalized look. You may also want to use these file types as SUPERTYPEs for your own custom file types.<INDEXTARGET ID="E.Predefined.Types3"><!-- POSTPROCESSDATA: E.Predefined.Types3|types:predefined file types. <ITALICS>See also</ITALICS> predefined file types --></PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12764">Naming Conventions for Predefined File Types</TITLE><PARAGRAPH>The file types listed in this appendix are named according to the conventions listed in <INDEXTARGET ID="E.Predefined.Types4"><!-- POSTPROCESSDATA: E.Predefined.Types4|files:predefined file types naming conventionsnaming conventions:predefined file typespredefined file types:naming conventions --><XREF IDREF="46140" TYPE="TABLE">Table&nbsp;E-1</XREF>.</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="E-1"><PREFIX>Table E-1 </PREFIX><XREFTARGET ID="46140"> <EMPHASIS>(continued)        </EMPHASIS>Predefined File Type Naming Conventions</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="166"><PARAGRAPH>If the file type name includes:</PARAGRAPH>
</CELL>
<CELL LEFT="175" WIDTH="166"><PARAGRAPH>Then</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="166"><PARAGRAPH>1-Narg</PARAGRAPH>
</CELL>
<CELL LEFT="175" WIDTH="166"><PARAGRAPH>it requires at least one argument</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="166"><PARAGRAPH>1arg</PARAGRAPH>
</CELL>
<CELL LEFT="175" WIDTH="166"><PARAGRAPH>it requires exactly one argument</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="166"><PARAGRAPH>2arg</PARAGRAPH>
</CELL>
<CELL LEFT="175" WIDTH="166"><PARAGRAPH>it requires exactly two arguments</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="166"><PARAGRAPH>3arg</PARAGRAPH>
</CELL>
<CELL LEFT="175" WIDTH="166"><PARAGRAPH>it requires exactly three arguments</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>In all cases, if the expected number of arguments is not received, <COMMAND>launch</COMMAND> is run so that users can type in the desired options. For more information on the <COMMAND>launch</COMMAND> command, see the <REFPAGE>launch(1)</REFPAGE> reference page.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="45554">The Predefined File Types and What They Do</TITLE><PARAGRAPH>In this section, file types that are essentially the same, except for the number of arguments they require, are grouped together by the &ldquo;base&rdquo; file type name, meaning the file type name without the argument codes described in <INDEXTARGET ID="E.Predefined.Types5"><!-- POSTPROCESSDATA: E.Predefined.Types5|predefined file types:SpecialFileSpecialFile predefined file type --><XREF IDREF="12764" TYPE="TITLE">&ldquo;Naming Conventions for Predefined File Types&rdquo;</XREF>. </PARAGRAPH>
<PARAGRAPH>For example, to find the file type named &ldquo;ttyLaunchOut1argExecutable,&rdquo; look under &ldquo;ttyLaunchOutExecutable.&rdquo; These two file types are identical, except that &ldquo;ttyLaunchOut1argExecutable&rdquo; requires exactly one argument.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>SpecialFile</TITLE><PARAGRAPH>&ldquo;SpecialFile&rdquo; is a predefined SUPERTYPE, not an actual file type. When you include the SPECIALFILE rule in your file type, you should also declare the &ldquo;SpecialFile&rdquo; SUPERTYPE. This allows applications to use <COMMAND>isSuper</COMMAND>(1) to test whether your file type is a SPECIALFILE.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Directory</TITLE><EXAMPLE>
TYPE Directory&lbreak;MATCH (mode &amp; 0170000) == 040000;
<INDEXTARGET ID="E.Predefined.Types6"><!-- POSTPROCESSDATA: E.Predefined.Types6|predefined file types:DirectoryDirectory predefined file type --></EXAMPLE>
<PARAGRAPH>The &ldquo;Directory&rdquo; type. Any custom file types you define for directories should include &ldquo;Directory&rdquo; as a SUPERTYPE. &ldquo;Directory&rdquo; is defined in <FILENAME>/usr/lib/filetype/default/sgidefault.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Ascii</TITLE><EXAMPLE>
TYPE Ascii
<INDEXTARGET ID="E.Predefined.Types7"><!-- POSTPROCESSDATA: E.Predefined.Types7|predefined file types:AsciiAscii predefined file type --></EXAMPLE>
<PARAGRAPH>&ldquo;Ascii&rdquo; is a pseudotype defined to support <COMMAND>routeprint</COMMAND> conversions. Actual ASCII text files have the type &ldquo;AsciiTestFile&rdquo;:</PARAGRAPH>
<EXAMPLE>
TYPE AsciiTextFile&lbreak;MATCH ascii;
</EXAMPLE>
<PARAGRAPH>&ldquo;Ascii&rdquo; is defined in <FILENAME>/usr/lib/filetype/system/sgisystem.converts.ftr</FILENAME> and &ldquo;AsciiTextFile&rdquo; is defined in <FILENAME>/usr/lib/filetype/default/sgidefault.ftr</FILENAME>. The Ascii icon is <FILENAME>/usr/lib/filetype/default/iconlib/AsciiText.closed.fti</FILENAME> superimposed over <FILENAME>/usr/lib/filetype/iconlib/generic.doc.fti</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Source Files</TITLE><EXAMPLE>
TYPE SourceFile
<INDEXTARGET ID="E.Predefined.Types8"><!-- POSTPROCESSDATA: E.Predefined.Types8|predefined file types:SourceFileSourceFile predefined file type --></EXAMPLE>
<PARAGRAPH>&ldquo;SourceFile&rdquo; is a pseudotype defined to support <COMMAND>routeprint</COMMAND> conversions. Actual source files have more specific types such as:</PARAGRAPH>
<EXAMPLE>
TYPE Makefile&lbreak;MATCH (glob("[mM]akefile") || glob("*.mk")) &amp;&amp; ascii;
TYPE HeaderFile&lbreak;MATCH glob("*.h") &amp;&amp; ascii;
TYPE CPlusPlusProgram&lbreak;MATCH glob("*.c++") &amp;&amp; ascii;
</EXAMPLE>
<PARAGRAPH>TYPE CProgram&lbreak;MATCH glob("*.c") &amp;&amp; ascii;</PARAGRAPH>
<PARAGRAPH>TYPE Program&lbreak;MATCH (glob("*.[pfrasly]") || glob("*.pl[i1]")) &amp;&amp; ascii;</PARAGRAPH>
<PARAGRAPH>&ldquo;SourceFile&rdquo; is defined in <FILENAME>/usr/lib/filetype/system/sgisystem.converts.ftr</FILENAME> and the specific types shown above are defined in <FILENAME>/usr/lib/filetype/system/sgisystem.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Binary</TITLE><PARAGRAPH>&ldquo;Binary&rdquo; is a predefined SUPERTYPE, not an actual file type. You can create custom file types using &ldquo;Binary&rdquo; as a SUPERTYPE.<INDEXTARGET ID="E.Predefined.Types9"><!-- POSTPROCESSDATA: E.Predefined.Types9|predefined file types:BinaryBinary predefined file type --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>ImageFile</TITLE><EXAMPLE>
TYPE ImageFile
<INDEXTARGET ID="E.Predefined.Types10"><!-- POSTPROCESSDATA: E.Predefined.Types10|predefined file types:ImageFileImageFile predefined file type --></EXAMPLE>
<PARAGRAPH>&ldquo;ImageFile&rdquo; is a top-level image pseudotype. You can create custom file types using ImageFile as a SUPERTYPE, or you can use a more specific file type such as:</PARAGRAPH>
<EXAMPLE>
TYPE SGIImage&lbreak;MATCH short(0) == 000732 ||&lbreak;# normal SGI image&lbreak;short(0) == 0155001;&lbreak;#byte-swapped SGI image
TYPE TIFFImage&lbreak;MATCH long(0) == 0x49492a00 || long(0) == 0x4d4d002a;&lbreak;# TIFF image
TYPE FITImage&lbreak;MATCH string(0,2) == "IT";&lbreak;# FIT image
TYPE PCDimage&lbreak;MATCH string(2048,7) == "PCD_IPI";&lbreak;# Kodak Photo CD image pack
TYPE PCDOimage&lbreak;MATCH string(0,7) == "PCD_OPA";&lbreak;# Kodak Photo CD overview pack
TYPE GIF87Image&lbreak;MATCH string(0,6) == "GIF87a";&lbreak;# GIF image (GIF87a format)
TYPE GIF89Image&lbreak;MATCH string(0,6) == "GIF89a";&lbreak;# GIF image (GIF89a format)
</EXAMPLE>
<PARAGRAPH>These and other file types are defined in <FILENAME>/usr/lib/filetype/system/sgiimage.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Executable</TITLE><PARAGRAPH>&ldquo;Executable&rdquo; is a predefined SUPERTYPE, not an actual file type. You can create custom file types using &ldquo;Executable&rdquo; as a SUPERTYPE.<INDEXTARGET ID="E.Predefined.Types11"><!-- POSTPROCESSDATA: E.Predefined.Types11|predefined file types:ExecutableExecutable predefined file type --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Scripts</TITLE><EXAMPLE>
TYPE Script&lbreak;MATCH (mode &amp; 0111) &amp;&amp; ascii;
<INDEXTARGET ID="E.Predefined.Types12"><!-- POSTPROCESSDATA: E.Predefined.Types12|predefined file types:ScriptScript predefined file type --></EXAMPLE>
<PARAGRAPH>This is the file type for shell scripts, defined in <FILENAME>/usr/lib/filetype/default/sgidefault.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>GenericWindowedExecutable</TITLE><EXAMPLE>
TYPE GenericWindowedExecutable&lbreak;MATCH   tag == 0x00000000;
TYPE Generic1-NargExecutable&lbreak;MATCH   tag == 0x00000020;
TYPE Generic1argExecutable&lbreak;MATCH   tag == 0x00000001;
TYPE Generic2argExecutable&lbreak;MATCH   tag == 0x00000002;
TYPE Generic3argExecutable&lbreak;MATCH   tag == 0x00000003;
<INDEXTARGET ID="E.Predefined.Types13"><!-- POSTPROCESSDATA: E.Predefined.Types13|predefined file types:GenericWindowExecutableGenericWindowExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Simply runs the command. No output or terminal emulation windows are used. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>LaunchExecutable</TITLE><EXAMPLE>
TYPE LaunchExecutable&lbreak;MATCH   tag == 0x00000100;
TYPE Launch1-NargExecutable&lbreak;MATCH   tag == 0x00000120;
TYPE Launch1argExecutable&lbreak;MATCH   tag == 0x00000101;
TYPE Launch2argExecutable&lbreak;MATCH   tag == 0x00000102;
<INDEXTARGET ID="E.Predefined.Types14"><!-- POSTPROCESSDATA: E.Predefined.Types14|predefined file types:LaunchExecutableLaunchExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Same as &ldquo;GenericWindowedExecutable,&rdquo; except that it runs <COMMAND>launch</COMMAND> to allow user to enter options prior to running the command. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>ttyExecutable</TITLE><EXAMPLE>
TYPE ttyExecutable&lbreak;MATCH   (tag == 0x00000400) || (tag == 0x00000410);
TYPE tty1-NargExecutable&lbreak;MATCH   tag == 0x00000420;
TYPE tty2argExecutable&lbreak;MATCH   tag == 0x00000402;
<INDEXTARGET ID="E.Predefined.Types15"><!-- POSTPROCESSDATA: E.Predefined.Types15|predefined file types:ttyExecutablettyExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Runs the command in a window that allows terminal I/O. The output window (which is where the terminal emulation is being done) exits immediately upon termination of the command. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>ttyLaunchExecutable</TITLE><EXAMPLE>
TYPE ttyLaunchExecutable&lbreak;MATCH   tag == 0x00000500;
TYPE ttyLaunch1-NargExecutable&lbreak;MATCH   tag == 0x00000520;
TYPE ttyLaunch1argExecutable&lbreak;MATCH   tag == 0x00000501;
<INDEXTARGET ID="E.Predefined.Types16"><!-- POSTPROCESSDATA: E.Predefined.Types16|predefined file types:ttyLaunchExecutablettyLaunchExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Same as &ldquo;ttyExecutable,&rdquo; except that it runs <COMMAND>launch</COMMAND> to allow user to enter options before running the command. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>ttyOutExecutable</TITLE><EXAMPLE>
TYPE ttyOutExecutable&lbreak;MATCH   (tag == 0x00000600) || (tag == 0x00000610);
TYPE ttyOut1-NargExecutable&lbreak;MATCH   tag == 0x00000620;
TYPE ttyOut1argExecutable&lbreak;MATCH   tag == 0x00000601;
TYPE ttyOut2argExecutable&lbreak;MATCH   tag == 0x00000602;
<INDEXTARGET ID="E.Predefined.Types17"><!-- POSTPROCESSDATA: E.Predefined.Types17|predefined file types:ttyOutExecutablettyOutExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Same as &ldquo;ttyExecutable,&rdquo; except that the output window persists until the user explicitly dismisses it. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>ttyLaunchOutExecutable</TITLE><EXAMPLE>
TYPE ttyLaunchOutExecutable&lbreak;MATCH   (tag == 0x00000700) || (tag == 0x00000710);
TYPE ttyLaunchOut1-NargExecutable&lbreak;MATCH   tag == 0x00000720;
TYPE ttyLaunchOut1argExecutable&lbreak;MATCH   tag == 0x00000701;
TYPE ttyLaunchOut2argExecutable&lbreak;MATCH   tag == 0x00000702;
TYPE ttyLaunchOut3argExecutable&lbreak;MATCH   tag == 0x00000703
<INDEXTARGET ID="E.Predefined.Types18"><!-- POSTPROCESSDATA: E.Predefined.Types18|predefined file types:ttyLaunchOutExecutablettyLaunchOutExecutable predefined file type --></EXAMPLE>
<PARAGRAPH>Same as &ldquo;ttyOutExecutable,&rdquo; except that it runs <COMMAND>launch</COMMAND> to allow user to enter options before running the command. These file types are defined in <FILENAME>/usr/lib/filetype/system/sgicmds.ftr</FILENAME>. </PARAGRAPH>
</SECTION2>
</SECTION1>
</APPENDIX>
