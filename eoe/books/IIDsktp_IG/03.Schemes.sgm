<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="74067">Using Schemes</TITLE><PARAGRAPH><INDEXTARGET ID="03.Schemes1"><!-- POSTPROCESSDATA: 03.Schemes1|schemesdesktop:colorscolors:desktopfonts:and desktopdesktop:and fontslook and feel:schemes --><ITALICS>Schemes</ITALICS> provide an easy way to apply a collection of resources to your application. The scheme mechanism allows your users to select from pre-packaged collections of colors and fonts that are designed to integrate visually with the IRIX Interactive Desktop and other applications. <INDEXTARGET ID="03.Schemes2"><!-- POSTPROCESSDATA: 03.Schemes2|desktop:schemes --><INDEXTARGET ID="03.Schemes3"><!-- POSTPROCESSDATA: 03.Schemes3|application integration:schemesintegration:schemes&lt;$startrange --><EXTREF IDREF="78166" BOOK="UI_Glines" FILE="" HDG="78166" INFO="">&ldquo;Schemes for Colors and Fonts&rdquo; in Chapter&nbsp;3</EXTREF>
 in <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE> describes the guidelines for using schemes in the IRIX Interactive Desktop environment.</PARAGRAPH>
<PARAGRAPH>This chapter contains the following sections:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="48163" TYPE="TITLE">&ldquo;Schemes Overview&rdquo;</XREF> provides an overview to schemes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="86764" TYPE="TITLE">&ldquo;Using Schemes in Your Application&rdquo;</XREF> describes what you need to do to use schemes in your application.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="29661" TYPE="TITLE">&ldquo;Extending a Scheme to Support New Colors&rdquo;</XREF> provides tips for testing how your application responds to different schemes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="64336" TYPE="TITLE">&ldquo;Creating New Schemes&rdquo;</XREF> describes how to create new schemes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="92475" TYPE="TITLE">&ldquo;Hard-Coding a Scheme for an Application&rdquo;</XREF> describes how to force your application to use one specific scheme.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="48163">Schemes Overview</TITLE><PARAGRAPH>Schemes allow you to provide default colors and fonts for your application, while also ensuring that users can easily select other color and font collections according to their individual needs and preferences. Silicon Graphics includes some standard system schemes with the X execution environment, but end users can modify existing schemes or create new ones, and you can create new schemes or extend existing ones for use with your application.<INDEXTARGET ID="03.Schemes4"><!-- POSTPROCESSDATA: 03.Schemes4|schemes:overviewschemes:defaults --></PARAGRAPH>
<PARAGRAPH>This section provides an overview of schemes and explains why you should use schemes in your application.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Why You Should Use Schemes</TITLE><PARAGRAPH>As a developer, it is impossible for you to choose colors and fonts for your application that satisfy all users. Aside from the consideration of individual taste, display characteristics vary and some users have various degrees of colorblindness. Schemes allow users to select colors and fonts according to their preferences and needs.<INDEXTARGET ID="03.Schemes5"><!-- POSTPROCESSDATA: 03.Schemes5|schemes:why useschemes:ease of useschemes:<ITALICS>schemebr</ITALICS> browserbrowser:color schemesschemes:user customizationschemes:customization --></PARAGRAPH>
<PARAGRAPH>Although users can already use the X resource mechanism to customize colors and fonts, it is very difficult and time-consuming for most end users to do so, because the task requires knowledge of the internal structure of the program. On the other hand, if your application supports schemes, users can use the graphical Schemes Browser, <COMMAND>schemebr</COMMAND> (available from the &ldquo;Color Schemes&rdquo; option of the Customize menu in Desktop toolchest), to change colors and fonts.</PARAGRAPH>
<PARAGRAPH>Using schemes also reduces the time and effort required to develop your application. Instead of choosing your own colors and fonts and coding them into your application, you can simply set a resource value to activate schemes and get the distinctive IRIX Interactive Desktop appearance.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Basic Scheme Concepts</TITLE><PARAGRAPH>A scheme simply maps specific colors and fonts to abstract resource names according to the functions they serve in an application. So instead of using specific colors like &ldquo;blue&rdquo; or &ldquo;#123456&rdquo; and specific fonts like &ldquo;-*-screen-medium-r-normal--13-*-*-*-*-*-iso8859-1,&rdquo; your application can use symbolic values like TextForeground, TextSelectedColor, and FixedWidthFont. The exact definition of these symbolic values depends on the scheme the user chooses to apply to your application. As long as your application uses the symbolic color and font names for the purposes for which they were intended, users or graphic designers can design a new palette (a binding of the symbolic values to specific colors) and the result should look good with your application.<INDEXTARGET ID="03.Schemes6"><!-- POSTPROCESSDATA: 03.Schemes6|schemes:basic concepts --></PARAGRAPH>
<PARAGRAPH>Often, you don't even need to deal with the symbolic colors and fonts yourself. The schemes mechanism includes a map file that automatically binds the symbolic values to the various IRIS IM widgets and widget resources. One case where you may need to set a color or font explicitly is if you need to highlight a component (for example, in a chart). The schemes mechanism defines special symbolic values such as HighlightColor1 through HighlightColor8 for these purposes. (See <XREF IDREF="34543" TYPE="TITLE">&ldquo;Directly Accessing Colors and Fonts&rdquo;</XREF> for more information on the symbolic values.) Another case where you need to be aware of the symbolic values is if you need to extend a scheme for your application. (See <XREF IDREF="29661" TYPE="TITLE">&ldquo;Extending a Scheme to Support New Colors&rdquo;</XREF> for more information on extending a scheme.)</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="86764">Using Schemes in Your Application</TITLE><PARAGRAPH>This section describes how to write your application for use with schemes and includes:<INDEXTARGET ID="03.Schemes7"><!-- POSTPROCESSDATA: 03.Schemes7|schemes:programmingapplication programming:schemes --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="89574" TYPE="TITLE">&ldquo;Turning on Schemes for Your Application&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="95704" TYPE="TITLE">&ldquo;Special Considerations for Programming with Schemes&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="68883" TYPE="TITLE">&ldquo;Assigning Non-Default Colors and Fonts to Widgets&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="34543" TYPE="TITLE">&ldquo;Directly Accessing Colors and Fonts&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="89574">Turning on Schemes for Your Application</TITLE><PARAGRAPH>Silicon Graphics incorporates schemes in its implementation of Xt, so you don't need to link to a separate schemes library or call a special function to use schemes. All you need to do to enable schemes is to include in your application's <INDEXTARGET ID="03.Schemes8"><!-- POSTPROCESSDATA: 03.Schemes8|schemes:turn onimplementation:schemesschemes:implementation --><FILENAME>app-defaults</FILENAME> file (in the <FILENAME>/usr/lib/X11/app-defaults</FILENAME> directory) the line:</PARAGRAPH>
<CODE>
<VARIABLE>AppClass</VARIABLE>*useSchemes:     all
</CODE>
<PARAGRAPH>where <VARIABLE>AppClass </VARIABLE>is your application's class name. This activates all aspects of schemes.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>To ensure that users don't accidently override your settings, be sure to prefix the <BOLD>useSchemes</BOLD> resource with your application's class name.</NOTE>
<PARAGRAPH>To deactivate schemes, you can set:</PARAGRAPH>
<EXAMPLE>
<VARIABLE>AppClass</VARIABLE>*useSchemes: none
</EXAMPLE>
<PARAGRAPH>If you wish to activate schemes without using an <FILENAME>app-defaults</FILENAME> file, or if you want to guarantee that the schemes setting can't be changed by users, call the function <FUNCTION>SgiUseScheme()</FUNCTION>:</PARAGRAPH>
<EXAMPLE>
void SgiUseScheme(char *<VARIABLE>value</VARIABLE>)
</EXAMPLE>
<PARAGRAPH><VARIABLE>value</VARIABLE> can be either &ldquo;all&rdquo; or &ldquo;none.&rdquo; This function requires that you include the header file <FILENAME>&lt;X11/SGIScheme.h></FILENAME>.</PARAGRAPH>
<PARAGRAPH>For example:</PARAGRAPH>
<CODE>
/* schemes.c                           */
/* cc -o schemes schemes.c -lXm -lXt    */

#include &lt;Xm/Label.h>
#include &lt;X11/SGIScheme.h>

void main(int argc, char** argv)
{
&space;  Widget toplevel, label;
&space;  XtAppContext app_context;
&space;
&space;  SgiUseSchemes(&ldquo;all&rdquo;); 
&space;
&space;  toplevel = XtAppInitialize(&amp;app_context, &ldquo;Hello&rdquo;, 
&space;                        NULL, 0, &amp;argc, argv, NULL, NULL, 0);

&space;  label = XmCreateLabel(toplevel, &ldquo;hello&rdquo;, NULL, 0);
&space;  XtManageChild(label);

&space;  XtRealizeWidget(toplevel);
&space;  XtAppMainLoop(app_context);
}
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="95704">Special Considerations for Programming with Schemes</TITLE><PARAGRAPH>The schemes map file automatically handles applying colors and fonts to most IRIS IM widgets based on the widgets' class names. Unfortunately, IRIS IM doesn't have unique class names for menu bars, menu panes, and option menus. To allow schemes to be applied to these elements, your application should use some simple naming conventions for these widgets. Name all menu bars &ldquo;menuBar,&rdquo; all option menus &ldquo;optionMenu,&rdquo; and the pane of all option menus &ldquo;optionPane.&rdquo; Schemes also recognize some other variations of these names, including &ldquo;menu_bar,&rdquo; &ldquo;menubar,&rdquo; &ldquo;menu_Bar,&rdquo; and so on. <INDEXTARGET ID="03.Schemes9"><!-- POSTPROCESSDATA: 03.Schemes9|schemes:considerations --></PARAGRAPH>
<PARAGRAPH>If you need to set a color or a font in your application, use the procedures described in <XREF IDREF="68883" TYPE="TITLE">&ldquo;Assigning Non-Default Colors and Fonts to Widgets&rdquo;</XREF> and <XREF IDREF="34543" TYPE="TITLE">&ldquo;Directly Accessing Colors and Fonts&rdquo;</XREF>. Don't hard code colors or fonts in your application because they may not work with the scheme that a user selects. For example, if you programmatically set a text color to black and a user chooses a scheme that has a very dark background, your text is unreadable. Also avoid setting colors that IRIS IM normally computes. For example, if you hard code the top or bottom shadow colors used by IRIS IM controls, these colors may not be correct if a user changes the scheme.</PARAGRAPH>
<PARAGRAPH>There are obviously some cases for which this recommendation doesn't apply. The most common are windows in which you are rendering images. For example, if your application uses OpenGL or some other library to render an image in a window, the colors used in this window aren't derived from schemes.</PARAGRAPH>
<PARAGRAPH>Fonts are usually less critical than colors, although the best visual effects are produced if you use only the fonts defined in the schemes. You should be aware that on high-resolution screens, the sizes of the fonts defined by schemes can change. Therefore, you should design the layout of your application to handle variable-sized fonts. This means you shouldn't hard-code <VARIABLE>x</VARIABLE>, <VARIABLE>y</VARIABLE> locations or fixed widths or heights for widgets in your application. Instead use IRIS IM manager widgets such as the Form to achieve a flexible layout that can respond to changes in font sizes.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="68883">Assigning Non-Default Colors and Fonts to Widgets</TITLE><PARAGRAPH>Sometimes, you may want to override the default color or font assigned to a widget by a scheme. For example, all labels are set by default to use a bold font (BoldLabelFont); however you may decide that a regular font (PlainLabelFont) is more appropriate for some of your application's labels.<INDEXTARGET ID="03.Schemes10"><!-- POSTPROCESSDATA: 03.Schemes10|schemes:non-default colorsschemes:override the default --></PARAGRAPH>
<PARAGRAPH>To assign a non-default font or color to a widget, include a line in your application's <FILENAME>app-defaults</FILENAME> file mapping a different symbolic scheme resource to that widget. For example, the following line assigns a regular label font (rather than the default bold font) to a label in your application named &ldquo;simpleLabel&rdquo;:</PARAGRAPH>
<CODE>
<ITALICS>YourApp</ITALICS>*simpleLabel*fontList: SGI_DYNAMIC PlainLabelFont
</CODE>
<PARAGRAPH>The symbol SGI_DYNAMIC identifies this resource as a dynamically changeable scheme resource. The actual font assigned to PlainLabelFont can potentially be different in each scheme. As the user changes schemes, the correct resource is applied to your program.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Remember to prefix the widget hierarchy with your application's class name to prevent users from accidentally overriding your setting.</NOTE>
<PARAGRAPH>You can use the same technique with colors. For example, suppose you have two types of label widgets positioned on an IRIS IM XmDrawingArea widget and you want to use color to give some significance to different labels. Perhaps the application is some type of a flowchart and some of the labels represent tasks in progress, while other represent tasks that have been completed. The schemes map file already maps the symbolic scheme resource DrawingAreaColor to the XmDrawingArea widget. The scheme palette also provides colors that both provide a nice contrast against the DrawingAreaColor and allow the current TextForeground color to be readable. These colors are DrawingAreaContrast1, DrawingAreaContrast2, DrawingAreaContrast3, and DrawingAreaContrast4. To specify the colors of each label widget in your application, you can set the following resources:</PARAGRAPH>
<CODE>
<ITALICS>YourApp</ITALICS>*label1*background: SGI_DYNAMIC DrawingAreaContrast1
<ITALICS>YourApp</ITALICS>*label2*background: SGI_DYNAMIC DrawingAreaContrast1
<ITALICS>YourApp</ITALICS>*label3*background: SGI_DYNAMIC DrawingAreaContrast2
...
</CODE>
<PARAGRAPH>Each scheme also contains a set of basic colors that you can use for simple graphics, icons, and so on. These colors maintain their basic characteristics, but change slightly from scheme to scheme to blend with the general flavor of the scheme. For example, you can set a label widget to be &ldquo;red&rdquo; as follows:</PARAGRAPH>
<CODE>
<ITALICS>YourApp</ITALICS>*label*background: SGI_DYNAMIC RedColor
</CODE>
<PARAGRAPH>The exact shade of red changes from scheme to scheme, but always is &ldquo;reddish&rdquo; and always fits with the other colors in the scheme.</PARAGRAPH>
<PARAGRAPH>If necessary, you can also use non-scheme colors and fonts, although Silicon Graphics strongly recommends that you don't do this. If you hard-code a color, the user may select a scheme in which that color doesn't provide the contrast you desire. The color can even be &ldquo;lost&rdquo; among the other scheme colors. Non-scheme fonts are less likely to cause problems, but your application will have an inconsistent appearance if it uses them.</PARAGRAPH>
<PARAGRAPH>You use the same methods to assign a non-scheme color or font that you normally would in an X program. For example, you can set a font for a label named &ldquo;simpleLabel&rdquo; in your <FILENAME>app-defaults</FILENAME> file as follows:</PARAGRAPH>
<CODE>
<ITALICS>YourApp</ITALICS>*simpleLabel*fontList: 6x12
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="34543">Directly Accessing Colors and Fonts</TITLE><PARAGRAPH>When your application uses widgets only, the schemes map file automatically retrieves all colors and fonts from the current scheme and assigns them to your application's widgets. However, you may need to access some of the scheme's colors or fonts directly from within a program. For example, you may want to draw a bar chart or other display using colors that look good no matter what scheme the user has selected.<INDEXTARGET ID="03.Schemes11"><!-- POSTPROCESSDATA: 03.Schemes11|schemes:direct access --></PARAGRAPH>
<PARAGRAPH><XREF IDREF="42852" TYPE="TEXT">Example&nbsp;3-1</XREF> shows an example of a function that retrieves a color value given a widget, the color resource name, and the color resource class.</PARAGRAPH>
<CODE><CAPTION LBL="3-1"><PREFIX>Example 3-1 </PREFIX><XREFTARGET ID="42852">Retrieving a Scheme Color Value</CAPTION>Pixel&nbsp;getColorResource(Widget&nbsp;w,&nbsp;char&nbsp;*name,&nbsp;char&nbsp;*classname)
{
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;XtResource&nbsp;request_resources;
&nbsp;&nbsp;&nbsp;&nbsp;Display&nbsp;*dpy&nbsp;&nbsp;=&nbsp;XtDisplay&nbsp;(&nbsp;w&nbsp;);
&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scr&nbsp;&nbsp;=&nbsp;DefaultScreen&nbsp;(&nbsp;dpy&nbsp;);
&nbsp;&nbsp;&nbsp;&nbsp;Colormap&nbsp;cmap&nbsp;=&nbsp;DefaultColormap&nbsp;(&nbsp;dpy,&nbsp;scr&nbsp;);
&nbsp;&nbsp;&nbsp;&nbsp;XColor&nbsp;&nbsp;&nbsp;color,&nbsp;ignore;
&nbsp;&nbsp;&nbsp;&nbsp;char&nbsp;&nbsp;&nbsp;&nbsp;*colorname;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.resource_name&nbsp;&nbsp;&nbsp;=&nbsp;(char&nbsp;*)&nbsp;name;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.resource_class&nbsp;&nbsp;=&nbsp;(char&nbsp;*)&nbsp;className;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.resource_type&nbsp;&nbsp;&nbsp;=&nbsp;XmRString;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.resource_size&nbsp;&nbsp;&nbsp;=&nbsp;sizeof&nbsp;(char&nbsp;*);
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.default_type&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;XmRImmediate;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.resource_offset&nbsp;=&nbsp;0;
&nbsp;&nbsp;&nbsp;&nbsp;request_resources.default_addr&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;(XtPointer)&nbsp;NULL;
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;XtGetSubresources(w,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(XtPointer)&nbsp;&amp;colorname,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,&nbsp;NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;requested_resources,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1,&nbsp;NULL,&nbsp;0);
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(&nbsp;colorname&nbsp;&amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XAllocNamedColor&nbsp;(&nbsp;dpy,&nbsp;cmap,&nbsp;colorname,&nbsp;&amp;color,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ignore&nbsp;)&nbsp;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(&nbsp;color.pixel&nbsp;);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(&nbsp;BlackPixel&nbsp;(&nbsp;dpy,&nbsp;scr&nbsp;)&nbsp;);
}
</CODE>
<PARAGRAPH>You can then retrieve the color defined by the scheme resource <BOLD>drawingAreaContrastColor1</BOLD> using <FUNCTION>getColorResource()</FUNCTION> as follows:</PARAGRAPH>
<CODE>
color1 = getColorResource(barChartWidget,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"drawingAreaContrastColor1",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmCForeground);
</CODE>
<PARAGRAPH>where <VARIABLE>barChartWidget</VARIABLE> is the widget that you'll use the color in.</PARAGRAPH>
<TIP><PREFIX>Tip</PREFIX>There is a simple method for retrieving a resource value if you're using the IRIS ViewKit toolkit. Instead of writing the <INDEXTARGET ID="03.Schemes12"><!-- POSTPROCESSDATA: 03.Schemes12|ViewKit:retrieve resource --><FUNCTION>getColorResource()</FUNCTION> function listed in Example&nbsp;3-1, you can call:</TIP>
<CODE>
Pixel color1 = (Pixel) VkGetResource( barChartWidget,
&space;                           "drawingAreaContrastColor1",
&space;                            XmCForeground, XmRPixel, 
&space;                           "Black" ); 
</CODE>
<PARAGRAPH>You must handle some resources programmatically. For example, the <DOCTITLE>IRIX Interactive User Interface Guidelines</DOCTITLE> suggests that your application use a different color for text fields that are not editable than it uses for editable text fields. The IRIS IM text widget currently does not change colors automatically when set to read only mode, so your application must handle this itself. The correct color is provided by schemes as the symbolic name ReadOnlyBackground, and can be retrieved by the resource <BOLD>readOnlyBackground</BOLD>. Assuming that you've created the <FUNCTION>getColorResource()</FUNCTION> function listed in Example&nbsp;3-1, the following code illustrates this process:</PARAGRAPH>
<CODE>
ro = getColorResource(&nbsp;textw,&nbsp;&nbsp;"readOnlyBackground",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmCForeground);
XtVaSetValues(&nbsp;textw, XmNeditable, FALSE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmNbackgroundColor, ro,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);
</CODE>
<TIP><PREFIX>Tip</PREFIX>The equivalent IRIS ViewKit code would be:</TIP>
<CODE>
Pixel ro = (Pixel) VkGetResource( textw, "readOnlyBackground",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmCForeground, XmRPixel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"White" );
XtVaSetValues(&nbsp;textw, XmNeditable, FALSE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XmNbackgroundColor, ro,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Pre-Defined Scheme Resources and Symbolic Values</TITLE><PARAGRAPH><XREF IDREF="43885" TYPE="TABLE">Table&nbsp;3-1</XREF> lists the pre-defined scheme resources and symbolic values. You can use the resources to retrieve color and font values from within your application as described in <INDEXTARGET ID="03.Schemes13"><!-- POSTPROCESSDATA: 03.Schemes13|schemes:pre-defined resourcesschemes:symbolic valuessymbolic values:schemesresources:schemes --><XREF IDREF="34543" TYPE="TITLE">&ldquo;Directly Accessing Colors and Fonts&rdquo;</XREF>. You can use the symbolic values to assign colors and fonts to widgets in resource files as explained in <XREF IDREF="68883" TYPE="TITLE">&ldquo;Assigning Non-Default Colors and Fonts to Widgets&rdquo;</XREF>.</PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="3-1"><PREFIX>Table 3-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="43885">Pre-Defined Scheme Resources and Symbolic Values</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Resource</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>Symbolic Value</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Intended Use</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>basicBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>BasicBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of application</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>textForeground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TextForeground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Color of text characters</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>textBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TextBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of multi-line text 
widgets</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>textFieldBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TextFieldBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of single-line text 
field widgets</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>readOnlyBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ReadOnlyBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of read-only text 
and text field widgets</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>textSelectedBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TextSelectedBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background when text is 
selected with the mouse</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>textSelectedForeground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TextSelectedForeground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Color of text characters when 
text is selected with the mouse</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>disabledTextForeground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DisabledTextForeground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>For future use, this color will 
indicate disabled text instead of 
stippling.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>scrolledListBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ScrolledListBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of scrolled list 
widgets</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>scrollBarTroughColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ScrollBarTroughColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Trough of scrollbar </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>scrollBarControlBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ScrollBarControlBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Scrollbar controls (thumb, 
searchbutton)</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>buttonBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ButtonBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of push buttons</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>selectFillColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SelectFillColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Fill color for standard IRIS IM 
radio and toggle buttons</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>selectColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SelectFillColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>IRIS IM toggle and check fill 
color</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>checkColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>CheckColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>IRIX Interactive Desktop toggle 
check mark color</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>radioColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>RadioColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>IRIX Interactive Desktop radio 
pip color</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>indicatorBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>IndicatorBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>IRIX Interactive Desktop 
background color for toggles 
and radios</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>warningColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>WarningColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background color for icons in 
warning dialogs</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>errorColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ErrorColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background color for icons in 
error dialogs</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>informationColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>InformationColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background color for icons in 
information dialogs</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>wMBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>WMBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Window manager colors. Note 
that <COMMAND>4Dwm</COMMAND> currently doesn't 
pick up foreground. &ldquo;Active&rdquo; 
colors are used for window 
manager borders with mouse 
focus.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>wMActiveBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>WMActiveBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>wMForeground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>WMForeground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>wMActiveForeground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>WMActiveForeground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground1</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground1</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Can be used as background 
color for widgets or text areas. 
Guaranteed to be different from 
one another, contrast with basic 
background and text 
background, and can have text 
drawn on them.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground2</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground2</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground3</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground3</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground4</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground4</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground5</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground5</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>alternateBackground6</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>AlternateBackground6</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>drawingAreaBackground</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DrawingAreaBackground</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Background of drawing area 
widgets (typically used for 
graphs)</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>drawingAreaContrastColor1</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DrawingAreaContrastColor1</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Contrast colors for drawing 
areas (typically used for graphs 
and trees). These colors are 
guaranteed to be different from 
one another, different from the 
drawing area background, and 
can have text drawn on them</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>drawingAreaContrastColor2</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DrawingAreaContrastColor2</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>drawingAreaContrastColor3</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DrawingAreaContrastColor3</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>drawingAreaContrastColor4</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>DrawingAreaContrastColor4</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor1</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor1</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Bright highlights suitable for 
small color spots. The first four 
are supposed to be in the same 
hue family as the corresponding 
DrawingAreaContrast colors so 
that the pair may be used for 
doing highlights in an annotated 
scrollbar.</PARAGRAPH>
<PARAGRAPH>These colors are typically used 
for outlining and drawing 
graphs, wherever a small 
amount of color needs to be 
highly visible.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor2</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor2</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor3</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor3</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor4</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor4</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor5</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor5</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor6</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor6</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor7</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor7</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>highlightColor8</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>HighlightColor8</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>redColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>RedColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Colors that can be used for 
various graphics purposes. 
These colors always 
approximate their names, but 
may be slightly adjusted to 
blend with each scheme. 
Typically used in graphs and 
charts.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>orangeColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>OrangeColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>yellowColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>YellowColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>greenColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>GreenColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>blueColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>BlueColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>brownColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>BrownColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH><BOLD>purpleColor</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>PurpleColor</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>boldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>BoldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Bold labels, such as column 
headings</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>smallBoldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SmallBoldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Labels for tight packing 
situations</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>tinyBoldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>TinyBoldLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Labels where space is at a 
premium</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>plainLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>PlainLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Button labels, also can be used 
for values in &ldquo;Name: Value&rdquo; 
pairs</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>smallPlainLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SmallPlainLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Small buttons</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>obliqueLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>ObliqueLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Menus</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>smallObliqueLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SmallObliqueLabelFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Small menus</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>fixedWidthFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>FixedWidthFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Text areas where fixed width is 
mandatory, for example where 
it's important that columns line 
up</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>smallFixedWidthFont</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="126"><PARAGRAPH>SmallFixedWidthFont</PARAGRAPH>
</CELL>
<CELL LEFT="270" WIDTH="135"><PARAGRAPH>Text where a fixed-width font is 
appropriate but space is at a 
premium</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="29661"><XREFTARGET ID="83109">Extending a Scheme to Support New Colors</TITLE><PARAGRAPH>Silicon Graphics strongly recommends that you use existing scheme colors for your application. Using the existing scheme colors ensures that your application will work with all schemes. However, you may need to add colors in some basic cases.This section explains how to extend Schemes to support new colors when necessary.</PARAGRAPH>
<PARAGRAPH>To extend a scheme, you create new symbolic values for the resources you need and then define bindings between these values and resources that your application can retrieve. This section describes the internal organization of scheme files and then describes how to define these symbolic values and mappings.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Scheme File Organization</TITLE><PARAGRAPH>All system scheme files are kept in the directory <FILENAME>/usr/lib/X11/schemes</FILENAME> by default. This directory contains several subdirectories, one for each scheme. The directory <FILENAME>Base</FILENAME> serves as the basis of all schemes, although it is not a user-identifiable scheme itself. <FILENAME>Base </FILENAME>contains at least three files: <FILENAME>Base</FILENAME>, <FILENAME>BaseColorPalette</FILENAME>, and <FILENAME>FontPalette</FILENAME>. You may see other files as well. </PARAGRAPH>
<PARAGRAPH>Each of the palette files (<FILENAME>BaseColorPalette</FILENAME> and <FILENAME>FontPalette</FILENAME>) contain <COMMAND>cpp</COMMAND>-style definitions of symbolic names that represent colors and fonts. The <FILENAME>Base</FILENAME> file (referred to as a &ldquo;map&rdquo; file) contains the default mappings between these symbolic names and specific resources, using the same format as all X resource files. </PARAGRAPH>
<PARAGRAPH>For example, the <FILENAME>Base</FILENAME> file contains a line like:</PARAGRAPH>
<EXAMPLE>
*XmText*foreground: TextForeground
</EXAMPLE>
<PARAGRAPH>This says that all Text widgets should use the color represented by TextForeground as their foreground color. By default, all schemes share the mappings specified in this <FILENAME>Base</FILENAME> file. However, the value assigned to each symbolic name can vary from scheme to scheme. For example the Mendocino scheme defines TextForeground to be #fffffe (white) whereas the Milan scheme defines TextForeground to be #000000 (black). The scheme mechanism evaluates these specifications at run time, based on the scheme specified by the user.</PARAGRAPH>
<PARAGRAPH>By default, all applications pick up the definitions in the <FILENAME>Base</FILENAME> file and the palette files from the selected scheme. However, applications can load additional scheme files as well. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>How to Extend a Scheme</TITLE><PARAGRAPH>There are two methods for extending a scheme. The first is to add additional mappings between existing colors and widgets in your application. This may be necessary if you want to bind colors of fonts to your widgets in a different way, or if you are using custom widgets that are not handled by the basic scheme mappings. You should do this by adding resources to your application's <FILENAME>app-defaults</FILENAME> file, using the SGI_DYNAMIC mechanism described earlier. </PARAGRAPH>
<PARAGRAPH>The second situation occurs when you would like to use colors or fonts that aren't provided as a part of the existing schemes. Your should try to avoid this situation when at all possible, because users can use the scheme editor to create new schemes, and there is no current mechanism for using the scheme editor to adjust any additional colors your application may define. The standard scheme palettes contain over 40 colors, which should be enough for most situations.</PARAGRAPH>
<PARAGRAPH>To add new colors to the existing schemes, you need to create a new palette file that contains <COMMAND>cpp</COMMAND>-style definitions of those colors. To get your application to load this new palette, you then need to set a resource, <BOLD>paletteFileList</BOLD>, in your application's <FILENAME>app-defaults</FILENAME> files that specifies as a comma-separated list all custom palette files to be loaded.</PARAGRAPH>
<PARAGRAPH>For example, assume you have an application whose class name is Calendar and that you need two colors that you refer to in your program symbolically as <BOLD>brightColor</BOLD> and <BOLD>darkColor</BOLD>. If no color in the exiting schemes satisfies your requirements for this color, you'll need to extend a scheme. Here are the steps you'd follow:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Define the colors in a palette file. By convention, you should name this file <FILENAME>&lt;AppClass>Palette</FILENAME>, where <FILENAME>&lt;AppClass></FILENAME> is the application class of your application. In this case, you would name the palette <FILENAME>CalendarPalette</FILENAME>. It would contain the lines:</PARAGRAPH>
<EXAMPLE>
#define BrightColor red
#define DarkColor MidnightBlue
</EXAMPLE>
<PARAGRAPH>You can use any color names available on your target systems, as well as RGB specifications. If the resources you are using are dependent on the gamma setting, you should account for this in the palette file. You can handle the commonly used gamma settings like this:</PARAGRAPH>
<CODE>
#ifdef GAMMA_1_0
#define BrightColor &lt;color that looks right on 1.0 gamma>
#define DarkColor &lt;color that looks right on 1.0 gamma>
#endif
#ifdef GAMMA_1_7
#define BrightColor &lt;color that looks right on 1.7 gamma>
#define DarkColor &lt;color that looks right on 1.7 gamma>
#endif
#ifdef GAMMA_2_4
#define BrightColor &lt;color that looks right on 2.4 gamma>
#define DarkColor &lt;color that looks right on 2.4 gamma>
#endif

</CODE>
<PARAGRAPH>The scheme mechanism handles gamma other than those listed here by finding the closest match.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Create additional palette files as needed. If your new resources need to change values when a scheme changes, create a file named <FILENAME>CalendarPalette</FILENAME> for each scheme you want to support. For each scheme, choose the colors that look right for that scheme. Note that if you do not support all existing schemes, the values of your new scheme resources defaults to the values in Base, so your application may not look right when a user selects that scheme.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Set your application's <BOLD>paletteFileList</BOLD> resource to load the new palettes. In this example, you would add the following line to your <FILENAME>app-defaults</FILENAME> file:</PARAGRAPH>
<EXAMPLE>
Calendar*schemeFilePaletteList: CalendarPalette
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>When you install your software on a user's machine, you need to install the executable, the <FILENAME>app-defaults</FILENAME> file, and any other files specific to your application. You must also install your palette files into the directory of each scheme you support. You should, at a minimum, support the schemes found in <FILENAME>/usr/lib/X11/schemes</FILENAME>. You may also want to support schemes you find installed in <FILENAME>/usr/local/schemes</FILENAME>.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Testing Your Application with Schemes</TITLE><PARAGRAPH>For best results, be sure to test your application against all available schemes, and watch for any anomalies. As an added precaution, you can try using the Scheme Browser, <INDEXTARGET ID="03.Schemes14"><!-- POSTPROCESSDATA: 03.Schemes14|schemes:application testingtesting:application with schemesapplication testing:with schemesschemes:browserschemes:<ITALICS>schemebr</ITALICS> browser --><COMMAND>schemebr</COMMAND> (available from the &ldquo;Color Schemes&rdquo; option of the Customize menu in Desktop toolchest), to create some variations on existing schemes and see how your program reacts. If you have not added any resources and are not setting any colors or fonts in your program or <FILENAME>app-defaults</FILENAME> files, any scheme should be reasonable. If you have extended the schemes or set colors directly in your application, you should watch carefully to see how your application reacts as colors change. It is always possible to use the scheme editor to create a very bad scheme, but if your program seems more sensitive than others to changes, you should think more carefully about your use of color. </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="64336">Creating New Schemes</TITLE><PARAGRAPH>You can also include your own new schemes in your software distribution; however, be aware of the following concerns: <INDEXTARGET ID="03.Schemes15"><!-- POSTPROCESSDATA: 03.Schemes15|schemes:newschemes:designing newschemes:Color Schemes optionschemes:creating new --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The largest benefit of schemes is the users' ability to change to schemes of their choice, so even if you create a scheme that you prefer for your application, make sure your program looks good with the existing schemes. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>If you install your scheme on a user's system, the user may apply that scheme to other applications. If you attempt to design a new scheme, make sure the scheme works reasonably with other applications on the desktop.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The easiest way to design a new scheme is to use the Scheme Browser, <COMMAND>schemebr</COMMAND>, available from the &ldquo;Color Schemes&rdquo; option of the Customize menu in Desktop toolchest. For best results, you should base your scheme on an existing scheme, preferably one of the standard ones supported by Silicon Graphics. If you make only minor changes, your new scheme should work with other programs. Once you have created and saved your new scheme, you can retrieve the files from your <FILENAME>$HOME/.desktop-&lt;hostname>/schemes</FILENAME> directory, where <VARIABLE>&lt;hostname></VARIABLE> is the name of your system. You can install your scheme in <FILENAME>/usr/local/schemes/&lt;SchemeName></FILENAME>, where <VARIABLE>&lt;SchemeName></VARIABLE> is the name you have chosen for your scheme. Once installed, this scheme appears in the Scheme Browser as a local scheme. You can also include this scheme with your software distribution.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="92475">Hard-Coding a Scheme for an Application</TITLE><PARAGRAPH>In some rare situations, you may want your application to use one particular scheme, not the one that the user selects. Silicon Graphics strongly recommends that you not use this approach, but if your application has special needs, the process is simple to do. Specify the value of the <BOLD>scheme</BOLD> resource in your application's <FILENAME>app-defaults</FILENAME> file using a complete path name. For example:</PARAGRAPH>
<EXAMPLE>
<ITALICS>YourApp</ITALICS>*scheme: /usr/lib/X11/schemes/Milan 
</EXAMPLE>
<PARAGRAPH>When using this approach, the location of the scheme directory is unimportant. For example, if you've designed a custom scheme for your application, you can place the scheme directory in special configuration directory for your application. For example:</PARAGRAPH>
<EXAMPLE>
<ITALICS>YourApp</ITALICS>*scheme: /usr/lib/YourApp.config/YourAppScheme
</EXAMPLE>
<PARAGRAPH>This setting implies that <FILENAME>/usr/lib/YourApp.config/YourAppScheme</FILENAME> is a scheme directory. This means that the directory <FILENAME>YourAppScheme</FILENAME> would need to contain the files <FILENAME>BaseColorPalette</FILENAME> (containing the color palette you have defined), a file whose name is the same as the scheme that contains mappings, and a file named <FILENAME>FontPalette</FILENAME>. Normally, the <FILENAME>FontPalette</FILENAME> file would be a copy of the file in <FILENAME>/usr/lib/X11/schemes/Base</FILENAME>, and the map file would be the same as <FILENAME>/usr/lib/X11/schemes/Base/Base</FILENAME>, but renamed to have the same name as your scheme.</PARAGRAPH>
</SECTION1>
</CHAPTER>
