<!-- Produced by version 3.12 (09/13/95) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="45688">Dumping and Restoring XFS Filesystems</TITLE><PARAGRAPH>This chapter describes how the <INDEXTARGET ID="ch31"><!-- POSTPROCESSDATA: ch31|backup and restore:using <ITALICS>xfsdump</ITALICS> and <ITALICS>xfsrestore</ITALICS> --><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> utilities work and how to use them to back up and recover data on XFS filesystems. (The <COMMAND>xfsdump</COMMAND>(1M) and <COMMAND>xfsrestore</COMMAND>(1M) reference pages provide online information on these utilities.) A short section at the end of this chapter, &ldquo;Other Backup Utilities,&rdquo; discusses XFS-related issues of other utilities that can be used to perform backups. </PARAGRAPH>
<PARAGRAPH>This chapter contains the following sections:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>About the <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> Utilities</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Using <COMMAND>xfsdump</COMMAND></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Using <COMMAND>xfsrestore</COMMAND></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Dump and Restore with STDIN/STOUT</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Other Backup Utilities and XFS</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH><INDEXTARGET ID="ch32"><!-- POSTPROCESSDATA: ch32|<ITALICS>dump</ITALICS> utility:vs. <ITALICS>xfsdump</ITALICS> --><INDEXTARGET ID="ch33"><!-- POSTPROCESSDATA: ch33|<ITALICS>restore</ITALICS> utility:vs. <ITALICS>xfsrestore</ITALICS> --><XREF IDREF="98007" TYPE="TABLE">Table&nbsp;3-1</XREF> and <XREF IDREF="17753" TYPE="TABLE">Table&nbsp;3-2</XREF> summarize when to use <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> and when their EFS counterparts, <COMMAND>dump</COMMAND>(1M) and <COMMAND>restore</COMMAND>(1M), must be used</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="3-1"><PREFIX>Table 3-1 </PREFIX><XREFTARGET ID="98007">Filesystems and Dump Utilities</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="111"><PARAGRAPH>For a Filesystem of Type</PARAGRAPH>
</CELL>
<CELL LEFT="120" WIDTH="111"><PARAGRAPH>Dump It Using</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="111"><PARAGRAPH>EFS</PARAGRAPH>
</CELL>
<CELL LEFT="120" WIDTH="111"><PARAGRAPH><COMMAND>dump</COMMAND>&space;</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="111"><PARAGRAPH>XFS</PARAGRAPH>
</CELL>
<CELL LEFT="120" WIDTH="111"><PARAGRAPH><COMMAND>xfsdump</COMMAND>&space;</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<TABLE COLUMNS="3"><CAPTION LBL="3-2"><PREFIX>Table 3-2 </PREFIX><XREFTARGET ID="17753">Filesystems and Restore Utilities</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="110"><PARAGRAPH>For a Dump Made Using</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Restore It Using</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>On a Filesystem of Type</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH><COMMAND>dump</COMMAND>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH><COMMAND>restore</COMMAND>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>EFS or XFS</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH><COMMAND>xfsdump</COMMAND>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH><COMMAND>xfsrestore</COMMAND>&space;</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>EFS or XFS</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Note than you can restore data in either EFS or XFS filesystems, but must use the restore utility that corresponds with the dump utility used to make the backup. The <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> utilities are only available with the XFS filesystem.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE>About the <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> Utilities</TITLE><PARAGRAPH>This section provides an overview of the features of the <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> utilities and describes the data format on storage media that supports this functionality.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Features of <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND></TITLE><PARAGRAPH>This section summarizes the features of <INDEXTARGET ID="ch34"><!-- POSTPROCESSDATA: ch34|<ITALICS>xfsdump</ITALICS> utility: features --><INDEXTARGET ID="ch35"><!-- POSTPROCESSDATA: ch35|<ITALICS>xfsrestore</ITALICS> utility:features --><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND>. Flexibility of operation, integration with system software, ease of use, and record keeping abilities are discussed.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Flexibility</TITLE><BULLETLIST><BULLET><PARAGRAPH>With <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND>, you can back up and restore data using local or remote drives. Multiple dumps can be placed on a single media object.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> support incremental dumps. Also, you can back up filesystems, directories, and/or individual files, and then restore filesystems, directories, and files independent of how they were backed up.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>With <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND>, you can recover from intentional or accidental interruptions.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>With <COMMAND>xfsrestore</COMMAND>, you can restore <COMMAND>xfsdump</COMMAND> data onto EFS filesystems. <COMMAND>(xfsdump</COMMAND> backs up mounted XFS filesystems only.)</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Integration</TITLE><BULLETLIST><BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> support XFS features including 64-bit inode numbers, file lengths, holes, and user-selectable extent sizes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> support multiple media types, all IRIX-supported file types (regular, directory, symbolic link, block and character special, FIFO, and socket), and retain hard links.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> does not affect the state of the filesystem being dumped (for example, access times are retained), and <COMMAND>xfsrestore</COMMAND> restores files as close to the original as possible.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsrestore</COMMAND> detects and bypasses media errors and recovers rapidly after encountering them.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> does not cross mount points, local or remote.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>User Interface</TITLE><BULLETLIST><BULLET><PARAGRAPH><COMMAND>xfsdump</COMMAND> optionally prompts for additional media when the end of the current media is reached. Operator estimates of media capacity are not required. <COMMAND>xfsdump</COMMAND> also supports automated backups.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsdump </COMMAND>maintains an extensive online inventory of all dumps performed. Inventory contents can be viewed through various filters to quickly locate specific dump information.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>xfsrestore</COMMAND> supports interactive operation, allowing selection of individual files or directories for recovery. It also permits selection from among backups performed at different times when multiple dumps are available. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Dump contents may also be viewed noninteractively.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Media Layout</TITLE><PARAGRAPH>The following section introduces some terminology and then describes the way <INDEXTARGET ID="ch36"><!-- POSTPROCESSDATA: ch36|<ITALICS>xfsdump</ITALICS> utility:media layout --><INDEXTARGET ID="ch37"><!-- POSTPROCESSDATA: ch37|media layout, <ITALICS>xfsdump</ITALICS> utility --><COMMAND>xfsdump</COMMAND> formats data on the storage media for use by <COMMAND>xfsrestore</COMMAND>.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Terminology</TITLE><PARAGRAPH>This section introduces terminology used in the rest of this chapter.</PARAGRAPH>
<PARAGRAPH>While <INDEXTARGET ID="ch38"><!-- POSTPROCESSDATA: ch38|media object, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch39"><!-- POSTPROCESSDATA: ch39|dump session, <ITALICS>xfsdump</ITALICS> utility --><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> are often used with tape media, the utilities actually support multiple kinds of media, so in the following discussions, the term <ITALICS>media object</ITALICS> is used to refer to the media in a generic fashion. The term <ITALICS>dump</ITALICS> refers to the result of a single use of the <COMMAND>xfsdump</COMMAND> command to output data files to the selected media object(s). An instance of the use of <COMMAND>xfsdump</COMMAND> is referred to as a <ITALICS>dump session</ITALICS>.</PARAGRAPH>
<PARAGRAPH>The dump session sends a single <INDEXTARGET ID="ch310"><!-- POSTPROCESSDATA: ch310|dump stream, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch311"><!-- POSTPROCESSDATA: ch311|data segments, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch312"><!-- POSTPROCESSDATA: ch312|dump inventory, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch313"><!-- POSTPROCESSDATA: ch313|inventory, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch314"><!-- POSTPROCESSDATA: ch314|stream terminator, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch315"><!-- POSTPROCESSDATA: ch315|terminator, <ITALICS>xfsdump</ITALICS> utility --><ITALICS>dump stream</ITALICS> to the media object(s). The dump stream may contain as little as a single file or as much as an entire filesystem. The dump stream is composed of <ITALICS>dump objects</ITALICS>, which are: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>one or more <ITALICS>data segments</ITALICS></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>an optional <ITALICS>dump inventory</ITALICS></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>a<ITALICS>&space;stream terminator</ITALICS>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The data segment(s) contains the actual data, the dump inventory contains a list of the dump objects in the dump, and the stream terminator marks the end of the dump stream. When a dump stream is composed of multiple dump objects, each object is contained in a <ITALICS>media file</ITALICS>. Some output devices, for example standard output, do not support the concept of media files&mdash;the dump stream is only the data.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Possible Dump Layouts</TITLE><PARAGRAPH>The simplest dump, for example the dump of a small amount of data to a single tape, produces a data segment and a stream terminator as the only dump objects. If the optional inventory object is added, you have a dump such as that illustrated in <XREF IDREF="77113" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>. (In the data layout diagrams in this section, the optional inventory object is always included.)</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="Fig3-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-1"><PREFIX>Figure 3-1 </PREFIX><XREFTARGET ID="77113">Single Dump on Single Media Object</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>You can also dump data streams that are larger than a single media object. The data stream can be broken between any two media files including data segment boundaries. (The inventory is never broken into segments.) The <COMMAND>xfsdump</COMMAND> utility prompts for a new media object when the end of the current media object is reached. <XREF IDREF="76727" TYPE="GRAPHIC">Figure&nbsp;3-2</XREF> illustrates the data layout of a single dump session that requires two media objects.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="Fig3-2.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-2"><PREFIX>Figure 3-2 </PREFIX><XREFTARGET ID="76727">Single Dump on Multiple Media Objects</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The <COMMAND>xfsdump</COMMAND> utility also accommodates multiple dumps on a single media object. When dumping to tape, for example, the tape is automatically advanced past the existing dump session(s) and the existing stream terminator is erased. The new dump data is then written, followed by the new stream terminator<FTNOTE>	For drives that do not permit termination to operate in this way, other means are used to achieve the same effective result.</FTNOTE>
. <XREF IDREF="88987" TYPE="GRAPHIC">Figure&nbsp;3-3</XREF> illustrates the layout of media files for two dumps on a single media object.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="Fig3-3.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-3"><PREFIX>Figure 3-3 </PREFIX><XREFTARGET ID="88987">Multiple Dumps on Single Media Object</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH><XREF IDREF="41284" TYPE="GRAPHIC">Figure&nbsp;3-4</XREF> illustrates a case in which multiple dumps use multiple media objects. If media files already exist on the additional media object(s), the <COMMAND>xfsdump</COMMAND> utility finds the existing stream terminator, erases it, and begins writing the new dump data stream.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="Fig3-4.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-4"><PREFIX>Figure 3-4 </PREFIX><XREFTARGET ID="41284">Multiple Dumps on Multiple Media Objects</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Using <COMMAND>xfsdump</COMMAND></TITLE><PARAGRAPH>This section discusses how to use the <INDEXTARGET ID="ch316"><!-- POSTPROCESSDATA: ch316|<ITALICS>xfsdump</ITALICS> utility:using --><COMMAND>xfsdump</COMMAND> command to backup data to local and remote devices. You can get a summary of <COMMAND>xfsdump</COMMAND> syntax with the<USERINPUT>&space;&ndash;h</USERINPUT> option:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -h</USERINPUT>
xfsdump: version <VARIABLE>X.X</VARIABLE>
xfsdump: usage: xfsdump [ -f &lt;destination> ]
&space;                       [ -h (help) ]
&space;                       [ -l &lt;level> ]
&space;                       [ -s &lt;subtree> ... ]
&space;                       [ -v &lt;verbosity {silent, verbose, trace}> ]
&space;                       [ -F (don't prompt) ]
&space;                       [ -I (display dump inventory) ]
&space;                       [ -J (inhibit inventory update) ]
&space;                       [ -L &lt;session label> ]
&space;                       [ -M &lt;media label> ]
&space;                       [ -R (resume) ]
&space;                       [ - (stdout) ]
&space;                       &lt;source (mntpnt|device)>
</CODE>
<PARAGRAPH>You must be the superuser to use <COMMAND>xfsdump</COMMAND>. Refer to the<COMMAND>&space;xfsdump</COMMAND>(1M) reference page for details.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Specifying Media</TITLE><PARAGRAPH>You can use <INDEXTARGET ID="ch317"><!-- POSTPROCESSDATA: ch317|<ITALICS>xfsdump</ITALICS> utility:specifying media --><COMMAND>xfsdump</COMMAND> to back up data to various media. For example, you can dump data to a tape or hard disk. The drive containing the media object may be connected to the local system or accessible over the network.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Backing Up to a Local Tape Drive</TITLE><PARAGRAPH>Following is an example of a level 0 dump to a local tape drive. Note that dump level does not need to be specified for a level 0 dump. (Refer to <XREF IDREF="66444" TYPE="TITLE">&ldquo;Incremental and Resumed Dumps&rdquo;</XREF> for a discussion of dump levels.)</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -L testers_11_21_94 -M test_1 /usr</USERINPUT>
xfsdump: version 1.0 - type ^C for status and control
xfsdump: level 0 dump of magnolia.wpd.sgi.com:/usr
xfsdump: dump date: Thu Dec 15 10:15:56 1994
xfsdump: session id: d23b2d9e-b21d-1001-887f-080069068eeb
xfsdump: session label: "testers_11_21_94"
xfsdump: preparing tape drive
xfsdump: no previous dumps on tape
xfsdump: ino map phase 1: skipping (no subtrees specified)
xfsdump: ino map phase 2: constructing initial dump list
xfsdump: ino map phase 3: skipping (no pruning necessary)
xfsdump: ino map phase 4: estimating dump size
xfsdump: ino map phase 5: skipping (only one dump stream)
xfsdump: ino map construction complete
xfsdump: beginning media file
xfsdump: media file 0 (media 0, file 0)
xfsdump: dumping ino map
xfsdump: dumping directories
xfsdump: dumping non-directory files
xfsdump: ending media file
xfsdump: media file size 16871936 bytes
xfsdump: dumping session inventory
xfsdump: beginning inventory media file
xfsdump: media file 1 (media 0, file 1)
xfsdump: ending inventory media file
xfsdump: inventory media file size 2102812 bytes
xfsdump: dump complete: 207 seconds elapsed
</CODE>
<PARAGRAPH>In this case, a session label (<USERINPUT>&ndash;L</USERINPUT> option) and a media label (<USERINPUT>&ndash;M</USERINPUT> option) are supplied, and the entire filesystem is dumped. Since no verbosity option is supplied, the default of <COMMAND>verbose</COMMAND> is used, resulting in the detailed screen output. The dump inventory is updated with the record of this backup because the <USERINPUT>-J</USERINPUT> option is not specified.</PARAGRAPH>
<PARAGRAPH>Following is an example of a backup of a subdirectory of a filesystem. In this example, the verbosity is set to <COMMAND>silent</COMMAND>, and the dump inventory is not updated (<USERINPUT>&ndash;J</USERINPUT> option):</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -v silent -J -s people/fred /usr</USERINPUT>
</CODE>
<PARAGRAPH>Note that the subdirectory backed up (<FILENAME>/usr/people/fred</FILENAME>) was specified relative to the filesystem, so the specification did not include the name of the filesystem (in this case, <FILENAME>/usr</FILENAME>). Since <FILENAME>/usr</FILENAME> may be a very large filesystem and the<USERINPUT>&space;-v silent</USERINPUT> option was used, this could take a long time during which there would be no screen output.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Backing Up to a Remote Tape Drive</TITLE><PARAGRAPH>To back up data to a remote tape drive, use the standard remote system syntax, specifying the system (by hostname if supported by a nameserver or IP address if not) followed by a colon (:), then the pathname of the special file. </PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>For remote backups, use the variable block size tape device if the device supports variable block size operation, otherwise use the fixed block size device (see <COMMAND>intro</COMMAND>(7)).</NOTE>
<PARAGRAPH>The following example shows a subtree backup with no inventory to a remote tape device:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f theduke:/dev/rmt/tps0d2v -J -s people/fred /usr</USERINPUT>
xfsdump: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsdump: dump date: Mon Nov 21 13:56:01 1994
xfsdump: level 0 dump
xfsdump: preparing tape drive
xfsdump: end of data found
xfsdump: ino map phase 1: parsing subtree selections
xfsdump: ino map phase 2: constructing initial dump list
xfsdump: ino map phase 3: pruning unneeded subtrees
xfsdump: ino map phase 4: estimating dump size
xfsdump: ino map phase 5: skipping (only one dump stream)
xfsdump: ino map construction complete
xfsdump: beginning media file
xfsdump: dumping ino map
xfsdump: dumping directories
xfsdump: dumping non-dir files
xfsdump: ending media file
xfsdump: media file size 15190208 bytes
</CODE>
<PARAGRAPH>In this case, <FILENAME>/usr/people/fred</FILENAME> is backed up to the variable block size tape device on the remote system <ITALICS>theduke</ITALICS>.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The superuser account on the local system must be able to <COMMAND>rsh</COMMAND> to the remote system without a password. For more information, see <COMMAND>hosts.equiv</COMMAND>(4).</NOTE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Backing Up to a File</TITLE><PARAGRAPH>You can back up data to a file instead of a device. In the following example, a file (<FILENAME>Makefile</FILENAME>) and a directory (<FILENAME>Source</FILENAME>) are backed up to a dump file (<FILENAME>monday_backup</FILENAME>) in <FILENAME>/usr/tmp</FILENAME> on the local system:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /usr/tmp/monday_backup -v silent -J -s \</USERINPUT>
<USERINPUT>people/fred/Makefile -s people/fred/Source /usr</USERINPUT>
</CODE>
<PARAGRAPH>You may also dump to a file on a remote system, but note that the file must be in the remote system's <FILENAME>/dev</FILENAME> directory. For example, the following command backs up the <FILENAME>/usr/people/fred</FILENAME> subdirectory on the local system to the regular file<FILENAME>&space;/dev/fred_mon_12-2</FILENAME> on the remote system theduke:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f theduke:/dev/fred_mon_12-2 -s people/fred /usr</USERINPUT>
</CODE>
<PARAGRAPH>Alternatively, you could dump to any remote file if that file is on an NFS-mounted filesystem. In any case, permission settings on the remote system must allow to write to the file.</PARAGRAPH>
<PARAGRAPH>Refer to the section <XREF IDREF="42019" TYPE="TITLE">&ldquo;Dump and Restore With STDIN/STDOUT&rdquo;</XREF> for information on using the standard input and standard output capabilities of <COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> to pipe data between filesystems or across the network.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Reusing Tapes</TITLE><PARAGRAPH>When you use a new tape as the media object of a dump session, <INDEXTARGET ID="ch318"><!-- POSTPROCESSDATA: ch318|<ITALICS>xfsdump</ITALICS> utility:reusing media --><INDEXTARGET ID="ch319"><!-- POSTPROCESSDATA: ch319|tapes, reusing with <ITALICS>xfsdump</ITALICS> utility --><COMMAND>xfsdump</COMMAND> begins writing dump data at the beginning of the tape without prompting. If the tape already has dump data on it, <COMMAND>xfsdump</COMMAND> begins writing data after the last dump stream, again without prompting.</PARAGRAPH>
<PARAGRAPH>If, however, the tape contains data that is not from a dump session, <COMMAND>xfsdump</COMMAND> prompts you before continuing:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape /test </USERINPUT>
xfsdump: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsdump: dump date: Fri Dec 2 11:25:19 1994
xfsdump: level 0 dump
xfsdump: session id: d23cc072-b21d-1001-8f97-080069068eeb
xfsdump: preparing tape drive
xfsdump: this tape contains data that is not part of an XFS dump
xfsdump: do you want to overwrite this tape?
type y to overwrite, n to change tapes or abort (y/n):
</CODE>
<PARAGRAPH>You must answer <USERINPUT>y</USERINPUT> if you want to continue with the dump session, or <USERINPUT>n</USERINPUT> to quit. If you answer <USERINPUT>y</USERINPUT>, the dump session resumes and the tape is overwritten. If you do not respond to the prompt, the session will eventually timeout. Note that this means that an automatic backup, for example one initiated by a <COMMAND>crontab</COMMAND> entry, will not succeed&mdash;unless you specified the <USERINPUT>-F</USERINPUT> option with the <COMMAND>xfsdump</COMMAND> command, which forces it to overwrite the tape rather than prompt for approval.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Erasing Used Tapes</TITLE><PARAGRAPH>Erase pre-existing data on tapes with the <COMMAND>mt erase</COMMAND> command. Make sure the tape is not write-protected.</PARAGRAPH>
<PARAGRAPH>For example, to prepare a used tape in the local default tape drive, enter:</PARAGRAPH>
<CODE>
# <USERINPUT>mt -f /dev/tape erase</USERINPUT>
</CODE>
<CAUTION><PREFIX>Caution</PREFIX>This erases all data on the tape, including any dump sessions.</CAUTION>
<PARAGRAPH>The tape can now used by <COMMAND>xfsdump</COMMAND> without prompting for approval.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="66444">Incremental and Resumed Dumps</TITLE><PARAGRAPH>Incremental dumps are a way of backing up less data at a time but still preserving current versions of all your backed-up files, directories, and so on. Incremental backups are organized numerically by levels from 0 through 9. A level 0 dump always backs up the complete filesystem. A dump level of any other number backs up all files that have changed since a dump with a lower dump level number.<INDEXTARGET ID="ch320"><!-- POSTPROCESSDATA: ch320|incremental dumps, <ITALICS>xfsdump</ITALICS> utility --><INDEXTARGET ID="ch321"><!-- POSTPROCESSDATA: ch321|<ITALICS>xfsdump</ITALICS> utility:incremental dumps --><INDEXTARGET ID="ch322"><!-- POSTPROCESSDATA: ch322|<ITALICS>xfsdump</ITALICS> utility:resumed dumps --></PARAGRAPH>
<PARAGRAPH>For example, if you perform a level 2 backup on a filesystem one day and your next dump is a level 3 backup, only those files that have changed since the level 2 backup are dumped with the level 3 backup. In this case, the level 2 backup is called the <ITALICS>base dump</ITALICS> for the level 3 backup. The base dump is the most recent backup of that filesystem with a lower dump level number.</PARAGRAPH>
<PARAGRAPH>Resumed dumps work in much the same way. When a dump is resumed after it has been interrupted, the remaining files that had been scheduled to be backed up during the interrupted dump session are backed up, and any files that changed during the interruption are also backed up. Note that you must restore an interrupted dump as if it is an incremental dump (see <XREF IDREF="56687" TYPE="TITLE">&ldquo;Cumulative Restores&rdquo;</XREF>).</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Incremental Dump Example</TITLE><PARAGRAPH>In the following example, a new tape is used and the level 0 dump is the first dump written to it:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -l 0 -M Jun_94 -L week_1 -v silent /usr</USERINPUT>
</CODE>
<PARAGRAPH>A week later, a level 1 dump of the filesystem is performed on the same tape:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -l 1 -L week_2 /usr</USERINPUT>
</CODE>
<PARAGRAPH>The tape is forwarded past the existing dump data and the new data from the level 1 dump is written after it. (Note that it is not necessary to specify the media label for each successive dump on a media object.)</PARAGRAPH>
<PARAGRAPH>A week later, a level 2 dump is taken:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -l 2 -L week_3 /usr</USERINPUT>
</CODE>
<PARAGRAPH>and so on, for the four weeks of a month in this example, the fourth week being a level 3 dump (up to nine dump levels are supported). Refer to <XREF IDREF="56687" TYPE="TITLE">&ldquo;Cumulative Restores&rdquo;</XREF> for information on the proper procedure for restoring incremental dumps.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Resumed Dump Example</TITLE><PARAGRAPH>You can interrupt a dump session and resume it later. To interrupt a dump session, type the interrupt character (typically CTRL-C). You receive a list of options which allow you to interrupt the session, change verbosity level, or resume the session. </PARAGRAPH>
<PARAGRAPH>In the following example, <COMMAND>xfsdump</COMMAND> is interrupted after dumping approximately 20% of a filesystem:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -L 210994u -v silent /usr</USERINPUT>
xfsdump: this tape contains data that is not part of an XFS dump
xfsdump: do you want to overwrite this tape?
type y to overwrite, n to change tapes or abort (y/n): <USERINPUT>y</USERINPUT>
overwriting
<USERINPUT>^C</USERINPUT>
status: 91/168 files dumped, 20.48 percent complete, 70 seconds elapsed
0: interrupt this session
1: change verbosity
2: continue
&space;-> <USERINPUT>0</USERINPUT>
session interrupt initiated
xfsdump: dump interrupted prior to ino 11615 offset 0
</CODE>
<PARAGRAPH>You can later continue the dump by including the<USERINPUT>&space;&ndash;R</USERINPUT> option and a different session label:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -f /dev/tape -R -L 2nd210994u -v silent /usr</USERINPUT>
</CODE>
<PARAGRAPH>Any files that were not backed up before the interruption, and any file changes that were made during the interruption, are backed up after the dump is resumed.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Use of the <USERINPUT>&ndash;R</USERINPUT> option requires that the dump was made with a dump inventory taken, that is, the <USERINPUT>&ndash;J</USERINPUT> option was not used with <COMMAND>xfsdump</COMMAND>.</NOTE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="41996">Viewing the Dump Inventory</TITLE><PARAGRAPH>The dump inventory is maintained in the directory <INDEXTARGET ID="ch323"><!-- POSTPROCESSDATA: ch323|<ITALICS>xfsdump</ITALICS> utility:dump inventory --><INDEXTARGET ID="ch324"><!-- POSTPROCESSDATA: ch324|inventory, <ITALICS>xfsdump</ITALICS> utility --><FILENAME>/var/xfsdump </FILENAME>created by <COMMAND>xfsdump</COMMAND>. You can view the dump inventory at any time with the <COMMAND>xfsdump </COMMAND><USERINPUT>&ndash;I</USERINPUT> command. With no other arguments, <COMMAND>xfsdump </COMMAND><USERINPUT>&ndash;I</USERINPUT> displays the entire dump inventory. (The <COMMAND>xfsdump</COMMAND>&space;<USERINPUT>-I</USERINPUT> command does not require root privileges.)</PARAGRAPH>
<PARAGRAPH>The following output presents a section of a dump inventory.</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -I | more</USERINPUT>
file system 0:
&space;       fs id:          d23cb450-b21d-1001-8f97-080069068eeb
&space;       session 0:
&space;               mount point:    magnolia.wpd.xyz.com:/test
&space;               device:         magnolia.wpd.xyz.com:/dev/rdsk/dks0d3s2
&space;               time:           Mon Nov 28 11:44:04 1994
&space;               session label:  ""
&space;               session id:     d23cbf44-b21d-1001-8f97-080069068eeb
&space;               level:          0
&space;               resumed:        NO
&space;               subtree:        NO
&space;               streams:        1
&space;               stream 0:
&space;                       pathname:       /dev/tape
&space;                       start:          ino 4121 offset 0
&space;                       end:            ino 0 offset 0
&space;                       interrupted:    YES
&space;                       media files:    2
&space;                       media file 0:
&space;                               mfile index:    0
---more---
</CODE>
<PARAGRAPH>Notice that the dump inventory records are presented sequentially and are indented to illustrate the hierarchical order of the dump information. </PARAGRAPH>
<PARAGRAPH>You can view a subset of the dump inventory by specifying the level of depth (1, 2, or 3) that you want to view. For example, specifying depth=2 filters out a lot of the specific dump information as you can see by comparing the previous output with this:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -I depth=2</USERINPUT>
file system 0:
&space;       fs id:          d23cb450-b21d-1001-8f97-080069068eeb
&space;       session 0:
&space;               mount point:    magnolia.wpd.xyz.com:/test
&space;               device:         magnolia.wpd.xyz.com:/dev/rdsk/dks0d3s2
&space;               time:           Mon Nov 28 11:44:04 1994
&space;               session label:  ""
&space;               session id:     d23cbf44-b21d-1001-8f97-080069068eeb
&space;               level:          0
&space;               resumed:        NO
&space;               subtree:        NO
&space;               streams:        1
&space;       session 1:
&space;               mount point:    magnolia.wpd.xyz.com:/test
&space;               device:         magnolia.wpd.xyz.com:/dev/rdsk/dks0d3s2
&space;              .
&space;              .
&space;              .
</CODE>
<PARAGRAPH>You can also view a filesystem-specific inventory by specifying the filesystem mount point with the <COMMAND>mnt</COMMAND> option. The following output shows an example of a dump inventory display in which the <COMMAND>depth</COMMAND> is set to <COMMAND>1</COMMAND>, and only a single filesystem is displayed:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -I depth=1,mnt=magnolia.wpd.xyz.com:/test</USERINPUT>
file system 0:
&space;       fs id:          d23cb450-b21d-1001-8f97-080069068eeb
</CODE>
<PARAGRAPH>Note that you can also look at a list of contents on the dump media itself by using the <USERINPUT>&ndash;t</USERINPUT> option with <COMMAND>xfsrestore</COMMAND>. (The <COMMAND>xfsrestore</COMMAND> utility is discussed in detail in the following section.) For example, to list the contents of the dump tape currently in the local tape drive:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -t -v silent | more</USERINPUT>
xfsrestore: dump session found
xfsrestore: session label: "week_1"
xfsrestore: session id: d23cbcb4-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbcb5-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): y
selected
one
A/five
people/fred/TOC
people/fred/ch3.doc
people/fred/ch3TOC.doc
people/fred/questions
A/four
people/fred/script_0
people/fred/script_1
people/fred/script_2
people/fred/script_3
people/fred/sub1/TOC
people/fred/sub1/ch3.doc
people/fred/sub1/ch3TOC.doc
people/fred/sub1/questions
people/fred/sub1/script_0
people/fred/sub1/script_1
people/fred/sub1/script_2
people/fred/sub1/script_3
people/fred/sub1/xdump1.doc
people/fred/sub1/xdump1.doc.backup
people/fred/sub1/xfsdump.doc
people/fred/sub1/xfsdump.doc.auto
people/fred/sub1/sub2/TOC
---more---
</CODE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Using <COMMAND>xfsrestore</COMMAND></TITLE><PARAGRAPH>This section discusses the <INDEXTARGET ID="ch325"><!-- POSTPROCESSDATA: ch325|<ITALICS>xfsrestore</ITALICS> utility:using --><COMMAND>xfsrestore</COMMAND> command, which you must use to view and extract data from the dump data created by <COMMAND>xfsdump</COMMAND>. You can get a summary of <COMMAND>xfsrestore</COMMAND> syntax with the <USERINPUT>&ndash;h</USERINPUT> option:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -h</USERINPUT>
xfsrestore: version <VARIABLE>X.X</VARIABLE>
xfsrestore: usage: xfsrestore [ -a &lt;alt. workspace dir> ]
&space;                             [ -e (don't overwrite existing files)]
&space;                             [ -f &lt;source> ]
&space;                             [ -h (help) ]
&space;                             [ -i (interactive) ]
&space;                             [ -n &lt;file> (restore only if newer than) ]
&space;                             [ -r (cumulative restore) ]
&space;                             [ -s &lt;subtree> ... ]
&space;                             [ -t (contents only) ]
&space;                             [ -v &lt;verbosity {silent, verbose, trace}> ]
&space;                             [ -E (don't overwrite if changed) ]
&space;                             [ -I (display dump inventory) ]
&space;                             [ -L &lt;session label> ]
&space;                             [ -R (resume) ]
&space;                             [ -S &lt;session id> ]
&space;                             [ - (stdin) ]
&space;                             [ &lt;destination> ]
</CODE>
<PARAGRAPH>You must be the superuser to use <ITALICS>xfsrestore</ITALICS>. Refer to the <COMMAND>xfsrestore</COMMAND>(1M) reference page for additional information. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><COMMAND>xfsrestore</COMMAND> Operations</TITLE><PARAGRAPH>Use <COMMAND>xfsrestore</COMMAND> to restore data backed up with <COMMAND>xfsdump</COMMAND>. You can restore files, subdirectories, and filesystems&mdash;regardless of the way they were backed up. For example, if you back up an entire filesystem in a single dump, you can select individual files and subdirectories from within that filesystem to restore.</PARAGRAPH>
<PARAGRAPH>You can use <COMMAND>xfsrestore</COMMAND> interactively or noninteractively. With interactive mode, you can peruse the filesystem or files backed up, selecting those you want to restore. In noninteractive operation, a single command line can restore selected files and subdirectories, or an entire filesystem. You can restore data to its original filesystem location or any other location in an EFS or XFS filesystem.</PARAGRAPH>
<PARAGRAPH>By using successive invocations of <COMMAND>xfsrestore</COMMAND>, you can restore incremental dumps on a base dump. This restores data in the same sequence it was dumped.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Simple Restores</TITLE><PARAGRAPH>A simple restore is a non-cumulative restore (for information on restoring incremental dumps, refer to <INDEXTARGET ID="ch326"><!-- POSTPROCESSDATA: ch326|<ITALICS>xfsrestore</ITALICS> utility:simple restores --><INDEXTARGET ID="ch327"><!-- POSTPROCESSDATA: ch327|<ITALICS>xfsrestore</ITALICS> utility:session label --><INDEXTARGET ID="ch328"><!-- POSTPROCESSDATA: ch328|<ITALICS>xfsrestore</ITALICS> utility:session ID --><XREF IDREF="56687" TYPE="TITLE">&ldquo;Cumulative Restores&rdquo;</XREF>). An example of a simple, noninteractive use of <COMMAND>xfsrestore</COMMAND> is:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape /usr</USERINPUT>
xfsrestore: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsrestore: preparing tape drive
xfsrestore: dump session found
xfsrestore: no session label
xfsrestore: session id: d23cbbbe-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbbbf-b21d-1001-8f97-080069068eeb
do you want to restore this dump? (y/n):<USERINPUT>&space;y</USERINPUT>
beginning restore
xfsrestore: restore of level 0 dump of magnolia.wpd.xyz.com:/usr created Tue Nov 22 15:47:54 1994
xfsrestore: beginning media file
xfsrestore: reading ino map
xfsrestore: initializing the map tree
xfsrestore: reading the directory hierarchy
xfsrestore: restoring non-directory files
xfsrestore: ending media file
xfsrestore: restoring directory attributes
xfsrestore: restore complete: 115 seconds elapsed
</CODE>
<PARAGRAPH>In this case, <COMMAND>xfsrestore</COMMAND> went to the first dump on the tape and asked if this was the dump to restore. If you had answered <USERINPUT>n</USERINPUT>, <COMMAND>xfsrestore</COMMAND> would have proceeded to the next dump on the tape (if there was one) and asked if this was the dump you wanted to restore.</PARAGRAPH>
<PARAGRAPH>You can request a specific dump if you used <COMMAND>xfsdump</COMMAND> with a session label. For example:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -L Wed_11_23 /usr</USERINPUT>
xfsrestore: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsrestore: preparing tape drive
xfsrestore: dump session found
xfsrestore: advancing tape to next media file
xfsrestore: dump session found
xfsrestore: restore of level 0 dump of magnolia.wpd.xyz.com:/usr created Wed Nov 23 11:17:54 1994
xfsrestore: beginning media file
xfsrestore: reading ino map
xfsrestore: initializing the map tree
xfsrestore: reading the directory hierarchy
xfsrestore: restoring non-directory files
xfsrestore: ending media file
xfsrestore: restoring directory attributes
xfsrestore: restore complete: 200 seconds elapsed
</CODE>
<PARAGRAPH>In this way you recover a dump with a single command line and do not have to answer <USERINPUT>y</USERINPUT> or <USERINPUT>n</USERINPUT> to the prompt(s) asking you if the dump session found is the correct one. To be even more exact, use the <USERINPUT>-S</USERINPUT> option and specify the unique session ID of the particular dump session:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -S \</USERINPUT>
<USERINPUT>d23cbf47-b21d-1001-8f97-080069068eeb /usr2/tmp</USERINPUT>
xfsrestore: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsrestore: preparing tape drive
xfsrestore: dump session found
xfsrestore: advancing tape to next media file
xfsrestore: advancing tape to next media file
xfsrestore: dump session found
xfsrestore: restore of level 0 dump of magnolia.wpd.xyz.com:/test resumed Mon Nov 28 11:50:41 1994
xfsrestore: beginning media file
xfsrestore: media file 0 (media 0, file 2)
xfsrestore: reading ino map
xfsrestore: initializing the map tree
xfsrestore: reading the directory hierarchy
xfsrestore: restoring non-directory files
xfsrestore: ending media file
xfsrestore: restoring directory attributes
xfsrestore: restore complete: 229 seconds elapsed
</CODE>
<PARAGRAPH>You can find the session ID by viewing the dump inventory (see <XREF IDREF="41996" TYPE="TITLE">&ldquo;Viewing the Dump Inventory&rdquo;</XREF>). Session labels might be duplicated, but session IDs never are.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Restoring Individual Files</TITLE><PARAGRAPH>On the <INDEXTARGET ID="ch329"><!-- POSTPROCESSDATA: ch329|<ITALICS>xfsrestore</ITALICS> utility:restoring files --><INDEXTARGET ID="ch330"><!-- POSTPROCESSDATA: ch330|restoring files, <ITALICS>xfsrestore</ITALICS> utility --><COMMAND>xfsrestore</COMMAND> command line, you can specify an individual file or subdirectory to restore. In this example, the file <FILENAME>people/fred/notes</FILENAME> is restored and placed in the <FILENAME>/usr/tmp</FILENAME> directory (that is, the file is restored in <FILENAME>/usr/tmp/people/fred/notes</FILENAME>):</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -L week_1 -s people/fred/notes \</USERINPUT>
<USERINPUT>/usr/tmp</USERINPUT>
</CODE>
<PARAGRAPH>You can also restore a file &ldquo;in place&rdquo; that is, restore it directly to where it came from in the original backup. Note, however, that if you do not use a <USERINPUT>-e</USERINPUT>, <USERINPUT>-E</USERINPUT>, or <USERINPUT>-n</USERINPUT> option, you overwrite any existing file(s) of the same name. </PARAGRAPH>
<PARAGRAPH>In the following example, the subdirectory <FILENAME>people/fred</FILENAME> is restored in the destination <FILENAME>/usr</FILENAME> - this would overwrite any files and subdirectories in <FILENAME>/usr/people/fred</FILENAME> with the data on the dump tape:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -L week_1 -s people/fred /usr</USERINPUT>
</CODE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Network Restores</TITLE><PARAGRAPH>You can use standard network references to specify devices and files on the network. For example, to use the tape drive on a network host named <INDEXTARGET ID="ch331"><!-- POSTPROCESSDATA: ch331|<ITALICS>xfsrestore</ITALICS> utility:network usage --><ITALICS>magnolia</ITALICS> as the source for a restore, you can use the command:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f magnolia:/dev/tape -L 120694u2 /usr2</USERINPUT>
xfsrestore: version <VARIABLE>X.X</VARIABLE> - type ^C for status and control
xfsrestore: preparing tape drive
xfsrestore: dump session found
xfsrestore: advancing tape to next media file
xfsrestore: dump session found
xfsrestore: restore of level 0 dump of magnolia.wpd.xyz.com:/usr2 created Tue Dec 6 10:55:17 1994
xfsrestore: beginning media file
xfsrestore: media file 0 (media 0, file 1)
xfsrestore: reading ino map
xfsrestore: initializing the map tree
xfsrestore: reading the directory hierarchy
xfsrestore: restoring non-directory files
xfsrestore: ending media file
xfsrestore: restoring directory attributes
xfsrestore: restore complete: 203 seconds elapsed
</CODE>
<PARAGRAPH>In this case, the dump data is extracted from the tape on <ITALICS>magnolia</ITALICS> and the destination is the directory <FILENAME>/usr2</FILENAME> on the local system. Refer to the section <XREF IDREF="42019" TYPE="TITLE">&ldquo;Dump and Restore With STDIN/STDOUT&rdquo;</XREF> for an example of using the standard input option of <COMMAND>xfsrestore</COMMAND>.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Interactive Restores</TITLE><PARAGRAPH>Use the <INDEXTARGET ID="ch332"><!-- POSTPROCESSDATA: ch332|<ITALICS>xfsrestore</ITALICS> utility:interactive restore --><INDEXTARGET ID="ch333"><!-- POSTPROCESSDATA: ch333|interactive restore, <ITALICS>xfsrestore</ITALICS> utility --><USERINPUT>&ndash;i</USERINPUT> option of <COMMAND>xfsrestore</COMMAND> to perform interactive file restoration. With interactive restoration, you can use the commands <COMMAND>ls</COMMAND>, <COMMAND>pwd</COMMAND>, and <COMMAND>cd</COMMAND> to peruse the filesystem, and the <COMMAND>add</COMMAND> and <COMMAND>delete</COMMAND> commands to create a list of files and subdirectories you want to restore. Then you can enter the <COMMAND>extract</COMMAND> command to restore the files, or <COMMAND>quit</COMMAND> to exit the interactive restore session without restoring files. (The use of &ldquo;wildcards&rdquo; is not allowed with these commands.)</PARAGRAPH>
<PARAGRAPH>The following screen output shows an example of a simple interactive restoration.</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -i -v silent .</USERINPUT>
xfsrestore: dump session found
xfsrestore: no session label
xfsrestore: session id:    d23cbeda-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id:      d23cbedb-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): <USERINPUT>y</USERINPUT>
selected

&space;--- interactive subtree selection dialog ---

the following commands are available:
&space;       pwd 
&space;       ls [ { &lt;name>, ".." } ]
&space;       cd [ { &lt;name>, ".." } ]
&space;       add [ &lt;name> ]
&space;       delete [ &lt;name> ]
&space;       extract 
&space;       quit 
&space;       help 
&space;-> <USERINPUT>ls</USERINPUT>
&space;           4122 people/
&space;           4130 two 
&space;           4126 A/
&space;           4121 one 
&space;-> <USERINPUT>add two</USERINPUT>
&space;-> <USERINPUT>cd people</USERINPUT>
&space;-> <USERINPUT>ls</USERINPUT>
&space;           4124 fred/
&space;-> <USERINPUT>add fred</USERINPUT>
&space;-> <USERINPUT>ls</USERINPUT>
&space;   *       4124 fred/
&space;-> <USERINPUT>extract</USERINPUT>

&space;---------------- end dialog ----------------
</CODE>
<PARAGRAPH>In the interactive restore session above, the subdirectory <FILENAME>people/fred</FILENAME> and the file <FILENAME>two</FILENAME> were restored relative to the current working directory (&ldquo;.&rdquo;). Note that an asterisk (*) in your <COMMAND>ls</COMMAND> output indicates your selections.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="56687">Cumulative Restores</TITLE><PARAGRAPH>Cumulative restores sequentially restore incremental dumps to recreate filesystems and are also used to restore interrupted dumps. To perform a cumulative restore of a filesystem, begin with the media object that contains the base level dump and recover it first, then recover the incremental dump with the next higher dump level number, then the next, and so on. Use the <INDEXTARGET ID="ch334"><!-- POSTPROCESSDATA: ch334|<ITALICS>xfsrestore</ITALICS> utility:cumulative restores --><INDEXTARGET ID="ch335"><!-- POSTPROCESSDATA: ch335|cumulative restores, <ITALICS>xfsrestore</ITALICS> utility -->
<!-- WARNING: (25) Tag 'Argument' is obsolete or print-only - detected on page 52 -->
<!-- WARNINGLOCATION: PAGE = "52" SRC = "ch3.mif" TAGTYPE = "CHAR" TAG = "Argument" TAGCOUNT = "1" UID = "726728" TEXT = "&ndash;r"-->
<ARGUMENT>&ndash;r</ARGUMENT> option to inform <COMMAND>xfsrestore</COMMAND> that you are performing a cumulative recovery. </PARAGRAPH>
<PARAGRAPH>In the following example, the level 0 base dump and succeeding higher level dumps are on <FILENAME>/dev/tape</FILENAME>. First the level 0 dump is restored, then each higher level dump in succession:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -r -v silent .</USERINPUT>
xfsrestore: dump session found
xfsrestore: session label: "week_1"
xfsrestore: session id: d23cbcb4-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbcb5-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): <USERINPUT>y</USERINPUT>
selected
</CODE>
<PARAGRAPH>Next, enter the same command again, but when prompted if you want to restore the first dump (which you've already restored), type <USERINPUT>n</USERINPUT>. Then type <USERINPUT>y</USERINPUT> in response to the continue searching question. When you come to the next dump, restore it:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -r -v silent .</USERINPUT>
xfsrestore: dump session found
xfsrestore: session label: "week_1"
xfsrestore: session id: d23cbcb4-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbcb5-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): <USERINPUT>n</USERINPUT>
not selected
do you want to continue searching? (y/n): <USERINPUT>y</USERINPUT>
continuing search
xfsrestore: dump session found
xfsrestore: session label: "week_2"
xfsrestore: session id: d23cbcb8-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbcb5-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): <USERINPUT>y</USERINPUT>
selected
.
.
.
</CODE>
<PARAGRAPH>You then repeat this process, only now skipping the first two dumps and restoring the third, and so on, until you have recovered the entire sequence of incremental dumps. The full and latest copy of the filesystem will then have been restored. In this case, it is restored relative to &ldquo;.&rdquo;, that is, in the directory you are in when the sequence of <COMMAND>xfsrestore</COMMAND> commands is issued.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Restoring Interrupted Dumps</TITLE><PARAGRAPH>Restore an interrupted dump just as if it were an incremental dump. Use the <INDEXTARGET ID="ch336"><!-- POSTPROCESSDATA: ch336|restoring interrupted dumps, <ITALICS>xfsrestore</ITALICS> utility --><INDEXTARGET ID="ch337"><!-- POSTPROCESSDATA: ch337|<ITALICS>xfsrestore</ITALICS> utility:restoring interrupted dumps --><USERINPUT>-r</USERINPUT> option to inform <COMMAND>xfsrestore</COMMAND> that you are performing an incremental restore, and answer <USERINPUT>y</USERINPUT> and <USERINPUT>n</USERINPUT> appropriately to select the proper &ldquo;increments&rdquo; to restore (see <XREF IDREF="56687" TYPE="TITLE">&ldquo;Cumulative Restores&rdquo;</XREF>).</PARAGRAPH>
<PARAGRAPH>Note that if you try to restore an interrupted dump as if it were a non-interrupted, non-incremental dump, the portion of the dump that occurred before the interruption is restored, but not the remainder of the dump. You can determine if a dump is an interrupted dump by looking in the online inventory.</PARAGRAPH>
<PARAGRAPH>Here is an example of a dump inventory showing an interrupted dump session (the crucial fields are in bold type):</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -I depth=3,mobjlabel=AugTape,mnt=indy4.xyz.com:/usr</USERINPUT>
file system 0:
&space;       fs id:          d23cb450-b21d-1001-8f97-080069068eeb
&space;       session 0:
&space;               mount point:    indy4.xyz.com.com:/usr
&space;               device:         indy4.xyz.com.com:/dev/rdsk/dks0d3s2
&space;               time:           Tue Dec  6 15:01:26 1994
&space;               session label:  "180894usr"
&space;               session id:     d23cc0c3-b21d-1001-8f97-080069068eeb
&space;               level:          0
&space;               resumed:        NO
&space;               subtree:        NO
&space;               streams:        1
&space;               stream 0:
&space;                       pathname:       /dev/tape
&space;                       start:          ino 4121 offset 0
&space;                       end:            ino 0 offset 0
&space;                       <BOLD>interrupted:    YES</BOLD>
&space;                       media files:    2
&space;       session 1:
&space;               mount point:    indy4.xyz.com.com:/usr
&space;               device:         indy4.xyz.com.com:/dev/rdsk/dks0d3s2
&space;               time:           Tue Dec  6 15:48:37 1994
&space;               session label:  "Resumed180894usr"
&space;               session id:     d23cc0cc-b21d-1001-8f97-080069068eeb
&space;               level:          0
&space;               <BOLD>resumed:        YES</BOLD>
&space;               subtree:        NO
&space;               streams:        1
&space;               stream 0:
&space;                       pathname:       /dev/tape
&space;                       start:          ino 4121 offset 0
&space;                       end:            ino 0 offset 0
&space;                       <BOLD>interrupted:    NO</BOLD>
&space;                       media files:    2
.
.
.
</CODE>
<PARAGRAPH>From this it can be determined that session 0 was interrupted and then resumed and completed in session 1.</PARAGRAPH>
<PARAGRAPH>To restore the interrupted dump session in the example above, use the following sequence of commands:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -r -L 180894usr .</USERINPUT>
# <USERINPUT>xfsrestore -f /dev/tape -r -L Resumed180894usr .</USERINPUT>
</CODE>
<PARAGRAPH>This restores the entire <FILENAME>/usr</FILENAME> backup relative to the current directory. (You should remove the <FILENAME>housekeeping</FILENAME> directory from the destination directory when you are finished.)</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Interrupted Restores</TITLE><PARAGRAPH>In a manner similar to <INDEXTARGET ID="ch338"><!-- POSTPROCESSDATA: ch338|<ITALICS>xfsrestore</ITALICS> utility:interrupted restores --><INDEXTARGET ID="ch339"><!-- POSTPROCESSDATA: ch339|interrupted restores, <ITALICS>xfsrestore</ITALICS> utility --><COMMAND>xfsdump</COMMAND> interruptions, you can interrupt an <COMMAND>xfsrestore</COMMAND> session. This allows you to interrupt a restore session and then resume it later. To interrupt a restore session, type the interrupt character (typically CTRL-C). You receive a list of options which allow you to interrupt the session, change the verbosity level, or resume the session.</PARAGRAPH>
<CODE>
# <USERINPUT>xfsrestore -f /dev/tape -v silent /usr</USERINPUT>
xfsrestore: dump session found
xfsrestore: no session label
xfsrestore: session id: d23cbf44-b21d-1001-8f97-080069068eeb
xfsrestore: no media label
xfsrestore: media id: d23cbf45-b21d-1001-8f97-080069068eeb
do you want to select this dump? (y/n): <USERINPUT>y</USERINPUT>
selected
status: 92/168 files restored, 41.03 percent complete, 135 seconds elapsed
0: interrupt this session
1: change verbosity
2: continue
&space;-> <USERINPUT>0</USERINPUT>
session interrupt initiated
</CODE>
<PARAGRAPH>Resume the <COMMAND>xfsrestore</COMMAND> session with the <USERINPUT>&ndash;R</USERINPUT> option:</PARAGRAPH>
<CODE>
#<USERINPUT>&space;xfsrestore -f /dev/tape -R -v silent /usr</USERINPUT>
</CODE>
<PARAGRAPH>Data recovery continues from the point of the interruption.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>The <FILENAME>housekeeping</FILENAME> and <FILENAME>orphanage</FILENAME> Directories</TITLE><PARAGRAPH>The <INDEXTARGET ID="ch340"><!-- POSTPROCESSDATA: ch340|<ITALICS>housekeeping</ITALICS> directory --><INDEXTARGET ID="ch341"><!-- POSTPROCESSDATA: ch341|<ITALICS>orphanage</ITALICS> directory --><COMMAND>xfsrestore</COMMAND> utility can create two subdirectories in the destination called the <FILENAME>housekeeping</FILENAME> and <FILENAME>orphanage</FILENAME> directories. </PARAGRAPH>
<PARAGRAPH>The <FILENAME>housekeeping</FILENAME> directory is a temporary directory used during cumulative recovery to pass information from one invocation of <COMMAND>xfsrestore</COMMAND> to the next. It must not be removed during the process of performing the cumulative recovery but should be removed after the cumulative recovery is completed.</PARAGRAPH>
<PARAGRAPH>The orphanage directory is created if a file or subdirectory is restored that is not referenced in the filesystem structure of the dump. For example, if you dump a very active filesystem, it is possible for new files to be in the non-directory portion of the dump, yet none of the directories dumped reference that file. A WARNING message will be displayed, and the file is placed in the <FILENAME>orphanage</FILENAME> directory, named with its original inode number.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="42019">Dump and Restore With STDIN/STDOUT</TITLE><PARAGRAPH>You can use <INDEXTARGET ID="ch342"><!-- POSTPROCESSDATA: ch342|<ITALICS>xfsdump</ITALICS> utility:network usage --><INDEXTARGET ID="ch343"><!-- POSTPROCESSDATA: ch343|<ITALICS>xfsrestore</ITALICS> utility:network usage --><INDEXTARGET ID="ch344"><!-- POSTPROCESSDATA: ch344|<ITALICS>xfsdump</ITALICS> utility:STDOUT --><INDEXTARGET ID="ch345"><!-- POSTPROCESSDATA: ch345|<ITALICS>xfsrestore</ITALICS> utility:STDIN --><COMMAND>xfsdump</COMMAND> and <COMMAND>xfsrestore</COMMAND> to pipe data across filesystems or across the network with a single command line. By piping <COMMAND>xfsdump</COMMAND> standard output to <COMMAND>xfsrestore</COMMAND> standard input you create an exact copy of a filesystem.</PARAGRAPH>
<PARAGRAPH>For example, to make a copy of <FILENAME>/usr/people/fred</FILENAME> in the <FILENAME>/usr2</FILENAME> directory, enter:</PARAGRAPH>
<CODE>
# <USERINPUT>xfsdump -J -s people/fred - /usr | xfsrestore - /usr2</USERINPUT>
</CODE>
<PARAGRAPH>To copy <FILENAME>/usr/people/fred</FILENAME> to the network host <ITALICS>magnolia</ITALICS>'s <FILENAME>/usr/tmp </FILENAME>directory:</PARAGRAPH>
<CODE>
#<USERINPUT>&space;xfsdump -J -s people/fred - /usr | rsh magnolia \</USERINPUT>
<USERINPUT>xfsrestore - /usr/tmp</USERINPUT>
</CODE>
<PARAGRAPH>This creates the directory <FILENAME>/usr/tmp/people/fred</FILENAME> on <ITALICS>magnolia</ITALICS>.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The superuser account on the local system must be able to <COMMAND>rsh</COMMAND> to the remote system without a password. For more information, see <COMMAND>hosts.equiv</COMMAND>(4).</NOTE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="28316">Other Backup Utilities and XFS</TITLE><PARAGRAPH>You can also use the standard IRIX utilities <INDEXTARGET ID="ch346"><!-- POSTPROCESSDATA: ch346|<ITALICS>tar</ITALICS> utility --><INDEXTARGET ID="ch347"><!-- POSTPROCESSDATA: ch347|<ITALICS>cpio</ITALICS> utility --><INDEXTARGET ID="ch348"><!-- POSTPROCESSDATA: ch348|<ITALICS>bru</ITALICS> utility --><COMMAND>cpio</COMMAND>(1), <COMMAND>tar</COMMAND>(1), and <COMMAND>bru</COMMAND>(1), to backup and restore data. This section discusses XFS-related issues in using these utilities. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><COMMAND>tar</COMMAND>&space;</TITLE><PARAGRAPH>The <USERINPUT>-K</USERINPUT> option has been added to the <COMMAND>tar</COMMAND>(1) command for use with files larger than 2GB. If the <USERINPUT>-K</USERINPUT> option is not used, <COMMAND>tar</COMMAND> skips any files larger than 2GB and issues a warning. Note that use of this option can create <COMMAND>tar</COMMAND> archives that are not usable on non-XFS systems . The <USERINPUT>-K</USERINPUT> option cannot be used in combination with the <USERINPUT>-O</USERINPUT> option, which creates <COMMAND>tar</COMMAND> archives formatted in an older, pre-POSIX format.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><COMMAND>cpio</COMMAND>&space;</TITLE><PARAGRAPH>The <USERINPUT>-K</USERINPUT> option has been added to the <COMMAND>cpio</COMMAND>(1) command for use with files larger than 2GB. If the <USERINPUT>-K</USERINPUT> option is not used, <COMMAND>cpio</COMMAND> skips any files larger than 2GB and issues a warning. Note that use of this option can create <COMMAND>cpio</COMMAND> archives that are not usable on non-XFS systems. The <USERINPUT>-K</USERINPUT> option can only be used in combination with the<USERINPUT>&space;-o</USERINPUT> (output) option. The <USERINPUT>-K</USERINPUT> option cannot be used in combination with the <USERINPUT>-c</USERINPUT> option (which creates <COMMAND>cpio</COMMAND> archives with ASCII headers), nor with the <USERINPUT>-H</USERINPUT> option (used to specify various header formats).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><COMMAND>bru</COMMAND>&space;</TITLE><PARAGRAPH>The <USERINPUT>-K</USERINPUT> option has been added to the <COMMAND>bru</COMMAND>(1) command for use with files larger than 2GB. If the <USERINPUT>-K</USERINPUT> option is not used, <COMMAND>bru</COMMAND> skips any files that it cannot compress to less than 2GB and issues a warning. Note that use of this option can create <COMMAND>bru</COMMAND> archives that are not usable on non-XFS systems. The <USERINPUT>-K</USERINPUT> option can only be used in combination with the<USERINPUT>&space;-Z</USERINPUT> (use 12-bit LZW file compression) option.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>System Recovery</TITLE><PARAGRAPH>The PROM Monitor's System Recovery option does not work correctly for XFS filesystems.<INDEXTARGET ID="ch349"><!-- POSTPROCESSDATA: ch349|System Recovery, PROM Monitor --></PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
