%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.5
%%For: () ()
%%Title: (uns.files.partial.view.ai)
%%CreationDate: (12/2/97) ( 2:12 PM)
%%BoundingBox: 190 328 359 561
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%DocumentCustomColors: (copper)
%%+ (purple)
%%+ (yellow)
%%CMYKCustomColor: 1 0 0 0 (blue)
%%+ 0.5 0.75 1 0.35 (brown)
%%+ 0.05 0.65 0.8 0 (copper)
%%+ 1 0.5 0 0.35 (dark blue)
%%+ 0.25 0.55 1 0.4 (dark gold)
%%+ 1 0 0.8 0.25 (dark green)
%%+ 0 1 0.85 0.35 (dark red)
%%+ 0.25 0.25 0.5 0.25 (equipment grey)
%%+ 0.35 0.5 0.8 0 (flesh)
%%+ 0.15 0.55 1 0 (gold)
%%+ 0.8 0 1 0 (green)
%%+ 0 0.6 1 0 (orange)
%%+ 1 1 0.58 0 (purple)
%%+ 0 0.75 1 0.35 (rust)
%%+ 0 0 1 0 (yellow)
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Header
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			break
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
u
u
0 O
0.05 0.65 0.8 0 (copper) 0.5 x
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
324.1056 547.69 m
317.9169 550.8739 L
317.6604 550.7418 317.2914 550.5368 317.0411 550.3848 C
323.3415 547.2696 L
323.5933 547.4188 323.8476 547.5611 324.1056 547.69 C
f
316.9444 531.9293 m
317.7398 531.1491 L
316.8663 532.0428 L
316.893 532.0057 316.9166 531.9653 316.9444 531.9293 C
f
311.7972 534.0924 m
317.7398 531.1491 L
317.6495 531.2742 316.6896 532.2973 316.6112 532.4351 C
311.7972 534.0924 L
f
311.4883 534.3954 m
310.7858 535.0847 L
310.9926 534.8221 311.2296 534.5944 311.4883 534.3954 C
f
0.05 0.65 0.8 0 (copper) 0.4844 x
323.3415 547.2696 m
317.0411 550.3848 L
316.799 550.2378 316.5601 550.0818 316.3248 549.9176 C
322.6204 546.8069 L
322.8578 546.9689 323.0975 547.1251 323.3415 547.2696 C
f
316.4241 532.7976 m
310.4417 535.6011 L
310.5467 535.4185 310.6598 535.2445 310.7858 535.0847 C
311.4883 534.3954 L
311.513 534.3765 311.5347 534.3536 311.5598 534.3353 C
311.7972 534.0924 L
316.6112 532.4351 L
316.5448 532.5519 316.4816 532.6719 316.4241 532.7976 C
f
0.05 0.65 0.8 0 (copper) 0.4687 x
322.6204 546.8069 m
316.3248 549.9176 L
316.0951 549.7574 315.8706 549.5864 315.6484 549.4111 C
321.9371 546.3072 L
322.1616 546.4809 322.3887 546.6486 322.6204 546.8069 C
f
316.3065 533.0919 m
310.2546 535.9636 L
310.3126 535.8383 310.3748 535.7173 310.4417 535.6011 C
316.4241 532.7976 L
316.3809 532.892 316.3445 532.9925 316.3065 533.0919 C
f
0.05 0.65 0.8 0 (copper) 0.4531 x
321.9371 546.3072 m
315.6484 549.4111 L
315.4297 549.2386 315.2162 549.0577 315.0054 548.8719 C
321.2877 545.7742 L
321.5005 545.9585 321.7165 546.1365 321.9371 546.3072 C
f
316.2017 533.3737 m
310.1324 536.2623 L
310.1715 536.161 310.2101 536.0596 310.2546 535.9636 C
316.3065 533.0919 L
316.2709 533.1852 316.2327 533.2761 316.2017 533.3737 C
f
0.05 0.65 0.8 0 (copper) 0.4375 x
321.2877 545.7742 m
315.0054 548.8719 L
314.7968 548.688 314.5932 548.4981 314.3932 548.3023 C
320.6695 545.2107 L
320.8713 545.4049 321.0774 545.5921 321.2877 545.7742 C
f
316.1361 533.6169 m
310.0275 536.5441 L
310.0588 536.4467 310.0965 536.3553 310.1324 536.2623 C
316.2017 533.3737 L
316.1768 533.4521 316.1579 533.5357 316.1361 533.6169 C
f
0.05 0.65 0.8 0 (copper) 0.4219 x
320.6695 545.2107 m
314.3932 548.3023 L
314.1945 548.1079 313.9999 547.9092 313.8104 547.7041 C
320.0808 544.6181 L
320.272 544.8217 320.4692 545.0178 320.6695 545.2107 C
f
316.0772 533.8536 m
309.9593 536.7899 L
309.9817 536.7075 310.002 536.6236 310.0275 536.5441 C
316.1361 533.6169 L
316.1152 533.6947 316.0951 533.7733 316.0772 533.8536 C
f
310.37 542.0862 m
310.4164 542.2079 L
310.4019 542.1672 310.3842 542.1268 310.37 542.0862 C
f
0.05 0.65 0.8 0 (copper) 0.4062 x
316.0262 534.0825 m
309.9004 537.0266 L
309.9186 536.9463 309.9383 536.8675 309.9593 536.7899 C
316.0772 533.8536 L
316.06 533.9298 316.0407 534.004 316.0262 534.0825 C
f
320.0808 544.6181 m
313.8104 547.7041 L
313.6212 547.4994 313.435 547.2921 313.2559 547.0781 C
319.5207 543.9977 L
319.7014 544.2101 319.8902 544.4151 320.0808 544.6181 C
f
310.6486 542.8058 m
310.6297 542.76 310.6135 542.714 310.5951 542.6682 C
310.596 542.6674 L
310.6486 542.8058 L
f
310.4753 542.3595 m
310.4565 542.3089 310.4346 542.2584 310.4164 542.2079 C
310.37 542.0862 L
310.3625 542.0647 310.3574 542.0431 310.35 542.0215 C
310.3944 542.138 L
310.4753 542.3595 L
f
0.05 0.65 0.8 0 (copper) 0.3906 x
315.9969 534.2901 m
309.8479 537.2571 L
309.8627 537.1778 309.883 537.1035 309.9004 537.0266 C
316.0262 534.0825 L
316.0138 534.1496 316.0073 534.2214 315.9969 534.2901 C
f
310.35 542.0215 m
310.3464 542.011 310.3438 542.0004 310.3402 541.9899 C
310.3944 542.138 L
310.35 542.0215 L
f
319.5207 543.9977 m
313.2559 547.0781 L
313.0762 546.8633 312.8997 546.6459 312.7309 546.4231 C
318.9957 543.3427 L
319.1663 543.5643 319.3393 543.7844 319.5207 543.9977 C
f
310.5973 542.666 m
310.6595 542.8338 L
310.6556 542.8244 310.6525 542.8151 310.6486 542.8058 C
310.596 542.6674 L
310.5973 542.666 L
f
0.05 0.65 0.8 0 (copper) 0.375 x
315.9676 534.4978 m
309.8185 537.4647 L
309.8291 537.3961 309.8354 537.324 309.8479 537.2571 C
315.9969 534.2901 L
315.9865 534.3588 315.976 534.4275 315.9676 534.4978 C
f
318.9957 543.3427 m
312.7309 546.4231 L
312.5602 546.1978 312.3987 545.967 312.2399 545.7347 C
318.499 542.6598 L
318.6594 542.8907 318.8235 543.1191 318.9957 543.3427 C
f
0.05 0.65 0.8 0 (copper) 0.3594 x
318.499 542.6598 m
312.2399 545.7347 L
312.0789 545.4988 311.9264 545.2593 311.7784 545.0174 C
318.0317 541.9483 L
318.1813 542.1887 318.3364 542.4258 318.499 542.6598 C
f
315.9401 534.7037 m
309.7892 537.6724 L
309.7978 537.6022 309.808 537.5333 309.8185 537.4647 C
315.9676 534.4978 L
315.9593 534.5671 315.9464 534.6328 315.9401 534.7037 C
f
0.05 0.65 0.8 0 (copper) 0.3437 x
315.9317 534.8908 m
309.7605 537.8795 L
309.767 537.808 309.7807 537.7423 309.7892 537.6724 C
315.9401 534.7037 L
315.9347 534.764 315.9357 534.8293 315.9317 534.8908 C
f
318.0317 541.9483 m
311.7784 545.0174 L
311.6275 544.7705 311.4847 544.5213 311.3483 544.2693 C
317.5954 541.2063 L
317.7336 541.4564 317.8791 541.7034 318.0317 541.9483 C
f
0.05 0.65 0.8 0 (copper) 0.3281 x
315.9234 535.0779 m
309.7522 538.0665 L
309.7563 538.0051 309.755 537.9397 309.7605 537.8795 C
315.9317 534.8908 L
315.9278 534.9523 315.9259 535.0153 315.9234 535.0779 C
f
317.5954 541.2063 m
311.3483 544.2693 L
311.2081 544.0106 311.0762 543.7503 310.9524 543.4877 C
317.1929 540.4311 L
317.3187 540.6917 317.4535 540.9497 317.5954 541.2063 C
f
0.05 0.65 0.8 0 (copper) 0.3125 x
316.8283 539.6188 m
316.9403 539.891 317.0626 540.1616 317.1929 540.4311 C
310.9524 543.4877 L
310.8499 543.2703 310.7501 543.0528 310.6595 542.8338 C
310.5973 542.666 L
316.8283 539.6188 L
f
315.915 535.265 m
309.7438 538.2537 L
309.7464 538.1911 309.7481 538.1279 309.7522 538.0665 C
315.9234 535.0779 L
315.9209 535.1405 315.9161 535.2013 315.915 535.265 C
f
0.05 0.65 0.8 0 (copper) 0.2969 x
316.8283 539.6188 m
310.5973 542.666 L
310.596 542.6674 L
310.5951 542.6682 L
310.5541 542.5654 310.5137 542.4625 310.4753 542.3595 C
310.3944 542.138 L
310.3402 541.9899 L
310.3192 541.9281 310.3029 541.8663 310.2829 541.8045 C
316.5077 538.7632 L
316.6038 539.049 316.7112 539.3342 316.8283 539.6188 C
f
315.9091 535.398 m
315.9091 535.4143 315.9114 535.4311 315.9115 535.4474 C
309.7355 538.4407 L
309.7366 538.3771 309.7413 538.3162 309.7438 538.2537 C
315.915 535.265 L
315.9143 535.3103 315.9091 535.3522 315.9091 535.398 c
f
0.05 0.65 0.8 0 (copper) 0.2812 x
315.9199 535.618 m
309.731 538.624 L
309.731 538.6109 309.7291 538.5973 309.7291 538.5842 c
309.7291 538.5348 309.7346 538.4895 309.7355 538.4407 C
315.9115 535.4474 L
315.9118 535.5037 315.9185 535.5615 315.9199 535.618 C
f
316.5077 538.7632 m
310.2829 541.8045 L
310.1838 541.4981 310.0981 541.1926 310.0251 540.8874 C
316.2402 537.8556 L
316.317 538.1577 316.4059 538.4603 316.5077 538.7632 C
f
0.05 0.65 0.8 0 (copper) 0.2656 x
316.2402 537.8556 m
310.0251 540.8874 L
309.9458 540.557 309.8835 540.2287 309.8365 539.9024 C
316.04 536.882 L
316.0919 537.2048 316.1573 537.5292 316.2402 537.8556 C
f
315.9283 535.7887 m
309.7394 538.7947 L
309.7381 538.7382 309.7313 538.6803 309.731 538.624 C
315.9199 535.618 L
315.9214 535.6746 315.9258 535.7318 315.9283 535.7887 C
f
0.05 0.65 0.8 0 (copper) 0.25 x
316.04 536.882 m
309.8365 539.9024 L
309.7826 539.5287 309.7484 539.1589 309.7394 538.7947 C
315.9283 535.7887 L
315.9446 536.1489 315.9807 536.5132 316.04 536.882 C
f
U
u
0.05 0.65 0.8 0 (copper) 0.5 x
334.6601 559.2182 m
334.5457 559.1658 334.434 559.1249 334.3186 559.0671 C
340.4985 555.881 L
340.6156 555.9395 340.7287 555.9809 340.8445 556.0339 C
334.6601 559.2182 L
f
0.05 0.65 0.8 0 (copper) 0.4773 x
341.1904 556.1868 m
335.0061 559.371 L
334.8915 559.3233 334.7759 559.2712 334.6601 559.2182 C
340.8445 556.0339 L
340.9603 556.0869 341.0759 556.1392 341.1904 556.1868 C
f
0.05 0.65 0.8 0 (copper) 0.4545 x
341.5435 556.3324 m
335.3588 559.517 L
335.2425 559.4737 335.1239 559.4201 335.0061 559.371 C
341.1904 556.1868 L
341.3084 556.2358 341.4271 556.289 341.5435 556.3324 C
f
0.05 0.65 0.8 0 (copper) 0.4318 x
341.9195 556.4546 m
335.7347 559.6392 L
335.6093 559.5986 335.486 559.5645 335.3588 559.517 C
341.5435 556.3324 L
341.6707 556.3798 341.7941 556.414 341.9195 556.4546 C
f
0.05 0.65 0.8 0 (copper) 0.4091 x
342.2955 556.5768 m
336.1107 559.7615 L
335.9873 559.7274 335.86 559.68 335.7347 559.6392 C
341.9195 556.4546 L
342.0447 556.4952 342.1721 556.5428 342.2955 556.5768 C
f
0.05 0.65 0.8 0 (copper) 0.3864 x
342.7004 556.6695 m
336.5152 559.8546 L
336.3806 559.8248 336.2479 559.7994 336.1107 559.7615 C
342.2955 556.5768 L
342.4329 556.6147 342.5656 556.6397 342.7004 556.6695 C
f
0.05 0.65 0.8 0 (copper) 0.3636 x
343.1134 556.7539 m
336.9282 559.939 L
336.7926 559.9169 336.6538 559.8853 336.5152 559.8546 C
342.7004 556.6695 L
342.8389 556.7 342.9779 556.7318 343.1134 556.7539 C
f
0.05 0.65 0.8 0 (copper) 0.3409 x
343.5569 556.807 m
337.3711 559.9927 L
337.2247 559.9785 337.0786 559.9636 336.9282 559.939 C
343.1134 556.7539 L
343.264 556.7784 343.4103 556.7928 343.5569 556.807 C
f
0.05 0.65 0.8 0 (copper) 0.3182 x
344.0178 556.8425 m
337.832 560.0282 L
337.6818 560.0246 337.5261 560.0078 337.3711 559.9927 C
343.5569 556.807 L
343.7118 556.8219 343.8677 556.839 344.0178 556.8425 C
f
0.05 0.65 0.8 0 (copper) 0.2955 x
344.5329 556.8226 m
338.3462 560.0092 L
338.177 560.0205 338.0084 560.0325 337.832 560.0282 C
344.0178 556.8425 L
344.1946 556.8466 344.3634 556.8341 344.5329 556.8226 C
f
0.05 0.65 0.8 0 (copper) 0.2727 x
345.0927 556.757 m
338.9047 559.9449 L
338.7239 559.9771 338.537 559.9964 338.3462 560.0092 C
344.5329 556.8226 L
344.7242 556.8095 344.9114 556.7896 345.0927 556.757 C
f
0.05 0.65 0.8 0 (copper) 0.25 x
346.8529 556.0325 m
340.657 559.2284 L
340.1546 559.5901 339.5624 559.8279 338.9047 559.9449 C
345.0927 556.757 L
345.7536 556.6383 346.3492 556.3987 346.8529 556.0325 C
f
U
0.05 0.65 0.8 0 (copper) 0.5 x
340.4985 555.881 m
324.1056 547.69 L
317.9255 550.8762 L
334.3186 559.0671 L
340.4985 555.881 L
f
0.05 0.65 0.8 0 (copper) 0.15 x
348.695 551.78 m
348.695 556.3067 345.0253 558.1428 340.4985 555.881 C
324.1056 547.69 L
319.5788 545.4282 315.909 539.9248 315.909 535.398 C
315.909 530.8713 319.5788 529.0352 324.1056 531.297 C
340.4985 539.488 L
345.0253 541.7498 348.695 547.2532 348.695 551.78 C
f
U
0 0 1 0 (yellow) 0 x
0 R
0 G
0.5 w
316.3856 535.0564 m
283.5221 518.6182 L
290.6677 515.0444 L
265.125 513.375 L
269.2785 525.7418 L
276.3704 522.1949 L
309.234 538.6332 L
316.3856 535.0564 L
b
u
1 w
248.8884 505.5 m
248.9216 466.2255 l
207.0417 445.315 l
207.0417 350.3257 l
S
248.9216 466.2255 m
292.7083 488.1033 l
292.7083 391.5163 l
S
U
u
u
0 O
1 1 0.58 0 (purple) 0.25 x
249 486.9853 m
259.9345 486.9853 268.799 495.8496 268.799 506.7842 c
268.799 517.7187 259.9345 526.5832 249 526.5832 c
238.0655 526.5832 229.201 517.7187 229.201 506.7842 c
229.201 495.8496 238.0655 486.9853 249 486.9853 c
f
U
u
1 1 0.58 0 (purple) 0.2083 x
248.8502 487.4506 m
238.0922 487.4506 229.3707 496.1719 229.3707 506.93 c
229.3707 517.6882 238.0922 526.4096 248.8502 526.4096 c
259.6083 526.4096 268.3298 517.6882 268.3298 506.93 c
268.3298 496.1719 259.6083 487.4506 248.8502 487.4506 c
f
1 1 0.58 0 (purple) 0.1667 x
248.7005 487.9159 m
238.1188 487.9159 229.5404 496.4942 229.5404 507.076 c
229.5404 517.6576 238.1188 526.236 248.7005 526.236 c
259.2822 526.236 267.8606 517.6576 267.8606 507.076 c
267.8606 496.4942 259.2822 487.9159 248.7005 487.9159 c
f
1 1 0.58 0 (purple) 0.125 x
248.5508 488.3811 m
238.1455 488.3811 229.7101 496.8164 229.7101 507.2219 c
229.7101 517.6271 238.1455 526.0625 248.5508 526.0625 c
258.956 526.0625 267.3915 517.6271 267.3915 507.2219 c
267.3915 496.8164 258.956 488.3811 248.5508 488.3811 c
f
1 1 0.58 0 (purple) 0.0833 x
248.401 488.8464 m
238.1721 488.8464 229.8798 497.1388 229.8798 507.3677 c
229.8798 517.5966 238.1721 525.889 248.401 525.889 c
258.6299 525.889 266.9223 517.5966 266.9223 507.3677 c
266.9223 497.1388 258.6299 488.8464 248.401 488.8464 c
f
1 1 0.58 0 (purple) 0.0417 x
248.2513 489.3117 m
238.1988 489.3117 230.0494 497.4609 230.0494 507.5136 c
230.0494 517.566 238.1988 525.7154 248.2513 525.7154 c
258.3037 525.7154 266.4531 517.566 266.4531 507.5136 c
266.4531 497.4609 258.3037 489.3117 248.2513 489.3117 c
f
U
u
1 1 0.58 0 (purple) 0 x
248.1015 489.777 m
238.2255 489.777 230.2191 497.7833 230.2191 507.6595 c
230.2191 517.5355 238.2255 525.5419 248.1015 525.5419 c
257.9776 525.5419 265.9839 517.5355 265.9839 507.6595 c
265.9839 497.7833 257.9776 489.777 248.1015 489.777 c
f
U
u
1 1 0.58 0 (purple) 0.0081 x
247.8692 490.4342 m
238.2265 490.4342 230.4093 498.2512 230.4093 507.8941 c
230.4093 517.5368 238.2265 525.354 247.8692 525.354 c
257.5119 525.354 265.3291 517.5368 265.3291 507.8941 c
265.3291 498.2512 257.5119 490.4342 247.8692 490.4342 c
f
1 1 0.58 0 (purple) 0.0161 x
247.6368 491.0913 m
238.2275 491.0913 230.5995 498.7192 230.5995 508.1287 c
230.5995 517.538 238.2275 525.166 247.6368 525.166 c
257.0462 525.166 264.6742 517.538 264.6742 508.1287 c
264.6742 498.7192 257.0462 491.0913 247.6368 491.0913 c
f
1 1 0.58 0 (purple) 0.0242 x
247.4044 491.7485 m
238.2284 491.7485 230.7896 499.1872 230.7896 508.3632 c
230.7896 517.5393 238.2284 524.9781 247.4044 524.9781 c
256.5804 524.9781 264.0193 517.5393 264.0193 508.3632 c
264.0193 499.1872 256.5804 491.7485 247.4044 491.7485 c
f
1 1 0.58 0 (purple) 0.0323 x
247.1721 492.4056 m
238.2294 492.4056 230.9798 499.6551 230.9798 508.5979 c
230.9798 517.5406 238.2294 524.7902 247.1721 524.7902 c
256.1147 524.7902 263.3644 517.5406 263.3644 508.5979 c
263.3644 499.6551 256.1147 492.4056 247.1721 492.4056 c
f
1 1 0.58 0 (purple) 0.0403 x
246.9397 493.0626 m
238.2304 493.0626 231.1699 500.1231 231.1699 508.8325 c
231.1699 517.5418 238.2304 524.6023 246.9397 524.6023 c
255.649 524.6023 262.7095 517.5418 262.7095 508.8325 c
262.7095 500.1231 255.649 493.0626 246.9397 493.0626 c
f
1 1 0.58 0 (purple) 0.0484 x
246.7074 493.7199 m
238.2314 493.7199 231.3601 500.5911 231.3601 509.0671 c
231.3601 517.5431 238.2314 524.4143 246.7074 524.4143 c
255.1833 524.4143 262.0546 517.5431 262.0546 509.0671 c
262.0546 500.5911 255.1833 493.7199 246.7074 493.7199 c
f
1 1 0.58 0 (purple) 0.0565 x
246.475 494.3769 m
238.2324 494.3769 231.5503 501.059 231.5503 509.3018 c
231.5503 517.5442 238.2324 524.2265 246.475 524.2265 c
254.7176 524.2265 261.3997 517.5442 261.3997 509.3018 c
261.3997 501.059 254.7176 494.3769 246.475 494.3769 c
f
1 1 0.58 0 (purple) 0.0645 x
246.2426 495.0342 m
238.2334 495.0342 231.7404 501.527 231.7404 509.5364 c
231.7404 517.5456 238.2334 524.0386 246.2426 524.0386 c
254.2519 524.0386 260.7449 517.5456 260.7449 509.5364 c
260.7449 501.527 254.2519 495.0342 246.2426 495.0342 c
f
1 1 0.58 0 (purple) 0.0726 x
246.0102 495.6916 m
238.2344 495.6916 231.9307 501.9952 231.9307 509.7711 c
231.9307 517.5469 238.2344 523.8506 246.0102 523.8506 c
253.786 523.8506 260.0897 517.5469 260.0897 509.7711 c
260.0897 501.9952 253.786 495.6916 246.0102 495.6916 c
f
1 1 0.58 0 (purple) 0.0806 x
245.7778 496.3487 m
238.2354 496.3487 232.1208 502.4631 232.1208 510.0057 c
232.1208 517.548 238.2354 523.6625 245.7778 523.6625 c
253.3202 523.6625 259.4348 517.548 259.4348 510.0057 c
259.4348 502.4631 253.3202 496.3487 245.7778 496.3487 c
f
1 1 0.58 0 (purple) 0.0887 x
245.5455 497.0059 m
238.2364 497.0059 232.311 502.9311 232.311 510.2403 c
232.311 517.5494 238.2364 523.4747 245.5455 523.4747 c
252.8545 523.4747 258.7799 517.5494 258.7799 510.2403 c
258.7799 502.9311 252.8545 497.0059 245.5455 497.0059 c
f
1 1 0.58 0 (purple) 0.0968 x
245.3131 497.663 m
238.2374 497.663 232.5012 503.3991 232.5012 510.4748 c
232.5012 517.5505 238.2374 523.2868 245.3131 523.2868 c
252.3888 523.2868 258.125 517.5505 258.125 510.4748 c
258.125 503.3991 252.3888 497.663 245.3131 497.663 c
f
1 1 0.58 0 (purple) 0.1048 x
245.0807 498.32 m
238.2384 498.32 232.6913 503.867 232.6913 510.7095 c
232.6913 517.5519 238.2384 523.0989 245.0807 523.0989 c
251.9231 523.0989 257.4701 517.5519 257.4701 510.7095 c
257.4701 503.867 251.9231 498.32 245.0807 498.32 c
f
1 1 0.58 0 (purple) 0.1129 x
244.8484 498.9773 m
238.2393 498.9773 232.8815 504.335 232.8815 510.9441 c
232.8815 517.5532 238.2393 522.911 244.8484 522.911 c
251.4574 522.911 256.8153 517.5532 256.8153 510.9441 c
256.8153 504.335 251.4574 498.9773 244.8484 498.9773 c
f
1 1 0.58 0 (purple) 0.121 x
244.616 499.6343 m
238.2403 499.6343 233.0717 504.803 233.0717 511.1788 c
233.0717 517.5543 238.2403 522.723 244.616 522.723 c
250.9917 522.723 256.1604 517.5543 256.1604 511.1788 c
256.1604 504.803 250.9917 499.6343 244.616 499.6343 c
f
1 1 0.58 0 (purple) 0.129 x
244.3837 500.2915 m
238.2413 500.2915 233.2618 505.2709 233.2618 511.4134 c
233.2618 517.5557 238.2413 522.5352 244.3837 522.5352 c
250.526 522.5352 255.5055 517.5557 255.5055 511.4134 c
255.5055 505.2709 250.526 500.2915 244.3837 500.2915 c
f
1 1 0.58 0 (purple) 0.1371 x
244.1513 500.9486 m
238.2423 500.9486 233.452 505.7389 233.452 511.648 c
233.452 517.5569 238.2423 522.3473 244.1513 522.3473 c
250.0603 522.3473 254.8506 517.5569 254.8506 511.648 c
254.8506 505.7389 250.0603 500.9486 244.1513 500.9486 c
f
1 1 0.58 0 (purple) 0.1452 x
243.9189 501.6058 m
238.2433 501.6058 233.6421 506.2069 233.6421 511.8825 c
233.6421 517.5581 238.2433 522.1593 243.9189 522.1593 c
249.5946 522.1593 254.1957 517.5581 254.1957 511.8825 c
254.1957 506.2069 249.5946 501.6058 243.9189 501.6058 c
f
1 1 0.58 0 (purple) 0.1532 x
243.6866 502.2629 m
238.2443 502.2629 233.8323 506.6748 233.8323 512.1172 c
233.8323 517.5595 238.2443 521.9714 243.6866 521.9714 c
249.1289 521.9714 253.5408 517.5595 253.5408 512.1172 c
253.5408 506.6748 249.1289 502.2629 243.6866 502.2629 c
f
1 1 0.58 0 (purple) 0.1613 x
243.4542 502.9201 m
238.2453 502.9201 234.0225 507.1428 234.0225 512.3518 c
234.0225 517.5606 238.2453 521.7835 243.4542 521.7835 c
248.6631 521.7835 252.886 517.5606 252.886 512.3518 c
252.886 507.1428 248.6631 502.9201 243.4542 502.9201 c
f
1 1 0.58 0 (purple) 0.1694 x
243.2218 503.5772 m
238.2463 503.5772 234.2126 507.6108 234.2126 512.5864 c
234.2126 517.5619 238.2463 521.5955 243.2218 521.5955 c
248.1974 521.5955 252.2311 517.5619 252.2311 512.5864 c
252.2311 507.6108 248.1974 503.5772 243.2218 503.5772 c
f
1 1 0.58 0 (purple) 0.1774 x
242.9895 504.2344 m
238.2473 504.2344 234.4028 508.0787 234.4028 512.8211 c
234.4028 517.5632 238.2473 521.4076 242.9895 521.4076 c
247.7317 521.4076 251.5762 517.5632 251.5762 512.8211 c
251.5762 508.0787 247.7317 504.2344 242.9895 504.2344 c
f
1 1 0.58 0 (purple) 0.1855 x
242.757 504.8917 m
238.2482 504.8917 234.5931 508.5469 234.5931 513.0558 c
234.5931 517.5644 238.2482 521.2196 242.757 521.2196 c
247.2658 521.2196 250.921 517.5644 250.921 513.0558 c
250.921 508.5469 247.2658 504.8917 242.757 504.8917 c
f
1 1 0.58 0 (purple) 0.1936 x
242.5247 505.5489 m
238.2492 505.5489 234.7832 509.0149 234.7832 513.2904 c
234.7832 517.5657 238.2492 521.0317 242.5247 521.0317 c
246.8001 521.0317 250.2661 517.5657 250.2661 513.2904 c
250.2661 509.0149 246.8001 505.5489 242.5247 505.5489 c
f
1 1 0.58 0 (purple) 0.2016 x
242.2923 506.2061 m
238.2502 506.2061 234.9734 509.4829 234.9734 513.525 c
234.9734 517.567 238.2502 520.8439 242.2923 520.8439 c
246.3344 520.8439 249.6112 517.567 249.6112 513.525 c
249.6112 509.4829 246.3344 506.2061 242.2923 506.2061 c
f
1 1 0.58 0 (purple) 0.2097 x
242.0599 506.8632 m
238.2512 506.8632 235.1635 509.9508 235.1635 513.7595 c
235.1635 517.5682 238.2512 520.6558 242.0599 520.6558 c
245.8687 520.6558 248.9563 517.5682 248.9563 513.7595 c
248.9563 509.9508 245.8687 506.8632 242.0599 506.8632 c
f
1 1 0.58 0 (purple) 0.2177 x
241.8276 507.5203 m
238.2522 507.5203 235.3537 510.4188 235.3537 513.9942 c
235.3537 517.5695 238.2522 520.468 241.8276 520.468 c
245.4029 520.468 248.3015 517.5695 248.3015 513.9942 c
248.3015 510.4188 245.4029 507.5203 241.8276 507.5203 c
f
1 1 0.58 0 (purple) 0.2258 x
241.5952 508.1775 m
238.2532 508.1775 235.5439 510.8868 235.5439 514.2288 c
235.5439 517.5708 238.2532 520.2801 241.5952 520.2801 c
244.9373 520.2801 247.6466 517.5708 247.6466 514.2288 c
247.6466 510.8868 244.9373 508.1775 241.5952 508.1775 c
f
1 1 0.58 0 (purple) 0.2339 x
241.3629 508.8346 m
238.2542 508.8346 235.734 511.3547 235.734 514.4634 c
235.734 517.572 238.2542 520.0922 241.3629 520.0922 c
244.4715 520.0922 246.9917 517.572 246.9917 514.4634 c
246.9917 511.3547 244.4715 508.8346 241.3629 508.8346 c
f
1 1 0.58 0 (purple) 0.2419 x
241.1305 509.4918 m
238.2552 509.4918 235.9242 511.8227 235.9242 514.6981 c
235.9242 517.5733 238.2552 519.9042 241.1305 519.9042 c
244.0058 519.9042 246.3368 517.5733 246.3368 514.6981 c
246.3368 511.8227 244.0058 509.4918 241.1305 509.4918 c
f
U
u
1 1 0.58 0 (purple) 0.25 x
240.8981 510.1489 m
243.5401 510.1489 245.6819 512.2907 245.6819 514.9327 c
245.6819 517.5746 243.5401 519.7164 240.8981 519.7164 c
238.2562 519.7164 236.1144 517.5746 236.1144 514.9327 c
236.1144 512.2907 238.2562 510.1489 240.8981 510.1489 c
f
U
u
1 1 0.58 0 (purple) 0.3583 x
240.866 510.6638 m
243.2578 510.6638 245.1968 512.6027 245.1968 514.9945 c
245.1968 517.3863 243.2578 519.3252 240.866 519.3252 c
238.4743 519.3252 236.5353 517.3863 236.5353 514.9945 c
236.5353 512.6027 238.4743 510.6638 240.866 510.6638 c
f
1 1 0.58 0 (purple) 0.4667 x
240.8339 511.1787 m
242.9755 511.1787 244.7116 512.9149 244.7116 515.0563 c
244.7116 517.1979 242.9755 518.934 240.8339 518.934 c
238.6923 518.934 236.9562 517.1979 236.9562 515.0563 c
236.9562 512.9149 238.6923 511.1787 240.8339 511.1787 c
f
1 1 0.58 0 (purple) 0.575 x
240.8018 511.6936 m
242.6932 511.6936 244.2265 513.2268 244.2265 515.1183 c
244.2265 517.0095 242.6932 518.5429 240.8018 518.5429 c
238.9104 518.5429 237.3771 517.0095 237.3771 515.1183 c
237.3771 513.2268 238.9104 511.6936 240.8018 511.6936 c
f
1 1 0.58 0 (purple) 0.6833 x
240.7697 512.2086 m
242.4108 512.2086 243.7413 513.539 243.7413 515.1802 c
243.7413 516.8213 242.4108 518.1518 240.7697 518.1518 c
239.1285 518.1518 237.798 516.8213 237.798 515.1802 c
237.798 513.539 239.1285 512.2086 240.7697 512.2086 c
f
1 1 0.58 0 (purple) 0.7917 x
240.7375 512.7235 m
242.1285 512.7235 243.2562 513.8511 243.2562 515.242 c
243.2562 516.633 242.1285 517.7606 240.7375 517.7606 c
239.3466 517.7606 238.2189 516.633 238.2189 515.242 c
238.2189 513.8511 239.3466 512.7235 240.7375 512.7235 c
f
U
u
1 1 0.58 0 (purple) 0.9 x
240.7054 513.2384 m
241.8462 513.2384 242.771 514.1632 242.771 515.304 c
242.771 516.4447 241.8462 517.3695 240.7054 517.3695 c
239.5647 517.3695 238.6399 516.4447 238.6399 515.304 c
238.6399 514.1632 239.5647 513.2384 240.7054 513.2384 c
f
U
U
u
0 0 1 0 (yellow) 0.5 x
0 R
0 G
0.5 w
201.2652 417.3035 m
200.6454 416.9938 200.7332 418.8981 200.0893 418.5763 C
191.6299 414.3495 L
190.8397 413.9546 190.825 412.1902 190.3128 411.9343 C
190.3128 384.4128 L
190.5114 381.2835 L
223.8611 397.9472 L
223.6625 426.747 L
223.0231 426.4275 223.0941 428.2106 222.3684 427.848 C
201.2652 417.3035 L
b
224.406 400.6213 m
224.406 425.3455 L
223.7666 425.0259 223.8376 426.809 223.1119 426.4465 C
202.0087 415.9019 L
201.3889 415.5923 201.4767 413.8791 200.8328 413.5573 C
192.3735 409.3305 L
191.5832 408.9356 191.5686 407.1712 191.0563 406.9153 C
191.0563 384.059 l
190.6702 381.2173 l
224.02 397.881 l
224.406 400.6213 L
b
0 0 1 0 (yellow) 0 X
191.2424 382.6015 m
223.8382 398.8791 l
S
191.441 384.2305 m
224.0368 400.5081 l
S
0 0 1 0 (yellow) 0.9 X
191.2424 382.4903 m
223.8382 398.7678 l
S
191.441 384.1193 m
224.0368 400.3968 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
201.7863 376.0113 m
201.3521 375.7943 201.4136 377.1284 200.9625 376.903 C
195.0359 373.9417 L
194.4823 373.6651 194.472 372.4289 194.1131 372.2496 C
194.1131 352.9683 L
194.2523 350.7759 L
217.6168 362.4504 L
217.4777 382.6273 L
217.0297 382.4035 217.0794 383.6527 216.571 383.3986 C
201.7863 376.0113 L
b
217.9985 364.3238 m
217.9985 381.6454 L
217.5506 381.4215 217.6003 382.6707 217.0919 382.4168 C
202.3072 375.0293 L
201.873 374.8124 201.9345 373.6121 201.4833 373.3867 C
195.5568 370.4254 L
195.0032 370.1488 194.9929 368.9127 194.634 368.7334 C
194.634 352.7204 l
194.3635 350.7295 l
217.7281 362.404 l
217.9985 364.3238 L
b
0 0 1 0 (yellow) 0 X
194.7644 351.6993 m
217.6007 363.1033 l
S
194.9035 352.8406 m
217.7399 364.2445 l
S
0 0 1 0 (yellow) 0.9 X
194.7644 351.6214 m
217.6007 363.0253 l
S
194.9035 352.7627 m
217.7399 364.1666 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
211.7863 365.3446 m
211.3521 365.1276 211.4136 366.4617 210.9625 366.2363 C
205.0359 363.275 L
204.4823 362.9984 204.472 361.7622 204.1131 361.583 C
204.1131 342.3016 L
204.2523 340.1092 L
227.6168 351.7837 L
227.4777 371.9606 L
227.0297 371.7368 227.0794 372.986 226.571 372.732 C
211.7863 365.3446 L
b
227.9985 353.6572 m
227.9985 370.9787 L
227.5506 370.7548 227.6003 372.0041 227.0919 371.7501 C
212.3072 364.3626 L
211.873 364.1457 211.9345 362.9455 211.4833 362.72 C
205.5568 359.7588 L
205.0032 359.4821 204.9929 358.246 204.634 358.0667 C
204.634 342.0538 l
204.3635 340.0629 l
227.7281 351.7373 l
227.9985 353.6572 L
b
0 0 1 0 (yellow) 0 X
204.7644 341.0326 m
227.6007 352.4366 l
S
204.9035 342.1739 m
227.7399 353.5779 l
S
0 0 1 0 (yellow) 0.9 X
204.7644 340.9547 m
227.6007 352.3586 l
S
204.9035 342.096 m
227.7399 353.4999 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
285.7863 415.3446 m
285.3521 415.1276 285.4136 416.4617 284.9625 416.2363 C
279.0359 413.275 L
278.4823 412.9984 278.472 411.7622 278.1131 411.583 C
278.1131 392.3016 L
278.2523 390.1092 L
301.6168 401.7837 L
301.4777 421.9606 L
301.0297 421.7368 301.0794 422.986 300.571 422.732 C
285.7863 415.3446 L
b
301.9985 403.6572 m
301.9985 420.9787 L
301.5506 420.7548 301.6003 422.0041 301.0919 421.7501 C
286.3072 414.3626 L
285.873 414.1457 285.9345 412.9455 285.4833 412.72 C
279.5568 409.7588 L
279.0032 409.4821 278.9929 408.246 278.634 408.0667 C
278.634 392.0538 l
278.3635 390.0629 l
301.7281 401.7373 l
301.9985 403.6572 L
b
0 0 1 0 (yellow) 0 X
278.7644 391.0326 m
301.6007 402.4366 l
S
278.9035 392.1739 m
301.7399 403.5779 l
S
0 0 1 0 (yellow) 0.9 X
278.7644 390.9547 m
301.6007 402.3586 l
S
278.9035 392.096 m
301.7399 403.4999 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
295.7863 404.6779 m
295.3521 404.4609 295.4136 405.7951 294.9625 405.5696 C
289.0359 402.6084 L
288.4823 402.3317 288.472 401.0956 288.1131 400.9163 C
288.1131 381.6349 L
288.2523 379.4426 L
311.6168 391.117 L
311.4777 411.2939 L
311.0297 411.0701 311.0794 412.3193 310.571 412.0653 C
295.7863 404.6779 L
b
311.9985 392.9905 m
311.9985 410.3121 L
311.5506 410.0882 311.6003 411.3374 311.0919 411.0834 C
296.3072 403.696 L
295.873 403.4791 295.9345 402.2788 295.4833 402.0534 C
289.5568 399.0921 L
289.0032 398.8154 288.9929 397.5793 288.634 397.4 C
288.634 381.3871 l
288.3635 379.3962 l
311.7281 391.0707 l
311.9985 392.9905 L
b
0 0 1 0 (yellow) 0 X
288.7644 380.366 m
311.6007 391.7699 l
S
288.9035 381.5072 m
311.7399 392.9112 l
S
0 0 1 0 (yellow) 0.9 X
288.7644 380.2881 m
311.6007 391.692 l
S
288.9035 381.4293 m
311.7399 392.8332 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
221.7863 354.6779 m
221.3521 354.4609 221.4136 355.7951 220.9625 355.5696 C
215.0359 352.6084 L
214.4823 352.3317 214.472 351.0956 214.1131 350.9163 C
214.1131 331.6349 L
214.2523 329.4426 L
237.6168 341.117 L
237.4777 361.2939 L
237.0297 361.0701 237.0794 362.3193 236.571 362.0653 C
221.7863 354.6779 L
b
237.9985 342.9905 m
237.9985 360.3121 L
237.5506 360.0882 237.6003 361.3374 237.0919 361.0834 C
222.3072 353.696 L
221.873 353.4791 221.9345 352.2788 221.4833 352.0534 C
215.5568 349.0921 L
215.0032 348.8154 214.9929 347.5793 214.634 347.4 C
214.634 331.3871 l
214.3635 329.3962 l
237.7281 341.0707 l
237.9985 342.9905 L
b
0 0 1 0 (yellow) 0 X
214.7644 330.366 m
237.6007 341.7699 l
S
214.9035 331.5072 m
237.7399 342.9112 l
S
0 0 1 0 (yellow) 0.9 X
214.7644 330.2881 m
237.6007 341.692 l
S
214.9035 331.4293 m
237.7399 342.8332 l
S
U
u
0 O
0 0 1 0 (yellow) 0.5 x
0 G
285.6479 458.2441 m
285.0281 457.9344 285.1159 459.8387 284.472 459.5169 C
276.0126 455.2901 L
275.2223 454.8952 275.2077 453.1308 274.6954 452.8749 C
274.6954 425.3534 L
274.894 422.2241 L
308.2438 438.8878 L
308.0452 467.6876 L
307.4058 467.3681 307.4768 469.1512 306.7511 468.7887 C
285.6479 458.2441 L
b
308.7887 441.5619 m
308.7887 466.2861 L
308.1493 465.9665 308.2203 467.7497 307.4946 467.3871 C
286.3914 456.8426 L
285.7716 456.5329 285.8594 454.8197 285.2155 454.4979 C
276.7561 450.2711 L
275.9658 449.8762 275.9512 448.1118 275.439 447.8559 C
275.439 424.9997 l
275.0529 422.158 l
308.4027 438.8216 l
308.7887 441.5619 L
b
0 0 1 0 (yellow) 0 X
275.6251 423.5421 m
308.2209 439.8197 l
S
275.8237 425.1712 m
308.4195 441.4487 l
S
0 0 1 0 (yellow) 0.9 X
275.6251 423.4309 m
308.2209 439.7084 l
S
275.8237 425.06 m
308.4195 441.3375 l
S
U
0 To
1 0 0 1 249 502.875 0 Tp
TP
-8.5029 0 Td
0 Tr
0 O
1 g
1 w
/_Helvetica 8 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(UNS) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 207.0417 401.5317 0 Tp
TP
-7.9004 0 Td
0 Tr
0 g
(/ns/\245) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 292.9583 446.4723 0 Tp
TP
-12.085 0 Td
0 Tr
(/var/ns\r) Tx 
0.2207 -9.5 Td
(/cache) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 330.3233 540.9939 0 Tp
TP
-6.4922 0 Td
0 Tr
(nsd) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 221.7083 377.57 0 Tp
TP
0 Tr
0 Ta
(passwd.byname) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 231.375 367.9033 0 Tp
TP
0 Tr
(passwd.byuid) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 241.0417 358.2367 0 Tp
TP
0 Tr
(passwd) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 305.1773 417.5877 0 Tp
TP
0 Tr
(passwd.byname) Tx 
(\r) TX 
TO
0 To
0.8946 0.447 0 1 314.844 407.9211 0 Tp
TP
0 Tr
(passwd.byuid) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
