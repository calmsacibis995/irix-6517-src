%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.5
%%For: () ()
%%Title: (BIND.configuration.ai)
%%CreationDate: (1/26/96) (10:18 AM)
%%BoundingBox: 103 213 447 494
%%DocumentProcessColors: Black
%%DocumentFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%DocumentCustomColors: (blue)
%%+ (flesh)
%%+ (green)
%%+ (orange)
%%+ (PANTONE 260 CV)
%%+ (red)
%%+ (yellow)
%%CMYKCustomColor: 1 0 0 0 (blue)
%%+ 0.5 0.75 1 0.35 (brown)
%%+ 0.25 0.55 1 0.4 (dark gold)
%%+ 0.05 0.5 0.8 0 (flesh)
%%+ 0.15 0.55 1 0 (gold)
%%+ 1 0 1 0 (green)
%%+ 0 0.6 1 0 (orange)
%%+ 0.6 1 0 0.34 (PANTONE 260 CV)
%%+ 0 1 0.85 0 (red)
%%+ 0 0.15 1 0 (yellow)
%AI3_TemplateBox: 279 364 279 364
%AI3_TileBox: 0 0 552 728
%AI3_DocumentPreview: Header
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			break
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
2 To
1 0 0 1 -4041 4684 1.4183 Tp
0 i
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
112.62 353.4018 m
112.62 426.0164 185.3389 484.8842 275.0394 484.8842 c
364.7399 484.8842 437.459 426.0164 437.459 353.4018 c
437.459 280.787 364.7399 221.9193 275.0394 221.9193 c
185.3389 221.9193 112.62 280.787 112.62 353.4018 c
n
TP
0.9626 -0.2711 0.2711 0.9626 327.245 477.9488 Tm
0 Tr
0 O
0 g
/_Helvetica 8 Tf
0 Ts
110 Tz
1000 Tt
1 TA
-50 0 500 TC
0 100 1000 TW
0 0 0 Ti
1 Ta
0 Tq
0 0 Tl
8 Tc
0 Tw
(f) Tx
0.9441 -0.3297 0.3297 0.9441 337.9258 474.6717 Tm
(r) Tx 1 -15 Tk
0.9185 -0.3955 0.3955 0.9185 348.9413 470.5346 Tm
(u) Tx
0.8888 -0.4583 0.4583 0.8888 361.3083 464.8271 Tm
(i) Tx
0.8572 -0.5149 0.5149 0.8572 370.6725 459.6919 Tm
(t) Tx
0.8198 -0.5727 0.5727 0.8198 380.0937 453.6858 Tm
(.) Tx
0.7725 -0.6351 0.6351 0.7725 389.0658 447.0541 Tm
(c) Tx
0.7116 -0.7025 0.7025 0.7116 398.9436 438.4454 Tm
(o) Tx
0.6322 -0.7748 0.7748 0.6322 408.3307 428.6301 Tm
(m) Tx
(fruit.com\r) TX 
TO
u
1 0 1 0 (green) 0.9864 x
275.0419 222.6763 m
364.2162 222.6763 436.5086 281.1987 436.5086 353.3874 c
436.5086 425.5761 364.2162 484.0986 275.0419 484.0986 c
185.8677 484.0986 113.5753 425.5761 113.5753 353.3874 c
113.5753 281.1987 185.8677 222.6763 275.0419 222.6763 c
f
1 0 1 0 (green) 0.9727 x
275.0445 223.4333 m
363.6925 223.4333 435.5582 281.6104 435.5582 353.373 c
435.5582 425.1358 363.6925 483.3129 275.0445 483.3129 c
186.3964 483.3129 114.5306 425.1358 114.5306 353.373 c
114.5306 281.6104 186.3964 223.4333 275.0445 223.4333 c
f
1 0 1 0 (green) 0.9591 x
275.047 224.1903 m
363.1687 224.1903 434.6079 282.022 434.6079 353.3587 c
434.6079 424.6955 363.1687 482.5272 275.047 482.5272 c
186.9251 482.5272 115.486 424.6955 115.486 353.3587 c
115.486 282.022 186.9251 224.1903 275.047 224.1903 c
f
1 0 1 0 (green) 0.9454 x
275.0495 224.9472 m
362.6451 224.9472 433.6577 282.4336 433.6577 353.3444 c
433.6577 424.2552 362.6451 481.7416 275.0495 481.7416 c
187.4538 481.7416 116.4411 424.2552 116.4411 353.3444 c
116.4411 282.4336 187.4538 224.9472 275.0495 224.9472 c
f
1 0 1 0 (green) 0.9318 x
275.0519 225.7042 m
362.1214 225.7042 432.7074 282.8453 432.7074 353.3301 c
432.7074 423.8149 362.1214 480.9559 275.0519 480.9559 c
187.9825 480.9559 117.3965 423.8149 117.3965 353.3301 c
117.3965 282.8453 187.9825 225.7042 275.0519 225.7042 c
f
1 0 1 0 (green) 0.9182 x
275.0544 226.4612 m
361.5977 226.4612 431.7571 283.257 431.7571 353.3158 c
431.7571 423.3745 361.5977 480.1703 275.0544 480.1703 c
188.5112 480.1703 118.3518 423.3745 118.3518 353.3158 c
118.3518 283.257 188.5112 226.4612 275.0544 226.4612 c
f
1 0 1 0 (green) 0.9046 x
275.0569 227.2182 m
361.074 227.2182 430.8068 283.6686 430.8068 353.3014 c
430.8068 422.9342 361.074 479.3846 275.0569 479.3846 c
189.0399 479.3846 119.3071 422.9342 119.3071 353.3014 c
119.3071 283.6686 189.0399 227.2182 275.0569 227.2182 c
f
1 0 1 0 (green) 0.8909 x
275.0595 227.9751 m
360.5503 227.9751 429.8566 284.0802 429.8566 353.2871 c
429.8566 422.4939 360.5503 478.599 275.0595 478.599 c
189.5686 478.599 120.2623 422.4939 120.2623 353.2871 c
120.2623 284.0802 189.5686 227.9751 275.0595 227.9751 c
f
1 0 1 0 (green) 0.8773 x
275.062 228.7321 m
360.0266 228.7321 428.9063 284.4918 428.9063 353.2727 c
428.9063 422.0537 360.0266 477.8134 275.062 477.8134 c
190.0974 477.8134 121.2177 422.0537 121.2177 353.2727 c
121.2177 284.4918 190.0974 228.7321 275.062 228.7321 c
f
1 0 1 0 (green) 0.8636 x
275.0645 229.4891 m
359.5029 229.4891 427.956 284.9035 427.956 353.2584 c
427.956 421.6133 359.5029 477.0277 275.0645 477.0277 c
190.626 477.0277 122.173 421.6133 122.173 353.2584 c
122.173 284.9035 190.626 229.4891 275.0645 229.4891 c
f
U
1 0 1 0 (green) 0.85 x
275.067 230.2461 m
358.9792 230.2461 427.0056 285.3152 427.0056 353.2441 c
427.0056 421.173 358.9792 476.2421 275.067 476.2421 c
191.1548 476.2421 123.1284 421.173 123.1284 353.2441 c
123.1284 285.3152 191.1548 230.2461 275.067 230.2461 c
f
u
1 0 1 0 (green) 0.8636 x
275.0744 231.1481 m
358.3612 231.1481 425.8806 285.8067 425.8806 353.2293 c
425.8806 420.6519 358.3612 475.3105 275.0744 475.3105 c
191.7877 475.3105 124.2683 420.6519 124.2683 353.2293 c
124.2683 285.8067 191.7877 231.1481 275.0744 231.1481 c
f
1 0 1 0 (green) 0.8773 x
275.0819 232.0501 m
357.7432 232.0501 424.7556 286.2982 424.7556 353.2145 c
424.7556 420.1308 357.7432 474.379 275.0819 474.379 c
192.4206 474.379 125.4082 420.1308 125.4082 353.2145 c
125.4082 286.2982 192.4206 232.0501 275.0819 232.0501 c
f
1 0 1 0 (green) 0.8909 x
275.0893 232.952 m
357.1252 232.952 423.6306 286.7897 423.6306 353.1997 c
423.6306 419.6096 357.1252 473.4474 275.0893 473.4474 c
193.0534 473.4474 126.5481 419.6096 126.5481 353.1997 c
126.5481 286.7897 193.0534 232.952 275.0893 232.952 c
f
1 0 1 0 (green) 0.9046 x
275.0968 233.8538 m
356.5073 233.8538 422.5058 287.2812 422.5058 353.1849 c
422.5058 419.0887 356.5073 472.516 275.0968 472.516 c
193.6863 472.516 127.6878 419.0887 127.6878 353.1849 c
127.6878 287.2812 193.6863 233.8538 275.0968 233.8538 c
f
1 0 1 0 (green) 0.9182 x
275.1043 234.7558 m
355.8893 234.7558 421.3808 287.7727 421.3808 353.1701 c
421.3808 418.5676 355.8893 471.5845 275.1043 471.5845 c
194.3192 471.5845 128.8277 418.5676 128.8277 353.1701 c
128.8277 287.7727 194.3192 234.7558 275.1043 234.7558 c
f
1 0 1 0 (green) 0.9318 x
275.1117 235.6578 m
355.2714 235.6578 420.2558 288.2642 420.2558 353.1554 c
420.2558 418.0465 355.2714 470.6529 275.1117 470.6529 c
194.9521 470.6529 129.9676 418.0465 129.9676 353.1554 c
129.9676 288.2642 194.9521 235.6578 275.1117 235.6578 c
f
1 0 1 0 (green) 0.9454 x
275.1192 236.5597 m
354.6535 236.5597 419.1308 288.7557 419.1308 353.1405 c
419.1308 417.5254 354.6535 469.7213 275.1192 469.7213 c
195.5849 469.7213 131.1076 417.5254 131.1076 353.1405 c
131.1076 288.7557 195.5849 236.5597 275.1192 236.5597 c
f
1 0 1 0 (green) 0.9591 x
275.1266 237.4616 m
354.0355 237.4616 418.0059 289.2471 418.0059 353.1258 c
418.0059 417.0044 354.0355 468.7899 275.1266 468.7899 c
196.2178 468.7899 132.2473 417.0044 132.2473 353.1258 c
132.2473 289.2471 196.2178 237.4616 275.1266 237.4616 c
f
1 0 1 0 (green) 0.9727 x
275.1341 238.3635 m
353.4176 238.3635 416.8809 289.7387 416.8809 353.111 c
416.8809 416.4833 353.4176 467.8584 275.1341 467.8584 c
196.8507 467.8584 133.3873 416.4833 133.3873 353.111 c
133.3873 289.7387 196.8507 238.3635 275.1341 238.3635 c
f
1 0 1 0 (green) 0.9864 x
275.1416 239.2655 m
352.7996 239.2655 415.7559 290.2301 415.7559 353.0961 c
415.7559 415.9622 352.7996 466.9268 275.1416 466.9268 c
197.4836 466.9268 134.5272 415.9622 134.5272 353.0961 c
134.5272 290.2301 197.4836 239.2655 275.1416 239.2655 c
f
U
1 0 1 0 (green) 1 x
275.149 240.1675 m
352.1816 240.1675 414.6309 290.7216 414.6309 353.0814 c
414.6309 415.4411 352.1816 465.9953 275.149 465.9953 c
198.1164 465.9953 135.6671 415.4411 135.6671 353.0814 c
135.6671 290.7216 198.1164 240.1675 275.149 240.1675 c
f
0 R
1 0 0 0 (blue) 0 X
3 w
300.6656 389.6378 m
221.9113 428.9887 l
S
204.7695 389.6198 m
174.4013 404.7938 l
S
276.6215 346.7764 m
246.2532 361.9504 l
S
320.9745 308.5549 m
290.6062 323.7289 l
S
353.8581 325.4713 m
323.4898 340.6453 l
S
386.7415 342.3877 m
356.3733 357.5618 l
S
276.181 335.0867 m
236.5809 315.2998 l
S
267.0758 300.7219 m
238.751 286.5688 l
S
300.7999 284.1007 m
272.475 269.9477 l
S
338.9636 349.1425 m
280.6024 378.3037 l
S
0 O
1 g
1 0 0 0 (blue) 1 X
5 w
288.4545 462.6215 m
146.8536 391.7339 l
B
u
1 0 0 0 (blue) 0.9615 X
287.6192 462.2041 m
147.8228 392.2182 L
B
1 0 0 0 (blue) 0.9231 X
286.784 461.7866 m
148.7921 392.7025 L
B
1 0 0 0 (blue) 0.8846 X
285.9491 461.3694 m
149.761 393.1865 L
B
1 0 0 0 (blue) 0.8461 X
285.1137 460.9519 m
150.7302 393.6706 L
B
1 0 0 0 (blue) 0.8077 X
284.2789 460.5347 m
151.6991 394.1547 L
B
1 0 0 0 (blue) 0.7692 X
283.4436 460.1172 m
152.6682 394.6389 L
B
1 0 0 0 (blue) 0.7308 X
282.6087 459.7001 m
153.637 395.123 L
B
1 0 0 0 (blue) 0.6923 X
281.7735 459.2825 m
154.6063 395.6071 L
B
1 0 0 0 (blue) 0.6538 X
280.9383 458.8652 m
155.5756 396.0914 L
B
1 0 0 0 (blue) 0.6154 X
280.1033 458.4479 m
156.5444 396.5754 L
B
1 0 0 0 (blue) 0.5769 X
279.2682 458.0305 m
157.5136 397.0597 L
B
1 0 0 0 (blue) 0.5385 X
278.4331 457.6133 m
158.4824 397.5436 L
B
1 0 0 0 (blue) 0.5 X
277.5979 457.1958 m
159.4517 398.0278 L
B
1 0 0 0 (blue) 0.4615 X
276.7627 456.7784 m
160.4209 398.5121 L
B
1 0 0 0 (blue) 0.4231 X
275.9278 456.3612 m
161.3898 398.9961 L
B
1 0 0 0 (blue) 0.3846 X
275.0925 455.9438 m
162.3589 399.4803 L
B
1 0 0 0 (blue) 0.3462 X
274.2576 455.5265 m
163.3278 399.9643 L
B
1 0 0 0 (blue) 0.3077 X
273.4223 455.1091 m
164.2971 400.4485 L
B
1 0 0 0 (blue) 0.2692 X
272.5875 454.6918 m
165.2659 400.9326 L
B
1 0 0 0 (blue) 0.2308 X
271.7522 454.2744 m
166.2351 401.4168 L
B
1 0 0 0 (blue) 0.1923 X
270.9169 453.8569 m
167.2044 401.901 L
B
1 0 0 0 (blue) 0.1539 X
270.0821 453.4397 m
168.1732 402.385 L
B
1 0 0 0 (blue) 0.1154 X
269.2468 453.0223 m
169.1425 402.8693 L
B
1 0 0 0 (blue) 0.0769 X
268.412 452.605 m
170.1113 403.3533 L
B
1 0 0 0 (blue) 0.0385 X
267.5767 452.1876 m
171.0804 403.8374 L
B
U
1 0 0 0 (blue) 0 X
266.7414 451.7702 m
172.0498 404.3217 l
B
1 0 0 0 (blue) 1 X
334.7809 406.6917 m
200.3108 339.3351 l
B
u
1 0 0 0 (blue) 0.9615 X
333.9456 406.2743 m
201.28 339.8193 L
B
1 0 0 0 (blue) 0.9231 X
333.1104 405.8568 m
202.2492 340.3036 L
B
1 0 0 0 (blue) 0.8846 X
332.2755 405.4396 m
203.2181 340.7876 L
B
1 0 0 0 (blue) 0.8461 X
331.4401 405.0222 m
204.1874 341.2718 L
B
1 0 0 0 (blue) 0.8077 X
330.6053 404.6049 m
205.1561 341.7559 L
B
1 0 0 0 (blue) 0.7692 X
329.77 404.1875 m
206.1253 342.24 L
B
1 0 0 0 (blue) 0.7308 X
328.9351 403.7703 m
207.0942 342.7241 L
B
1 0 0 0 (blue) 0.6923 X
328.0999 403.3528 m
208.0634 343.2083 L
B
1 0 0 0 (blue) 0.6538 X
327.2647 402.9354 m
209.0326 343.6925 L
B
1 0 0 0 (blue) 0.6154 X
326.4297 402.5182 m
210.0015 344.1764 L
B
1 0 0 0 (blue) 0.5769 X
325.5946 402.1008 m
210.9707 344.6608 L
B
1 0 0 0 (blue) 0.5385 X
324.7595 401.6835 m
211.9396 345.1448 L
B
1 0 0 0 (blue) 0.5 X
323.9243 401.266 m
212.9089 345.629 L
B
1 0 0 0 (blue) 0.4615 X
323.0891 400.8486 m
213.878 346.1132 L
B
1 0 0 0 (blue) 0.4231 X
322.2542 400.4314 m
214.8469 346.5972 L
B
1 0 0 0 (blue) 0.3846 X
321.419 400.014 m
215.8161 347.0814 L
B
1 0 0 0 (blue) 0.3462 X
320.584 399.5968 m
216.7849 347.5655 L
B
1 0 0 0 (blue) 0.3077 X
319.7487 399.1793 m
217.7541 348.0496 L
B
1 0 0 0 (blue) 0.2692 X
318.9139 398.7621 m
218.723 348.5337 L
B
1 0 0 0 (blue) 0.2308 X
318.0786 398.3446 m
219.6922 349.018 L
B
1 0 0 0 (blue) 0.1923 X
317.2434 397.9272 m
220.6615 349.5022 L
B
1 0 0 0 (blue) 0.1539 X
316.4085 397.5099 m
221.6304 349.9862 L
B
1 0 0 0 (blue) 0.1154 X
315.5732 397.0925 m
222.5995 350.4704 L
B
1 0 0 0 (blue) 0.0769 X
314.7384 396.6752 m
223.5683 350.9544 L
B
1 0 0 0 (blue) 0.0385 X
313.9031 396.2579 m
224.5376 351.4386 L
B
U
1 0 0 0 (blue) 0 X
313.0678 395.8405 m
225.5069 351.9228 l
B
1 0 0 0 (blue) 1 X
401.1237 379.0995 m
266.6537 311.7428 l
B
u
1 0 0 0 (blue) 0.9615 X
400.2885 378.682 m
267.6228 312.227 L
B
1 0 0 0 (blue) 0.9231 X
399.4533 378.2646 m
268.5921 312.7114 L
B
1 0 0 0 (blue) 0.8846 X
398.6183 377.8473 m
269.5609 313.1953 L
B
1 0 0 0 (blue) 0.8461 X
397.783 377.4299 m
270.5301 313.6795 L
B
1 0 0 0 (blue) 0.8077 X
396.9481 377.0126 m
271.4991 314.1636 L
B
1 0 0 0 (blue) 0.7692 X
396.1128 376.5952 m
272.4682 314.6478 L
B
1 0 0 0 (blue) 0.7308 X
395.278 376.178 m
273.437 315.1318 L
B
1 0 0 0 (blue) 0.6923 X
394.4427 375.7605 m
274.4063 315.616 L
B
1 0 0 0 (blue) 0.6538 X
393.6075 375.3432 m
275.3755 316.1002 L
B
1 0 0 0 (blue) 0.6154 X
392.7726 374.9259 m
276.3443 316.5842 L
B
1 0 0 0 (blue) 0.5769 X
391.9374 374.5084 m
277.3136 317.0684 L
B
1 0 0 0 (blue) 0.5385 X
391.1024 374.0912 m
278.2824 317.5524 L
B
1 0 0 0 (blue) 0.5 X
390.2671 373.6737 m
279.2517 318.0367 L
B
1 0 0 0 (blue) 0.4615 X
389.4319 373.2564 m
280.2209 318.521 L
B
1 0 0 0 (blue) 0.4231 X
388.597 372.8391 m
281.1898 319.005 L
B
1 0 0 0 (blue) 0.3846 X
387.7618 372.4217 m
282.1589 319.4891 L
B
1 0 0 0 (blue) 0.3462 X
386.9269 372.0044 m
283.1278 319.9732 L
B
1 0 0 0 (blue) 0.3077 X
386.0916 371.587 m
284.097 320.4574 L
B
1 0 0 0 (blue) 0.2692 X
385.2567 371.1697 m
285.0659 320.9415 L
B
1 0 0 0 (blue) 0.2308 X
384.4215 370.7523 m
286.0351 321.4257 L
B
1 0 0 0 (blue) 0.1923 X
383.5862 370.3349 m
287.0043 321.9098 L
B
1 0 0 0 (blue) 0.1539 X
382.7513 369.9177 m
287.9732 322.3939 L
B
1 0 0 0 (blue) 0.1154 X
381.9161 369.5002 m
288.9425 322.8782 L
B
1 0 0 0 (blue) 0.0769 X
381.0811 369.083 m
289.9112 323.3621 L
B
1 0 0 0 (blue) 0.0385 X
380.2459 368.6656 m
290.8804 323.8463 L
B
U
1 0 0 0 (blue) 0 X
379.4107 368.2481 m
291.8498 324.3305 l
B
1 0 0 0 (blue) 1 X
350.3433 258.5439 m
215.8732 325.9006 l
B
u
1 0 0 0 (blue) 0.9615 X
349.5081 258.9614 m
216.8425 325.4164 L
B
1 0 0 0 (blue) 0.9231 X
348.6728 259.3788 m
217.8117 324.932 L
B
1 0 0 0 (blue) 0.8846 X
347.838 259.796 m
218.7806 324.4481 L
B
1 0 0 0 (blue) 0.8461 X
347.0026 260.2135 m
219.7498 323.9639 L
B
1 0 0 0 (blue) 0.8077 X
346.1678 260.6307 m
220.7186 323.4799 L
B
1 0 0 0 (blue) 0.7692 X
345.3325 261.0482 m
221.6878 322.9956 L
B
1 0 0 0 (blue) 0.7308 X
344.4976 261.4654 m
222.6567 322.5116 L
B
1 0 0 0 (blue) 0.6923 X
343.6624 261.8829 m
223.6259 322.0274 L
B
1 0 0 0 (blue) 0.6538 X
342.8271 262.3002 m
224.5951 321.5432 L
B
1 0 0 0 (blue) 0.6154 X
341.9922 262.7176 m
225.564 321.0592 L
B
1 0 0 0 (blue) 0.5769 X
341.157 263.1349 m
226.5332 320.5749 L
B
1 0 0 0 (blue) 0.5385 X
340.322 263.5523 m
227.5021 320.091 L
B
1 0 0 0 (blue) 0.5 X
339.4868 263.9696 m
228.4713 319.6067 L
B
1 0 0 0 (blue) 0.4615 X
338.6516 264.387 m
229.4405 319.1224 L
B
1 0 0 0 (blue) 0.4231 X
337.8166 264.8043 m
230.4094 318.6384 L
B
1 0 0 0 (blue) 0.3846 X
336.9815 265.2217 m
231.3786 318.1543 L
B
1 0 0 0 (blue) 0.3462 X
336.1465 265.639 m
232.3474 317.6702 L
B
1 0 0 0 (blue) 0.3077 X
335.3112 266.0564 m
233.3166 317.186 L
B
1 0 0 0 (blue) 0.2692 X
334.4764 266.4737 m
234.2855 316.7019 L
B
1 0 0 0 (blue) 0.2308 X
333.6411 266.8911 m
235.2547 316.2178 L
B
1 0 0 0 (blue) 0.1923 X
332.8058 267.3085 m
236.224 315.7335 L
B
1 0 0 0 (blue) 0.1539 X
331.9709 267.7257 m
237.1928 315.2496 L
B
1 0 0 0 (blue) 0.1154 X
331.1357 268.1432 m
238.162 314.7653 L
B
1 0 0 0 (blue) 0.0769 X
330.3008 268.5604 m
239.1308 314.2813 L
B
1 0 0 0 (blue) 0.0385 X
329.4656 268.9778 m
240.1001 313.7971 L
B
U
1 0 0 0 (blue) 0 X
328.6302 269.3953 m
241.0693 313.3129 l
B
u
1 0 1 0 (green) 0.5 x
0 G
0.5 w
196.925 392.3388 m
217.5601 402.6033 l
226.5892 398.1155 L
205.9846 387.8324 l
196.925 392.3388 L
b
1 0 1 0 (green) 0.25 x
205.9846 375.6639 m
196.925 380.1702 L
196.925 392.3388 L
205.9846 387.8324 L
205.9846 375.6639 L
b
1 0 1 0 (green) 0 x
205.9846 387.8324 m
226.5892 398.1155 L
226.5892 385.9592 L
205.9846 375.6639 L
205.9846 387.8324 L
b
U
0 To
0.9067 0.4217 0 1 207.8154 401 0 Tp
TP
-11.7766 0 Td
0 Tr
0 g
/_Helvetica 8 Tf
99.2619 Tz
0 Tt
0 Tc
(apples) Tx
(\r) TX 
TO
u
0 0.6 1 0 (orange) 0.5 x
0 R
0 G
243.9836 417.7458 m
264.6188 428.0101 l
273.6479 423.5224 L
253.0433 413.2393 l
243.9836 417.7458 L
b
0 0.6 1 0 (orange) 0.25 x
253.0433 401.0708 m
243.9836 405.5771 L
243.9836 417.7458 L
253.0433 413.2393 L
253.0433 401.0708 L
b
0 0.6 1 0 (orange) 0 x
253.0433 413.2393 m
273.6479 423.5224 L
273.6479 411.3661 L
253.0433 401.0708 L
253.0433 413.2393 L
b
U
0 To
0.9067 0.4217 0 1 256.7523 427.5 0 Tp
TP
-14.4045 0 Td
0 Tr
0 g
(or) Tx 1 10 Tk
(anges) Tx
(\r) TX 
TO
u
0.6 1 0 0.34 (PANTONE 260 CV) 0.5 x
0 R
0 G
306.2336 314.8764 m
326.8686 325.1408 l
335.8978 320.653 L
315.2933 310.37 l
306.2336 314.8764 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0.25 x
315.2933 298.2014 m
306.2336 302.7077 L
306.2336 314.8764 L
315.2933 310.37 L
315.2933 298.2014 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0 x
315.2933 310.37 m
335.8978 320.653 L
335.8978 308.4968 L
315.2933 298.2014 L
315.2933 310.37 L
b
U
0 To
0.9067 0.4217 0 1 319.383 324.568 0 Tp
TP
-10.8857 0 Td
0 Tr
0 g
1 w
(plum1) Tx
(\r) TX 
TO
u
0.6 1 0 0.34 (PANTONE 260 CV) 0.5 x
0 R
0 G
0.5 w
339.3505 331.8084 m
359.9857 342.0727 l
369.0147 337.5851 L
348.4102 327.3019 l
339.3505 331.8084 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0.25 x
348.4102 315.1334 m
339.3505 319.6397 L
339.3505 331.8084 L
348.4102 327.3019 L
348.4102 315.1334 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0 x
348.4102 327.3019 m
369.0147 337.5851 L
369.0147 325.4288 L
348.4102 315.1334 L
348.4102 327.3019 L
b
U
0 To
0.9067 0.4217 0 1 352.5 341.5 0 Tp
TP
-10.8857 0 Td
0 Tr
0 g
1 w
(plum2) Tx
(\r) TX 
TO
u
0.6 1 0 0.34 (PANTONE 260 CV) 0.5 x
0 R
0 G
0.5 w
372.3426 348.4232 m
392.9777 358.6875 l
402.0068 354.1998 L
381.4023 343.9167 l
372.3426 348.4232 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0.25 x
381.4023 331.7481 m
372.3426 336.2545 L
372.3426 348.4232 L
381.4023 343.9167 L
381.4023 331.7481 L
b
0.6 1 0 0.34 (PANTONE 260 CV) 0 x
381.4023 343.9167 m
402.0068 354.1998 L
402.0068 342.0435 L
381.4023 331.7481 L
381.4023 343.9167 L
b
U
0 To
0.9067 0.4217 0 1 385.492 358.1147 0 Tp
TP
-10.8857 0 Td
0 Tr
0 g
1 w
(plum3) Tx
(\r) TX 
TO
u
0 1 0.85 0 (red) 0.5 x
0 R
0 G
0.5 w
304.2882 366.0939 m
324.9233 376.3583 l
333.9524 371.8705 L
313.3479 361.5874 l
304.2882 366.0939 L
b
0 1 0.85 0 (red) 0.25 x
313.3479 349.4189 m
304.2882 353.9252 L
304.2882 366.0939 L
313.3479 361.5874 L
313.3479 349.4189 L
b
0 1 0.85 0 (red) 0 x
313.3479 361.5874 m
333.9524 371.8705 L
333.9524 359.7142 L
313.3479 349.4189 L
313.3479 361.5874 L
b
U
0 To
0.9067 0.4217 0 1 317.4376 375.7855 0 Tp
TP
-10.7122 0 Td
0 Tr
0 g
1 w
(gua) Tx 1 20 Tk
(v) Tx 1 25 Tk
(a) Tx
(\r) TX 
TO
u
0 0.15 1 0 (yellow) 0.5 x
0 R
0 G
0.5 w
271.4825 348.9116 m
292.1177 359.1759 l
301.1467 354.6882 L
280.5422 344.4051 l
271.4825 348.9116 L
b
0 0.15 1 0 (yellow) 0.25 x
280.5422 332.2366 m
271.4825 336.7429 L
271.4825 348.9116 L
280.5422 344.4051 L
280.5422 332.2366 L
b
0 0.15 1 0 (yellow) 0 x
280.5422 344.4051 m
301.1467 354.6882 L
301.1467 342.5319 L
280.5422 332.2366 L
280.5422 344.4051 L
b
U
0 To
0.9067 0.4217 0 1 283.7512 357.1641 0 Tp
TP
-13.3363 0 Td
0 Tr
0 g
1 w
(banana) Tx
(\r) TX 
TO
u
0.05 0.5 0.8 0 (flesh) 0.5 x
0 R
0 G
0.5 w
207.0385 284.8584 m
235.5327 299.2986 l
244.5618 294.8108 L
216.0982 280.3519 l
207.0385 284.8584 L
b
0.05 0.5 0.8 0 (flesh) 0.25 x
216.0982 268.1835 m
207.0385 272.6898 L
207.0385 284.8584 L
216.0982 280.3519 L
216.0982 268.1835 L
b
0.05 0.5 0.8 0 (flesh) 0 x
216.0982 280.3519 m
244.5618 294.8108 L
244.5618 282.6546 L
216.0982 268.1835 L
216.0982 280.3519 L
b
U
0 To
0.9067 0.4217 0 1 224.2184 296.3702 0 Tp
TP
-19.5556 0 Td
0 Tr
0 g
1 w
(pineapple1) Tx
(\r) TX 
TO
u
0.05 0.5 0.8 0 (flesh) 0.5 x
0 R
0 G
0.5 w
237.261 266.4164 m
265.7551 280.8566 l
274.7842 276.3688 L
246.3207 261.9099 l
237.261 266.4164 L
b
0.05 0.5 0.8 0 (flesh) 0.25 x
246.3207 249.7415 m
237.261 254.2478 L
237.261 266.4164 L
246.3207 261.9099 L
246.3207 249.7415 L
b
0.05 0.5 0.8 0 (flesh) 0 x
246.3207 261.9099 m
274.7842 276.3688 L
274.7842 264.2126 L
246.3207 249.7415 L
246.3207 261.9099 L
b
U
0 To
0.9067 0.4217 0 1 254.4409 277.9282 0 Tp
TP
-19.5556 0 Td
0 Tr
0 g
1 w
(pineapple2) Tx
(\r) TX 
TO
0 To
1 0 0 1 207.1029 369.2908 0 Tp
TP
-13.9456 0 Td
0 Tr
99.2664 Tz
8 0 Tl
(Pr) Tx 1 -15 Tk
(imar) Tx 1 -30 Tk
(y\r) Tx
2.8209 -8 Td
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(er) Tx
(\r) TX 
TO
0 To
1 0 0 1 253.4168 393.1948 0 Tp
TP
-19.2278 0 Td
0 Tr
(Secondar) Tx 1 -30 Tk
(y\r) Tx
8.1031 -8 Td
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(er) Tx
(\r) TX 
TO
0 To
1 0 0 1 336.5 372 0 Tp
TP
0 Tr
0 Ta
(Caching\r) Tx
T*
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(er) Tx
(\r) TX 
TO
0 To
1 0 0 1 267 343 0 Tp
TP
-36.0729 0 Td
0 Tr
2 Ta
(F) Tx 1 30 Tk
(orw) Tx 1 15 Tk
(arder\r) Tx
13.8235 -8 Td
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(er) Tx
(\r) TX 
TO
0 To
1 0 0 1 206.9644 250.51 0 Tp
TP
-9.8209 0 Td
0 Tr
1 Ta
(Sla) Tx 1 20 Tk
(v) Tx 1 25 Tk
(e\r) Tx
-3.3027 -8 Td
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(ers) Tx
(\r) TX 
TO
0 To
1 0 0 1 375.4267 305.5529 0 Tp
TP
-10.2174 0 Td
0 Tr
(Client\r) Tx
-2.9062 -8 Td
(ser) Tx 1 -30 Tk
(v) Tx 1 25 Tk
(ers) Tx
(\r) TX 
TO
0 R
0 G
0.5 w
251.0793 249.3429 m
246.1281 246.8494 244.5306 247.5919 241.5714 249.1194 c
225.1183 257.2017 l
220.9273 259.7452 216.7196 256.2155 Y
222.7812 259.6793 218.4514 261.4113 v
201.5654 269.834 l
198.9676 271.133 195.1725 272.0745 201.9984 275.4628 c
S
312.3052 295.2134 m
316.5825 293.0747 318.9656 293.6468 321.5182 294.9644 c
360.8361 314.49 l
364.4515 316.6842 368.0812 313.6394 Y
362.8522 316.6274 366.5872 318.1214 v
406.3027 337.9169 l
408.5436 339.0374 411.8174 339.8495 405.9292 342.7724 c
S
439.6535 130.4409 m
439.6535 618 L
108 618 L
108 130.4409 L
439.6535 130.4409 L
(s) *
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
