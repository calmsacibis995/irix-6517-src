<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="7"><TITLE><XREFTARGET ID="76072">Unified Name Service </TITLE><PARAGRAPH>The Unified Name Service (UNS) is a name service layer provided with the IRIX operating system to translate and simplify name service requests. Name servers provide network services that enable clients to name resources or objects in the network and share this information with other network objects.<INDEXTARGET ID="07.uns1"><!-- POSTPROCESSDATA: 07.uns1|Unified Name Service --></PARAGRAPH>
<PARAGRAPH>In the past, each new name service was implemented in an application using code in the standard C library. As a new name service was added to a network, configuration files representing information about system resources and accounts were added along with a number of library routines. When the concept of distributed name space administration was conceived, the process became more complex. </PARAGRAPH>
<PARAGRAPH>To simplify this, the unification layer provided by UNS was developed. All IRIX networked programs can use UNS to implement other name services.</PARAGRAPH>
<PARAGRAPH>The following subjects are discussed in this chapter:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="72267" TYPE="TITLE">&ldquo;About Unified Name Service&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="46748" TYPE="TITLE">&ldquo;Overview of UNS Operations&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="93184" TYPE="TITLE">&ldquo;How UNS Works With NIS&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="57705" TYPE="TITLE">&ldquo;How UNS Works With BIND&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="74067" TYPE="TITLE">&ldquo;How UNS Works With NFS&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="57621" TYPE="TITLE">&ldquo;How UNS Works With LDAP&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="93425" TYPE="TITLE">&ldquo;Setting Up a UNS Configuration&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="31173" TYPE="TITLE">&ldquo;UNS Protocol Libraries&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="11224" TYPE="TITLE">&ldquo;Troubleshooting nsd&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="72267">About Unified Name Service </TITLE><PARAGRAPH><XREFTARGET ID="90213">UNS translates the results of name service requests from a number of different protocols into a single file-based protocol. A protocol is a set of rules, data formats and conventions that determine how data is transferred between network components. A library is the implementation of a protocol. Among several standard protocols that the IRIX operating system provides are the protocols DNS and NIS which deal with name service requests. Given multiple protocols, a single overriding protocol simplifies name service requests. <INDEXTARGET ID="07.uns2"><!-- POSTPROCESSDATA: 07.uns2|protocol, definition of --></PARAGRAPH>
<PARAGRAPH>Unified Name Service has three major components:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the name service daemon <COMMAND>nsd</COMMAND>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>specific application programming interface (API) routines in the C library</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>several protocol libraries </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The name service API is left unchanged from previous releases of the IRIX operating system to maintain library-level compatibility. No applications should need to recompile to take advantage of UNS components.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="46748">Overview of UNS Operations</TITLE><PARAGRAPH>At system start up, the daemon <INDEXTARGET ID="07.uns3"><!-- POSTPROCESSDATA: 07.uns3|UNS:overview --><INDEXTARGET ID="07.uns4"><!-- POSTPROCESSDATA: 07.uns4|daemon <ITALICS>nsd</ITALICS> --><COMMAND>nsd</COMMAND> takes two actions: it initiates a filesystem namespace rooted at <FILENAME>/ns</FILENAME>. It then reads the UNS configuration file&space;<INDEXTARGET ID="07.uns5"><!-- POSTPROCESSDATA: 07.uns5|<ITALICS>/etc/nsswitch.conf</ITALICS> file --><FILENAME>/etc/nsswitch.conf</FILENAME> which specifies the resolve order of each of the supported tables, and protocols.<INDEXTARGET ID="07.uns6"><!-- POSTPROCESSDATA: 07.uns6|resolve order: in UNS --></PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="nsd.Daemon.name.serv.prot.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="7-1"><PREFIX>Figure 7-1 </PREFIX>Action of the nsd Daemon With Name Service Protocols</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The daemon&space;<INDEXTARGET ID="07.uns7"><!-- POSTPROCESSDATA: 07.uns7|<ITALICS>nsd</ITALICS> daemon --><COMMAND>nsd</COMMAND> has no awareness of protocols itself, it simply sets up a front-end interface to the different name services and runs between them. If a request comes from NIS to resolve a password into a system name, <COMMAND>nsd</COMMAND> passes the request to the appropriate library based on the resolution of the request pathname. A request issued from NIS <FILENAME>/etc/passwd,</FILENAME> for example, is passed to <FILENAME>/ns/.local/.nis/passwd</FILENAME>, so that in effect UNS acts as an alias.</PARAGRAPH>
<PARAGRAPH>When the <COMMAND>nsd</COMMAND> daemon is called, it reads the configuration file <INDEXTARGET ID="07.uns8"><!-- POSTPROCESSDATA: 07.uns8|<ITALICS>nsswitch.conf</ITALICS> file --><FILENAME>nsswitch.conf,</FILENAME> which contains a list of protocols and tables. A table is made up of searchable rows and columns. The hosts table consisting of <INDEXTARGET ID="07.uns9"><!-- POSTPROCESSDATA: 07.uns9|table, description of --><FILENAME>hosts.byname</FILENAME> and<FILENAME>&space;hosts.byaddr,</FILENAME> effectively allows a search either by hostname or by host address. </PARAGRAPH>
<PARAGRAPH>The file system namespace started by <INDEXTARGET ID="07.uns10"><!-- POSTPROCESSDATA: 07.uns10|filesystem namespacenamespace, filesystem --><COMMAND>nsd </COMMAND>is rooted at <FILENAME>/ns </FILENAME>and is used by the underlying interfaces to retrieve name system data. This is a dynamic file system, timed out after 30 seconds, so that if you issue the command <COMMAND>ls</COMMAND> from <FILENAME>/ns</FILENAME> you may not see the files. </PARAGRAPH>
<PARAGRAPH>The results of any name search are held in the <FILENAME>.local</FILENAME> cache file in the <INDEXTARGET ID="07.uns11"><!-- POSTPROCESSDATA: 07.uns11|<ITALICS>/ns</ITALICS> namespace --><FILENAME>/ns </FILENAME>namespace. The <INDEXTARGET ID="07.uns12"><!-- POSTPROCESSDATA: 07.uns12|<ITALICS>.local</ITALICS> file --><FILENAME>.local</FILENAME> file is the local user's view of the namespace. When a file is accessed in the <FILENAME>/ns</FILENAME> directory, an entry is added to a cache file under <FILENAME>/var/ns/cache</FILENAME>, creating what is in effect a shadow file. There is a cache file for each of the tables supported by the name service daemon. For example, if a call comes to NIS, the NIS database files on the local host are searched first. This means network traffic is reduced and searches are swifter.<INDEXTARGET ID="07.uns13"><!-- POSTPROCESSDATA: 07.uns13|cache files under UNSUNS:cache files --></PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="uns.files.partial.view.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="7-2"><PREFIX>Figure 7-2 </PREFIX>Partial View of Dynamic UNS Files</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The format of these files mimics the format of the historic configuration files that they replace. Using<INDEXTARGET ID="07.uns14"><!-- POSTPROCESSDATA: 07.uns14|cache file format --><FILENAME>&space;passwd</FILENAME> as an example, each file under the directories <FILENAME>/ns/*/passwd.byname </FILENAME>is made up of lines separated by newline characters, of the format:</PARAGRAPH>
<EXAMPLE>
login:password:uid:gid:gecos:directory:shell
</EXAMPLE>
<PARAGRAPH>Since the file <INDEXTARGET ID="07.uns15"><!-- POSTPROCESSDATA: 07.uns15|<ITALICS>/etc/nsswitch.conf</ITALICS> file --><FILENAME>/etc/nsswitch.conf</FILENAME> specifies the resolve order for each of the supported tables, including the host table, the hostresorder line in&space;<INDEXTARGET ID="07.uns16"><!-- POSTPROCESSDATA: 07.uns16|<ITALICS>/etc/resolve.conf</ITALICS> file --><FILENAME>/etc/resolv.conf</FILENAME> is ignored. </PARAGRAPH>
<PARAGRAPH>The following table shows the name services that have been supported as part of the operating system since IRIX 6.2 with their client and server services, together with the binding that links the client and the server:</PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="7-1"><PREFIX>Table 7-1 </PREFIX>Protocols With Historically Supported Services </CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Protocol</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="81"><PARAGRAPH>Client </PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="81"><PARAGRAPH>Binding (Linking)</PARAGRAPH>
</CELL>
<CELL LEFT="295" WIDTH="110"><PARAGRAPH>Server</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>DNS</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="81"><PARAGRAPH>Resolver Library</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="81"><PARAGRAPH>resolv.conf</PARAGRAPH>
</CELL>
<CELL LEFT="295" WIDTH="110"><PARAGRAPH>named </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>NIS</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="81"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="81"><PARAGRAPH>ypbind (now nsd)</PARAGRAPH>
</CELL>
<CELL LEFT="295" WIDTH="110"><PARAGRAPH>ypserv (now nsd)</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Files </PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="81"><PARAGRAPH>getx by y()</PARAGRAPH>
<PARAGRAPH>getx by ent()</PARAGRAPH>
</CELL>
<CELL LEFT="205" WIDTH="81"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="295" WIDTH="110"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Protocols and tables provided with the initial UNS release are client-side DNS; client-side NIS; Files; MDBM, the NIS database files; NDBM; Berkeley DB; Nisserv, the replacement for <FILENAME>ypserv; </FILENAME>and LDAP, the lightweight alternative for X500. The operation of these libraries is explained in <XREF IDREF="31173" TYPE="TITLE">&ldquo;UNS Protocol Libraries&rdquo;</XREF>.</PARAGRAPH>
<PARAGRAPH>The following sections explain various aspects of UNS:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="93184" TYPE="TITLE">&ldquo;How UNS Works With NIS&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="22083" TYPE="TITLE">&ldquo;About UNS and the NIS Database&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="57705" TYPE="TITLE">&ldquo;How UNS Works With BIND&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="74067" TYPE="TITLE">&ldquo;How UNS Works With NFS&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="57621" TYPE="TITLE">&ldquo;How UNS Works With LDAP&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="93184">How UNS Works With NIS</TITLE><PARAGRAPH>The NIS network lookup service provides a centralized database of information about the network to systems participating in the service. Of the number of information sources provided to network applications, typically the default lookup order is NIS first, DNS (BIND) second, then the appropriate local files. <INDEXTARGET ID="07.uns17"><!-- POSTPROCESSDATA: 07.uns17|UNS: with NISNIS with UNS --><INDEXTARGET ID="07.uns18"><!-- POSTPROCESSDATA: 07.uns18|lookup order default lookup order --></PARAGRAPH>
<PARAGRAPH>Unified Name Service (UNS) does not change the fundamental operation of NIS, although how the server daemon <FILENAME>ypserv,</FILENAME> and the binding daemon <FILENAME>ypbind</FILENAME>, work are changed. </PARAGRAPH>
<PARAGRAPH>Historically, the NIS daemon<INDEXTARGET ID="07.uns19"><!-- POSTPROCESSDATA: 07.uns19|<ITALICS>ypserv</ITALICS>, historical function --><FILENAME>&space;ypserv</FILENAME> is the database server responsible for answering client inquiries and updating the database. <FILENAME>ypserv</FILENAME> runs only on NIS server machines with a complete NIS database. The NIS binder daemon <INDEXTARGET ID="07.uns20"><!-- POSTPROCESSDATA: 07.uns20|<ITALICS>ypbind</ITALICS>, historical function --><FILENAME>ypbind</FILENAME>, would run on all NIS clients and was responsible for remembering information necessary for communicating with <FILENAME>ypserv</FILENAME>. A system can function as a server and a client simultaneously, and can therefore be running both <FILENAME>ypbind</FILENAME> and <FILENAME>ypserv</FILENAME>.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="hist.op.of.ypbind.ypserv.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="7-3"><PREFIX>Figure 7-3 </PREFIX>Historical Operation of NIS Name Lookups</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>In earlier versions of the IRIX operating system, NIS daemons are started by the master network script <FILENAME>/etc/init.d/network</FILENAME>, when the NIS daemon flags are set &ldquo;on.&rdquo; Beginning with the IRIX 6.5 operating system, the UNS file <FILENAME>/etc/nsswitch.conf</FILENAME> controls the resolve order of the NIS client, and so overrides the previous actions of <INDEXTARGET ID="07.uns21"><!-- POSTPROCESSDATA: 07.uns21|NIS client resolve orderresolve order:NIS client --><FILENAME>ypserv</FILENAME>.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="current.op.of.nsd.daemon.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="7-4"><PREFIX>Figure 7-4 </PREFIX>Operation of the nsd Daemon With NIS</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The<INDEXTARGET ID="07.uns22"><!-- POSTPROCESSDATA: 07.uns22|<ITALICS>nsd</ITALICS> daemon:operation with NIS --><COMMAND>&space;nsd</COMMAND> daemon reads the UNS configuration file<FILENAME>&space;/etc/nsswitch.conf</FILENAME>, the default copy of which contains a line of this format:</PARAGRAPH>
<EXAMPLE>
hosts:nis dns files
</EXAMPLE>
<PARAGRAPH>In this instance, the NIS hosts table is referred to before the DNS or local files. The<COMMAND>&space;nsd</COMMAND> daemon then implements the NIS protocol in a shared library stored in the directory <FILENAME>/var/ns/lib</FILENAME>. This is explained further in <XREF IDREF="31173" TYPE="TITLE">&ldquo;UNS Protocol Libraries&rdquo;</XREF>. </PARAGRAPH>
<PARAGRAPH>Further changes to NIS server utilities involve <INDEXTARGET ID="07.uns23"><!-- POSTPROCESSDATA: 07.uns23|<ITALICS>ypinit</ITALICS>: changes --><COMMAND>ypinit</COMMAND>, <COMMAND>ypmake</COMMAND>, and <COMMAND>make.script,</COMMAND> which are now wrappers around a perl script called <COMMAND>mdbm_parse</COMMAND>. This script does the actual parsing, instead of a makefile and binaries. This does not change visible system behavior.</PARAGRAPH>
<PARAGRAPH>For details of the NIS environment, refer to <DOCTITLE>NIS Administration Guide</DOCTITLE>. For more about the activity of the <COMMAND>nsd</COMMAND> daemon, see <XREF IDREF="31069" TYPE="TITLE">&ldquo;UNS Configuration File&rdquo;</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="22083">About UNS and the NIS Database </TITLE><PARAGRAPH>The NIS database is composed of a group of files known as maps. Maps are composed of keys and values. For example, in the map called <INDEXTARGET ID="07.uns24"><!-- POSTPROCESSDATA: 07.uns24|NIS database --><INDEXTARGET ID="07.uns25"><!-- POSTPROCESSDATA: 07.uns25|mapsNIS maps --><FILENAME>hosts.byname</FILENAME>, the keys are the names of the individual systems. </PARAGRAPH>
<PARAGRAPH>Maps are created from input files, (usually standard ASCII files) and made into files in database record format. Historically these backend database files, called<COMMAND>&space;dbm</COMMAND>, had output files with<FILENAME>&space;.dir</FILENAME> and<FILENAME>&space;.pag</FILENAME> extensions, each pair being a map. Files in DBM format are restricted both in the number of entries, and the relative size of each entry. </PARAGRAPH>
<PARAGRAPH>Database backend files in the UNS environment are called<COMMAND>&space;mdbm</COMMAND>, and output files often have<FILENAME>&space;.m</FILENAME> extensions. The database itself needs only one file so there are not separate <FILENAME>.dir</FILENAME> and <FILENAME>.pag</FILENAME> files. Files in MDBM format handle millions of entries; each entry can be up to 64 KB long (4 KB by default). This simpler single-key file format leads to faster response.<INDEXTARGET ID="07.uns26"><!-- POSTPROCESSDATA: 07.uns26|MDBM files --><INDEXTARGET ID="07.uns27"><!-- POSTPROCESSDATA: 07.uns27|database backend filesbackend, database --></PARAGRAPH>
<PARAGRAPH>With UNS, the new location for the NIS backend data storage is <FILENAME>/var/ns/domains</FILENAME>. Each table is still stored in multiple files, one per key. Keys that are looked up are cached into local hash files found in <FILENAME>/var/ns/cache/</FILENAME>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="57705">How UNS Works With BIND</TITLE><PARAGRAPH>The Berkeley Internet Name Domain (BIND) implements the Internet Domain Name Service (DNS) for the IRIX operating system. All IRIX network programs can use BIND to replace the original host table to look up information in the <FILENAME>/etc/hosts</FILENAME> file.</PARAGRAPH>
<PARAGRAPH>BIND server configurations run the <FILENAME>named</FILENAME> server daemon, which is started automatically during station startup if the configuration flag<COMMAND>&space;named</COMMAND> is set &ldquo;on.&rdquo; See the <REFPAGE>chkconfig(1M)</REFPAGE> reference page for more details. </PARAGRAPH>
<PARAGRAPH>The resolve order on a typical BIND server is determined through the <INDEXTARGET ID="07.uns28"><!-- POSTPROCESSDATA: 07.uns28|<ITALICS>resolv.conf</ITALICS> file:example --><FILENAME>resolv.conf </FILENAME>file, an example of which follows:</PARAGRAPH>
<EXAMPLE>
noodle% <USERINPUT>cat resolv.conf</USERINPUT>
search example1.com example2.com
#hostresorder nis bind local # now defunct under UNS
nameserver 192.99.89.54 #bindle
nameserver 127.0.0.1
</EXAMPLE>
<PARAGRAPH>The basic BIND client normally accesses data from the name servers specified in its own <FILENAME>resolv.conf </FILENAME>file. It does not run the domain server <FILENAME>named</FILENAME>. </PARAGRAPH>
<PARAGRAPH>Starting with the IRIX 6.5 operating system, the UNS file <INDEXTARGET ID="07.uns29"><!-- POSTPROCESSDATA: 07.uns29|BIND client resolve orderDNS client resolve orderresolve order:DNS clientresolve order: BIND client --><FILENAME>/etc/nsswitch.conf </FILENAME>controls the resolve order of the BIND client and overrides the resolve order of <FILENAME>resolv.conf</FILENAME>. These lines from the default <FILENAME>/etc/nsswitch.conf</FILENAME> show the hosts table reference:</PARAGRAPH>
<EXAMPLE>
spanker% <USERINPUT>cat nsswitch.conf</USERINPUT>&space;
.....
group: files nis
hosts: nis dns files
</EXAMPLE>
<PARAGRAPH>UNS provides DNS client capabilities.</PARAGRAPH>
<PARAGRAPH>In the UNS environment, the<COMMAND>&space;nsd </COMMAND>daemon implements the DNS protocol in a shared library stored in the directory <FILENAME>/var/ns/lib</FILENAME>. This is explained further in <XREF IDREF="31173" TYPE="TITLE">&ldquo;UNS Protocol Libraries&rdquo;</XREF>. For further details on DNS, see <XREF IDREF="74459" TYPE="TITLE">Chapter&nbsp;6, &ldquo;BIND Name Server.&rdquo;</XREF></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74067">How UNS Works With NFS</TITLE><PARAGRAPH>NFS is an application layer service that can be used on a network running the User Datagram Protocol (UDP) or Transmission Control Protocol (TCP). With NFS a single copy of a file such as <INDEXTARGET ID="07.uns30"><!-- POSTPROCESSDATA: 07.uns30|UNS: and NFSNFS and UNS --><INDEXTARGET ID="07.uns31"><!-- POSTPROCESSDATA: 07.uns31|<ITALICS>/usr/local</ITALICS> file --><FILENAME>/usr/local</FILENAME> can be accessible by all systems on the network. Remote files appear to be &ldquo;local&rdquo; to each user's system. The NFS server daemon <FILENAME>nfsd</FILENAME> runs on the server and accepts RPC calls from clients. NFS caches file attributes on the client side, known as the front-end filesystem, so that certain operations do not have to go all the way to the server. </PARAGRAPH>
<PARAGRAPH>When a file operation like<COMMAND>&space;ls -l</COMMAND> is requested, the data inside the file is not touched. The information delivered is about the file's attributes (for example, size, time of access, and owner), and those attributes are valid for some 3 seconds. Client changes are made on the locally cached copy, and if the file's attributes remain unchanged for about 60 seconds, they are flushed from the cache and written back to the server. The server is known as the back-end filesystem and contains the definitive archived copy of the data. <INDEXTARGET ID="07.uns32"><!-- POSTPROCESSDATA: 07.uns32|file attributes --></PARAGRAPH>
<PARAGRAPH>Starting with the IRIX 6.5 operating system, the UNS environment provides the local files, which are stored in <FILENAME>/ns/.local</FILENAME>, the local user's view of the namespace. As with the other name services, when a file is accessed in the <FILENAME>/ns/.local </FILENAME>directory, a cache entry is added into a cache file under <FILENAME>/var/ns/cache</FILENAME>, creating what is in effect a shadow file. The <COMMAND>nsd</COMMAND> daemon presents the appearance of a mounted filesystem. There is actually no remote NFS server. </PARAGRAPH>
<PARAGRAPH>Details of the Silicon Graphics implementation of the Sun Microsystems Open Network Computing Plus (ONC+) distributed services, previously referred ldap-ns.conf(4) to as Network File System (NFS), are explained in <DOCTITLE>ONC3/NFS Administrators Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="57621">How UNS Works With LDAP</TITLE><PARAGRAPH>The Lightweight Directory Access Protocol (LDAP) is a simplified version of the X.500 Directory Access Protocol implemented on TCP/IP. One of LDAP's special attractions is that it allows you to define the database schema, specifying how information will be organized and retrieved from the database. Of course, an LDAP client must know of this organization in order to use the database, and this is done with the LDAP client configuration file, <INDEXTARGET ID="07.uns33"><!-- POSTPROCESSDATA: 07.uns33|LDAP (Lightweight Directory Access Protocol) --><FILENAME>/etc/ldap-ns.conf</FILENAME>. </PARAGRAPH>
<PARAGRAPH>At system startup, the <FILENAME>nsd</FILENAME> daemon reads the configuration file <FILENAME>/etc/nsswitch.conf</FILENAME> which specifies the resolve order of each of the supported tables and protocols. If one of those listed is LDAP, the LDAP client configuration file <FILENAME>/etc/ldap-ns.conf</FILENAME> is read.</PARAGRAPH>
<PARAGRAPH>In this file, each domain using the LDAP protocol library has a section specifying which LDAP servers to use, the parameters to search on each server, how to map each name service request to an LDAP search filter, and how to transform the response into a file format. With this flexibility you can use any schema for storing the configuration information. For technical information about LDAP, refer to RFC 1777. For details of the configuration file, see the ldap-ns.conf(4) reference page. </PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Namespace Format</TITLE><PARAGRAPH>The namespace is of the format <INDEXTARGET ID="07.uns34"><!-- POSTPROCESSDATA: 07.uns34|UNS namespace formatnamespace format, UNS --><FILENAME>/ns/domain/table/protocol/key</FILENAME>. The protocol directory is often left out. This results in all the protocols being searched in the order given in <FILENAME>/etc/nsswitch.conf</FILENAME>. The <FILENAME>.local </FILENAME>domain represents the local system view of the namespace. A special file<FILENAME>&space;.all</FILENAME> gives the full enumeration of the data for a table if supported by a protocol. Files and their purposes are enumerated in <XREF IDREF="18349" TYPE="TABLE">Table&nbsp;7-2</XREF>:</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="7-2"><PREFIX>Table 7-2 </PREFIX><XREFTARGET ID="18349">UNS Files and Their Purposes</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="162"><PARAGRAPH>File Name </PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Purpose</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/.local/passwd.byname/root</PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Root entry in local passwd using whatever 
protocols are supported.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/.local/passwd.byname/.nis/root </PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Root entry in local passwd using only the NIS 
protocol.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/.local/passwd.byname/.nis/.all </PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>All password entries in the NIS passwd table for 
the local domain. </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/engr/passwd.byname/root </PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Root entry is the engr domain passwd map using 
any available protocol.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/sgi.com/hosts.byname/sgi </PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Finds the host address for the machine sgi in the 
sgi.com domain. (The local host must be a server 
for sgi.com.)</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="162"><PARAGRAPH>/ns/.local/hosts.byname/sgi.sgi.com</PARAGRAPH>
</CELL>
<CELL LEFT="170" WIDTH="207"><PARAGRAPH>Finds the host address for the machine sgi.sgi.com 
in the hosts map. (Data may be anywhere.)</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>For example, to look up the password entry for the root user in the domain engr.example1.com, you would simply give this command:</PARAGRAPH>
<EXAMPLE>
# <USERINPUT>cat /ns/engr.example1.com/passwd.byname/root</USERINPUT>
</EXAMPLE>
<PARAGRAPH>The directory <FILENAME>.local</FILENAME> is created for the local domain so that the root password entry for the local domain can always be found in the file <FILENAME>/ns/.local/passwd.byname/root</FILENAME>. </PARAGRAPH>
<PARAGRAPH>The file<FILENAME>&space;.all </FILENAME>in each table directory enumerates the entire password table. If you need to list every password entry for the local domain using all the library routines listed in<FILENAME>&space;nsswitch.conf,</FILENAME> give this command: </PARAGRAPH>
<EXAMPLE>
<COMMAND># </COMMAND><USERINPUT>cat /ns/.local/passwd.byname/.all</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>This gives you a large concatenation of every user in the local domain. </PARAGRAPH>
<PARAGRAPH>Finally, a special directory <VARIABLE>.library</VARIABLE> (for example <FILENAME>.nis</FILENAME>) is created under each table directory for each of the libraries listed for that table in <COMMAND>nsswitch.conf</COMMAND>. </PARAGRAPH>
<PARAGRAPH>The <COMMAND>ns_lookup()</COMMAND> library routine always opens files under the <FILENAME>.local</FILENAME> domain namespace mounted on <FILENAME>/ns</FILENAME> to satisfy the requests from name service lookups, so this should not be changed.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="31069">UNS Configuration File</TITLE><PARAGRAPH>The sole UNS configuration file is <INDEXTARGET ID="07.uns35"><!-- POSTPROCESSDATA: 07.uns35|UNS:configuration file  --><FILENAME>/etc/nsswitch.conf</FILENAME>, and is made up of lines of the format:</PARAGRAPH>
<EXAMPLE>
map: library library library
</EXAMPLE>
<PARAGRAPH>For example:</PARAGRAPH>
<EXAMPLE>
hosts: nis dns files
</EXAMPLE>
<PARAGRAPH>This file specifies the libraries and the order in which they are to be used. If any path element does not exist, name service library routines are called by the <COMMAND>nsd</COMMAND> daemon in progressive order until the element is found.</PARAGRAPH>
<PARAGRAPH>The system administrator need only verify that<COMMAND>&space;nsd</COMMAND> is running&mdash;see <XREF IDREF="11224" TYPE="TITLE">&ldquo;Troubleshooting nsd&rdquo;</XREF>. Normally the <COMMAND>nsd</COMMAND> daemon is activated at system startup time from <FILENAME>/etc/init.d/network </FILENAME>if the configuration flag is set &ldquo;on&rdquo; (see<REFPAGE>&space;chkconfig(1M)</REFPAGE>). If the nsd configuration flag is not set &ldquo;on&rdquo;, the only name service supported is local files. The<COMMAND>&space;nsd</COMMAND> daemon converts each name service request into a pathname.</PARAGRAPH>
<PARAGRAPH>When it is started, <COMMAND>nsd</COMMAND> creates the dynamic file system namespace rooted at <FILENAME>/ns </FILENAME>which is used by the underlying interfaces to retrieve name system data. </PARAGRAPH>
<PARAGRAPH>The format of these files mimics the format of the historic configuration files that they replace. Using<FILENAME>&space;passwd</FILENAME> as an example, each file under the directories <FILENAME>/ns/*/passwd.byname </FILENAME>is made up of lines separated by new-line characters, of this format:</PARAGRAPH>
<EXAMPLE>
login:password:uid:gid:gecos:directory:shell
</EXAMPLE>
<PARAGRAPH>Since the file <FILENAME>/etc/nsswitch.conf</FILENAME> specifies the resolve order for each of the supported tables, including the host table, the hostresorder line in <FILENAME>/etc/resolv.conf</FILENAME> is ignored. </PARAGRAPH>
<PARAGRAPH>There is one <FILENAME>nsswitch.conf</FILENAME> file for each &ldquo;domain&rdquo; supported by this daemon. Every machine has a local domain, <FILENAME>.local</FILENAME> which has the configuration file in <FILENAME>/etc/nsswitch.conf.</FILENAME> Server machines support multiple domains and have a configuration file in <FILENAME>/var/ns/domains/domainname/nsswitch.conf</FILENAME> for each domainname.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="93425">Setting Up a UNS Configuration</TITLE><PARAGRAPH>The UNS configuration is automatic with the installation of the IRIX operating system. The <COMMAND>nsd</COMMAND> daemon runs and uses the <FILENAME>/etc/nsswitch.conf</FILENAME> file to determine the configuration and protocols of the name services being requested. There is one <FILENAME>nsswitch.conf</FILENAME> file for each &ldquo;domain&rdquo; supported by this daemon. Every machine has a local domain<FILENAME>&space;.local</FILENAME> which has the configuration file in <FILENAME>/etc/nsswitch.conf.</FILENAME> Server machines support multiple domains and have a configuration file in <FILENAME>/var/ns/domains/domainname/nsswitch.conf</FILENAME> for each domainname.</PARAGRAPH>
<PARAGRAPH>However, additional steps are needed to set up a system as a NIS Server: <INDEXTARGET ID="07.uns36"><!-- POSTPROCESSDATA: 07.uns36|NIS server setup --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Run<INDEXTARGET ID="07.uns37"><!-- POSTPROCESSDATA: 07.uns37|<ITALICS>ypinit</ITALICS>:command --><COMMAND>&space;ypinit</COMMAND> to setup a system as a NIS server. It copies a default <FILENAME>nsswitch.conf</FILENAME> file into place and parses the system configuration files into the <FILENAME>mdbm</FILENAME> hash files. Refer to the <REFPAGE>ypinit(1M)</REFPAGE> reference pages for details.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Run <INDEXTARGET ID="07.uns38"><!-- POSTPROCESSDATA: 07.uns38|<ITALICS>ypmake</ITALICS> command --><COMMAND>ypmake</COMMAND> to rebuild and distribute the NIS database. Refer to the <REFPAGE>ypmake(1M)</REFPAGE> reference page for details. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Run<INDEXTARGET ID="07.uns39"><!-- POSTPROCESSDATA: 07.uns39|<ITALICS>mdbm_dump</ITALICS> command --><COMMAND>&space;mdbm_dump</COMMAND> to view the current contents of an mdbm hash database.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="31173">UNS Protocol Libraries</TITLE><PARAGRAPH>The protocol libraries provided with the initial UNS release are: <INDEXTARGET ID="07.uns40"><!-- POSTPROCESSDATA: 07.uns40|UNS protocol librarieslibraries, protocol --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Files&mdash;see <XREF IDREF="76176" TYPE="TITLE">&ldquo;Files Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>NIS, the Network Information Service&mdash;See <XREF IDREF="24757" TYPE="TITLE">&ldquo;NIS Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>DNS, the Domain Name Service&mdash;See <XREF IDREF="94121" TYPE="TITLE">&ldquo;DNS Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>MDBM, local hash files&mdash;See <XREF IDREF="83953" TYPE="TITLE">&ldquo;MDBM Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>NDBM, an earlier version of MDBM&mdash;See <XREF IDREF="79907" TYPE="TITLE">&ldquo;NDBM Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Berkeley DB, Berkeley hash files &mdash;See <XREF IDREF="47060" TYPE="TITLE">&ldquo;Berkeley DB Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Nisserv, the replacement for ypserv &mdash;See <XREF IDREF="79352" TYPE="TITLE">&ldquo;Nisserv Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>LDAP, the lightweight alternative for X500 &mdash;See <XREF IDREF="97123" TYPE="TITLE">&ldquo;LDAP Protocol Library&rdquo;</XREF>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>As <XREF IDREF="72125" TYPE="GRAPHIC">Figure&nbsp;7-5</XREF> indicates, the <COMMAND>nsd</COMMAND> daemon directs requests to specific protocol libraries based on the resolution of a process pathname. </PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="ns_lookup.action.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="7-5"><PREFIX>Figure 7-5 </PREFIX><XREFTARGET ID="72125">Action of ns_lookup in Selection of Protocol Library</CAPTION>
</FIGURE>
</PARAGRAPH>
<SECTION2><SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="76176">Files Library </TITLE><PARAGRAPH>The files library parses historic format configuration files such as <INDEXTARGET ID="07.uns41"><!-- POSTPROCESSDATA: 07.uns41|protocol library:files --><FILENAME>passwd </FILENAME>and <FILENAME>hosts</FILENAME>. If looked up in the .local domain, the file in <FILENAME>/etc </FILENAME>is opened and searched. If looked up in some other domain, then a file by the same name is opened under <FILENAME>/var/ns/domains/domainname</FILENAME> for the requested domainname. For more about how these attributes function, see <XREF IDREF="74049" TYPE="TITLE">&ldquo;UNS File Structure Attributes&rdquo;</XREF>. See also the reference page <REFPAGE>files</REFPAGE>(7P).</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="24757">NIS Protocol Library</TITLE><PARAGRAPH>The NIS protocol library makes a request to a remote <INDEXTARGET ID="07.uns42"><!-- POSTPROCESSDATA: 07.uns42|protocol library:NIS NIS protocol library --><FILENAME>ypserv</FILENAME> daemon using version 2 of the NIS protocol. It also takes the place of the <FILENAME>ypbind</FILENAME> daemon on the IRIX operating system. If the NIS protocol is supported on any table, then the library creates a new service socket that answers NIS bind requests from the old style NIS API routines<COMMAND>&space;yp_match()</COMMAND>, <COMMAND>yp_all()</COMMAND>, and so on.</PARAGRAPH>
<PARAGRAPH>If a key is looked up in the .local domain then the current domainname of the system as specified by the <COMMAND>domainname</COMMAND> command is used. This is typically set in the <FILENAME>/var/yp/ypdomain</FILENAME> file. If the domain is unspecified then the server is dynamically located using the <FILENAME>ypbind</FILENAME> protocol. The maximum number of hops to use in multicast binding can be specified with the<CMDLINEOPT>&space;nis_multicast</CMDLINEOPT> attribute which defaults to 32. See <XREF IDREF="19005" TYPE="TITLE">&ldquo;Setting Domain Attributes&rdquo;</XREF>. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="94121">DNS Protocol Library</TITLE><PARAGRAPH>The DNS protocol library makes a request to a remote <INDEXTARGET ID="07.uns43"><!-- POSTPROCESSDATA: 07.uns43|protocol library:DNS DNS protocol library --><FILENAME>named</FILENAME> daemon using the DNS protocol. The DNS library parses the file <FILENAME>/etc/resolv.conf</FILENAME> to determine the default search path, nameserver list, and options. If a key is looked up in the .local domain then it will follow the search path; otherwise the specific domain is used. See <XREF IDREF="19005" TYPE="TITLE">&ldquo;Setting Domain Attributes&rdquo;</XREF> for a discussion on setting these attributes. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="83953">MDBM Protocol Library</TITLE><PARAGRAPH>The MDBM protocol library searches for data in <INDEXTARGET ID="07.uns44"><!-- POSTPROCESSDATA: 07.uns44|protocol library:MDBM MDBM protocol library --><FILENAME>mdbm</FILENAME> hash database files on the local host. Names for these files are the same as the table with a<FILENAME>&space;.m</FILENAME> extension added (for example: <FILENAME>hosts.byname.m</FILENAME>). For the<FILENAME>&space;.local</FILENAME> domain these are found in the <FILENAME>/etc</FILENAME> directory, otherwise, they are found in the <FILENAME>/var/ns/domains/domainname </FILENAME>directory for each domainname. The flat files can be parsed into <FILENAME>mdbm</FILENAME> hash files using the <COMMAND>mdbm_parse</COMMAND> script provided with the nisserv library. See the<REFPAGE>&space;mdbm</REFPAGE> reference page, and <XREF IDREF="50280" TYPE="TITLE">&ldquo;Setting File Attributes&rdquo;</XREF> for an explanation. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="79907">NDBM Protocol Library</TITLE><PARAGRAPH>The NDBM protocol library searches for data in <INDEXTARGET ID="07.uns45"><!-- POSTPROCESSDATA: 07.uns45|protocol library:MDBM MDBM protocol library --><FILENAME>ndbm</FILENAME> hash database files on the local host. Names for these files are the same as the table with a <FILENAME>.pag</FILENAME> and<FILENAME>&space;.dir</FILENAME> extension added (for example: <FILENAME>hosts.byname.pag</FILENAME> and <FILENAME>hosts.byname.pag</FILENAME>). For the <FILENAME>.local </FILENAME>domain these are found in the <FILENAME>/etc</FILENAME> directory, otherwise, they are found in the <FILENAME>/var/ns/domains/domainname </FILENAME>directory for each domainname. See the<REFPAGE>&space;ndbm(7P)</REFPAGE> reference page, and <XREF IDREF="50280" TYPE="TITLE">&ldquo;Setting File Attributes&rdquo;</XREF> for an explanation. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="47060">Berkeley DB Protocol Library</TITLE><PARAGRAPH>The Berkeley DB protocol library searches for data in <INDEXTARGET ID="07.uns46"><!-- POSTPROCESSDATA: 07.uns46|protocol library:MDBM MDBM protocol library --><FILENAME>db</FILENAME> hash database files on the local host. Names for these files are the same as the table with a <FILENAME>.db</FILENAME> extension added (for example: <FILENAME>hosts.byname.db</FILENAME>). For the <FILENAME>.local</FILENAME> domain these are found in the <FILENAME>/etc</FILENAME> directory, otherwise, they are found in the <FILENAME>/var/ns/domains/domainname </FILENAME>directory for each domainname. See the berkeleydb (7P) reference page, and <XREF IDREF="50280" TYPE="TITLE">&ldquo;Setting File Attributes&rdquo;</XREF> for an explanation. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="79352">Nisserv Protocol Library</TITLE><PARAGRAPH>The nisserv protocol library replaces the <INDEXTARGET ID="07.uns47"><!-- POSTPROCESSDATA: 07.uns47|protocol library:nisservnisserv protocol library --><FILENAME>ypserv </FILENAME>daemon in the IRIX operating system. This library will look up data in MDBM hash files on the local disk and provide them to remote machines using version 2 of the NIS protocol. The file naming rules are the same as those for MDBM. If the<CMDLINEOPT>&space;nis_secure</CMDLINEOPT> attribute is set or the key YP_SECURE exists in the map file, then client systems are required to be using a port number less than 1024. This provides some weak security for maps with confidential information. A number of other special keys exist in the maps to provide the data for NIS protocol procedures. These keys include YP_MASTER_NAME, YP_LAST_MODIFIED, YP_INPUT_FILE, YP_OUTPUT_NAME, and YP_DOMAIN_NAME. These keys are historic from the previous implementation of NIS. For more information, see the <REFPAGE>nisserv</REFPAGE> (7P) reference page. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="97123">LDAP Protocol Library</TITLE><PARAGRAPH>The LDAP protocol library converts local name service requests into remote LDAP protocol packets, then formats the result so that it may be used by the standard name service API. All server information and formatting rules are read from a single configuration file<FILENAME>&space;/etc/ldap-ns.conf</FILENAME> .This file is read when the library is initialized or every time the name server daemon receives a SIGHUP signal.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="74049">UNS File Structure Attributes</TITLE><PARAGRAPH>The <COMMAND>nsd</COMMAND> daemon implements an in-memory filesystem. File structures represent the state for each file, and extended attributes are supported on each name service file. The attributes on the file depend on the library that looked them up, but always include: domain, table, key, timeout, source, version, and server.Attributes are inherited from parent directories. If an attribute such as<CMDLINEOPT>&space;timeout</CMDLINEOPT> exists on a directory then all the files in that directory will use the same value for<CMDLINEOPT>&space;timeout</CMDLINEOPT>, unless it is overridden for a particular file. The global attributes, timeout, hostname, and program can be set by command line arguments. </PARAGRAPH>
<PARAGRAPH>This section explains how various attributes are set or queried: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="19005" TYPE="TITLE">&ldquo;Setting Domain Attributes&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="87167" TYPE="TITLE">&ldquo;Setting Table Attributes&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="82428" TYPE="TITLE">&ldquo;Setting Library Attributes&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="59469" TYPE="TITLE">&ldquo;Querying Attributes&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Attributes to <FILENAME>nsd</FILENAME> are given either on the command line as <COMMAND>nsd -a key=value </COMMAND>or specified in the <FILENAME>nsswitch.conf</FILENAME> file. Following any change, you need to restart <FILENAME>nsd</FILENAME> by giving the command:</PARAGRAPH>
<EXAMPLE>
#<USERINPUT>&space;killall -HUP nsd</USERINPUT>&space;
</EXAMPLE>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19005">Setting Domain Attributes</TITLE><PARAGRAPH>In the <INDEXTARGET ID="07.uns48"><!-- POSTPROCESSDATA: 07.uns48|domain attributes setting:domain attributes --><FILENAME>nsswitch.conf</FILENAME> file, set the attributes on a domain by lines in this format:</PARAGRAPH>
<EXAMPLE>
(key1=value1, key2=value2)
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="87167">Setting Table Attributes</TITLE><PARAGRAPH>Attributes on a table follow the table name in the file:<INDEXTARGET ID="07.uns49"><!-- POSTPROCESSDATA: 07.uns49|table attributes setting:table attributes --></PARAGRAPH>
<EXAMPLE>
passwd(timeout=10): nis files
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="82428">Setting Library Attributes</TITLE><PARAGRAPH>Attributes on a library (for the table) are given following the library name:<INDEXTARGET ID="07.uns50"><!-- POSTPROCESSDATA: 07.uns50|library attributes setting:library attributes --></PARAGRAPH>
<EXAMPLE>
passwd: nis(timeout=10) files
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="50280">Setting File Attributes</TITLE><PARAGRAPH>Attributes on a particular file are specified in the filename:<INDEXTARGET ID="07.uns51"><!-- POSTPROCESSDATA: 07.uns51|file attributes setting:file attributes --></PARAGRAPH>
<EXAMPLE>
/ns/.local/passwd.byname/root(timeout=10)
</EXAMPLE>
<PARAGRAPH>Attributes can be changed by the library routines at will, and if an attribute is unspecified, then a default value is used. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="59469">Querying Attributes</TITLE><PARAGRAPH>Attributes can be listed or queried using the <INDEXTARGET ID="07.uns52"><!-- POSTPROCESSDATA: 07.uns52|querying attributes --><COMMAND>attr</COMMAND> command:</PARAGRAPH>
<EXAMPLE>
attr -l /ns/.local/passwd.byname/root
attr -g timeout /ns/.local/passwd.byname/root
</EXAMPLE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Cache Tuning</TITLE><PARAGRAPH>The size of the cache can be controlled with the parameters shown in <INDEXTARGET ID="07.uns53"><!-- POSTPROCESSDATA: 07.uns53|cache tuning --><XREF IDREF="16126" TYPE="TABLE">Table&nbsp;7-3</XREF>, which are set in the <FILENAME>nsswitch.conf</FILENAME> file. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="7-3"><PREFIX>Table 7-3 </PREFIX><XREFTARGET ID="16126">Cache Tuning Parameters</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="69"><PARAGRAPH>Parameter</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>Description</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>Default/Source</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="69"><PARAGRAPH>size</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>Total maximum pages, squared</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>8</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="69"><PARAGRAPH>timeout</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>In seconds, length of time before cache expires</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>300</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="69"><PARAGRAPH>pagesize</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>In bytes to the power of 2</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>4 Kbytes</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="69"><PARAGRAPH>mode</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>Permissions, can be varied</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>0755</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="69"><PARAGRAPH>library</PARAGRAPH>
</CELL>
<CELL LEFT="75" WIDTH="218"><PARAGRAPH>Name of the library that provided the data, as given in 
nsswitch.conf</PARAGRAPH>
</CELL>
<CELL LEFT="300" WIDTH="66"><PARAGRAPH>Set by xattr 
command</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="11224">Troubleshooting nsd</TITLE><SECTION2 LBL="" HELPID = ""><TITLE>General Approach to Troubleshooting</TITLE><PARAGRAPH>Frequently the system log SYSLOG lists errors and points to solutions. The system log is available from the desktop. Error messages might take this form: <INDEXTARGET ID="07.uns54"><!-- POSTPROCESSDATA: 07.uns54|troubleshooting:<ITALICS>nsd</ITALICS> --><INDEXTARGET ID="07.uns55"><!-- POSTPROCESSDATA: 07.uns55|SYSLOG, troubleshooting with --></PARAGRAPH>
<EXAMPLE>
NFS3 server (local host) nsd not responding
NFS3 server local host (nsd) not responding
Stale NFS File Handle
</EXAMPLE>
<SECTION3 LBL="" HELPID = ""><TITLE>Remote Service Errors </TITLE><PARAGRAPH>If you see consistent or random errors in remote services such as<COMMAND>&space;ping</COMMAND> or <COMMAND>rlogin</COMMAND> errors, <COMMAND>nsd</COMMAND> may have failed. To check the status of <COMMAND>nsd</COMMAND>, enter: </PARAGRAPH>
<EXAMPLE>
<USERINPUT>ps -ef | grep nsd</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>If<COMMAND>&space;nsd</COMMAND> does not appear in the list of processes running, restart <COMMAND>nsd</COMMAND>. Simply enter <COMMAND>nsd</COMMAND> at the prompt.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Mistakes in nsswitch.conf</TITLE><PARAGRAPH>A less common error message might be this: </PARAGRAPH>
<EXAMPLE>
no such protocol
</EXAMPLE>
<PARAGRAPH>In such a case, check for misspellings in <FILENAME>nsswitch.conf</FILENAME>. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Deciphering nsd Signals</TITLE><PARAGRAPH>Some signals <COMMAND>nsd</COMMAND> supports are familiar in other contexts. Send <COMMAND>nsd</COMMAND> the following command, defining <CMDLINEOPT>SIG</CMDLINEOPT> as<CMDLINEOPT>&space;USR1</CMDLINEOPT>, <CMDLINEOPT>USR2</CMDLINEOPT>, <CMDLINEOPT>HUP</CMDLINEOPT>, or <CMDLINEOPT>TERM</CMDLINEOPT>. </PARAGRAPH>
<EXAMPLE>
<USERINPUT>kill -SIG nsd</USERINPUT>
</EXAMPLE>
<HANGLIST><HANGPAIR><HANGITEM><CMDLINEOPT>USR1</CMDLINEOPT> </HANGITEM>
<HANGBODY><PARAGRAPH>Forces nsd to create a state file: <FILENAME>/usr/tmp/nsd.dump</FILENAME> which is a batch file reflecting the state of the file system at the moment.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><CMDLINEOPT>USR2</CMDLINEOPT></HANGITEM>
<HANGBODY><PARAGRAPH> Increases the logging level. As you repeat the command, logging becomes more verbose. Beginning at 0, 6 is the most verbose.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><CMDLINEOPT>HUP</CMDLINEOPT> </HANGITEM>
<HANGBODY><PARAGRAPH>Is sent any time one of the <FILENAME>.config </FILENAME>files is changed and you want the system to read the changes.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><CMDLINEOPT>TERM</CMDLINEOPT> </HANGITEM>
<HANGBODY><PARAGRAPH>Is sent any time you want to kill<COMMAND>&space;nsd</COMMAND>. You must send a catchable signal. <USERINPUT>SIG TERM nsd</USERINPUT> forces it to die.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>Do not use <COMMAND>kill -kill</COMMAND>, <COMMAND>kill -9</COMMAND>, or <COMMAND>kill -all </COMMAND>as it may prevent you from unmounting the file system.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Verifying /ns/.local </TITLE><PARAGRAPH>To check that the client files are installed, give this command:</PARAGRAPH>
<EXAMPLE>
# <USERINPUT>cat /ns/.local/hosts.byname/localhost</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>You should find output similar to the following:</PARAGRAPH>
<EXAMPLE>
127.0.0.1 local host
</EXAMPLE>
</SECTION2>
</SECTION1>
</CHAPTER>
