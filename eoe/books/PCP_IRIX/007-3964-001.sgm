<!DOCTYPE DOCBOOK PUBLIC "-//Cray Research, Inc.//DTD DocBook V2.3-based Subset V1.1//EN" [
<!ENTITY a12219.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12219.gif" NDATA gif>
<!ENTITY a12192.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12192.gif" NDATA gif>
<!ENTITY a12193.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12193.gif" NDATA gif>
<!ENTITY a12194.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12194.gif" NDATA gif>
<!ENTITY a12195.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12195.gif" NDATA gif>
<!ENTITY a12196.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12196.gif" NDATA gif>
<!ENTITY a12197.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12197.gif" NDATA gif>
<!ENTITY a12198.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12198.gif" NDATA gif>
<!ENTITY a12189.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12189.gif" NDATA gif>
<!ENTITY a12199.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12199.gif" NDATA gif>
<!ENTITY a12200.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12200.gif" NDATA gif>
<!ENTITY a12201.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12201.gif" NDATA gif>
<!ENTITY a12220.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12220.gif" NDATA gif>
<!ENTITY a12202.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12202.gif" NDATA gif>
<!ENTITY a12221.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12221.gif" NDATA gif>
<!ENTITY a12203.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12203.gif" NDATA gif>
<!ENTITY a12222.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12222.gif" NDATA gif>
<!ENTITY a12204.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12204.gif" NDATA gif>
<!ENTITY a12231.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12231.gif" NDATA gif>
<!ENTITY a12214.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12214.gif" NDATA gif>
<!ENTITY a12205.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12205.gif" NDATA gif>
<!ENTITY a12206.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12206.gif" NDATA gif>
<!ENTITY a12207.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12207.gif" NDATA gif>
<!ENTITY a12217.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12217.gif" NDATA gif>
<!ENTITY a12208.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12208.gif" NDATA gif>
<!ENTITY a12190.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12190.gif" NDATA gif>
<!ENTITY a12218.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12218.gif" NDATA gif>
<!ENTITY a12209.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12209.gif" NDATA gif>
<!ENTITY a12191.gif SYSTEM "/data/eagan/pubs/edit/sgml/007-3964-001/figures/a12191.gif" NDATA gif>
]>



<docbook>
<book status="final" security="public">
<title>Performance Co-Pilot&trade; IRIX&reg; Base Software Administrator's Guide</title>
<bookinfo>
<bookbiblio>
<partnumber><classcode>007</classcode><base>3964</base><version>001</version></partnumber>
<publisher><publishername></publishername></publisher>
</bookbiblio>
<collections></collections>
<acknowledgements>
<legalnotice>
<para>&copy;1999, Silicon Graphics, Inc. All Rights Reserved</para>
<para>This document or parts thereof may not be reproduced in any form unless permitted by contract or by written permission of Silicon Graphics, Inc.</para>
</legalnotice>
<legalnotice>
<para>LIMITED AND RESTRICTED RIGHTS LEGEND</para>
<para>Use, duplication, or disclosure by the Government is subject to restrictions as set forth in the Rights in Data clause at FAR 52.227-14 and/or in similar or successor clauses in the FAR, or in the DOD, DOE or NASA FAR Supplements. Unpublished rights reserved under the Copyright Laws of the United States. Contractor/manufacturer is Silicon Graphics, Inc., 1600 Amphitheatre Pkwy., Mountain View, CA 94043-1351.</para>
</legalnotice>
<legalnotice>
<para>Silicon Graphics, Challenge, Indy, IRIS, IRIX, OpenGL, and WebFORCE are registered trademarks and ChallengeArray, Inventor, IRIS FailSafe, IRIS InSight, IRIS Inventor, IRIS Showcase, MineSet, Open Inventor, Origin, Performance Co-Pilot, and SGI are trademarks of Silicon Graphics, Inc. Indy Presenter is a trademark, used under license in the U.S. and owned by Silicon Graphics, Inc. in other countries worldwide.</para>
</legalnotice>
<legalnotice>
<para>Cisco is a trademark of Cisco Systems, Inc. FLEXlm is a trademark of GLOBEtrotter Software. Informix is a trademark of Informix Corporation. NFS is a trademark of Sun Microsystems, Inc. Oracle and Oracle7 are trademarks of Oracle Corporation. PostScript is a trademark of Adobe Systems, Inc. Sybase is a trademark of Sybase, Inc. UNIX is a registered trademark in the United States and other countries, licensed exclusively through X/Open Company, Ltd.</para>
</legalnotice>
</acknowledgements>
<revhistory>
<revision>
<revnumber>001</revnumber><date>July 1999</date>
<revremark>Original printing. This guide supports the IRIX release 6.5.5.</revremark>
</revision></revhistory>
</bookinfo>




<preface>
<title>About This Guide</title>
<para>This guide describes the Performance Co-Pilot (PCP) software package of advanced performance tools for the SGI family of graphical workstations and servers.</para>
<para>The <string strname="007-3964"><citetitle>Performance Co-Pilot IRIX Base Software Administrator's Guide</citetitle></string> documents the PCP features that are embedded in the IRIX operating system. This manual is a subset of the <string strname="007-2614"><citetitle>Performance Co-Pilot User's and Administrator's Guide</citetitle></string>.</para>
<para>Performance Co-Pilot provides a systems-level suite of tools that cooperate to deliver integrated performance monitoring and performance management services spanning the hardware platforms, operating systems, service layers, database management systems, and user applications.</para>
<para>&ldquo;About This Guide&rdquo; includes short descriptions of the chapters in this book, directs you to additional sources of information, and explains typographical conventions.</para>
<section>
<title>What This Guide Contains</title>
<para>This guide contains the following chapters:</para>
<itemizedlist>
<listitem><para><xref linkend="LE91944-PARENT"></xref>, provides an introduction and conceptual foundations of the PCP product.</para>
</listitem>
<listitem><para><xref linkend="LE17127-PARENT"></xref>, describes the basic installation and configuration steps necessary to get PCP running on your systems.</para>
</listitem>
<listitem><para><xref linkend="LE94335-PARENT"></xref>, summarizes user interface components that are common to most of the graphical tools and text-based utilities that constitute the PCP monitor software.</para>
</listitem>
<listitem><para><xref linkend="LE38515-PARENT"></xref>, describes the basic interactive performance monitoring tools available in PCP, including  <command>pmkstat</command>, <command>pmval</command>, <command>pmem</command>, <command>pminfo</command>, <command>pmstore</command>, and <command>oview</command>.</para>
</listitem>
<listitem><para><xref linkend="LE21414-PARENT"></xref>, introduces the automated reasoning facilities of PCP that provide both real-time and retrospective filtering of performance data to identify adverse performance scenarios and raise alarms.</para>
</listitem>
<listitem><para><xref linkend="LE93354-PARENT"></xref>, covers the PCP services and utilities that support archive logging for capturing accurate historical performance records.</para>
</listitem>
<listitem><para><xref linkend="LE65325-PARENT"></xref>, provides a comprehensive list of the acronyms used in this guide, in the man pages, and in the release notes for Performance Co-Pilot.</para>
</listitem></itemizedlist>
</section>
<section>
<title>Audience for This Guide</title>
<para>This guide is written for the system administrator or performance analyst who is directly using and administering PCP applications. It is assumed that you have installed IRIS InSight for viewing online books, or have access to the <citetitle>IRIX Admin</citetitle> manual set, including <string strname="007-2859"><citetitle>IRIX Admin: System Configuration and Operation</citetitle></string>, and the <string strname="007-1366"><citetitle>Personal System Administration Guide</citetitle></string>
as hard copy documents.</para>
</section>
<section>
<title>Additional Resources</title>
<para>Additional resources include man pages, release notes, and SGI web sites.</para>
<section>
<title>Man Pages</title>
<para>The IRIX man pages provide concise reference information on the use of IRIX commands, subroutines, and system resources. There is usually a man page for each PCP command or subroutine. To see a list of all the PCP man pages, enter the following command:</para>
<literallayout><userinput>man -k performance</userinput>&ensp;</literallayout>
<para>To see a particular man page, supply its name to the <literal>man</literal> command, for example:</para>
<literallayout><userinput>man pminfo</userinput></literallayout>
<para>The man pages are divided into the following seven sections:</para>
<deflist termlength="narrow" id="Z927138113sdc">
<deflistentry>
<term>(1)</term>
<listitem><para>General commands</para>
</listitem></deflistentry>
<deflistentry>
<term>(2)</term>
<listitem><para>System calls and error numbers</para>
</listitem></deflistentry>
<deflistentry>
<term>(3)</term>
<listitem><para>Library subroutines</para>
</listitem></deflistentry>
<deflistentry>
<term>(4)</term>
<listitem><para>File formats</para>
</listitem></deflistentry>
<deflistentry>
<term>(5)</term>
<listitem><para>Miscellaneous</para>
</listitem></deflistentry>
<deflistentry>
<term>(6)</term>
<listitem><para>Demos and games</para>
</listitem></deflistentry>
<deflistentry>
<term>(7)</term>
<listitem><para>Special files</para>
</listitem></deflistentry>
</deflist>
<para>When referring to man pages, this guide follows a standard UNIX convention: the section number in parentheses follows the item. For example, <command sectionref="3">PMDA</command> refers to the man page in section 3 for the <command>pmda</command> command.</para>
</section>
<section>
<title>Release Notes</title>
<para>Release notes provide specific information about the current release, available online through the <command sectionref="1">relnotes</command> command. Exceptions to the printed and online documentation are found in the release notes. The <command>grelnotes</command> command provides a graphical interface to the release notes of all products installed on your system.</para>
</section>
<section>
<title>SGI Web Sites</title>
<para>The following Web sites are accessible to everyone with general Internet access:</para>
<literallayout><filename>http://www.sgi.com</filename></literallayout>
<para>The SGI general Web site, with search capability.</para>
<literallayout><filename>http://www.sgi.com/software</filename></literallayout>
<para>Links to Performance Co-Pilot product information.</para>
<literallayout><filename>http://techpubs.sgi.com</filename></literallayout>
<para>The SGI Technical Publications Library.</para>
</section>
</section>
<section>
<title>Obtaining Publications</title>
<para>To order a document, call +1 651 683 5907. SGI employees may send e-mail to <literal>orderdsk@sgi.com</literal>.</para>
<para>Customers outside of the United States and Canada should contact their local service organization for ordering and documentation information.</para>
</section>
<section>
<title>Conventions Used in This Guide</title>
<para>These type conventions and symbols are used in this guide:</para>
<deflist>
<deflistentry>
<term><replaceable>Italics</replaceable></term>
<listitem><para>Italic typeface denotes variable entries and words or concepts being defined.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>Fixed-width type</literal></term>
<listitem><para>This fixed-space font denotes literal items such as commands, files, routines, path names, signals, keys, messages, error messages, prompts, onscreen text, and programming language structures.</para>
</listitem></deflistentry>
<deflistentry>
<term><userinput>Bold fixed-width type</userinput></term>
<listitem><para>This bold, fixed-space font denotes literal items that the user enters in interactive sessions. Output is shown in nonbold, fixed-space font.</para>
</listitem></deflistentry>
<deflistentry>
<term>ALL CAPS</term>
<listitem><para>All capital letters denote environment variables, operator names, directives, defined constants, and macros in C programs.</para>
</listitem></deflistentry>
<deflistentry>
<term>()</term>
<listitem><para>Parentheses that follow function names surround function arguments or are empty if the function has no arguments; parentheses that follow IRIX commands surround man page section numbers.</para>
</listitem></deflistentry>
<deflistentry>
<term>[]</term>
<listitem><para>Brackets surround optional syntax statement arguments.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>#</literal></term>
<listitem><para>The pound character is the IRIX shell prompt for the superuser (<literal>root</literal>).</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%</literal></term>
<listitem><para>The percent character is the IRIX shell prompt for users other than the superuser.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>&gt;&gt;</literal></term>
<listitem><para>Two greater than characters denote the Command Monitor prompt.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Reader Comments</title>
<para>If you have comments about the technical accuracy, content, or organization of this document, please tell us. Be sure to include the title and part number of the document with your comments.</para>
<para>You can contact us in any of the following ways:<itemizedlist>
<listitem><para>Send e-mail to the following address:<literallayout>techpubs@sgi.com</literallayout></para>
</listitem>
<listitem><para>Send a fax to the attention of &ldquo;Technical Publications&rdquo; at: +1 650 932 0801.</para>
</listitem>
<listitem><para>Use the Feedback option on the Technical Publications Library World Wide Web page:<literallayout>http://techpubs.sgi.com</literallayout></para>
</listitem>
<listitem><para>Call the Technical Publications Group, through the Technical Assistance Center, at: 1 800 800 4SGI.</para>
</listitem>
<listitem><para>Send mail to the following address:<simplelist type="horiz" role="address">
<member>Technical Publications</member>
<member>SGI</member>
<member>1600 Amphitheatre Pkwy.</member>
<member>Mountain View, California 94043-1351</member></simplelist></para>
</listitem></itemizedlist></para>
<para>We value your comments and will respond to them promptly.</para>
</section>
</preface>


<chapter id="LE91944-PARENT">
<title id="LE91944-TITLE">Introduction to Performance Co-Pilot</title>
<para>This chapter provides an introduction to Performance Co-Pilot (PCP), an overview of its individual components, and conceptual information to help you use this product.</para>
<para>The following sections are included:</para>
<itemizedlist>
<listitem><para><xref linkend="LE92676-PARENT"></xref>, covers the intended purposes of PCP.</para>
</listitem>
<listitem><para><xref linkend="LE13618-PARENT"></xref>, describes PCP tools and agents.</para>
</listitem>
<listitem><para><xref linkend="LE79836-PARENT"></xref>, discusses the design theories behind PCP.</para>
</listitem></itemizedlist>
<section id="LE92676-PARENT">
<title id="LE92676-TITLE">Objectives</title>
<para></para>
<para>Performance Co-Pilot (PCP) provides a range of services that may be used to monitor and manage system performance. These services are distributed and scalable to accommodate the most complex system configurations and performance problems.</para>
<section id="LE67354-PARENT">
<title id="LE67354-TITLE">PCP  Target Usage</title>
<para>PCP is targeted at the performance analyst, benchmarker, capacity planner, developer, database administrator, or system administrator with an interest in overall system performance and a need to quickly isolate and understand performance behavior, resource utilization, activity levels, and bottlenecks in complex systems. Platforms that can benefit
from this level of performance analysis include large servers, server clusters, or multiserver sites delivering database management systems (DBMS), compute, Web, file, or video services.</para>
</section>
<section id="LE79006-PARENT">
<title id="LE79006-TITLE">Empowering the PCP User</title>
<para>To deal efficiently with the dynamic behavior of complex systems, performance analysts need to filter out noise from the overwhelming stream of performance data, and focus on exceptional scenarios. Visualization of current and historical performance data, and automated reasoning about performance data, effectively provide this filtering.</para>
<para>From the PCP end user's perspective, PCP presents an integrated suite of tools, user interfaces, and services that support real-time and retrospective performance analysis, with a bias towards eliminating mundane information and focusing attention on the exceptional and extraordinary performance behaviors. When this is done, the user can concentrate on in-depth analysis or target management procedures for those critical system performance problems.</para>
</section>
<section id="LE35382-PARENT">
<title id="LE35382-TITLE">Unification of Performance Metric Domains</title>
<para>At the lowest level, performance metrics are collected and managed in autonomous performance domains such as the IRIX operating system, a database management system, a layered service, or an end-user application. These domains feature a multitude of access control policies, access methods, data
semantics, and multiversion support. All this detail is irrelevant to the developer or user of a performance monitoring tool, and is hidden by the PCP infrastructure.</para>
<para>Performance Metrics Domain Agents (PMDAs) within PCP encapsulate the knowledge about, and export performance information from, autonomous performance domains.</para>
</section>
<section id="LE83994-PARENT">
<title id="LE83994-TITLE">Uniform Naming and Access to Performance Metrics</title>
<para>Usability and extensibility of performance management tools mandate a single scheme for naming performance
metrics. The set of defined names constitutes a Performance Metrics Name Space (PMNS). Within PCP, the PMNS is adaptive so it can be extended, reshaped, and pruned to meet the needs of particular applications and users.</para>
<para>PCP provides a single interface to name and retrieve values for all performance metrics, independently of their source or location.</para>
</section>
<section id="LE85063-PARENT">
<title id="LE85063-TITLE">PCP Distributed Operation</title>
<para>From a purely pragmatic viewpoint, a single workstation must be able to monitor the concurrent performance of multiple remote hosts. At the same time, a single host may be subject to monitoring from multiple remote workstations.</para>
<para>These requirements suggest a classic client-server architecture, which is exactly what PCP uses to provide concurrent and multiconnected access to performance metrics, independent of their host location.</para>
</section>
<section id="LE87326-PARENT">
<title id="LE87326-TITLE">Dynamic Adaptation to Change</title>
<para>Complex systems are subject to continual changes as network connections fail and are reestablished; nodes are taken out of service and rebooted; hardware is added and removed; and software is upgraded, installed, or removed. Often these changes are asynchronous and remote (perhaps in another geographic region or domain of administrative control).</para>
<para>The distributed nature of the PCP (and the modular fashion in which performance metrics domains can be installed, upgraded, and configured on different hosts) enables PCP to adapt concurrently to changes in the monitored system(s). Variations in the available performance metrics as a consequence of configuration changes are handled automatically and become visible to all clients as soon as the reconfigured host is rebooted or the responsible agent is restarted.</para>
<para>PCP also detects loss of client-server connections, and most clients support subsequent automated reconnection.</para>
</section>
<section id="LE13859-PARENT">
<title id="LE13859-TITLE">Logging and Retrospective Analysis</title>
<para>A range of tools is provided to support flexible, adaptive logging of performance metrics for archive, playback, remote diagnosis, and capacity planning. PCP archive logs may be accumulated either at the host being monitored, at a monitoring workstation, or both.</para>
<para>A universal replay mechanism, modeled on VCR controls, supports play, step, rewind, fast forward at variable speed processing of archived performance data.</para>
<para>Most PCP applications are able to process archive logs and real-time performance data with equal facility. Unification of real-time access and access to the archive logs, in conjunction with VCR-like viewing controls, provides new and powerful ways to build performance tools and to review both current and historical performance data.</para>
</section>
<section id="LE36677-PARENT">
<title id="LE36677-TITLE">Automated Operational Support</title>
<para>For operational and production environments, PCP provides a framework with scripts to customize in order to automate the execution of ongoing tasks such as these:</para>
<itemizedlist>
<listitem><para>Centralized archive logging for multiple remote hosts</para>
</listitem>
<listitem><para>Archive log rotation, consolidation, and culling</para>
</listitem>
<listitem><para>Web-based publishing of charts showing snapshots of performance activity levels in the recent past</para>
</listitem>
<listitem><para>Flexible alarm monitoring: parameterized rules to address common critical performance scenarios and facilities to customize and refine this monitoring</para>
</listitem>
<listitem><para>Retrospective performance audits covering the recent past; for example, daily or weekly checks for performance regressions or quality of service problems</para>
</listitem></itemizedlist>
</section>
<section id="LE38522-PARENT">
<title id="LE38522-TITLE">PCP Extensibility</title>
<para>PCP permits the integration of new performance metrics into the Performance Metrics Name Space (PMNS), the collection infrastructure, and the logging framework. The guiding principle is, &ldquo;if it is important for monitoring system performance, and you can measure it, you can easily integrate it into the PCP framework.&rdquo;</para>
<para>For many PCP customers, the most important performance metrics are not those already supported, but new performance metrics that characterize the essence of good or bad performance at their site, or within their particular application environment.</para>
<para>One example is an application that measures the round-trip time for a benign &ldquo;probe&rdquo; transaction against some mission-critical application.</para>
<para>For application developers, a library is provided to support easy-to-use insertion of trace and monitoring points within an application, and the automatic export of resultant performance data into the PCP framework. Other libraries and tools aid the development of customized and fully featured Performance
Metrics Domain Agents (PMDAs).</para>
<para>Extensive source code examples are provided in the distribution, and by using the PCP toolkit and interfaces, these customized measures of performance or quality of service can be easily and seamlessly integrated into the PCP framework.</para>
</section>
<section id="LE40772-PARENT">
<title id="LE40772-TITLE">Additional PCP Features</title>
<para>The following PCP features are available:</para>
<deflist termlength="NEXTLINE">
<deflistentry>
<term>Metric coverage</term>
<listitem><para>The core PCP modules support export of performance metrics that include all IRIX 6.2 (and later) kernel instrumentation, hardware instrumentation, process-level resource utilization, and activity in the PCP collection infrastructure.</para>
<para>The supplied agents support over 1000 distinct performance metrics, many of which can have multiple values, for example, per disk, per CPU, or per process.</para>
</listitem></deflistentry>
<deflistentry>
<term>Additional metrics in the layered PCP product</term>
<listitem><para>The PCP product extends the core modules with performance metrics that cover customizable summaries of performance metrics, <command>sendmail</command> activity and queue lengths, response time for arbitrary command execution as a quality of service measure, a dynamic subset of processes that are interesting according to user-defined criteria, environmental monitors for Challenge systems, Cisco router statistics, and application instrumentation services.</para>
</listitem></deflistentry>
<deflistentry>
<term>Add-on products</term>
<listitem><para>Additional PCP products extend the scope of performance metrics and tools to cover the following layered services:</para>
<para><itemizedlist>
<listitem><para>World Wide Web (WWW) serving</para>
</listitem>
<listitem><para>Oracle DBMS deployments</para>
</listitem>
<listitem><para>HPC and array environments</para>
</listitem>
<listitem><para>SGI IRIS FailSafe platforms</para>
</listitem></itemizedlist></para>
<para>The add-on products share the basic PCP operational model, APIs, architectural deployment, and protocols. Additional documentation is provided with each add-on product to describe specific installation, operation, and functional details.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
<section id="LE13618-PARENT">
<title id="LE13618-TITLE">Overview of Component Software</title>
<para>Performance Co-Pilot (PCP) is composed of text-based tools, graphical tools, and related commands. Each tool or command is fully documented by a man page. These man pages are named after the tools or commands they describe, and are accessible through the <command>man</command> command. For example, to see the <command sectionref="1">pminfo</command> man page for the <command>pminfo</command>
command, enter this command:</para>
<literallayout><userinput>man pminfo</userinput></literallayout>
<para>Many PCP tools and commands are accessible from an <interface>Icon Catalog</interface> on the IRIX desktop, grouped under <interface>PerfTools</interface>. In the <interface>Toolchest</interface> <interface>Find</interface> menu, choose <interface>PerfTools</interface>; an <interface>Icon Catalog</interface> appears, containing clickable PCP programs. To bring up a Web-based introduction to Performance Co-Pilot, click the <interface>AboutPCP
</interface> icon.</para>
<para>A list of PCP tools and commands, grouped by functionality, is provided in the following four sections.</para>
<section>
<title>Performance Monitoring and Visualization</title>
<para>The following tools provide the principal services for the PCP end-user with an interest in monitoring, visualizing, or processing performance information collected either in real time or from PCP archive logs:</para>
<deflist>
<deflistentry>
<term> <command>oview</command></term>
<listitem><para>Visualizes the performance of SGI Origin systems, showing a dynamic display of Origin node topology and performance.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmem</command></term>
<listitem><para>Reports per-process memory usage statistics. Both virtual size and prorated physical memory usage are reported.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmie</command></term>
<listitem><para>Evaluates predicate-action rules over performance metrics domain, for performance alarms, automated system management tasks, dynamic tuning configuration, and so on. It is an inference engine.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmieconf</command></term>
<listitem><para>Creates parameterized rules to be used with Performance Co-Pilot inference engine (<literal>pmie</literal>).</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pminfo</command></term>
<listitem><para>Displays information about arbitrary performance metrics available from PCP, including help text with <literal>-T</literal>.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmkstat</command></term>
<listitem><para>Provides a text-based display of metrics that summarize system performance at a high level, suitable for ASCII logs or inquiry over a modem.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmprobe</command></term>
<listitem><para>Probes for performance metric availability, values, and instances.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmtime</command></term>
<listitem><para>Provides a graphical user interface for PCP applications requiring time control. This command is not normally invoked directly by users.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmval</command></term>
<listitem><para>Provides a text-based display of the values for arbitrary instances of a selected performance metric, suitable for ASCII logs or inquiry over a modem.</para>
</listitem></deflistentry></deflist>
</section>
<section>
<title>Collecting, Transporting, and Archiving Performance Information</title>
<para>PCP provides the following tools to support real-time data collection, network transport, and archive log creation services for performance data:</para>
<deflist>
<deflistentry>
<term><command>pmcd</command></term>
<listitem><para>Is the Performance Metrics Collection Daemon (PMCD). This daemon must run on
each system being monitored, to collect and export the performance information necessary to monitor the system.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmcd_wait</command></term>
<listitem><para>Waits for <command>pmcd</command> to be ready to accept client connections.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdumplog</command></term>
<listitem><para>Displays selected state information, control data, and metric values from a PCP archive log created by <command>pmlogger</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlc</command></term>
<listitem><para>Exercises control over an instance of the PCP archive logger <command>pmlogger</command>, to modify the profile of which metrics are logged and/or how frequently their values are logged.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogconf</command></term>
<listitem><para>Creates or modifies <command>pmlogger</command> configuration files for most common logging scenarios. It is an interactive script.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlogger</command></term>
<listitem><para>Creates PCP archive logs of performance metrics over time. Many tools accept these PCP archive logs as alternative sources of metrics for retrospective analysis.</para>
</listitem></deflistentry></deflist>
</section>
<section>
<title>Operational and Infrastructure Support</title>
<para>PCP provides the following tools to support the PCP infrastructure and assist operational procedures for PCP deployment in a production environment:</para>
<deflist>
<deflistentry>
<term><command>autofsd_probe</command></term>
<listitem><para>Probes the availability of the AutoFS mount/unmount daemon. It is used by the <literal>shping</literal> PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>hipprobe</command></term>
<listitem><para>Probes the state of the configured HIPPI interfaces. Used by the <literal>shping</literal> PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdate</command></term>
<listitem><para>Displays the current date and/or time, with an optional offset.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmdbg</command></term>
<listitem><para>Describes the available facilities and associated control flags. PCP tools include internal diagnostic and debugging facilities that may be activated by run-time flags.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmerr</command></term>
<listitem><para> Translates PCP error codes into human-readable error messages.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmhostname</command></term>
<listitem><para>Reports hostname as returned by <command>gethostbyname</command>. Used in assorted PCP management scripts.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmie_check</command></term>
<listitem><para>Administration of the Performance Co-Pilot inference engine (<command>pmie</command>).</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmlock</command></term>
<listitem><para>Attempts to acquire an exclusive lock by creating a file with a mode of 0.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmpost</command></term>
<listitem><para>Appends the text message to the end of the PCP notice board file (<filename>/var/adm/pcplog/NOTICES</filename>).</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmrun</command></term>
<listitem><para>Is a graphical utility for launching PCP commands with optional arguments from the IRIX desktop.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>pmstore</command></term>
<listitem><para>Reinitializes counters or assigns new values to metrics that act as control variables. The command changes the current values for the specified instances of a single performance metric.</para>
</listitem></deflistentry>
</deflist>
</section></section>
<section id="LE79836-PARENT">
<title id="LE79836-TITLE">Conceptual Foundations</title>
<para>The following sections provide a detailed overview of concepts that underpin Performance Co-Pilot (PCP).</para>
<section>
<title>Performance Metrics</title>
<para> Across all of the supported performance metric domains, there are a large number of performance metrics.
Each metric has its own structure and semantics. PCP presents a uniform interface to these metrics, independent of the underlying metric data source.</para>
<para>The Performance Metrics Name Space (PMNS) provides a hierarchical classification of external metric names, and a mapping from external names to internal metric identifiers. See <xref linkend="LE94677-PARENT"></xref> for a description of the PMNS.</para>
</section>
<section>
<title>Performance Metric Instances</title>
<para>When performance metric values are returned to a requesting application, there may be more than one value instance for a particular metric; for example, independent counts for each CPU, process, disk, or local filesystem.
Internal instance identifiers correspond one to one with external (textual) descriptions of the members of an instance domain.</para>
<para>Transient performance metrics (such as per-process information, per-XLV volume, and so on) cause repeated requests for the same metric to return different numbers of values, or changes in the particular instance identifiers returned. These changes are expected and fully supported by the PCP infrastructure; however, metric instantiation is guaranteed to be valid only at the time of collection.</para>
</section>
<section>
<title>Current Metric Context</title>
<para> When performance metrics are retrieved, they are delivered in the context of a particular source of metrics, a point in time, and a profile of desired instances. This means that the application making the request has already negotiated to establish the context in which the request should be executed.</para>
<para>A metric source may be the current performance data from a particular host (a live or real-time source), or an archive log of performance data collected by <command>pmlogger</command> at some distant host or at an earlier time (a retrospective or archive source).</para>
<para>By default, the collection time for a performance metric is the current time of day for real-time sources, or current point within an archive source. For archives, the collection time may be reset to an arbitrary time within the bounds of the  archive log.</para>
<note><para>Performance Co-Pilot 2.<replaceable>x</replaceable>, and IRIX release 6.5, were developed to be completely Year 2000 compliant.</para>
</note>
</section>
<section>
<title>Sources of Performance Metrics and Their Domains</title>
<para> Instrumentation for the purpose of performance monitoring typically consists of counts of activity or events, attribution of resource consumption, and service-time or response-time measures. This instrumentation may exist in one or more of the functional domains as shown in <xref linkend="LE92548-TITLE"></xref>.
</para>
<figure width="wide">
<title id="LE92548-TITLE">Performance Metric Domains as Autonomous Collections of Data</title>
<graphic entityref="a12189.gif" width="standard" scale="NO"></graphic>
</figure>
<para>Each domain has an associated access method:</para>
<itemizedlist>
<listitem><para>The IRIX kernel, including <command>sar</command> data structures, per-process resource consumption, network statistics, disk activity, or memory management instrumentation.</para>
</listitem>
<listitem><para>A DBMS such as the <literal>V$</literal> views and <literal>bstat</literal>/<literal>estat</literal> summaries for Oracle, the <literal>tbmonitor</literal> statistics for Informix, or the <literal>sp_monitor</literal> procedures for Sybase.</para>
</listitem>
<listitem><para>A layered software service such as activity logs for a World Wide Web server or an NNTP news server.</para>
</listitem>
<listitem><para>An application program such as measured response time for a production application running a periodic and benign probe transaction (as often required in service quality agreements), or rate of computation and throughput in jobs per hour for a batch stream.</para>
</listitem>
<listitem><para>A layered system product such as the temperature, voltage levels, and fan speeds from the environmental monitor in a Challenge system, or the length of the mail queue as reported by <literal>mqueue</literal>.</para>
</listitem>
<listitem><para>External equipment such as network routers and bridges.</para>
</listitem></itemizedlist>
<para>For each domain, the set of performance metrics may be viewed as an abstract data type, with an associated set of methods that may be used to perform the following tasks:</para>
<itemizedlist>
<listitem><para>Interrogate the metadata that describes the syntax and semantics of the performance metrics</para>
</listitem>
<listitem><para>Control (enable or disable) the collection of some or all of the metrics</para>
</listitem>
<listitem><para>Extract instantiations (current values) for some or all of the metrics</para>
</listitem></itemizedlist>
<para>We refer to each functional domain as a performance metrics domain and assume that domains are functionally, architecturally, and administratively independent and autonomous. Obviously the set of performance metrics domains available on any host is variable, and changes with time as software and hardware are installed and removed.</para>
<para>The number of performance metrics domains may be further enlarged in cluster-based or network-based configurations, where there is potentially an instance of each performance metrics domain on each node. Hence, the management of performance metrics domains must be both extensible at a particular host and distributed across a number of hosts.</para>
<para>Each performance metrics domain on a particular host must be assigned a unique Performance Metrics Domain Identifier (PMDI). In practice, this means unique identifiers are assigned globally for each performance metrics domain type. For example, the same identifier would be used for the IRIX performance metrics domain on all
hosts.</para>
</section>
<section>
<title>Distributed Collection</title>
<para>The performance metrics collection architecture is distributed, in the sense that any performance tool may be executing remotely. However, a PMDA must run on the system for which it is collecting performance
measurements. In most cases, connecting these tools together on the collection host is the responsibility of the <command>pmcd</command> process, as shown in <xref linkend="LE61231-TITLE"></xref>.</para>
<figure width="wide">
<title id="LE61231-TITLE">Process Structure for Distributed Operation</title>
<graphic entityref="a12190.gif" scale="NO"></graphic>
</figure>
<para>The host running the monitoring tools does not require any collection tools, including <command>pmcd</command>, because all requests for metrics are sent to the <command>pmcd</command> process on the collector host. These requests are then forwarded to the appropriate PMDAs, which respond with metric descriptions, help text, and most importantly, metric values.</para>
<para>The connections between monitor clients and <literal>pmcd</literal> processes are managed in <filename>libpcp</filename>, below the PMAPI level; see the <command sectionref="3">PMAPI</command> man page. Connections between PMDAs and <command>pmcd</command> are managed by the PMDA
routines; see the <command sectionref="3">PMDA</command> man page. There can be multiple monitor clients and multiple PMDAs on the one host, but there may be at most one <literal>pmcd</literal> process.</para>
</section>
<section id="LE94677-PARENT">
<title id="LE94677-TITLE">Performance Metrics Name Space</title>
<para> Internally, each unique performance metric is identified by a Performance Metric Identifier (PMID) drawn from a universal set of identifiers, including
some that are reserved for site-specific, application-specific, and customer-specific use.</para>
<para>An external name space (the Performance Metrics Name Space, or PMNS) maps from a hierarchy (or tree) of external names to PMIDs.</para>
<para>Each node in the name space tree is assigned a label that must begin with an alphabet character, and be followed by zero or more alphanumeric characters or the underscore (_) character. The root node of the tree has the special label of <literal>root</literal>.</para>
<para>A metric name is formed by traversing the tree from the root to a leaf node with each node label on the path separated by a period. The common prefix <literal>root</literal><emphasis>.</emphasis> is omitted from all names. For example, <xref linkend="LE57522-TITLE"></xref> shows the nodes in a small subsection of a PMNS.</para>
<figure>
<title id="LE57522-TITLE">Small Performance Metrics Name Space (PMNS)</title>
<graphic entityref="a12191.gif" scale="NO"></graphic>
</figure>
<para>In this subsection, the following are valid names for performance metrics:</para>
<literallayout>kernel.percpu.syscall<newline>network.tcp.rcvpack<newline>hw.router.recv.total_util<newline>
</literallayout>
<para>Although a default PMNS is shipped and updated by the components of PCP, individual users may create their own name space for metrics of interest, and all tools may use a private PMNS, rather than the default PMNS.</para>
<section><title>Distributed PMNS</title>
<para>In Performance Co-Pilot 1.<replaceable>x</replaceable> releases, the PMNS was local to the application that referred to PCP metrics by name. As of Performance Co-Pilot release 2.0, PMNS operations are directed to the host or archive that is the source of the desired performance metrics.</para>
<para>Distributed PMNS necessitated changes to PCP protocols between client applications and <command>pmcd</command>, and to the internal format of PCP archive files. Performance Co-Pilot release 2.<replaceable>x</replaceable> is compatible with earlier releases, so new PCP components operate correctly with either new or old PCP components. For example, connections to the PCP 1.<replaceable>x</replaceable> <command>
pmcd</command>, or attempts to process a PCP archive created by a Performance Co-Pilot 1.<replaceable>x</replaceable> <command>pmlogger</command>, revert to using the local PMNS.</para>
</section>
</section>
<section>
<title>Descriptions for Performance Metrics</title>
<para> Through the various performance metric domains, the PCP must support a wide range of formats and semantics for performance metrics. This <firstterm>metadata</firstterm> describing the performance metrics includes the following:</para>
<itemizedlist>
<listitem><para>The internal identifier (Performance Metric Identifier or PMID) for the metric</para>
</listitem>
<listitem><para>The format and encoding for the values of the metric, for example, an unsigned 32-bit integer or a string or a 64-bit IEEE format floating point number</para>
</listitem>
<listitem><para>The semantics of the metric, particularly the interpretation of the values as free-running counters or instantaneous values</para>
</listitem>
<listitem><para>The dimensionality of the values, in the dimensions of events, space, and time</para>
</listitem>
<listitem><para>The scale of values; for example, bytes, kilobytes (Kbyte), or megabytes (Mbyte) for the space dimension</para>
</listitem>
<listitem><para>An indication if the metric may have one or many associated values</para>
</listitem>
<listitem><para>Short (and extended) help text describing the metric</para>
</listitem></itemizedlist>
<para>For each metric, this metadata is defined within the associated PMDA, and PCP arranges for the information to be exported to the performance tools applications that use the metadata when interpreting the values for performance metrics.</para>
</section>
<section>
<title>Values for Performance Metrics</title>
<para>The following sections describe two types of performance metrics, single-valued and set-valued.</para>
<section><title>Single-Valued Performance Metrics</title>
<para>Some performance metrics have a singular value within their performance metric domains. For example, available memory (or the total number of context switches) has only one value per performance metric domain, that is, one value per host. The metadata describing the metric makes this fact known to applications that process values for these metrics.</para>
</section>
<section><title>Set-Valued Performance Metrics</title>
<para>Some performance metrics have a set of values or instances in each implementing performance metric domain. For example, one value for each disk, one value for each process, one value for each CPU, or one value for each activation of a given application.</para>
<para>When a metric has multiple instances, the PCP framework does not pollute the name space with additional metric names; rather, a single metric may have an associated set of values. These multiple values are associated with the members of an <firstterm>instance domain</firstterm>, such that each instance has a unique instance identifier within the associated instance domain. For example, the &ldquo;per CPU&rdquo; instance
domain may use the instance identifiers 0, 1, 2, 3, and so on to identify the configured processors in the system.</para>
<para>Internally, instance identifiers are encoded as binary values, but each performance metric domain also supports corresponding strings as external names for the instance identifiers, and these names are used at the user interface to the PCP utilities.</para>
<para>For example, the performance metric <literal>disk.dev.total</literal> counts I/O operations for each disk spindle, and the associated instance domain contains one member for each disk spindle. On a system with five specific disks, one value would be associated with each of the external and internal instance identifier pairs shown in <xref linkend="LE99129-TITLE"></xref>.</para>
<table frame="topbot">
<title id="LE99129-TITLE">Sample Instance Identifiers for Disk Statistics</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="198*">
<colspec colwidth="198*">
<thead>
<row rowsep="1"><entry align="left" valign="bottom"><para>External Instance Identifier</para></entry><entry align="left" valign="bottom"><para>Internal Instance Identifiers</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para>dks1d1</para></entry>
<entry align="left" valign="top"><para>131329</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks1d2</para></entry>
<entry align="left" valign="top"><para>131330</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks1d3</para></entry>
<entry align="left" valign="top"><para>131331</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks3d1</para></entry>
<entry align="left" valign="top"><para>131841</para></entry></row>
<row>
<entry align="left" valign="top"><para>dks3d2</para></entry>
<entry align="left" valign="top"><para>131842</para></entry></row></tbody></tgroup></table>
<para>Multiple performance metrics may be associated with a single instance domain.</para>
<para>Each performance metric domain may dynamically establish the instances within an instance domain. For example, there may be one instance for the metric <literal>kernel.percpu.idle</literal> on a workstation, but multiple instances on a multiprocessor server. Even more dynamic is <literal>filesys.free</literal>, where the values report the amount of free space per file system, and the number of values tracks the mounting and unmounting of local filesystems.</para>
<para>PCP arranges for information describing instance domains to be exported from the performance metric domains to the applications that require this information. Applications may also choose to retrieve values for all instances of a performance metric, or some arbitrary subset of the available instances.</para>
</section>
</section>
<section>
<title>Collector and Monitor Roles</title>
<para>Hosts supporting PCP services are broadly classified into two categories:</para>
<deflist id="Z926617459sdc">
<deflistentry>
<term>Collector</term>
<listitem><para>Hosts that have <literal>pmcd</literal> and one or more Performance Metric Domain Agents (PMDAs) running to collect and export performance metrics</para>
</listitem></deflistentry>
<deflistentry>
<term>Monitor</term>
<listitem><para> Hosts that import performance metrics from one or more collector hosts to be consumed by tools to monitor, manage, or record the performance of the collector hosts</para>
</listitem></deflistentry>
</deflist>
<para>Each PCP enabled host can operate as a collector, a monitor, or both.</para>
</section>
<section id="LE75000-PARENT">
<title id="LE75000-TITLE">Performance Metrics Collection System</title>
<para> PCP provides an infrastructure through the Performance Metrics Collection System (PMCS). It unifies the autonomous and distributed PMDAs into a cohesive pool of performance data, and provides the services required to create generalized and powerful performance tools.</para>
<para>The PMCS provides the framework that underpins the PMAPI. The PMCS is responsible for the following services on behalf of the performance tools developed on top of the PMAPI:</para>
<itemizedlist>
<listitem><para>Distributed namespace services</para>
</listitem>
<listitem><para>Instance domain services</para>
</listitem>
<listitem><para>Coordination with the processes and procedures required to control the description, collection, and extraction of performance metric values from agents that interface to the performance metric domains</para>
</listitem>
<listitem><para>Servicing incoming requests for local performance metric values and metadata from applications running either locally or on a remote system</para>
</listitem></itemizedlist>
</section>
<section>
<title>Retrospective Sources of Performance Metrics</title>
<para>The PMCS described in the previous section is used when PMAPI clients are requesting performance metrics from a real-time or live source.</para>
<para>The PMAPI also supports delivery of performance metrics from a historical source in the form of a PCP archive log. Archive logs are created using the <literal>pmlogger</literal> utility, and are replayed in an architecture as shown in <xref linkend="LE70187-TITLE"></xref>.</para>
<figure>
<title id="LE70187-TITLE">Architecture for Retrospective Analysis</title>
<graphic entityref="a12192.gif" scale="NO"></graphic>
</figure>
<para>The PMAPI has been designed to minimize the differences required for an application to process performance data from an archive or from a real-time source. As a result, most PCP tools support live and retrospective monitoring with equal facility.</para>
</section></section>
</chapter>


<chapter id="LE17127-PARENT">
<title id="LE17127-TITLE">Installing and Configuring Performance Co-Pilot</title>
<para>The sections in this chapter describe the basic installation and configuration steps necessary to run Performance Co-Pilot (PCP) on your
systems. The following major sections are included:</para>
<itemizedlist>
<listitem><para><xref linkend="LE18649-TITLE"></xref> describes the main packages of PCP software and how they must be installed on each system.</para>
</listitem>
<listitem><para><xref linkend="LE91313-PARENT"></xref>, describes the additional options available for PCP.</para>
</listitem>
<listitem><para><xref linkend="LE26146-PARENT"></xref>, describes the fundamentals of maintaining the performance data collector.</para>
</listitem>
<listitem><para><xref linkend="LE70712-PARENT"></xref>, offers advice on problems involving the PMCD.</para>
</listitem></itemizedlist>
<section id="LE18649-PARENT">
<title id="LE18649-TITLE">Product Structure</title>
<para>In a typical deployment, Performance Co-Pilot (PCP) would be installed in a collector configuration on one or more hosts, from which
the performance information could then be collected, and in a monitor configuration on one or more workstations, from which the performance of the server systems could then be monitored.</para>
<para>PCP is packaged into a number of basic subsystem types that reflect the functional role of the product components. These subsystems may be installed using the <command>inst</command> or <command>swmgr</command> command:</para>
<deflist id="Z926620168sdc">
<deflistentry>
<term>Core</term>
<listitem><para>The <filename>pcp_eoe.sw.eoe</filename> and <filename>pcp.sw.base</filename> subsystems must be installed on every PCP enabled host, that is, on both PCP monitor and PCP collection systems.</para>
</listitem></deflistentry>
<deflistentry>
<term>Monitor</term>
<listitem><para>The <filename>pcp_eoe.sw.monitor</filename> and <filename>pcp.sw.monitor</filename> subsystems must
be installed on every PCP monitor host. Subsystems <filename>pcp_eoe.books.help</filename> and <filename>pcp.books.help</filename> should be installed to provide help support for the GUI monitoring tools; see the <command sectionref="1">sgihelp</command> man page.</para>
</listitem></deflistentry>
<deflistentry>
<term>Collector</term>
<listitem><para>No additional installation is required because the Performance Metrics Collection Daemon (<command>pmcd</command>) is in the <filename>pcp_eoe.sw.eoe</filename> subsystem.</para>
</listitem></deflistentry>
<deflistentry>
<term>Demo</term>
<listitem><para>The <filename>pcp.sw.demo</filename> subsystems provide source code for example applications and PMDAs that serve as templates for developing new modules to extend the PCP coverage of performance metrics or the capabilities of monitoring tools.</para>
</listitem></deflistentry>
<deflistentry>
<term>Other</term>
<listitem><para>The other <filename>pcp.sw.*</filename> subsystems provide the support for the optional PMDAs, and when required, need to be installed on the PCP collector host, and subsequently configured before they become active.</para>
</listitem></deflistentry>
<deflistentry>
<term>Gift</term>
<listitem><para>The <filename>pcp_gifts.sw.*</filename> subsystems provide optional applications and services that may be individually installed as required.</para>
</listitem></deflistentry>
<deflistentry>
<term>Documentation</term>
<listitem><para>The <filename>pcp.man.*</filename> and <filename>pcp.books.*</filename> subsystems provide release notes, man pages, interactive tutorials, and IRIS InSight books, and may be installed as needed.</para>
</listitem></deflistentry>
</deflist>
<para>For complete information on the installable software packages, see the Performance Co-Pilot release notes, available through the <command sectionref="1">relnotes</command> or <command sectionref="1">grelnotes</command> commands.</para>
</section>
<section id="LE91313-PARENT">
<title id="LE91313-TITLE">Optional Software</title>
<para>The capabilities of your Performance Co-Pilot (PCP) installation may be extended with added performance metrics or visual tools that are available as add-on products, sold separately from the base Performance Co-Pilot product.</para>
<para>For example, PCP add-on products support the following:</para>
<itemizedlist>
<listitem><para>World Wide Web (WWW) serving</para>
</listitem>
<listitem><para>Oracle DBMS deployments</para>
</listitem>
<listitem><para>HPC and array environments</para>
</listitem>
<listitem><para>SGI IRIS FailSafe platforms</para>
</listitem></itemizedlist>
</section>
<section id="LE26146-PARENT">
<title id="LE26146-TITLE">Performance Metrics Collection Daemon (PMCD)</title>
<para> On each Performance Co-Pilot (PCP) collection system, you must be certain that the <command>pmcd</command> daemon is running. This daemon coordinates the
gathering and exporting of performance statistics in response to requests from the PCP monitoring tools.</para>
<section>
<title>Starting and Stopping the PMCD</title>
<para>To start the daemon, enter the following commands as <literal>root</literal> on each PCP collection system:</para>
<literallayout><userinput>chkconfig pmcd on</userinput>&ensp;<newline><userinput>/etc/init.d/pcp start</userinput>&ensp;</literallayout>
<para>These commands instruct the system to start the daemon immediately, and again whenever the system is booted. It is not necessary to start the daemon on the monitoring system unless you wish to collect performance information from it as well.</para>
<para>To stop <command>pmcd</command> immediately on a PCP collection system, enter the command</para>
<literallayout><userinput>/etc/init.d/pcp stop</userinput></literallayout>
</section>
<section id="LE58493-PARENT">
<title id="LE58493-TITLE">Restarting an Unresponsive PMCD</title>
<para>Often, if a daemon is not responding on a PCP collection system, the problem can be resolved by stopping and then immediately restarting a fresh instance of the daemon. If you need to stop and then immediately restart <command>pmcd</command> on a PCP collection system, use the <literal>start</literal> argument provided with the script in <filename>/etc/init.d</filename>. The
command syntax is</para>
<literallayout><userinput>/etc/init.d/pcp start</userinput>&ensp;</literallayout>
<para>On startup, <command>pmcd</command> looks for a configuration file named <filename>/etc/pmcd.conf</filename>. This file specifies which agents cover which performance metrics domains and how <command>pmcd</command> should make contact with the agents. A comprehensive description of the configuration file syntax and semantics can be found in the <command sectionref="1">pmcd</command> man page.</para>
<para>If the configuration is changed, <command>pmcd</command> reconfigures itself when it receives the <literal>SIGHUP</literal> signal. Use the following command to send the <literal>SIGHUP</literal> signal to the daemon:</para>
<literallayout><userinput>killall -HUP pmcd</userinput></literallayout>
<para>This is also useful when one of the PMDAs managed by <command>pmcd</command> has failed or has been terminated by <command>pmcd</command>. Upon receipt of the <literal>SIGHUP</literal> signal, <command>pmcd</command> restarts any PMDA that is configured but inactive.</para>
</section>
<section>
<title>PMCD Diagnostics and  Error Messages</title>
<para>If there is a problem with <command>pmcd</command>, the first place to investigate should be the <filename>pmcd.log</filename> file. By default, this file is in the <filename>/var/adm/pcplog</filename> directory, although setting the <literal>PCPLOGDIR</literal> environment variable before running <literal>
/etc/init.d/pcp</literal> allows the file to be relocated.</para>
</section>
<section>
<title>PMCD Options  and Configuration Files</title>
<para>There are two files that control PMCD operation. These are the <filename>/etc/pmcd.conf</filename> and <filename>/etc/config/pmcd.options</filename> files. The <filename>pmcd.options</filename> file contains the command line options used with PMCD; it is read when the daemon is invoked by <literal>/etc/init.d/pcp
</literal>. The <filename>pmcd.conf</filename> file contains configuration information regarding domain agents and the metrics that they monitor. These configuration files are described in the following sections.</para>
<section><title>The <filename>pmcd.options</filename> File</title>
<para>Command line options for the PMCD are stored in the <filename>/etc/config/pmcd.options</filename> file. The PMCD can be invoked directly from a shell prompt, or it can be invoked by<literal>&ensp;/etc/init.d/pcp</literal> as part of the boot process. It is usual and normal to invoke it using <literal>/etc/init.d/pcp</literal>, reserving shell invocation for debugging purposes.</para>
<para>The PMCD accepts certain command line options to control its execution, and these options are placed in the <filename>pmcd.options</filename> file when <filename>/etc/init.d/pcp</filename> is being used to start the daemon. The following options are available:</para>
<deflist>
<deflistentry>
<term><literal>-f</literal></term>
<listitem><para>Causes the PMCD to be run in the foreground. The PMCD is usually run in the background, as are most daemons.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-i </literal><replaceable>address</replaceable></term>
<listitem><para>For hosts with more than one network interface, this option specifies the interface on which this instance of the PMCD accepts connections. Multiple <literal>-i</literal> options may be specified. The default in the absence of any <literal>-i</literal> option is for PMCD to accept connections on all interfaces.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>-l </command><replaceable>file</replaceable></term>
<listitem><para>Specifies a log file. If no <literal>-l</literal> option is specified, the log file name is <filename>pmcd.log</filename> and it is created in the directory <filename>/var/adm/pcplog</filename> or in a directory as specified by the <literal>PCPLOGDIR</literal> environment variable.</para>
</listitem></deflistentry>
<deflistentry>
<term><command>-t </command><replaceable>seconds</replaceable></term>
<listitem><para>Specifies the amount of time, in seconds, before PMCD times out on Protocol Data Unit (PDU) exchanges with PMDAs. If no time out is specified, the default is five seconds. Setting time out to zero disables time outs.</para>
<para>The time out may be dynamically modified by storing the number of seconds into the metric <literal>pmcd.control.timeout</literal> using <command>pmstore</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-T </literal><replaceable>mask</replaceable></term>
<listitem><para>Specifies whether connection and PDU tracing are turned on for debugging purposes.</para>
</listitem></deflistentry>
</deflist>
<para>See the <command sectionref="1">pmcd</command> man page for complete information on these options.</para>
<para>The default <filename>pmcd.options</filename> file shipped with PCP is similar to the following:</para>
<literallayout># command line options to pmcd, uncomment/edit lines as required<newline># longer timeout delay for slow agents<newline># -t 10<newline># suppress timeouts<newline># -t 0<newline># make log go someplace else<newline># -l /some/place/else<newline># enable event tracing (1 for connections, 2 for PDUs, 3 for both)<newline># -T 3</literallayout>
<para>The most commonly used options have been placed in this file for your convenience. To uncomment and use an option, simply remove the pound sign (#) at the beginning of the line with the option you wish to use. Restart <command>pmcd</command> for the change to take effect; that is, as superuser, enter the command:</para>
<literallayout><userinput>/etc/init.d/pcp start</userinput></literallayout>
</section>
<section id="LE63226-PARENT"><title id="LE63226-TITLE">The <filename>pmcd.conf</filename> File</title>
<para>When the PMCD is invoked, it reads its configuration file, which is <filename>/etc/pmcd.conf</filename>. This file contains entries that specify the PMDAs (Performance Metrics Domain Agents) used by this instance of the PMCD and which metrics are covered by these PMDAs. Also, you may specify access control rules in this file for the various hosts on your network. This file is described completely in
the <command sectionref="1">pmcd</command> man page.</para>
<para>With standard PCP operation (even if you have not created and added your own PMDAs), you might need to edit this file in order to add any access control you wish to impose. If you do not add access control rules, all access for all operations is granted to all hosts. The default <filename>pmcd.conf</filename> file shipped with PCP is similar to the following:</para>
<literallayout># Name  Id   IPC   IPC Params   File/Cmd<newline>irix    1    dso   irix_init    libirixpmda.so<newline>pmcd    2    dso   pmcd_init    pmda_pmcd.so<newline>proc    3    dso   proc_init    pmda_proc.so</literallayout>
<note><para>Because the PMCD runs with <literal>root</literal> privilege, you must be very careful not to configure PMDAs in this file if you are not sure of their action. Pay close attention that permissions on this file are not inadvertently downgraded to allow public write access.</para>
</note>
<para>Each entry in this configuration file contains rules that specify how to connect the PMCD to a particular PMDA and which metrics the PMDA monitors. A PMDA may be attached as a Dynamic Shared Object (DSO) or by using a socket or a pair of pipes. The distinction between these attachment methods is described below.</para>
<para>An entry in the <filename>pmcd.conf</filename> file looks like this:</para>
<literallayout><replaceable>label_name</replaceable>   <replaceable>domain_number</replaceable>   <replaceable>type</replaceable>   <replaceable>path</replaceable></literallayout>
<para>The <replaceable>label_name</replaceable> field specifies a name for the PMDA. The <replaceable>domain_number</replaceable> is an integer value that specifies a domain of metrics for the PMDA. The <replaceable>type</replaceable> field indicates the type of entry (DSO, socket, or pipe). The <replaceable>path</replaceable> field is for additional information, and varies according to the type of entry.</para>
<para>The following rules are common to DSO, socket, and pipe syntax:</para>
<deflist>
<deflistentry>
<term><replaceable>label_name</replaceable></term>
<listitem><para>An alphanumeric string identifying the agent.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>domain_number</replaceable></term>
<listitem><para>An unsigned integer specifying the agent's domain.</para>
</listitem></deflistentry>
</deflist>
<para>DSO entries follow this syntax:</para>
<synopsis><replaceable>label_name</replaceable>   <replaceable>domain_number</replaceable> dso <replaceable>entry-point</replaceable>   <replaceable>path</replaceable></synopsis>
<para>The following rules apply to the DSO syntax:</para>
<deflist>
<deflistentry>
<term><literal>dso</literal></term>
<listitem><para>The entry type.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>entry-point</replaceable></term>
<listitem><para>The name of an initialization function called when the DSO is loaded.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>path</replaceable></term>
<listitem><para>Designates the location of the DSO. If path begins with a slash (/), it is taken as an absolute path specifying the DSO; otherwise, the DSO is located in one of the directories <filename>/usr/pcp/lib</filename> or <filename>/var/pcp/lib</filename>.</para>
</listitem></deflistentry>
</deflist>
<para>Socket entries in the <filename>pmcd.conf</filename> file follow this syntax:</para>
<synopsis><replaceable>label_name</replaceable>   <replaceable>domain_number</replaceable> socket <replaceable>addr_family</replaceable>   <replaceable>address</replaceable>   <replaceable>command</replaceable> <optional><replaceable>args</replaceable></optional> </synopsis>
<para>The following rules apply to the socket syntax:</para>
<deflist>
<deflistentry>
<term><literal>socket</literal></term>
<listitem><para>The entry type.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>addr_family</replaceable></term>
<listitem><para>Specifies if the socket is <literal>AF_INET</literal> or <literal>AF_UNIX</literal>. If the socket is <literal>INET</literal>, the word <literal>inet</literal> appears in this place. If the socket is <literal>UNIX</literal>, the word <literal>unix</literal> appears in this place.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>address</replaceable></term>
<listitem><para>Specifies the address of the socket. For INET sockets, this is a port number or port name. For UNIX sockets, this is the name of the PMDA's socket on the local host.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>command</replaceable></term>
<listitem><para>Specifies a command to start the PMDA when the PMCD is invoked and reads the configuration file.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>args</replaceable></term>
<listitem><para>Optional arguments for <replaceable>command</replaceable>.</para>
</listitem></deflistentry>
</deflist>
<para>Pipe entries in the <filename>pmcd.conf</filename> file follow this syntax:</para>
<synopsis><replaceable>label_name</replaceable>   <replaceable>domain_number</replaceable> pipe <replaceable>protocol</replaceable>   <replaceable>command</replaceable> <optional><replaceable>args</replaceable></optional></synopsis>
<para>The following rules apply to the pipe syntax:</para>
<deflist>
<deflistentry>
<term><replaceable>pipe</replaceable></term>
<listitem><para>The entry type.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>protocol</replaceable></term>
<listitem><para>Specifies whether a text-based or a binary PCP protocol should be used over the pipes. Values for this parameter may be &ldquo;text&rdquo; and &ldquo;binary.&rdquo; The text-based protocol is provided for backwards compatibility, but otherwise its use is discouraged.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>command</replaceable></term>
<listitem><para>Specifies a command to start the PMDA when the PMCD is invoked and reads the configuration file.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>args</replaceable></term>
<listitem><para>Optional arguments for <replaceable>command</replaceable>.</para>
</listitem></deflistentry>
</deflist>
</section>
<section><title>Controlling Access to PMCD with <filename>pmcd.conf</filename></title>
<para>You can place this option extension in the <filename>pmcd.conf</filename> file to control system access to performance metric data. To add an access control section, begin by placing the following line at the end of your <filename>pmcd.conf</filename> file:</para>
<literallayout>[access] </literallayout>
<para>Below this line, you can add entries of the following forms:</para>
<literallayout>allow <replaceable>hostlist </replaceable>: <replaceable>operations</replaceable> ;  disallow <replaceable>hostlist</replaceable> : <replaceable>operations</replaceable> ; </literallayout>
<para>The <replaceable>hostlist</replaceable> is a comma-separated list of host identifiers; the following rules apply:</para>
<itemizedlist>
<listitem><para>Host names must be in the local system's <filename>/etc/hosts</filename> file or known to the local DNS (domain name service).</para>
</listitem>
<listitem><para>IP addresses may be given in the usual four-field numeric notation. Subnet addresses may be specified using three or fewer numeric components and an asterisk as a wild card for the last component in the address.</para>
</listitem></itemizedlist>
<para>For example, the following <replaceable>hostlist</replaceable> entries are all valid:</para>
<literallayout>whizkid<newline>gate-wheeler.eng.com<newline>123.101.27.44<newline>localhost<newline>155.116.24.*<newline>192.*<newline>*</literallayout>
<para>The <replaceable>operations</replaceable> field can be any of the following:</para>
<itemizedlist>
<listitem><para>A comma-separated list of the operation types described below.</para>
</listitem>
<listitem><para>The word <firstterm>all</firstterm> to allow or disallow all operations as specified in the first field.</para>
</listitem>
<listitem><para>The words <firstterm>all except</firstterm> and a list of operations. This entry allows or disallows all operations as specified in the first field except those listed.</para>
</listitem></itemizedlist>
<para>The operations that can be allowed or disallowed are as follows:</para>
<deflist termlength="narrow">
<deflistentry>
<term><literal>fetch</literal></term>
<listitem><para>Allows retrieval of information from the PMCD. This may be information about a metric (such as a description, instance domain, or help text) or an actual value for a metric.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>store</literal></term>
<listitem><para>Allows the PMCD to store metric values in PMDAs that permit store operations. Be cautious in allowing this operation, because it may be a security opening in large networks, although the PMDAs shipped with the PCP product typically reject store operations, except for selected performance metrics where the effect is benign.</para>
</listitem></deflistentry>
</deflist>
<para>For example, here is a sample access control portion of an <filename>/etc/pmcd.conf</filename> file:</para>
<literallayout>allow whizkid :  all ;<newline>allow 192.127.4.* : fetch ;<newline>disallow gate-inet : store ; </literallayout>
<para>Complete information on access control syntax rules in the <filename>pmcd.conf</filename> file can be found in the <command sectionref="1">pmcd</command> man page.</para>
</section>
</section>
</section>
<section id="LE70712-PARENT">
<title id="LE70712-TITLE">Troubleshooting</title>
<para>The following sections offer troubleshooting advice on the Performance Metrics Name Space (PMNS), missing and incomplete values for performance metrics, and IRIX metrics and the PMCD.</para>
<para>Advice for troubleshooting the archive logging system is provided in <xref linkend="LE93354-PARENT"></xref>.</para>
<section id="LE97133-PARENT">
<title id="LE97133-TITLE">Performance Metrics Name Space</title>
<para>To display the PMNS, use the <literal>pminfo</literal> command; see the <command sectionref="1">pminfo</command> man page.</para>
<para>The PMNS at the collection host is updated whenever a PMDA is installed or removed, and may also be updated when new versions of the PCP or PCP add-on products are installed. During these operations, the ASCII version of the PMNS is typically updated, then the binary version is regenerated.</para>
</section>
<section id="LE90170-PARENT">
<title id="LE90170-TITLE">Missing and Incomplete Values for Performance Metrics</title>
<para>Missing or incomplete performance metric values are the result of their unavailability.</para>
<section id="LE89271-PARENT"><title id="LE89271-TITLE">Metric Values Not Available</title>
<para>The following symptom has a known cause and resolution:</para>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>Values for some or all of the instances of a performance metric are not available.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>This can occur as a consequence of changes in the installation of modules (for example, a DBMS or an applications package) that provide the performance instrumentation underpinning the PMDAs. Changes in the selection of modules that are installed or operational, along with changes in the version of these modules, may make metrics appear and disappear over time.</para>
<para>In simple terms, the PMNS contains a metric name, but when that metric is requested, no PMDA at the collection host supports the metric.</para>
<para>For archive logs, the collection of metrics to be logged is a subset of the metrics available, so utilities replaying from a PCP archive log may not have access to all of the metrics available from a live (PMCD) source.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Make sure the underlying instrumentation is available and the module is active. Ensure that the PMDA is running on the host to be monitored. If necessary, create a new archive log with a wider range of metrics to be logged.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
<section id="LE76751-PARENT">
<title id="LE76751-TITLE">IRIX Metrics and the PMCD</title>
<para>The following issues involve the IRIX operating system and the PMCD:</para>
<itemizedlist>
<listitem><para>No IRIX metrics available</para>
</listitem>
<listitem><para>Cannot connect to remote PMCD</para>
</listitem>
<listitem><para>PMCD not reconfiguring after hang-up</para>
</listitem>
<listitem><para>PMCD does not start</para>
</listitem></itemizedlist>
<section><title>No IRIX Metrics Available</title>
<para>The following symptom has a known cause and resolution:</para>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>Some of the IRIX metrics are unavailable.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>PMCD (and therefore the IRIX PMDA) does not have permission to read <filename>/dev/kmem</filename>, or the running kernel is not the same as the kernel in <literal>/unix</literal>.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Check <filename>/var/adm/pcplog/pmcd.log</filename>. An error message of the following form means that PMCD cannot access <filename>/dev/kmem</filename>.</para>
<literallayout>kmeminit: cannot open "/dev/kmem": ...</literallayout>
<para>Ensure that <literal>/dev/kmem</literal> is readable by group <literal>sys</literal>. For example, you should see something similar to this:</para>
<literallayout>ls -lg /dev/kmem<newline>crw-r-----   1 sys    1,  1 May 28 15:16 /dev/kmem</literallayout>
<para>Restart PMCD after correcting the group and/or file permissions, and the problem should be solved.</para>
<para>If the running kernel is not the same as the kernel in <literal>/unix</literal>, the IRIX PMDA cannot access raw data in the kernel. A message like this appears in <literal>/var/adm/pcplog/pmcd.log</literal>:</para>
<literallayout width="standard">kmeminit: "/unix" is not namelist for the running kernel</literallayout>
<para>The only resolution to this is to make the running kernel the same as the one in <literal>/unix</literal>. If the running kernel was booted from the filesystem, then renaming files to make <filename>/unix</filename> the booted kernel and restarting PMCD should resolve the problem. If the running kernel was booted over the network, then PMCD cannot access the kernel's symbol table and hence the metrics extracted by reading <filename>/dev/kmem</filename> directly are not available.</para>
</listitem></deflistentry>
</deflist>
</section>
<section><title>Cannot Connect to Remote PMCD</title>
<para>The following symptom has a known cause and resolution:</para>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>A PCP client tool (such as <literal>pmchart</literal>, <literal>dkvis</literal>, or <literal>pmlogger</literal>) complains that it is unable to connect to a remote PMCD (or establish a PMAPI context), but you are sure that
PMCD is active on the remote host.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>To avoid hanging applications for the duration of TCP time outs, the PMAPI library implements its own time out when trying to establish a connection to a PMCD. If the connection to the host is over a slow network, then successful establishment of the connection may not be possible before the time out, and the attempt is abandoned.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Establish that the PMCD on <replaceable>far-away-host</replaceable> is really alive, by connecting to its control port (TCP port number 4321 by default):<literallayout><userinput>telnet far-away-host 4321</userinput></literallayout></para>
<para>This response indicates the PMCD is not running and needs restarting:</para>
<literallayout>Unable to connect to remote host: Connection refused</literallayout>
<para>To restart the PMCD on that host, enter the following command:<literallayout><userinput>/etc/init.d/pcp start</userinput></literallayout></para>
<para>This response indicates the PMCD is running:<literallayout>Connected to far-away-host </literallayout></para>
<para>Interrupt the <literal>telnet</literal> session, increase the PMAPI timeout by setting the <literal>PMCD_CONNECT_TIMEOUT</literal> environment variable to some number of seconds (60 for instance), and try the PCP tool again.</para>
</listitem></deflistentry>
</deflist>
</section>
<section><title>PMCD Not Reconfiguring after <literal>SIGHUP</literal></title>
<para>The following symptom has a known cause and resolution:</para>
<deflist>
<deflistentry>
<term>Symptom</term>
<listitem><para>PMCD does not reconfigure itself after receiving the <literal>SIGHUP</literal> signal.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>If there is a syntax error in <filename>/etc/pmcd.conf</filename>, PMCD does not use the contents of the file. This can lead to situations in which the configuration file and PMCD's internal state do not agree.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Always monitor PMCD's log. For example, use the following command in another window when reconfiguring PMCD, to watch errors occur:<literallayout><userinput>tail -f /var/adm/pcplog/pmcd.log</userinput></literallayout></para>
</listitem></deflistentry>
</deflist>
</section>
<section><title>PMCD Does Not Start</title>
<para>The following symptom has a known cause and resolution:</para>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>If the following messages appear in the PMCD log (<filename>/var/adm/pcplog/pmcd.log</filename>), consider the cause and resolution:</para>
<literallayout width="standard">pcp[27020] Error: OpenRequestSocket(4321) bind: Address already in<newline>use<newline>pcp[27020] Error: pmcd is already running<newline>pcp[27020] Error: pmcd not started due to errors!</literallayout>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>PMCD is already running or was terminated before it could clean up properly. The error occurs because the socket it advertises for client connections is already being used or has not been cleared by the kernel.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Start PMCD as <literal>root</literal> (superuser) by typing:<literallayout><userinput>/etc/init.d/pcp start</userinput></literallayout></para>
<para>Any existing PMCD is shut down, and a new one is started in such a way that the symptomatic message should not appear.</para>
<para>If you are starting PMCD this way and the symptomatic message appears, a problem has occurred with the connection to one of the deceased PMCD's clients.</para>
<para>This could happen when the network connection to a remote client is lost and PMCD is subsequently terminated. The system may attempt to keep the socket open for a time to allow the remote client a chance to reestablish the connection and read any outstanding data.</para>
<para>The only solution in these circumstances is to wait until the socket times out and the kernel deletes it. This <command>netstat</command> command displays the status of the socket and any connections:<literallayout><userinput>netstat -a | grep 4321</userinput></literallayout></para>
<para>If the socket is in the <literal>FIN_WAIT</literal> or <literal>TIME_WAIT</literal> state, then you must wait for it to be deleted. Once the command above produces no output, PMCD may be restarted. Less commonly, you may have another program running on your system that uses the same internet port number (4321) that PMCD uses.</para>
<para>Refer to the <command sectionref="1">PCPIntro</command> man page for a description of how to override the default PMCD port assignment using the <literal>PMCD_PORT</literal> environment variable.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
</section>
</chapter>



<chapter id="LE94335-PARENT">
<title id="LE94335-TITLE">Common Conventions and Arguments</title>
<para>  This chapter deals with the user interface components that are common to most of the graphical tools and text-based utilities that make up the monitor portion of Performance Co-Pilot (PCP). These are the major sections in this chapter:</para>
<itemizedlist>
<listitem><para><xref linkend="LE45263-PARENT"></xref>, shows a picture of the <interface>PerfTools</interface> icons.</para>
</listitem>
<listitem><para><xref linkend="LE85600-PARENT"></xref>, details some basic standards used in the development of PCP tools.</para>
</listitem>
<listitem><para><xref linkend="LE68596-PARENT"></xref>, details other options to use with PCP tools.</para>
</listitem>
<listitem><para><xref linkend="LE76997-PARENT"></xref>, describes the time control dialog and time-related command line options available for use with PCP tools.</para>
</listitem>
<listitem><para><xref linkend="LE17322-PARENT"></xref>, covers some uncommon scenarios that may compromise performance metric integrity over the short term.</para>
</listitem></itemizedlist>
<para>Many of the utilities provided with PCP conform to a common set of naming and syntactic conventions for command line arguments and options. This section outlines these conventions and their meaning. The options may be generally assumed to be honored for all utilities supporting the corresponding functionality.</para>
<para>In all cases, the man pages for each utility fully describe the supported command arguments and options.</para>
<para>Command line options are also relevant when starting PCP applications from the desktop using the <keycap>Alt</keycap> double-click method. This technique launches the <command>pmrun</command> program to collect additional arguments to pass along when starting a PCP application.</para>
<section id="LE45263-PARENT">
<title id="LE45263-TITLE"><interface>PerfTools</interface> <interface>Icon Catalog</interface></title>
<para>The conventions and arguments described in this chapter are common to all tools and utilities in the <interface>PerfTools Icon Catalog</interface> group, shown in <xref linkend="LE83869-TITLE"></xref>.</para>
<figure width="wide">
<title id="LE83869-TITLE"><interface>PerfTools</interface> <interface>Icon Catalog</interface> Group</title><graphic entityref="a12231.gif" width="wide"></graphic></figure>
</section>
<section id="LE85600-PARENT">
<title id="LE85600-TITLE">Alternate Metric Source Options</title>
<para>The default source of performance metrics is from <command>pmcd</command> on the local host. This section describes how to obtain metrics from sources other than the default.</para>
<section>
<title>Fetching Metrics from Another Host</title>
<para> The option <literal>-h </literal><replaceable>
host</replaceable> directs any PCP utility (such as <literal>pmchart</literal> or <literal>dkvis</literal>) to make a connection with the <command>pmcd</command> instance running on <replaceable>host</replaceable>. Once established, this connection serves as the principal real-time source of performance metrics and metadata.</para>
</section>
<section>
<title>Fetching Metrics from an Archive Log</title>
<para>The option <literal>-a </literal><replaceable>archive</replaceable> directs the utility to treat the PCP
archive logs with base name <replaceable>archive</replaceable> as the principal source of performance metrics and metadata.</para>
<para>PCP archive logs are created with <command>pmlogger</command>. Most PCP utilities operate with equal facility for performance information coming from either a real-time feed via <command>pmcd</command> on some host, or for historical data from a PCP archive log. For more information on archive logs and their
use, see <xref linkend="LE93354-PARENT"></xref>.</para>
<para>The base name (<filename>archive</filename>) of the PCP archive log used with the <literal>-a</literal> option implies the existence of the files created automatically by <command>pmlogger</command>, as listed in <xref linkend="LE79560-TITLE"></xref>.</para>
<table frame="topbot">
<title id="LE79560-TITLE">Physical Filenames for Components of a PCP Archive Log</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="100*">
<colspec colwidth="296*">
<thead>
<row rowsep="1"><entry align="left" valign="bottom"><para>Filename</para></entry><entry align="left" valign="bottom"><para>Contents</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para><filename>archive.</filename><replaceable>index</replaceable><emphasis></emphasis></para></entry>
<entry align="left" valign="top"><para>Temporal index for rapid access to archive contents</para></entry></row>
<row>
<entry align="left" valign="top"><para><filename>archive.</filename><replaceable>meta</replaceable></para></entry>
<entry align="left" valign="top"><para>Metadata descriptions for performance metrics and instance domains appearing in the archive</para></entry></row>
<row>
<entry align="left" valign="top"><para><filename>archive.N</filename></para></entry>
<entry align="left" valign="top"><para>Volumes of performance metrics values, for <filename>N</filename> = 0,1,2,...</para></entry></row></tbody></tgroup></table>
<para>Some tools are able to concurrently process multiple PCP archive logs (for example, for retrospective analysis of performance across multiple hosts), and accept either multiple <command>-a</command> options or a comma separated list of archive names following the <command>-a</command> option.</para>
<note><para>The <command>-h</command> and <command>-a</command> options are mutually exclusive in all cases.</para>
</note>
</section>
</section>
<section id="LE68596-PARENT">
<title id="LE68596-TITLE">General PCP Tool Options</title>
<para>The following sections provide information relevant to most of the PCP tools. It is presented here in a single place for convenience.</para>
<section>
<title>Common Directories and File Locations</title>
<para>The following files and directories are used by the PCP tools as repositories for option and configuration files and for binaries:</para>
<deflist>
<deflistentry>
<term><filename>/etc/pmcd.conf</filename></term>
<listitem><para>Configuration file for Performance Metrics Collection Daemon (PMCD).</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/etc/pmcd</filename></term>
<listitem><para>The PMCD binary.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/etc/config/</filename></term>
<listitem><para>The <filename>pmcd.options</filename> file contains command line options for <command>pmcd</command> .<newline>The <filename>pmlogger.options</filename> file contains command line options for <command>pmlogger</command>  launched from <filename>/etc/init.d/pcp</filename>.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/etc/init.d/pcp</filename></term>
<listitem><para>The PMCD startup script.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/sbin</filename></term>
<listitem><para>Contains PCP tools such as <command>pmkstat</command>, <command>pminfo</command>, and <command>oview</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/pcp</filename></term>
<listitem><para>Shareable PCP-specific files and repository directories.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp</filename></term>
<listitem><para>Non-shareable (that is, per-host) PCP specific files and repository directories. There are some symbolic links from the <filename>/usr/pcp</filename> directory hierarchy pointing into the <filename>/var/pcp</filename> directory hierarchy.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/pcp/bin</filename></term>
<listitem><para>Contains PCP tools that are typically not executed directly by the end user such as <command>pmbrand</command>, <command>pmnscomp</command>, and <command>pmlogger</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/pcp/lib</filename></term>
<listitem><para>Contains miscellaneous PCP libraries and executables.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/pmdas</filename></term>
<listitem><para>Contains Performance Metric Domain Agents, one directory per PMDA.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/pcp/pmdas</filename></term>
<listitem><para>An alternate repository for some PMDAs. Certain entries here are symbolic links into <filename>/var/pcp/pmdas</filename>.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/config</filename></term>
<listitem><para>Contains configuration files for PCP tools, typically with one directory per tool.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/usr/pcp/demos</filename></term>
<listitem><para>Contains demonstration data files and example programs.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/Tutorial</filename></term>
<listitem><para>Contains a PCP Tutorial, in HTML format.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/adm/pcplog</filename></term>
<listitem><para>By default contains diagnostic and trace log files generated by <command>pmcd</command> and PMDAs. Also, the PCP archive logs are managed in one directory per logged host below here.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/pmns</filename></term>
<listitem><para>Contains files and scripts for the Performance Metrics Name Space.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Alternate Performance Metric Name Spaces</title>
<para>The Performance Metrics Name Space (PMNS) defines a mapping from a collection of external names for performance metrics (convenient to the user) into corresponding internal identifiers (convenient for the underlying implementation).</para>
<para>The distributed PMNS used in PCP 2.x avoids most requirements for an alternate PMNS, because clients' PMNS operations are supported at the Performance Metrics Collection Daemon (PMCD) or by means of PMNS data in a PCP archive log. The distributed PMNS is the default, but alternates may be specified using the <command>-n </command><replaceable>namespace</replaceable> argument to the PCP tools. When a PMNS is maintained on a host, it is likely to reside in the <filename>/var/pcp/pmns</filename>
directory.</para>
<para>Refer to the <command sectionref="4">pmns</command> and <command sectionref="1">pmnscomp</command> man pages for details of PMNS structure and creation.</para>
</section>
</section>
<section id="LE76997-PARENT">
<title id="LE76997-TITLE">Time Duration and Control</title>
<para>The periodic nature of sampling performance metrics and refreshing the displays of the PCP tools makes specification and control of the temporal domain a common operation. In the following sections, the services and conventions for specifying time positions and intervals are described.</para>
<section id="LE96583-PARENT">
<title id="LE96583-TITLE">Performance Monitor Reporting Frequency and Duration</title>
<para>Many of the performance monitoring utilities have periodic reporting patterns. The <literal>-t </literal><replaceable>interval</replaceable> and <literal>-s </literal><replaceable>samples</replaceable> options are used to control the sampling (reporting) interval, usually expressed
as a real number of seconds (<replaceable>interval</replaceable>), and the number of <replaceable>samples</replaceable> to be reported, respectively. In the absence of the <literal>-s</literal> flag, the default behavior is for the performance monitoring utilities to run until they are explicitly stopped.</para>
<para>The <replaceable>interval</replaceable> argument may also be expressed in terms of minutes, hours, or days, as described in the <command sectionref="1">PCPIntro</command> man page.</para>
</section>
<section id="LE14729-PARENT">
<title id="LE14729-TITLE">Time Window Options</title>
<para>The following options may be used with most PCP tools (typically when the source of the performance metrics is a PCP archive log) to tailor the beginning and end points of a display, the sample origin, and the sample time alignment to your convenience.</para>
<para>The <literal>-S</literal>, <literal>-T</literal>, <literal>-O</literal> and <literal>-A</literal> command line options are used by PCP applications to define a time window of interest.</para>
<deflist termlength="standard">
<deflistentry>
<term><literal>-S </literal><replaceable>duration</replaceable></term>
<listitem><para>The start option may be used to request that the display start at the nominated time. By default, the first sample of performance data is retrieved immediately in real-time mode, or coincides with the first sample of data in a PCP archive log in archive mode. For archive mode, the <literal>-S</literal> option may be used to specify a later time for the start of sampling. By default, if <replaceable>duration</replaceable> is an integer, the units are assumed to be seconds.</para>
<para>To specify an offset from the beginning of a PCP archive (in archive mode) simply specify the offset as the <replaceable>duration</replaceable>. For example, the following entry retrieves the first sample of data at exactly 30 minutes from the beginning of a PCP archive.</para>
<para><literallayout>-S 30min </literallayout></para>
<para>To specify an offset from the end of a PCP archive, prefix the <replaceable>duration</replaceable> with a minus sign. In this case, the first sample time precedes the end of archived data by the given <replaceable>duration</replaceable>. For example, the following entry retrieves the first sample exactly one hour preceding the last sample in a PCP archive.</para>
<para><literallayout>-S -1hour </literallayout></para>
<para>To specify the calendar date and time (local time in the reporting time zone) for the first sample, use the <literal>ctime</literal> syntax preceded by an &ldquo;at&rdquo; sign (@). For example, the following entry specifies the date and time to be used.</para>
<para><literallayout>-S '@ Mon Mar 4 13:07:47 1996' </literallayout></para>
<para>Note that this format corresponds to the output format of the <command>date</command> command for easy &ldquo;cut and paste.&rdquo; However, be sure to enclose the string in quotes so it is preserved as a single argument for the PCP tool.</para>
<para>For more complete information on the date and time syntax, see the <command sectionref="1">PCPIntro</command> man page.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-T </literal><replaceable>duration</replaceable> </term>
<listitem><para>The terminate option may be used to request that the display stop at the time designated by <replaceable>duration</replaceable>. By default, the PCP tools keep sampling performance data indefinitely (in real-time mode) or until the end of a PCP archive (in archive mode). The <literal>-T</literal> option may be used to specify an earlier time to terminate sampling.</para>
<para>The interpretation for the <replaceable>duration</replaceable> argument in a <literal>-T</literal> option is the same as for the <literal>-S</literal> option, except for an unsigned time interval that is interpreted as being an offset from the start of the time window as defined by the default (now for real time, else start of archive) or by a <literal>-S</literal> option. For example, these options define a time window that spans 45 minutes, after an initial offset (or delay) of 1 hour:<literallayout>
-S 1hour -T 45mins</literallayout></para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-O </literal><replaceable>duration</replaceable></term>
<listitem><para>By default, samples are fetched from the start time (see the description of the <literal>-S</literal> option) to the terminate time (see the description of the <literal>-T</literal> option). The offset <literal>-O</literal> option allows the specification of a time between the start time and the terminate time where the tool should position its initial sample time. This option is useful when initial attention is focused at some point within a larger time window of interest, or when
one PCP tool wishes to launch another PCP tool with a common current point of time within a shared time window.</para>
<para>The <replaceable>duration</replaceable> argument accepted by <literal>-O</literal> conforms to the same syntax and semantics as the <replaceable>duration</replaceable> argument for <literal>-T</literal>. For example, these options specify that the initial position should be the end of the time window:<literallayout>-O -0 </literallayout></para>
<para>This is most useful with <command sectionref="1">pmchart</command> to display the tail-end of the history up to the end of the time window.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-A </literal><replaceable>alignment</replaceable></term>
<listitem><para>By default, performance data samples do not necessarily happen at any natural unit of measured time. The <literal>-A</literal> switch may be used to force the initial sample to be on the specified <replaceable>alignment</replaceable>. For example, these three options specify alignment on seconds, half hours, and whole hours:<literallayout>-A 1sec<newline>-A 30min<newline>-A 1hour</literallayout></para>
<para>The <literal>-A</literal> option advances the time to achieve the desired alignment as soon as possible after the start of the time window, whether this is the default window, or one specified with some combination of <literal>-A</literal> and <literal>-O</literal> command line options.</para>
</listitem></deflistentry>
</deflist>
<para>Obviously the time window may be overspecified by using multiple options from the set <literal>-t</literal>, <literal>-s</literal>, <literal>-S</literal>, <literal>-T</literal>, <literal>-A</literal>, and <literal>-O</literal>. Similarly, the time window may shrink to nothing by injudicious choice of options.</para>
<para>In all cases, the parsing of these options applies heuristics guided by the principal of &ldquo;least surprise&rdquo;; the time window is always well-defined (with the end never earlier than the start), but may shrink to nothing in the extreme.</para>
</section>
<section>
<title>Time Zone Options</title>
<para>All utilities that report time of day use the local time zone by default. The following time zone options are available:</para>
<deflist>
<deflistentry>
<term><literal>-z</literal> </term>
<listitem><para>Forces times to be reported in the time zone of the host that provided the metric values (the PCP collector host). When used in conjunction with <literal>-a</literal> and multiple archives, the convention is to use the time zone from the first named archive.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-Z </literal><replaceable>timezone</replaceable> </term>
<listitem><para>Sets the TZ variable to a time zone string, as defined in <command sectionref="5">environ</command> , for example, <literal>-Z UTC</literal> for universal time.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>PCP Live Time Control</title>
<para>The <interface>pmtime PCP Live Time Control</interface> dialog, shown in <xref linkend="LE71403-TITLE"></xref>, is invoked through the PCP tools when you select the <interface>Show Time Control</interface> option from the <interface>Options</interface> menu of most PCP tools. The dialog may also be exposed by selecting the &ldquo;time control state&rdquo; button at the bottom left-hand corner of the <literal>pmchart</literal> display or the top left-hand
corner of a 3D performance scene displayed with the <literal>pmview</literal> or <literal>oview</literal> tools.</para>
<para>For more information on the &ldquo;time control state&rdquo; button, see the <command sectionref="1">pmview</command>, <command sectionref="1">pmchart</command>, <command sectionref="1">oview</command>, or <command sectionref="1">pmtime</command> man page.</para>
<para>If the PCP tool is displaying performance metrics from a real-time source, the <command>pmtime</command> dialog looks similar to that shown in <xref linkend="LE71403-TITLE"></xref>.</para>
<figure>
<title id="LE71403-TITLE"><command>pmtime</command> <interface>PCP Live Time Control</interface>  Dialog</title>
<graphic entityref="a12194.gif" scale="NO"></graphic>
</figure>
<para>This dialog can be used to set the sample interval and units; the latter may be in milliseconds, seconds, minutes, hours, days, or weeks.</para>
<para>To change the units, select the measurement of time you want from the <interface>Options</interface> menu (labelled <interface>Seconds</interface> in <xref linkend="LE71403-TITLE"></xref>).</para>
<para>To change the interval, enter the new value in the Interval text box, and press Enter. All PCP tools attached to the <command>pmtime</command> control dialog are notified of the new interval, and will update their displays immediately to reflect the new sampling rate.</para>
</section>
<section>
<title>Creating a PCP Archive</title><para>The ability to start and stop recording of performance activity is available from
the <literal>oview</literal> window using the <interface>File -&gt; Record</interface> option from the menu bar.</para>
<para>Alternatively use <command>pmlogger</command> directly, as described in <xref linkend="LE93354-PARENT"></xref>.</para>
</section>
<section>
<title>PCP Archive Time Control</title>
<para>The ability to provide retrospective performance analysis in the PCP framework is provided by making the monitor tools able to deal interchangeably with real-time sources of performance metrics and PCP archive logs. For more information on archive logging, see <xref linkend="LE93354-PARENT"></xref>.</para>
<para>When a PCP tool is displaying performance metrics from a PCP archive log, and the <interface>pmtime Archive Time Control</interface> dialog is exposed, it looks similar to that shown in <xref linkend="LE37474-TITLE"></xref>.</para>
<figure>
<title id="LE37474-TITLE"><command>pmtime</command> <interface>PCP Archive Time Control</interface> Dialog</title>
<graphic entityref="a12195.gif" scale="NO"></graphic>
</figure>
<para>As with the live <literal>pmtime</literal> dialog, the user may change the update interval; however, a number of other controls are available:</para>
<itemizedlist>
<listitem><para>The <interface>VCR Controls</interface> option menu may be used to change the mode of time advance between <interface>Normal</interface>, <interface>Step</interface>, and <interface>Fast</interface>.<itemizedlist><listitem><para>In <interface>Normal</interface> mode, the time advances with the elapsed time per sample being equal to the current <interface>Interval</interface> (divided by <interface>Speed</interface>).</para>
</listitem><listitem><para>In <interface>Step</interface> mode, each selection of one of the direction buttons advances the time by the current <interface>Interval</interface>.</para>
</listitem><listitem><para>In <interface>Fast</interface> mode, the time advances by the <literal>Interval</literal> without any added delay.</para>
</listitem></itemizedlist></para>
</listitem>
<listitem><para>The <interface>Speed</interface> text box and associated thumb wheel may be used to make the rate of time advance in <interface>Normal</interface> mode either slower (<interface>Speed</interface> &lt; 1) or faster (<interface>Speed</interface> &gt; 1) than real time.</para>
</listitem>
<listitem><para>The <interface>Position</interface> text box shows the current time within the PCP archive log. The <interface>Position</interface> may be changed either by advancing the time using the <interface>VCR Controls</interface> buttons (<interface>Play</interface>, <interface>Step</interface>, <interface>Rewind</interface>, <interface>Fast Fwd</interface>, or <interface>Stop</interface>), or by modifying the <interface>Position</interface> text box (and pressing <interface>Enter</interface>),
or by moving the slider below the <interface>Position</interface> text box.</para>
</listitem>
<listitem><para>The <interface>VCR Controls</interface> motion buttons allow time to be advanced forward or backward, or stopped.</para>
</listitem></itemizedlist>
<para>The menus of <interface>pmtime Archive Time Control</interface> provide the following additional features:</para>
<section><title><interface>File</interface> Menu</title>
<para>The <interface>File</interface> menu supports the following option:</para>
<deflist termlength="standard">
<deflistentry>
<term><interface>Hide</interface></term>
<listitem><para>Hides the dialog; the PCP tools provide their own menu options or time control icon that may be used to reexpose the <literal>pmtime</literal> dialog.</para>
</listitem></deflistentry>
</deflist>
</section>
<section><title><interface>Options</interface> Menu</title>
<para>The <interface>Options</interface> menu supports three options:</para>
<deflist termlength="standard">
<deflistentry>
<term><interface>Timezone</interface></term>
<listitem><para>Selects an alternative time zone for all displayed dates and times; all PCP tools attached to the <literal>pmtime</literal> control are notified of the new time zone.</para>
<para>Because the UTC time zone is universal, it is useful when several archives or live sources of data are being displayed in multiple instances of the tools, and comparisons between performance metrics are required to be temporally correlated. Whenever a new source of metrics is opened, whether an archive or live, the time zone at that source of metrics is added to the list in the <interface>Options</interface> menu. The default time zone is that of the local host where the tool is being run.</para>
</listitem></deflistentry>
<deflistentry>
<term><interface>Show Bounds... </interface></term>
<listitem><para>Exposes the <interface>Archive Time Bounds</interface> dialog, shown in <xref linkend="Z927919115sdc"></xref>. This dialog shows the current time window that defines the earliest and latest time for which performance may be displayed from the current archives.</para>
<figure>
<title id="Z927919115sdc"><command>pmtime</command> <interface>Archive Time Bounds</interface> Dialog</title>
<graphic entityref="a12196.gif" scale="NO"></graphic>
</figure>
</listitem></deflistentry>
<deflistentry>
<term><interface>Detail</interface></term>
<listitem><para>For output fields, selectively includes or excludes the year in the date or milliseconds in time. The year is shown by default, milliseconds are not.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
</section>
<section id="LE17322-PARENT">
<title id="LE17322-TITLE">Transient Problems with Performance Metric Values</title>
<para>Sometimes the values for a performance metric as reported by a PCP tool appear to be incorrect. This is typically caused by transient conditions such as metric wraparound or time skew, described below. These conditions result from design decisions that are biased in favor of lightweight protocols and minimal resource demands for PCP components.</para>
<para>In all cases, these events are expected to occur infrequently, and should not persist beyond a few samples.</para>
<section>
<title>Performance Metric Wraparound</title>
<para>Performance metrics are usually expressed as numbers with finite precision. For metrics that are cumulative counters of events or resource consumption, the value of the metric may occasionally overflow the specified range and wraparound to zero.</para>
<para>Because the value of these counter metrics is computed from the rate of change with respect to the previous sample, this may result in a transient condition where the rate of change is an unknown value. If the <literal>PCP_COUNTER_WRAP</literal> environment variable is set, this condition is treated as an overflow, and speculative rate calculations are made. In either case, the correct rate calculation for the metric returns with the next sample.</para>
</section>
<section>
<title>Time Dilation and Time Skew</title>
<para>If a PMDA is tardy in returning results, or the PCP monitoring tool is connected to <command>pmcd</command> via a slow or congested network, an error might be introduced in rate calculations due to a difference between the time the metric was sampled and the time <command>pmcd</command> sends the result to the monitoring tool.</para>
<para>In practice, these errors are usually so small as to be insignificant, and the errors are self-correcting (not cumulative) over consecutive samples.</para>
<para>A related problem may occur when the system time is not synchronized between multiple hosts, and the time stamps for the results returned from <command>pmcd</command> reflect the skew in the system times. In this case, it is recommended that either <command>timeslave</command> or <command>timed</command> be used to keep the system clocks on the collector systems synchronized; see the <command sectionref="1M">timed</command> man page.</para>
</section>
</section>
</chapter>



<chapter id="LE38515-PARENT">
<title id="LE38515-TITLE">Monitoring System Performance</title>
<para>This chapter describes the performance monitoring tools available in Performance Co-Pilot (PCP). This product provides a group of commands and tools for measuring system performance. Each tool
is described completely by its own man page. The man pages are accessible through the <command>man</command> command. For example, the man page for the tool <command>pmchart</command> is viewed by entering the following command:</para>
<literallayout><userinput>man pmchart</userinput>&ensp;</literallayout>
<para>The following major sections are covered in this chapter:</para>
<itemizedlist>
<listitem id="Z930615099sdc"><para><xref linkend="LE91266-PARENT"></xref>, discusses <command>pmkstat</command>, a utility that provides a periodic one-line summary of system performance.</para>
</listitem>
<listitem><para><xref linkend="LE35315-PARENT"></xref>, describes <command>pmval</command>, a utility that displays performance metrics in ASCII tables.</para>
</listitem>
<listitem><para><xref linkend="LE52680-PARENT"></xref>, discusses <command>pmem</command>, a utility that reports per-process memory usage statistics.</para>
</listitem>
<listitem><para><xref linkend="LE60452-PARENT"></xref>, describes <command>pminfo</command>, a utility that displays information about performance metrics.</para>
</listitem>
<listitem><para><xref linkend="LE10170-PARENT"></xref>, describes the use of the <command>pmstore</command> utility to arbitrarily set or reset selected performance metric values.</para>
</listitem></itemizedlist>
<para>The last section documents the <command>oview</command> tool. Further monitoring tools covering automated reasoning about performance are described in <xref linkend="LE21414-TITLE"></xref>.</para>
<para>The following sections describe the various graphical and text-based PCP tools used to monitor local or remote system performance.</para>
<section id="LE91266-PARENT">
<title id="LE91266-TITLE">The <command>pmkstat</command> Command</title>
<para> The <command>pmkstat</command> command provides a periodic, one-line summary of system performance. This command is intended to monitor system performance at the highest level, after which other tools may be used for examining subsystems to observe potential performance problems in greater detail. After entering the <command>pmkstat
</command> command, you see output similar to the following, with successive lines appearing periodically:</para>
<literallayout width="wide"><userinput>pmkstat</userinput><newline># <literal>hostname</literal> load avg: 0.26, interval: 5 sec, Thu Jan 19 12:30:13 1995<newline>runq    | memory    |      system      | disks|   cpu<newline>mem swp | free page | scall ctxsw  intr| rd wr|usr sys idl wt<newline>0   0     16268 0     64    19     2396  0  0  0   1   99  0<newline>0   0     16264 0     142   45     2605  0  8  0   2   97  0<newline>0   0     16268 0     308   62     2532  0  1  1   1   98  0<newline>0   0     16268 0     423   88     2643  0  0  1   1   97  0</literallayout>
<para>An additional line of output is added every five seconds. The update interval may be varied using the <literal>-t</literal><replaceable>&ensp;interval</replaceable> option.</para>
<para>The output from <command>pmkstat</command> is directed to standard output, and the columns in the report are interpreted as follows:</para>
<deflist>
<deflistentry>
<term><literal>runq</literal></term>
<listitem><para>Average number of runnable processes in main memory (<literal>mem</literal>) and in swap memory (<literal>swp</literal>) during the interval.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>memory</literal></term>
<listitem><para>The free column indicates average <literal>free</literal> memory during the interval, in kilobytes. The <literal>page</literal> column is the average number of page-out operations per second during the interval. I/O operations caused by these page-out operations are included in the disk write I/O rate.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>system</literal></term>
<listitem><para>System call rate (<literal>scall</literal>), context switch rate (<literal>ctxsw</literal>), and interrupt rate (<literal>intr</literal>). Rates are expressed as average operations per second during the interval.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>disks</literal></term>
<listitem><para>Aggregated physical read (<literal>rd</literal>) and write (<literal>wr</literal>) rates over all disks, expressed as physical I/O operations issued per second during the interval. These rates are independent of the I/O block size.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>cpu</literal></term>
<listitem><para>Percentage of CPU time spent executing user code (<literal>usr</literal>), system and interrupt code (<literal>sys</literal>), idle loop (<literal>idl</literal>) and idle waiting for resources (<literal>wt</literal>), typically disk I/O.</para>
</listitem></deflistentry>
</deflist>
<para>As with most PCP utilities, real-time metric, and archive logs are interchangeable.</para>
<para>For example, the following command uses the PCP archive log <replaceable>foo</replaceable> and the time zone of the host (<literal>tokyo</literal>) from which performance metrics in the archive were collected:</para>
<literallayout><userinput>pmkstat -a </userinput><replaceable>foo</replaceable> <userinput>-z</userinput><newline>Note: timezone set to local timezone of host "tokyo"<newline># tokyo load avg: 1.06, interval: 5 sec, Thu Feb  2 08:42:55 1995<newline>&ensp;runq  |     memory |     system       |  disks  |      cpu<newline>mem swp|   free page| scall ctxsw  intr|  rd   wr|usr sys idl  wt<newline>&ensp; 0   0    4316    0    195    64  2242   32   21   0   3   8  89<newline>&ensp; 0   0    3976    0    279    86  2143   50   17   0   5   8  87<newline>&ensp; 1   0    3448    0    186    63  2304   35   14   0   4   9  87<newline>&ensp; 0   0    4364    0    254    81  2385   35    0   0   4   9  87<newline>&ensp; 0   0    3696    0    266    92  2374   41    0   0   3   9  88<newline>&ensp; 0   0    2668   42    237    81  2400   44    2   1   4   7  89<newline>&ensp; 0   0    4644  100    206    68  2590   25    1   0   3   5  91<newline>&ensp; 0   0    5384    0    174    63  2296   32   22   0   2   8  89<newline>&ensp; 0   0    4736    0    189    65  2197   31   28   0   3   8  89<newline>pmFetch: End of PCP archive log</literallayout>
<para>For complete information on <literal>pmkstat</literal> usage and command line options, see the <command sectionref="1">pmkstat</command> man page.</para>
</section>
<section id="LE35315-PARENT">
<title id="LE35315-TITLE">The <command>pmval</command> Command</title>
<para> The <command>pmval</command> command dumps the current values for the named performance metrics. For example, the following command reports the value of performance metric <literal>proc.nprocs</literal> once per second (by default), and produces output similar to this:</para>
<literallayout><userinput>pmval proc.nprocs</userinput><newline>metric:    proc.nprocs<newline>host:      localhost<newline>semantics: instantaneous value<newline>units:     none<newline>samples:   indefinite<newline>interval:  1.00 sec<newline>            73<newline>            72<newline>            70<newline>            75<newline>            75</literallayout>
<para>In this example, the number of running processes was reported once per second.</para>
<para>Where the semantics of the underlying performance metrics indicate that it would be sensible, <command>pmval</command> reports the rate of change or resource utilization.</para>
<para>For example, the following command reports idle processor utilization for each of four CPUs on the remote host <literal>moomba</literal>, each five seconds apart, producing output of this form:</para>
<literallayout><userinput>pmval -h moomba -t 5sec -s 4 kernel.percpu.cpu.idle</userinput><newline>metric:    kernel.percpu.cpu.idle<newline>host:      moomba<newline>semantics: cumulative counter (converting to rate)<newline>units:     millisec (converting to time utilization)<newline>samples:   4<newline>interval:  5.00 sec<newline>        cpu0        cpu1        cpu2        cpu3<newline>        0.8193      0.7933      0.4587      0.8193<newline>        0.7203      0.5822      0.8563      0.7303<newline>        0.6100      0.6360      0.7820      0.7960<newline>        0.8276      0.7037      0.6357      0.6997 </literallayout>
<para>Similarly, the following command reports disk I/O read rate every minute for just the disk <literal>/dev/dsk/dks0d1</literal>, and produces output similar to the following:</para>
<literallayout><userinput>pmval -t 1min -i dks0d1 disk.dev.read</userinput><newline>metric:    disk.dev.read<newline>host:      localhost<newline>semantics: cumulative counter (converting to rate)<newline>units:     count (converting to count / sec)<newline>samples:   indefinite<newline>interval:  60.00 sec<newline>        dks0d1<newline>         33.67<newline>         48.71<newline>         52.33<newline>         11.33<newline>         2.333 </literallayout>
<para>The <literal>-r</literal> flag may be used to suppress the rate calculation (for metrics with counter semantics) and display the raw values of the metrics.</para>
<para>When used in conjunction with a PCP archive, the <literal>-g</literal> option may be used to associate a PCP time control dialog (see <xref linkend="LE76997-TITLE"></xref>) with the execution of <command>pmval</command> to support temporal navigation within the archive. In the example below, manipulation of the time within the archive is achieved by the exchange of time control messages between <command>pmval</command> and <command>pmtime</command>.</para>
<literallayout><userinput>pmval -g -a /var/adm/pcplog/myserver/960801</userinput></literallayout>
<para>The <command>pmval</command> command is documented by the <command sectionref="1">pmval</command> man page, and annotated examples of the use of <command>pmval</command> are in the PCP Tutorial.</para>
</section>
<section id="LE52680-PARENT">
<title id="LE52680-TITLE">The <command>pmem</command> Command</title>
<para>The <literal>pmem</literal> command reports per-process memory usage statistics within the PCP framework.</para>
<para>Both virtual size and prorated physical memory usage are reported. The virtual memory usage statistics represent the total virtual size of each process, irrespective of how many pages are valid (resident). Prorated physical memory statistics indicate real memory usage (only valid pages are counted) and are prorated on a per-page basis between all processes that reference each page. Thus the prorated physical memory counts reflect the real memory demands for individual processes in the context
of the current process mix.</para>
<para>The output of <literal>pmem</literal> can be very large. Here is an abbreviated example of <literal>pmem</literal> output:</para>
<literallayout width="wide">Host: gonzo Configured: 65536  Free:18380  Tue Jul 9 16:45:08 1996<newline>     pid  ppid   user  vtxt  ptxt  vdat  pdat vshm pshm command<newline>       1     0   root   232   144    84    76    0    0 /etc/init<newline>     832   827   root  3204  1013  5796  3096    0    0 /usr/bin/X11/Xsg<newline>     221     1   root  1424    54   156   84     0    0 /usr/lib/saf/sad<newline>     838   827   root  2948    36   268    75    0    0 /usr/bin/X11/xdm<newline>      86     1   root  1264    32   144    76    0    0 /usr/etc/syslogd<newline>     182     1   root  1476   129   596   387    0    0 /usr/etc/rpcbind<newline>     827     1   root  2948    13   252    22    0    0 /usr/bin/X11/xdm<newline>     172     1   root  1276    52   148   100    0    0 /usr/etc/routed<newline>Total     vtxt  ptxt   vdat  pdat  vshm  pshm  77 user processes<newline>             121M        36256           0        =  157M virtual<newline>                   13982        20194           0  = 34176 physical</literallayout>
<para>The columns report the following information:</para>
<deflist termlength="standard">
<deflistentry>
<term><literal>pid</literal></term>
<listitem><para>Process ID number.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>ppid</literal></term>
<listitem><para>Parent process ID number.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>user</literal></term>
<listitem><para>Login name of the process owner.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>vtxt</literal></term>
<listitem><para>Total virtual memory used by text (executable code) regions mapped by the process.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>ptxt</literal></term>
<listitem><para>Prorated physical memory used by text regions.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>vdat</literal></term>
<listitem><para>Total virtual memory used by all non-executable regions, excluding shared memory regions. This includes initialized data, bss, and stack but not shared memory regions.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pdat</literal></term>
<listitem><para>Prorated physical memory used by all data regions (data, bss, and stack but not shared memory regions).</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>vshm</literal></term>
<listitem><para>Total virtual memory used by all shared memory regions.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pshm</literal></term>
<listitem><para>Prorated physical memory used by shared memory regions.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>command</literal></term>
<listitem><para>The command and arguments.</para>
</listitem></deflistentry>
</deflist>
<para>For complete information on <literal>pmem</literal> usage and command line options, see the <command sectionref="1">pmem</command> man page.</para>
</section>
<section id="LE60452-PARENT">
<title id="LE60452-TITLE">The <command>pminfo</command> Command</title>
<para> The <command>pminfo</command> command displays various types of information about performance metrics available through the Performance Co-Pilot (PCP) facilities.</para>
<para>The <literal>-T</literal> option is extremely useful; it provides help text about performance metrics:</para>
<literallayout><userinput>pminfo -T mem.util.fs_dirty</userinput><newline>mem.util.fs_dirty<newline>Help:<newline>The amount of memory in Kbytes that is holding file system data.</literallayout>
<para>The <literal>-t</literal> option displays the one-line help text associated with the selected metrics. The <literal>-T</literal> option prints more verbose help text.</para>
<para>Without any options, <command>pminfo</command> verifies that the specified metrics exist in the name space, and echoes those names. Metrics may be specified as arguments to <command>pminfo</command> using their full metric names. For example, this command returns the following response:</para>
<literallayout><userinput>pminfo hinv.ncpu network.interface.total.bytes</userinput><newline>hinv.ncpu<newline>network.interface.total.bytes </literallayout>
<para>A group of related metrics in the name space may also be specified. For example, to list all of the <literal>hinv</literal> metrics you would use this command:</para>
<literallayout><userinput>pminfo hinv</userinput><newline>hinv.ncpu<newline>hinv.cpuclock<newline>hinv.dcache<newline>hinv.icache<newline>hinv.secondarycache<newline>hinv.physmem<newline>hinv.pmeminterleave<newline>hinv.ndisk</literallayout>
<para>If no metrics are specified, <command>pminfo</command> displays the entire collection of metrics. This can be useful for searching for metrics, when only part of the full name is known. For example, this command returns the following response:</para>
<literallayout><userinput>pminfo | grep nfs</userinput><newline>nfs.client.badcalls<newline>nfs.client.badcalls<newline>nfs.client.calls<newline>nfs.client.nclget<newline>nfs.client.nclsleep<newline>nfs.client.reqs<newline>nfs.server.badcalls<newline>nfs.server.calls<newline>nfs.server.reqs<newline>nfs.client.badcalls<newline>nfs.client.calls<newline>nfs.client.nclget<newline>nfs.client.nclsleep<newline>nfs.client.reqs<newline>nfs.server.badcalls<newline>nfs.server.calls<newline>nfs.server.reqs</literallayout>
<para>The <literal>-d</literal> option causes <command>pminfo</command> to display descriptive information about metrics (refer to the <command sectionref="3">pmLookupDesc</command> man page for an explanation of this metadata information). The following command and response show use of the <literal>-d</literal> option:</para>
<literallayout><userinput>pminfo -d proc.nprocs disk.dev.read filesys.free</userinput><newline>    proc.nprocs<newline>       Data Type: 32-bit int  InDom: PM_INDOM_NULL 0xffffffff<newline>       Semantics: instant  Units: none<newline>disk.dev.read<newline>       Data Type: 32-bit unsigned int  InDom: 1.2 0x400002<newline>       Semantics: counter  Units: count<newline>filesys.free<newline>       Data Type: 32-bit int  InDom: 1.7 0x400007<newline>       Semantics: instant  Units: Kbyte</literallayout>
<para>The <literal>-f</literal> option to <command>pminfo</command> forces the current value of each named metric to be fetched and printed. In the example below, all metrics in the group <replaceable>hinv</replaceable> are selected:</para>
<literallayout><userinput>pminfo -f hinv</userinput><newline>hinv.ncpu<newline>       value 1<newline>hinv.cpuclock<newline>       value 100<newline>hinv.dcache<newline>       value 8192<newline>hinv.icache<newline>       value 8192<newline>hinv.secondarycache<newline>       value 1048576<newline>hinv.physmem<newline>       value 64<newline>hinv.pmeminterleave<newline>       value 0<newline>hinv.ndisk<newline>       value 1</literallayout>
<para>The <literal>-h</literal> option directs <command>pminfo</command> to retrieve information from the specified host. If the metric has an instance domain, the value associated with each instance of the metric is printed:</para>
<literallayout><userinput>pminfo -h babylon.engr.sgi.com -f filesys.mountdir</userinput><newline>filesys.mountdir<newline>       inst [1 or "/dev/root"] value "/"<newline>       inst [2 or "/dev/dsk/dks1d3s7"] value "/usr2"<newline>       inst [3 or "/dev/dsk/dks3d1s7"] value "/dbv"<newline>       inst [4 or "/dev/dsk/dks3d4s7"] value "/dbv/d4"<newline>       inst [5 or "/dev/dsk/dks3d2s7"] value "/dbv/d2"<newline>       inst [6 or "/dev/dsk/dks3d3s7"] value "/dbv/d3"<newline>       inst [7 or "/dev/dsk/dks2d4s7"] value "/vicepb"<newline>       inst [8 or "/dev/dsk/xlv/build9"] value "/build9"<newline>       inst [9 or "/dev/dsk/xlv/build8"] value "/build8"<newline>       inst [10 or "/dev/dsk/xlv/lv9.xfs"] value "/lv9"<newline>       inst [11 or "/dev/dsk/dks2d5s7"] value "/usenet"<newline>       inst [12 or "/dev/dsk/xlv/work"] value "/usr/work"<newline>       inst [13 or "/dev/dsk/xlv/build10"] value "/build10"<newline>       inst [14 or "/dev/dsk/xlv/dist"] value "/usr/dist"<newline>       inst [15 or "/dev/dsk/xlv/people"] value "/usr/people"<newline>       inst [16 or "/dev/dsk/xlv/build12"] value "/build12"<newline>       inst [17 or "/dev/dsk/xlv/build11"] value "/build11"</literallayout>
<para>The <literal>-m</literal> option prints the Performance Metric Identifiers (PMIDs) of the selected metrics. This is useful for finding out which PMDA supplies the metric. For example, the output below identifies the PMDA supporting domain 4 (the leftmost part of the PMID) as the one supplying information for the metric <literal>
environ.extrema.mintemp</literal>:</para>
<literallayout>pminfo -m environ.extrema.mintemp<newline>environ.extrema.mintemp PMID: 4.0.3 </literallayout>
<para>The <literal>-v</literal> option verifies that metric definitions in the name space correspond with supported metrics, and checks that a value is available for the metric. Descriptions and values are fetched, but not printed. Only errors are reported.</para>
<para>Some instance domains are not enumerable. That is, it is not possible to ask for all of the instances at once. Only explicit instances may be fetched from such instance domains. This is because instances in such a domain may have a very short lifetime or the cost of obtaining all of the instances at once is very high. The <replaceable>proc</replaceable> metrics are an example of such an instance domain. The <literal>-f</literal> option is not able to fetch metrics with non-enumerable instance
domains; however, the <literal>-F</literal> option tells <command>pminfo</command> to obtain a snapshot of all of the currently available instances in the instance domain and then to retrieve a value for each.</para>
<para>Complete information on the <command>pminfo</command> command is found in the <command sectionref="1">pminfo</command> man page. There are examples of the use of <command>pminfo</command> in the PCP Tutorial.</para>
</section>
<section id="LE10170-PARENT">
<title id="LE10170-TITLE">The <command>pmstore</command> Command</title>
<para>From time to time you may wish to change the value of a particular metric. Some metrics are counters that may need to be reset, and some are simply control variables for agents that collect performance metrics. When you need to change the value of a metric for any reason, the command to use is <command>pmstore</command>.</para>
<note><para>For obvious reasons, the ability to arbitrarily change the value of a performance metric is not supported. Rather, the PMCS selectively allows some metrics to be modified in a very controlled fashion.</para>
</note>
<para>The basic syntax of the command is as follows:</para>
<literallayout>pmstore <replaceable>metricname</replaceable> <replaceable>value</replaceable>&ensp;</literallayout>
<para>There are also command line flags to further specify the action. For example, the <literal>-i</literal> option restricts the change to one or more instances of the performance metric.</para>
<para>The <replaceable>value</replaceable> may be in one of several forms, according to the following rules:</para>
<orderedlist><listitem><para>If the metric has an integer type, then <replaceable>value</replaceable> should consist of an optional leading hyphen, followed either by decimal digits or &ldquo;0x&rdquo; and some hexadecimal digits; &ldquo;0X&rdquo; is also acceptable instead of &ldquo;0x.&rdquo;</para>
</listitem><listitem><para>If the metric has a floating point type, then <replaceable>value</replaceable> should be in the form of an integer (described above), a fixed point number, or a number in scientific notation.</para>
</listitem><listitem><para>If the metric has a string type, then <replaceable>value</replaceable> is interpreted as a literal string of ASCII characters.</para>
</listitem><listitem><para>If the metric has an aggregate type, then an attempt is made to interpret <replaceable>value</replaceable> as an integer, a floating point number, or a string. In the first two cases, the minimal word length encoding is used; for example, &ldquo;123&rdquo; would be interpreted as a four-byte aggregate, and &ldquo;0x100000000&rdquo; would be interpreted as an eight-byte aggregate.</para>
</listitem></orderedlist>
<para>The following example illustrates the use of <command>pmstore</command> to enable performance metrics collection in the <literal>txmon</literal>&ensp;PMDA (see <literal>/usr/pcp/pmdas/txmon</literal> for the source code of the txmon PMDA). When the metric <replaceable>txmon.control.level</replaceable> has the value 0, no performance metrics are collected. Values greater than 0 enable progressively more verbose instrumentation.</para>
<literallayout><userinput>pminfo -f txmon.count</userinput><newline>txmon.count<newline>No value(s) available!<newline><userinput>pmstore txmon.control.level 1</userinput><newline>txmon.control.level old value=0 new value=1<newline><userinput>pminfo -f txmon.count</userinput><newline>txmon.count<newline>       inst [0 or "ord-entry"] value 23<newline>       inst [1 or "ord-enq"] value 11<newline>       inst [2 or "ord-ship"] value 10<newline>       inst [3 or "part-recv"] value 3<newline>       inst [4 or "part-enq"] value 2<newline>       inst [5 or "part-used"] value 1<newline>       inst [6 or "b-o-m"] value 0</literallayout>
<para>For complete information on <command>pmstore</command> usage and syntax, see the <command sectionref="1">pmstore</command> man page.</para>
</section><section id="LE87603-PARENT">
<title id="LE87603-TITLE">The <command>oview</command> Origin Visualization
Tool</title>
<para>The <command>oview</command> tool displays a dynamic display of Origin system topology and performance,
as shown in <xref linkend="LE62322-TITLE"></xref>. It displays performance
information about CPUs, nodes, and routers in Origin systems connected in
various configurations; see <command sectionref="1">oview</command> for details.</para>
<para><figure>
<title id="LE62322-TITLE"><command>oview</command> Window</title>
<graphic entityref="a12214.gif" scale="NO"></graphic>
</figure></para>
</section></chapter>



<chapter id="LE21414-PARENT">
<title id="LE21414-TITLE">Performance Metrics Inference Engine</title>
<para>The Performance Metrics Inference Engine (<command>pmie</command>) is a tool that provides automated monitoring of, and reasoning about, system performance within the Performance Co-Pilot (PCP)
framework.</para>
<para>The following major sections in this chapter are as follows:</para>
<itemizedlist>
<listitem><para><xref linkend="LE41170-PARENT"></xref>, provides an introduction to the concepts and design of <command>pmie</command>.</para>
</listitem>
<listitem><para><xref linkend="LE15993-PARENT"></xref>, describes the basic syntax and usage of <command>pmie</command>.</para>
</listitem>
<listitem><para><xref linkend="LE90227-PARENT"></xref>, discusses the complete <command>pmie</command> rule specification language.</para>
</listitem>
<listitem><para><xref linkend="LE60280-PARENT"></xref>, provides an example, covering several common performance scenarios.</para>
</listitem>
<listitem><para><xref linkend="LE31514-PARENT"></xref>, presents some tips and techniques for <command>pmie</command> rule development.</para>
</listitem>
<listitem><para><xref linkend="LE91221-PARENT"></xref>, presents some important information on using <command>pmie</command>.</para>
</listitem>
<listitem><para><xref linkend="Z927039566sdc"></xref>, describes how to use the <command>pmieconf</command> command to generate <command>pmie</command> rules.</para>
</listitem>
<listitem><para><xref linkend="Z927039824sdc"></xref>, provides support for running <command>pmie</command> as a daemon.</para>
</listitem></itemizedlist>
<section id="LE41170-PARENT">
<title id="LE41170-TITLE">Introduction to <command>pmie</command></title>
<para>Automated reasoning within Performance Co-Pilot (PCP) is provided by the Performance Metrics Inference Engine, (<command>pmie</command>), which is an applied artificial intelligence application.</para>
<para> The <command>pmie</command> tool accepts expressions describing adverse performance scenarios, and periodically evaluates these against streams of performance metric values from one or more sources. When an expression is found to be true, <command>pmie</command> is able to execute arbitrary actions to alert or notify the system administrator of the occurrence of an adverse performance scenario. These facilities are very general,
and are designed to accommodate the automated execution of a mixture of generic and site-specific performance monitoring and control functions.</para>
<para>The stream of performance metrics to be evaluated may be from one or more hosts, or from one or more PCP archive logs. In the latter case, <command>pmie</command> may be used to retrospectively identify adverse performance conditions.</para>
<para>Using <command>pmie</command>, you can filter, interpret, and reason about the large volume of performance data made available by the Performance Metrics Collection System (PMCS) and delivered through the Performance Metrics Application Programming
Interface (PMAPI).</para>
<para>Typical <command>pmie</command> uses include the following:</para>
<itemizedlist>
<listitem><para>Automated real-time monitoring of a host, a set of hosts, or client-server pairs of hosts to raise operational alarms when poor performance is detected in a production environment</para>
</listitem>
<listitem><para>Nightly processing of archive logs to detect and report performance regressions, or quantify quality of service for service agreements or management reports, or produce advance warning of pending performance problems</para>
</listitem>
<listitem><para>Strategic performance management, for example, detection of abnormal, but not chronic, system behavior, trend analysis, and capacity planning</para>
</listitem></itemizedlist>
<para>The <command>pmie</command> expressions are described in a language with expressive power and operational flexibility. It includes the following operators and functions:</para>
<itemizedlist>
<listitem><para>Generalized predicate-action pairs, where a predicate is a logical expression over the available performance metrics, and the action is arbitrary. Predefined actions include the following:</para>
<itemizedlist><listitem><para>Launch a visible alarm with <literal>xconfirm</literal>; see the <command sectionref="1">xconfirm</command> man page.</para>
</listitem><listitem><para>Post an entry to the system log <filename>/var/adm/SYSLOG</filename>; see the <command sectionref="3C">syslog</command> man page.</para>
</listitem><listitem><para>Post an entry to the PCP noticeboard file <filename>/var/adm/pcplog/NOTICES</filename>.</para>
</listitem><listitem><para>Execute a shell command or script, for example, to send e-mail, initiate a pager call, warn the help desk, and so on.</para>
</listitem><listitem><para>Echo a message on standard output; useful for scripts that generate reports from retrospective processing of PCP archive logs.</para>
</listitem></itemizedlist>
</listitem>
<listitem><para>Arithmetic and logical expressions in a C-like syntax.</para>
</listitem>
<listitem><para>Expression groups may have an independent evaluation frequency, to support both short-term and long-term monitoring.</para>
</listitem>
<listitem><para>Canonical scale and rate conversion of performance metric values to provide sensible expression evaluation.</para>
</listitem>
<listitem><para>Aggregation functions of <literal>sum</literal>, <literal>avg</literal>, <literal>min</literal>, and <literal>max</literal>, that may be applied to collections of performance metrics values clustered over multiple hosts, or multiple instances, or multiple consecutive samples in time.</para>
</listitem>
<listitem><para>Universal and existential quantification, to handle expressions of the form &ldquo;for every....&rdquo; and &ldquo;at least one...&rdquo;.</para>
</listitem>
<listitem><para>Percentile aggregation to handle statistical outliers, such as &ldquo;for at least 80% of the last 20 samples, ...&rdquo;.</para>
</listitem>
<listitem><para>Macro processing to expedite repeated use of common subexpressions or specification components.</para>
</listitem>
<listitem><para>Transparent operation against either live-feeds of performance metric values from <command>pmcd</command> on one or more hosts, or against PCP archive logs of previously accumulated performance metric values.</para>
</listitem></itemizedlist>
<para>The power of <command>pmie</command> may be harnessed to automate the most common of the deterministic system management functions that are responses to changes in system performance. For example, disable a batch stream if the DBMS transaction commit response time at the ninetieth percentile goes over two seconds, or stop accepting news and send e-mail to the <replaceable>sysadmin</replaceable> alias if free space in the news file system falls below five percent.</para>
<para>Moreover, the power of <command>pmie</command> can be directed towards the exceptional and sporadic performance problems. For example, if a network packet storm is expected, enable IP header tracing for ten seconds, and send e-mail to advise that data has been collected and is awaiting analysis. Or, if production batch throughput falls below 50 jobs per hour, activate a pager to the systems administrator on duty.</para>
<para>Obviously, <command>pmie</command> customization is required to produce meaningful filtering and actions in each production environment. The <command>pmieconf</command> tool provides a convenient customization method, allowing the user to generate parameterized <command>pmie</command> rules for some of the more common
performance scenarios.</para>
</section>
<section id="LE15993-PARENT">
<title id="LE15993-TITLE">Basic <command>pmie</command> Usage</title>
<para>This section presents and explains some basic examples of <command>pmie</command> usage. The <command>pmie</command> tool accepts the common PCP command line arguments, as described in <xref linkend="LE94335-PARENT"></xref>. In addition, <command>pmie</command> accepts the following command line arguments:</para>
<deflist termlength="narrow">
<deflistentry>
<term><literal>-d</literal></term>
<listitem><para>Enables interactive debug mode.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-v</literal></term>
<listitem><para>Verbose mode: expression values are displayed.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-V</literal></term>
<listitem><para>Verbose mode: annotated expression values are displayed.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>-W</literal></term>
<listitem><para>When-verbose mode: when a condition is true, the satisfying expression bindings are displayed.</para>
</listitem></deflistentry>
</deflist>
<para>One of the most basic invocations of this tool is this form:</para>
<literallayout><userinput>pmie</userinput>&ensp;<replaceable>filename</replaceable>&ensp;</literallayout>
<para>In this form, the expressions to be evaluated are read from <filename>filename</filename>. In the absence of a given <filename>filename</filename>, expressions are read from standard input, usually your system keyboard.</para>
<section id="LE23271-PARENT">
<title id="LE23271-TITLE"><command>pmie</command> and the Performance Metrics Collection System</title>
<para>Before you use <command>pmie</command>, familiarize yourself with some Performance Metrics Collection System (PMCS) basics. It is strongly recommended that you familiarize yourself with the concepts from the <xref linkend="LE79836-PARENT"></xref>. The discussion in this section serves as a very brief review of these concepts.</para>
<para>The PMCS makes available hundreds of performance metrics that you can use when formulating expressions for <command>pmie</command> to evaluate. If you want to find out which metrics are currently available on your system, use this command:</para>
<literallayout><userinput>pminfo</userinput>&ensp;</literallayout>
<para>Use the <command>pmie</command> command line arguments to find out more about a particular metric. For example, to fetch new metric values from host <literal>moomba</literal>, use the <literal>-f</literal> flag:</para>
<literallayout><userinput>pminfo -f -h moomba disk.dev.total</userinput>&ensp;</literallayout>
<para>This produces the following response:</para>
<literallayout>disk.dev.total<newline>    inst [131329 or "dks1d1"] value 970853<newline>    inst [131330 or "dks1d2"] value 53581<newline>    inst [131331 or "dks1d3"] value 5353<newline>    inst [131332 or "dks1d4"] value 225<newline>    inst [131333 or "dks1d5"] value 9674<newline>    inst [131334 or "dks1d6"] value 14383<newline>    inst [131335 or "dks1d7"] value 5578</literallayout>
<para>This reveals that on the host <literal>moomba</literal>, the metric <literal>disk.dev.total</literal> has seven instances, one for each disk on the system. The instance names are <literal>dks1d1</literal>, <literal>dks1d2</literal>, and so on up to <literal>dks1d7</literal>.</para>
<para>Use the following command to request help text (specified with the <literal>-T</literal> flag) to provide more information about performance metrics:</para>
<literallayout><userinput>pminfo -T network.interface.in.packets</userinput>&ensp;</literallayout>
<para>The metadata associated with a performance metric is used by <command>pmie</command> to determine how the value should be interpreted. You can examine the descriptor that encodes the metadata by using the <literal>-d</literal> flag for <command>pminfo</command>, as shown in this command:</para>
<literallayout><userinput>pminfo -d -h </userinput><replaceable>somehost</replaceable><userinput>&ensp;mem.freemem kernel.percpu.syscall</userinput>&ensp;</literallayout>
<para>In response, you see output similar to this:</para>
<literallayout width="wide">mem.freemem<newline>       Data Type: 32-bit unsigned int  InDom: PM_INDOM_NULL 0xffffffff<newline>       Semantics: instant  Units: Kbyte<newline>kernel.percpu.syscall<newline>       Data Type: 32-bit unsigned int  InDom: 1.1 0x400001<newline>       Semantics: counter  Units: count</literallayout>
<note><para>A cumulative counter such as <literal>kernel.percpu.syscall</literal> is automatically converted by <command>pmie</command> into a rate (measured in events per second, or count/second), while instantaneous values such as <literal>mem.freemem</literal> are not subjected to rate conversion. Metrics with an instance domain (InDom in the <command>pminfo</command> output) of <literal>PM_INDOM_NULL</literal> are singular and
always produce one value per source. However, a metric like <literal>kernel.percpu.syscall</literal> has an instance domain, and may produce multiple values per source (in this case, it is one value for each configured CPU).</para>
</note>
</section>
<section>
<title>Simple <command>pmie</command> Example</title>
<para>The following <command>pmie</command> example directs the inference engine to evaluate and print values (specified with the <literal>-v</literal> flag) for a single performance metric (the simplest possible expression), in this case <literal>disk.dev.total</literal>, collected from the local <command>pmcd</command>:</para>
<literallayout><userinput>pmie -v</userinput><newline><userinput>iops = disk.dev.total;</userinput><newline><userinput>Ctrl+D</userinput><newline>iops:      ?      ?<newline>iops:   14.4      0<newline>iops:   25.9  0.112<newline>iops:   12.2      0<newline>iops:   12.3   64.1<newline>iops:  8.594  52.17<newline>iops:  2.001  71.64</literallayout>
<para>On this system, there are two disk spindles, hence two values of the expression <command>iops</command> per sample. Notice that the values for the first sample are unknown (represented by the question marks [?] in the first line of output), because rates can be computed only when at least two samples are available. The subsequent samples are produced every ten seconds by default. The second sample reports that during the preceding ten seconds there was an average of 14.4 transfers per second
on one disk and no transfers on the other disk.</para>
<para>Rates are computed using time stamps delivered by the PMCS. Due to unavoidable inaccuracy in the actual sampling time (the sample interval is not exactly 10 seconds), you may see more decimal places in values than you expect. Notice, however, that these errors do not accumulate but cancel each other out over subsequent samples.</para>
<para>In the above example, the expression to be evaluated was enter (the keyboard), followed by the end-of-file character [Ctrl+D]. Usually, it is more convenient to enter expressions into a file (for example, <filename>myrules</filename>) and ask <command>pmie</command> to read the file. Use this command syntax:</para>
<literallayout><userinput>pmie -v myrules</userinput>&ensp;</literallayout>
<para>Please refer to the <command sectionref="1">pmie</command> man page for a complete description of <command>pmie</command> command line options.</para>
</section>
<section>
<title>Complex <command>pmie</command> Examples</title>
<para>This section illustrates more complex <command>pmie</command> expressions of the specification language. The next section provides a complete description of the <command>pmie</command> specification language.</para>
<para>The following arithmetic expression computes the percentage of write operations over the total number of disk transfers.</para>
<literallayout>(disk.all.write / disk.all.total) * 100; </literallayout>
<para>The <literal>disk.all</literal> metrics are singular, so this expression produces exactly one value per sample, independent of the number of disk devices.</para>
<note><para>If there is no disk activity,<literal>&ensp;disk.all.total</literal> will be zero and <command>pmie</command> evaluates this expression to be not a number. When <literal>-v</literal> is used, any such values are displayed as question marks.</para>
</note>
<para>The following logical expression has the value <literal>true</literal> or <literal>false</literal> for each disk:</para>
<literallayout>disk.dev.total &gt; 10 &amp;&amp;<newline>disk.dev.write &gt; disk.dev.read; </literallayout>
<para>The value is true if the number of writes exceeds the number of reads, and if there is significant disk activity (more than 10 transfers per second).</para>
<para>The previous examples did not specify any action to be performed in the event that an expression evaluates to <literal>true</literal>. The default action is to do nothing, other than report the value of the expression if the <literal>-v</literal> option was used. The following example demonstrates a simple action:<literallayout width="standard">some_inst disk.dev.total &gt; 60 -&gt;<newline>                              print "[%i] high disk i/o "; </literallayout></para>
<para>This prints a message to the standard output whenever the total number of transfers for some disk (<literal>some_inst</literal>) exceeds 60 transfers per second. The <literal>%i</literal> (instance) in the message is replaced with the name(s) of the disk(s) that caused the logical expression to be <literal>true</literal>.</para>
<para>Using <command>pmie</command> to evaluate the above expressions every 3 seconds, you see output similar to the following:</para>
<literallayout width="wide"><userinput>pmie -v -t 3sec</userinput><newline><userinput>pct_wrt = (disk.all.write / disk.all.total) * 100;</userinput><newline><userinput>busy_wrt = disk.dev.total &gt; 10 &amp;&amp;</userinput><newline>           <userinput>disk.dev.write &gt; disk.dev.read;</userinput><newline><userinput>busy = some_inst disk.dev.total &gt; 60 -&gt;</userinput><newline>                           <userinput>print "[%i] high disk i/o ";</userinput><newline><userinput>Ctrl+D</userinput><newline>pct_wrt:       ?<newline>busy_wrt:      ?      ?<newline>busy:          ?<newline><newline>pct_wrt:   18.43<newline>busy_wrt:  false  false<newline>busy:      false<newline><newline>Mon Aug  5 14:56:08 1996: [dks0d2] high disk i/o<newline>pct_wrt:   10.83<newline>busy_wrt:  false  false<newline>busy:      true<newline><newline>pct_wrt:   19.85<newline>busy_wrt:   true  false<newline>busy:      false<newline><newline>pct_wrt:       ?<newline>busy_wrt:  false  false<newline>busy:      false<newline><newline>Mon Aug  5 14:56:17 1996: [dks0d1] high disk i/o [dks0d2] high disk i/o<newline>pct_wrt:   14.8<newline>busy_wrt:  false  false<newline>busy:   true</literallayout>
<para>The first sample contains unknowns, since all expressions depend on computing rates. Also notice that the expression <literal>pct_wrt</literal> may have an undefined value whenever all disks are idle, as the denominator of the expression is zero. If one or more disks is busy, the expression <literal>busy</literal> is true, and the message from the <literal>print</literal> in the action part of the rule appears (before the <literal>-v</literal> values).</para>
</section>
</section>
<section id="LE90227-PARENT">
<title id="LE90227-TITLE">Specification Language for <command>pmie</command></title>
<para>This section describes the complete syntax of the <command>pmie</command> specification language, as well as macro facilities and the issue of sampling and evaluation frequency. The reader with a preference for learning by example may choose to skip this section and go straight to the examples in <xref linkend="LE60280-PARENT"></xref>.</para>
<para>Complex expressions are built up recursively from simple elements:</para>
<orderedlist><listitem><para>Performance metric values are obtained from <command>pmcd</command> for real-time sources, otherwise from PCP archive logs.</para>
</listitem><listitem><para>Metrics values may be combined using arithmetic operators to produce arithmetic expressions.</para>
</listitem><listitem><para>Arithmetic expressions may be compared using relational operators to produce logical expressions.</para>
</listitem><listitem><para>Logical expressions may be combined using Boolean operators, including powerful quantifiers.</para>
</listitem><listitem><para>Aggregation operators may be used to compute summary expressions, for either arithmetic or logical operands.</para>
</listitem><listitem><para>The final logical expression may be used to initiate a sequence of actions.</para>
</listitem></orderedlist>
<section id="LE51927-PARENT">
<title id="LE51927-TITLE">Basic <command>pmie</command> Syntax</title>
<para>The <command>pmie</command> rule specification language supports a number of basic syntactic elements.</para>
<section><title>Lexical Elements</title>
<para>All <command>pmie</command> expressions are composed of the following lexical elements:</para>
<deflist>
<deflistentry>
<term>Identifier</term>
<listitem><para>Begins with an alphabetic character (either upper or lowercase), followed by zero or more letters, the numeric digits, and the special characters period (<literal>.</literal>) and underscore (<literal>_</literal>), as shown in the following example:<literallayout><literal>x</literal>, <literal>disk.dev.total</literal> and <literal>my_stuff</literal></literallayout></para>
<para>As a special case, an arbitrary sequence of letters enclosed by apostrophes (<literal>'</literal>) is also interpreted as an <replaceable>identifier</replaceable>; for example:<literallayout>'vms$slow_response'</literallayout></para>
</listitem></deflistentry>
<deflistentry>
<term>Keyword</term>
<listitem><para>The aggregate operators, units, and predefined actions are represented by keywords; for example, <literal>some_inst</literal>, <literal>print</literal>, and <literal>hour</literal>.</para>
</listitem></deflistentry>
<deflistentry>
<term>Numeric constant</term>
<listitem><para>Any likely representation of a decimal integer or floating point number; for example, 124, 0.05, and -45.67</para>
</listitem></deflistentry>
<deflistentry>
<term>String constant</term>
<listitem><para>An arbitrary sequence of characters, enclosed by double quotation marks (<literal>"x"</literal>).</para>
</listitem></deflistentry>
</deflist>
<para>Within quotes of any sort, the backslash (<literal>/</literal>) may be used as an escape character as shown in the following example:</para>
<literallayout>"A \"gentle\" reminder"</literallayout>
</section>
<section><title>Comments </title>
<para>Comments may be embedded anywhere in the source, in either of these forms:</para>
<deflist>
<deflistentry>
<term><literal>/* text */</literal></term>
<listitem><para>Comment, optionally spanning multiple lines, with no nesting of comments.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>// text</literal></term>
<listitem><para>Comment from here to the end of the line.</para>
</listitem></deflistentry>
</deflist>
</section>
<section><title>Macros</title>
<para>When they are fully specified, expressions in <command>pmie</command> tend to be verbose and repetitious. The use of macros can reduce repetition and improve readability and modularity. Any statement of the following form associates the macro name <literal>identifier</literal> with the given <literal>string</literal> constant.</para>
<literallayout><replaceable>identifier = "string";</replaceable></literallayout>
<para>Any subsequent occurrence of the macro name <literal>identifier</literal> is replaced by the <replaceable>string</replaceable> most recently associated with a macro definition for <replaceable>identifier</replaceable>.</para>
<literallayout><userinput>$</userinput><replaceable>identifier</replaceable>&ensp;</literallayout>
<para>For example, start with the following macro definition:</para>
<literallayout>disk = "disk.all"; </literallayout>
<para>You can then use the following syntax:</para>
<literallayout>pct_wrt = ($disk.write / $disk.total) * 100;</literallayout>
<note><para>Macro expansion is performed before syntactic parsing; so macros may only be assigned constant string values.</para>
</note>
</section>
<section><title>Units</title>
<para>The inference engine converts all numeric values to canonical units (<replaceable>seconds</replaceable> for time, <replaceable>bytes</replaceable> for space, and <replaceable>events</replaceable> for count). To avoid surprises, you are encouraged to specify the units for numeric constants. If units are specified, they are checked for dimension compatibility against the metadata for the associated performance metrics.</para>
<para>The syntax for a <literal>units</literal> specification is a sequence of one or more of the following keywords separated by either a space or a slash (<literal>/</literal>), to denote per: <literal>byte</literal>, <literal>KByte</literal>, <literal>MByte</literal>, <literal>GByte</literal>, <literal>TByte</literal>, <literal>nsec</literal>, <literal>nanosecond</literal>, <literal>usec</literal>, <literal>microsecond</literal>, <literal>msec</literal>, <literal>millisecond</literal>, <literal>
sec</literal>, <literal>second</literal>, <literal>min</literal>, <literal>minute</literal>, <literal>hour</literal>, <literal>count</literal>, <literal>Kcount</literal>, <literal>Mcount</literal>, <literal>Gcount</literal>, or <literal>Tcount</literal>. Plural forms are also accepted.</para>
<para>The following are examples of units usage:</para>
<literallayout>disk.dev.blktotal &gt; 1 Mbyte / second;<newline>mem.freemem &lt; 500 Kbyte;</literallayout>
<note><para>If you do not specify the units for numeric constants, it is assumed that the constant is in the canonical units of <replaceable>seconds</replaceable> for time, <replaceable>bytes</replaceable> for space, and <replaceable>events</replaceable> for count, and the dimensionality of the constant is assumed to be correct. Thus, in the following expression, the <literal>500</literal> is interpreted as 500 bytes.</para>
<literallayout>mem.freemem &lt; 500</literallayout>
</note>
</section>
</section>
<section id="LE88708-PARENT">
<title id="LE88708-TITLE">Setting Evaluation Frequency</title>
<para>The identifier name <literal>delta</literal> is reserved to denote the interval of time between consecutive evaluations of one or more expressions. Set <literal>delta</literal> as follows:</para>
<literallayout>delta = <replaceable>number</replaceable> [<replaceable>units</replaceable>];</literallayout>
<para>If present, <literal>units</literal> must be one of the time units described in the preceding section. If absent, <literal>units</literal> are assumed to be <literal>seconds</literal>. For example,</para>
<literallayout>delta = <userinput>5 min</userinput>; </literallayout>
<para>has the effect that any subsequent expressions (up to the next expression that assigns a value to <literal>delta</literal>) are scheduled for evaluation at a fixed frequency, once every five minutes.</para>
<para>The default value for <replaceable>delta</replaceable> may be specified using the <literal>-t</literal> command line option, otherwise <replaceable>delta</replaceable> is initially set to be 10 seconds.</para>
</section>
<section id="LE73508-PARENT">
<title id="LE73508-TITLE"><command>pmie</command> Metric Expressions</title>
<para>A Performance Metrics Name Space (PMNS) provides a means of naming performance
metrics, for example, <literal>disk.dev.read</literal>. The Performance Metrics Collection System (PMCS) allows an application to retrieve one or more values for a performance metric from a designated source (a collector host running <command>pmcd</command>, or a PCP archive log). To specify
a single value for some performance metric requires the metric name to be associated with all three of the following:</para>
<itemizedlist>
<listitem><para>A particular host (or source of metrics values)</para>
</listitem>
<listitem><para>A particular instance (for metrics with multiple values)</para>
</listitem>
<listitem><para>A sample time</para>
</listitem></itemizedlist>
<para>The permissible values for hosts are the range of valid hostnames as provided by Internet naming conventions.</para>
<para>The names for instances are provided by the Performance Metrics Domain Agents (PMDA) for the instance domain associated with the chosen performance metric.</para>
<para>The sample time specification is defined as the set of natural numbers 0, 1, 2, and so on. A number refers to one of a sequence of sampling events, from the current sample 0 to its predecessor 1, whose predecessor was 2, and so on. This scheme is illustrated by the time line shown in <xref linkend="LE54208-TITLE"></xref>.</para>

<para><figure>
<title id="LE54208-TITLE">Sampling Time Line</title>
<graphic entityref="a12217.gif" scale="NO"></graphic>
</figure></para>
<para>Each sample point is assumed to be separated from its predecessor by a constant amount of real time, the <replaceable>delta</replaceable>. The most recent sample point is always zero. The value of <replaceable>delta</replaceable> may vary from one expression to the next, but is fixed for each expression; for more information on the sampling interval, see <xref linkend="LE88708-PARENT"></xref>.</para>
<para>For <command>pmie</command>, a metrics expression is the name of a metric, optionally qualified by a host, instance and sample time specification. Special characters introduce the qualifiers: colon (<literal>:</literal>) for hosts, hash or pound sign (<literal>#</literal>) for instances, and at (<literal>@</literal>) for sample times. The following expression refers to the previous value (<literal>@1</literal>) of the counter for the disk read operations associated with the disk instance <literal>
#dks0d1</literal> on the host <literal>moomba</literal>.</para>
<literallayout>disk.dev.read :moomba #dks0d1 @1 </literallayout>
<para>In fact, this expression defines a point in the three-dimensional parameter space of {<literal>host</literal>} x {<literal>instance</literal>} x {<literal>sample time</literal>} as shown in <xref linkend="LE32691-TITLE"></xref>.</para>

<para><figure>
<title id="LE32691-TITLE">Three-Dimensional Parameter Space</title>
<graphic entityref="a12218.gif" scale="NO"></graphic>
</figure></para>
<para>A metric expression may also identify sets of values corresponding to one-, two-, or three-dimension slices of this space, according to the following rules:</para>
<orderedlist><listitem><para>A metric expression consists of a PCP metric name, followed by optional <replaceable>host</replaceable> specifications, followed by optional <replaceable>instance</replaceable> specifications, and finally, optional <replaceable>sample time</replaceable> specifications.</para>
</listitem><listitem><para>A <replaceable>host</replaceable> specification consists of one or more host names, each prefixed by a colon (<literal>:</literal>). For example: <literal>:indy :far.away.domain.com :localhost</literal></para>
</listitem><listitem><para>A missing <replaceable>host</replaceable> specification implies the default <command>pmie</command> source of metrics, as defined by a <literal>-h</literal> option on the command line, or the first named archive in a <literal>-a</literal> option on the command line, or <command>pmcd</command> on the local host.</para>
</listitem><listitem><para>An <replaceable>instance</replaceable> specification consists of one or more instance names, each prefixed by a hash or pound (<literal>#</literal>) sign. For example: <literal>#ec0 #ec2</literal></para>
<para>Recall that you can discover the instance names for a particular metric, using the <command>pminfo</command> command. See <xref linkend="LE23271-PARENT"></xref>.</para>
<para>Within the <command>pmie</command> grammar, an instance name is an identifier. If the instance name contains characters other than alphanumeric characters, enclose the instance name in single quotes; for example, <literal>#'/dev/root' #'/dev/usr'</literal></para>
</listitem><listitem><para>A missing <replaceable>instance</replaceable> specification implies all instances for the associated performance metric from each associated <command>pmie</command> source of metrics.</para>
</listitem><listitem><para>A <replaceable>sample time</replaceable> specification consists of either a single time or a range of times. A single time is represented as an at (<literal>@</literal>) followed by a natural number. A range of times is an at (<literal>@</literal>), followed by a natural number, followed by two periods (<literal>..</literal>) followed by a second natural number. The ordering of the end points in a range is immaterial. For example, <literal>@0..9</literal> specifies the last
10 sample times.</para>
</listitem><listitem><para>A missing <replaceable>sample time</replaceable> specification implies the most recent sample time.</para>
</listitem></orderedlist>
<para>The following metric expression refers to a three-dimension set of values, with two hosts in one dimension, five sample times in another, and the number of instances in the third dimension being determined by the number of configured disk spindles on the two hosts.</para>
<literallayout>disk.dev.read :foo :bar @0..4</literallayout>
</section>
<section id="LE59099-PARENT">
<title id="LE59099-TITLE"><command>pmie</command> Rate Conversion</title>
<para>Many of the metrics delivered by the PMCS are cumulative counters. Consider the following metric:</para>
<literallayout>disk.all.total </literallayout>
<para>A single value for this metric tells you only that a certain number of disk I/O operations have occurred since boot time, and that information may be invalid if the counter has exceeded its 32-bit range and wrapped. You need at least two values, sampled at known times, to compute the recent rate at which the I/O operations are being executed. The required syntax would be this:</para>
<literallayout>(disk.all.total @0 - disk.all.total @1) / delta </literallayout>
<para>The accuracy of <replaceable>delta</replaceable> as a measure of actual inter-sample delay is an issue. <command>pmie</command> requests samples, at intervals of approximately <replaceable>delta</replaceable>, while the results exported to the PMCS are time stamped with the high-resolution system clock time when the samples were exported. For these reasons, a built-in and implicit rate conversion using accurate time stamps is provided by <command>pmie</command> for performance metrics that have
counter semantics. For example, the following expression is unconditionally converted to a rate by <command>pmie</command>.</para>
<literallayout>disk.all.total </literallayout>
</section>
<section>
<title><command>pmie</command> Arithmetic Expressions</title>
<para>Within <command>pmie</command>, simple arithmetic expressions are constructed from metrics expressions (see <xref linkend="LE73508-PARENT"></xref>) and numeric constants, using all of the arithmetic operators and precedence rules of the C programming language.</para>
<para>All <command>pmie</command> arithmetic is performed in double precision.</para>
<para><xref linkend="LE87294-PARENT"></xref>, describes additional operators that may be used for aggregate operations to reduce the dimensionality of an arithmetic expression.</para>
</section>
<section>
<title><command>pmie</command> Logical Expressions</title>
<para>A number of logical expression types are supported:</para>
<itemizedlist>
<listitem><para>Logical constants</para>
</listitem>
<listitem><para>Relational expressions</para>
</listitem>
<listitem><para>Boolean expressions</para>
</listitem>
<listitem><para>Quantification operators</para>
</listitem></itemizedlist>
<section><title>Logical Constants</title>
<para>Like in the C programming language, <command>pmie</command> interprets an arithmetic value of zero to be false, and all other arithmetic values are considered true.</para>
</section>
<section><title>Relational Expressions</title>
<para>Relational expressions are the simplest form of logical expression, in which values may be derived from arithmetic expressions using <command>pmie</command> relational operators. For example, the following is a relational expression that is true or false, depending on the aggregate total of disk read operations per second being greater than 50.</para>
<literallayout>disk.all.read &gt; 50 count/sec</literallayout>
<para>All of the relational logical operators and precedence rules of the C programming language are supported in <command>pmie</command>.</para>
<para>As described in <xref linkend="LE73508-PARENT"></xref>, arithmetic expressions in <command>pmie</command> may assume set values. The relational operators are also required to take constant, singleton, and set-valued expressions as arguments. The result has the same dimensionality as the operands. Suppose the following rule is given:</para>
<literallayout><userinput>hosts = ":gonzo";</userinput>&ensp;<newline><userinput>intfs = "#ec0 #ec2";</userinput>&ensp;<newline><userinput>all_intf = network.interface.in.packets</userinput>&ensp;<newline>&ensp;               <userinput>$hosts $intfs @0..2 &gt; 300 count/sec;</userinput>&ensp;</literallayout>
<para>Then the execution of <command>pmie</command> may proceed as follows:</para>
<literallayout><userinput>pmie -V uag.11</userinput>&ensp;<newline>all_intf:<newline>&ensp;   gonzo: [ec0]      ?      ?      ?<newline>&ensp;   gonzo: [ec2]      ?      ?      ?<newline>all_intf:<newline>&ensp;   gonzo: [ec0]  false      ?      ?<newline>&ensp;   gonzo: [ec2]  false      ?      ?<newline>all_intf:<newline>&ensp;   gonzo: [ec0]   true  false      ?<newline>&ensp;   gonzo: [ec2]  false  false      ?<newline>all_intf:<newline>&ensp;   gonzo: [ec0]   true   true  false<newline>&ensp;   gonzo: [ec2]  false  false  false</literallayout>
<para>At each sample, the relational operator greater than (&gt;) produces six truth values for the cross-product of the <replaceable>instance</replaceable> and <replaceable>sample time</replaceable> dimensions.</para>
<para><xref linkend="LE97708-PARENT"></xref>, describes additional logical operators that may be used to reduce the dimensionality of a relational expression.</para>
</section>
<section><title>Boolean Expressions</title>
<para>The regular Boolean operators from the C programming language are supported: conjunction (<literal>&amp;&amp;</literal>), disjunction (<literal>||</literal>) and negation (<literal>!</literal>).</para>
<para>As with the relational operators, the Boolean operators accommodate set-valued operands, and set-valued results.</para>
</section>
<section id="LE97708-PARENT"><title id="LE97708-TITLE">Quantification Operators</title>
<para>Boolean and relational operators may accept set-valued operands and produce set-valued results. In many cases, rules that are appropriate for performance management require a set of truth values to be reduced along one or more of the dimensions of hosts, instances, and sample times described in <xref linkend="LE73508-PARENT"></xref>. The <command>pmie</command> quantification
operators perform this function.</para>
<para>Each quantification operator takes a one-, two-, or three-dimension set of truth values as an operand, and reduces it to a set of smaller dimension, by quantification along a single dimension. For example, suppose the expression in the previous example is simplified and prefixed by <literal>some_sample</literal>, to produce the following expression:</para>
<literallayout><userinput>intfs = "#ec0 #ec2";</userinput>&ensp;<newline><userinput>all_intf = some_sample network.interface.in.packets</userinput>&ensp;<newline>&ensp;                     <userinput>$intfs @0..2 &gt; 300 count/sec;</userinput>&ensp;</literallayout>
<para>Then the expression result is reduced from six values to two (one per interface instance), such that the result for a particular instance will be false unless the relational expression for the same interface instance is true for at least one of the preceding three sample times.</para>
<para>There are existential, universal, and percentile quantification operators in each of the <replaceable>host</replaceable>, <replaceable>instance,</replaceable> and <replaceable>sample time</replaceable> dimensions to produce the nine operators as follows:</para>
<deflist>
<deflistentry>
<term><literal>some_host</literal></term>
<listitem><para>True if the expression is true for at least one <replaceable>host</replaceable> for the same <replaceable>instance </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>all_host</literal></term>
<listitem><para>True if the expression is true for every <replaceable>host</replaceable> for the same <replaceable>instance </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>N</replaceable><literal>%</literal><literal>_host</literal></term>
<listitem><para>True if the expression is true for at least <replaceable>N</replaceable>% of the <replaceable>hosts</replaceable> for the same <replaceable>instance </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>some_inst</literal></term>
<listitem><para>True if the expression is true for at least one <replaceable>instance</replaceable> for the same <replaceable>host </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>all_instance</literal></term>
<listitem><para>True if the expression is true for every <replaceable>instance</replaceable> for the same <replaceable>host </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>N</replaceable><literal>%</literal><literal>_instance</literal></term>
<listitem><para>True if the expression is true for at least <replaceable>N</replaceable>% of the <replaceable>instances</replaceable> for the same <replaceable>host </replaceable>and <replaceable>sample time</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>some_sample time</literal></term>
<listitem><para>True if the expression is true for at least one <replaceable>sample time</replaceable> for the same <replaceable>host </replaceable>and <replaceable>instance</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>all_sample time</literal></term>
<listitem><para>True if the expression is true for every <replaceable>sample time</replaceable> for the same <replaceable>host </replaceable>and <replaceable>instance</replaceable>.</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>N</replaceable><literal>%</literal><literal>_sample time</literal></term>
<listitem><para>True if the expression is true for at least <replaceable>N</replaceable>% of the <replaceable>sample times</replaceable> for the same <replaceable>host </replaceable>and <replaceable>instance</replaceable>.</para>
</listitem></deflistentry>
</deflist>
<para>These operators may be nested. For example, the following expression answers the question: &ldquo;Are all hosts experiencing at least 20% of their disks busy either reading or writing?&rdquo;</para>
<literallayout>Servers = ":moomba :babylon";<newline>all_host (<newline>    20%_inst disk.dev.read $Servers &gt; 40 ||<newline>    20%_inst disk.dev.write $Servers &gt; 40<newline>); </literallayout>
<para>The following expression uses different syntax to encode the same semantics:</para>
<literallayout>all_host (<newline>    20%_inst (<newline>        disk.dev.read $Servers &gt; 40 ||<newline>        disk.dev.write $Servers &gt; 40<newline>    )<newline>);</literallayout>
<note><para>To avoid confusion over precedence and scope for the quantification operators, use explicit parentheses.</para>
</note>
<para>Two additional quantification operators are available for the instance dimension only, namely <literal>match_inst</literal> and <literal>nomatch_inst</literal>, that take a regular expression and a boolean expression. The result is the boolean AND of the expression and the result of matching (or not matching) the associated instance name against the regular expression.</para>
<para>For example, this rule evaluates error rates on various 10BaseT Ethernet network interfaces (such as ecN, etN, or efN):</para>
<literallayout width="wide">some_inst<newline>                  match_inst "^(ec|et|ef)"<newline>                      network.interface.total.errors &gt; 10 count/sec<newline>-&gt; syslog "Ethernet errors:" " %i"</literallayout>
</section>
</section>
<section>
<title><command>pmie</command> Rule Expressions</title>
<para>Rule expressions for <command>pmie</command> have the following syntax:</para>
<literallayout>lexpr -&gt; actions ;</literallayout>
<para>The semantics are as follows:</para>
<itemizedlist>
<listitem><para>If the logical expression <literal>lexpr</literal> evaluates <literal>true</literal>, then perform the <replaceable>actions</replaceable> that follow. Otherwise, do not perform the <replaceable>actions</replaceable>.</para>
</listitem>
<listitem><para>It is required that <literal>lexpr</literal> has a singular truth value. Aggregation and quantification operators must have been applied to reduce multiple truth values to a single value.</para>
</listitem>
<listitem><para>When executed, an <replaceable>action</replaceable> completes with a success/failure status.</para>
</listitem>
<listitem><para>One or more <replaceable>actions</replaceable> may appear; consecutive <replaceable>actions</replaceable> are separated by operators that control the execution of subsequent <replaceable>actions</replaceable>, as follows:</para>
<deflist id="Z926963018sdc">
<deflistentry>
<term><replaceable>action-1</replaceable><literal>&amp;</literal></term>
<listitem><para>Always execute subsequent actions (serial execution).</para>
</listitem></deflistentry>
<deflistentry>
<term><replaceable>action-1 </replaceable>&ensp;<userinput>|</userinput> </term>
<listitem><para>If <replaceable>action-1</replaceable> fails, execute subsequent actions, otherwise skip the subsequent actions (alternation).</para>
</listitem></deflistentry>
</deflist>
</listitem></itemizedlist>
<para>An<replaceable>&ensp;action</replaceable> is composed of a keyword to identify the action method, an optional <replaceable>time</replaceable> specification, and one or more <replaceable>argument</replaceable>s.</para>
<para>A <replaceable>time</replaceable> specification uses the same syntax as a valid time interval that may be assigned to <replaceable>delta</replaceable>, as described in <xref linkend="LE88708-PARENT"></xref>. If the <replaceable>action</replaceable> is executed and the <replaceable>time</replaceable> specification is present, <command>pmie</command> will suppress any subsequent execution of this <replaceable>action</replaceable> until the wall clock time has advanced by <replaceable>time</replaceable>.
</para>
<para>The <replaceable>argument</replaceable>s are passed directly to the action method.</para>
<para>The following action methods are provided:</para>
<deflist>
<deflistentry>
<term><literal>shell</literal></term>
<listitem><para>The single <replaceable>argument</replaceable> is passed to the shell for execution. This <replaceable>action</replaceable> is implemented using <literal>system</literal> in the background. The <replaceable>action</replaceable> does not wait for the system call to return, and succeeds unless the fork fails.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>alarm</literal></term>
<listitem><para>A notifier containing a time stamp, a single <replaceable>argument</replaceable> as a message, and a <interface class="BUTTON">Cancel</interface> button is posted on the current display screen (as identified by the <literal>DISPLAY</literal> environment variable). Each alarm <replaceable>action</replaceable> first checks if its notifier is already active. If there is an identical active notifier, a duplicate notifier is not
posted. The action succeeds unless the fork fails.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>syslog</literal></term>
<listitem><para>A message is written into the system log as a priority (see the <literal>-p</literal> option for <command>pmlogger</command>);" to: "A message is written into the system log. If the first word of the first argument is <literal>-p</literal>, the second word is interpreted as the priority (see the <command sectionref="3">syslog</command> man page)"; the message tag is <literal>pcp-pmie</literal>. The remaining <replaceable>argument
</replaceable> is the message to be written to the system log. The action succeeds unless the fork fails.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>print</literal></term>
<listitem><para>A message containing a time stamp in <command>ctime</command> format and the <replaceable>argument</replaceable> is displayed out to standard output (<command>stdout</command>). This action always succeeds.</para>
</listitem></deflistentry>
</deflist>
<para>Within the <replaceable>argument</replaceable> passed to an action method, the following expansions are supported to allow some of the context from the logical expression on the left to appear to be embedded in the <replaceable>argument</replaceable>:</para>
<deflist termlength="narrow">
<deflistentry>
<term><literal>%h</literal></term>
<listitem><para>The value of a <replaceable>host</replaceable> that makes the expression true.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%i</literal></term>
<listitem><para>The value of an <replaceable>instance</replaceable> that makes the expression true.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>%v</literal></term>
<listitem><para>The value of a performance metric from the logical expression.</para>
</listitem></deflistentry>
</deflist>
<para>Some ambiguity may occur in respect to which <replaceable>host</replaceable>, <replaceable>instance,</replaceable> or performance metric is bound to a %-token. In most cases, the leftmost binding in the top-level subexpression is used. You may need to use <command>pmie</command> in the interactive debugging mode (specify the <literal>-d</literal> command line option) in conjunction with the <literal>-W</literal> command line option to discover
which subexpressions contributes to the %-token bindings.</para>
<para>The following example illustrates some of the options when constructing rule expressions:</para>
<literallayout width="wide">some_inst ( disk.dev.total &gt; 60 )<newline>       -&gt; syslog 10 mins "[%i] busy, %v IOPS " &amp;<newline>          shell 1 hour "echo \<newline>               'Disk %i is REALLY busy. Running at %v I/Os per second' \<newline>               | Mail -s 'pmie alarm' sysadm"; </literallayout>
<para>In this case, <literal>%v</literal> and <literal>%i</literal> are both associated with the instances for the metric <literal>disk.dev.total</literal> that make the expression true. If more than one instance makes the expression true (more than one disk is busy), then the <replaceable>argument</replaceable> is formed by concatenating the result from each %-token binding. For example, the text added to <filename>/var/adm/SYSLOG</filename>
might be as follows:</para>
<literallayout width="wide">Aug 6 08:12:44 5B:gonzo pcp-pmie[3371]:<newline>                         [dks0d1] busy, 3.7 IOPS [dks0d2] busy, 0.3 IOPS</literallayout>
<note><para>When <command>pmie</command> is processing performance metrics from a PCP archive log, the <replaceable>actions</replaceable> will be processed in the expected manner; however, the action methods are modified to report a textual facsimile of the <replaceable>action</replaceable> on the standard output. For example, consider the following rule:</para>
</note>
<literallayout>delta = 2 sec;  // more often for demonstration purposes<newline>percpu  = "kernel.percpu";<newline>// Unusual usr-sys split when some CPU is more than 20% in usr mode<newline>// and sys mode is at least 1.5 times usr mode<newline>//<newline>cpu_usr_sys = some_inst (<newline>        $percpu.cpu.sys &gt; $percpu.cpu.user * 1.5 &amp;&amp;<newline>        $percpu.cpu.user &gt; 0.2<newline>   ) -&gt;  alarm "Unusual sys time: " "%i "; </literallayout>
<para>When evaluated against an archive, the following output is generated (the alarm action produces a message on standard output):</para>
<literallayout><userinput>pmafm /tmp/f4 pmie cpu.head cpu.00</userinput><newline>alarm Wed Aug  7 14:54:48 1996: Unusual sys time: cpu0<newline>alarm Wed Aug  7 14:54:50 1996: Unusual sys time: cpu0<newline>alarm Wed Aug  7 14:54:52 1996: Unusual sys time: cpu0<newline>alarm Wed Aug  7 14:55:02 1996: Unusual sys time: cpu0<newline>alarm Wed Aug  7 14:55:06 1996: Unusual sys time: cpu0 </literallayout>
</section>
<section id="LE87294-PARENT">
<title id="LE87294-TITLE"><command>pmie</command> Intrinsic Operators</title>
<para>The following sections describe some other useful intrinsic operators for <command>pmie</command>. These operators are divided into three groups:</para>
<itemizedlist>
<listitem><para>Arithmetic aggregation</para>
</listitem>
<listitem><para>The <literal>rate</literal> operator</para>
</listitem>
<listitem><para>Transitional operators</para>
</listitem></itemizedlist>
<section><title>Arithmetic Aggregation</title>
<para>For set-valued arithmetic expressions, the following operators reduce the dimensionality of the result by arithmetic aggregation along one of the <replaceable>host</replaceable>, <replaceable>instance</replaceable>, or <replaceable>sample time</replaceable> dimensions. For example, to aggregate in the <replaceable>host</replaceable> dimension,
the following operators are provided:</para>
<deflist>
<deflistentry>
<term><literal>avg_host</literal><userinput></userinput></term>
<listitem><para>Computes the average value across all <replaceable>instances</replaceable> for the same <replaceable>host</replaceable> and <replaceable>sample time</replaceable></para>
</listitem></deflistentry>
<deflistentry>
<term><literal>sum_host</literal><userinput></userinput></term>
<listitem><para>Computes the total value across all <replaceable>instances</replaceable> for the same <replaceable>host</replaceable> and <replaceable>sample time</replaceable></para>
</listitem></deflistentry>
<deflistentry>
<term><literal>count_host</literal><userinput></userinput></term>
<listitem><para>Computes the number of values across all <replaceable>instances</replaceable> for the same <replaceable>host</replaceable> and <replaceable>sample time</replaceable></para>
</listitem></deflistentry>
<deflistentry>
<term><literal>min_host</literal></term>
<listitem><para>Comutes the minimum value across all <replaceable>instances</replaceable> for the same <replaceable>host</replaceable> and <replaceable>sample time</replaceable></para>
</listitem></deflistentry>
<deflistentry>
<term><literal>max_host</literal><userinput></userinput></term>
<listitem><para>Computes the maximum value across all <replaceable>instances</replaceable> for the same <replaceable>host</replaceable> and <replaceable>sample time</replaceable></para>
</listitem></deflistentry>
</deflist>
<para>Ten additional operators correspond to the forms <literal>*_inst</literal> and <literal>*_sample</literal>.</para>
<para>The following example illustrates the use of an aggregate operator in combination with an existential operator to answer the question &ldquo;Does some host currently have two or more busy processors?&rdquo;</para>
<literallayout>// note '' to escape - in host name<newline>poke = ":moomba :'mac-larry' :bitbucket";<newline>some_host (<newline>    count_inst ( kernel.percpu.cpu.user $poke +<newline>                 kernel.percpu.cpu.sys $poke &gt; 0.7 ) &gt;= 2<newline>    )<newline>       -&gt; alarm "2 or more busy CPUs"; </literallayout>
</section>
<section><title>The <command>rate</command> Operator</title>
<para>The <literal>rate</literal> operator computes the rate of change of an arithmetic expression as shown in the following example:</para>
<literallayout>rate mem.freemem </literallayout>
<para>It returns the rate of change for the <literal>mem.freemem</literal> performance metric; that is, the rate at which free physical memory is being allocated or released.</para>
<para>The <literal>rate</literal> intrinsic operator is most useful for metrics with instantaneous value semantics. For metrics with counter semantics, <command>pmie</command> already performs an implicit rate calculation (see the <xref linkend="LE59099-PARENT"></xref>) and the <literal>rate</literal> operator would produce the second derivative with respect to time, which is less likely to be useful.</para>
</section>
<section><title>Transitional Operators</title>
<para>In some cases, an action needs to be triggered when an expression changes from true to false or vice versa. The following operators take a logical expression as an operand, and return a logical expression:</para>
<deflist>
<deflistentry>
<term><literal>rising</literal></term>
<listitem><para>Has the value <literal>true</literal> when the operand transitions from <literal>false</literal> to <literal>true</literal> in consecutive samples.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>falling</literal><emphasis></emphasis></term>
<listitem><para>Has the value <literal>false</literal> when the operand transitions from <literal>true</literal> to <literal>false</literal> in consecutive samples.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
</section>
<section id="LE60280-PARENT">
<title id="LE60280-TITLE"><command>pmie</command> Examples</title>
<para>The examples presented in this section are task-oriented and use the full power of the <command>pmie</command> specification language as described in <xref linkend="LE90227-PARENT"></xref>.</para>
<para>Source code for the <command>pmie</command> examples in this chapter, and many more examples, is provided in the PCP subsystem <filename>pcp.sw.demo</filename>, and when installed may be found in <filename>/var/pcp/demos/pmie</filename>. <xref linkend="Z928441343sdc"></xref>, and <xref linkend="Z928441176sdc"></xref>, illustrate monitoring CPU utilization and disk activity.
</para>
<example id="Z928441343sdc"><title>Monitoring CPU Utilization</title>
<literallayout width="wide">// Some Common Performance Monitoring Scenarios<newline>//<newline>// The CPU Group<newline>//<newline>delta = 2 sec;  // more often for demonstration purposes<newline>// common prefixes<newline>//<newline>percpu  = "kernel.percpu";<newline>all     = "kernel.all";<newline>// Unusual usr-sys split when some CPU is more than 20% in usr mode<newline>// and sys mode is at least 1.5 times usr mode<newline>//<newline>cpu_usr_sys =<newline>       some_inst (<newline>           $percpu.cpu.sys &gt; $percpu.cpu.user * 1.5 &amp;&amp;<newline>           $percpu.cpu.user &gt; 0.2<newline>       )<newline>           -&gt;  alarm "Unusual sys time: " "%i ";<newline>// Over all CPUs, syscall_rate &gt; 1000 * no_of_cpus<newline>//<newline>cpu_syscall =<newline>       $all.syscall &gt; 1000 count/sec * hinv.ncpu<newline>       -&gt;  print "high aggregate syscalls: %v";<newline>// Sustained high syscall rate on a single CPU<newline>//<newline>delta = 30 sec;<newline>percpu_syscall =<newline>       some_inst (<newline>           $percpu.syscall &gt; 2000 count/sec<newline>       )<newline>           -&gt; syslog "Sustained syscalls per second? " "[%i] %v ";<newline>// the 1 minute load average exceeds 5 * number of CPUs on any host<newline>hosts = ":gonzo :moomba";   // change as required<newline>delta = 1 minute;           // no need to evaluate more often than this<newline>high_load =<newline>     some_host (<newline>           $all.load $hosts #'1 minute' &gt; 5 * hinv.ncpu<newline>       )<newline>           -&gt; alarm "High Load Average? " "%h: %v ";</literallayout>
</example>
<example id="Z928441176sdc"><title>Monitoring Disk Activity</title>
<literallayout width="wide">// Some Common Performance Monitoring Scenarios<newline>//<newline>// The Disk Group<newline>//<newline>delta = 15 sec;         // often enough for disks?<newline>// common prefixes<newline>//<newline>disk    = "disk";<newline>// Any disk performing more than 40 I/Os per second, sustained over<newline>// at least 30 seconds is probably busy<newline>//<newline>delta = 30 seconds;<newline>disk_busy =<newline>       some_inst (<newline>           $disk.dev.total &gt; 40 count/sec<newline>       )<newline>]      -&gt; shell "Mail -s 'Heavy systained disk traffic' sysadm";<newline>// Try and catch bursts of activity ... more than 60 I/Os per second<newline>// for at least 25% of 8 consecutive 3 second samples<newline>//<newline>delta = 3 sec;<newline>disk_burst =<newline>       some_inst (<newline>           25%_sample (<newline>               $disk.dev.total @0..7 &gt; 60 count/sec<newline>           )<newline>       )<newline>       -&gt; alarm "Disk Burst? " "%i ";<newline>// any SCSI disk controller performing more than 3 Mbytes per<newline>// second is busy<newline>// Note: the obscure 512 is to convert blocks/sec to byte/sec,<newline>//       and pmie handles the rest of the scale conversion<newline>//<newline>some_inst $disk.ctl.blktotal * 512 &gt; 3 Mbyte/sec<newline>           -&gt; alarm "Busy Disk Controller: " "%i ";</literallayout>
</example>
</section>
<section id="LE31514-PARENT">
<title id="LE31514-TITLE">Developing and Debugging <command>pmie</command> Rules</title>
<para> Given the <literal>-d</literal> command line option, <command>pmie</command> executes in interactive mode, and the user is presented with a menu of options:</para>
<literallayout width="wide">pmie debugger commands<newline>     f [file-name]      - load expressions from given file or stdin<newline>     l [expr-name]      - list named expression or all expressions<newline>     r [interval]       - run for given or default interval<newline>     S time-spec        - set start time for run<newline>     T time-spec        - set default interval for run command<newline>     v [expr-name]      - print subexpression for %h, %i and %v bindings<newline>     h or ?             - print this menu of commands<newline>     q                  - quit<newline>pmie&gt; </literallayout>
<para>If both the <literal>-d</literal> option and a <literal>filename</literal> are present, the expressions in the given file are loaded before entering interactive mode. Interactive mode is useful for debugging new rules.</para>
</section>
<section id="LE91221-PARENT">
<title id="LE91221-TITLE">Caveats and Notes on <command>pmie</command></title>
<para>The following sections provide important information for users of <command>pmie</command>.</para>
<section>
<title>Performance Metrics Wraparound</title>
<para>Performance metrics that are cumulative counters may occasionally overflow their range and wraparound to 0. When this happens, an unknown value (printed as <literal>?</literal>) is returned as the value of the metric for one sample (recall that the value returned is normally a rate).
You can have PCP interpolate a value based on expected rate of change by setting the <literal>PCP_COUNTER_WRAP</literal> environment variable.</para>
</section>
<section>
<title><command>pmie</command> Sample Intervals</title>
<para>The sample interval (<replaceable>delta</replaceable>) should always be long enough, particularly in the case of rates, to ensure that a meaningful value is computed. Interval may vary according to the metric and your needs. A reasonable minimum is in the range of ten seconds or several minutes. Although the PMCS supports sampling
rates up to hundreds of times per second, using small sample intervals creates unnecessary load on the monitored system.</para>
</section>
<section>
<title><command>pmie</command> Instance Names</title>
<para>When you specify a metric instance name (<literal>#</literal><replaceable>identifier</replaceable>) in a <command>pmie</command> expression, it is compared against the instance name supplied by the PMCS as follows:</para>
<itemizedlist>
<listitem><para>If the given instance name and the PMCS name are the same, they are considered to match.</para>
</listitem>
<listitem><para>Otherwise, the first two space separated tokens are extracted from the PMCS name. If the given instance name is the same as either of these tokens, they are considered a match.</para>
</listitem></itemizedlist>
<para>For some metrics, notably the per process (<literal>proc.xxx.xxx</literal>) metrics, the first token in the PMCS instance name is impossible to determine at the time you are writing <command>pmie</command> expressions. The above policy circumvents this problem.</para>
</section>
<section>
<title><command>pmie</command> Error Detection</title>
<para>The parser used in <command>pmie</command> is currently not robust in handling syntax errors. It is suggested that you check any problematic expressions individually in interactive mode:</para>
<literallayout><userinput>pmie -v -d</userinput><literal>&ensp;</literal><newline>pmie&gt; f<newline><replaceable>expression</replaceable><newline><userinput>Ctrl+D</userinput></literallayout>
<para>If the expression was parsed, its internal representation is shown:</para>
<literallayout>pmie&gt; <userinput>l</userinput></literallayout>
<para>The expression is evaluated twice and its value printed:</para>
<literallayout>pmie&gt; <userinput>r 10sec</userinput></literallayout>
<para>Then quit:</para>
<literallayout>pmie&gt; <userinput>q</userinput></literallayout>
<para>It is not always possible to detect semantic errors at parse time. This happens when a performance metric descriptor is not available from the named host at this time. A warning is issued, and the expression is put on a wait list. The wait list is checked periodically (about every five minutes) to see if the metric descriptor has become available. If an error is detected at this time, a message is printed to the standard error stream (<command>stderr</command>) and the offending expression is
put aside.</para>
</section>
</section>
<section id="Z927039566sdc">
<title>Creating <command>pmie</command> Rules with <command>pmieconf</command></title>
<para>The <command>pmieconf</command> tool is a command line utility that is designed to aid the specification of <command>pmie</command> rules from parameterized versions of the rules. <command>pmieconf</command> is used to displaying and modify variables or parameters controlling the details of the generated <command>pmie
</command> rules.</para>
<para><command>pmieconf</command> reads two different forms of supplied input files and produces a localized <command>pmie</command> configuration file as its output.</para>
<para>The first input form is a generalized <command>pmie</command> rule file such as those found below <filename>/var/pcp/config/pmieconf/*/*</filename>. These files contain the generalized rules which <command>pmieconf</command> is able to manipulate. Each of the rules can be enabled or disabled, or the individual variables associated with each rule can be edited.</para>
<para>The second form is an actual <command>pmie</command> configuration file (that is, a file which can be interpreted by <command>pmie</command>, conforming to the <command>pmie</command> syntax described in <xref linkend="LE90227-PARENT"></xref>). This file is both input to and output from <command>pmieconf</command>.</para>
<para>The input version of the file contains any changed variables or rule states from previous invocations of <command>pmieconf</command>, and the output version contains both the changes in state (for any subsequent <command>pmieconf</command> sessions) and the generated <command>pmie</command> syntax. The <command>pmieconf</command> state is embedded within a <command>pmie</command> comment block at the head of the output file and is not interpreted by <command>pmie</command> itself.</para>
<para><command>pmieconf</command> is an integral part of the <command>pmie</command> daemon management process described <xref linkend="Z927039824sdc"></xref>. <xref linkend="Z930357839sdc"></xref>, and <xref linkend="Z930357878sdc"></xref>, introduce the <command>pmieconf</command> tool through a series of typical operations.</para>
<procedure id="Z930357839sdc"><title>Display <command>pmieconf</command> Rules</title>
<orderedlist><listitem><para>Start pmieconf interactively.<literallayout width="wide">$ pmieconf -f /tmp/pmiefile<newline>Updates will be made to /tmp/pmiefile<newline><newline>pmieconf&gt;</literallayout></para>
</listitem><listitem><para>List the set of available <command>pmieconf</command> rules by using the <command>rules</command> command.</para>
</listitem><listitem><para>List the set of rule groups using the <command>groups</command> command.</para>
</listitem><listitem><para>List only the enabled rules, using the <command>rules enabled</command> command.</para>
</listitem>
<listitem><para>List a single rule:</para>
<literallayout width="wide">pmieconf&gt; list memory.swap_low<newline>   rule: memory.swap_low  [Low free swap space]<newline>   help: There is only threshold percent swap space remaining - the system<newline>         may soon run out of virtual memory.  Reduce the number and size of<newline>         the running programs or add more swap(1) space before it<newline>completely<newline>         runs out.<newline>         predicate =<newline>           some_host (<newline>               ( 100 * ( swap.free $hosts$ / swap.length $hosts$ ) )<newline>                 &lt; $threshold$<newline>               &amp;&amp; swap.length $hosts$ &gt; 0        // ensure swap in use<newline>            )<newline>   vars: enabled = no<newline>         threshold = 10%<newline><newline>pmieconf&gt;</literallayout>
</listitem><listitem><para>List one rule variable:<literallayout>pmieconf&gt; list memory.swap_low threshold<newline>   rule: memory.swap_low  [Low free swap space]<newline>         threshold = 10%<newline><newline>pmieconf&gt;</literallayout></para>
</listitem></orderedlist>
</procedure>
<procedure id="Z930357878sdc"><title>Modify <command>pmieconf</command> Rules and Generate a <command>pmie</command> File</title>
<orderedlist><listitem><para>Lower the threshold for the <literal>memory.swap_low</literal> rule, and also change the <command>pmie</command> sample interval affecting just this rule. The <replaceable>delta</replaceable> variable is special in that it is not associated with any particular rule; it has been defined as a global <command>pmieconf</command> variable. Global variables can be displayed using the <command>list global</command> command to <command>pmieconf</command>, and can be modified either
globally or local to a specific rule.<literallayout>pmieconf&gt; modify memory.swap_low threshold 5<newline><newline>pmieconf&gt; modify memory.swap_low delta "1 sec"<newline><newline>pmieconf&gt;</literallayout></para>
</listitem><listitem><para>Disable all of the rules except for the <literal>memory.swap_low</literal> rule so that you can see the effects of your change in isolation.</para>
<para>This produces a relatively simple <command>pmie</command> configuration file:<literallayout>pmieconf&gt; disable all<newline><newline>pmieconf&gt; enable memory.swap_low<newline><newline>pmieconf&gt; status<newline>  verbose:  off<newline>  enabled rules:  1 of 35<newline>  pmie configuration file:  /tmp/pmiefile<newline>  pmie processes (PIDs) using this file:  (none found)<newline><newline>pmieconf&gt; quit</literallayout></para>
<para>You can also use the <command>status</command> command to verify that only one rule is enabled at the end of this step.</para>
<para></para>
</listitem><listitem id="Z930357553sdc"><para>Run <command>pmie</command> with the new configuration file. Use a text editor to view the newly generated <command>pmie</command> configuration file (<filename>/tmp/pmiefile</filename>), and then run the command:<literallayout>$ pmie -T "1.5 sec" -v -l /tmp/log /tmp/pmiefile<newline>memory.swap_low: false<newline><newline>memory.swap_low: false<newline><newline>$ cat /tmp/log<newline>Log for pmie on moomba started Mon Jun 21 16:26:06 1999<newline><newline>pmie: PID = 21847, default host = moomba<newline><newline>[Mon Jun 21 16:26:07] pmie(21847) Info: evaluator exiting<newline><newline>Log finished Mon Jun 21 16:26:07 1999<newline>$</literallayout></para>
</listitem><listitem><para>Notice that both of the <command>pmieconf</command> files used in the previous step are simple text files, as described in the <command sectionref="4">pmieconf</command> man page:</para>
<literallayout width="wide">$ file /tmp/pmiefile<newline>/tmp/pmiefile:  PCP pmie config (V.1)<newline>$ file /var/pcp/config/pmieconf/memory/swap_low<newline>/var/pcp/config/pmieconf/memory/swap_low:       PCP pmieconf rules (V.1)</literallayout>
</listitem></orderedlist>
</procedure>
</section>
<section id="Z927039824sdc">
<title>Management of <command>pmie</command> Processes</title>
<para>The <command>pmie</command> process can be run as a daemon as part of the system startup sequence, and can thus be used to perform automated, live performance monitoring of a running system. To do this, run these commands (as superuser):</para>
<literallayout># chkconfig pmie on<newline># /etc/init.d/pmie start</literallayout>
<para>By default, these enable a single <command>pmie</command> process monitoring the local host, with the default set of <command>pmieconf</command> rules enabled (for more information about <command>pmieconf</command>, see <xref linkend="Z927039566sdc"></xref> ). <xref linkend="Z930363467sdc"></xref>, illustrates how you can use these commands to start any number of <command>pmie</command> processes to monitor local or remote machines.</para>
<procedure id="Z930363467sdc"><title>Add a New<command> pmie</command> Instance to the <command>pmie</command> Daemon Management Framework</title>
<orderedlist><listitem><para>Use a text editor (as superuser) to edit the <command>pmie</command> control file <filename>/var/pcp/config/pmie/control</filename>. Notice the default entry toward the end of the file, which looks like this:</para>
<literallayout width="wide">#Host           S?  Log File                                  Arguments<newline>LOCALHOSTNAME   n   /var/adm/pmielog/LOCALHOSTNAME/pmie.log   -c config.default</literallayout>
<para>This entry is used to enable a local <command>pmie</command> process. Add a new entry for a remote host on your local network (for example, <literal>moomba</literal>), by using your <command>pmie</command> configuration file (see <xref linkend="Z927039566sdc"></xref>):</para>
<literallayout width="wide"><newline><newline>#Host           S?  Log File                                  Arguments<newline>moomba          n   /var/adm/pmielog/moomba/pmie.log          -c /tmp/pmiefile<newline>
</literallayout>
</listitem><listitem><para>Enable <command>pmie</command> daemon management: <literallayout># chkconfig pmie on</literallayout></para>
<para>This simple step allows <command>pmie</command> to be started as part of your machine's boot process.</para>
</listitem><listitem><para>Start the two <command>pmie</command> daemons. At the end of this step, you should see two new <command>pmie</command> processes monitoring the local and remote hosts:</para>
<literallayout># /etc/init.d/pmie start<newline>    Performance Co-Pilot starting inference engine(s) ...<newline>
</literallayout>
<para>Wait a few moments while the startup scripts run. The <command>pmie</command> start script uses the <command>pmie_check</command> script to do most of its work.</para>
<para>Verify that the <command>pmie</command> processes have started using the <command>pmie</command> metrics exported by the <command>pmcd</command> PMDA (<literal>wobbly</literal> is the local host):</para>
<literallayout width="wide"># pminfo -f pmcd.pmie.pmcd_host<newline><newline>pmcd.pmie.pmcd_host<newline>    inst [23150 or "23150"] value "wobbly.melbourne.sgi.com"<newline>    inst [23204 or "23204"] value "moomba.melbourne.sgi.com"</literallayout>
</listitem></orderedlist>
</procedure>
<para>If a remote host is not up at the time when <command>pmie</command> is started, the <command>pmie</command> process may exit. <command>pmie</command> processes may also exit if the local machine is starved of memory resources. To counter these adverse cases, it can be useful to have a <command>crontab</command> entry running. Adding an entry as shown in <xref linkend="Z930363412sdc"></xref>, ensures that if one of the configured <command>pmie</command> processes exits, it is automatically restarted.
</para>
<procedure id="Z930363412sdc"><title>Add a <command>pmie</command> <command>crontab</command> Entry</title></procedure>
<orderedlist><listitem><para>Merge the sample <command>pmie</command> <command>crontab</command> entry with your <literal>root</literal> <command>crontab</command> entry. The <filename>/var/pcp/config/pmie/crontab</filename> file holds this sample entry:<literallayout width="wide">$ cat /var/pcp/config/pmie/crontab<newline>#<newline># standard Performance Co-Pilot crontab entries for a PCP site<newline># with one or more pmie instances running<newline>#<newline># every 30 minutes, check pmie instances are running<newline>25,55   *       *       *       *       /usr/pcp/bin/pmie_check<newline>
</literallayout></para>
</listitem><listitem><para>Use the <command>crontab</command> command and a text editor to append the sample <command>pmie</command> <command>crontab</command> entry to <literal>root</literal> <command>crontab</command> file. This procedure runs the <command>pmie_check</command> script once every thirty minutes to verify that the <command>pmie</command> instances are running. If they are not, the procedure restarts them and sends e-mail to <literal>root</literal> indicating which instances needed
restarting.</para>
</listitem></orderedlist>
<section>
<title>Global Files and Directories</title>
<para>The following global files and directories influence the behavior of <command>pmie</command> and the <command>pmie</command> management scripts:</para>
<deflist termlength="nextline" id="Z930361086sdc">
<deflistentry>
<term><filename>/etc/config/pmie</filename></term>
<listitem><para>Controls the <command>pmie</command> daemon facility. Enable it using this command:<literallayout>chkconfig pmie on</literallayout></para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/demos/pmie/*</filename></term>
<listitem><para>Contains sample <command>pmie</command> rules that may be used as a basis for developing local rules.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/config/pmie/config.default</filename></term>
<listitem><para>Is the default <command>pmie</command> configuration file that is used when the <command>pmie</command> daemon facility is enabled.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/config/pmieconf/*/*</filename></term>
<listitem><para>Contains the <command>pmieconf</command> rule definitions in its subdirectories.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/config/pmie/control</filename></term>
<listitem><para>Defines which PCP collector hosts require a daemon <command>pmie</command> to be launched on the local host, where the configuration file comes from, where the <command>pmie</command> log file should be created, and <command>pmie</command> startup options.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/pcp/config/pmlogger/crontab</filename></term>
<listitem><para>Contains prototype <command>crontab</command> entries that may be merged with the <command>crontab</command> entries for root to schedule the periodic execution of the <command>pmie_check</command> script, for verifying that <command>pmie</command> instances are running.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/adm/pmielog/</filename></term>
<listitem><para>Contains the <command>pmie</command> log files for the host. These files are created by the default behavior of the <filename>/etc/init.d/pmie</filename> startup scripts.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title><command>pmie</command> Instances and Their Progress</title>
<para>The <command>pmcd</command> PMDA exports information about executing <command>pmie</command> instances and their progress in terms of rule evaluations and action execution rates.</para>
<deflist termlength="wide" id="Z929060000sdc">
<deflistentry>
<term><command>pmie_check</command></term>
<listitem><para>This command is similar to the <command>pmlogger</command> support script, <command>pmlogger_check</command>.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/etc/init.d/pmie</filename></term>
<listitem><para>This control file supports the starting and stopping of multiple <command>pmie</command> instances that are monitoring one or more hosts.</para>
</listitem></deflistentry>
<deflistentry>
<term><filename>/var/tmp/pmie</filename></term>
<listitem><para>The statistics that <command>pmie</command> gathers are maintained in binary data structure files. These files are in the <filename>/var/tmp/pmie</filename> directory.</para>
</listitem></deflistentry>
<deflistentry>
<term><literal>pmcd.pmie</literal> metrics</term>
<listitem><para>If <command>pmie</command> is running on a system with a PCP collector deployment, the <command>pmcd</command> PMDA exports these metrics via the <filename>pmcd.pmie</filename> group of metrics.</para>
</listitem></deflistentry>
</deflist>
</section>
</section>
</chapter>


<chapter id="LE93354-PARENT">
<title id="LE93354-TITLE">Archive Logging</title>
<para>Performance monitoring and management in complex systems demands the ability to accurately capture performance characteristics for subsequent review, analysis, and comparison. Performance Co-Pilot (PCP) provides extensive support for the creation and management of archive logs that capture a user-specified profile of performance information to support retrospective performance analysis.</para>
<para>The following major sections are included in this chapter:</para>
<itemizedlist>
<listitem><para><xref linkend="LE43411-PARENT"></xref>, presents the concepts and issues involved with creating and using archive logs.</para>
</listitem>
<listitem><para><xref linkend="LE46764-PARENT"></xref>, describes the interaction of the PCP tools with archive logs.</para>
</listitem>
<listitem><para><xref linkend="Z930642977sdc"></xref>, provides information about other archive logging features and sevices.</para>
</listitem>
<listitem><para><xref linkend="LE80113-PARENT"></xref>, presents helpful directions if your archive logging implementation is not functioning correctly.</para>
</listitem></itemizedlist>
<section id="LE43411-PARENT">
<title id="LE43411-TITLE">Introduction to Archive Logging</title>
<para>Within the Performance Co-Pilot, the <command>pmlogger</command> utility may be configured to collect archives of performance metrics. The archive creation process
is easy and very flexible, incorporating the following features:</para>
<itemizedlist>
<listitem><para>Archive log creation at either a PCP collector (typically a server) or a PCP monitor system (typically a workstation), or at some designated PCP archive logger host.</para>
</listitem>
<listitem><para>Concurrent independent logging, both local and remote. The performance analyst can activate a private <command>pmlogger</command> instance to collect only the metrics of interest for the problem at hand, independent of other logging on the workstation or remote host.</para>
</listitem>
<listitem><para>Record mode in various GUI monitoring tools to create archives as needed from the current visualization.</para>
</listitem>
<listitem><para>Independent determination of logging frequency for individual metrics or metric instances. For example, you could log the &ldquo;5 minute&rdquo; load average every half hour, the write I/O rate on the DBMS log spindle every 10 seconds, and aggregate I/O rates on the other disks every minute.</para>
</listitem>
<listitem><para>Dynamic adjustment of what is to be logged, and how frequently, via <command>pmlc</command>. This feature may be used to disable logging or to increase the sample interval during periods of low activity or chronic high activity (to minimize logging overhead and intrusion). A local <command>pmlc</command>
may interrogate and control a remote <command>pmlogger</command>, subject to the access control restrictions implemented by <command>pmlogger</command>.</para>
</listitem>
<listitem><para>Self-contained logs that include all system configuration and metadata required to interpret the values in the log. These logs can be kept for analysis at a much later time, potentially after the hardware or software has been reconfigured and the logs have been stored as discrete, autonomous files for remote analysis.</para>
</listitem>
<listitem><para>Archive folios as a convenient aggregation of multiple archive logs. Archive folios may be created with the <command>mkafm</command> utility and processed with the <command>pmafm</command> tool.</para>
</listitem></itemizedlist>
<section>
<title>Archive Logs and the PMAPI</title>
<para>Critical to the success of the PCP archive logging scheme is the fact that the library routines providing access to real-time feeds of performance metrics also provide access to the archive logs.</para>
<para>Live feeds (or real-time) sources of performance metrics and archives are literally interchangeable, with a single Performance Metrics Application Programming Interface (PMAPI) that preserves the same semantics for both styles of metric source. In this way, applications and tools developed against the PMAPI can automatically process either live or historical performance data.</para>
<para>The only restriction is that both live and historical data cannot be monitored simultaneously with the same invocation of a visualization tool.</para>
</section>
<section>
<title>Retrospective Analysis Using Archive Logs</title>
<para>One of the most important applications of archive logging services provided by PCP is in the area of retrospective analysis. In many cases, understanding today's performance problems can be assisted by side-by-side comparisons with yesterday's performance. With routine creation of performance archive logs, you can concurrently replay
pictures of system performance for two or more periods in the past.</para>
<para>Archive logs are also an invaluable source of intelligence when trying to diagnose what went wrong, as in a performance postmortem. Because the PCP archive logs are entirely self-contained, this analysis can be performed off-site if necessary.</para>
<para>Each archive log contains metric values from only one host. However, many PCP tools can simultaneously visualize values from multiple archives collected from different hosts.</para>
<para>The archives can be replayed against the inference engine (<command>pmie</command> is an application that uses the PMAPI). This allows you to automate the regular, first-level analysis of system performance.</para>
<para>Such analysis can be performed by constructing suitable expressions to capture the essence of common resource saturation problems, then periodically creating an archive and playing it against the expressions. For example, you may wish to create a daily performance audit (run by the <literal>cron</literal> command) to detect performance regressions.</para>
<para>For more about <command>pmie</command>, see <xref linkend="LE21414-TITLE"></xref>.</para>
</section>
<section>
<title>Using Archive Logs for Capacity Planning</title>
<para>By collecting performance archives with relatively long sampling periods, or by reducing the daily archives to produce summary logs, the capacity planner can collect the base data required for forward projections, and can estimate resource demands and explore &ldquo;what if&rdquo; scenarios by replaying data using visualization tools and the
inference engine.</para>
</section>
</section>
<section id="LE46764-PARENT">
<title id="LE46764-TITLE">Using Archive Logs with Performance  Visualization Tools</title>
<para>Most PCP tools default to real-time display of current values for performance metrics from PCP collector host(s). However, most PCP tools also have the capability to display values for performance metrics retrieved from PCP archive log(s). The following sections describe plans, steps, and general issues
involving archive logs and the PCP tools.</para>
<section>
<title>Coordination between <command>pmlogger</command> and PCP tools</title>
<para>Most commonly, a PCP tool would be invoked with the <literal>-a</literal> option to process an archive log some time after <command>pmlogger</command> had finished creating the archive. However, a tool such as <command>oview</command> that uses a Time Control dialog (see <xref linkend="LE76997-TITLE"></xref>) stops when the end of archive is reached, but could resume if more data is written to the PCP
archive log.<note><para><command>pmlogger</command> uses buffered I/O to write the archive log so that
the end of the archive may be aligned with an I/O buffer boundary, rather than with a logical archive log record. If such an archive was read by a PCP tool, it would appear truncated and might confuse the tool. These problems may be avoided by sending <command>pmlogger</command> a <literal>SIGUSR1</literal> signal, or by using the <command>flush</command> command of <command>pmlc</command> to force <command>pmlogger</command> to flush its output buffers.</para>
</note></para>
</section>
<section id="LE92914-PARENT">
<title id="LE92914-TITLE">Archive Log File Management</title>
<para>Performance Co-Pilot archive log files can occupy a great deal of disk space, and management of archive logs can be a large task in itself. The following sections provide information to assist you in PCP archive log file management.</para>
<section><title>Basename Conventions</title>
<para>When a PCP archive is created by <command>pmlogger</command>, an archive basename must be specified and several physical files are created, as shown in <xref linkend="LE76271-TITLE"></xref>.</para>
<table frame="topbot">
<title id="LE76271-TITLE">Filenames for PCP Archive Log Components (<literal>archive</literal>.<replaceable>*</replaceable>)</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="102*">
<colspec colwidth="294*">
<thead>
<row rowsep="1"><entry align="left" valign="bottom"><para>Filename</para></entry><entry align="left" valign="bottom"><para>Contents</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para><filename>archive.</filename><emphasis></emphasis><replaceable>index</replaceable></para></entry>
<entry align="left" valign="top"><para>Temporal index for rapid access to archive contents.</para></entry></row>
<row>
<entry align="left" valign="top"><para><filename>archive.</filename><replaceable>meta</replaceable></para></entry>
<entry align="left" valign="top"><para>Metadata descriptions for performance metrics and instance domains appearing in the archive.</para></entry></row>
<row>
<entry align="left" valign="top"><para><filename>archive.N</filename></para></entry>
<entry align="left" valign="top"><para>Volumes of performance metrics values, for <filename>N</filename> = 0,1,2,...</para></entry></row></tbody></tgroup></table>
</section>
<section><title>Log Volumes</title>
<para>A single PCP archive may be partitioned into a number of volumes. These volumes may expedite management of the archive; however, the metadata file and at least one volume must be present before a PCP tool can process the archive.</para>
<para>You can control the size of an archive log volume by using the <literal>-v</literal> command line option to <command>pmlogger</command>. This option specifies how large a volume should become before <command>pmlogger</command> starts a new volume. Archive log volumes retain the same base filename as other files in the archive log, and are differentiated by a numeric suffix that is incremented with each volume change. For example, you might have a log volume sequence that looks like this:</para>
<literallayout>netserver.log.0<newline>netserver.log.1<newline>netserver.log.2</literallayout>
<para>You can also cause an existing log to be closed and a new one to be opened by sending a <literal>SIGHUP</literal> signal to <command>pmlogger</command>, or by using the <command>pmlc</command> command to change the <command>pmlogger</command> instructions dynamically, without interrupting <command>pmlogger</command> operation. Complete information on log
volumes is found in the <command sectionref="1">pmlogger</command> man page.</para>
</section>
<section><title>Configuration of <command>pmlogger</command></title>
<para>The configuration files used by <command>pmlogger</command> describe which metrics are to be logged. Groups of metrics may be logged at different intervals to other groups of metrics. Two states, mandatory and advisory, also apply to each group of metrics, defining whether metrics definitely should be logged or not logged, or whether a later advisory definition may change that state.</para>
<para>The mandatory state takes precedence if it is <literal>on</literal> or <literal>off</literal>, causing any subsequent request for a change in advisory state to have no effect. If the mandatory state is <literal>maybe</literal>, then the advisory state determines if login is enabled or not.</para>
<para>The mandatory states are <literal>on</literal>, <literal>off</literal>, and <literal>maybe</literal>. The advisory states, which only affect metrics that are mandatory <literal>maybe</literal>, are <literal>on</literal> and <literal>off</literal>. Therefore, a metric that is mandatory <literal>maybe</literal> in one definition and advisory <literal>on</literal> in another definition would be logged at the advisory interval. Metrics that are not specified in the <command>pmlogger</command> configuration
file are mandatory <literal>maybe</literal> and advisory <literal>off</literal> by default and are not logged.</para>
<para>A complete description of the <command>pmlogger</command> configuration format can be found on the <command sectionref="1">pmlogger</command> man page.</para>
</section>
<section><title>PCP Archive Contents</title>
<para>Once a PCP archive log has been created, the <command>pmdumplog</command> utility may be used to display various information about the contents of the archive. For example, start with the following command:</para>
<para><literal>pmdumplog -l /var/adm/pcplog/www.sgi.com/960731</literal></para>
<para>It might produce the following output:</para>
<literallayout>Log Label (Log Format Version 1)<newline>Performance metrics from host www.sgi.com<newline>     commencing Wed Jul 31 00:16:34.941 1996<newline>     ending     Thu Aug  1 00:18:01.468 1996</literallayout>
<para>The simplest way to discover what performance metrics are contained within an archive is to use <literal>pminfo</literal>; for example:</para>
<literallayout><literal>pminfo -a /var/adm/pcplog/www.sgi.com/960731 network.mbuf</literal><newline>network.mbuf.alloc<newline>network.mbuf.typealloc<newline>network.mbuf.clustalloc<newline>network.mbuf.clustfree<newline>network.mbuf.failed<newline>network.mbuf.waited<newline>network.mbuf.drained</literallayout>
</section>
</section>
</section>
<section id="Z930642977sdc">
<title>Other Archive Logging Features and Services</title>
<para>Other archive logging features and services include PCP archive folios, manipulating archive logs, primary logger, and using <command>pmlc</command>.</para>
<section id="LE73509-PARENT">
<title id="LE73509-TITLE">PCP  Archive Folios</title>
<para>A collection of one or more PCP archive logs may be combined with
a control file to produce a PCP archive folio. Archive folios are created using either <literal>mkaf</literal> or the interactive record mode services of various PCP GUI monitoring tools.</para>
<itemizedlist>
<listitem><para>Checking the integrity of the archives in the folio.</para>
</listitem>
<listitem><para>Displaying information about the component archives.</para>
</listitem>
<listitem><para>Executing PCP tools with their source of performance metrics assigned concurrently to all of the component archives (where the tool supports this), or serially executing the PCP tool once per component archive.</para>
</listitem>
<listitem><para>If the folio was created by a single PCP monitoring tool, replaying all of the archives in the folio with that monitoring tool.</para>
</listitem>
<listitem><para>Restricting the processing to particular archives, or the archives associated with particular hosts.</para>
</listitem></itemizedlist>
</section>
<section>
<title>Using <command>pmlc</command></title>
<para>You may tailor <command>pmlogger</command> dynamically with the <command>pmlc</command> command. Normally, the <command>pmlogger</command> configuration is read at startup. If you choose to modify the <filename>config</filename> file to change the parameters
under which <command>pmlogger</command> operates, you must stop and restart the program for your changes to have effect. Alternatively, you may change parameters whenever required by using the <command>pmlc</command> interface.</para>
<para>To run the <command>pmlc</command> tool, enter:</para>
<literallayout><userinput>pmlc</userinput></literallayout>
<para>By default, <command>pmlc</command> acts on the primary instance of <command>pmlogger</command> on the current host. See the <command sectionref="1">pmlc</command> man page for a description of command line options. When it is invoked, <command>pmlc</command> presents you with a prompt:</para>
<literallayout>pmlc&gt; </literallayout>
<para>You may obtain a listing of the available commands by entering a question mark (?) and pressing Enter. You see output similar to the following:</para>
<literallayout width="wide">     show loggers [@&lt;host&gt;]           display &lt;pid&gt;s of running pmloggers<newline>     connect _logger_id [@&lt;host&gt;]     connect to designated pmlogger<newline>     status                           information about connected pmlogger<newline>     query metric-list                show logging state of metrics<newline>     new volume                       start a new log volume<newline>     flush                            flush the log buffers to disk<newline>     log { mandatory | advisory } on &lt;interval&gt; _metric-list<newline>     log { mandatory | advisory } off _metric-list<newline>     log mandatory maybe _metric-list<newline>     timezone local|logger|'&lt;timezone&gt;' change reporting timezone<newline>     help                               print this help message<newline>     quit                               exit from pmlc<newline>     _logger_id   is  primary | &lt;pid&gt; | port &lt;n&gt;<newline>     _metric-list is  _metric-spec | { _metric-spec ... }<newline>     _metric-spec is  &lt;metric-name&gt; | &lt;metric-name&gt; [ &lt;instance&gt; ... ]</literallayout>
<para>Here is an example:</para>
<literallayout><userinput>pmlc</userinput><newline>pmlc&gt; <userinput>show loggers @babylon</userinput><newline>The following pmloggers are running on babylon:<newline>       primary (1892)<newline>pmlc&gt; <userinput>connect 1892 @babylon</userinput><newline>pmlc&gt; <userinput>log advisory on 2 secs disk.dev.read</userinput><newline>pmlc&gt; <userinput>query disk.dev</userinput><newline>disk.dev.read<newline>       adv  on  nl       5 min  [131073 or &ldquo;dks0d1&rdquo;]<newline>       adv  on  nl       5 min  [131074 or &ldquo;dks0d2&rdquo;]<newline>pmlc&gt; <userinput>quit</userinput></literallayout>
<note><para>Any changes to the set of logged metrics made via <command>pmlc</command> are not saved, and are lost the next time <command>pmlogger</command> is started with the same configuration file. Permanent changes are made by modifying the <command>pmlogger</command> configuration file(s).</para>
</note>
<para>Refer to the <command sectionref="1">pmlc</command> and <command sectionref="1">pmlogger</command> man pages for complete details.</para>
</section>
</section>
<section id="LE80113-PARENT">
<title id="LE80113-TITLE">Archive Logging Troubleshooting</title>
<para>The following issues concern the creation and use of logs using <command>pmlogger</command>.</para>
<section>
<title><command>pmlogger</command> Cannot Write Log</title>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>The <command>pmlogger</command> utility does not start, and you see this message:</para>
<literallayout><literal>_pmLogNewFile: &ldquo;foo.index&rdquo; already exists, not over-written</literal></literallayout>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>Archive logs are considered sufficiently precious that <command>pmlogger</command> does not empty or overwrite an existing set of archive log files. The log named <filename>foo</filename> actually consists of the physical file <filename>foo.index</filename>, <filename>foo.meta</filename>, and at least one file <filename>foo.N</filename>, where <filename>N</filename> is in the range 0, 1, 2, 3, and so on.</para>
<para>A message similar to the one above is produced when a new <command>pmlogger</command> instance encounters one of these files already in existence.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>If you are sure, remove all of the parts of the archive log. For example, use the following command:<literallayout><userinput>rm -f foo.*</userinput></literallayout></para>
<para>Then rerun <command>pmlogger</command>.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Cannot Find Log</title>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>The <literal>pmdumplog</literal> utility, or any tool that can read an archive log, displays this message:</para>
<literallayout width="standard"><literal>Cannot open archive mylog: No such file or directory</literal></literallayout>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>An archive consists of at least three physical files. If the base name for the archive is <filename>mylog</filename>, then the archive actually consists of the physical files <filename>mylog.index</filename>, <filename>mylog.meta</filename>, and at least one file<filename>&ensp;mylog.N</filename>, where <filename>N</filename> is in the range 0, 1, 2, 3, and so on.</para>
<para>The above message is produced if one or more of the files is missing.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>Use this command to check which files the utility is trying to open:</para>
<para><literallayout><userinput>ls mylog.*</userinput></literallayout></para>
<para>Turn on the internal debug flag <literal>DBG_TRACE_LOG</literal> (<literal>-D</literal> 128) to see which files are being inspected by the <literal>_pmOpenLog</literal> routine as shown in the following example:<literallayout><userinput>pmdumplog -D 128 -l mylog</userinput></literallayout></para>
<para>Locate the missing files and move them all to the same directory, or remove all of the files that are part of the archive, and recreate the archive log.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Identifying an Active <command>pmlogger</command> Process</title>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>You have a PCP archive log that is demonstrably growing, but do not know the identify of the associated <command>pmlogger</command> process.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>The PID is not obvious from the log, or the archive name may not be obvious from the output of the <command>ps</command> command.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>If the archive basename is <filename>foo</filename>, run the following commands:</para>
<literallayout><userinput>pmdumplog -l foo</userinput><newline><literal>Log Label (Log Format Version 1)</literal><newline>Performance metrics from host gonzo<newline>     commencing Wed Aug  7 00:10:09.214 1996<newline>     ending     Wed Aug  7 16:10:09.155 1996<newline><userinput>pminfo -a foo -f pmcd.pmlogger</userinput>&ensp;<newline>pmcd.pmlogger.host<newline>     inst [10728 or "10728"] value "gonzo.melbourne.sgi.com"<newline>pmcd.pmlogger.port<newline>     inst [10728 or "10728"] value 4331<newline>pmcd.pmlogger.archive<newline>     inst [10728 or "10728"] value "<replaceable>/usr/var/adm/pcplog/gonzo/foo</replaceable>"</literallayout>
<para>All of the information describing the creator of the archive is revealed and, in particular, the instance identifier for the <command>pmcd</command> metrics (<literal>10728</literal> in the example above) is the PID of the <command>pmlogger</command> instance, which may be used to control the process via <command>pmlc</command>.</para>
</listitem></deflistentry>
</deflist>
</section>
<section>
<title>Illegal Label Record</title>
<deflist>
<deflistentry>
<term>Symptom:</term>
<listitem><para>PCP tools report:</para>
<literallayout width="wide">Illegal label record at start of PCP archive log file.</literallayout>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>Either you are attempting to read a Version 2 archive with a PCP 1.<replaceable>x</replaceable> tool, or the archive log has become corrupted.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>By default, <command>pmlogger</command> in PCP release 2.0 and later generates Version 2 archives that PCP 1.0 to 1.3 tools cannot interpret. If you must use older tools, pass the <literal>-V1</literal> option to <command>pmlogger</command>, forcing it to generate Version 1 archives.</para></listitem></deflistentry>
</deflist>
</section>
<section>
<title>Empty Archive Log Files or <command>pmlogger</command> Exits Immediately</title>
<deflist id="Z930351569sdc">
<deflistentry>
<term>Symptom:</term>
<listitem><para>Archive log files are zero size, requested metrics are not being logged, or <command>pmlogger</command> exits immediately with no error messages.</para>
</listitem></deflistentry>
<deflistentry>
<term>Cause:</term>
<listitem><para>Either <command>pmlogger</command> encountered errors in the configuration file or has not flushed its output buffers yet or some (or all) metrics specified in the <command>pmlogger</command> configuration file have had their state changed to advisory <literal>off</literal> or mandatory <literal>off</literal> via <command>pmlc</command>. It is also possible that the logging interval specified in the <command>pmlogger</command> configuration file for some or all of the metrics is longer
than the period of time you have been waiting since <command>pmlogger</command> started.</para>
</listitem></deflistentry>
<deflistentry>
<term>Resolution:</term>
<listitem><para>If <command>pmlogger</command> exits immediately with no error messages, check the <filename>pmlogger.log</filename> file in the directory <command>pmlogger</command> was started in for any error messages. If <command>pmlogger</command> has not yet flushed its buffers, enter the following command:<literallayout>killall -SIGUSR1 pmlogger</literallayout></para>
<para>Otherwise, use the <literal>status</literal> command for <command>pmlc</command> to interrogate the internal <command>pmlogger</command> state of specific metrics.</para>
</listitem></deflistentry>
</deflist>
<para></para>
</section>
</section>
</chapter>


<appendix id="LE65325-PARENT">
<title id="LE65325-TITLE">Acronyms</title>
<para>This appendix provides a list of the acronyms used in the Performance Co-Pilot (PCP) documentation, help cards, man pages, and user interface.</para>
<table frame="topbot">
<title id="LE64835-TITLE">Performance Co-Pilot Acronyms and Their Meanings</title>
<tgroup cols="2" colsep="0" rowsep="0">
<colspec colwidth="120*">
<colspec colwidth="276*">
<thead>
<row rowsep="1"><entry align="left" valign="bottom"><para>Acronym</para></entry><entry align="left" valign="bottom"><para>Meaning</para></entry></row></thead>
<tbody>
<row>
<entry align="left" valign="top"><para>API</para></entry>
<entry align="left" valign="top"><para>Application Programming Interface</para></entry></row>
<row>
<entry align="left" valign="top"><para>DBMS</para></entry>
<entry align="left" valign="top"><para>Database Management System</para></entry></row>
<row>
<entry align="left" valign="top"><para>DNS</para></entry>
<entry align="left" valign="top"><para>Domain Name Service</para></entry></row>
<row>
<entry align="left" valign="top"><para> DSO</para></entry>
<entry align="left" valign="top"><para>Dynamic Shared Object</para></entry></row>
<row>
<entry align="left" valign="top"><para> IP</para></entry>
<entry align="left" valign="top"><para>Internet Protocol</para></entry></row>
<row>
<entry align="left" valign="top"><para> PCP</para></entry>
<entry align="left" valign="top"><para>Performance Co-Pilot</para></entry></row>
<row>
<entry align="left" valign="top"><para> PDU</para></entry>
<entry align="left" valign="top"><para>Protocol Data Unit</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMAPI</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Application Programming Interface</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMCD</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Collection Daemon</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMCS</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Collection Subsystem</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMD</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Domain</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMDA</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Domain Agent</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMID</para></entry>
<entry align="left" valign="top"><para>Performance Metric Identifier</para></entry></row>
<row>
<entry align="left" valign="top"><para> PMNS</para></entry>
<entry align="left" valign="top"><para>Performance Metrics Name Space</para></entry></row>
<row>
<entry align="left" valign="top"><para> TCP/IP</para></entry>
<entry align="left" valign="top"><para>Transmission Control Protocol/Internet Protocol</para></entry></row></tbody></tgroup></table>
</appendix>


</book>
</docbook>
