<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="10"><TITLE><XREFTARGET ID="30192">Dialogs</TITLE><PARAGRAPH>Dialogs are transient windows that your application uses either to communicate something important to the user (for example, that a pending action could cause some data to be lost), or to obtain a specific piece of information from the user (for example, which file to open). Users interact quickly with dialogs and then dismiss them. This chapter covers dialogs in the following sections:<INDEXTARGET ID="ch10.dialogs1"><!-- POSTPROCESSDATA: ch10.dialogs1|dialogs --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="52846" TYPE="TITLE">&ldquo;Types and Modes of Dialogs&rdquo;</XREF> discusses the standard types of dialogs, when to use them, and whether they should be modal or not (that is, whether they should prevent the user from doing anything else until the dialog is dismissed).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="27264" TYPE="TITLE">&ldquo;Designing Dialogs&rdquo;</XREF> discusses general dialog design issues&mdash;such as the dialog window decorations, the layout of dialog information, and what the standard actions are (in the form of push buttons). It also covers specific design and content issues for the various types of dialogs listed in the previous section.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="91359" TYPE="TITLE">&ldquo;Invoking Dialogs&rdquo;</XREF> describes the most common situations that require dialogs and which types of dialogs to use in them. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="52846">Types and Modes of Dialogs</TITLE><PARAGRAPH>Dialogs are used to give information to the user or to get information from the user; once they've served their purpose, they go away. Dialogs that give information to the user are instigated by the application; these application-generated dialogs present important messages for the user's immediate attention. Dialogs whose purpose is to get information from the user are displayed as the result of a user action (such as pushing a button or selecting a menu entry). An example of such a user-requested dialog occurs when the user selects &ldquo;Open...&rdquo; from the File menu; the application should display the IRIX Interactive Desktop File Selection dialog so that the user can specify a file to open.<INDEXTARGET ID="ch10.dialogs2"><!-- POSTPROCESSDATA: ch10.dialogs2|dialogs:types --></PARAGRAPH>
<PARAGRAPH>The <DOCTITLE>OSF/Motif Style Guide</DOCTITLE> defines several types of application-generated and user-requested dialogs. The most common of these are listed in <XREF IDREF="43029" TYPE="TABLE">Table&nbsp;10-1</XREF>, along with a brief description of when each might be used in an application and whether they should be modal or not. <XREF IDREF="40008" TYPE="GRAPHIC">Figure&nbsp;10-1</XREF> shows each of the standard OSF/Motif dialogs with the IRIX Interactive Desktop look, and <XREF IDREF="64835" TYPE="GRAPHIC">Figure&nbsp;10-2</XREF> shows the IRIX Interactive Desktop File Selection dialog. Each of these standard dialogs are discussed in more detail in the rest of this chapter and in their reference pages in Chapter 9 of the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>. Dialog modes are defined and discussed in the next section (<XREF IDREF="54825" TYPE="TITLE">&ldquo;Dialog Modes&rdquo;</XREF>). </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="10-1"><PREFIX>Table 10-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="43029">Types of Dialogs, Their Modality, and When to Use Them</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Type of Dialog</PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>When to Use It</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Modality</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Prompt<INDEXTARGET ID="ch10.dialogs3"><!-- POSTPROCESSDATA: ch10.dialogs3|dialogs:promptprompt dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>To ask users for specific information.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Modeless or modal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Error <INDEXTARGET ID="ch10.dialogs4"><!-- POSTPROCESSDATA: ch10.dialogs4|dialogs:errorerror dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>To tell users about an error they've made in interacting with your application.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Application-modal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Warning <INDEXTARGET ID="ch10.dialogs5"><!-- POSTPROCESSDATA: ch10.dialogs5|dialogs:warningwarning dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>When there's an action pending that will cause users to lose data.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Application-modal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Question <INDEXTARGET ID="ch10.dialogs6"><!-- POSTPROCESSDATA: ch10.dialogs6|dialogs:questionquestion dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>To ask users a specific question that they must respond to before continuing to interact 
with the application. Note that although Warning dialogs can also ask users a question, 
that question relates to a pending action that's destructive.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Application-modal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Working <INDEXTARGET ID="ch10.dialogs7"><!-- POSTPROCESSDATA: ch10.dialogs7|dialogs:workingworking dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>When an operation takes more than 5 seconds to complete. This dialog gives users the 
chance to cancel or stop the operation. Note that you might have to choose one of several 
different platforms as your standard for estimating times of operations. Also note that 
the pointer shape might need to change to the watch if the Working dialog is modal; see 
<XREF IDREF="74495" TYPE="TITLE">&ldquo;Standard Pointer Shapes and Colors&rdquo; in Chapter&nbsp;11</XREF>.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Modeless or modal</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>Information <INDEXTARGET ID="ch10.dialogs8"><!-- POSTPROCESSDATA: ch10.dialogs8|dialogs:informationinformation dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>To give users information that's of immediate importance. Use this type of dialog 
sparingly; use a status area in one of your primary application windows for the less 
important messages (see <XREF IDREF="30855" TYPE="TITLE">&ldquo;Status Areas in Primary Windows&rdquo; in Chapter&nbsp;6</XREF>).</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Modeless</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="60"><PARAGRAPH>File Selection<INDEXTARGET ID="ch10.dialogs9"><!-- POSTPROCESSDATA: ch10.dialogs9|dialogs:file selectionfile selection dialogs --></PARAGRAPH>
</CELL>
<CELL LEFT="65" WIDTH="351"><PARAGRAPH>To allow users to navigate the file hierarchy and choose a file. Note that the IRIX 
Interactive Desktop File Selection dialog, which is shown in <XREF IDREF="64835" TYPE="GRAPHIC">Figure&nbsp;10-2</XREF>, is slightly 
different from the standard OSF/Motif File Selection dialog.</PARAGRAPH>
</CELL>
<CELL LEFT="425" WIDTH="82"><PARAGRAPH>Modeless</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<!-- RASTERCONVERT: ch10.dialogs.cgm9 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-9.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-1"><PREFIX>Figure 10-1 </PREFIX><XREFTARGET ID="40008">Sample Prompt, Error, Warning, Working, Question and Information Dialogs</CAPTION>
</FIGURE>
<!-- RASTERCONVERT: ch10.dialogs.cgm2 -->
<FIGURE><GRAPHIC FILE="ch10.dialogs-2.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-2"><PREFIX>Figure 10-2 </PREFIX><XREFTARGET ID="64835">The IRIX Interactive Desktop File Selection Dialog</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Both the IRIX Interactive Desktop and IRIS IM File Selection dialogs provide lists of the contents of the current directory and a text input field; the IRIX Interactive Desktop list contains both the files and the subdirectories of the current directory, while the IRIS IM list presents these in two separate lists. The IRIX Interactive Desktop File Selection dialog also allows users to navigate through the file hierarchy using the drop pocket, path navigation bar, and history button. As discussed in detail in <XREF IDREF="43846" TYPE="TITLE">&ldquo;File Finder&rdquo; in Chapter&nbsp;9</XREF>, these components allow users to drop file or directory icons in the drop pocket, traverse to ancestors of the current directory, or return to any directory visited previously. In addition, the IRIX Interactive Desktop dialog presents a Filter button (rather than the IRIS IM text input field), which brings up a dialog that allows the user to enter the filter string.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="54825">Dialog Modes</TITLE><PARAGRAPH>As listed in <INDEXTARGET ID="ch10.dialogs10"><!-- POSTPROCESSDATA: ch10.dialogs10|dialogs:modesmodes:dialogs --><XREF IDREF="43029" TYPE="TABLE">Table&nbsp;10-1</XREF>, dialogs can have different modes whereby the application can require the user to respond to the dialog before continuing with other actions in the application. The following are the most commonly used modes defined by OSF/Motif:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>Modeless<INDEXTARGET ID="ch10.dialogs11"><!-- POSTPROCESSDATA: ch10.dialogs11|modeless dialogs --></HANGITEM>
<HANGBODY><PARAGRAPH>Modeless dialogs, such as the IRIX Interactive Desktop File Selection dialog, don't require the user to respond before continuing. The user can interact with any other window associated with the application and with any other application.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>Primary-modal<INDEXTARGET ID="ch10.dialogs12"><!-- POSTPROCESSDATA: ch10.dialogs12|primary-modal dialogs --></HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Primary-modal dialogs require the user to respond to the dialog before continuing to interact with the dialog's parent window or any other ancestor window. Note that these ancestor windows can't receive mouse or keyboard input until the user has responded to the dialog. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>Application-modal<INDEXTARGET ID="ch10.dialogs13"><!-- POSTPROCESSDATA: ch10.dialogs13|application-modal dialogs --></HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Application-modal dialogs require the user to respond to the dialog before continuing to interact with the application. Note that none of the application's windows (except the dialog) can receive mouse or keyboard input until the user has responded to the dialog. An example of this type is a dialog that asks the user for a root password.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>In addition to these modes, OSF/Motif defines a system-modal dialog that requires the user to interact with the dialog before doing anything else on the system. You shouldn't use system-modal dialogs because your application should never need to restrict users' activities to this degree.<INDEXTARGET ID="ch10.dialogs14"><!-- POSTPROCESSDATA: ch10.dialogs14|system-modal dialogs --></PARAGRAPH>
<PARAGRAPH>Modal dialogs typically show static information, but modeless dialogs should display dynamically updated information as the current state changes. Otherwise, the dialog becomes useless. For example, the IRIX Interactive Desktop File Selection dialog dynamically updates itself if a user changes the file hierarchy while it's displayed; if it didn't, the user could select a file that no longer exists, for example.</PARAGRAPH>
<PARAGRAPH>As listed in <XREF IDREF="43029" TYPE="TABLE">Table&nbsp;10-1</XREF>, File Selection and Information dialogs are modeless. Error, Warning, and Question dialogs are application-modal. Working and Prompt dialogs can be modeless or modal, depending on what they are being used for in the application. For example, the desktop displays a Working dialog when you're copying a large directory from a remote system using a directory view, but you can still do other things in the Directory View while the copy is in progress. In other situations, you might not want to allow user input until your application has completed a particular operation. For example, when a user opens a large folder in MediaMail, no other actions can be performed in that window until the folder has been read in completely. See <XREF IDREF="17857" TYPE="TITLE">&ldquo;Working Dialogs&rdquo;</XREF> for details on the design of Working dialogs.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Guidelines for Using the Various Types and Modes of Dialogs</TITLE><PARAGRAPH><BOLD>When choosing the type and mode of a dialog . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a Prompt dialog to ask users for specific information. This dialog can be modeless or modal.</CHECKOFFITEM>
<CHECKOFFITEM>Use an application-modal Error dialog to tell users about an error they've made in interacting with your application.</CHECKOFFITEM>
<CHECKOFFITEM>Use an application-modal Warning dialog when there's an action pending that will cause users to lose data.</CHECKOFFITEM>
<CHECKOFFITEM>Use an application-modal Question dialog to ask users a specific question that they must respond to before continuing to interact with the application. </CHECKOFFITEM>
<CHECKOFFITEM>Use a Working dialog when an operation takes more than 5 seconds to complete. This dialog can be modeless or modal.</CHECKOFFITEM>
<CHECKOFFITEM>Use a modeless Information dialog to give users information that's of immediate importance. Use this type of dialog sparingly.</CHECKOFFITEM>
<CHECKOFFITEM>Use the modeless IRIX Interactive Desktop File Selection dialog to allow users to navigate the file hierarchy and choose a file. </CHECKOFFITEM>
<CHECKOFFITEM>Don't use system-modal dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Use modal dialogs to show static information, and update modeless dialogs dynamically as the current state changes. </CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="27264">Designing Dialogs</TITLE><PARAGRAPH>This section discusses general guidelines that apply to the design of all dialogs&mdash;for example, dialog window decorations, size, information displayed when they first come up, and the layout of information. It also describes the standard actions (in the form of pushbuttons) that dialogs should contain. Finally, this section covers guidelines for the content of the specific types of dialogs.<INDEXTARGET ID="ch10.dialogs15"><!-- POSTPROCESSDATA: ch10.dialogs15|dialogs:designing --></PARAGRAPH>
<PARAGRAPH>Keep in mind that as discussed in <XREF IDREF="71076" TYPE="TITLE">Chapter&nbsp;6, &ldquo;Application Windows,&rdquo;</XREF> every dialog is associated with a specific primary or support window (its parent). The parent window should be visible and mapped to the screen so that dialogs work properly across Desks, as noted in <XREF IDREF="55393" TYPE="TITLE">&ldquo;Desks&rdquo; in Chapter&nbsp;3</XREF>.</PARAGRAPH>
<PARAGRAPH>This section covers:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="95730" TYPE="TITLE">&ldquo;Decorations, Initial State, and Layout of Dialogs&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="32754" TYPE="TITLE">&ldquo;Standard Dialog Actions&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="12402" TYPE="TITLE">&ldquo;Content of Specific Types of Dialogs&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="95730">Decorations, Initial State, and Layout of Dialogs</TITLE><PARAGRAPH>All dialogs should have the window decorations and Window menu entries listed in <INDEXTARGET ID="ch10.dialogs16"><!-- POSTPROCESSDATA: ch10.dialogs16|dialogs:decorationsdecorations:dialogs --><INDEXTARGET ID="ch10.dialogs17"><!-- POSTPROCESSDATA: ch10.dialogs17|dialogs:menu (in title bar)menus:window (in title bar) --><XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF> and described in <XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo; in Chapter&nbsp;3</XREF>. These decorations and menu entries allow the user to:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Move a dialog using the title bar. Since 4Dwm doesn't guarantee that a dialog will be placed in a specific location, a user may need to move the dialog to access information in order to figure out the appropriate response to the dialog. Note that a dialog's title bar should follow the guidelines discussed in <XREF IDREF="15724" TYPE="TITLE">&ldquo;Rules for Labeling the Title Bar in Windows Other Than Main&rdquo; in Chapter&nbsp;3</XREF>. A proper label allows users to quickly identify the type of dialog and the application to which it belongs.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Resize a dialog that contains resizable components such as text input fields and scrolling lists. See <XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo;</XREF> and <XREF IDREF="32339" TYPE="TITLE">&ldquo;Window Size&rdquo;</XREF> in <XREF IDREF="32339" TYPE="TITLE">Chapter&nbsp;3</XREF> for specific guidelines on when a dialog should be resizable.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Note that these window decorations and menu entries don't include operations either for minimizing a dialog (since dialogs can't be minimized independently of their parent window) or for exiting an application from a dialog.</PARAGRAPH>
<PARAGRAPH>When a dialog is opened, its size, placement, keyboard focus, and information displayed should follow these guidelines:<INDEXTARGET ID="ch10.dialogs18"><!-- POSTPROCESSDATA: ch10.dialogs18|dialogs:placementplacement:dialogdialogs:sizesize:dialogs --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The default size should allow all of the components and information to be displayed in their entirety. Users shouldn't have to resize a dialog to see its contents. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The dialog should be placed automatically on the screen&mdash;either near (but not overlapping) any related information in the parent window, or in the center of the parent window (if the contents of the dialog aren't related to the contents of the parent window). For more information on choosing a screen location, see <XREF IDREF="11715" TYPE="TITLE">&ldquo;Window Placement&rdquo; in Chapter&nbsp;3</XREF>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The keyboard focus should be in the field with which the user is most likely to want to interact. For example, if there are text input fields, the focus should probably be in one of those fields. In general, dialogs should follow the keyboard focus and keyboard navigation guidelines discussed in <INDEXTARGET ID="ch10.dialogs19"><!-- POSTPROCESSDATA: ch10.dialogs19|keyboard focus:dialogs --><XREF IDREF="86870" TYPE="TITLE">&ldquo;Keyboard Focus Policy and Navigation Within a Window&rdquo; in Chapter&nbsp;7</XREF>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The information being displayed in the dialog should always match the current state of the application. If the dialog is modeless, this information should be dynamically updated, as described in <XREF IDREF="54825" TYPE="TITLE">&ldquo;Dialog Modes&rdquo;</XREF>. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>All dialogs you create should include a response area that contains standard dialog actions (pushbuttons) tailored to the type and purpose of the dialog. The next section (<XREF IDREF="32754" TYPE="TITLE">&ldquo;Standard Dialog Actions&rdquo;</XREF>) discusses what the appropriate buttons are for this area. In addition to the response area, Prompt dialogs should include an input area that consists of whatever controls are necessary for selecting objects or setting application parameters. Instead of this input area, Error, Warning, Question, Working, and Information dialogs should include a message area, as shown in <XREF IDREF="44320" TYPE="GRAPHIC">Figure&nbsp;10-3</XREF>. The message area consists of an icon and text region that displays the dialog's message. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-3"><PREFIX>Figure 10-3 </PREFIX><XREFTARGET ID="44320">Warning Dialog Layout</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Don't include menu bars in dialogs; they're intended for short, quick user input rather than for accessing lots of functionality. Also, dialogs don't contain secondary work areas; if you need additional work areas, use a support window instead. (See <XREF IDREF="30905" TYPE="TITLE">&ldquo;Support Windows&rdquo; in Chapter&nbsp;6</XREF> for information.) Also note that the pre-designed IRIX Interactive Desktop File Selection dialog has a somewhat different set of elements and layout than the other types of dialogs. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32754">Standard Dialog Actions</TITLE><PARAGRAPH>All dialogs include a response area that contains a horizontal row of pushbuttons across the bottom of the dialog. The standard dialog pushbuttons (or actions) are Yes, No, OK, Close, Apply, Retry, Stop, Pause, Resume, Clear, Reset, Cancel, and Help, and they should appear in that order. Your dialogs will typically contain some subset of these buttons and possibly additional ones; the additional buttons should appear after the OK and Apply buttons but before the Cancel and Help buttons. <INDEXTARGET ID="ch10.dialogs20"><!-- POSTPROCESSDATA: ch10.dialogs20|dialogs:actions --><INDEXTARGET ID="ch10.dialogs21"><!-- POSTPROCESSDATA: ch10.dialogs21|dialogs:actions:standard --></PARAGRAPH>
<PARAGRAPH>All of these standard actions except Clear are defined in the reference page for DialogBox in the<DOCTITLE>&space;OSF/Motif Style Guide</DOCTITLE>. Clear, which is used in IRIX Interactive Desktop applications, should clear all of the text input fields in the dialog. Note that this differs from the &ldquo;Reset&rdquo; action, which resets all controls in a dialog (not just the text fields) to default values.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="59772">Choosing Specific Actions for Your Dialogs</TITLE><PARAGRAPH>When choosing which of the standard actions to include in your specific dialog, use the guidelines listed in the <INDEXTARGET ID="ch10.dialogs22"><!-- POSTPROCESSDATA: ch10.dialogs22|dialogs:actions:choosing --><DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, Sections 6.2.1.7 and 6.2.4.2, with the following additions and exceptions:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Most dialogs should have a Help button. If the situation is stated clearly, you might not need a Help button.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Avoid using both OK and Apply on the same dialog because it often confuses users. Consider using both when the number of users who will want to make one set of changes, apply them, and close the dialog is equal to the number of users who will want to make and apply multiple sets of changes before closing the dialog.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>To decide between OK and Apply, determine whether users are more likely to use the dialog to make one set of changes at a time (if so, use OK) or whether they're more likely to want to make and apply changes repeatedly before closing the dialog (in this case, use Apply).</PARAGRAPH>
<PARAGRAPH>If you can't decide which of these scenarios best describes your users, use Apply rather than OK. With Apply, users who want to make a single set of changes must press an extra button (Apply, then Close, instead of just OK), which is at most a minor annoyance. On the other hand, using OK by itself forces users who want to make several sets of changes to re-launch the dialog for each set of changes, which can be annoying. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Any dialog that has an Apply button should also include a Cancel/Close button. When the dialog is opened, the button is labelled &ldquo;Cancel.&rdquo; After the user applies some irreversible change, the label on the button changes to &ldquo;Close&rdquo; to inform users that the action is irreversible. This button doesn't indicate whether or not there are pending changes to be applied.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Working dialogs should have a Cancel button that allows users to cancel an operation and return the application to the state it was in before the operation began. If you can't return your application to the pre-operation state, you should still allow users to stop the operation at the current point in the processing. It's even better to allow the user a choice of actions&mdash;for example, Pause (with the option of later resuming) and Cancel. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>By default, pressing the &lt;Esc> key within a dialog is equivalent to clicking a Cancel button. This is true even if the dialog doesn't have an explicit Cancel button.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Choosing Default Actions</TITLE><PARAGRAPH>For many dialogs, you should choose one of the actions in the response area to be the default action. By default, the default pushbutton is visually distinguished from the other buttons (for example, the OK button in <INDEXTARGET ID="ch10.dialogs23"><!-- POSTPROCESSDATA: ch10.dialogs23|dialogs:actions:default --><XREF IDREF="44320" TYPE="GRAPHIC">Figure&nbsp;10-3</XREF>), and it's activated when the user presses the &lt;Enter> key while the dialog is the active window. If other buttons in the response area can accept keyboard focus, they become the default button when they have the focus&mdash;that is, they're visually distinct from the other buttons, and pressing &lt;Enter> causes them to be activated. When none of these other buttons has the keyboard focus, the default button status returns to the original default button. </PARAGRAPH>
<PARAGRAPH>The following bullets describe common default actions for certain types of dialogs:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The default action for Information dialogs, which typically have buttons only for OK and Help, is OK.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The default action for Question, Warning, Error, and any other dialogs that contain buttons but no text fields is the response that users are most likely to select. For example, a Warning dialog that asks, &ldquo;Do you really want to do this destructive action?&rdquo; should have the affirmative response as the default action. Note that as discussed in the next section, <XREF IDREF="98282" TYPE="TITLE">&ldquo;Labeling Dialog Buttons,&rdquo;</XREF> make sure that each button name clearly indicates the specific action that will occur if that button is clicked.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The default action for dialogs that have only one text field and no other controls than the buttons in the response area (such as the File Selection and Prompt dialogs) is the action that the user is most likely to select after entering a text string.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Dialogs that contain multiple text fields should <ITALICS>not</ITALICS> have a default action since many applications require users to press &lt;Enter> after entering data in a text field. Users tend to press &lt;Enter> regardless of whether they have to, and they expect that action to ensure that their data is entered; they don't expect that action to invoke the dialog's default action.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="98282">Labeling Dialog Buttons</TITLE><PARAGRAPH>When labeling dialog buttons, use the OSF/Motif standard names except in the following cases:<INDEXTARGET ID="ch10.dialogs24"><!-- POSTPROCESSDATA: ch10.dialogs24|dialogs:button labelslabels:dialog buttons --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Replace the &ldquo;Yes&rdquo; and &ldquo;No&rdquo; labels in Warning and Question dialogs with button names that clearly indicate the specific action that will occur if the button is clicked. The buttons replacing Yes and No perform the action and close the dialog. As an example, consider the Warning dialog shown in <XREF IDREF="52310" TYPE="GRAPHIC">Figure&nbsp;10-4</XREF>. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm5 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-5.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-4"><PREFIX>Figure 10-4 </PREFIX><XREFTARGET ID="52310">Warning Dialog With Save, Discard, and Cancel Buttons</CAPTION>
</FIGURE>
</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Replace the &ldquo;OK&rdquo; or &ldquo;Apply&rdquo; labels in Prompt or Warning dialogs with button names that clearly indicate the specific action that will occur if the button is clicked (for example, Open, Save, Print). Don't replace these names when the button is used for more than one purpose&mdash;for example, when the file browser is used to specify a name for a new file, the OK button can be used to both name the file and display the contents of a directory.</PARAGRAPH>
<PARAGRAPH>Also don't replace either of these names on those rare instances when OK and Apply are used together in a Prompt dialog.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12402">Content of Specific Types of Dialogs</TITLE><PARAGRAPH>In addition to the general guidelines discussed in the two previous sections (<XREF IDREF="95730" TYPE="TITLE">&ldquo;Decorations, Initial State, and Layout of Dialogs&rdquo;</XREF> and <XREF IDREF="32754" TYPE="TITLE">&ldquo;Standard Dialog Actions&rdquo;</XREF>), follow the more specific guidelines for the different types of dialogs presented in this section. (The dialog types are defined in <XREF IDREF="43029" TYPE="TABLE">Table&nbsp;10-1</XREF>.)</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Prompt Dialogs</TITLE><PARAGRAPH>Prompt dialogs use a variety of controls to collect information from the user, including text input fields, a list of all possible choices, radio buttons, checkboxes, and option menus. Try to collect this information in related chunks&mdash;that is, avoid collecting unrelated pieces of information in the same dialog, and don't launch multiple dialog boxes one right after the other to collect several pieces of information if these pieces are frequently collected at the same time.<INDEXTARGET ID="ch10.dialogs25"><!-- POSTPROCESSDATA: ch10.dialogs25|dialogs:promptprompt dialogs --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Error Dialogs</TITLE><PARAGRAPH>All Error dialogs should include a description of the error, step-by-step instructions for how to recover from it (or a pointer to information on how to recover from it if the instructions are long), and a pointer to more information about why the error might have occurred. If the error involves a specific entity (for instance, a file, user, or host), name the entity in the error message, as shown in <INDEXTARGET ID="ch10.dialogs26"><!-- POSTPROCESSDATA: ch10.dialogs26|dialogs:errorerror dialogs --><XREF IDREF="17440" TYPE="GRAPHIC">Figure&nbsp;10-5</XREF>. Invoke Error dialogs only when they're directly relevant to the user; for example, don't tell the user that the printer is out of paper until the user has a job in the queue. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm4 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-4.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-5"><PREFIX>Figure 10-5 </PREFIX><XREFTARGET ID="17440">Error Dialog With Specific Entity</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Warning Dialogs</TITLE><PARAGRAPH>Warning dialogs should clearly state what data is likely to be lost and why, and give the user a chance to cancel the action.<INDEXTARGET ID="ch10.dialogs27"><!-- POSTPROCESSDATA: ch10.dialogs27|dialogs:warningwarning dialogs --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Question Dialogs</TITLE><PARAGRAPH>Limit your use of Question dialogs to those situations where the user couldn't have provided the information in advance. Also, don't use Question dialogs for questions that relate to a pending destructive action&mdash;for these cases, use Warning dialogs instead.<INDEXTARGET ID="ch10.dialogs28"><!-- POSTPROCESSDATA: ch10.dialogs28|dialogs:questionquestion dialogs --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17857">Working Dialogs</TITLE><PARAGRAPH>For Working dialogs, use the IRIX Interactive Desktop scale to dynamically indicate the percentage of how much of the operation is complete. A Working dialog, also known as Progress dialog or Percent Done indicator, is shown in <INDEXTARGET ID="ch10.dialogs29"><!-- POSTPROCESSDATA: ch10.dialogs29|dialogs:workingworking dialogs --><XREF IDREF="82759" TYPE="GRAPHIC">Figure&nbsp;10-6</XREF>. See <XREF IDREF="85716" TYPE="TITLE">&ldquo;IRIX Interactive Desktop Scales&rdquo; in Chapter&nbsp;9</XREF> for more information about these indicators. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm3 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-3.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-6"><PREFIX>Figure 10-6 </PREFIX><XREFTARGET ID="82759">Working Dialog with IRIX Interactive Desktop Scale</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>As described earlier in this chapter in <XREF IDREF="59772" TYPE="TITLE">&ldquo;Choosing Specific Actions for Your Dialogs,&rdquo;</XREF> Working dialogs should include at least one way to interrupt the task in progress. If the dialog is modal, you should also switch from the general-purpose pointer to the watch pointer in the dialog's parent window. If for some reason you're unable to include any buttons in the Working dialog (such as Cancel, Pause, Resume, or Help), switch to the watch pointer in the Working dialog to indicate that user input will be ignored while the operation is in progress. See <XREF IDREF="74495" TYPE="TITLE">&ldquo;Standard Pointer Shapes and Colors&rdquo; in Chapter&nbsp;11</XREF> for more information about the watch pointer.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Guidelines for Designing Dialogs</TITLE><PARAGRAPH><BOLD>When choosing the window decorations, initial state, and layout of dialogs . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Associate every dialog with a primary or support window (its parent) that's mapped to the screen.</CHECKOFFITEM>
<CHECKOFFITEM>Use the window decorations and Window menu entries listed in <XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF> and described in <XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo;</XREF> and <XREF IDREF="15724" TYPE="TITLE">&ldquo;Rules for Labeling the Title Bar in Windows Other Than Main&rdquo; in Chapter&nbsp;3</XREF>. </CHECKOFFITEM>
<CHECKOFFITEM>Have the default size large enough to allow all of the components and information to be displayed in their entirety. </CHECKOFFITEM>
<CHECKOFFITEM>Place the dialog on the screen either near (but not overlapping) any related information in the parent window, or in the center of the parent window if the contents of the dialog aren't related to the contents of the parent window. </CHECKOFFITEM>
<CHECKOFFITEM>Locate the initial keyboard focus in the field with which the user is most likely to want to interact. </CHECKOFFITEM>
<CHECKOFFITEM>Be sure the information being displayed in the dialog matches the current state of the application. If the dialog is modeless, update this information dynamically. </CHECKOFFITEM>
<CHECKOFFITEM>Include a response area that contains standard dialog actions (pushbuttons) tailored to the type and purpose of the dialog. Also include an input area that consists of whatever controls are necessary for selecting objects or setting application parameters in Prompt dialogs. Include a message area in Error, Warning, Question, Working, and Information dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include secondary work areas; if you need additional work areas, use a support window instead.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include menus. If the dialog includes so much functionality that menus are necessary, use a support window.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When choosing pushbutton actions for dialogs . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a subset of the standard dialog actions (Yes, No, OK, Close, Apply, Retry, Stop, Pause, Resume, Clear, Reset, Cancel, and Help), and have them appear in that order. If you include additional buttons, put them after the OK and Apply buttons but before the Cancel and Help buttons. </CHECKOFFITEM>
<CHECKOFFITEM>Include a Help button unless the situation is explained thoroughly in the dialog.</CHECKOFFITEM>
<CHECKOFFITEM>Avoid using both OK and Apply on the same dialog.</CHECKOFFITEM>
<CHECKOFFITEM>To decide between OK and Apply, determine whether users are more likely to use the dialog to make one set of changes at a time (if so, use OK), or whether they're more likely to want to make and apply changes repeatedly before closing the dialog (in this case, use Apply).</CHECKOFFITEM>
<CHECKOFFITEM>Include a Cancel/Close button on any dialog that has an Apply button. </CHECKOFFITEM>
<CHECKOFFITEM>Include a Cancel button on Working dialogs and, if possible, a Pause button (with the option of later resuming). </CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When choosing and creating default actions . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Whenever appropriate, choose one of the actions to be the default action. </CHECKOFFITEM>
<CHECKOFFITEM>Have OK be the default action for Information dialogs (which typically have buttons only for OK and Help).</CHECKOFFITEM>
<CHECKOFFITEM>Have the response that users are most likely to select be the default action for Question, Warning, Error, and any other dialogs that contain buttons but no text fields. </CHECKOFFITEM>
<CHECKOFFITEM>Have the response that users are most likely to select after entering a text string be the default action for dialogs that have only one text field. Use no other controls than the buttons in the response area (such as the File Selection and Prompt dialogs).</CHECKOFFITEM>
<CHECKOFFITEM>Don't have a default action for dialogs that contain multiple text fields.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When labeling dialog buttons . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Replace the &ldquo;Yes&rdquo; and &ldquo;No&rdquo; labels in Warning and Question dialogs with button names that clearly indicate the specific action that will occur if the button is clicked. </CHECKOFFITEM>
<CHECKOFFITEM>Replace the &ldquo;OK&rdquo; or &ldquo;Apply&rdquo; labels in Prompt or Warning dialogs with button names that clearly indicate the specific action that will occur if the button is clicked, unless the button is used for more than one purpose, or in the rare instance that &ldquo;OK&rdquo; and &ldquo;Apply&rdquo; are used together in a Prompt dialog.</CHECKOFFITEM>
<CHECKOFFITEM>In all other cases, use the OSF/Motif standard names.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When deciding what content to include in specific types of dialogs . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use Prompt dialogs to collect information in related chunks&mdash;that is, avoid collecting unrelated pieces of information in the same dialog, and don't launch multiple dialog boxes sequentially to collect several pieces of information if these pieces are frequently collected at the same time.</CHECKOFFITEM>
<CHECKOFFITEM>Include a description of the error, step-by-step instructions for how to recover from it, and a pointer to more information in Error dialogs. If the error involves a specific entity (for instance, a file, user, or host), name the entity in the error message. </CHECKOFFITEM>
<CHECKOFFITEM>Invoke Error dialogs only when they're directly relevant to the user; for example, don't tell the user that the printer is out of paper until the user has a job in the queue. </CHECKOFFITEM>
<CHECKOFFITEM>State what data is likely to be lost and why, and give the user a chance to cancel the action in Warning dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Limit your use of Question dialogs to those situations where the user couldn't have provided the information in advance. </CHECKOFFITEM>
<CHECKOFFITEM>Don't use Question dialogs for questions that relate to a pending destructive action&mdash;for these cases, use Warning dialogs instead.</CHECKOFFITEM>
<CHECKOFFITEM>Dynamically indicate how much of the operation is complete with the IRIX Interactive Desktop scale used as a percent-done indicator in Working dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Switch from the general-purpose pointer to the watch pointer in the parent window of a modal Working dialog.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="91359">Invoking Dialogs</TITLE><PARAGRAPH>Users expect to encounter dialogs in certain situations. This section describes the most common situations and gives an example of the dialog your application should provide if users can encounter this situation when interacting with your application. Topics include:<INDEXTARGET ID="ch10.dialogs30"><!-- POSTPROCESSDATA: ch10.dialogs30|dialogs:invoking --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="61823" TYPE="TITLE">&ldquo;Invoking Dialogs When Manipulating Files&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="16318" TYPE="TITLE">&ldquo;Other Situations for Invoking Dialogs&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For more information about the standard menu entries referred to in this section, see <XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo; in Chapter&nbsp;8</XREF>.</PARAGRAPH>
<PARAGRAPH>Since dialogs are designed to get the user's attention, overuse of them will be distracting to the user. Similarly, don't use application-generated dialogs to provide general status information; use a status area in the associated primary or support window instead (see <XREF IDREF="30855" TYPE="TITLE">&ldquo;Status Areas in Primary Windows&rdquo; in Chapter&nbsp;6</XREF>). </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="61823">Invoking Dialogs When Manipulating Files</TITLE><PARAGRAPH>Users expect to be prompted with a dialog whenever they choose a menu entry that includes an ellipsis. These dialogs prompt the user for information that's necessary before the action can be completed, as described in the following common examples.</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>&ldquo;Open...&rdquo; from the File (or leftmost) menu should display the IRIX Interactive Desktop File Selection dialog shown in <INDEXTARGET ID="ch10.dialogs31"><!-- POSTPROCESSDATA: ch10.dialogs31|file selection dialogsdialogs:file selection --><INDEXTARGET ID="ch10.dialogs32"><!-- POSTPROCESSDATA: ch10.dialogs32|&ldquo;Open&rdquo; option (in File menu) --><XREF IDREF="64835" TYPE="GRAPHIC">Figure&nbsp;10-2</XREF>. The first time this dialog is opened for an application, it should show the current working directory and no specific file. Subsequently, it should come up in the state it was last in when the user dismissed it&mdash;that is, it shows the last directory the user traversed to, and the file that the user opened the last time is selected. (See <XREF IDREF="43029" TYPE="TABLE">Table&nbsp;10-1</XREF> and <XREF IDREF="64835" TYPE="GRAPHIC">Figure&nbsp;10-2</XREF> earlier in this chapter for more information about the IRIX Interactive Desktop File Selection dialog.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>&ldquo;Save As...&rdquo; from the File (or leftmost) menu should display the IRIX Interactive Desktop File Selection dialog. If the file being saved doesn't exist yet, the dialog should show the current working directory and no specific file. If the file exists, the dialog should show that file's directory, and the current name of the file should be selected. If the user uses &ldquo;Save As...&rdquo; to change the name of an existing file, your application should create a copy of the existing file with the new name, close the previous file, and open the new file. (See <INDEXTARGET ID="ch10.dialogs33"><!-- POSTPROCESSDATA: ch10.dialogs33|&ldquo;Save As&rdquo; option (in File menu) --><XREF IDREF="38726" TYPE="TITLE">&ldquo;File Menu&rdquo; in Chapter&nbsp;8</XREF>.)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>When users open, close, or save changes to files, prompt them with the Warning dialog shown in <XREF IDREF="52310" TYPE="GRAPHIC">Figure&nbsp;10-4</XREF> whenever these actions will cause data to be lost. The standard situations in which this can arise include the following (see <XREF IDREF="67644" TYPE="TITLE">&ldquo;Application Models&rdquo; in Chapter&nbsp;6</XREF> for a discussion of the single- and multiple-document application models described in the following paragraphs):</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>In an application that allows only one document to be open at a time, when the user chooses to open another (new or existing) document and there are unsaved changes in the currently opened document. The user can open another document by selecting &ldquo;New&rdquo; from the File menu, by selecting &ldquo;Open...&rdquo; from the File menu and using the File Selection dialog, or by choosing a file from the &ldquo;Reopen&rdquo; cascading menu in the File menu.<INDEXTARGET ID="ch10.dialogs34"><!-- POSTPROCESSDATA: ch10.dialogs34|&ldquo;New&rdquo; option (in File menu)&ldquo;Open&rdquo; option (in File menu)&ldquo;Reopen&rdquo; option (in File menu) --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user chooses &ldquo;Close&rdquo; from the File menu in a co-primary window, and the co-primary window contains data that will be lost if the window is closed. This situation is especially common in applications that support multiple open documents because for these applications, closing a co-primary window is equivalent to closing a file.<INDEXTARGET ID="ch10.dialogs35"><!-- POSTPROCESSDATA: ch10.dialogs35|&ldquo;Close&rdquo; option (in File menu) --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user chooses &ldquo;Exit&rdquo; from the File menu, and at least one open co-primary window contains data that will be lost if the application is exited. For applications that support multiple open documents, prompt the user with a separate dialog box for each file that's currently open and has unsaved changes.<INDEXTARGET ID="ch10.dialogs36"><!-- POSTPROCESSDATA: ch10.dialogs36|&ldquo;Exit&rdquo; option (in File menu) --></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Other common file-related situations that require dialogs include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>When the user chooses &ldquo;Save&rdquo; from the File menu, and the current file is untitled. In this situation, prompt the user with the IRIX Interactive Desktop File Selection dialog, as described above for &ldquo;Save As....&rdquo;<INDEXTARGET ID="ch10.dialogs37"><!-- POSTPROCESSDATA: ch10.dialogs37|&ldquo;Save&rdquo; option (in File menu) --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user is interacting with the File Selection dialog and chooses a filename that already exists. In this situation, prompt the user with the Warning dialog shown in <XREF IDREF="53895" TYPE="GRAPHIC">Figure&nbsp;10-7</XREF>. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm7 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-7.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-7"><PREFIX>Figure 10-7 </PREFIX><XREFTARGET ID="53895">Warning Dialog for Overwriting a File</CAPTION>
</FIGURE>
</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user chooses &ldquo;Revert&rdquo; from the File menu, and the file currently has unsaved changes. In this situation, prompt the user with the Warning dialog shown in <INDEXTARGET ID="ch10.dialogs38"><!-- POSTPROCESSDATA: ch10.dialogs38|&ldquo;Revert&rdquo; option (in File menu) --><XREF IDREF="69820" TYPE="GRAPHIC">Figure&nbsp;10-8</XREF>. </PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm8 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-8.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-8"><PREFIX>Figure 10-8 </PREFIX><XREFTARGET ID="69820">Warning Dialog for Reverting to Previous Version</CAPTION>
</FIGURE>
</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="16318">Other Situations for Invoking Dialogs</TITLE><PARAGRAPH>When the user chooses &ldquo;Product Information&rdquo; from the Help menu, provide an Information dialog like the one shown in <INDEXTARGET ID="ch10.dialogs39"><!-- POSTPROCESSDATA: ch10.dialogs39|&ldquo;Product Information&rdquo; option (in Help menu)product information --><XREF IDREF="16543" TYPE="GRAPHIC">Figure&nbsp;10-9</XREF>. (See <XREF IDREF="33310" TYPE="TITLE">&ldquo;Product Information&rdquo; in Chapter&nbsp;4</XREF> for some suggestions about what to include in Product Information dialogs.)</PARAGRAPH>
<!-- RASTERCONVERT: ch10.dialogs.cgm6 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch10.dialogs-6.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="10-9"><PREFIX>Figure 10-9 </PREFIX><XREFTARGET ID="16543">Product Information Dialog</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>When users initiate an operation that takes more than five seconds to complete, your application should display a Working dialog. In this situation, prompt the user with the Working dialog shown in <INDEXTARGET ID="ch10.dialogs40"><!-- POSTPROCESSDATA: ch10.dialogs40|dialogs:workingworking dialogs --><XREF IDREF="82759" TYPE="GRAPHIC">Figure&nbsp;10-6</XREF>. Note that you might have to choose one of several different platforms as your standard for estimating times of operations. See <XREF IDREF="17857" TYPE="TITLE">&ldquo;Working Dialogs&rdquo;</XREF> earlier in this chapter for more information about the content of these dialogs.</PARAGRAPH>
<PARAGRAPH>When the user chooses &ldquo;Paste&rdquo; from the Edit menu and there's nothing currently on the clipboard to be pasted, bring up an Information dialog that says &ldquo;The clipboard is empty&rdquo; and that contains the single button &ldquo;OK.&rdquo; (See <INDEXTARGET ID="ch10.dialogs41"><!-- POSTPROCESSDATA: ch10.dialogs41|&ldquo;Paste&rdquo; option (in Edit menu) --><XREF IDREF="94339" TYPE="TITLE">&ldquo;Edit Menu&rdquo; in Chapter&nbsp;8</XREF>.)</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Guidelines for Invoking Dialogs</TITLE><PARAGRAPH><BOLD>When determining when to display a dialog and which dialog to display . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Limit the use of dialogs to those cases when they're absolutely necessary. Don't use dialogs to provide general status information&mdash;use a status area in the associated primary or support window instead. </CHECKOFFITEM>
<CHECKOFFITEM>Invoke a dialog whenever users choose a menu entry that includes an ellipsis.</CHECKOFFITEM>
<CHECKOFFITEM>Display the IRIX Interactive Desktop File Selection dialog when the user chooses &ldquo;Open...&rdquo; from the File menu. The first time this dialog is opened, it should show the current working directory and no specific file. Subsequently, it should come up in the state it was last in when the user dismissed it.</CHECKOFFITEM>
<CHECKOFFITEM>Display the IRIX Interactive Desktop File Selection dialog when the user chooses &ldquo;Save As...&rdquo; from the File menu. If the file being saved doesn't exist yet, the dialog should show the current working directory and no specific file. If the file exists, the dialog should show that file's directory, and the current name of the file should be selected. </CHECKOFFITEM>
<CHECKOFFITEM>When users open, close, or save changes to files, prompt them with a Warning dialog whenever these actions will cause data to be lost:</CHECKOFFITEM>
</CHECKOFF>
<BULLETLIST><BULLET><PARAGRAPH>In an application that allows only one document to be open at a time, when the user chooses to open another (new or existing) document and there are unsaved changes in the currently opened document. (For example, the user chooses &ldquo;New,&rdquo; &ldquo;Open,&rdquo; or &ldquo;Reopen&rdquo; from the File menu.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user chooses &ldquo;Close&rdquo; from the File menu in a co-primary window, and the co-primary window contains data that will be lost if the window is closed.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>When the user chooses &ldquo;Exit&rdquo; from the File menu, and at least one open co-primary window contains data that will be lost if the application is exited. For applications that support multiple open documents, prompt the user with a separate dialog box for each file that's currently open and has unsaved changes.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<CHECKOFF><CHECKOFFITEM>Prompt users with the File Selection dialog when they choose Save from the File menu and the current file is untitled. The behavior is the same as the &ldquo;Save As...&rdquo; entry in this situation.</CHECKOFFITEM>
<CHECKOFFITEM>Prompt users with a Warning dialog when they're interacting with the File Selection dialog and they choose a filename that already exists. </CHECKOFFITEM>
<CHECKOFFITEM>Prompt users with a Warning dialog when they choose &ldquo;Revert&rdquo; from the File menu and the file currently has unsaved changes. </CHECKOFFITEM>
<CHECKOFFITEM>Display an Information dialog when a user chooses the &ldquo;Product Information&rdquo; entry from the Help menu.</CHECKOFFITEM>
<CHECKOFFITEM>Display the Working dialog when users initiate an operation that takes more than five seconds to complete. Note that you might have to choose one of several different platforms as your standard for estimating times of operations.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
</CHAPTER>
