<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="6"><TITLE><XREFTARGET ID="71076">Application Windows</TITLE><PARAGRAPH>This chapter discusses the role of different types of windows in the IRIX Interactive Desktop environment. It includes information on how your application should combine the different types of windows, as well as guidelines on what elements are appropriate for primary and support windows, and how these elements should be arranged. (Dialog windows are discussed in detail in <INDEXTARGET ID="ch06.windows1"><!-- POSTPROCESSDATA: ch06.windows1|windows --><XREF IDREF="30192" TYPE="TITLE">Chapter&nbsp;10, &ldquo;Dialogs.&rdquo;</XREF>) </PARAGRAPH>
<PARAGRAPH>This chapter covers the following topics:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="67644" TYPE="TITLE">&ldquo;Application Models&rdquo;</XREF> discusses different models for applications. Which model is appropriate for your application depends upon whether your application needs multiple primary windows, and whether it can have multiple documents open at the same time.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="67665" TYPE="TITLE">&ldquo;Main and Co-Primary Windows&rdquo;</XREF> describes the design of primary windows.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="30905" TYPE="TITLE">&ldquo;Support Windows&rdquo;</XREF> explains the design of support windows.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="69885" TYPE="TITLE">&ldquo;Pointer Behavior in a Window&rdquo;</XREF> discusses the limits of what your application should do with the mouse pointer.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Note that by default, <INDEXTARGET ID="ch06.windows2"><!-- POSTPROCESSDATA: ch06.windows2|windows:default setting<ITALICS>4Dwm</ITALICS> window manager:default setting --><COMMAND>4Dwm</COMMAND>, the window manager for the IRIX Interactive Desktop, provides window decorations and a Window menu for all application windows. The specific window decorations and contents of the Window menu depend on the type of window and whether any of the components in the window are resizable. For guidelines on window decorations, Window menu entries, and related issues, see <XREF IDREF="38970" TYPE="TITLE">&ldquo;Application Window Categories and Characteristics&rdquo; in Chapter&nbsp;3</XREF>. </PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67644">Application Models</TITLE><PARAGRAPH>This section describes how the different types of windows used in the IRIX Interactive Desktop environment can be used together in applications. Topics include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="91745" TYPE="TITLE">&ldquo;Window Types&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="27980" TYPE="TITLE">&ldquo;Standard Application Models&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="91745">Window Types</TITLE><PARAGRAPH>As discussed in <INDEXTARGET ID="ch06.windows3"><!-- POSTPROCESSDATA: ch06.windows3|windows:categoriescategories:windows --><XREF IDREF="82170" TYPE="TITLE">&ldquo;Application Window Categories&rdquo; in Chapter&nbsp;3</XREF>, windows in the IRIX Interactive Desktop environment are divided into four types, which are subdivisions of Motif's two types: primary and secondary. Primary windows are divided into main primary windows and co-primary windows, and secondary windows are divided into support windows and dialogs. The definitions are repeated here for your convenience:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A <INDEXTARGET ID="ch06.windows4"><!-- POSTPROCESSDATA: ch06.windows4|windows:main windowswindows:primary windowsprimary windowsmain windows --><ITALICS>main primary window</ITALICS> serves as the application's main controlling window. It's used to view or manipulate data, get access to other windows within the application, and kill the process when users quit. There's only one main primary window per application (and sometimes it isn't visible to users). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A <INDEXTARGET ID="ch06.windows5"><!-- POSTPROCESSDATA: ch06.windows5|windows:co-primary windowsco-primary windows --><ITALICS>co-primary window</ITALICS> is used for major data manipulation or viewing of data outside of the main window </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A <INDEXTARGET ID="ch06.windows6"><!-- POSTPROCESSDATA: ch06.windows6|windows:support windowssupport windows --><ITALICS>support window</ITALICS> is a <ITALICS>persistent</ITALICS> special-purpose window. It typically contains a control panel or tool palette that operates directly on data in a primary window. A support window can be used repeatedly. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A <INDEXTARGET ID="ch06.windows7"><!-- POSTPROCESSDATA: ch06.windows7|windows:dialogsdialogs --><ITALICS>dialog</ITALICS> is a <ITALICS>transient</ITALICS> window, typically used for short, quick user input, such as an action confirmation, or system output, as in a warning message. A dialog may be user-requested or application-generated. It is usually dismissed as soon as it has served its purpose. Dialogs are discussed in detail in <XREF IDREF="30192" TYPE="TITLE">Chapter&nbsp;10, &ldquo;Dialogs.&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The next section (<XREF IDREF="27980" TYPE="TITLE">&ldquo;Standard Application Models&rdquo;</XREF>) describes several standard models for combining these types of windows in a real application. When choosing a model, try to keep the window hierarchy shallow so users can form a relatively simple conceptual model of how your application's windows are related. <XREF IDREF="71136" TYPE="GRAPHIC">Figure&nbsp;6-1</XREF> shows the allowable parent and child relationships within an application's window hierarchy. For example, all co-primary windows should be children of the main window, so primary windows should never be more than two levels deep; dialogs can be children of any type of window.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm8 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-8.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-1"><PREFIX>Figure 6-1 </PREFIX><XREFTARGET ID="71136">Allowable Parent-Child Window Relationships</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="27980">Standard Application Models</TITLE><PARAGRAPH>Applications can combine the basic window types in many ways, but most applications fall into one of four basic models. These models differ with respect to whether they can have one or multiple documents (files) open at a time and their use of primary windows. (For information about how to implement the various models, see Chapter&nbsp;5, &ldquo;Window, Session, and Desk Management,&rdquo; in the<INDEXTARGET ID="ch06.windows8"><!-- POSTPROCESSDATA: ch06.windows8|application models --><DOCTITLE>&space;IRIX Interactive Desktop Integration Guide</DOCTITLE>.)</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The term <ITALICS>document</ITALICS> means a grouping of data and shouldn't be thought of as referring exclusively to text-oriented files. A document can include such data types as film clips, audio segments, and 3D scenes. </NOTE>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Single Document, One Primary&rdquo; Application Model</TITLE><PARAGRAPH>&ldquo;Single Document, One Primary&rdquo; (see <INDEXTARGET ID="ch06.windows9"><!-- POSTPROCESSDATA: ch06.windows9|windows:&ldquo;single document, one primary&rdquo; application model&ldquo;single document, one primary&rdquo; application model --><XREF IDREF="93978" TYPE="GRAPHIC">Figure&nbsp;6-2</XREF>) is the most basic model. It accomplishes all of its tasks within the main window and uses as many support windows and dialogs as needed. Users can work on only one document at a time. Thus, when a user has one document open and opens a second document, the second document replaces the first. IRIS Showcase operates in this manner. </PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-2"><PREFIX>Figure 6-2 </PREFIX><XREFTARGET ID="93978">&rdquo;Single Document, One Primary&rdquo; Application Model</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Single Document, Multiple Primaries&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;Single Document, Multiple Primaries&rdquo; model (see <INDEXTARGET ID="ch06.windows10"><!-- POSTPROCESSDATA: ch06.windows10|windows:&ldquo;single document, multiple primaries&rdquo; application model&ldquo;single document, multiple primaries&rdquo; application model --><XREF IDREF="20959" TYPE="GRAPHIC">Figure&nbsp;6-3</XREF>) uses both main and co-primary windows to accomplish major tasks. In this model, each co-primary window performs a different function; these functions supplement the functionality of the main window. MediaMail is an example of this model. Its main window lets users select electronic mail messages from a folder and perform actions on them such as viewing, printing, deleting, and sorting. Its Compose and Message windows are typical of &lbreak;co-primary windows with different functions designed to support the functionality of the main window. </PARAGRAPH>
<PARAGRAPH>Also in this model, each primary window has its own menu bar tailored specifically to the functions in that window. Each co-primary window is opened from the main window. Each support and dialog window is associated with a specific primary window.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm2 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-2.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-3"><PREFIX>Figure 6-3 </PREFIX><XREFTARGET ID="20959">&rdquo;Single Document, Multiple Primaries&rdquo; Application Model</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The single-document application with multiple primary windows is useful for dealing with data that the user needs to view in a number of different ways at the same time. For example, the WorkShop debugger operates on a single executable at a time. However, at a given time WorkShop might have several primary windows displaying source code, with other primary windows displaying call graphs and output from running the executable. In the case of WorkShop, the nature of the application demands multiple-primary windows.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Multiple Document, Visible Main&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;Multiple Document, Visible Main&rdquo; model (see <INDEXTARGET ID="ch06.windows11"><!-- POSTPROCESSDATA: ch06.windows11|windows:&ldquo;multiple document, visible main&rdquo; application model&ldquo;multiple document, visible main&rdquo; application model --><XREF IDREF="91934" TYPE="GRAPHIC">Figure&nbsp;6-4</XREF>) has a main window that's used primarily to launch co-primary windows. These co-primary windows are identical to each other and perform the same functions on different files or documents. All co-primary windows have identical entries in the menu bar and identical sets of dialogs and support windows. Each set of dialogs and support windows acts on a single document, the one represented by the co-primary window from which the dialog or support window was invoked. </PARAGRAPH>
<PARAGRAPH>Co-primary windows are opened either from the main window or from a co-primary window that's already open. IRIS InSight is an example of this model. Its main window lets users launch co-primary viewing windows, browse available files, and conduct global searches through these files. The co-primary windows are used for viewing online books.</PARAGRAPH>
<PARAGRAPH>A multi-document application should have a visible main window only if the main window offers functionality that can't be provided from the co-primary windows. For example, the IRIS InSight main window allows users to browse a list of books and to search a collection of books for specific words or phrases. A multi-document application should <ITALICS>not</ITALICS> have a visible main window if the only thing in the main window would be a menu bar. In this case, use the &ldquo;multiple documents, no visible main&rdquo; model; make the menu entries from the main window available from the pull-down menus in each of the co-primary windows, as described in the next section.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm3 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-3.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-4"><PREFIX>Figure 6-4 </PREFIX><XREFTARGET ID="91934">&rdquo;Multiple Document, Visible Main&rdquo; Application Model</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="96208">&ldquo;Multiple Document, No Visible Main&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;Multiple Document, No Visible Main&rdquo; model (see <INDEXTARGET ID="ch06.windows12"><!-- POSTPROCESSDATA: ch06.windows12|windows:&ldquo;multiple document, no visible main&rdquo; application model&ldquo;multiple document, no visible main&rdquo; application model --><XREF IDREF="37659" TYPE="GRAPHIC">Figure&nbsp;6-5</XREF>) is identical to the &ldquo;Multiple Document, Visible Main&rdquo; model described in the previous section except that the main window is invisible to the user (that is, unmapped) and new co-primary windows are launched from co-primary windows that are already open. Users open one document and leave it open while opening others. When the user has closed all of the documents, the process is killed.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm4 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-4.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-5"><PREFIX>Figure 6-5 </PREFIX><XREFTARGET ID="37659">&rdquo;Multiple Document, No Visible Main&rdquo; Application Model</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Application Model Guidelines</TITLE><PARAGRAPH><BOLD>For all applications . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Choose an appropriate application model for combining the different types of windows in your application.</CHECKOFFITEM>
<CHECKOFFITEM>Use only the allowable parent-child window relationships and keep your application window hierarchy shallow.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67665">Main and Co-Primary Windows</TITLE><PARAGRAPH>Every application has at least one primary window that serves as the application's main controlling window. In fact, the majority of a user's interactions should occur in the main and co-primary windows (these window types are defined in <INDEXTARGET ID="ch06.windows13"><!-- POSTPROCESSDATA: ch06.windows13|windows:main windowsmain windows --><INDEXTARGET ID="ch06.windows14"><!-- POSTPROCESSDATA: ch06.windows14|co-primary windows --><XREF IDREF="91745" TYPE="TITLE">&ldquo;Window Types&rdquo;</XREF> earlier in this chapter). </PARAGRAPH>
<PARAGRAPH>This section discusses main and co-primary windows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="93559" TYPE="TITLE">&ldquo;Menu Bars in Primary Windows&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="20989" TYPE="TITLE">&ldquo;Scrollable Work Areas in Primary Windows&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="93963" TYPE="TITLE">&ldquo;Control Areas in Primary Windows&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="30855" TYPE="TITLE">&ldquo;Status Areas in Primary Windows&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="69664" TYPE="TITLE">&ldquo;Splitting Primary Windows Into Panes&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="48020" TYPE="TITLE">&ldquo;Popup Menus in Primary Windows&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Several typical layouts for primary windows are shown in Figures <XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF>. These layouts are discussed in the following sections.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm7 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-7.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-6"><PREFIX>Figure 6-6 </PREFIX><XREFTARGET ID="82225">Basic Primary Window</CAPTION>
</FIGURE>
<!-- RASTERCONVERT: ch06.windows.cgm5 -->
<FIGURE><GRAPHIC FILE="ch06.windows-5.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-7"><PREFIX>Figure 6-7 </PREFIX><XREFTARGET ID="17433">Primary Windows With Tool Palettes</CAPTION>
</FIGURE>
<!-- RASTERCONVERT: ch06.windows.cgm6 -->
<FIGURE><GRAPHIC FILE="ch06.windows-6.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-8"><PREFIX>Figure 6-8 </PREFIX><XREFTARGET ID="95489">Primary Window With Two Panes</CAPTION>
</FIGURE>
</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="93559">Menu Bars in Primary Windows</TITLE><PARAGRAPH>Primary windows typically have a menu bar, which is part of the window as shown in Figures <INDEXTARGET ID="ch06.windows15"><!-- POSTPROCESSDATA: ch06.windows15|menus:menu bars --><INDEXTARGET ID="ch06.windows16"><!-- POSTPROCESSDATA: ch06.windows16|menu bars:co-primary windowsmenu bars:main windows --><INDEXTARGET ID="ch06.windows17"><!-- POSTPROCESSDATA: ch06.windows17|main windows:menu barsco-primary windows:menu bars --><INDEXTARGET ID="ch06.windows18"><!-- POSTPROCESSDATA: ch06.windows18|windows:menu bars --><XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF>. Don't create a detached menu bar contained in a separate window. For details on designing the menu bar and its contents for a primary window, see <XREF IDREF="42408" TYPE="TITLE">&ldquo;The Menu Bar and Pull-Down Menus&rdquo; in Chapter&nbsp;8</XREF>.</PARAGRAPH>
<PARAGRAPH>If the primary window doesn't have a menu bar and all of its functionality is available using buttons, the window should still respond to the keyboard accelerators for Close (Ctrl+W) and Exit (Ctrl+Q) when appropriate. That is, the window should respond to these accelerators according to the guidelines for when to use just Exit, when to use just Close, and when to use both Close and Exit for a window, as described in the section <INDEXTARGET ID="ch06.windows19"><!-- POSTPROCESSDATA: ch06.windows19|keyboard shortcuts:main windowskeyboard shortcuts:co-primary windowsmain windows:keyboard shortcutsco-primary windows:keyboard shortcuts --><XREF IDREF="38726" TYPE="TITLE">&ldquo;File Menu&rdquo; in Chapter&nbsp;8</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="20989">Scrollable Work Areas in Primary Windows</TITLE><PARAGRAPH>The most prominent area of the window is typically a scrollable work area, as shown in Figures <INDEXTARGET ID="ch06.windows20"><!-- POSTPROCESSDATA: ch06.windows20|scrollable work areas:co-primary windowsscrollable work areas:main windowswork areas, scrollable:co-primary windowswork areas, scrollable:main windows --><INDEXTARGET ID="ch06.windows21"><!-- POSTPROCESSDATA: ch06.windows21|main windows:work areas, scrollableco-primary windows:work areas, scrollable --><INDEXTARGET ID="ch06.windows22"><!-- POSTPROCESSDATA: ch06.windows22|windows:scrollable work areas --><XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF>. Use scrollbars for the work area of a window when the window can be resized such that some of the available data may be hidden in the work area. Note that the scrollbars scroll only the work area and don't scroll the menu bar, buttons in a command area, or the status message area.</PARAGRAPH>
<PARAGRAPH>Each scrollbar should span the entire width or height of the scrollable region. Don't put controls or status information in the areas reserved for the scroll bars. Put controls in the control area, as described later in <XREF IDREF="93963" TYPE="TITLE">&ldquo;Control Areas in Primary Windows.&rdquo;</XREF> Put status information in the status area, as described later in <XREF IDREF="30855" TYPE="TITLE">&ldquo;Status Areas in Primary Windows.&rdquo;</XREF>&space;</PARAGRAPH>
<PARAGRAPH>Use a vertical scrollbar on the right of the work area if the window or pane that contains the work area can be resized such that the data being displayed in the work area won't fit in a vertical direction. Similarly, use a horizontal scrollbar directly below the work area if the window or pane can be resized such that the data being displayed in the work area won't fit in a horizontal direction. Disable (rather than remove) the appropriate scrollbar when all of the data is being displayed in a given direction. For more information on using scrollbars, see <XREF IDREF="33826" TYPE="TITLE">&ldquo;Scrollbars&rdquo; in Chapter&nbsp;9</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="93963">Control Areas in Primary Windows</TITLE><PARAGRAPH>Controls in primary windows, which are typically pushbuttons, are generally placed directly beneath the horizontal scrollbar and on the left side of the window (see Figures <INDEXTARGET ID="ch06.windows23"><!-- POSTPROCESSDATA: ch06.windows23|control areas:co-primary windowscontrol areas:main windows --><INDEXTARGET ID="ch06.windows24"><!-- POSTPROCESSDATA: ch06.windows24|main windows:control areasco-primary windows:control areas --><XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF>). (Note that this is different than the <DOCTITLE>OSF/Motif</DOCTITLE>&space;<DOCTITLE>Style Guide</DOCTITLE>, which states that controls can be arranged along the top, bottom, or side of the work area.) As stated in the previous section, don't place controls directly below or on the right side of the work area in the scroll bar area&mdash;scrollbars should span the entire width and height of the work area. (See <XREF IDREF="95140" TYPE="TITLE">Chapter&nbsp;9, &ldquo;Controls,&rdquo;</XREF> for more information about how to use controls in your application.)</PARAGRAPH>
<PARAGRAPH>Control areas sometimes contain pushbuttons that are grouped into tool palettes. Figures <INDEXTARGET ID="ch06.windows25"><!-- POSTPROCESSDATA: ch06.windows25|tool palettes --><XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF> show primary windows with pushbuttons in the control areas, and <XREF IDREF="17433" TYPE="GRAPHIC">Figure&nbsp;6-7</XREF> shows primary windows with both tool palettes and pushbuttons that aren't part of a palette. Buttons that are part of a tool palette don't need to have corresponding menu entries. These &ldquo;tools&rdquo; typically allow a user to launch support and co-primary windows, or put the work area in a different mode (for example, edit mode or draw mode).</PARAGRAPH>
<PARAGRAPH>In contrast, pushbuttons used in control areas that do <ITALICS>not</ITALICS> represent tool palettes should represent the most frequently accessed application-specific menu entries which provide users a more convenient way of accessing these actions. There are two advantages to having these buttons repeat functionality from the menus:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Having the functions in a menu allows you to assign keyboard accelerators to those common functions and allows users to choose between using point-and-click on the button or using a keyboard accelerator to access the functionality.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Having the functions in a menu means that users can skim one place (the menu entries) to get an idea of the overall functionality of the product, and can skim another place (the control area) to see the frequently used functionality.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>These non-palette buttons generally don't include actions from the standard File, Edit, or Help menus because these entries typically aren't the most frequently accessed when compared to the functionality that's specific to your application. For example, these buttons don't include the actions &ldquo;Exit&rdquo; or &ldquo;Close&rdquo; because these functions are used only once each time the window is opened, and they don't include &ldquo;Help&rdquo; because help is easily accessible from the Help menu. (For more information on buttons, see <XREF IDREF="18668" TYPE="TITLE">&ldquo;Pushbuttons&rdquo; in Chapter&nbsp;9</XREF>; also see <XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo; in Chapter&nbsp;8</XREF>.)</PARAGRAPH>
<PARAGRAPH>The control area can also include an area to enter command line input. This command line area should be in addition to the buttons. Note that this differs from the <INDEXTARGET ID="ch06.windows26"><!-- POSTPROCESSDATA: ch06.windows26|command line input:windowsco-primary windows:command line inputmain windows:command line input --><DOCTITLE>OSF/Motif</DOCTITLE>&space;<DOCTITLE>Style Guide</DOCTITLE>, which states that the command area can contain only command line input. For an example window with an command line input area, see Section 6.2.1 in the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="30855">Status Areas in Primary Windows</TITLE><PARAGRAPH>Primary windows can also include a single status message area at the bottom of the window if the application needs to post frequent messages to the user about the status of the application or the status of specific user actions (see Figures <INDEXTARGET ID="ch06.windows27"><!-- POSTPROCESSDATA: ch06.windows27|status areas:co-primary windowsstatus areas:main windows --><INDEXTARGET ID="ch06.windows28"><!-- POSTPROCESSDATA: ch06.windows28|main windows:status areasco-primary windows:status areas --><XREF IDREF="82225" TYPE="TEXT">6-6</XREF> through <XREF IDREF="95489" TYPE="TEXT">6-8</XREF>). For example, messages in this area might confirm that a file has been saved or that an option has been turned on or off. Provide vertical scrollbars for this area so that users can view previously displayed messages.</PARAGRAPH>
<PARAGRAPH>Don't use this area for warnings, errors, or other kinds of messages requiring the user to respond. Instead, use dialogs to display these types of messages. (See <XREF IDREF="30192" TYPE="TITLE">Chapter&nbsp;10, &ldquo;Dialogs,&rdquo;</XREF> for guidelines on designing dialogs.) Also, don't use it to display help information.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="69664">Splitting Primary Windows Into Panes</TITLE><PARAGRAPH>Windows can be split into various panes of information (see <INDEXTARGET ID="ch06.windows29"><!-- POSTPROCESSDATA: ch06.windows29|panes:co-primary windowspanes:main windows --><INDEXTARGET ID="ch06.windows30"><!-- POSTPROCESSDATA: ch06.windows30|main windows:panesco-primary windows:panes --><XREF IDREF="95489" TYPE="GRAPHIC">Figure&nbsp;6-8</XREF>). Panes are separated from each other by separator lines. Each separator line may or may not include a sash control, which allows users to resize the panes. (See the Sash reference page in Chapter 9 of the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>.) Windows can include panes that are stacked vertically (<XREF IDREF="95489" TYPE="GRAPHIC">Figure&nbsp;6-8</XREF>) or that are next to each other in a side-by-side horizontal layout (<XREF IDREF="17433" TYPE="GRAPHIC">Figure&nbsp;6-7</XREF>). Note that control areas can be associated either with a specific pane or with the entire window. </PARAGRAPH>
<PARAGRAPH>Don't overuse panes&mdash;each application window typically should have no more than four separate panes and no more than three sash controls. If certain panes are optional to performing the task, provide menu entries that show or hide specific panes of information (see <XREF IDREF="26586" TYPE="TITLE">&ldquo;View Menu&rdquo; in Chapter&nbsp;8</XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="48020">Popup Menus in Primary Windows</TITLE><PARAGRAPH>Popup menus (which aren't shown in the figures in this chapter) can provide quick access to frequently used functions in primary windows. For information on when and how to use popup menus, see <INDEXTARGET ID="ch06.windows31"><!-- POSTPROCESSDATA: ch06.windows31|menus:popuppopup menus:co-primary windowspopup menus:main windowsmain windows:popup menusco-primary windows:popup menus --><XREF IDREF="62260" TYPE="TITLE">&ldquo;Popup Menus&rdquo; in Chapter&nbsp;8</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Primary Window Guidelines</TITLE><PARAGRAPH><BOLD>When designing a primary window . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a menu bar unless all of the window's functionality is available through pushbuttons. Don't use a &ldquo;floating&rdquo; menu bar in a separate window.</CHECKOFFITEM>
<CHECKOFFITEM>Support keyboard accelerators for Close (Ctrl-W) and Exit (Ctrl-Q) as appropriate, even if the window doesn't have a menu bar.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When designing a scrollable work area in a primary window . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a vertical scrollbar on the right side of the work area when the data being displayed in the work area may not fit in a vertical direction. Use a horizontal scrollbar directly below the work area when the data may not fit in a horizontal direction. Don't use scrollbars if you're certain the data will fit.</CHECKOFFITEM>
<CHECKOFFITEM>Disable the appropriate scrollbar when all the data is visible in a given direction. Don't remove the scrollbar.</CHECKOFFITEM>
<CHECKOFFITEM>Make each scrollbar span the entire height or width of the work area. Don't include controls or status information in the scrollbar region.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When designing control areas in a primary window . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Place controls below horizontal scrollbars or to the left of work areas.</CHECKOFFITEM>
<CHECKOFFITEM>Provide pushbuttons for the most frequently accessed application-specific functions from the pull-down menus. Don't use pushbuttons for standard menu entries such as Open, Save, Close, Exit, Cut, Copy, Paste, and Help.</CHECKOFFITEM>
<CHECKOFFITEM>Use pushbuttons only for functions that appear in menus, unless the pushbuttons are part of a tool palette.</CHECKOFFITEM>
<CHECKOFFITEM>Provide an area for command-line input, if appropriate, in addition to (not in place of) pushbuttons.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>To display status information . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a status area along the bottom of a primary window if your application needs to post frequent messages about its status. Provide vertical scrollbars for this area so that users can view previously displayed messages.</CHECKOFFITEM>
<CHECKOFFITEM>Use a status area to display messages that the user doesn't have to respond to rather than posting this noncritical information in dialogs. However, don't put critical warning or error messages in the status area (use a dialog instead).</CHECKOFFITEM>
<CHECKOFFITEM>Don't use the status area to display help information.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When dividing a primary window into panes . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Divide panes using separator lines. If users might need to resize the pane, also include a sash control.</CHECKOFFITEM>
<CHECKOFFITEM>Try to limit the number of panes in a single window to four with no more than three sash controls.</CHECKOFFITEM>
<CHECKOFFITEM>If certain panes are optional, allow users to hide or show these individual panes using entries in the &ldquo;View&rdquo; menu.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="30905">Support Windows</TITLE><PARAGRAPH>As defined in <INDEXTARGET ID="ch06.windows32"><!-- POSTPROCESSDATA: ch06.windows32|support windows --><XREF IDREF="91745" TYPE="TITLE">&ldquo;Window Types&rdquo;</XREF> earlier in this chapter, support windows are persistent secondary windows that allow users convenient, constant access to sets of important controls that directly manipulate data in the associated primary window. The next two sections discuss:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="82533" TYPE="TITLE">&ldquo;General Support Window Design&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="84245" TYPE="TITLE">&ldquo;A Specific Standard Support Window: The IRIX Interactive Desktop Color Chooser&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="82533">General Support Window Design</TITLE><PARAGRAPH>Each support window should be associated with a specific primary window (its parent), which should be visible and mapped to the screen. (Support windows with invisible, unmapped parents don't work properly with desks, as described in <INDEXTARGET ID="ch06.windows33"><!-- POSTPROCESSDATA: ch06.windows33|support windows:design --><INDEXTARGET ID="ch06.windows34"><!-- POSTPROCESSDATA: ch06.windows34|support windows:parent windows --><XREF IDREF="55393" TYPE="TITLE">&ldquo;Desks&rdquo; in Chapter&nbsp;3</XREF>.) Support windows shouldn't have other support windows or dialogs as parent windows. Note that this differs from the <DOCTITLE>OSF/Motif</DOCTITLE>&space;<DOCTITLE>Style Guide</DOCTITLE>, which states that secondary windows can have other secondary windows as parents. </PARAGRAPH>
<PARAGRAPH>Support windows typically don't have menu bars like primary windows, but they should still respond to the keyboard accelerator for closing a window (&ldquo;Ctrl+W&rdquo;). Launch support windows from items in the Tools menu of the associated primary window's menu bar (see <INDEXTARGET ID="ch06.windows35"><!-- POSTPROCESSDATA: ch06.windows35|keyboard shortcuts:support windowssupport windows:keyboard shortcuts --><INDEXTARGET ID="ch06.windows36"><!-- POSTPROCESSDATA: ch06.windows36|Tools menu:support windows, andsupport windows:Tools menu, and --><XREF IDREF="70020" TYPE="TITLE">&ldquo;Tools menu&rdquo; in Chapter&nbsp;8</XREF>) or from a tool palette in the primary window (see <XREF IDREF="93963" TYPE="TITLE">&ldquo;Control Areas in Primary Windows&rdquo;</XREF>). Users can show or hide support windows as they wish, and rearrange where they're displayed with respect to the primary window. This makes support windows more versatile than control areas in a primary window. When bringing up support windows, don't overlap the work area of the associated primary window if you can avoid it. Note that <COMMAND>4Dwm</COMMAND> constrains support windows to always appear on top of the parent window in the window hierarchy. </PARAGRAPH>
<PARAGRAPH>A support window should be smaller and less complex than its associated primary window, so that you don't need to split the support window's contents into separate panes. Support windows typically include a related set of controls that are associated with the parent primary window. Each related set of functions or input fields should be given its own support window. The controls (which can include buttons, text fields, and scrolling lists) typically either operate directly on selected data or change the mode of the primary window. For example, they might allow the user to choose a texture that will be applied to the selected objects in the primary window, or they might allow the user to choose a specific drawing tool that changes what's drawn in the parent window. For example, the IRIS Showcase Align Gizmo shown in <XREF IDREF="27066" TYPE="GRAPHIC">Figure&nbsp;6-9</XREF> aligns the objects that are currently selected in IRIS Showcase's main window. Don't add or remove controls from a support window depending on the current context&mdash;the layout and contents of a support window should be static.</PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm10 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-10.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-9"><PREFIX>Figure 6-9 </PREFIX><XREFTARGET ID="27066">The IRIS Showcase Align Gizmo</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Support windows also typically contain a response area that includes standard actions for the window: &ldquo;Apply,&rdquo; &ldquo;Cancel/Close,&rdquo; and &ldquo;Help.&rdquo; See <XREF IDREF="32754" TYPE="TITLE">&ldquo;Standard Dialog Actions&rdquo; in Chapter&nbsp;10</XREF> for more information about these actions. In addition, support windows may contain secondary work areas for manipulating data that will eventually be integrated into the work area of the associated primary window. Texture, pattern, icon, and geometry editors are examples of support windows that might contain secondary work areas. The Align Gizmo in <XREF IDREF="27066" TYPE="GRAPHIC">Figure&nbsp;6-9</XREF> contains a small display area showing a circle, a square, and a triangle, which shows the effects of the user's changes before they're applied to the main window. </PARAGRAPH>
<PARAGRAPH>Support windows should be modeless&mdash;that is, they shouldn't prevent the user from interacting with any of the application's other windows. If your application requires a secondary window that the user must dismiss before interacting with the rest of the application, use a modal dialog (see <INDEXTARGET ID="ch06.windows37"><!-- POSTPROCESSDATA: ch06.windows37|modes:supports windows, and --><XREF IDREF="54825" TYPE="TITLE">&ldquo;Dialog Modes&rdquo; in Chapter&nbsp;10</XREF>).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="84245">A Specific Standard Support Window: The IRIX Interactive Desktop Color Chooser</TITLE><PARAGRAPH>The IRIX Interactive Desktop color chooser is a standard support window that allows users to edit colors. Use the color chooser in your application whenever you want to offer the user an unrestricted choice of colors. For a restricted choice of colors, you can offer the user a palette of colors to choose from, a list, an option button, or a set of radio buttons, depending on the number of choices available. <INDEXTARGET ID="ch06.windows38"><!-- POSTPROCESSDATA: ch06.windows38|support windows:color choosercolor chooser --><XREF IDREF="84728" TYPE="GRAPHIC">Figure&nbsp;6-10</XREF> shows the color chooser in its default configuration. </PARAGRAPH>
<!-- RASTERCONVERT: ch06.windows.cgm9 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch06.windows-9.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="6-10"><PREFIX>Figure 6-10 </PREFIX><XREFTARGET ID="84728">The IRIX Interactive Desktop Color Chooser</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>You can allow users to access the IRIX Interactive Desktop color chooser from your application in one of two ways: by having them click on a button that displays its (editable) color, or having them click on an object for which the color should be changed. The first method is used by the Background control panel (which is available from the Desktop->Customize menu in the Toolchest). With this panel, the user clicks on one of the color buttons to open the color chooser. If the color chooser is already open, clicking on a color button selects that color for the color chooser to edit. The colors of the buttons represent the current colors being used by the desktop background. With the second method, the user selects an object and then chooses the &ldquo;Color Editor&rdquo; entry from the Edit menu, as described in the section <INDEXTARGET ID="ch06.windows39"><!-- POSTPROCESSDATA: ch06.windows39|&ldquo;Color Editor&rdquo; option (in Edit menu) --><XREF IDREF="94339" TYPE="TITLE">&ldquo;Edit Menu&rdquo; in Chapter&nbsp;8</XREF>. This menu entry opens the color chooser. For details on how to include the IRIX Interactive Desktop color chooser in your application, see Chapter&nbsp;4, &ldquo;Using the Silicon Graphics Enhanced Widgets,&rdquo; of the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
<PARAGRAPH>As noted in <XREF IDREF="84728" TYPE="GRAPHIC">Figure&nbsp;6-10</XREF>, the color chooser includes the following components:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Two color swatches: one for showing the current selected color and one for enabling the user to store a second color for reference.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A color hexagon that provides visual selection of the hue and saturation components of a color in an HSV color space. The user changes the hue and saturation by moving the selector (which appears as a small circle) in the color hexagon.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Color sliders for controlling various color components. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Text fields that show the exact values for hue, saturation, and value color components and allow users to set these values numerically. (There are also text fields indicating the values of the red, green and blue color components when the red, green, and blue sliders are visible.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Menus for Options (which allows users to easily find the color white) and Sliders (which provides various combinations of sliders for setting hue, saturation, value, red, green, blue input values).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Pushbuttons that allow users to apply the current values, cancel a pending change, or get help on this window. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>Because of drawing-speed considerations, the color hexagon and color sliders are available only if running under GL. For X-only configurations, the Color Chooser uses a Scale widget instead of the color sliders, and there is no color hexagon. </NOTE>
<PARAGRAPH>The user can apply the new color to the selected object by pressing either the <BUTTON>OK</BUTTON> or <BUTTON>Apply</BUTTON> buttons. If the user presses <BUTTON>OK</BUTTON>, the color chooser should be dismissed after the new color is applied. If the user selects a new object in the parent primary window while the color chooser is open, the color chooser should update its current color to the color of the selected object. Thus, a single color chooser window can be used to change the color of a number of different objects. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Support Window Guidelines</TITLE><PARAGRAPH><BOLD>When designing support windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use them to provide access to sets of related controls.</CHECKOFFITEM>
<CHECKOFFITEM>Allow users to access them either through entries in the Tools menu or through pushbuttons in a tool palette in the parent primary window.</CHECKOFFITEM>
<CHECKOFFITEM>Be sure that each support window has a visible parent primary window that's mapped to the screen.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When designing the layout of a support window . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Make the layout simple and static. Don't include multiple panes of information.</CHECKOFFITEM>
<CHECKOFFITEM>Include a response area for standard actions that's similar to the one dialogs have.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include a menu bar in most cases, but do support the keyboard accelerator for Close (Ctrl-W).</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When opening support windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Avoid overlapping the work area of the parent window.</CHECKOFFITEM>
<CHECKOFFITEM>Bring them up as modeless secondary windows. </CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When allowing the user to make color choices . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use the IRIX Interactive Desktop color chooser whenever you want to offer the user an unrestricted choice of colors. For a restricted choice of colors, use a palette of colors to choose from, a list, an option button, or a set of radio buttons, depending on the number of choices available. </CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="41181"><XREFTARGET ID="69885">Pointer Behavior in a Window</TITLE><PARAGRAPH>The user should retain control over the location of the pointer at all times. Your application shouldn't change the location of the pointer. (This is sometimes referred to as &ldquo;warping&rdquo; the pointer.) Similarly, your application shouldn't change the gain and acceleration characteristics of mouse movement. Users set these on a global basis using the Mouse Settings control panel available from the Desktop->Customize cascading menu in the Toolchest. If your application requires finer motion control than what's provided by the default gain settings, provide a zoom feature in the View menu that allows users to change the relative size of an area of your application. (See <INDEXTARGET ID="ch06.windows40"><!-- POSTPROCESSDATA: ch06.windows40|pointermouse:movement --><INDEXTARGET ID="ch06.windows41"><!-- POSTPROCESSDATA: ch06.windows41|Mouse Settings control panelcontrol panels:Mouse Settings --><XREF IDREF="26586" TYPE="TITLE">&ldquo;View Menu&rdquo; in Chapter&nbsp;8</XREF> for more information about this menu.) </PARAGRAPH>
<PARAGRAPH>Although users control the location of the pointer, your application needs to control the shape of the pointer. This shape gives the user feedback about the current state of the application (for example, whether it's waiting for user input or whether it's busy processing). Pointer shapes are discussed in <INDEXTARGET ID="ch06.windows42"><!-- POSTPROCESSDATA: ch06.windows42|pointer:shapes, state andstates:pointers, shapes and --><XREF IDREF="15568" TYPE="TITLE">&ldquo;Pointer Shapes and Colors&rdquo; in Chapter&nbsp;11</XREF>.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Pointer Behavior Guidelines</TITLE><PARAGRAPH><BOLD>When designing your application . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Always allow the user to control the location of the pointer; your application shouldn't change the position of the pointer.</CHECKOFFITEM>
<CHECKOFFITEM>Don't change the gain or acceleration characteristics of the pointer. If your application requires fine manipulation, provide a zoom feature in the View menu. </CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
</CHAPTER>
