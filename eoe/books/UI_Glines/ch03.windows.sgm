<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="42750">Windows in the IRIX Interactive Desktop Environment</TITLE><PARAGRAPH>When users run your application on the IRIX Interactive Desktop, they interact with its windows through <INDEXTARGET ID="ch03.windows1"><!-- POSTPROCESSDATA: ch03.windows1|windows --><ITALICS>4Dwm</ITALICS>, the IRIS Extended Motif Window Manager. This chapter describes the look, interactions, and behaviors that your application's windows should support. (For information on individual window components, see <INDEXTARGET ID="ch03.windows2"><!-- POSTPROCESSDATA: ch03.windows2|windows:Indigo Magic environmentDesktop:windows. <ITALICS>See </ITALICS>windows --><INDEXTARGET ID="ch03.windows3"><!-- POSTPROCESSDATA: ch03.windows3|applications:windows --><XREF IDREF="71076" TYPE="TITLE">Chapter&nbsp;6, &ldquo;Application Windows,&rdquo;</XREF> and <XREF IDREF="95140" TYPE="TITLE">Chapter&nbsp;9, &ldquo;Controls.&rdquo;</XREF>) This chapter covers the following topics:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="17675" TYPE="TITLE">&ldquo;The IRIX Interactive Desktop Look: Graphic Features and Schemes&rdquo;</XREF> discusses general characteristics of windows, including the IRIX Interactive Desktop enhanced look provided by the IRIS IM toolkit and its advantages, and color and font schemes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="38970" TYPE="TITLE">&ldquo;Application Window Categories and Characteristics&rdquo;</XREF> defines the categories of windows in the IRIX Interactive Desktop environment and presents several models of applications using the various window types. It also lists the required window decorations and Window menu for each window category, prescribes how to choose labels for title bars, and discusses window size and placement issues.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="59672" TYPE="TITLE">&ldquo;Keyboard Focus Across Windows&rdquo;</XREF> establishes the <ITALICS>4Dwm</ITALICS> default keyboard focus policy across windows as implicit, and describes the behavior for applications that need to maintain control of the pointer while it's outside of the application's windows.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="90668" TYPE="TITLE">&ldquo;Minimized Windows&rdquo;</XREF> provides ideas for designing minimized window images, describes how to choose labels for minimized windows, and discusses application behavior while minimized.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="53752" TYPE="TITLE">&ldquo;Desks&rdquo;</XREF> describes the tool that provides users with multiple virtual screens or <ITALICS>desks</ITALICS>. It covers the design implications for your application windows, which can be distributed over these multiple desks.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="17063" TYPE="TITLE">&ldquo;Session Management&rdquo;</XREF> describes the <ITALICS>4Dwm</ITALICS> session manager and the implications of allowing users to log out while your application is running and return automatically to the same state upon subsequent login.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17675">The IRIX Interactive Desktop Look: Graphic Features and Schemes</TITLE><PARAGRAPH>When using the IRIS IM user interface toolkit, you can choose one of two different appearances for your application: <INDEXTARGET ID="ch03.windows4"><!-- POSTPROCESSDATA: ch03.windows4|appearance, Indigo Magic. <ITALICS>See</ITALICS> Indigo Magic look --><INDEXTARGET ID="ch03.windows5"><!-- POSTPROCESSDATA: ch03.windows5|look, Indigo Magic. <ITALICS>See</ITALICS> Indigo Magic look --><INDEXTARGET ID="ch03.windows6"><!-- POSTPROCESSDATA: ch03.windows6|Indigo Magic look --><INDEXTARGET ID="ch03.windows7"><!-- POSTPROCESSDATA: ch03.windows7|applications:appearance --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the IRIX Interactive Desktop look (preferred by Silicon Graphics)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the basic OSF/Motif look</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The IRIX Interactive Desktop look provides an attractive, 3D look for your application and the default colors and fonts used by the IRIX Interactive Desktop. The two components to the IRIX Interactive Desktop look are described below: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="47013" TYPE="TITLE">&ldquo;Enhanced Graphics in the IRIX Interactive Desktop Look&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="78166" TYPE="TITLE">&ldquo;Schemes for Colors and Fonts&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="47013">Enhanced Graphics in the IRIX Interactive Desktop Look</TITLE><PARAGRAPH>The IRIX Interactive Desktop look contains a number of graphic modifications made to the standard IRIS IM interface. These modifications improve the appearance and ease of use of applications. They have no impact on the component layout and require minimal work on the part of the developer. Some of the differences between the IRIX Interactive Desktop look and the standard IRIS IM look appear in <XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>. In comparison, the IRIX Interactive Desktop look:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Uses smooth shading with a rounded dimensional look to create a high-quality visual appearance. Numerous sharp bevels, such as those found in standard Motif components, detract from rather than add to the visual presentation of an application. (See <INDEXTARGET ID="ch03.windows8"><!-- POSTPROCESSDATA: ch03.windows8|widgets:shading in Indigo Magic lookshading:in Indigo Magic look --><XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>A.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Adds locate highlight (the object brightens as the pointer passes over it) so that users can tell which components are live functional objects and which are passive graphics or are disabled. Locate highlight also gives users feedback as to whether or not the application is listening.<INDEXTARGET ID="ch03.windows9"><!-- POSTPROCESSDATA: ch03.windows9|locate highlight --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Adds additional visual feedback for selected checkboxes and radio buttons. A distinct red arrow and a blue triangle clearly indicate a selected checkbox and radio button, respectively (see <INDEXTARGET ID="ch03.windows10"><!-- POSTPROCESSDATA: ch03.windows10|radio buttons:Indigo Magic lookcheckboxes:Indigo Magic look --><XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>A).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Enhances scrollbars by providing a grip on the slider used in scrollbars and a temporarily indented impression to indicate the original location of the slider during the scrolling process (see <INDEXTARGET ID="ch03.windows11"><!-- POSTPROCESSDATA: ch03.windows11|scrollbars:Indigo Magic look --><XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>C). The grip makes it easier for users to recognize the slider as something to be dragged rather than a button to be pressed. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Uses a stroked underline to indicate mnemonics in menus simply to give the look of an application some pizazz (see <INDEXTARGET ID="ch03.windows12"><!-- POSTPROCESSDATA: ch03.windows12|menus:Indigo Magic look --><XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>D).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Provides a more consolidated treatment for composite objects. For example, the IRIX Interactive Desktop look visually integrates the arrow stepper buttons in scrollbars with the scrollbars themselves to give a less cluttered look. In addition, the scrollbars are visually integrated with the client pane as much as possible to make the whole assembly appear as a single, integrated unit (see <XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>C). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Uses decals instead of stacked, 3D elements to make it easier for users to see the components (see <XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>B). There is no gratuitous use of 3D such as the raised arrows and rectangular option buttons in standard Motif.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Renders black outlines around stand-alone widgets to improve the readability and perception of adjoining color areas (see <INDEXTARGET ID="ch03.windows13"><!-- POSTPROCESSDATA: ch03.windows13|widgets:outlines in Indigo Magic look --><XREF IDREF="15859" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF>B and C). For example, the black outline around buttons and scrollbars make them stand out from a window's background. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Uses closely grouped dialog buttons that are right justified. This style makes the buttons easier to read, and the close grouping may reduce mouse motion.<INDEXTARGET ID="ch03.windows14"><!-- POSTPROCESSDATA: ch03.windows14|buttons:right justificationjustification:dialog buttonsdialogs:justification of buttons --></PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For details on how to obtain the graphic enhancements of the IRIX Interactive Desktop look, see Chapter&nbsp;2, &ldquo;Getting the IRIX Interactive Desktop Look,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>. For guidance on designing other aspects of your application windows, such as general layout principles and use of controls, see <XREF IDREF="71076" TYPE="TITLE">Chapter&nbsp;6, &ldquo;Application Windows&rdquo;</XREF> and <XREF IDREF="95140" TYPE="TITLE">Chapter&nbsp;9, &ldquo;Controls.&rdquo;</XREF></PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm4 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-4.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-1"><PREFIX>Figure 3-1 </PREFIX><XREFTARGET ID="15859">Examples of Graphic Modifications in the IRIX Interactive Desktop Look&space;<INDEXTARGET ID="ch03.windows15"><!-- POSTPROCESSDATA: ch03.windows15|Indigo Magic look:examples --></CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="78166">Schemes for Colors and Fonts</TITLE><PARAGRAPH>In addition to the graphic modifications described in the previous section, <INDEXTARGET ID="ch03.windows16"><!-- POSTPROCESSDATA: ch03.windows16|schemescolor schemesfont schemes --><XREF IDREF="47013" TYPE="TITLE">&ldquo;Enhanced Graphics in the IRIX Interactive Desktop Look,&rdquo;</XREF> the IRIX Interactive Desktop look includes <ITALICS>schemes</ITALICS>. A <ITALICS>scheme</ITALICS> is a pre-packaged collection of colors and fonts that users can apply to application windows.</PARAGRAPH>
<PARAGRAPH>Schemes deliver several benefits to users. When all applications on a workstation use schemes, users can conveniently customize their environment. The schemes are designed with an eye to effective use of color, taking into account both usability and aesthetic considerations. Multiple schemes are provided to address such problems as red/green color-blindness, monochrome X-terminals, and user preference for light or dark text. A user changes the scheme for the desktop by selecting the new scheme from the control panel shown in . (This control panel is accessed from the Desktop->Customize cascading menu in the Toolchest.)</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm5 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-5.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-2"><PREFIX>Figure 3-2 </PREFIX><XREFTARGET ID="36463">Scheme Setting Control Panel</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Using schemes also benefits you as a developer by leveraging the work that has already been done on appropriate color and font choices. Using schemes eliminates worrying about different display resolutions, gamma values, user preferences, or most style guide color and font issues.</PARAGRAPH>
<PARAGRAPH>The model for using schemes as a developer is to specify color and font choices as abstract names from the predefined scheme color and font palettes instead of hard-coding specific color and font values. Then, when the user specifies a scheme, the palette entries are mapped to specific RGB color and font values. </PARAGRAPH>
<PARAGRAPH>By default, the IRIX Interactive Desktop comes up in the IRIX Interactive Desktop scheme. This scheme is organized around a neutral gray palette with the typographically neutral Helvetica font. Using neutral colors for standard user interface elements preserves the use of color for the application's content areas. </PARAGRAPH>
<PARAGRAPH>Schemes are meant to apply to any region of an application window built with the standard toolkit components. Don't use schemes for application client areas which are content specific&mdash;for example, a rendering window, a movie player, or a molecular modeler. The colors in such client areas will be application-specific and not subject to change when a user selects a new scheme.</PARAGRAPH>
<PARAGRAPH>For information on supplying schemes in your application, see Chapter&nbsp;3, &ldquo;Using Schemes,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="95618">IRIX Interactive Desktop Look Guidelines</TITLE><PARAGRAPH><BOLD>When designing the look for your application . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use the IRIX Interactive Desktop look rather than the standard IRIS IM look.</CHECKOFFITEM>
<CHECKOFFITEM>Use the pre-packaged color and font schemes supplied by Silicon Graphics rather than designing your own colors and fonts. </CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38970">Application Window Categories and Characteristics</TITLE><PARAGRAPH>This section defines the four categories of windows in the IRIX Interactive Desktop environment; presents four models of applications using these window types; and lists the decorations, Window menus, and behavior required for each window type. Specifically, this section covers:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="82170" TYPE="TITLE">&ldquo;Application Window Categories&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="67450" TYPE="TITLE">&ldquo;Application Models&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="56252" TYPE="TITLE">&ldquo;Window Title Bar&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="32339" TYPE="TITLE">&ldquo;Window Size&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="11715" TYPE="TITLE">&ldquo;Window Placement&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="82170">Application Window Categories</TITLE><PARAGRAPH>The <INDEXTARGET ID="ch03.windows17"><!-- POSTPROCESSDATA: ch03.windows17|windows:categoriescategories:windows --><INDEXTARGET ID="ch03.windows18"><!-- POSTPROCESSDATA: ch03.windows18|primary windows. <ITALICS>See</ITALICS> main windows, co-primary windows, windows --><INDEXTARGET ID="ch03.windows19"><!-- POSTPROCESSDATA: ch03.windows19|secondary windows. <ITALICS>See</ITALICS> support windows, dialogs, windows --><DOCTITLE>OSF/Motif Style Guide </DOCTITLE>refers to two categories of windows: <ITALICS>primary windows</ITALICS> and <ITALICS>secondary windows</ITALICS>. The IRIX Interactive Desktop environment subdivides each of these categories to yield two additional categories useful in many applications. There are two types of primary windows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A <INDEXTARGET ID="ch03.windows20"><!-- POSTPROCESSDATA: ch03.windows20|main windows --><INDEXTARGET ID="ch03.windows21"><!-- POSTPROCESSDATA: ch03.windows21|main windows:<ITALICS>See also</ITALICS> windowsmain windows:0 --><ITALICS>main primary window</ITALICS> serves as the application's main controlling window. It's used to view or manipulate data, get access to other windows within the application, and kill the process when users quit. There's only one main primary window per application (and sometimes it isn't visible to users). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A <INDEXTARGET ID="ch03.windows22"><!-- POSTPROCESSDATA: ch03.windows22|co-primary windows --><INDEXTARGET ID="ch03.windows23"><!-- POSTPROCESSDATA: ch03.windows23|co-primary windows:<ITALICS>See also</ITALICS> windowsco-primary windows:0 --><ITALICS>co-primary window</ITALICS> is used for major data manipulation or viewing of data outside of the main window. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>There are two types of secondary windows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A <INDEXTARGET ID="ch03.windows24"><!-- POSTPROCESSDATA: ch03.windows24|support windows --><INDEXTARGET ID="ch03.windows25"><!-- POSTPROCESSDATA: ch03.windows25|support windows:<ITALICS>See also</ITALICS> windowssupport windows:0 --><ITALICS>support window</ITALICS> is a <ITALICS>persistent</ITALICS> special-purpose window. It typically contains a control panel or tool palette that operates directly on data in a primary window. It is used repeatedly. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A <INDEXTARGET ID="ch03.windows26"><!-- POSTPROCESSDATA: ch03.windows26|dialogs --><INDEXTARGET ID="ch03.windows27"><!-- POSTPROCESSDATA: ch03.windows27|dialogs:<ITALICS>See also</ITALICS> windowsdialogs windows:0 --><ITALICS>dialog</ITALICS> is a <ITALICS>transient</ITALICS> window, typically used for short, quick, user input, such as an action confirmation, or system output, as in a warning message. It may be user-requested or application-generated.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67450">Application Models</TITLE><PARAGRAPH>Although there can be many combinations in an application of the four window types discussed in the previous section (main, co-primary, support, and dialog windows), most applications can be classified as fitting one of four basic models. The distinguishing factors between the models are: <INDEXTARGET ID="ch03.windows28"><!-- POSTPROCESSDATA: ch03.windows28|application models --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>whether they can have one or multiple documents (files) open at a time</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>&space;their use of primary windows</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>The term <ITALICS>document</ITALICS> means a grouping of data and shouldn't be thought of as simply a text-oriented file. It covers such data types as film clips, audio segments, and Inventor scenes. </NOTE>
<PARAGRAPH>These models are illustrated and discussed in more detail in <XREF IDREF="67644" TYPE="TITLE">&ldquo;Application Models&rdquo; in Chapter&nbsp;6</XREF>. For information about how to implement the various models, see &ldquo;Implementing an Application Model&rdquo; in Chapter&nbsp;5 in the<DOCTITLE>&space;IRIX Interactive Desktop Integration Guide</DOCTITLE>. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Single Document, One Primary&rdquo; Application Model</TITLE><PARAGRAPH>&ldquo;Single document, one primary&rdquo; is the most basic model&mdash;it accomplishes all of its tasks within the main window and uses as many support windows and dialogs as needed. Users can work on only one document at a time. Thus, when a user has one document open and opens a second document, the second document replaces the first. IRIS Showcase operates in this manner.<INDEXTARGET ID="ch03.windows29"><!-- POSTPROCESSDATA: ch03.windows29|&ldquo;single document, one primary&rdquo; application model --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Single Document, Multiple Primaries&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;single document, multiple primaries&rdquo; model uses both main and co-primary windows to accomplish major tasks. In this model, the co-primary windows perform different functions. MediaMail is an example of this model. Its main window lets users select electronic mail messages from a folder and perform actions on them such as viewing, printing, deleting, and sorting. Its Compose and Message windows are typical of co-primary windows with different functions designed to support the functionality of the main window. In this model, each primary window has its own menu bar tailored specifically to the functions in that window.<INDEXTARGET ID="ch03.windows30"><!-- POSTPROCESSDATA: ch03.windows30|&ldquo;single document, multiple primaries&rdquo; application model --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Multiple Document, Visible Main&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;multiple document, visible main&rdquo; model has a main window that is mostly used to launch co-primary windows. These co-primary windows are identical to each other and perform the same functions on different files or documents. Each co-primary window has its own menu bar. IRIS InSight is an example of this model. Its main window lets users launch co-primary viewing windows, browse available files, and conduct global searches through these files. The co-primary windows are used for viewing online books. <INDEXTARGET ID="ch03.windows31"><!-- POSTPROCESSDATA: ch03.windows31|&ldquo;multiple document, visible main&rdquo; application model --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>&ldquo;Multiple Document, No Visible Main&rdquo; Application Model</TITLE><PARAGRAPH>The &ldquo;multiple document, no visible main&rdquo; model is identical to the &ldquo;multiple document, visible main&rdquo; model except that the main window is invisible to the user and new co-primary windows are launched from co-primary windows that are already open. Users open one document and leave it open while opening others. When the last open document is closed, the process is killed.<INDEXTARGET ID="ch03.windows32"><!-- POSTPROCESSDATA: ch03.windows32|&ldquo;multiple document, no visible main&rdquo; application model --></PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="85826">Window Decorations and the Window Menu</TITLE><PARAGRAPH>Users primarily interact with windows on the IRIX Interactive Desktop through the window decorations and Window menu, which <INDEXTARGET ID="ch03.windows33"><!-- POSTPROCESSDATA: ch03.windows33|windows:decorationsdecorations:windows --><INDEXTARGET ID="ch03.windows34"><!-- POSTPROCESSDATA: ch03.windows34|windows:menu (in title bar)menus:window (in title bar) --><INDEXTARGET ID="ch03.windows35"><!-- POSTPROCESSDATA: ch03.windows35|main windows:decorationsmain windows:menu (in title bar) --><INDEXTARGET ID="ch03.windows36"><!-- POSTPROCESSDATA: ch03.windows36|co-primary windows:decorationsco-primary windows:menu (in title bar) --><INDEXTARGET ID="ch03.windows37"><!-- POSTPROCESSDATA: ch03.windows37|support windows:decorationssupport windows:menu (in title bar) --><INDEXTARGET ID="ch03.windows38"><!-- POSTPROCESSDATA: ch03.windows38|dialogs:decorationsdialogs:menu (in title bar)decorations:dialogs --><ITALICS>4Dwm</ITALICS>, the IRIS window manager, places on each window. The decorations and Window menu entries vary according to the category of the window (see <XREF IDREF="82170" TYPE="TITLE">&ldquo;Application Window Categories&rdquo;</XREF> earlier in this chapter) and whether any of the components in the window are resizable. <XREF IDREF="44435" TYPE="GRAPHIC">Figure&nbsp;3-3</XREF> shows the decorations for a typical main window. For complete details of the behavior of each of the window decorations, see Section 7.3, &ldquo;Window Decorations,&rdquo; in the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm6 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-6.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-3"><PREFIX>Figure 3-3 </PREFIX><XREFTARGET ID="44435">Features of a Typical Main Primary Window &space;<INDEXTARGET ID="ch03.windows39"><!-- POSTPROCESSDATA: ch03.windows39|main windows:example --></CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The recommended decorations and Window menu entries for each category of window are shown in <XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF>. To meet these requirements, you may have to modify both the default window decorations and Window menu entries for at least some of your application windows. For information on modifying the default window decorations and Window menu entries, see Chapter&nbsp;5, &ldquo;Window, Session, and Desk Management,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>. <XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF> also lists the keyboard accelerators and mnemonics provided by <ITALICS>4Dwm</ITALICS> for each Window menu item. These keyboard accelerators are reserved; do not assign them to other functions in your application.</PARAGRAPH>
<PARAGRAPH>The behavior of the window decorations and Window menu entries is consistent with the definitions in Section 7.3 of the <DOCTITLE>OSF/Motif Style Guide,</DOCTITLE> with two notable differences:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><INDEXTARGET ID="ch03.windows40"><!-- POSTPROCESSDATA: ch03.windows40|&ldquo;Raise&rdquo; option (in window menu) --><ITALICS>4Dwm</ITALICS> Window menus include the entry &ldquo;Raise.&rdquo; &ldquo;Raise&rdquo; allows the user to move the window to the top of the window hierarchy, making it completely visible (in contrast to &ldquo;Lower&rdquo;). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>&ldquo;Exit&rdquo; lets users quit the application completely from a primary window. Your application must do all the appropriate cleanup work for an exit from the Window menu, such as prompting the user whether to save changes to a file. The behavior of &ldquo;Exit&rdquo; in the Window menu is the same as that of &ldquo;Exit&rdquo; in the File menu. See <INDEXTARGET ID="ch03.windows41"><!-- POSTPROCESSDATA: ch03.windows41|&ldquo;Exit&rdquo; option (in window menu) --><INDEXTARGET ID="ch03.windows42"><!-- POSTPROCESSDATA: ch03.windows42|&ldquo;Close&rdquo; option (in window menu) --><XREF IDREF="38726" TYPE="TITLE">&ldquo;File Menu&rdquo; in Chapter&nbsp;8</XREF> for information on the File menu. (Note that the &ldquo;Close&rdquo; entry on a co-primary window closes that window and any associated support windows and dialogs. It doesn't quit the application.)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The Window menu entries are based on the functionality available for that type of window. For example, users can't exit the application from support or dialog windows, so these window types don't include an &ldquo;Exit&rdquo; entry. If a window can't be resized, it doesn't need the &ldquo;Size&rdquo; entry or the &ldquo;Maximize&rdquo; entry in its Window menu. (To eliminate the ability of a window to be resized, set the maximum and minimum window sizes equal to the default window size. See <XREF IDREF="32339" TYPE="TITLE">&ldquo;Window Size&rdquo;</XREF> later in this chapter.) Dialogs can't be minimized independently of their parent windows and thus don't have a &ldquo;Minimize&rdquo; entry.</PARAGRAPH>
<TABLE COLUMNS="5"><CAPTION LBL="3-1"><PREFIX>Table 3-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="68452">Window Decorations and Window Menu Entries by Window Category </CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Window Decorations and 
Window Menu Entries</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Main Windows</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Co-Primary Windows</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Support Windows</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Dialogs</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Window menu button</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows43"><!-- POSTPROCESSDATA: ch03.windows43|&ldquo;Restore&rdquo; option (in window menu) --><BOLD>&ldquo;Restore Alt+F5&rdquo;</BOLD>
<SUPERSCRIPT></SUPERSCRIPT><SUPERSCRIPT></SUPERSCRIPT>
<TABLEXREF IDREF="ch03.windowsTF0a">a</TABLEXREF><SUPERSCRIPT></SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required<SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required<SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows44"><!-- POSTPROCESSDATA: ch03.windows44|&ldquo;Move&rdquo; option (in window menu) --><BOLD>&ldquo;Move Alt+F7&rdquo;</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows45"><!-- POSTPROCESSDATA: ch03.windows45|&ldquo;Size&rdquo; option (in window menu) --><INDEXTARGET ID="ch03.windows46"><!-- POSTPROCESSDATA: ch03.windows46|resize handles (in title bar) --><BOLD>&ldquo;Size Alt+F8&rdquo; / &lbreak;
Resize handles</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Optional; use if user 
may need to expand 
work area or other 
components. If 
resizable, set minimum 
and maximum size 
limits.</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Optional; use if user 
may need to expand 
work area or other 
components. If 
resizable, set minimum 
and maximum size 
limits.</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Optional; use if user 
may need to expand 
any components, such 
as text input fields or 
scrolling lists. If 
resizable, set minimum 
and maximum size 
limits.</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Optional; use if user 
may need to expand 
any components, such 
as text input fields or 
scrolling lists. If 
resizable, set minimum 
and maximum size 
limits.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows47"><!-- POSTPROCESSDATA: ch03.windows47|&ldquo;Minimize&rdquo; option (in window menu) --><INDEXTARGET ID="ch03.windows48"><!-- POSTPROCESSDATA: ch03.windows48|minimize button (in title bar) --><BOLD>&ldquo;Minimize Alt+F9&rdquo; / 
Minimize button</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required </PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Don't use</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Don't use</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows49"><!-- POSTPROCESSDATA: ch03.windows49|&ldquo;Maximize&rdquo; option (in window menu) --><INDEXTARGET ID="ch03.windows50"><!-- POSTPROCESSDATA: ch03.windows50|maximize button (in title bar) --><BOLD>&ldquo;Maximize Alt+F10&rdquo; / 
Maximize button</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Use only if there's a 
&ldquo;Size&rdquo; entry.</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Use only if there's a 
&ldquo;Size&rdquo; entry.</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Use only if there's a 
&ldquo;Size&rdquo; entry.</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Use only if there's a 
&ldquo;Size&rdquo; entry.</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows51"><!-- POSTPROCESSDATA: ch03.windows51|&ldquo;Raise&rdquo; option (in window menu) --><BOLD>&ldquo;Raise Alt+F2&rdquo;</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows52"><!-- POSTPROCESSDATA: ch03.windows52|&ldquo;Lower&rdquo; option (in window menu) --><BOLD>&ldquo;Lower Alt+F3&rdquo;</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows53"><!-- POSTPROCESSDATA: ch03.windows53|&ldquo;Close&rdquo; option (in window menu) --><BOLD>&ldquo;Close Alt+F4&rdquo;</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Don't use; not relevant 
for main windows.</PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Required</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH><INDEXTARGET ID="ch03.windows54"><!-- POSTPROCESSDATA: ch03.windows54|&ldquo;Exit&rdquo; option (in window menu) --><BOLD>&ldquo;Exit Alt+F12&rdquo;</BOLD></PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="99"><PARAGRAPH>Required; closes all 
windows for this 
application and quits. </PARAGRAPH>
</CELL>
<CELL LEFT="220" WIDTH="99"><PARAGRAPH>Optional; use if users 
can quit application 
from this window.</PARAGRAPH>
</CELL>
<CELL LEFT="325" WIDTH="99"><PARAGRAPH>Don't use</PARAGRAPH>
</CELL>
<CELL LEFT="430" WIDTH="99"><PARAGRAPH>Don't use</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
<TABLEFOOTNOTE LBL="a" ID="ch03.windowsTF0a">This entry always appears in the Window menu, and it's automatically disabled if there's no &ldquo;Maximize&rdquo; entry; this default behavior can't be 
changed.</TABLEFOOTNOTE>
</TABLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="56252">Window Title Bar</TITLE><PARAGRAPH>By default, all windows on the IRIX Interactive Desktop have a title bar that contains a label for the window. The default label used in the title bar (the application name) rarely provides enough information for users to be able to distinguish one window from another. Label your title bars according to the rules shown below to help your users distinguish among windows belonging to the same application as well as instances of the same application. (For information on how to set the label in the title bar, see &ldquo;Interacting With the Window and Session Manager&rdquo; in Chapter&nbsp;5 of the <INDEXTARGET ID="ch03.windows55"><!-- POSTPROCESSDATA: ch03.windows55|windows:title bar labelstitle bar labels --><DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.) </PARAGRAPH>
<PARAGRAPH>In general, use the title bar label to identify the window; don't use it to display general status (such as current page number or viewing mode) or application-critical information. Using the title bar to display information can cause problems. For example:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The title bar may be covered by another window or off the screen. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Users aren't accustomed to looking for status information in the title bar, so they`re likely to overlook it if your application displays it there.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>It's expensive for the application to update the title bar continuously.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For more information on where to place status information or application-critical information in your application window's title bars, see <XREF IDREF="30855" TYPE="TITLE">&ldquo;Status Areas in Primary Windows&rdquo; in Chapter&nbsp;6</XREF>.</PARAGRAPH>
<PARAGRAPH>The label you put in the title bar is also used in the Desks Overview window (see <INDEXTARGET ID="ch03.windows56"><!-- POSTPROCESSDATA: ch03.windows56|Desks Overview:window titles, and --><XREF IDREF="55393" TYPE="TITLE">&ldquo;Desks&rdquo;</XREF> later in this chapter). By default, as a user moves the pointer over the thumbnail window sketches in the Desks Overview, the thumbnail window's title bar label displays as shown in <XREF IDREF="81978" TYPE="GRAPHIC">Figure&nbsp;3-4</XREF>. (Note that users can specify that the minimized window label be shown in the thumbnail sketches instead of the title bar label.) This further emphasizes the need for users to be able to distinguish windows using only the title bar information.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm7 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-7.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-4"><PREFIX>Figure 3-4 </PREFIX><XREFTARGET ID="81978">Title Bar Label Appearing in Desks Overview</CAPTION>
</FIGURE>
</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Rules for Labeling the Title Bar in Main Primary Windows</TITLE><PARAGRAPH>The rules for labeling title bars in main windows are illustrated in <INDEXTARGET ID="ch03.windows57"><!-- POSTPROCESSDATA: ch03.windows57|main windows:title bar labels --><XREF IDREF="12998" TYPE="GRAPHIC">Figure&nbsp;3-5</XREF>. </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>First determine if your application accesses document files. If not, use just the application name. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>If your application is document-based, use the application name followed by a colon (:) and the filename (or &ldquo;Untitled&rdquo; if it's a new file) as the label in the title bar. Unless you have a real need and enough room, don't include the full pathname in the title bar. Note that if you do include a filename in the label, you need to update the label whenever the file changes. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>If your application is displaying remotely, use the host name followed by a colon as a prefix to the title bar label determined above. Be sure to leave spaces between strings and colons in the label. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Don't use the version number in the title bar; make that information available from the &ldquo;Product Information&rdquo; entry in the Help menu (see <XREF IDREF="35470" TYPE="TITLE">&ldquo;Types of Online Help&rdquo; in Chapter&nbsp;4</XREF> for more information). </PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm2 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-2.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-5"><PREFIX>Figure 3-5 </PREFIX><XREFTARGET ID="12998">Labels for Main Window Title Bars </CAPTION>
</FIGURE>
</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="15724">Rules for Labeling the Title Bar in Windows Other Than Main</TITLE><PARAGRAPH>For those co-primary windows that are used to supplement the main window's functionality as in the &ldquo;single document, multiple primaries&rdquo; application model, use the application name and function in the format <INDEXTARGET ID="ch03.windows58"><!-- POSTPROCESSDATA: ch03.windows58|co-primary windows:title bar labelssupport windows:title bar labelsdialogs:title bar labels --><VARIABLE>AppName : Function</VARIABLE>. </PARAGRAPH>
<PARAGRAPH>Make sure that the function closely matches the entry in the menu or the label on the button that invokes it. If the co-primary window follows a multiple document model such as the &ldquo;multiple document, visible main&rdquo; application model or the &ldquo;multiple document, no visible main&rdquo; application model, use the format <VARIABLE>AppName : Filename</VARIABLE> (or <VARIABLE>AppName : </VARIABLE>Untitled if it's a new file). Unless you have a real need and enough room, don't include the full pathname in the title bar. </PARAGRAPH>
<PARAGRAPH>Support windows use the application name and the function in the format <VARIABLE>AppName : Function</VARIABLE>. Make sure that the function closely matches the entry in the menu or the label on the button that invokes it.</PARAGRAPH>
<PARAGRAPH>For dialog windows, use the application name, followed by the type of dialog in the format <VARIABLE>AppName : DialogType</VARIABLE>, where <VARIABLE>DialogType</VARIABLE> can be &ldquo;Prompt,&rdquo; &ldquo;Error,&rdquo; &ldquo;Warning,&rdquo; &ldquo;Question,&rdquo; &ldquo;Information,&rdquo; &ldquo;Working,&rdquo; or &ldquo;File Selection.&rdquo; (For information on dialogs, see <XREF IDREF="30192" TYPE="TITLE">Chapter&nbsp;10, &ldquo;Dialogs.&rdquo;</XREF>)</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32339">Window Size</TITLE><PARAGRAPH>The <INDEXTARGET ID="ch03.windows59"><!-- POSTPROCESSDATA: ch03.windows59|windows:sizesize:windows --><INDEXTARGET ID="ch03.windows60"><!-- POSTPROCESSDATA: ch03.windows60|minimum window sizemaximum window size --><ITALICS>4Dwm</ITALICS> window manager provides users with complete control over the size of application windows unless the application sets limits. Without a minimum window limit, users can shrink your windows to the point where they're unusable. With no maximum limit, users can expand a window to cover the full screen, potentially wasting valuable screen real estate. These extreme cases, along with a window at its default size, are illustrated in <XREF IDREF="55167" TYPE="GRAPHIC">Figure&nbsp;3-6</XREF>. Set appropriate maximum and minimum window sizes for all of your application windows. See &ldquo;Interacting With the Window and Session Manager&rdquo; in Chapter&nbsp;5 of the <DOCTITLE>IRIX Interactive Desktop Integration Guide.</DOCTITLE></PARAGRAPH>
<PARAGRAPH>In general, windows should be resizable only if they contain areas or components that a user might wish to resize, for example, a primary window with a resizable work area or a support window with a scrolling list or text input field. If a window does not contain resizable areas or components, then it shouldn't be resizable and you should set both the maximum and minimum size equal to the default size. Remember also to remove the Size and Maximize entries from the Window menu as described in <INDEXTARGET ID="ch03.windows61"><!-- POSTPROCESSDATA: ch03.windows61|windows:resize --><XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo;</XREF> earlier in this chapter. For more information on specific window components, see <XREF IDREF="95140" TYPE="TITLE">Chapter&nbsp;9, &ldquo;Controls.&rdquo;</XREF></PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm3 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-3.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-6"><PREFIX>Figure 3-6 </PREFIX><XREFTARGET ID="55167">Default Maximum and Minimum Window Size Examples </CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="11715">Window Placement</TITLE><PARAGRAPH>Users expect the placement of all primary windows to respond to the value of the Auto Window Placement option in the Window Settings control panel, as shown in . (Users access this control panel from the Desktop->Customize cascading menu in the Toolchest.) Support windows and dialogs are always placed automatically.<INDEXTARGET ID="ch03.windows62"><!-- POSTPROCESSDATA: ch03.windows62|windows:placementplacement:windows --><INDEXTARGET ID="ch03.windows63"><!-- POSTPROCESSDATA: ch03.windows63|Auto Window Placement --><INDEXTARGET ID="ch03.windows64"><!-- POSTPROCESSDATA: ch03.windows64|Window Settings control panelcontrol panels:Window Settings --></PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm8 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-8.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-7"><PREFIX>Figure 3-7 </PREFIX><XREFTARGET ID="82901">Setting Auto Window Placement</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>When auto window placement is on (the default), <COMMAND>4Dwm</COMMAND> automatically places an application's primary windows. If a primary window does not supply any position information, <COMMAND>4Dwm</COMMAND> by default places it in the upper left corner of the screen. When auto window placement is off, users expect to be able to interactively place all primary windows. In this case, a window displays initially as a red outline attached to the pointer at its upper left corner, allowing the user to place the window manually. The user places the window by moving the outline to the desired location on the screen and clicking the left mouse button. </PARAGRAPH>
<PARAGRAPH>To take advantage of the Auto Window Placement setting, you must supply <COMMAND>4Dwm</COMMAND> with a preferred window position for each primary window rather than a required window position. With a preferred window position, when Auto Window Placement is on, <ITALICS>4Dwm</ITALICS> places the window at its preferred position. When Auto Window Placement is off, <ITALICS>4Dwm</ITALICS> ignores the preferred position, allowing the user to place the window interactively. If the window has a required position, however, <ITALICS>4Dwm</ITALICS> always tries to place the window at this preferred position even when users want to place windows themselves.</PARAGRAPH>
<PARAGRAPH>Furthermore, users expect complete control when moving windows and should be able to move any of your application's windows anywhere on the desktop. Some applications try to &ldquo;help&rdquo; the user by repositioning the window programmatically; this strategy is never successful and instead ends up frustrating the user. </PARAGRAPH>
<PARAGRAPH>For details on how to set a preferred window placement, see &ldquo;Interacting With the Window and Session Manager&rdquo; in Chapter&nbsp;5 of the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="57875">Application Window Characteristic Guidelines</TITLE><PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows65"><!-- POSTPROCESSDATA: ch03.windows65|windows:characteristics guidelines --></BOLD><BOLD>In general, when deciding on the characteristics for your application windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Determine which category (main, co-primary, support, or dialog) each application window belongs to and assign characteristics appropriately.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows66"><!-- POSTPROCESSDATA: ch03.windows66|windows:decorations guidelines --></BOLD><BOLD>When setting up your window decorations . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Include a Window menu button for all windows.</CHECKOFFITEM>
<CHECKOFFITEM>Include resize handles only if the window contains resizable components such as work areas, scrolling lists, and text input fields.</CHECKOFFITEM>
<CHECKOFFITEM>Include a <BUTTON>Minimize</BUTTON> button for all primary windows. Do not include this button on support windows or dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Include a <BUTTON>Maximize</BUTTON> button only if the window contains resizable components.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH>(To see the above window decoration requirements arranged according to window type, see <XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF>.)</PARAGRAPH>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows67"><!-- POSTPROCESSDATA: ch03.windows67|windows:menus guidelines --></BOLD><BOLD>When designing the Window menus for your application windows . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Include &ldquo;Restore Alt+F5&rdquo; for all primary windows. Include it for support windows and dialogs only if the menu contains a &ldquo;Maximize&rdquo; entry.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Move Alt+F7&rdquo; for all windows.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Size Alt+F8&rdquo; and resize handles for windows that contain resizable components such as works areas, scrolling lists, and text input fields.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Minimize Alt+F9&rdquo; and the <BUTTON>Minimize</BUTTON> button for all primary windows. Do not include the Minimize entry for support windows or dialogs.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Maximize Alt+F10&rdquo; for windows that are resizable, that is, they have a &ldquo;Size Alt+F8&rdquo; entry.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Raise Alt+F2&rdquo; for all windows.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Lower Alt+F3&rdquo; for all windows.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Close Alt+F4&rdquo; for all windows except the main primary window.</CHECKOFFITEM>
<CHECKOFFITEM>Include &ldquo;Exit Alt+F12&rdquo; for the main primary window. Include &ldquo;Exit Alt+F12&rdquo; for those co-primary windows from which users can quit the application. &ldquo;Exit&rdquo; always has the same behavior, that is, it quits the application, no matter how it's activated. Don't include &ldquo;Exit&rdquo; for support windows or dialogs.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH>(To see the above Window menu requirements arranged according to window type, see <XREF IDREF="68452" TYPE="TABLE">Table&nbsp;3-1</XREF>.)</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Always use the default behaviors for the Window menu entries except for &ldquo;Exit.&rdquo; Don't add functionality to these commands. When users choose &ldquo;Exit,&rdquo; your application must perform any necessary clean up, such as prompting the user to save unsaved changes before quitting.</CHECKOFFITEM>
<CHECKOFFITEM>Don't add application-specific entries to this menu. Users don't expect application-specific entries in the Window menu.</CHECKOFFITEM>
<CHECKOFFITEM>Don't add a title to the Window menu.</CHECKOFFITEM>
<CHECKOFFITEM>Don't use the keyboard accelerators &lt;Alt-F2>, &lt;Alt-F3>, &lt;Alt-F4>, &lt;Alt-F5>, &lt;Alt-F7>, &lt;Alt-F8>, &lt;Alt-F9>, &lt;Alt-F10>, or &lt;Alt-F12> for other functions in your application. They are reserved for the <ITALICS>4Dwm</ITALICS> Window menu entries.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows68"><!-- POSTPROCESSDATA: ch03.windows68|windows:title bar label guidelines --></BOLD><BOLD>When specifying the label in the title bar . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>For all categories of windows, limit the length of each title bar label such that the entire label displays when the window is viewed at its default size.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include application-critical information or general status information in the title bar such as the current page number or whether a file is in view-only mode. </CHECKOFFITEM>
<CHECKOFFITEM>For main windows, first determine if your application uses document files. If it is not document-based, use the application name only. If it is document-based, use the application name followed by a colon and the filename (or Untitled if new file) in the format <VARIABLE>AppName : filename</VARIABLE> and update the label whenever the filename changes. Don't use the full pathname unless that information is required for users to distinguish one window from another. If your application is displaying remotely, add the host name followed by a colon at the beginning of the title bar label in the format <VARIABLE>Host : AppName ...</VARIABLE> .</CHECKOFFITEM>
<CHECKOFFITEM>Don't include full pathnames unless that information is required by users to distinguish one window from another. For remote applications, don't include domain information.</CHECKOFFITEM>
<CHECKOFFITEM>Don't use the version number in the title bar; make that information available from the &ldquo;Product Information&rdquo; entry in the Help menu.</CHECKOFFITEM>
<CHECKOFFITEM>For co-primary windows used in multiple document models, use the format <VARIABLE>AppName : Filename</VARIABLE> (or <VARIABLE>AppName : </VARIABLE>Untitled if a new file). For co-primary windows used in the &ldquo;single document, multiple primaries<VARIABLE>&rdquo; </VARIABLE>model, use the format <VARIABLE>AppName : Function</VARIABLE>. Make sure that the function matches the menu entry or the label on the button that invokes it. Don't use the full pathname unless that information is required for users to distinguish one window from another.</CHECKOFFITEM>
<CHECKOFFITEM>For support windows, use the application name and function in the format: <VARIABLE>AppName : Function</VARIABLE>. Make sure that the function closely matches the menu entry or the label on the button that invokes it. </CHECKOFFITEM>
<CHECKOFFITEM>For dialog windows, use the application name, followed by the type of dialog in the format: <VARIABLE>AppName : DialogType</VARIABLE>, where <VARIABLE>DialogType</VARIABLE> is &ldquo;Prompt,&rdquo; &ldquo;Error,&rdquo; &ldquo;Warning,&rdquo; &ldquo;Question,&rdquo; &ldquo;Information,&rdquo; &ldquo;Working,&rdquo; or &ldquo;File Selection.&rdquo;</CHECKOFFITEM>
<CHECKOFFITEM>Leave spaces between strings and colons in a label.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>For windows without title bars . . .<INDEXTARGET ID="ch03.windows69"><!-- POSTPROCESSDATA: ch03.windows69|windows:no title bar --></BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Display the &ldquo;Exit&rdquo; option with the right mouse button. </CHECKOFFITEM>
<CHECKOFFITEM>Allow users to resize the window with the left mouse button. </CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows70"><!-- POSTPROCESSDATA: ch03.windows70|windows:size guidelines --></BOLD><BOLD>When determining the default, minimum, and maximum sizes for your windows . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Specify a default size for each window.</CHECKOFFITEM>
<CHECKOFFITEM>If the window is resizable, specify a minimum size at which all controls and work areas will be visible and large enough to be usable. If the window is not resizable, set the minimum size equal to the default size.</CHECKOFFITEM>
<CHECKOFFITEM>If the window is resizable, specify a maximum size such that your application window doesn't expand to fill screen space unnecessarily. If the window is not resizable, set the maximum size equal to the default size.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows71"><!-- POSTPROCESSDATA: ch03.windows71|windows:placement guidelines --></BOLD><BOLD>When considering window placement . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Set a preferred window position for all primary windows. Don't set a required window position for primary windows. </CHECKOFFITEM>
<CHECKOFFITEM>Try to anticipate other application windows that may be displayed with your application and set your preferred default position appropriately.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="59672">Keyboard Focus Across Windows</TITLE><PARAGRAPH>As defined in the<INDEXTARGET ID="ch03.windows72"><!-- POSTPROCESSDATA: ch03.windows72|keyboard focuswindows:keyboard focus --><DOCTITLE>&space;OSF/Motif Style Guide</DOCTITLE>, the two types of keyboard focus (also referred to as input focus) include: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><INDEXTARGET ID="ch03.windows73"><!-- POSTPROCESSDATA: ch03.windows73|implicit focus --><ITALICS>implicit</ITALICS>, in which the keyboard focus tracks the pointer</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><INDEXTARGET ID="ch03.windows74"><!-- POSTPROCESSDATA: ch03.windows74|explicit focus --><ITALICS>explicit,</ITALICS> which requires the user to explicitly select (by clicking with the left mouse button) which window or component receives the keyboard focus</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The IRIX Interactive Desktop uses implicit focus when moving the keyboard focus across windows. Your application should work well under implicit focus and shouldn't require users to change the default keyboard focus policy to explicit. (Note that within windows, applications should use explicit focus to move the keyboard focus between components in the window. Guidelines for using explicit focus within windows are discussed in <XREF IDREF="50040" TYPE="TITLE">&ldquo;Keyboard Focus and Navigation&rdquo; in Chapter&nbsp;7</XREF>.) </PARAGRAPH>
<PARAGRAPH>Certain applications need to <INDEXTARGET ID="ch03.windows75"><!-- POSTPROCESSDATA: ch03.windows75|pointer grab --><ITALICS>grab the keyboard focus</ITALICS>, that is, use the pointer while it is outside of the application window&mdash;for example, applications performing screen captures. This is called <ITALICS>pointer grab</ITALICS> mode. </PARAGRAPH>
<PARAGRAPH>There are two recommended interaction models for pointer grab mode:<INDEXTARGET ID="ch03.windows76"><!-- POSTPROCESSDATA: ch03.windows76|pointer grab:single-action modelsingle-action pointer grab model --><INDEXTARGET ID="ch03.windows77"><!-- POSTPROCESSDATA: ch03.windows77|pointer grab:multiple-action modelmultiple-action pointer grab model --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><ITALICS>single-action</ITALICS>, which permits the user only one action to capture the data before returning to implicit focus</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><ITALICS>multiple-action</ITALICS>, which lets the user perform multiple actions while in pointer grab mode</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>In the multiple-action model, the user turns on a toggle to maintain keyboard focus while specifying the data to capture. In both the single- and multiple-action models, the application should change the pointer shape to indicate that the pointer belongs to a specific window and no longer adheres to implicit focus. (For a list of standard pointers, see <XREF IDREF="15568" TYPE="TITLE">&ldquo;Pointer Shapes and Colors&rdquo; in Chapter&nbsp;11</XREF>.)</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17496">Single-Action Pointer Grab Model</TITLE><PARAGRAPH>The InPerson desktop conferencing application is a good example of the single-action pointer grab model. The sequence in <XREF IDREF="69430" TYPE="GRAPHIC">Figure&nbsp;3-8</XREF> illustrates the single-action pointer grab where the action is to sweep out an area of the screen to be captured as an image. The user chooses the &ldquo;Snap Screen Area&rdquo; entry from the screen capture menu in the whiteboard's tool bar. The pointer changes to a sighting pointer (a camera with a cross hair) and the user can then drag a rectangle around the area of the screen that the user wants to capture as an image. When the user completes the single action of dragging, InPerson releases the pointer and it is no longer in pointer grab mode. Note that in pointer grab mode, the active window is the window that has grabbed the keyboard focus, regardless of where the pointer is positioned on the screen. </PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm9 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-9.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-8"><PREFIX>Figure 3-8 </PREFIX><XREFTARGET ID="69430">Single-Action Pointer Grab Example: Capture by Sweeping <INDEXTARGET ID="ch03.windows78"><!-- POSTPROCESSDATA: ch03.windows78|pointer grab:single-action, examplesingle-action pointer grab, example --></CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Multiple-Action Pointer Grab Model</TITLE><PARAGRAPH>The IRIS Showcase Image Gizmo, used for doing screen captures, is an example of the multiple-action pointer grab model. The IRIS Showcase Image Gizmo lets users capture an area of the screen as an image, then place that image in a IRIS Showcase document. The major difference between the Image Gizmo screen capture and the InPerson screen capture described in the previous section (<INDEXTARGET ID="ch03.windows79"><!-- POSTPROCESSDATA: ch03.windows79|pointer grab:multiple-action modelmultiple-action pointer grab model --><XREF IDREF="17496" TYPE="TITLE">&ldquo;Single-Action Pointer Grab Model&rdquo;</XREF>) is that the Image Gizmo allows a user to perform multiple actions when defining the screen capture region and not just a single action like InPerson. This allows users to grab the pointer, sweep out an area to capture, and make any adjustments to the capture area before releasing the pointer and returning to implicit focus mode.</PARAGRAPH>
<PARAGRAPH>The IRIS Showcase Image Gizmo provides an example of entering pointer grab mode. Here's the process:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>The user clicks the<BUTTON>&space;Sweep Area</BUTTON> button in the Image Gizmo. This changes the pointer to a camera with a cross hair, which is used as the sighting pointer. At this point, the sighting pointer is limited to the Image Gizmo window, that is, the user hasn't initiated pointer grab mode yet.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>The user enters pointer grab mode by clicking the <BUTTON>Grab Selection Focus</BUTTON> button. Once in pointer grab mode, the sighting pointer is no longer limited to the Image Gizmo window. Now when the user moves the pointer out of the Image Gizmo window, the Image Gizmo retains the keyboard focus and the sighting pointer continues to display.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>A better design would be to eliminate the step of requiring the user to click the <BUTTON>Grab Selection Focus</BUTTON> button and to instead have the Image Gizmo grab the keyboard focus when the user clicks the <BUTTON>Sweep Area</BUTTON> button.</NOTE>
</LIST>
<LIST><PARAGRAPH>The user drags a rectangle around the area of interest on the screen. At this point, the user is still in pointer grab mode and can redefine the area by dragging the boundaries of the current rectangle or sweeping out a completely new area.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>The user clicks the <BUTTON>Grab Image</BUTTON> button, which releases the pointer, completes the screen capture, and returns the user to implicit focus mode.</PARAGRAPH>
<PARAGRAPH><XREF IDREF="63084" TYPE="GRAPHIC">Figure&nbsp;3-9</XREF> shows this example during pointer grab mode. </PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm10 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-10.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-9"><PREFIX>Figure 3-9 </PREFIX><XREFTARGET ID="63084">Multiple-Action Pointer Grab Example <INDEXTARGET ID="ch03.windows80"><!-- POSTPROCESSDATA: ch03.windows80|pointer grab:multiple-action, examplemultiple-action pointer grab, example --></CAPTION>
</FIGURE>
</PARAGRAPH>
</LIST>
</ORDEREDLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Guidelines for Keyboard Focus Across Windows</TITLE><PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows81"><!-- POSTPROCESSDATA: ch03.windows81|keyboard focus:guidelines --></BOLD><BOLD>When designing your application windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Make sure that your application works well under implicit focus across windows.</CHECKOFFITEM>
<CHECKOFFITEM>Don't have your application move the pointer to another location on the screen. Always allow the user to control the position of the pointer on the screen.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When incorporating a &ldquo;pointer grab&rdquo; function into your application . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>If the user is always going to specify the data to capture with a single action such as a single mouse click or a single mouse drag, use the single-action pointer grab model; otherwise use the multiple-action pointer grab model.</CHECKOFFITEM>
<CHECKOFFITEM>Display a standard or modified sighting pointer whenever your application window grabs keyboard focus. This indicates that the keyboard focus belongs to your application's window and that the pointer isn't currently following implicit focus across windows.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="87201"><XREFTARGET ID="90668">Minimized Windows</TITLE><PARAGRAPH>Minimizing windows frees up screen area for other uses. On the IRIX Interactive Desktop, users minimize windows by clicking the <INDEXTARGET ID="ch03.windows82"><!-- POSTPROCESSDATA: ch03.windows82|windows:minimizedminimized windows --><BUTTON>Minimize</BUTTON> button in the window's title bar or choosing the &ldquo;Minimize&rdquo; entry from the Window menu. When a window is minimized, it's replaced by an 85x67-pixel representation with an identifying label of twelve characters or fewer. The <ITALICS>4Dwm</ITALICS> window manager determines the placement of all minimized windows. This section describes:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="80365" TYPE="TITLE">&ldquo;Choosing an Image for Your Minimized Window&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="46466" TYPE="TITLE">&ldquo;Labeling a Minimized Window&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="67243" TYPE="TITLE">&ldquo;Processing While Minimized&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="54212" TYPE="TITLE">&ldquo;Using the Minimized Window to Show Status&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Note that primary windows can be minimized independently of each other. Note also that dialogs and support windows become unmapped when their associated primary windows are minimized. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="80365">Choosing an Image for Your Minimized Window</TITLE><PARAGRAPH>It's important for users to be able to identify application windows readily when minimized. You need to define a specific image for your main window and any co-primary windows in your application. A good example in which users can easily associate the minimized window with the application appears in <INDEXTARGET ID="ch03.windows83"><!-- POSTPROCESSDATA: ch03.windows83|minimized windows:imagesimages:minimized windows --><XREF IDREF="90304" TYPE="GRAPHIC">Figure&nbsp;3-10</XREF>. In the example, the IRIS InSight viewer window uses an open book as its minimized window image with the name of the book as the label.</PARAGRAPH>
<PARAGRAPH><FIGURE><GRAPHIC FILE="fig.3-10.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-10"><PREFIX>Figure 3-10 </PREFIX><XREFTARGET ID="90304">Minimized Window Example: Good User Association With Application</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>If your application fits either of the single document application models discussed in <INDEXTARGET ID="ch03.windows84"><!-- POSTPROCESSDATA: ch03.windows84|minimized windows:images examplesimages:examples of minimized windows --><XREF IDREF="67450" TYPE="TITLE">&ldquo;Application Models&rdquo;</XREF> earlier in this chapter, provide separate images for all primary windows. If your application fits one of the multiple document models, then provide one image for the main window and a second image for the co-primary windows.</PARAGRAPH>
<PARAGRAPH>When choosing a minimized window image, use:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Marketing theme&mdash;If your application has a symbol used in packaging or marketing your product, you can use some or all of it to create an image. The IRIS Showcase minimized window is an example of this approach.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Window snapshots&mdash;If your application's main primary window layout is distinctive, you can use a snapshot of a recognizable portion of it, as in the Icon Catalog and Directory View window examples. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Symbolic theme&mdash;You can use a symbol that reflects the nature of your application. For example, the text editor <COMMAND>Jot</COMMAND> uses an image of a writing hand. The IRIS Insight online book viewer uses an image of a stack of books to represent the main library window.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Evocative image&mdash;You can use an image that's evocative of the function your application performs. For example, the minimized window image for the mouse control panel is an image of a mouse. The minimized window image for the background control panel is an image that uses a combination of the various background patterns available for users via this tool.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Examples of minimized windows appear in <XREF IDREF="79097" TYPE="GRAPHIC">Figure&nbsp;3-11</XREF>.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm12 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-12.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-11"><PREFIX>Figure 3-11 </PREFIX><XREFTARGET ID="79097">Minimized Window Examples</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Although it is desirable to keep some family resemblance between the minimized window and other elements of an application, it's a bad idea to use a snapshot of a desktop icon as an image for a minimized window. The problem is that users can mistake the minimized window for the real desktop icon. <XREF IDREF="67613" TYPE="GRAPHIC">Figure&nbsp;3-12</XREF> demonstrates this problem. The minimized window at the left (faked for this example) uses a snapshot of the application icon in its open state as its image. Users can confuse the minimized window with the application icon itself. The actual minimized window appears at the right of the figure, demonstrating good design. It reuses the magician's hat theme, showing the family resemblance, but uses a different rendition of the hat to avoid confusion.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm13 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-13.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-12"><PREFIX>Figure 3-12 </PREFIX><XREFTARGET ID="67613">Minimized Window Example: Incorrect Design</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Whichever theme you choose, make sure that the significance of your image will be grasped in foreign countries and will not offend international users. Images that are too literal will not be understood by an international audience. For example, the minimized window in <XREF IDREF="35209" TYPE="GRAPHIC">Figure&nbsp;3-13</XREF> is for a debugging application and uses an image, with an English acronym &ldquo;RIP,&rdquo; that represents dead bugs. This may not be readily apparent to some non-English speaking users.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm14 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-14.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-13"><PREFIX>Figure 3-13 </PREFIX><XREFTARGET ID="35209">Minimized Window Example: Design That's Too Literal</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>For information on creating and implementing minimized window images, see Chapter&nbsp;6, &ldquo;Customizing Your Application's Minimized Windows,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>&space;</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="46466">Labeling a Minimized Window</TITLE><PARAGRAPH>By default, the <INDEXTARGET ID="ch03.windows85"><!-- POSTPROCESSDATA: ch03.windows85|minimized windows:labelslabels:minimized windows --><ITALICS>4Dwm</ITALICS> window manager reuses the title bar label for the minimized window label. (The guidelines for specifying title bar labels are discussed in <XREF IDREF="56252" TYPE="TITLE">&ldquo;Window Title Bar&rdquo;</XREF> earlier in this chapter.) This doesn't usually work due to the space limit (approximately twelve characters) on the minimized window label. Thus, you will need to specify a label for each of your minimized windows. </PARAGRAPH>
<PARAGRAPH>Those applications that aren't document-based should use the application name as the minimized window label for the main window. Any minimized co-primary windows for these applications should use the label <VARIABLE>Function</VARIABLE>, where <VARIABLE>Function</VARIABLE> is the same function as in the co-primary window's title bar.</PARAGRAPH>
<PARAGRAPH>Applications that are document-based and follow the single-document models (see <XREF IDREF="67450" TYPE="TITLE">&ldquo;Application Models&rdquo;</XREF> earlier in this chapter) should use <VARIABLE>Filename</VARIABLE> (or &ldquo;Untitled&rdquo; for new files) for the minimized main window label. Any co-primary windows for these applications should use <VARIABLE>Function</VARIABLE> for the minimized window label, where <VARIABLE>Function</VARIABLE> is the same function as in the co-primary window's title bar.</PARAGRAPH>
<PARAGRAPH>Applications that are document-based and follow the multiple-document models (see <XREF IDREF="67450" TYPE="TITLE">&ldquo;Application Models&rdquo;</XREF> earlier in this chapter), should use the application name as the label for the main window (if this main window is visible). The co-primary windows in these models represent the multiple documents and should have the minimized window label<VARIABLE>&space;Filename</VARIABLE> (or &ldquo;Untitled&rdquo; for new files).</PARAGRAPH>
<PARAGRAPH>The minimized window label is also used in the Desks Overview window (see <XREF IDREF="55393" TYPE="TITLE">&ldquo;Desks&rdquo;</XREF> later in this chapter). The user can customize the Desks Overview so that moving the pointer over the thumbnail window sketches in the Desks Overview displays the minimized window labels for those windows. This further emphasizes the need for users to be able to distinguish windows using only the minimized window label.</PARAGRAPH>
<PARAGRAPH>For more information on specifying a label for a minimized window image, see Chapter&nbsp;6, &ldquo;Customizing Your Application's Minimized Windows,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67243">Processing While Minimized</TITLE><PARAGRAPH>Users generally expect an application to continue processing while its windows are minimized; when re-opened, the window's contents should have changed appropriately. Of course, it doesn't make sense for all types of functions to continue processing while the window is minimized. For example, you needn't keep moving a clock application's hands while it is minimized. It's up to you to determine which functions are appropriate for continued processing and which are inappropriate. Be sure to stop those functions that don't need to process as they can be a drain on CPU resources.<INDEXTARGET ID="ch03.windows86"><!-- POSTPROCESSDATA: ch03.windows86|minimized windows:processing while minimizedprocessing while minimizedapplications:processing while minimized --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="54212">Using the Minimized Window to Show Status</TITLE><PARAGRAPH>If it is typical for users to minimize your application's windows while processing continues, you may wish to use your minimized application window to indicate status. <INDEXTARGET ID="ch03.windows87"><!-- POSTPROCESSDATA: ch03.windows87|minimized windows:showing status --><XREF IDREF="19815" TYPE="GRAPHIC">Figure&nbsp;3-14</XREF> shows how to use the minimized window label to indicate status in an electronic mail application by showing the number of messages in a mail folder.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm15 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-15.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-14"><PREFIX>Figure 3-14 </PREFIX><XREFTARGET ID="19815">Minimized Window Example: Indicating Status With the Label&space;<INDEXTARGET ID="ch03.windows88"><!-- POSTPROCESSDATA: ch03.windows88|minimized windows:status example --></CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>It is also possible to change the minimized window image to show status, however this is quite difficult. For more information on changing minimized window labels and images to show status, see Chapter&nbsp;6, &ldquo;Customizing Your Application's Minimized Windows,&rdquo; in the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Minimized Window Guidelines</TITLE><PARAGRAPH><INDEXTARGET ID="ch03.windows89"><!-- POSTPROCESSDATA: ch03.windows89|windows:minimized, guidelinesminimized windows:images guidelines --><BOLD>When designing images for your minimized primary windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use a color image rather than the standard two-color Motif bitmap.</CHECKOFFITEM>
<CHECKOFFITEM>Design your images to look best at the default size of 85x67 pixels.</CHECKOFFITEM>
<CHECKOFFITEM>If your application is based on a single document model, create separate images for each of the primary windows. If your application is based on a multiple document model, create one image for the main window and a second image to use for all co-primary windows. </CHECKOFFITEM>
<CHECKOFFITEM>Choose images that clearly identify the window that is minimized. If you have multiple images, make sure that the separate images work well together.</CHECKOFFITEM>
<CHECKOFFITEM>&space;Make sure that the images you use for minimized windows will be understood by an international audience.</CHECKOFFITEM>
<CHECKOFFITEM>Don't use a snapshot of the desktop icon for the image. This could be confused with the real icon.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows90"><!-- POSTPROCESSDATA: ch03.windows90|minimized windows:labels guidelines --></BOLD><BOLD>When choosing labels for your minimized primary windows . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Limit the label to approximately twelve characters. If you need a few more characters than this, check that your label will fit with the default size and font for minimized windows (the label may be truncated).</CHECKOFFITEM>
<CHECKOFFITEM>If your application is not document-based, use the application name as the minimized window label for the minimized main window. Use the label <VARIABLE>Function</VARIABLE> for minimized co-primary windows where <VARIABLE>Function</VARIABLE> is the same function as in the co-primary window's title bar.</CHECKOFFITEM>
<CHECKOFFITEM>If your application is document-based and follows one of the single-document models, use <VARIABLE>Filename</VARIABLE> (or &ldquo;Untitled&rdquo; for new files) for the minimized main window label. Use <VARIABLE>Function</VARIABLE> for minimized co-primary window labels where <VARIABLE>Function</VARIABLE> is the same function as in the co-primary window's title bar.</CHECKOFFITEM>
<CHECKOFFITEM>If your application is document-based and follows one of the multiple-document models, use the application name as the label for the main window (if it is visible). The co-primary windows in these models represent the multiple documents and should have the minimized window label<VARIABLE>&space;Filename</VARIABLE> (or &ldquo;Untitled&rdquo; for new files).</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows91"><!-- POSTPROCESSDATA: ch03.windows91|minimized windows:behavior guidelines --></BOLD><BOLD>When determining the behavior for a window that the user has chosen to minimize . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Decide which operations should and should not continue to be processed while the window is minimized. </CHECKOFFITEM>
<CHECKOFFITEM>Indicate status with the minimized window label if your application is typically minimized during long processes.</CHECKOFFITEM>
<CHECKOFFITEM>Use the default screen locations supplied by <ITALICS>4Dwm</ITALICS> for the minimized window. Don't specify your own screen location.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="55393"><XREFTARGET ID="53752">Desks</TITLE><PARAGRAPH>The IRIX Interactive Desktop provides users with a handy tool called Desks Overview for organizing their work (see <INDEXTARGET ID="ch03.windows92"><!-- POSTPROCESSDATA: ch03.windows92|Desks --><INDEXTARGET ID="ch03.windows93"><!-- POSTPROCESSDATA: ch03.windows93|Desks Overview --><XREF IDREF="94809" TYPE="GRAPHIC">Figure&nbsp;3-15</XREF>). The Desks Overview application allows users to create multiple virtual screens (desks). The user can place any primary window (main or co-primary) on any desk. The window appears in the thumbnail sketch in the Desks Overview window. Support windows and dialogs don't appear in these thumbnail sketches. </PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm16 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-16.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-15"><PREFIX>Figure 3-15 </PREFIX><XREFTARGET ID="94809">Desks Overview Window<INDEXTARGET ID="ch03.windows94"><!-- POSTPROCESSDATA: ch03.windows94|Desks Overview:example --></CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>There are several things you need to know about desks and the corresponding effects on the design of your application.</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><INDEXTARGET ID="ch03.windows95"><!-- POSTPROCESSDATA: ch03.windows95|minimized windows:processing while minimizedprocessing while minimizedapplications:processing while minimized --><ITALICS>4Dwm</ITALICS> treats application windows on desks other than the current one as if they are minimized. The windows are no longer mapped to the screen display and the application is informed that it's unmapped. This emphasizes how important it is for you to decide which operations continue processing when the application is in an unmapped (minimized) state. (See <XREF IDREF="67243" TYPE="TITLE">&ldquo;Processing While Minimized&rdquo;</XREF> earlier in this chapter.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>As users move the pointer over the miniaturized window representations in the thumbnail sketches, the title bar labels display by default. If the user prefers, the minimized window labels can be displayed instead. This further emphasizes the need to pick title bar labels and minimized window labels so that a user can distinguish windows using only this information. (For information on defining these labels, see <INDEXTARGET ID="ch03.windows96"><!-- POSTPROCESSDATA: ch03.windows96|windows:title bar labelstitle bar labelsminimized windows:labelslabels:minimized windows --><XREF IDREF="56252" TYPE="TITLE">&ldquo;Window Title Bar&rdquo;</XREF> and <XREF IDREF="46466" TYPE="TITLE">&ldquo;Labeling a Minimized Window&rdquo;</XREF> earlier in this chapter.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Support windows and dialogs will appear on all desks if their associated parent window is not mapped to the screen. Since support windows and dialogs should only appear on the desk where their parent appears, make sure that all parent windows are visible and mapped to the screen.<INDEXTARGET ID="ch03.windows97"><!-- POSTPROCESSDATA: ch03.windows97|support windows:desks, anddialogs:desks, and --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Your application should not create a screen background. Screen backgrounds are managed by <INDEXTARGET ID="ch03.windows98"><!-- POSTPROCESSDATA: ch03.windows98|backgrounds:and desksscreen backgrounds:and desks --><ITALICS>4Dwm</ITALICS> by default or by the user through the Background control panel. Users typically employ different screen backgrounds on different desks as an aid in orienting themselves. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE>Desks Guidelines</TITLE><PARAGRAPH><BOLD>When designing your application . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Make sure that all windows with associated support or dialogs are visible and mapped to the screen so that the support windows and dialogs appear only on the desk where their parent window displays.</CHECKOFFITEM>
<CHECKOFFITEM>Don't design your application to manage the screen background.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="17063">Session Management</TITLE><PARAGRAPH>Session management allows users to log out of their accounts and have any running applications automatically restart when they log back in, thus eliminating the need for users to restart applications manually when they log back in. In <INDEXTARGET ID="ch03.windows99"><!-- POSTPROCESSDATA: ch03.windows99|session management --><INDEXTARGET ID="ch03.windows100"><!-- POSTPROCESSDATA: ch03.windows100|Window Settings control panelcontrol panels:Window Settings --><ITALICS>4Dwm</ITALICS>, users have the option of turning session management on (the default) or off by using the Window Settings control panel (which is available from the Desktop->Customize cascading menu in the Toolchest), as shown in <XREF IDREF="86587" TYPE="GRAPHIC">Figure&nbsp;3-16</XREF>.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm17 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-17.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-16"><PREFIX>Figure 3-16 </PREFIX><XREFTARGET ID="86587">Setting Session Management</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>For your application to be restarted via the <INDEXTARGET ID="ch03.windows101"><!-- POSTPROCESSDATA: ch03.windows101|restarting applications:session managementapplications:session management, andstates:applications and sessions management --><ITALICS>4Dwm</ITALICS> session manager, your application needs to create a command line that will launch the application and restore its current state. Your application needs to update this command line as the application state changes. For details of specifying this command line and keeping it up to date, see &ldquo;Interacting With the Window and Session Manager&rdquo; in Chapter&nbsp;5 of the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>. The following scenario outlines the process.</PARAGRAPH>
<!-- RASTERCONVERT: ch03.windows.cgm18 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch03.windows-18.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-17"><PREFIX>Figure 3-17 </PREFIX>Setting Auto Window Placement</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>When a user launches an application, that application registers itself with the <ITALICS>4Dwm</ITALICS> session manager by creating a command line that will launch the application and restore its current state. For example, if your application is used to edit a specific file, the command line should contain the information necessary to launch your application and open this specific file. There is only one command line per application. </PARAGRAPH>
<PARAGRAPH>As the state changes over time, your application needs to update this command line. So, to continue the example, suppose the user opens a different file to edit under your application. In such a case, your application needs to create a new command line that will launch the application and open this new file.</PARAGRAPH>
<PARAGRAPH>If the user opens co-primary windows or support windows (see <XREF IDREF="38970" TYPE="TITLE">&ldquo;Application Window Categories and Characteristics&rdquo;</XREF> earlier in this chapter for window definitions), these windows should also redisplay when the user logs out and back in again. (Dialogs typically don't redisplay.) One method for obtaining this behavior is to allow your application to take command line arguments to redisplay these windows so that you can include these arguments on the stored command line when appropriate. </PARAGRAPH>
<PARAGRAPH>When the user logs out, <INDEXTARGET ID="ch03.windows102"><!-- POSTPROCESSDATA: ch03.windows102|session management:logging out --><ITALICS>4Dwm</ITALICS> saves the command lines for all applications that are currently running on the user's desktop. When the user logs back in, <ITALICS>4Dwm</ITALICS> attempts to execute the commands that it saved and restore the user's desktop to what it was when the user logged out.</PARAGRAPH>
<PARAGRAPH>Applications can also request to have <ITALICS>4Dwm</ITALICS> inform them when a user chooses &ldquo;Log Out.&rdquo; When applications receive this notification, they should not post any dialogs such as &ldquo;Save unsaved changes before quitting?&rdquo; Instead, if <ITALICS>4Dwm</ITALICS> notifies your application that the user is logging out and there are unsaved changes for the current file, your application should use one of the following strategies:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Save these changes into another file and name it something logical such as <VARIABLE>original_file_name</VARIABLE>.save. When the application is restarted at login, post a dialog that tells the user that this file with unsaved changes exists and query the user whether to open the original file or the file with the unsaved changes. This is the preferred strategy.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Ignore the user's unsaved changes, and simply restart the application using the most recent saved version of the file. This strategy is okay, but it is not preferred.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Don't automatically save the user's changes by default. This may cause the user to lose as much data as throwing away all unsaved changes. Let the user control when changes are saved. </PARAGRAPH>
<PARAGRAPH>For details on how to request log-out notification from <ITALICS>4Dwm</ITALICS>, see &ldquo;Interacting With the Window and Session Manager&rdquo; in Chapter&nbsp;5 of the <DOCTITLE>IRIX Interactive Desktop Integration Guide</DOCTITLE>.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38661">Session Management Guidelines</TITLE><PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows103"><!-- POSTPROCESSDATA: ch03.windows103|session management:guidelines --></BOLD><BOLD>When designing your application . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Have your application create a command line that will launch the application and restore its current state. This current state should minimally include reopening any files that are currently open under the application and opening any primary or support windows that are currently open.</CHECKOFFITEM>
<CHECKOFFITEM>Update this command line as the state of the application changes.</CHECKOFFITEM>
<CHECKOFFITEM>If your application allows users to create and edit data files, have <ITALICS>4Dwm</ITALICS> notify your application when the user chooses &ldquo;Log Out.&rdquo;</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD><INDEXTARGET ID="ch03.windows104"><!-- POSTPROCESSDATA: ch03.windows104|session management:logging out guidelines --></BOLD><BOLD>If your application is running when the user chooses &ldquo;Log Out&rdquo; and there are unsaved changes for a specific file . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Save these changes into another file and name it something logical such as <VARIABLE>original_file_name</VARIABLE>.save. When the application is restarted at login, post a dialog that tells the user that this file with unsaved changes exists and query the user to determine whether to open the original file or the file with the unsaved changes.</CHECKOFFITEM>
<CHECKOFFITEM>If you cannot implement the preferred strategy described above, ignore the user's unsaved changes. Do not automatically save the user's changes by default. </CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
</CHAPTER>
