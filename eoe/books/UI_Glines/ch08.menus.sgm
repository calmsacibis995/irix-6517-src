<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="8"><TITLE><XREFTARGET ID="98597">Menus</TITLE><PARAGRAPH>Menus allow users to browse through options, settings, and commands available in your application. A well-organized set of menus shows users what your application can do and makes it easy to locate particular functions. This chapter describes the kinds of menus your application should use and how menus and menu items should be organized, in these sections:<INDEXTARGET ID="ch08.menus1"><!-- POSTPROCESSDATA: ch08.menus1|menus --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="56383" TYPE="TITLE">&ldquo;Types of Menus&rdquo;</XREF> defines the three types of menus that your application can use: pull-down, popup, and option menus.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="19797" TYPE="TITLE">&ldquo;Menu Traversal and Activation&rdquo;</XREF> describes the default IRIS IM model for accessing menus with the mouse and the keyboard, with two additions that your application should support.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="42408" TYPE="TITLE">&ldquo;The Menu Bar and Pull-Down Menus&rdquo;</XREF> discusses how to design pull-down menus (which include cascading, or nested, menus). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="62260" TYPE="TITLE">&ldquo;Popup Menus&rdquo;</XREF> discusses how to design popup menus.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Option menus are discussed only briefly in this chapter; they're covered in detail in <XREF IDREF="68004" TYPE="TITLE">&ldquo;Option Buttons&rdquo; in Chapter&nbsp;9</XREF>.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="56383">Types of Menus</TITLE><PARAGRAPH>IRIX Interactive Desktop supports three types of menus, all of which are defined in the <INDEXTARGET ID="ch08.menus2"><!-- POSTPROCESSDATA: ch08.menus2|menus:types --><INDEXTARGET ID="ch08.menus3"><!-- POSTPROCESSDATA: ch08.menus3|menus:pull-downpull-down menusmenus:menu barsmenu bars --><DOCTITLE>OSF/Motif Style Guide</DOCTITLE>: pull-down menus, popup menus, and option menus. This section discusses these menu types:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="29699" TYPE="TITLE">&ldquo;Pull Down Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="85425" TYPE="TITLE">&ldquo;Popup Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="38296" TYPE="TITLE">&ldquo;Option Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="29699">Pull Down Menus</TITLE><PARAGRAPH>Of the three types, pull-down menus are the most frequently used. Most applications have a menu bar, which is a collection of pull-down menus. <XREF IDREF="49505" TYPE="GRAPHIC">Figure&nbsp;8-1</XREF> shows a typical menu bar.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-1"><PREFIX>Figure 8-1 </PREFIX><XREFTARGET ID="49505">Menu Bar</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Each pull-down menu is represented in the menu bar by its title. A user can display a menu by pressing the left mouse button on the menu title. <XREF IDREF="30057" TYPE="GRAPHIC">Figure&nbsp;8-2</XREF> shows a typical pull-down menu. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm2 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-2.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-2"><PREFIX>Figure 8-2 </PREFIX><XREFTARGET ID="30057">Pull-Down Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Pull-down menus can include submenus, or <INDEXTARGET ID="ch08.menus4"><!-- POSTPROCESSDATA: ch08.menus4|menus:submenussubmenusmenus:cascading menuscascading menus --><ITALICS>cascading menus</ITALICS>. A menu entry for a cascading menu is indicated by an arrowhead next to the entry, as shown in <XREF IDREF="68665" TYPE="TEXT"></XREF><XREF IDREF="68665" TYPE="GRAPHIC">Figure&nbsp;8-3</XREF>. Pull-down menus are discussed in detail in <XREF IDREF="42408" TYPE="TITLE">&ldquo;The Menu Bar and Pull-Down Menus&rdquo;</XREF> later in this chapter.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm8 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-8.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-3"><PREFIX>Figure 8-3 </PREFIX><XREFTARGET ID="68665">Cascading Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="85425">Popup Menus</TITLE><PARAGRAPH>Unlike pull-down menus, popup menus are not represented by a title on the screen. A user displays a popup menu by pressing the right mouse button. The contents of the popup menu depend on where the mouse pointer is located when the button is pushed. <INDEXTARGET ID="ch08.menus5"><!-- POSTPROCESSDATA: ch08.menus5|menus:popup menuspopup menus --><XREF IDREF="73864" TYPE="GRAPHIC">Figure&nbsp;8-4</XREF> shows a popup menu. Popup menus are discussed in detail in <XREF IDREF="62260" TYPE="TITLE">&ldquo;Popup Menus&rdquo;</XREF> later in this chapter.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm3 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-3.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-4"><PREFIX>Figure 8-4 </PREFIX><XREFTARGET ID="73864">Popup Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38296">Option Menus</TITLE><PARAGRAPH>Option menus allow the user to select a single option from a list of options. An option menu appears as a button marked with a horizontal bar, as shown in <INDEXTARGET ID="ch08.menus6"><!-- POSTPROCESSDATA: ch08.menus6|menus:option menusoption menusbuttons:option buttonsoption buttons --><XREF IDREF="33895" TYPE="GRAPHIC">Figure&nbsp;8-5</XREF>. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm5 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-5.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-5"><PREFIX>Figure 8-5 </PREFIX><XREFTARGET ID="33895">Option Menu Button</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>The option button is labelled with the currently selected option. When a user presses the left mouse button over the option button, the option menu is displayed, as shown in <XREF IDREF="45752" TYPE="GRAPHIC">Figure&nbsp;8-6</XREF>. If the user selects a different option from this menu, the label on the button updates to reflect this new value.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm6 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-6.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-6"><PREFIX>Figure 8-6 </PREFIX><XREFTARGET ID="45752">An Open Option Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Entries in an option menu represent mutually exclusive values of a parameter. They shouldn't be used for actions. Guidelines for using option buttons and option menus are discussed in <XREF IDREF="68004" TYPE="TITLE">&ldquo;Option Buttons&rdquo; in Chapter&nbsp;9</XREF>.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19797">Menu Traversal and Activation</TITLE><PARAGRAPH>Pull-down, popup, and option menus should use the default IRIS IM model for menu traversal and activation, with two additions. This model is defined in the <INDEXTARGET ID="ch08.menus7"><!-- POSTPROCESSDATA: ch08.menus7|menus:traversalmenus:activationtraversal:menusactivation:menus --><DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, Chapter 3, and summarized below. The two additional guidelines are also described in the following paragraphs. </PARAGRAPH>
<PARAGRAPH>Pull-down menus use mnemonics and keyboard accelerators for traversal and activation; these techniques are described in the next section, <XREF IDREF="42408" TYPE="TITLE">&ldquo;The Menu Bar and Pull-Down Menus.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>With the default model, users can use either the mouse or the keyboard to display, traverse, activate, and close menus. This section describes:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="82410" TYPE="TITLE">&ldquo;Using the Mouse to Manipulate Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="11989" TYPE="TITLE">&ldquo;Using the Keyboard to Manipulate Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="82410">Using the Mouse to Manipulate Menus</TITLE><PARAGRAPH>With the mouse, users have the additional choice of manipulating menus in either a <ITALICS>spring-loaded</ITALICS> or a <ITALICS>posted</ITALICS> manner.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Spring-Loaded Manner</TITLE><PARAGRAPH>To display a pull-down or option menu in a spring-loaded manner, the user positions the pointer over the menu and presses the left mouse button. To display a popup menu in a spring-loaded manner, the user positions the pointer in an area of the window that has a popup menu associated with it and presses the right mouse button. The user traverses any of these menus by moving the pointer over the menu entries while continuing to hold the mouse button. <INDEXTARGET ID="ch08.menus8"><!-- POSTPROCESSDATA: ch08.menus8|spring-loaded menusmenus:spring-loaded --></PARAGRAPH>
<PARAGRAPH>If the pointer is over a menu entry when the user releases the mouse button, that entry is activated and the menu is removed. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Posted Manner</TITLE><PARAGRAPH>To display a menu in a posted manner, the user positions the mouse pointer over the menu or over the appropriate area of the window and clicks the appropriate mouse button (left for pull-down and option menus, right for popup). The menu is then displayed with the location cursor on the first available menu entry (that is, the first non-disabled entry). To activate one of the menu entries, the user positions the pointer over the appropriate entry and clicks the left mouse button. <INDEXTARGET ID="ch08.menus9"><!-- POSTPROCESSDATA: ch08.menus9|menus:postedposted menus --></PARAGRAPH>
<PARAGRAPH>To remove the menu, the user clicks the left mouse button anywhere outside the menu. For popup menus, the user can click either the left or right mouse buttons to select an entry or remove the menu.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Mouse Click</TITLE><PARAGRAPH>In addition to supporting this default model for manipulating spring-loaded and posted menus with the mouse, make sure your application handles the mouse click that closes a posted menu as follows: Even though this click is passed on to the underlying application window, your application should ignore this click so that users don't lose selections they've made in the window just because they display and close menus. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="11989">Using the Keyboard to Manipulate Menus</TITLE><PARAGRAPH>By default, in IRIS IM, users can also display, traverse, activate, and close menus using the keyboard:<INDEXTARGET ID="ch08.menus10"><!-- POSTPROCESSDATA: ch08.menus10|keys:special --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>To display pull-down menus, users first press &lt;F10> to move the keyboard focus to the leftmost menu in the menu bar and then press the down arrow key. To display an option menu, users first move keyboard focus to the option menu button and then press the space bar. <INDEXTARGET ID="ch08.menus11"><!-- POSTPROCESSDATA: ch08.menus11|&lt;F10\> key --></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Once a menu is displayed, the user can use the up arrow and down arrow keys to traverse a menu. Similarly, the user can use the left arrow and right arrow keys to move from menu to menu across the menu bar. <INDEXTARGET ID="ch08.menus12"><!-- POSTPROCESSDATA: ch08.menus12|&lt;up arrow\> key&lt;down arrow\> key&lt;left arrow\> key&lt;right arrow\> key --></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Once a menu is displayed, pressing &lt;Enter> or the space bar activates the item under the location cursor, closes the menu, and returns the keyboard focus to where it was before the menu was displayed.<INDEXTARGET ID="ch08.menus13"><!-- POSTPROCESSDATA: ch08.menus13|&lt;Enter\> key --></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Pressing &lt;Esc> while a menu is displayed closes the menu and returns the keyboard focus to where it was before the menu was displayed. Pull-down menus can also be closed by pressing &lt;F10>.<INDEXTARGET ID="ch08.menus14"><!-- POSTPROCESSDATA: ch08.menus14|&lt;Escape\> key --><INDEXTARGET ID="ch08.menus15"><!-- POSTPROCESSDATA: ch08.menus15|&lt;F10\> key --></PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>In addition to supporting this default model for manipulating menus with the keyboard, your application should allow &lt;Shift>&lt;F10> to display a popup menu if one is available and move the keyboard focus to the first available entry in the menu. Pressing &lt;Shift>&lt;F10> again should close the popup menu and return the keyboard focus to where it was before &lt;Shift>&lt;F10> was pressed originally. This behavior is recommended in the <INDEXTARGET ID="ch08.menus16"><!-- POSTPROCESSDATA: ch08.menus16|&lt;Shift\>&lt;F10\> keys --><DOCTITLE>OSF/Motif Style Guide</DOCTITLE> (where &lt;Shift>&lt;F10> is described as the substitute for the &lt;Menu> key), but it isn't supported by default in IRIS IM.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Menu Traversal and Activation Guidelines</TITLE><PARAGRAPH><BOLD>In general, when designing traversal and activation for your menus . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Allow users to activate and traverse the menus using the default IRIS IM behaviors for mouse and keyboard actions.</CHECKOFFITEM>
<CHECKOFFITEM>If a user closes a menu by clicking somewhere outside of the menu, make sure the application ignores this click so that users don't lose selections they've made in the window just because they display and close menus.</CHECKOFFITEM>
<CHECKOFFITEM>Allow users to display and close popup menus using the key combination &lt;Shift>&lt;F10>. When &lt;Shift>&lt;F10> displays a popup menu, the location cursor should be on the first available menu entry. When &lt;Shift>&lt;F10> closes the menu, the keyboard focus should be returned to where it was before the menu was displayed.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="42408">The Menu Bar and Pull-Down Menus</TITLE><PARAGRAPH>In most cases, each of an application's primary windows has a menu bar as described in <INDEXTARGET ID="ch08.menus17"><!-- POSTPROCESSDATA: ch08.menus17|menus:menu barsmenu barsmenus:pull-downpull-down menus --><XREF IDREF="93559" TYPE="TITLE">&ldquo;Menu Bars in Primary Windows&rdquo; in Chapter&nbsp;6</XREF>. Users should be able to access most of an application's functions through its menu bars. This makes it easy for users to see what functions are available to them. This section describes the menu bar and pull-down menus:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="67010" TYPE="TITLE">&ldquo;What to Put in the Pull-Down Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="62421" TYPE="TITLE">&ldquo;Choosing Mnemonics&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="75819" TYPE="TITLE">&ldquo;Choosing Keyboard Accelerators&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="19592" TYPE="TITLE">&ldquo;Disabling Menu Entries&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="23392" TYPE="TITLE">&ldquo;Dynamic Menu Entries&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Each menu bar contains several pull-down menus. Each pull-down menu is represented in the menu bar by its title and contains entries that are either an action, a label for a cascading menu, or a separator, as shown in <XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>. Also as shown, the cascading menus contain additional actions. See <XREF IDREF="67010" TYPE="TITLE">&ldquo;What to Put in the Pull-Down Menus&rdquo;</XREF> for more information about the content of pull-down menus. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm11 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-11.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-7"><PREFIX>Figure 8-7 </PREFIX><XREFTARGET ID="42142">Elements of a Pull-Down Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Users interact with pull-down menus according to the model described in the previous section, <INDEXTARGET ID="ch08.menus18"><!-- POSTPROCESSDATA: ch08.menus18|menus:mnemonicsmnemonics, menus --><INDEXTARGET ID="ch08.menus19"><!-- POSTPROCESSDATA: ch08.menus19|keys:special&lt;Alt\> key --><XREF IDREF="19797" TYPE="TITLE">&ldquo;Menu Traversal and Activation.&rdquo;</XREF> In addition, users can access menu entries using mnemonics, which are the underlined characters in the menu titles and on menu entries (see <XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>). </PARAGRAPH>
<PARAGRAPH>To access a menu using a mnemonic, a user moves the pointer into the application window, then holds down the &lt;Alt> key while pressing the character key that matches the underlined character in the menu title. For example, to display the Catapult menu shown in <XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>, the user holds down the &lt;Alt> key and presses the &ldquo;c&rdquo; key. Then, to select a projectile from the Projectiles cascading menu, the user presses the &ldquo;p&rdquo; key to display the Projectiles cascading menu, and then presses &ldquo;p&rdquo; again to select &ldquo;Piano.&rdquo; Note that mnemonics are always activated without the &lt;Shift> key, even if the underlined character happens to be uppercase. Choosing appropriate mnemonics is discussed in more detail in <XREF IDREF="62421" TYPE="TITLE">&ldquo;Choosing Mnemonics&rdquo;</XREF> later in this chapter.</PARAGRAPH>
<PARAGRAPH>Menu entries that represent frequently used actions can have keyboard accelerators, as shown in <INDEXTARGET ID="ch08.menus20"><!-- POSTPROCESSDATA: ch08.menus20|keyboard acceleratorsmenus:keyboard accelerators --><INDEXTARGET ID="ch08.menus21"><!-- POSTPROCESSDATA: ch08.menus21|keys:special&lt;Ctrl\> key --><XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>. These keyboard accelerators are displayed in the menu next to the action and are typically a combination of the &lt;Ctrl> key and one other key. To initiate a menu action using a keyboard accelerator, a user moves the pointer over the window to make it the active window and then presses the key combination shown in the menu entry. For example, instead of selecting &ldquo;Fire catapult&rdquo; from the Catapult menu in <XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>, a user could fire the catapult by holding down the &lt;Ctrl> key and pressing the &ldquo;f&rdquo; key. When to use keyboard accelerators and how to choose ones which are appropriate are discussed in more detail in the <XREF IDREF="75819" TYPE="TITLE">&ldquo;Choosing Keyboard Accelerators&rdquo;</XREF> section later in this chapter.</PARAGRAPH>
<PARAGRAPH>A menu entry that's followed by an ellipsis (such as the &ldquo;Select target...&rdquo; entry shown in <INDEXTARGET ID="ch08.menus22"><!-- POSTPROCESSDATA: ch08.menus22|menus:ellipsisellipsis:in menus --><XREF IDREF="42142" TYPE="GRAPHIC">Figure&nbsp;8-7</XREF>) brings up a dialog that requests more information from the user before any action is performed. When to use an ellipsis in a menu entry is discussed in more detail later in this chapter in <XREF IDREF="87916" TYPE="TITLE">&ldquo;Naming Menu Entries in the Pull-Down Menus.&rdquo;</XREF> Menu entries that aren't currently available are disabled. This is usually shown by graying out the menu entry, as discussed in <XREF IDREF="19592" TYPE="TITLE">&ldquo;Disabling Menu Entries.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>When designing the menu bar and its pull-down menus for your application, start with the standard menus described in the next section, <XREF IDREF="12088" TYPE="TEXT"></XREF><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus.&rdquo;</XREF> Then, modify these standard menus to fit your specific application, using the guidelines in the section <XREF IDREF="67010" TYPE="TITLE">&ldquo;What to Put in the Pull-Down Menus.&rdquo;</XREF></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="12088">Standard Menus</TITLE><PARAGRAPH>Your application needs its own customized set of menus and menu entries; however, use the standard set as the starting point for the overall menu structure. Standard menus include:<INDEXTARGET ID="ch08.menus23"><!-- POSTPROCESSDATA: ch08.menus23|menus:standardstandard menus --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="38726" TYPE="TITLE">&ldquo;File Menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="36212" TYPE="TITLE">&ldquo;Selected Menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="94339" TYPE="TITLE">&ldquo;Edit Menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="26586" TYPE="TITLE">&ldquo;View Menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="70020" TYPE="TITLE">&ldquo;Tools menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="61709" TYPE="TITLE">&ldquo;Options menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="26412" TYPE="TITLE">&ldquo;Help menu&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>All of the menu entries discussed in this chapter are optional; many of them are appropriate for most applications (but there are always exceptions), and some entries are generally less common than others. For example, &ldquo;Print&rdquo; is a fairly common entry for the &ldquo;File&rdquo; menu, but printing doesn't generally make sense for audio applications. &ldquo;Import&rdquo; is another entry for the &ldquo;File&rdquo; menu, but it's less common than &ldquo;Print.&rdquo; <XREF IDREF="78135" TYPE="GRAPHIC">Figure&nbsp;8-8</XREF> shows a menu bar with all of the standard menus (in the correct order) and their mnemonics. This menu bar includes all of the menus defined in the MenuBar reference page of Chapter 9 in the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, plus an additional menu, Tools, which is defined in the IRIX Interactive Desktop environment. The standard menus are described in the following sections. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm10 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-10.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-8"><PREFIX>Figure 8-8 </PREFIX><XREFTARGET ID="78135">Standard Menus for Menu Bars</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Note that for each of the standard menu entries described in the following sections, mnemonics are represented by the underlined character in the entry label. This label also includes an ellipsis if the entry should include them. The entries are listed in the order in which they should appear in menus, and entries that are likely to be less common are indicated. Keyboard accelerators, if they exist, are listed in the description of the specific menu entry (<XREF IDREF="64434" TYPE="TABLE">Table&nbsp;8-3</XREF> lists standard keyboard accelerators). Appropriate places for separators are shown in the figures depicting the standard menus. Situations where a menu entry should be disabled are included in the description of the menu entry if applicable. Also, the keyboard shortcuts are shown as they should be displayed in the menus (for example, &lt;Ctrl>-s is shown as &ldquo;Ctrl+S&rdquo;).</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38726">File Menu</TITLE><PARAGRAPH>The File menu contains entries for actions that are performed on files, such as &ldquo;Open,&rdquo; &ldquo;Save,&rdquo; and &ldquo;Print,&rdquo; and on the application as a whole, such as &ldquo;Exit.&rdquo; <INDEXTARGET ID="ch08.menus24"><!-- POSTPROCESSDATA: ch08.menus24|File menu --><XREF IDREF="20202" TYPE="GRAPHIC">Figure&nbsp;8-9</XREF> shows the standard File menu with the most common entries; note that its mnemonic is &ldquo;F.&rdquo; These standard entries, as well as a few other less common ones (&ldquo;Reopen,&rdquo; &ldquo;Import,&rdquo; and &ldquo;Revert&rdquo;), are described in <XREF IDREF="43365" TYPE="TABLE">Table&nbsp;8-1</XREF> in the order in which they should appear in the menu. All of these entries should behave as defined by the File Menu reference page in the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, Chapter 9, except as noted in the table. Note that &ldquo;New,&rdquo; &ldquo;Open,&rdquo; &ldquo;Close,&rdquo; and &ldquo;Exit&rdquo; should display a dialog as described in <XREF IDREF="91359" TYPE="TITLE">&ldquo;Invoking Dialogs&rdquo; in Chapter&nbsp;10</XREF> if there are unsaved changes to the current document.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm7 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-7.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-9"><PREFIX>Figure 8-9 </PREFIX><XREFTARGET ID="20202">The Standard File Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH><XREF IDREF="43365" TYPE="TABLE">Table&nbsp;8-1</XREF> lists each File menu entry, its mnemonic, OSF/Motif behavior, IRIX Interactive Desktop additions and exceptions, and keyboard accellator.&space;</PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="8-1"><PREFIX>Table 8-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="43365">File Menu Entries</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Menu Entry 
and Mnemonic</PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>OSF/Motif Behavior</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>IRIX Interactive Desktop Additions and Exceptions</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Keyboard 
Accelerator</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>New<INDEXTARGET ID="ch08.menus25"><!-- POSTPROCESSDATA: ch08.menus25|&ldquo;New&rdquo; option (in File menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Creates a new, empty 
file.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>If your application allows more than one document window to be open 
at a time, it should create a new, empty document window; if the current 
document window is already empty, the action should have no effect. 
For more information on designing applications that support multiple 
open documents, see <XREF IDREF="27980" TYPE="TITLE">&ldquo;Standard Application Models&rdquo; in Chapter&nbsp;6</XREF>. If 
your application requires more information before creating a new 
document (for example, the user must select a template), this action may 
display a dialog to request the information. In this case, the entry label 
should be followed by an ellipsis.</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+N</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Open<INDEXTARGET ID="ch08.menus26"><!-- POSTPROCESSDATA: ch08.menus26|&ldquo;Open&rdquo; option (in File menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Brings up a dialog, 
allowing the user to 
choose an existing file to 
open.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>If your application allows more than one document window to be open 
at a time, it should create a new document window to display the 
specified file; however, if the current document window is already 
empty, the file should be displayed in the current document window. 
This new document window shouldn't be a separate instantiation of the 
application.</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+O</PARAGRAPH>
<TABLEXREF></TABLEXREF>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Reopen<INDEXTARGET ID="ch08.menus27"><!-- POSTPROCESSDATA: ch08.menus27|&ldquo;Reopen&rdquo; option (in File menu) --><SUPERSCRIPT></SUPERSCRIPT>
<TABLEXREF IDREF="ch08.menusTF0a">a</TABLEXREF><SUPERSCRIPT></SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Not defined.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>&ldquo;Reopen&rdquo; allows a user to return to a file that had been previously 
opened by the application. Choosing &ldquo;Reopen&rdquo; should display a 
cascading menu of previously opened files; you might choose to limit 
the length of this list to a maximum of 10 entries. (You should disable 
this entry if there are no previously opened files&mdash;for example, if this is 
the first time the user has launched the application.) If there are unsaved 
changes to the current file, your application should display a dialog that 
asks the user whether to save or discard the changes (see <XREF IDREF="61823" TYPE="TITLE">&ldquo;Invoking 
Dialogs When Manipulating Files&rdquo; in Chapter&nbsp;10</XREF>).</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH><INDEXTARGET ID="ch08.menus28"><!-- POSTPROCESSDATA: ch08.menus28|&ldquo;Import&rdquo; option (in File menu) --></PARAGRAPH>
Import<PARAGRAPH><SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Not defined.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>&ldquo;Import&rdquo; allows a user to read an existing data file into the current 
application. This entry can display the IRIX Interactive Desktop file 
selection dialog (in which case it should be displayed with an ellipsis), 
and the application should automatically determine the type of the file 
after it's selected. (See <XREF IDREF="52846" TYPE="TITLE">&ldquo;Types and Modes of Dialogs&rdquo; in Chapter&nbsp;10</XREF>&space;for 
details on the IRIX Interactive Desktop file selection dialog.) 
Alternatively, this entry can use a cascading menu to display the types 
of data that your application allows users to import. Each of these 
entries should be followed by an ellipsis and display the file selection 
dialog to allow the user to specify the specific file to import. Follow this 
entry with a separator.</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH><INDEXTARGET ID="ch08.menus29"><!-- POSTPROCESSDATA: ch08.menus29|&ldquo;Save&rdquo; option (in File menu) --></PARAGRAPH>
Save<PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Saves the current file.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>Although some applications disable this entry when there are no 
changes to be saved, your application should never disable this entry (as 
described in <XREF IDREF="19592" TYPE="TITLE">&ldquo;Disabling Menu Entries&rdquo;</XREF>).</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+S</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Save As...<INDEXTARGET ID="ch08.menus30"><!-- POSTPROCESSDATA: ch08.menus30|&ldquo;Save As&rdquo; option (in File menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Brings up a dialog and 
saves the current file 
with a new name. Also 
closes the previous file 
and opens the new one.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>If the current document already has a filename, that filename should be 
the default value in the file selection dialog. </PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Revert<INDEXTARGET ID="ch08.menus31"><!-- POSTPROCESSDATA: ch08.menus31|&ldquo;Revert&rdquo; option (in File menu) --><SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Not defined.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>&ldquo;Revert&rdquo; allows a user to undo all changes made to the current file since 
the last time the user saved it. (This entry should be disabled if there are 
no unsaved changes.) Your application should display a warning dialog 
before executing this action, as described in <XREF IDREF="61823" TYPE="TITLE">&ldquo;Invoking Dialogs When 
Manipulating Files&rdquo; in Chapter&nbsp;10</XREF>. </PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH><INDEXTARGET ID="ch08.menus32"><!-- POSTPROCESSDATA: ch08.menus32|&ldquo;Print&rdquo; option (in File menu) --></PARAGRAPH>
Print<PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Prints the current file.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>If choosing &ldquo;Print&rdquo; brings up a dialog to allow the user to select from a 
list of all available printers, it should be followed by an ellipsis. If the 
keyboard accelerator is used to activate this entry, the print job should 
be sent to the default printer.</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+P</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Close<INDEXTARGET ID="ch08.menus33"><!-- POSTPROCESSDATA: ch08.menus33|&ldquo;Close&rdquo; option (in File menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Closes a window and its 
associated support 
windows and dialogs, 
without quitting the 
current application.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>&ldquo;Close&rdquo; should be provided on co-primary windows and on support 
windows if they have menu bars. It shouldn't be provided on the main 
primary window. (See <XREF IDREF="91745" TYPE="TITLE">&ldquo;Window Types&rdquo; in Chapter&nbsp;6</XREF> for definitions of 
these window types and <XREF IDREF="85826" TYPE="TITLE">&ldquo;Window Decorations and the Window Menu&rdquo; 
in Chapter&nbsp;3</XREF> for details on the &ldquo;Close&rdquo; entry.) Applications that follow 
the &ldquo;Multiple Document, No Visible Main&rdquo; model should exit the 
application when the last co-primary window is closed. (See <XREF IDREF="96208" TYPE="TITLE">&ldquo;&ldquo;Multiple 
Document, No Visible Main&rdquo; Application Model&rdquo; in Chapter&nbsp;6</XREF>.)</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+W</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="61"><PARAGRAPH>Exit<INDEXTARGET ID="ch08.menus34"><!-- POSTPROCESSDATA: ch08.menus34|&ldquo;Exit&rdquo; option (in File menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="102"><PARAGRAPH>Closes all windows for 
the application and 
quits the application.</PARAGRAPH>
</CELL>
<CELL LEFT="180" WIDTH="289"><PARAGRAPH>&ldquo;Exit&rdquo; should always be provided in the main primary window. If users 
are likely to want to exit your application from a specific co-primary 
window in the application, that window should include an &ldquo;Exit&rdquo; entry 
in the leftmost menu, in addition to a &ldquo;Close&rdquo; entry. (See <XREF IDREF="85826" TYPE="TITLE">&ldquo;Window 
Decorations and the Window Menu&rdquo; in Chapter&nbsp;3</XREF>&space;for details on when to 
use &ldquo;Exit&rdquo; and &ldquo;Close.&rdquo;)</PARAGRAPH>
</CELL>
<CELL LEFT="475" WIDTH="50"><PARAGRAPH>Ctrl+Q</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
<TABLEFOOTNOTE LBL="a" ID="ch08.menusTF0a">These entries are probably less common than the others. </TABLEFOOTNOTE>
</TABLE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="36212">Selected Menu</TITLE><PARAGRAPH>The Selected menu contains application-specific actions that are performed on the currently selected objects. For example, Directory View windows on the IRIX Interactive Desktop display icons representing files. Each Directory View window has a Selected menu that allows users to perform actions on the selected files, such as &ldquo;Open,&rdquo; &ldquo;Print,&rdquo; and &ldquo;Remove.&rdquo; (Note that since actions in the Selected menu act on the selected data while actions in the File menu act on the entire file of data, the same entry&mdash;&ldquo;Print,&rdquo; for example&mdash;can mean something different in the two menus.) The Selected menu should not contain editing actions such as &ldquo;Cut&rdquo; since these should be in the Edit menu. Use &ldquo;S&rdquo; as the mnemonic for the Selected menu.<INDEXTARGET ID="ch08.menus35"><!-- POSTPROCESSDATA: ch08.menus35|Selected menu --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="94339">Edit Menu</TITLE><PARAGRAPH>The Edit menu contains actions that transfer data to or from the clipboard, actions that modify the current selection, and &ldquo;Undo.&rdquo; It contains actions for both the clipboard data exchange model (&ldquo;Cut,&rdquo; &ldquo;Copy,&rdquo; and &ldquo;Paste&rdquo;) and for the primary data exchange model (&ldquo;Promote&rdquo;). Both of these data exchange models are described in <INDEXTARGET ID="ch08.menus36"><!-- POSTPROCESSDATA: ch08.menus36|Edit menu --><XREF IDREF="15852" TYPE="TITLE">Chapter&nbsp;5, &ldquo;Data Exchange on the IRIX Interactive Desktop.&rdquo;</XREF>&space;<XREF IDREF="26733" TYPE="GRAPHIC">Figure&nbsp;8-10</XREF> shows the most common entries in the standard Edit menu; use &ldquo;E&rdquo; as its mnemonic. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm9 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-9.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-10"><PREFIX>Figure 8-10 </PREFIX><XREFTARGET ID="26733">The Standard Edit Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>These standard entries, as well as a few other less common ones (&ldquo;Clear,&rdquo; &ldquo;Promote,&rdquo; and &ldquo;Color Editor&rdquo;), are described in <XREF IDREF="84101" TYPE="TABLE">Table&nbsp;8-2</XREF> in the order in which they should appear in the menu. Make sure that all of these entries behave as defined in the Edit Menu reference page in Chapter 9 of the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, except as noted in the table.</PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="8-2"><PREFIX>Table 8-2 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="84101">&space;<DOCTITLE>	</DOCTITLE>Standard Edit Menu Entries</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Menu Entry and 
Mnemonic</PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>OSF/Motif Behavior</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>IRIX Interactive Desktop Additions and Exceptions</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Keyboard 
Accelerator</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Undo [action]<INDEXTARGET ID="ch08.menus37"><!-- POSTPROCESSDATA: ch08.menus37|&ldquo;Undo&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Reverses the effect of a previous action. 
The &ldquo;Undo&rdquo; action may apply to 
actions that the user accomplishes 
without using the menus&mdash;typing text, 
for example.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>At a minimum, your application should be able to undo 
all of the actions in the Edit menu. If an undo action will 
change the data significantly and can't be undone, you 
should display a warning dialog explaining that the 
change can't be undone and ask for confirmation. See 
<XREF IDREF="52846" TYPE="TITLE">&ldquo;Types and Modes of Dialogs&rdquo; in Chapter&nbsp;10</XREF>&space;for 
information on warning dialogs. The &ldquo;Undo&rdquo; entry 
should be disabled if the last change cannot be undone 
or if there are no changes.</PARAGRAPH>
<PARAGRAPH>If your application has only a single-level undo (that is, 
it can undo only the most recent action), after the user 
selects &ldquo;Undo,&rdquo; the &ldquo;Undo&rdquo; entry should be changed to 
&ldquo;Redo [action].&rdquo; If the user selects &ldquo;Redo&rdquo; the 
application should reverse the effects of the previous 
&ldquo;Undo,&rdquo; and toggle the menu entry back to &ldquo;Undo 
[action].&rdquo; If your application has multiple-level undo 
(that is, it can undo a series of actions), you should 
provide a separate &ldquo;Redo&rdquo; menu entry. Typically, 
applications don't allow users to undo beyond the saved 
version of the file; if your application does, you should 
display a warning dialog.</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Ctrl+Z</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Redo [action]<INDEXTARGET ID="ch08.menus38"><!-- POSTPROCESSDATA: ch08.menus38|&ldquo;Redo&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Not defined.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>&ldquo;Redo&rdquo; reverses the effect of a previous &ldquo;Undo&rdquo; action. 
It is useful to have a separate &ldquo;Redo&rdquo; entry if your 
application has multiple-level undo. Like &ldquo;Undo,&rdquo; the 
&ldquo;Redo&rdquo; entry should indicate the action that will be 
redone (for example, &ldquo;Redo Cut,&rdquo; &ldquo;Redo Paste&rdquo;). If you 
provide a &ldquo;Redo&rdquo; command, place it after the Undo 
entry and follow it with a separator. </PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Shift+Ctrl
+Z</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Cut<INDEXTARGET ID="ch08.menus39"><!-- POSTPROCESSDATA: ch08.menus39|&ldquo;Cut&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Removes the selected data from the 
application window to the clipboard.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>The &ldquo;Cut&rdquo; entry should be disabled if there's nothing 
currently selected in the window. </PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Ctrl+X</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Copy<INDEXTARGET ID="ch08.menus40"><!-- POSTPROCESSDATA: ch08.menus40|&ldquo;Copy&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Copies the selected data to the 
clipboard without removing it from &lbreak;the application window.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>The &ldquo;Copy&rdquo; entry should be disabled if there's nothing 
currently selected in the window. </PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Ctrl+C</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Paste<INDEXTARGET ID="ch08.menus41"><!-- POSTPROCESSDATA: ch08.menus41|&ldquo;Paste&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Copies the contents of the clipboard 
into the application window.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>If there's nothing currently on the clipboard available to 
be pasted, display a dialog saying there's nothing 
available. See <XREF IDREF="91359" TYPE="TITLE">&ldquo;Invoking Dialogs&rdquo; in Chapter&nbsp;10</XREF>.</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Ctrl+V</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Delete<INDEXTARGET ID="ch08.menus42"><!-- POSTPROCESSDATA: ch08.menus42|&ldquo;Delete&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Removes the selected data from the 
application window.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>The &ldquo;Delete&rdquo; entry should be disabled if there's nothing 
currently selected in the window.</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Select All<INDEXTARGET ID="ch08.menus43"><!-- POSTPROCESSDATA: ch08.menus43|&ldquo;Select All&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Selects all of the elements in a 
component of the application window.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>The mnemonic for &ldquo;Select All&rdquo; is &ldquo;A.&rdquo;</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Ctrl+A</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Deselect All<INDEXTARGET ID="ch08.menus44"><!-- POSTPROCESSDATA: ch08.menus44|&ldquo;Deselect All&rdquo; option (in Edit menu) --></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Deselects all of the elements in a 
component of the application window.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>The &ldquo;Deselect All&rdquo; entry should be disabled if there's 
nothing currently selected in the window. The 
mnemonic for &ldquo;Deselect All&rdquo; is &ldquo;l.&rdquo;</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Shift+Ctrl
+A</PARAGRAPH>
<TABLEXREF></TABLEXREF>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Clear<INDEXTARGET ID="ch08.menus45"><!-- POSTPROCESSDATA: ch08.menus45|&ldquo;Clear&rdquo; option (in Edit menu) --><SUPERSCRIPT></SUPERSCRIPT>
<TABLEXREF IDREF="ch08.menusTF1a">a</TABLEXREF><SUPERSCRIPT></SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Same as &ldquo;Delete,&rdquo; except that the 
remaining data isn't reorganized to fill 
in the space left by the cleared data.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>If you provide a &ldquo;Clear&rdquo; command, place it before the 
&ldquo;Delete&rdquo; entry. The &ldquo;Clear&rdquo; entry should be disabled if 
there's nothing currently selected in the window.</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>Pro<INDEXTARGET ID="ch08.menus46"><!-- POSTPROCESSDATA: ch08.menus46|&ldquo;Promote&rdquo; option (in Edit menu) --></PARAGRAPH>
mote<PARAGRAPH><SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Promotes the current selection to the 
primary selection.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>&ldquo;Promote&rdquo; should be included if it can be difficult or 
time-consuming to recreate a selection in your 
application, and if your application supports the 
primary transfer model described in <XREF IDREF="61999" TYPE="TITLE">&ldquo;Supporting the 
Primary Transfer Model&rdquo; in Chapter&nbsp;5</XREF>. Disable this 
entry when there's no current selection or when the 
current selection is already the primary selection; it 
should be enabled only when the application window 
has a selection that isn't currently the primary selection. 
See <XREF IDREF="59818" TYPE="TITLE">&ldquo;Selection&rdquo; in Chapter&nbsp;7</XREF>&space;for information on 
selections. The mnemonic for &ldquo;Promote&rdquo; is &ldquo;m.&rdquo;</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH>Alt+ Insert</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="65"><PARAGRAPH>C<INDEXTARGET ID="ch08.menus47"><!-- POSTPROCESSDATA: ch08.menus47|&ldquo;Color Editor&rdquo; option (in Edit menu) --></PARAGRAPH>
olor Editor...<PARAGRAPH><SUPERSCRIPT>a</SUPERSCRIPT></PARAGRAPH>
</CELL>
<CELL LEFT="70" WIDTH="160"><PARAGRAPH>Not defined.</PARAGRAPH>
</CELL>
<CELL LEFT="235" WIDTH="226"><PARAGRAPH>Choosing &ldquo;Color Editor&rdquo; invokes the IRIX Interactive 
Desktop color chooser, which allows the user to select 
colors. (See <XREF IDREF="84245" TYPE="TITLE">&ldquo;A Specific Standard Support Window: The 
IRIX Interactive Desktop Color Chooser&rdquo; in Chapter&nbsp;6</XREF>.)</PARAGRAPH>
</CELL>
<CELL LEFT="470" WIDTH="50"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
<TABLEFOOTNOTE LBL="a" ID="ch08.menusTF1a">These entries are probably less common than the others. </TABLEFOOTNOTE>
</TABLE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="26586">View Menu</TITLE><PARAGRAPH>The View menu contains entries for application-specific actions that change the user's view of the current data but that don't change the actual data. <INDEXTARGET ID="ch08.menus48"><!-- POSTPROCESSDATA: ch08.menus48|View menu --></PARAGRAPH>
<PARAGRAPH>For example, if your application window has several panes of information, the View menu could provide the user with a way to turn each individual pane on or off. Group together the entries representing the individual panes, and provide a checkbox in front of each one indicating whether the pane is currently being displayed or not. (See <XREF IDREF="69664" TYPE="TITLE">&ldquo;Splitting Primary Windows Into Panes&rdquo; in Chapter&nbsp;6</XREF> for information on multiple-pane windows. You can find more information on menu checkboxes in <XREF IDREF="67896" TYPE="TITLE">&ldquo;Using Radio Buttons and Checkboxes in Pull-Down Menus.&rdquo;</XREF>) </PARAGRAPH>
<PARAGRAPH>Other entries in the View menu can adjust the scale of the view (zoom in and zoom out), display support elements (such as rulers and grid lines), and hide or display certain parts of the data. Use &ldquo;V&rdquo; as the mnemonic for the View menu. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="70020">Tools menu</TITLE><PARAGRAPH>The Tools menu contains application-specific entries that allow the user to open support windows for manipulating the data in the parent primary window. For example, a desktop publishing package might have separate support windows that provide special controls for editing graphics, tables, and mathematical equations; access to these support windows would be placed in the Tools menu. See <INDEXTARGET ID="ch08.menus49"><!-- POSTPROCESSDATA: ch08.menus49|Tools menu --><XREF IDREF="30905" TYPE="TITLE">&ldquo;Support Windows&rdquo; in Chapter&nbsp;6</XREF> for a discussion of support windows. Use &ldquo;T&rdquo; as the mnemonic for the Tools menu.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="61709">Options menu</TITLE><PARAGRAPH>The Options menu contains application-specific entries that allow the user to customize the application. For example, a multi-window application might have entries in the Options menu to allow the user to set preferences such as which windows should come up by default when the application is started, and whether window sizes and positions should be saved between sessions. Use &ldquo;O&rdquo; as the mnemonic for the Options menu.<INDEXTARGET ID="ch08.menus50"><!-- POSTPROCESSDATA: ch08.menus50|Options menu --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="26412">Help menu</TITLE><PARAGRAPH>The Help menu contains entries for actions that provide several different kinds of help information to the user. All application windows that have a menu bar should contain a Help menu. Its mnemonic is &ldquo;H.&rdquo; The standard entries for the Help menu are discussed in <INDEXTARGET ID="ch08.menus51"><!-- POSTPROCESSDATA: ch08.menus51|Help menu --><XREF IDREF="31568" TYPE="TITLE">&ldquo;Providing Help through a Help Menu&rdquo; in Chapter&nbsp;4</XREF>.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67010">What to Put in the Pull-Down Menus</TITLE><PARAGRAPH>Make sure your application's pull-down menus include the standard menu entries that are relevant to your application, plus the application-specific entries you need to represent your application's core functionality. The previous section, <INDEXTARGET ID="ch08.menus52"><!-- POSTPROCESSDATA: ch08.menus52|pull-down menus:contentsmenus:pull-down:contents --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus,&rdquo;</XREF> describes when and how to use the standard entries; this section presents guidelines for application-specific modifications and additions to the standard menus. </PARAGRAPH>
<PARAGRAPH>As you decide which standard entries to include in your application, consider each of these entries on a case-by-case basis. For example, you almost certainly need an &ldquo;Exit&rdquo; entry, but it's possible that none of the other standard File menu entries make sense for your application, including the &ldquo;File&rdquo; menu title itself. </PARAGRAPH>
<PARAGRAPH>Users often learn the functionality of a new application by scanning the menus to see what actions are available and by browsing the online help. Also, when users want to perform some action, they usually look first for that action in the pull-down menus. Thus, make all simple, frequent actions accessible from the pull-down menus. <INDEXTARGET ID="ch08.menus53"><!-- POSTPROCESSDATA: ch08.menus53|pull-down menus:dialogs, andmenus:pull-down:dialogs, anddialogs:pull-down menus, and --></PARAGRAPH>
<PARAGRAPH>Be sure to include actions for performing basic operations (such as &ldquo;Cut,&rdquo; &ldquo;Paste,&rdquo; or &ldquo;Save&rdquo;), for setting the value of an attribute (for example, make selected text bold, or turn grid lines on or off), for online help, and for &ldquo;Undo&rdquo; (particularly if users can perform actions that destroy or significantly change their data). If this important functionality is hidden in a dialog, users won't easily discover it. (See <XREF IDREF="30192" TYPE="TITLE">Chapter&nbsp;10, &ldquo;Dialogs&rdquo;</XREF> for details on when to use dialogs.) Also, don't include more than 10-12 entries in a menu or users will have trouble scanning it; make sure that all of your entries fit on the screen at one time because Motif doesn't support scrolling menus.</PARAGRAPH>
<PARAGRAPH>Actions that are accomplished using buttons in primary windows should be repeated in the pull-down menus because they're probably the most frequently accessed actions. Including them in the menus gives users one place to look for all actions and allows you to assign keyboard accelerators and mnemonics that are clearly shown in the menu entries. <INDEXTARGET ID="ch08.menus54"><!-- POSTPROCESSDATA: ch08.menus54|pull-down menus:buttons, andmenus:pull-down:buttons, andbuttons:pull-down menus, and --></PARAGRAPH>
<PARAGRAPH>Provide users with the option of using the keyboard for frequently used actions rather than restricting them to pointing-and-clicking on buttons. In addition, all simple actions should have an associated menu command even if there's a direct manipulation method or mouse double-click shortcut available for accomplishing the task. Providing menu commands avoids hidden functionality, and helps those users who have difficulty performing double-clicks. </PARAGRAPH>
<PARAGRAPH>If you think that your users need constant access to a group of actions, make these actions available in your application's support window. As a second choice, you can use a tear-off menu as described in the <INDEXTARGET ID="ch08.menus55"><!-- POSTPROCESSDATA: ch08.menus55|pull-down menus:support windows, andmenus:pull-down:support windows, andsupport windows:pull-down menus, and --><INDEXTARGET ID="ch08.menus56"><!-- POSTPROCESSDATA: ch08.menus56|tear-off menusmenus:tear-off --><DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, section 6.2.3. Support windows are designed to include groups of controls that the user might want to use continuously. Support windows allow for a more flexible layout of controls than tear-off menus do, and support windows can contain all kinds of components, such as labels and text input fields, not just push buttons. (See <XREF IDREF="30905" TYPE="TITLE">&ldquo;Support Windows&rdquo; in Chapter&nbsp;6</XREF> for information on designing support windows.) Make sure that users can access such support windows as well as co-primary windows from the menu bar of their parent window. Make sure that these windows have an appropriate titlebar. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="90029">Naming Menus in the Menu Bar</TITLE><PARAGRAPH>Use one-word (capitalized) titles in all menus in the menu bar since users may interpret a second word as a separate menu title. Use entire words for menu titles rather than abbreviations. Don't use bitmaps as menu titles. Use the standard titles for menus (for example, File and Edit) if they're applicable to your application, but don't use a standard title if you're changing the standard definition. (See <INDEXTARGET ID="ch08.menus57"><!-- POSTPROCESSDATA: ch08.menus57|menus:naming, in menu barsmenu bars:menus:namingmenus:pull-down:naming, in menu barspull-down menus:naming, in menu bars --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo;</XREF> for standard menu titles and their definitions.) </PARAGRAPH>
<PARAGRAPH>The leftmost menu contains actions that operate on a logical unit of data for the application; it's generally titled &ldquo;File&rdquo; because most applications read and write data files. However, if your application doesn't manipulate data files, the leftmost menu should reflect the unit of data that the user expects to operate on. For example, the Search tool's leftmost menu is called Page because the application doesn't manipulate data files, but it does offer several different pages that define search categories. </PARAGRAPH>
<PARAGRAPH>If your application does read and write data files but the word &ldquo;File&rdquo; might be confusing to users, choose a more appropriate title for the leftmost menu. For example, in MediaMail, a group of documents (mail messages) are stored in a single file referred to as a mail folder. The leftmost menu in the main window is named &ldquo;Folder&rdquo; to make it clear that it contains actions that apply to the entire folder of messages rather than to individual messages. If the menu were named &ldquo;File,&rdquo; it might not be clear whether the &ldquo;Open&rdquo; entry opened a message or a mail folder. Similarly, you can change the names of other standard menus to make them more meaningful. The second menu in the main window of MediaMail is named &ldquo;Message&rdquo; because all operations in that menu are performed on the selected messages. This menu could have been called the Selected menu, but &ldquo;Message&rdquo; makes it clear what the menu entries act on.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="87916">Naming Menu Entries in the Pull-Down Menus</TITLE><PARAGRAPH>As with menu names in the menu bar, use the standard names for menu entries within pull-down menus if they're applicable to your application; don't use a standard name if you're changing the standard definition. (See <INDEXTARGET ID="ch08.menus58"><!-- POSTPROCESSDATA: ch08.menus58|menus:entries:namingmenus:pull-down:naming entriespull-down menus:entries:naming --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus.&rdquo;</XREF>) Menu entries should be capitalized using the same rules for capitalizing book titles: capitalize the first word and other non-articles, but don't capitalize articles unless they're the first word. Generally, a menu entry should be one of the following:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A verb&mdash;such as &ldquo;Cut,&rdquo; &ldquo;Copy,&rdquo; or &ldquo;Delete.&rdquo; </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A value for a parameter, when the action is to set the parameter to that specific value. For instance, IRIS Showcase has a &ldquo;Grids&rdquo; cascading menu with entries corresponding to grid sizes such as &ldquo;1/8 inch&rdquo; and &ldquo;1/4 inch.&rdquo;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>An attribute name, when the action is to assign some entity that attribute&mdash;such as whether shapes are drawn filled or unfilled.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A window name, if the menu entry brings up a co-primary, support, or dialog window. For example, a Directory View window has a menu entry for setting permissions. This entry brings up a dialog named &ldquo;Permissions,&rdquo; so the menu entry is also named &ldquo;Permissions,&rdquo; rather than &ldquo;Set Permissions.&rdquo;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The name of a cascading menu (see <XREF IDREF="53348" TYPE="TITLE">&ldquo;Using Cascading Menus&rdquo;</XREF> later in this chapter).</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>If none of these categories applies, choose a one- or two-word phrase that indicates clearly what action will be taken. Include the name of the object that will be acted on if it's needed for clarity. For example, &ldquo;New,&rdquo; generally indicates that a new data file will be created. If your application doesn't create data files, the menu entry for creating a new entity should be &ldquo;New <VARIABLE>object</VARIABLE>&rdquo; such as &ldquo;New Folder&rdquo; (Directory View windows) or &ldquo;New Page&rdquo; (Icon Catalog). Don't use abbreviations in menu entries.</PARAGRAPH>
<PARAGRAPH>You can use graphic labels for menus entries, but keep in mind that graphic labels are often unclear. They work best when used along with a text label, and typically there's not enough room for both graphic and text labels in a menu entry. For those cases where graphics are better descriptions than text (for example, when showing bitmaps or textures), you should probably include these options in a tool palette either as individual buttons or as entries in an option menu. See <XREF IDREF="18668" TYPE="TITLE">&ldquo;Pushbuttons&rdquo;</XREF> and <XREF IDREF="68004" TYPE="TITLE">&ldquo;Option Buttons&rdquo; in Chapter&nbsp;9</XREF> for more information about these alternatives.</PARAGRAPH>
<PARAGRAPH>If the entry is something that toggles its state, use one of the following alternatives: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Toggle the menu entry name to indicate the action that will be taken if the user selects this entry. For example, a menu entry &ldquo;Show Grid&rdquo; indicates that the grid isn't currently shown and that choosing this item will display it. If the user chooses this item, the grid is displayed and the entry should toggle to &ldquo;Hide Grid.&rdquo;<INDEXTARGET ID="ch08.menus59"><!-- POSTPROCESSDATA: ch08.menus59|menus:entries:toggles --></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Choose a menu entry name that clearly indicates what action will be taken, place a checkbox indicator next to the menu entry, and use the checkbox to indicate whether or not the action has been taken. For example, the menu entry &ldquo;Italics&rdquo; with a checkmark next to it indicates that the current font is an Italic one; the same entry with no checkmark indicates that the current font isn't Italic. (For more details on the use of checkboxes in menus, see <INDEXTARGET ID="ch08.menus60"><!-- POSTPROCESSDATA: ch08.menus60|menus:entries:checkboxesmenus:entries:radio buttons --><INDEXTARGET ID="ch08.menus61"><!-- POSTPROCESSDATA: ch08.menus61|radio buttons:in menus --><INDEXTARGET ID="ch08.menus62"><!-- POSTPROCESSDATA: ch08.menus62|checkboxes:in menus --><XREF IDREF="67896" TYPE="TITLE">&ldquo;Using Radio Buttons and Checkboxes in Pull-Down Menus&rdquo;</XREF> later in this chapter.) </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>If the entry belongs to a group of related entries, all of which toggle their states, place checkbox indicators next to each of them. The entry names should be nouns or attributes that clearly imply their actions (and these names should remain constant rather than toggling). And separate the entire group from other menu items by separator lines. (See <XREF IDREF="67896" TYPE="TITLE">&ldquo;Using Radio Buttons and Checkboxes in Pull-Down Menus.&rdquo;</XREF>)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>A menu entry should be followed by an ellipsis if it brings up a dialog for the purpose of requesting more information from the user before performing the action. The ellipsis does <INDEXTARGET ID="ch08.menus63"><!-- POSTPROCESSDATA: ch08.menus63|pull-down menus:dialogs, andmenus:pull-down:dialogs, anddialogs:pull-down menus, and --><INDEXTARGET ID="ch08.menus64"><!-- POSTPROCESSDATA: ch08.menus64|pull-down menus:ellipsisellipsis:in pull-down menus --><ITALICS>not</ITALICS> simply mean that the menu entry displays a dialog. For example, the &ldquo;Save As...&rdquo; menu entry brings up a dialog that asks the user to enter additional necessary information before the action can be performed. &ldquo;Help,&rdquo; on the other hand, brings up a dialog that contains the information that the user requested.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Ordering Menus and Menu Entries in the Pull-Down Menus</TITLE><PARAGRAPH>Use the order described in <INDEXTARGET ID="ch08.menus65"><!-- POSTPROCESSDATA: ch08.menus65|menus:entries:orderingmenus:pull-down:ordering entriespull-down menus:entries:ordering --><INDEXTARGET ID="ch08.menus66"><!-- POSTPROCESSDATA: ch08.menus66|menus:ordering, in menu barsmenu bars:menus:orderingmenus:pull-down:ordering, in menu barspull-down menus:ordering, in menu bars --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo;</XREF> for standard menus in the menu bar and their entries. If you need to create additional menus for your application, place them between the View and Tools menus. If you need to change the name of one of the standard menus (as discussed earlier in <XREF IDREF="90029" TYPE="TITLE">&ldquo;Naming Menus in the Menu Bar&rdquo;</XREF>), leave this menu in the same order as if it had the standard name. For example, in MediaMail the File menu is renamed Folder and the Selected menu is renamed Message, but Folder is still the leftmost menu and Message is still next to the Folder menu.</PARAGRAPH>
<PARAGRAPH>Within menus, organize entries into logical groups. If one of your application-specific menu entries is logically related to one of the standard menu entries, place it near that standard entry. If this isn't a good fit, create new menus that group the entries according to function. For example, the Directory View window has an Arrange menu that contains different options for arranging the file icons displayed in the window. Within the logical groups, first place entries in the order in which they need to be used. For example, in the Edit menu, &ldquo;Copy&rdquo; is before &ldquo;Paste&rdquo; because the user must do a &ldquo;Copy&rdquo; operation before doing a &ldquo;Paste.&rdquo; Secondarily, order them by frequency of use, placing the more frequently used entries closer to the top of the menu. In any case, be sure that when you use &ldquo;Close&rdquo; and &ldquo;Exit,&rdquo; they're always at the end of the leftmost menu, whether or not this menu is named File.</PARAGRAPH>
<PARAGRAPH>When creating logical groups of entries, use separators to define the groups, but avoid overusing separators because they can make it difficult to scan the entries. Two situations where separators are especially useful are:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Groups where only one of the entries can be selected at any one time</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Groups whose entries represent multiple attributes that can be applied to a single object </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>As described later in <XREF IDREF="67896" TYPE="TITLE">&ldquo;Using Radio Buttons and Checkboxes in Pull-Down Menus,&rdquo;</XREF> also use radio buttons in the first case and checkboxes in the second.</PARAGRAPH>
<PARAGRAPH>If the menu contains entries that can be determined only when the user launches the application (for example, a menu listing plug-in modules), alphabetize the entries. If this alphabetized group appears in a menu that contains other entries, place the group at the end of a menu and use a separator between it and the preceding entries.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="53348">Using Cascading Menus</TITLE><PARAGRAPH>As you're organizing your menus, you can use cascading menus, but don't use more than a single level. If you think you need more than one level of cascading menus, try adding a new menu instead, especially if you have numerous items in the cascading menus. If you have only a few items, consider creating groups of items by using separators, rather than putting them in separate cascading menus. <INDEXTARGET ID="ch08.menus67"><!-- POSTPROCESSDATA: ch08.menus67|menus:submenussubmenusmenus:cascading menuscascading menus --></PARAGRAPH>
<PARAGRAPH>In general, try to limit your use of cascading menus since users tend to scan only the top-level menus when they're looking for a specific function or trying to learn the functionality of the application. When naming a cascading menu, use a name that suggests what it contains so that users know what functions they're likely to find. For example, in an early version of IRIS Showcase, the grid was under a cascading menu named &ldquo;Editing Options&rdquo; in the Edit menu, and users often weren't able to find it. Now, the different grid sizes are under a cascading menu named &ldquo;Grids&rdquo; in the View menu.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE><XREFTARGET ID="67896">Using Radio Buttons and Checkboxes in Pull-Down Menus</TITLE><PARAGRAPH>If a user can select only one of a group of menu items at any one time, provide a radio button next to each item in the group, and allow only one radio button to be active at any given time. For example, the radio buttons in  allow the user to choose exactly one type of tea at a time, because if you ordered two cups of tea at a time the second one would get cold before you could drink it. Use separator lines to separate a set of radio buttons from other entries in the menu.<INDEXTARGET ID="ch08.menus68"><!-- POSTPROCESSDATA: ch08.menus68|menus:entries:checkboxesmenus:entries:radio buttons --><INDEXTARGET ID="ch08.menus69"><!-- POSTPROCESSDATA: ch08.menus69|checkboxes:in menus --><INDEXTARGET ID="ch08.menus70"><!-- POSTPROCESSDATA: ch08.menus70|radio buttons:in menus --></PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm12 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-12.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-11"><PREFIX>Figure 8-11 </PREFIX><XREFTARGET ID="86773">Radio buttons</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>If a user can select several of a group of related menu items at any one time, provide a checkbox next to each item in the group, and show the active entries with checkmarks. These items typically represent attributes of an object, more than one of which can be applied to the object. For example, the checkboxes in  allow the user to select milk or sugar, or both, or neither. Use separator lines to separate a set of checkboxes from other entries in the menu. </PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm13 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-13.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-12"><PREFIX>Figure 8-12 </PREFIX><XREFTARGET ID="13601">Checkboxes</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="62421">Choosing Mnemonics</TITLE><PARAGRAPH>You need to choose single-character mnemonics for any menus or menu entries you create. Each of the menus in the menu bar should have a unique mnemonic, as should each of the entries within any specific menu. Use the standard mnemonics for standard menu titles and entries, as described earlier in <INDEXTARGET ID="ch08.menus71"><!-- POSTPROCESSDATA: ch08.menus71|keys:special --><INDEXTARGET ID="ch08.menus72"><!-- POSTPROCESSDATA: ch08.menus72|menus:mnemonicsmnemonics, menus --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus.&rdquo;</XREF> You can use a standard mnemonic for a different entry if you're not using that standard entry.</PARAGRAPH>
<PARAGRAPH>If possible, use the first character in the label for the mnemonic. If two menu titles&mdash;or two entries in the same menu&mdash;have the same first character, use the first character for the mnemonic of the menu title or entry that will be used most frequently. For example, &ldquo;Save&rdquo; is used more frequently than &ldquo;Save As...&rdquo;, so &ldquo;Save&rdquo; has the mnemonic &ldquo;S&rdquo; and &ldquo;Save As...&rdquo; has the mnemonic &ldquo;A.&rdquo; </PARAGRAPH>
<PARAGRAPH>When the first character can't be used as the mnemonic, try to pick a consonant in the name that's strongly associated with the word (such as &ldquo;x&rdquo; for Maximize in the Window menu). If no such consonant exists, choose the first available vowel (such as &ldquo;a&rdquo; for Raise in the Window menu). Note that the mnemonic chosen can be an uppercase or lowercase character in the label, but it must be case insensitive for activation (that is, users don't need to hold down the &lt;Shift> key).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="75819">Choosing Keyboard Accelerators</TITLE><PARAGRAPH>Use the keyboard accelerators for the standard menu entries as described in <INDEXTARGET ID="ch08.menus73"><!-- POSTPROCESSDATA: ch08.menus73|keyboard acceleratorsmenus:keyboard accelerators --><INDEXTARGET ID="ch08.menus74"><!-- POSTPROCESSDATA: ch08.menus74|&lt;Ctrl\> key --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus&rdquo;</XREF>; don't use any of the standard accelerators for application-specific entries, even if you're not using those standard entries. For menu entries you create, provide keyboard accelerators only for the most commonly used actions, not for every menu entry in every pull-down menu. </PARAGRAPH>
<PARAGRAPH>In most cases, use the &lt;Ctrl> key and a character for a keyboard accelerator. To avoid conflicts with mnemonics, don't use the &lt;Alt> key rather than &lt;Ctrl>. To make accelerators easier to remember, choose a character that's associated with the menu entry. For example, the standard keyboard accelerators include &lt;Ctrl-c> for &ldquo;Copy&rdquo; and &lt;Ctrl-s> for &ldquo;Save,&rdquo; and the Directory View window uses &lt;Ctrl-i> for &ldquo;Get Info.&rdquo; <XREF IDREF="64434" TYPE="TABLE">Table&nbsp;8-3</XREF> lists the standard keyboard accelerators. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="8-3"><PREFIX>Table 8-3 </PREFIX><XREFTARGET ID="64434">  <EMPHASIS>(continued)        </EMPHASIS>Keyboard Accelerators</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Menu Entry and Mnemonic</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Keyboard Accelerator</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>New</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+N</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Open</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+O</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Save</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+S</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Print</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+P</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Get Info</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+I</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Close</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+W</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Exit</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+Q</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Undo [action]</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+Z</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Redo [action]</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Shift+Ctrl+Z</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Cut</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+X</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Copy</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+C</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Paste</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+V</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Select All</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Ctrl+A</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Deselect All</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Shift+Ctrl+A</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Promote</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Alt+Insert</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>Click for Help</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Shift+F1</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>If a pair of menu entries that both require keyboard accelerators, and one entry reverses the results of the other, their keyboard accelerators should be related. Choose a character that's associated with the more frequently used entry (so that its accelerator is &lt;Ctrl-<VARIABLE>character</VARIABLE>>), and add &lt;Shift> to create the other accelerator (so that its accelerator is &lt;Shift-Ctrl-<VARIABLE>character</VARIABLE>>, where <VARIABLE>character</VARIABLE> is the same for both accelerators). For example, the keyboard accelerator for Undo is &lt;Ctrl-z>, and the keyboard accelerator for Redo is &lt;Shift-Ctrl-z>. In general, avoid using multiple modifier keys such as &lt;Shift-Ctrl-<VARIABLE>character></VARIABLE>, except for this situation.</PARAGRAPH>
<PARAGRAPH>Note that any keyboard accelerator that involves a lowercase character should be shown in the menu as &ldquo;Ctrl+<VARIABLE>uppercase_character</VARIABLE>&rdquo; (for example, &lt;Ctrl-s> should be displayed as &ldquo;Ctrl+S&rdquo;). This is because uppercase characters are easier to read in the menus. If the accelerator involves an uppercase character, display it as &ldquo;Shift+Ctrl+<VARIABLE>uppercase_character</VARIABLE>&rdquo; (for example, &lt;Ctrl-S> should be displayed as &ldquo;Shift+Ctrl+S&rdquo;).</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19592">Disabling Menu Entries</TITLE><PARAGRAPH>As discussed in <INDEXTARGET ID="ch08.menus75"><!-- POSTPROCESSDATA: ch08.menus75|menus:entries:disablingdisabling menu entriesmenus:entries:enablingenabling menu entries --><XREF IDREF="12088" TYPE="TITLE">&ldquo;Standard Menus,&rdquo;</XREF> disable menu entries that aren't currently available (they become grayed out). See the next section, <XREF IDREF="23392" TYPE="TITLE">&ldquo;Dynamic Menu Entries,&rdquo;</XREF> for discussion of the rare cases in which menu entries can be removed from the menu when they're unavailable. </PARAGRAPH>
<PARAGRAPH>In general, disabling entries when selecting them would give the user an error message. For example, if a menu entry works on a selection (such as &ldquo;Cut&rdquo; and &ldquo;Copy&rdquo;), disable it if there's no current selection. If selecting the menu entry would result in no action at all (not even an error message), do not disable the menu entry. As an example, choosing &ldquo;Save&rdquo; from the File menu saves the current document; if the document hasn't been edited, selecting &ldquo;Save&rdquo; has no real effect, but there's no need to display an error message, so never disable this menu entry.</PARAGRAPH>
<PARAGRAPH>Never disable menu entries that launch modeless dialogs. If the dialog isn't applicable when it's launched, disable the OK and Apply buttons on the dialog rather than disabling the menu entry that launches the dialog. Suppose the user launches the dialog and the current context of the application is such that the dialog isn't applicable. Because the dialog is modeless, the user should be able to change the state of the application after the dialog has been launched to put the application in a state where the dialog is now applicable. In contrast, menu entries that launch modal dialogs should be disabled if the dialog isn't currently applicable because the user must dismiss the modal dialog before changing the state of the application. So, if the modal dialog isn't applicable when it's launched, the user has no way to change the state of the application to get it in a state where the dialog would be applicable. See <XREF IDREF="54825" TYPE="TITLE">&ldquo;Dialog Modes&rdquo; in Chapter&nbsp;10</XREF> for a discussion of modal and modeless dialogs.</PARAGRAPH>
<PARAGRAPH>Don't include always-disabled menu entries whose action isn't available in the current version of your application, so that users don't waste time looking for a way to enable the entry. For example, if your application doesn't provide a tutorial, don't include a disabled menu entry for &ldquo;Tutorial&rdquo; in the Help menu. Instead, just leave this entry out of the Help menu. If a feature requires certain hardware configurations, don't disable its menu entry; instead, have it display an information dialog stating why the feature isn't available.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="23392">Dynamic Menu Entries</TITLE><PARAGRAPH>Dynamic menu entries are strongly discouraged, especially when less than four such entries exist. If you have only a few entries that aren't always available, put them in the menu and disable them when they aren't available. You can use dynamic menu entries in those rare cases when almost everything in a menu can change. For example, the <INDEXTARGET ID="ch08.menus76"><!-- POSTPROCESSDATA: ch08.menus76|menus:entries:dynamicdynamic menu entries --><COMMAND>grelnotes</COMMAND> program has a Chapter menu that has entries for each chapter in the current set of release notes. When the user loads a new set of release notes, the entries in the Chapter menu are changed to reflect the new chapter titles. Unless a more obvious ordering is suggested by the content of the entries (for example, the order of chapters), alphabetize the entries in a dynamic menu.</PARAGRAPH>
<PARAGRAPH>Dynamic menu entries are discouraged because they make it hard for users to learn what entries are in each of the menus since they're visible only when the application is in a specific state. Users are likely to assume that certain functions aren't available when they don't see menu entries for them as they're scanning your application's menus for the first time. Users might not realize that they must first get the application in a particular state before they can even see the action. Even when users work with your application for a while, they may not look for certain actions in the menus because they think they've already seen the full contents of the menus, which never included the action that they now want. Also, users become accustomed to the spatial positions of items in menus&mdash;for example, &ldquo;Cut&rdquo; is always the second item in the Edit menu&mdash;and will be frustrated if these positions change.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Pull-Down Menu Guidelines</TITLE><PARAGRAPH><BOLD>In general, when designing pull-down menus in a menu bar . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Be sure that users can access most of your application's functionality from the menu entries. At a minimum, make sure that the core functionality can be accessed from the menus.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include more than a 10-12 entries in a menu and make sure that all of your entries can fit on the screen at one time.</CHECKOFFITEM>
<CHECKOFFITEM>Provide mnemonics for all menus and menu entries. In most cases, the mnemonic should be either the first character of the name or, if there's a conflict, a character that's strongly associated with and included in the name. Use standard mnemonics for standard menus and entries.</CHECKOFFITEM>
<CHECKOFFITEM>Limit the use of tear-off menus. Instead, use support windows for groups of controls that users might want to use continuously.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When selecting specific menus and entries for an application window . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use the standard menus and menu entries as the basis for the overall design of the menu structure. Include all standard menus and entries that are applicable to your application.</CHECKOFFITEM>
<CHECKOFFITEM>Include a Help menu as the rightmost menu.</CHECKOFFITEM>
<CHECKOFFITEM>Include an &ldquo;Undo&rdquo; menu entry, particularly if users can perform actions that destroy or significantly change their data&THORN;.</CHECKOFFITEM>
<CHECKOFFITEM>Include an &ldquo;Exit&rdquo; menu entry for all main windows and for co-primary windows if users will want to completely exit the application from that co-primary window.</CHECKOFFITEM>
<CHECKOFFITEM>Include a &ldquo;Close&rdquo; menu entry for all co-primary windows and support windows that have menu bars. Don't provide a &ldquo;Close&rdquo; entry for main windows.</CHECKOFFITEM>
<CHECKOFFITEM>Include menu entries that repeat the functionality of any pushbuttons on the primary window.</CHECKOFFITEM>
<CHECKOFFITEM>Include menu entries for actions that are accomplished using a direct manipulation method or a mouse shortcut such as double-clicking.</CHECKOFFITEM>
<CHECKOFFITEM>Include menu entries for accessing all primary and support windows that are children of the current window.</CHECKOFFITEM>
<CHECKOFFITEM>Don't include entries for functions that aren't available for the current version of your application.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When naming menus . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use entire one-word titles for menus rather than abbreviations.</CHECKOFFITEM>
<CHECKOFFITEM>Use the standard titles for menus (for example, File and Edit) if they're applicable, but change the standard title if this will make the function more clear. </CHECKOFFITEM>
<CHECKOFFITEM>Don't use a standard menu title if you're changing the standard definition.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When naming menu entries . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use the standard names for standard menu entries, but don't use a standard name for a menu entry that doesn't support the standard behavior.</CHECKOFFITEM>
<CHECKOFFITEM>Each entry name should be an action word, the value of a parameter, an attribute name, the name of a cascading menu, or the name of a co-primary, support, or dialog window. Don't use more than two words (except for task-oriented Help menu entries), and avoid using graphic labels for menus entries unless the graphics make the functionality more clear.</CHECKOFFITEM>
<CHECKOFFITEM>Choose descriptive names that help users learn the functionality of the application. For cascading menus, choose a name that clearly implies the contents of the menu.</CHECKOFFITEM>
<CHECKOFFITEM>Add a word if necessary to be sure the entry clearly indicates what entity will be acted upon. For example, you might use &ldquo;New <VARIABLE>object</VARIABLE>&rdquo; such as &ldquo;New Folder&rdquo; or &ldquo;New Page&rdquo; rather than just &ldquo;New.&rdquo;</CHECKOFFITEM>
<CHECKOFFITEM>If a menu entry toggles its state, use a checkbox and leave the menu entry name the same for the different states (&ldquo;Italics&rdquo;). If this won't be clear, toggle the name so that it indicates what action will be taken if the menu entry is selected (&ldquo;Show Grid,&rdquo; &ldquo;Hide Grid&rdquo;).</CHECKOFFITEM>
<CHECKOFFITEM>Capitalize the menu entry using the same rules as capitalizing book titles.</CHECKOFFITEM>
<CHECKOFFITEM>Use entire words rather than abbreviations. </CHECKOFFITEM>
<CHECKOFFITEM>Display an ellipsis (...) after menu entries that bring up a dialog that requests more information from the user. Don't use ellipses if the dialog simply brings up information that the user requested (for example, a Help dialog).</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When ordering menus and menu entries . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Place the standard menus in the standard order (File, Selected, Edit, View, Tools, Options, Help), even if you have renamed any of these menus. Place any new menus between the View and Tools menus.</CHECKOFFITEM>
<CHECKOFFITEM>Place standard menu entries in the standard order. &ldquo;Close&rdquo; and &ldquo;Exit&rdquo; are always at the end of the leftmost menu whether or not this menu is named File.</CHECKOFFITEM>
<CHECKOFFITEM>Group menu entries logically. If a new menu entry is related to one of the standard menu entries, place it near that standard menu entry.</CHECKOFFITEM>
<CHECKOFFITEM>Place items in the menu first according to the order they will be used, and second according to their frequency of use (with more frequently used items closer to the top of the menu).</CHECKOFFITEM>
<CHECKOFFITEM>Alphabetize entries that can be determined only when the user launches the application. If this alphabetized group appears in a menu that contains other entries, place the group at the end of a menu and use a separator between it and the preceding entries.</CHECKOFFITEM>
<CHECKOFFITEM>Use radio buttons for mutually exclusive menu entries, and checkboxes for a group of related menu entries, any number of which can be selected at any one time.</CHECKOFFITEM>
<CHECKOFFITEM>Use separators when necessary to group items&mdash;for example, to set off a group of related entries that use radio buttons or checkboxes.</CHECKOFFITEM>
<CHECKOFFITEM>Limit the use of cascading menus. Never use more than one level of cascading menus.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When selecting keyboard accelerators for menu entries . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Use standard keyboard accelerators for standard menu entries; don't use any of the standard accelerators for your own entries, even if you're not using those standard entries. </CHECKOFFITEM>
<CHECKOFFITEM>Provide keyboard accelerators for the most frequently used menu entries. Don't provide accelerators for all menu entries.</CHECKOFFITEM>
<CHECKOFFITEM>Use the key combination &lt;Ctrl><VARIABLE>character</VARIABLE>. Don't use the key combination &lt;Alt><VARIABLE>character</VARIABLE> because this conflicts with mnemonics.</CHECKOFFITEM>
<CHECKOFFITEM>For pairs of menu entries where one entry reverses the results of the other entry (&ldquo;Undo&rdquo; and &ldquo;Redo&rdquo;), use &lt;Ctrl><VARIABLE>character</VARIABLE> for the most frequently used entry and &lt;Shift>&lt;Ctrl><VARIABLE>character</VARIABLE> for the other entry where <VARIABLE>character</VARIABLE> is the same for both accelerators.</CHECKOFFITEM>
<CHECKOFFITEM>Display all characters in keyboard accelerators as uppercase (for example, display &lt;Ctrl>s as &ldquo;Ctrl+S&rdquo;). For keyboard accelerators that involve uppercase characters, show the &lt;Shift> key as part of the keyboard accelerator (for example, display &lt;Ctrl>S as &ldquo;Shift+Ctrl+S&rdquo;).</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When deciding when to disable menu entries . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>If selecting the menu entry in the current context would give the user an error message, show the menu entry as disabled (dimmed). </CHECKOFFITEM>
<CHECKOFFITEM>Avoid using dynamic entries. Rather than removing an entry when it's temporarily unavailable, include it and disable it as appropriate.</CHECKOFFITEM>
</CHECKOFF>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="62260">Popup Menus</TITLE><PARAGRAPH>Use popup menus to provide a quick way for users to access the most commonly used functions in the associated work are. This section covers:<INDEXTARGET ID="ch08.menus77"><!-- POSTPROCESSDATA: ch08.menus77|menus:popuppopup menus --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="21804" TYPE="TITLE">&ldquo;What to Put in Popup Menus&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="48056" TYPE="TITLE">&ldquo;Disabling Popup Menu Entries&rdquo;</XREF>&space;</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For example, you might provide a popup menu containing &ldquo;Cut,&rdquo; &ldquo;Copy,&rdquo; &ldquo;Paste,&rdquo; and &ldquo;Delete&rdquo; in a text application. Never allow popup menus to be the sole access to functions because these menus are hidden. Instead, popup entries typically represent the most commonly used actions from the application window's pull-down menus. (See <XREF IDREF="19797" TYPE="TITLE">&ldquo;Menu Traversal and Activation&rdquo;</XREF> for a description of how users interact with popup menus.)</PARAGRAPH>
<PARAGRAPH>At most, provide a different popup menu for each main area of your application's window (that is, for each main field or pane). Note that this differs from the <DOCTITLE>OSF/Motif Style Guide</DOCTITLE>, which allows the availability and content of popup menus to vary depending on the element under the pointer or the selection state of the element. </PARAGRAPH>
<PARAGRAPH>Provide one set of entries in the popup menu, and enable and disable each of them as appropriate, instead of following the OSF/Motif model. With one set of entries, users will become familiar with the popup entries more quickly and won't be confused when entries are sometimes unavailable (see <XREF IDREF="23392" TYPE="TITLE">&ldquo;Dynamic Menu Entries&rdquo;</XREF> for discussion of how dynamic entries can be confusing to users). </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="21804">What to Put in Popup Menus</TITLE><PARAGRAPH>For each popup menu, include a title followed by a separator and the individual menu entries (see <INDEXTARGET ID="ch08.menus78"><!-- POSTPROCESSDATA: ch08.menus78|menus:popup:contentspopup menus:contents --><XREF IDREF="25877" TYPE="GRAPHIC">Figure&nbsp;8-13</XREF>). The title should be the name of the application or, if the application has more than one popup menu, it should describe the purpose of the menu. Since the entries typically repeat entries found in the pull-down menus, display titles similarly: in the same order, and with the same or very similar names as in the pull-down menu. Include ellipses and keyboard accelerators if they're included in the corresponding entry in the pull-down menu, but don't show mnemonics in popup menus.</PARAGRAPH>
<!-- RASTERCONVERT: ch08.menus.cgm4 -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="ch08.menus-4.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="8-13"><PREFIX>Figure 8-13 </PREFIX><XREFTARGET ID="25877">Popup Menu</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Popup menus generally don't have entries that require radio buttons or checkboxes since these are rarely common enough actions to be included in a popup menu. If you do need to include these kinds of entries in a popup menu, separate them from the rest of the entries with separators and include the radio buttons or checkboxes. See <XREF IDREF="67896" TYPE="TITLE">&ldquo;Using Radio Buttons and Checkboxes in Pull-Down Menus&rdquo;</XREF> for more information. Popup menus shouldn't contain cascading menus, nor should they be tear-off menus.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="48056">Disabling Popup Menu Entries</TITLE><PARAGRAPH>As with pull-down menu entries, if one of the entries in a popup menu is unavailable for selection in the current context, disable that menu entry. Don't, however, remove it from the menu.<INDEXTARGET ID="ch08.menus79"><!-- POSTPROCESSDATA: ch08.menus79|menus:entries:disablingdisabling menu entriesmenus:entries:enablingenabling menu entriespopup menus:disabling entries --></PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Popup Menu Guidelines</TITLE><PARAGRAPH><BOLD>When choosing when a popup menu should appear . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>At most, provide a different popup menu for each main area (that is main field or main pane) of the window. Don't change the availability of a popup menu based on what graphical element the pointer is over or based on the selection state of any of the graphical elements.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When deciding what to include in a popup menu . . . </BOLD></PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Include entries for the most commonly used functions from the pull-down menus, and use the same names in the same order as they're displayed in the pull-down menus.</CHECKOFFITEM>
<CHECKOFFITEM>Avoid entries that require checkboxes or radio buttons. These are typically not the most commonly used menu functions.</CHECKOFFITEM>
<CHECKOFFITEM>Don't make menu entries the sole access to these functions.</CHECKOFFITEM>
<CHECKOFFITEM>Don't change the content of the menu based on what graphical element the pointer is over, or based on the selection state or contents of this element. Instead, put all entries in the popup menu for the main area of the window, then enable and disable entries as appropriate. </CHECKOFFITEM>
<CHECKOFFITEM>Don't include cascading menus and don't use tear-off menus.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH><BOLD>When displaying the contents of the popup menu . . .</BOLD>&space;</PARAGRAPH>
<CHECKOFF><CHECKOFFITEM>Include a title that's either the name of the application, or if the application has more than one popup menu, that describes the purpose of the menu. </CHECKOFFITEM>
<CHECKOFFITEM>Use only one separator, which goes between the title and the individual menu entries.</CHECKOFFITEM>
<CHECKOFFITEM>Show ellipses and keyboard accelerators if these are shown in the corresponding pull-down menu entry, but don't show mnemonics.</CHECKOFFITEM>
</CHECKOFF>
<PARAGRAPH>If selecting the menu entry in the current context would give the user an error message, show the menu entry as disabled (dimmed). Don't remove the menu entry when it's temporarily unavailable. <INDEXTARGET ID="ch08.menus80"><!-- POSTPROCESSDATA: ch08.menus80|pagesviewscardskeyboard bindingbinding keyspalettes --><BOLD></BOLD></PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
