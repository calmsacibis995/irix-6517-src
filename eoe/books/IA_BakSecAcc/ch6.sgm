<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="6"><TITLE><XREFTARGET ID="65846">Administering the System Audit Trail</TITLE><PARAGRAPH>The System Audit Trail features allow administrators to review a record of all system activity. The ongoing record of system activity shows general trends in system usage and also violations of your system use policy. For example, any unsuccessful attempts to use system resources can be recorded in the audit trail. If a user consistently attempts to access files owned by other users, or attempts to guess the root password, this can be recorded also. The site administrators can monitor all system activity through the audit trail. Sections of this chapter include:<INDEXTARGET ID="ch61"><!-- POSTPROCESSDATA: ch61|auditing, description --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="52560" TYPE="TITLE">&ldquo;About MACs and DACs&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="32265" TYPE="TITLE">&ldquo;Enabling Auditing&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="79796" TYPE="TITLE">&ldquo;Default Auditing&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="77858" TYPE="TITLE">&ldquo;Customizing Auditing&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="33289" TYPE="TITLE">&ldquo;About the Audit Data&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="45356" TYPE="TITLE">&ldquo;About Security Violations&rdquo;</XREF></PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="37238" TYPE="TITLE">&ldquo;Archiving Audit Data&rdquo;</XREF></PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="52560">About MACs and DACs</TITLE><PARAGRAPH>References are made in this chapter to auditable &ldquo;Mandatory Access Control&rdquo; and &ldquo;MAC&rdquo; events, such as an event generated when an attempt is made to access a file protected by a higher MAC clearance. The audit system provides facilities to audit all events on all IRIX operating systems. Mandatory Access Control (MAC) is available only in the optional Trusted IRIX/B operating system. No MAC audit events are generated by standard IRIX. If you have installed Trusted IRIX/B, you will have received additional documentation describing the special security features in that product. Users of standard IRIX can safely ignore all references to MAC, labels, and the <COMMAND>dbedit</COMMAND>, <COMMAND>chlabel</COMMAND> and <COMMAND>newlabel</COMMAND> commands. To find out if a system is running Trusted IRIX/B, use the <COMMAND>versions</COMMAND> command to see if the <FILENAME>trix_eoe</FILENAME> product image is installed.</PARAGRAPH>
<PARAGRAPH>You can also determine if a system is running Trusted IRIX/B by using the <COMMAND>sysconf</COMMAND> command to see if MAC is configured (1 indicates it is):</PARAGRAPH>
<CODE>
<USERINPUT>sysconf MAC</USERINPUT>&space;
1 
</CODE>
<PARAGRAPH>Both standard IRIX and Trusted IRIX/B systems give a similar <COMMAND>uname</COMMAND>&space;<CMDLINEOPT>-a</CMDLINEOPT> response:</PARAGRAPH>
<EXAMPLE>
IRIX64 <VARIABLE>SystemName</VARIABLE> 6.5 10301649 IP27
</EXAMPLE>
<PARAGRAPH>Discretionary Access Control (DAC) is the term used by the auditing subsystem for the standard UNIX system of file permissions. IRIX uses the standard permissions system common to all UNIX based operating systems.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="32265">Enabling Auditing</TITLE><PARAGRAPH>The audit subsystem is distributed with your IRIX operating system media, but is not installed by default. To enable auditing, you must use Inst to install the <INDEXTARGET ID="ch62"><!-- POSTPROCESSDATA: ch62|auditing:enabling --><VARIABLE>eoe.sw.audit</VARIABLE> software package from your distribution media. Inst is described in detail in <DOCTITLE></DOCTITLE>
<EXTREF IDREF="29804" BOOK="IA_InstLicns" FILE="" HDG="29804" INFO="">IRIX Admin: Software Installation and Licensing</EXTREF>
<DOCTITLE></DOCTITLE>. Once this package has been installed, reboot your system and use the <COMMAND>chkconfig</COMMAND> utility to enable auditing. The <REFPAGE>chkconfig(1M)</REFPAGE> reference page provides complete information on the use of <COMMAND>chkconfig</COMMAND> but, simply described, you will see a list of configurable options and a notation of <VARIABLE>off</VARIABLE> or <VARIABLE>on</VARIABLE> for each option. The list is in alphabetical order. </PARAGRAPH>
<PARAGRAPH>For example, here is a partial <COMMAND>chkconfig</COMMAND> listing that includes the audit option:</PARAGRAPH>
<CODE>
Flag                 State
====                 =====
audit                off
automount            on
windowsystem         on
xdm                  off
</CODE>
<PARAGRAPH>The following command enables auditing on your system:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>chkconfig audit on</USERINPUT>
</EXAMPLE>
<PARAGRAPH>The system immediately begins collecting audit data on the default set of audit events. The default audit events are listed and described below.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="79796">Default Auditing</TITLE><PARAGRAPH>The default auditing environment is already set up when you install IRIX. You need not take any action to maintain the default auditing environment. Within your default IRIX distribution, there is a file called <INDEXTARGET ID="ch63"><!-- POSTPROCESSDATA: ch63|auditing:default environment --><FILENAME>/etc/init.d/audit</FILENAME>. This file contains the default audit trail initialization. The default auditing selections produce a full record of system activity with a minimum of disk-space usage. <XREF IDREF="91264" TYPE="TABLE">Table&nbsp;6-1</XREF> contains all event types audited by default. The individual event types are not described in this list, but a description for all event types is given in <XREF IDREF="63445" TYPE="TITLE">&ldquo;Auditable Events&rdquo;</XREF>. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="6-1"><PREFIX>Table 6-1 </PREFIX><XREFTARGET ID="91264">Events Audited by Default</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Default Audited Events</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH></PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_access_denied</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_domainname_set</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_mount</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_ae_custom</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_exec</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_open</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_ae_dbedit</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_exit</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_proc_attr_write</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_ae_identity</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_fchdir</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_proc_attr_write</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_ae_mount</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_fd_attr_write</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_proc_attr_write2</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_bsdipc_create</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_file_attr_write</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_proc_read</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_bsdipc_create_pair</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_file_crt_del</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_proc_write</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_bsdipc_expl_addr</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_file_crt_del2</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_svipc_change</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_bsdipc_mac_change</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_file_write</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_svipc_create</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_bsdipc_shutdown</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_fork</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_svipc_remove</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_chdir</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_hostid_set</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_sysacct</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_chroot</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH>sat_hostname_set</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH>sat_tty_setlabel</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>sat_clock_set</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="108"><PARAGRAPH></PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="108"><PARAGRAPH></PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="77858">Customizing Auditing</TITLE><PARAGRAPH>When you have installed your system, you can select the level and type of auditing that you wish to use. The default auditing environment described above is created for you at installation time. For most purposes this auditing environment is satisfactory. However, remember that the System Audit Trail is completely configurable at any time through the <INDEXTARGET ID="ch64"><!-- POSTPROCESSDATA: ch64|auditing:customizing --><INDEXTARGET ID="ch65"><!-- POSTPROCESSDATA: ch65|customizing auditing --><INDEXTARGET ID="ch66"><!-- POSTPROCESSDATA: ch66|audit:customizing --><INDEXTARGET ID="ch67"><!-- POSTPROCESSDATA: ch67|SAT:customizing --><INDEXTARGET ID="ch68"><!-- POSTPROCESSDATA: ch68|auditing:cofiguration utilities --><COMMAND>sat_select</COMMAND> and <COMMAND>satconfig</COMMAND> utilities.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>satconfig</COMMAND> utility is the preferred tool for use on graphics systems, since it provides a convenient graphical interface for switching each auditable event type on or off. The <COMMAND>sat_select</COMMAND> command is useful for server users and others who do not wish to use the <COMMAND>satconfig</COMMAND> utility. These utilities are discussed in detail in <XREF IDREF="43901" TYPE="TITLE">&ldquo;About satconfig&rdquo;</XREF> and <XREF IDREF="61964" TYPE="TITLE">&ldquo;About sat_select&rdquo;</XREF>.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Auditable Actions</TITLE><PARAGRAPH>You can audit all system activity or certain types of activity, such as file removal or access denial. Users are tracked through the audit trail by User ID (UID) numbers. Any audited activity is associated with the UID of the person who performed that action. It is a central feature of the System Audit Trail that though the effective UID changes with the use of the <COMMAND>su</COMMAND> command, the SAT ID does not. All of a user's actions after logging in are audited at the original login UID.</PARAGRAPH>
<PARAGRAPH>When you select the type of activities to audit, there are still several options for auditing. For example, if you wish to monitor the removal of files, you can generate an audit record under two conditions:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>when the action fails (sat_access_denied, sat_access_failed) </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>when the action succeeds (sat_file_crt_del, sat_file_crt_del2)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Many different types of activities take place on your trusted computer system. There are login attempts, file manipulations, use of devices (such as printers and tape drives), and administrative activity. Within this list of general activities, you may choose to audit many specific kinds of actions.</PARAGRAPH>
<PARAGRAPH>Below is a list of auditable actions with a short definition of each action and one or more of the appropriate event types that can be audited. Important actions contain a note that they should always be audited:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>login and logout (sat_ae_identity)</PARAGRAPH>
<PARAGRAPH>Any login attempt, whether successful or not, should be audited. Also, an audit record should be generated when the user logs out of the system.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>su (sat_check_priv, sat_ae_identity)</PARAGRAPH>
<PARAGRAPH>Whenever a user invokes the <COMMAND>su</COMMAND> command, whether to super-use some administrative account, such as root or another user account, the event should be audited. This is especially true for unsuccessful attempts, as they may indicate attempts at unauthorized access.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>chlabel and newlabel (file_attr_write, sat_proc_own_attr_write)</PARAGRAPH>
<PARAGRAPH>Any time a user changes a MAC label on a Trusted IRIX/B system, it is wise to make an audit record of the event. (This does not happen under standard IRIX.)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>password change (sat_ae_identity)</PARAGRAPH>
<PARAGRAPH>Whenever a user changes his or her password, it is wise to make an audit record of the event.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>administrative activity (sat_ae_mount, sat_clock_set, sat_hostid_set, etc)</PARAGRAPH>
<PARAGRAPH>Any activity related to system administration should be carefully audited; for example, editing the <FILENAME>/etc/fstab</FILENAME> file.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>DAC permissions change (sat_fd_attr_write, sat_file_attr_write)</PARAGRAPH>
<PARAGRAPH>When a user invokes the <COMMAND>chmod</COMMAND> command to change the DAC permissions on a file or the <COMMAND>chown</COMMAND> command to change the ownership of a file.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>file creation (sat_file_crt_del, sat_file_crt_del2)</PARAGRAPH>
<PARAGRAPH>Whenever a new link, file, or directory is created.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>file deletion (sat_file_crt_del, sat_file_crt_del2)</PARAGRAPH>
<PARAGRAPH>Whenever a link, file, or directory is removed.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>process activity (sat_exec, sat_exit, sat_fork)</PARAGRAPH>
<PARAGRAPH>When a new process is created, forked, exited, or killed.</PARAGRAPH>
<PARAGRAPH>The audit administrator (auditor) can change the audited events by entering a new <COMMAND>sat_select</COMMAND> command. It is possible to change the selected event types at different times of day, by using the <INDEXTARGET ID="ch69"><!-- POSTPROCESSDATA: ch69|sat_select --><INDEXTARGET ID="ch610"><!-- POSTPROCESSDATA: ch610|audit:sat_select --><INDEXTARGET ID="ch611"><!-- POSTPROCESSDATA: ch611|SAT:sat_select --><COMMAND>cron</COMMAND> utility to execute <COMMAND>sat_select</COMMAND> periodically.</PARAGRAPH>
<PARAGRAPH>To tailor your auditing for your specific needs, use the <COMMAND>sat_select</COMMAND> or <COMMAND>satconfig</COMMAND> utilities. </PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="63445">Auditable Events</TITLE><PARAGRAPH>The following is a complete list of auditable event types: <INDEXTARGET ID="ch612"><!-- POSTPROCESSDATA: ch612|auditing:list of items to audit --><INDEXTARGET ID="ch613"><!-- POSTPROCESSDATA: ch613|audit:event types --><INDEXTARGET ID="ch614"><!-- POSTPROCESSDATA: ch614|SAT:event types --></PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>sat_access_denied </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Access to the file or some element of the path was denied due to enforcement of MAC or DAC permissions. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_access_failed </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Access to a file was denied because the path specified does not exist. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_chdir </HANGITEM>
<HANGBODY><PARAGRAPH>Current working directory was changed with <COMMAND>chdir</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_chroot </HANGITEM>
<HANGBODY><PARAGRAPH>Current root directory was changed with <COMMAND>chroot</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_open </HANGITEM>
<HANGBODY><PARAGRAPH>A file was opened with write permission.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_open_ro </HANGITEM>
<HANGBODY><PARAGRAPH>A file was opened read-only. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_read_symlink </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The contents of a symbolic link were read with <COMMAND>readlink</COMMAND>. Note that the file the link &ldquo;points&rdquo; to is not accessed in any way.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_file_crt_del </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A file was added or removed from a directory. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_file_crt_del2 </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;This is the same as sat_file_crt_del, but reports that two files (perhaps a link) were removed. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_file_write </HANGITEM>
<HANGBODY><PARAGRAPH>The data in a file was modified by <COMMAND>truncate</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_mount </HANGITEM>
<HANGBODY><PARAGRAPH>A filesystem was mounted or unmounted. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_file_attr_read </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The attributes of a file were read by <COMMAND>stat</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_file_attr_write </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The attributes of a file were written by <COMMAND>chmod</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_exec </HANGITEM>
<HANGBODY><PARAGRAPH>A new process has been introduced by <COMMAND>exec</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_sysacct </HANGITEM>
<HANGBODY><PARAGRAPH>System accounting has been turned on or off.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fchdir </HANGITEM>
<HANGBODY><PARAGRAPH>The user changed from the current working directory to the directory &ldquo;pointed&rdquo; to by the given open descriptor. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fd_read </HANGITEM>
<HANGBODY><PARAGRAPH>Information was read from a file descriptor using <COMMAND>read</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fd_read2 </HANGITEM>
<HANGBODY><PARAGRAPH>The same event as sat_fd_read, but with multiple file descriptors.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_tty_setlabel </HANGITEM>
<HANGBODY><PARAGRAPH>The user set the label of a port via <COMMAND>ioctl</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fd_write </HANGITEM>
<HANGBODY><PARAGRAPH>The user finalized a change to a file descriptor. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fd_attr_write </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user changed the attributes of the file &ldquo;pointed&rdquo; to by the given file descriptor using<COMMAND>&space;fchmod</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_pipe </HANGITEM>
<HANGBODY><PARAGRAPH>The user created an unnamed pipe. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_dup </HANGITEM>
<HANGBODY><PARAGRAPH>The user duplicated a file descriptor. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_close </HANGITEM>
<HANGBODY><PARAGRAPH>The user closed a file descriptor. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_proc_read </HANGITEM>
<HANGBODY><PARAGRAPH>The user read from a process's address space using <COMMAND>ptrace</COMMAND>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_proc_write </HANGITEM>
<HANGBODY><PARAGRAPH>The user finalized a changes to a process's address space using <COMMAND>ptrace</COMMAND>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_proc_attr_read </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user read a process's attributes.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_proc_attr_write </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user finalized a change to a process's attributes.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_fork </HANGITEM>
<HANGBODY><PARAGRAPH>The user duplicated the current process (thereby creating a new process). </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_exit </HANGITEM>
<HANGBODY><PARAGRAPH>The user ended the current process. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_proc_own_attr_write </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Process attributes were changed.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_clock_set </HANGITEM>
<HANGBODY><PARAGRAPH>The system clock was set.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_hostname_set </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The hostname was set. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_domainname_set </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The domain name was set. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_hostid_set </HANGITEM>
<HANGBODY><PARAGRAPH>The host ID was set. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_check_priv </HANGITEM>
<HANGBODY><PARAGRAPH>Action requiring superuser privilege was performed.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_control </HANGITEM>
<HANGBODY><PARAGRAPH>The <COMMAND>sat_select</COMMAND> command was used. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_svipc_access </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user accessed a System V IPC data structure. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_svipc_create </HANGITEM>
<HANGBODY><PARAGRAPH>The user created a System V IPC data structure. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_svipc_remove </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user removed a System V IPC data structure. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_svipc_change </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user set some attribute of a System V IPC data structure. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_create </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user created a socket. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_create_pair </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user created a socket pair. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_shutdown </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user shut down a socket.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_mac_change </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The user changed the MAC label on a socket.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_address </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A network address was used explicitly via the <COMMAND>accept</COMMAND>, <COMMAND>bind</COMMAND>, or <COMMAND>connect</COMMAND> system calls. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_resvport </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A reserved port was successfully bound.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_deliver </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was delivered to a socket. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_cantfind </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was not delivered because the socket could not be found. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_snoop_ok </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was delivered to a raw (<REFPAGE>snoop</REFPAGE>) socket.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_snoop_fail</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was not delivered to a raw socket because it was prevented by MAC policy. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_rx_ok</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was received on an interface. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_rx_range</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was not received, due to MAC violation outside the allowed label range on that interface.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_rx_missing</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was received on an interface with a missing or damaged MAC label. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_tx_ok</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was sent on the interface. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_tx_range</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was not sent, due to a MAC violation.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>&space;sat_bsdipc_tx_toobig</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A packet was not sent, because the MAC label was too large for the IP header to contain. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_if_config</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;An interface structure's attributes were changed.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>&space;sat_bsdipc_if_invalid</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Attempt to change MAC labels was disallowed for lack of MAC privilege. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_bsdipc_if_setlabel</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The MAC labels on an interface structure were changed.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>All <COMMAND>sat_ae</COMMAND> events are used for application auditing, which means that a privileged program generated the record, rather than the kernel.</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>sat_ae_identity</HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A login- or logout- related event occurred. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_ae_dbedit </HANGITEM>
<HANGBODY><PARAGRAPH>A file was modified using the <COMMAND>dbedit</COMMAND> utility. (This utility is available only with the Trusted IRIX/B optional product.) </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_ae_mount </HANGITEM>
<HANGBODY><PARAGRAPH>An NFS filesystem was mounted. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>sat_ae_custom</HANGITEM>
<HANGBODY><PARAGRAPH>An application-defined event occurred. Application developers can engineer their applications to generate this event.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="43901">About satconfig</TITLE><PARAGRAPH><COMMAND>satconfig</COMMAND> is a graphical utility that you use to configure exactly which events will be audited on your system. Any user can invoke <INDEXTARGET ID="ch615"><!-- POSTPROCESSDATA: ch615|<ITALICS>satconfig </ITALICS>utility --><INDEXTARGET ID="ch616"><!-- POSTPROCESSDATA: ch616|auditing, <ITALICS>satconfig</ITALICS> utility --><COMMAND>satconfig</COMMAND>, but only the superuser may actually change the auditing environment. </PARAGRAPH>
<PARAGRAPH>When you first begin using the audit trail, there is a default set of audited events. You can modify that selection using <COMMAND>satconfig</COMMAND>, but the <COMMAND>satconfig</COMMAND> window contains a pulldown menu labeled &ldquo;edit&rdquo; that you can use at any time to set the auditing environment to a few preset environments. These include the original SGI default audit selections, your local default selections, all event types selected, no event types selected, and a current events selection. The current events selection restores the auditing environment that was last saved on your machine. The local default environment can be any combination of event types that you choose. You create a local default environment by following the instructions in <XREF IDREF="20065" TYPE="TITLE">&ldquo;Saving and Retrieving Your Auditing Environment&rdquo;</XREF>. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Using satconfig</TITLE><PARAGRAPH>When you invoke <COMMAND>satconfig</COMMAND>, a new window opens on your screen. The main body of the window has a list of all the available event types. Next to each event type name is a button. At any time, each button is either up or down. If the button is down, the event type is selected for auditing. If the button is up, the event type is not audited. Use your mouse and the left mouse button to select whether you want the event type in question to be on or off. </PARAGRAPH>
<PARAGRAPH>At the bottom of the <COMMAND>satconfig </COMMAND>screen there are three buttons. These buttons are labeled <BUTTON>Apply</BUTTON>, <BUTTON>Revert</BUTTON>, and <BUTTON>Quit</BUTTON>. When you have made your auditing selections, use the left mouse button to press the <BUTTON>Apply </BUTTON>button on the screen to activate the auditing selections. If you change your mind while making audit selections, you can use the <BUTTON>Revert </BUTTON>button to reset the individual event type buttons to the selections currently in use. The third button is labeled <BUTTON>Quit </BUTTON>and closes the <COMMAND>satconfig</COMMAND> window. If you have made selections that have not been applied, <COMMAND>satconfig</COMMAND> asks you if you really want to quit and discard the changes you have made without applying them.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="61964">About sat_select</TITLE><PARAGRAPH>The <COMMAND>sat_select</COMMAND> utility is a character-based program that modifies your audit event type selections. Additionally, you can use the <INDEXTARGET ID="ch617"><!-- POSTPROCESSDATA: ch617|<ITALICS>sat_select</ITALICS> utility --><COMMAND>sat_select</COMMAND> utility to change your local default auditing environment or to read in a preselected set of event type choices from a file. In this way, you can have several preset auditing environments ready in files for various situations and switch between them conveniently. If you have a graphical system, <COMMAND>satconfig</COMMAND> is the suggested utility for administering your auditing event type selections. <COMMAND>sat_select</COMMAND> exists for non-graphics systems and for making large-scale, file-oriented changes. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Using sat_select</TITLE><PARAGRAPH>For complete information on using <COMMAND>sat_select</COMMAND>, consult the <REFPAGE>sat_select(1M)</REFPAGE> reference page, but in general, the syntax most often used is</PARAGRAPH>
<EXAMPLE>
sat_select -on event 
</EXAMPLE>
<PARAGRAPH>and </PARAGRAPH>
<EXAMPLE>
sat_select -off event 
</EXAMPLE>
<PARAGRAPH><COMMAND>sat_sel</COMMAND><VARIABLE>ect -on event</VARIABLE> directs the system audit trail to collect records describing the given event. If &ldquo;all&rdquo; is given as the <VARIABLE>event</VARIABLE> string, all event types are collected.</PARAGRAPH>
<PARAGRAPH><COMMAND>sat_select </COMMAND><VARIABLE>-off event</VARIABLE> directs the system to stop collecting information on that event type. If &ldquo;all&rdquo; is given as the <VARIABLE>event</VARIABLE> string, all event types are ignored. </PARAGRAPH>
<PARAGRAPH>With no arguments,<COMMAND>&space;sat_select</COMMAND> lists the audit events currently being collected. The effect of subsequent <COMMAND>sat_select</COMMAND> programs is cumulative. Help is available with the <CMDLINEOPT>-h</CMDLINEOPT> option.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="20065">Saving and Retrieving Your Auditing Environment</TITLE><PARAGRAPH>From time to time you may wish to change your auditing environment. You do this with the <INDEXTARGET ID="ch618"><!-- POSTPROCESSDATA: ch618|auditing:saving --><COMMAND>sat_select</COMMAND> command. If you are making a temporary change, you may wish to save your current auditing environment for easy replacement. To do so, use this command: </PARAGRAPH>
<EXAMPLE>
<USERINPUT>sat_select -out > /etc/config/sat_select.options </USERINPUT>
</EXAMPLE>
<PARAGRAPH>Then, to restore auditing to the saved state, use this command:<INDEXTARGET ID="ch619"><!-- POSTPROCESSDATA: ch619|auditing:recovery --></PARAGRAPH>
<EXAMPLE>
<USERINPUT>sat_select 'cat /etc/config/sat_select.options'</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>The single quotation marks in the above example are crucial and must not be omitted.</PARAGRAPH>
<PARAGRAPH>You may save as many different audit states as you wish, in different filenames. Simply insert the filename of the state you wish to use in the above example. The <FILENAME>/etc/config/sat_select.options</FILENAME> file is the default audit state file that is read at boot time. The <FILENAME>/etc/config/sat_select.options</FILENAME> file must be labeled <FILENAME>dblow</FILENAME> if you are running Trusted IRIX/B, and you should restrict DAC file permissions to root only regardless of your operating system type.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="13988">Placing the Audit Files</TITLE><PARAGRAPH>The location of your audit record files is also configurable. You can direct your audit records to be saved to any location you desire, including magnetic tape. <INDEXTARGET ID="ch620"><!-- POSTPROCESSDATA: ch620|auditing:saved files --><COMMAND>satd</COMMAND> saves its input data in the directories or files named in its <VARIABLE>path</VARIABLE> arguments.</PARAGRAPH>
<PARAGRAPH>The <CMDLINEOPT>-f</CMDLINEOPT> option to <COMMAND>satd</COMMAND> specifies an output path, which may be a directory or a file. If the output path is a specific filename, <COMMAND>satd</COMMAND> writes to that file. If the output path is a directory, <COMMAND>satd</COMMAND> creates and fills uniquely named files under that directory; files are named for their creation time. For instance, <FILENAME>sat_9101231636</FILENAME> was created in 1991 on January 23 at 4:36 pm. You can specify several output paths in the <COMMAND>satd</COMMAND> command line. To do so, you must precede each path with a <CMDLINEOPT>-f</CMDLINEOPT> or put commas (but no blank space) between each pathname. Taken together, all of the output paths specified in the command line are known as the path list. Here are a pair of examples of command lines that contain path lists:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>satd -f /sat1 -f /sat2 -f /sat3 -f /dev/null</USERINPUT>&space;
<USERINPUT>satd -f /sat1,/sat2,/sat3,/dev/null</USERINPUT>
</EXAMPLE>
<PARAGRAPH>If no output paths are specified after the <CMDLINEOPT>-f</CMDLINEOPT> flag, the audit trail records are not saved anywhere, and the system halts. If a path given as a command-line parameter is invalid for any reason, a warning is printed, that path is omitted from the path list, and <COMMAND>satd</COMMAND> continues operating with whatever specified paths are valid. If the specified path does not already exist, <COMMAND>satd</COMMAND> creates a file with that name.</PARAGRAPH>
<PARAGRAPH>A file or directory is full when the filesystem on which it resides has no more available space. If a directory is specified as an output path, an audit file is constructed under that directory. When the audit file is filled to an internally specified maximum size, it is closed and a new audit file is created under that directory.</PARAGRAPH>
<PARAGRAPH>When one output path becomes full, <COMMAND>satd</COMMAND> replaces the current output path with a path that is not full. The method of replacement is configurable with the <CMDLINEOPT>-r</CMDLINEOPT> option. The output path is also replaced if <COMMAND>satd</COMMAND> receives a SIGHUP signal, for instance one sent with a <COMMAND>kill</COMMAND> command.</PARAGRAPH>
<PARAGRAPH>If an output path becomes nearly full, warnings are displayed to the system console to notify the administrator to move the audit trail to tape. If all of the output paths become completely full, the system state moves to single-user mode with a very short grace period.</PARAGRAPH>
<PARAGRAPH>In order to protect against the loss of data due to sudden system state changes, when satd begins operations, it creates a file called <FILENAME>/satd.reserve</FILENAME>, which is exactly 250,000 bytes long. If <COMMAND>satd</COMMAND> runs out of space, it immediately removes the <FILENAME>satd.reserve</FILENAME> file to free the 250,000 bytes for use to store audit records while the system moves to single-user mode. While the system is coming down, <COMMAND>satd</COMMAND> stores audit records in a series of files named <FILENAME>/satd.reserve-n</FILENAME>, where <VARIABLE>n</VARIABLE> starts as 0. While <COMMAND>satd</COMMAND> is doing this, it issues a warning via <COMMAND>wall </COMMAND>to all users that they have ten seconds before system shutdown. </PARAGRAPH>
<PARAGRAPH>If the file <FILENAME>/satd.emergency-0</FILENAME> already exists, <COMMAND>satd </COMMAND>immediately moves to the first available filename, typically <FILENAME>/satd.emergency-1</FILENAME>. To guard against this happening, a warning is issued at boot time if any <FILENAME>/satd.emergency</FILENAME> files exist.</PARAGRAPH>
<PARAGRAPH>For complete information on the audit daemon, see the <REFPAGE>audit(1M)</REFPAGE>, <REFPAGE>satd(1M)</REFPAGE>, and<REFPAGE>&space;audit_filters(5)</REFPAGE> reference pages and the comments in <FILENAME>/etc/init.d/audit</FILENAME>. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="96958">Auditing a Specific User</TITLE><PARAGRAPH>At times, you may wish to examine the audit record of a particular user. For example, the user may have a history of violations of system security or may simply be leaving the project and an accounting of activity may be required.<INDEXTARGET ID="ch621"><!-- POSTPROCESSDATA: ch621|audit:a user --><INDEXTARGET ID="ch622"><!-- POSTPROCESSDATA: ch622|user audit --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Auditing to Determine Security Violations</TITLE><PARAGRAPH>If the user in question is being audited to determine if attempted security violations are taking place, use the command line: </PARAGRAPH>
<PARAGRAPH>&space;<USERINPUT>sat_reduce -P </USERINPUT><VARIABLE>satfile</VARIABLE><USERINPUT>&space;| sat_summarize -u </USERINPUT><VARIABLE>user_name</VARIABLE>&space;</PARAGRAPH>
<PARAGRAPH>This command line selects only the audit records that represent attempted violations. The <CMDLINEOPT>-P</CMDLINEOPT> flag to <COMMAND>sat_reduce</COMMAND> selects for attempted violations. The <CMDLINEOPT>-u</CMDLINEOPT> flag to the <COMMAND>sat_summarize</COMMAND> command lists the number of records generated by the user.</PARAGRAPH>
<PARAGRAPH>It is vitally important to remember that not every record of an attempted violation really represents malicious intent on the part of the user! Most of these records are generated in the course of normal work. The auditor should be looking for a trend, such as repeated attempts to access information unnecessary in the course of normal work (for example, a programmer attempting to access salary or hiring information).</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Auditing a User's Activities</TITLE><PARAGRAPH>In the second scenario, where the employee is leaving the project, the auditor is looking for a comprehensive list of files used by that employee so that the correct files and directories may be assigned a new owner who is remaining on the project.</PARAGRAPH>
<PARAGRAPH>The above listed command line provides a basic look at the user's activity. Next, to more closely examine the user's activities, issue the following command:</PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -u </USERINPUT><VARIABLE>user_name</VARIABLE><VARIABLE>&space;satfile</VARIABLE><USERINPUT>&space;| sat_interpret | more</USERINPUT>&space;</PARAGRAPH>
<PARAGRAPH>The <COMMAND>sat_reduce</COMMAND> command selects all of the audit records generated by the user. Then, the <COMMAND>sat_interpret</COMMAND> command puts the records into human readable form. The output of <COMMAND>sat_interpret</COMMAND> is very large. If it is impractical to direct this output to a file, you should direct the output to your screen and view it with a screen paging program such as <COMMAND>more</COMMAND>.</PARAGRAPH>
<PARAGRAPH>Using these two command lines, you should be able to view a user's activities and come to a reasonable knowledge of the types of actions the user is taking on the system. You can also generate a specific record, in human-readable form, of all security violations or files and resources accessed.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="66461">Auditing a File</TITLE><PARAGRAPH>At times, you may wish to examine all audit records pertaining to an individual file. Perhaps some changes have been made to an important file and the user who made those changes must be identified. Or perhaps an accounting of all access to a sensitive file is needed. To obtain a record for each time the file was opened, you must first make certain that the audit daemon is recording <INDEXTARGET ID="ch623"><!-- POSTPROCESSDATA: ch623|audit:a file --><INDEXTARGET ID="ch624"><!-- POSTPROCESSDATA: ch624|file audit --><COMMAND>sat_open</COMMAND> and <COMMAND>sat_open_ro</COMMAND> events. Use the <COMMAND>sat_select</COMMAND> command to ensure that these events are logged. To search the audit log for these events, use the following command line:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>sat_reduce -e sat_open -e sat_open_ro </USERINPUT><VARIABLE>satfile</VARIABLE><USERINPUT>&space;|&lbreak;sat_interpret | grep </USERINPUT><VARIABLE>filename</VARIABLE>
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="31906">Auditing a Label Under Trusted IRIX/B</TITLE><PARAGRAPH>If you are using Trusted IRIX/B, your system supports Mandatory Access Control (MAC) labels on all files and processes. This section explains how to check the audit trail of a given security label. </PARAGRAPH>
<PARAGRAPH>If you are using standard IRIX, your system does not support MAC labels, and attempts to read the audit trail for events relating to such labels will be futile.</PARAGRAPH>
<PARAGRAPH>Since the number of configurable labels in Trusted IRIX/B is great enough for each project or portion of a project at your site to have its own label, you may sometimes need to audit a specific label to generate a record of activity on that label. Use the following command to generate a log of activity on a label: <INDEXTARGET ID="ch625"><!-- POSTPROCESSDATA: ch625|audit:a label --><INDEXTARGET ID="ch626"><!-- POSTPROCESSDATA: ch626|label audit --></PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -l </USERINPUT><VARIABLE>label</VARIABLE><FILENAME>&space;satfile</FILENAME></PARAGRAPH>
<PARAGRAPH>The above command chooses only audit records that pertain to the given label. The following command syntax allows you to select more than one label for your report:</PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -l </USERINPUT><VARIABLE>label</VARIABLE><USERINPUT>&space;-l </USERINPUT><VARIABLE>label2 satfile</VARIABLE>&space;</PARAGRAPH>
<PARAGRAPH>Once you have obtained output from <COMMAND>sat_reduce</COMMAND>, use the other auditing utilities, such as <COMMAND>sat_interpret</COMMAND> or <COMMAND>sat_summarize</COMMAND>, to view it according to your needs.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="33289">About the Audit Data</TITLE><PARAGRAPH>The audit trail for an active system with full auditing can be too large for a single person to read and understand, and the entries in the trail that alert you to trouble are small and rare. If you were to read the raw audit trail to find an instance of policy violation, it would be like trying to find a needle in a haystack. Therefore, several utilities exist to help you reduce and interpret the raw audit data. The <INDEXTARGET ID="ch627"><!-- POSTPROCESSDATA: ch627|auditing:reading output --><INDEXTARGET ID="ch628"><!-- POSTPROCESSDATA: ch628|understanding the audit data --><INDEXTARGET ID="ch629"><!-- POSTPROCESSDATA: ch629|audit data:understanding --><INDEXTARGET ID="ch630"><!-- POSTPROCESSDATA: ch630|SAT:understanding data --><INDEXTARGET ID="ch631"><!-- POSTPROCESSDATA: ch631|audit data:interpreting --><INDEXTARGET ID="ch632"><!-- POSTPROCESSDATA: ch632|<ITALICS>sat_reduce</ITALICS> utility --><INDEXTARGET ID="ch633"><!-- POSTPROCESSDATA: ch633|<ITALICS>sat_summarize</ITALICS> utility --><INDEXTARGET ID="ch634"><!-- POSTPROCESSDATA: ch634|<ITALICS>sat_interpret</ITALICS> utility --><COMMAND>sat_reduce</COMMAND>, <COMMAND>sat_interpret<INDEXTARGET ID="ch635"><!-- POSTPROCESSDATA: ch635|<ITALICS>sat_interpret</ITALICS> utility --></COMMAND>, and <COMMAND>sat_summarize<INDEXTARGET ID="ch636"><!-- POSTPROCESSDATA: ch636|<ITALICS>sat_summarize</ITALICS> utility --></COMMAND> commands can be used to remove superfluous information and format the audit history in succinct packages. See the reference pages for these commands for specific information on their usage.</PARAGRAPH>
<PARAGRAPH>After your raw data has been reduced and interpreted, an individual record looks something like this: <INDEXTARGET ID="ch637"><!-- POSTPROCESSDATA: ch637|SAT:sample record --><INDEXTARGET ID="ch638"><!-- POSTPROCESSDATA: ch638|audit:sample record --></PARAGRAPH>
<CODE>
Event type = sat_ae_identity 
Outcome = Failure 
Sequence number = 5
Time of event = Mon Mar 11 12:46:13.33 PST 1991 
System call = syssgi,SGI_SATWRITE 
Error status = 0 (No error) 
SAT ID = anamaria
Identity event = LOGIN|-|/dev/ttyq4|anamaria|That user gave an invalid label.
</CODE>
<PARAGRAPH>The <COMMAND>sat_summarize</COMMAND> command provides a short listing of what types of records are in the audit trail and how many there are of each type. It's a useful tool for scanning the records quickly and identifying trends in system usage or consistent problems.</PARAGRAPH>
<PARAGRAPH>Remember that file pathnames within audit records are not the same as those in common usage through the shell on your system. Since the audit record is an exact log for security purposes, many attributes of the pathname that are designed to be transparent in normal usage are explicit in the audit log. For example, the double slash (//) means a directory level crossing (ordinarily represented through the shell with a single slash (/)). A slash followed by an exclamation point (/!) indicates crossing a filesystem mount point. The slash and ampersand construction (/@) indicates that the path is following a symbolic link. If you are running Trusted IRIX/B, you may also see a slash followed by a right angle bracket (/>), which indicates that the directory level being crossed into is a multilevel directory. The <COMMAND>egrep </COMMAND>utility supports this notation, so it is possible to specify this form of pathname notation in regular expression searches. Below are two examples of audit record pathnames:</PARAGRAPH>
<EXAMPLE>
/usr/!orange2/@/fri//usr//src//lib//libmls//libmls.a
/usr/!tmp/>L_e//sat//sat_9012280805
</EXAMPLE>
<PARAGRAPH>The system places the audit data in files on your system. Each file begins with the starting date and time of the file, the machine name, and the host ID, and ends with the stopping date and time. If your system is interrupted (for example, by a power failure), the audit file being used at that time will have no ending entry. The audit daemon automatically closes a file when it reaches a certain manageable size and opens another. A new file is always started when the system is brought up. For information on these files and their format, see the <REFPAGE>satd(1M)</REFPAGE> reference page.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="45356">About Security Violations</TITLE><PARAGRAPH>The overwhelming majority of records in an audit trail are the result of the normal actions of users doing their jobs. No automated tool exists to locate records that signify the actions of abusers trying to violate system security. Nonetheless, an administrator can apply some general rules to detect abuse or violation of security policy. This list of tips is neither complete nor universal. Each administrator must customize the list to meet the particular needs of each site.<INDEXTARGET ID="ch639"><!-- POSTPROCESSDATA: ch639|potential security violations --><INDEXTARGET ID="ch640"><!-- POSTPROCESSDATA: ch640|security violation (auditing):potential --><INDEXTARGET ID="ch641"><!-- POSTPROCESSDATA: ch641|violations:possible --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>System Use and Abuse by Outside Users</TITLE><PARAGRAPH>Intrusion by outsiders is among the most feared of abuses. Fortunately, this kind of abuse produces distinctive audit record patterns and is easily detected. Below, are descriptions of several different subcategories of outsider abuse that can be detected by the audit system. Note though, that these kinds of patterns can also be generated by an authorized user who makes a mistake or is misinformed. Patterns of this type are described below.<INDEXTARGET ID="ch642"><!-- POSTPROCESSDATA: ch642|outsider security violation --><INDEXTARGET ID="ch643"><!-- POSTPROCESSDATA: ch643|security violation (auditing):outsider --><INDEXTARGET ID="ch644"><!-- POSTPROCESSDATA: ch644|violations:of security by outsiders --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Attempts at Unauthorized System Entry</TITLE><PARAGRAPH>All attempts at unauthorized entry generate audit records of the <INDEXTARGET ID="ch645"><!-- POSTPROCESSDATA: ch645|unauthorized entry --><INDEXTARGET ID="ch646"><!-- POSTPROCESSDATA: ch646|security violation (auditing):unauthorized entry --><INDEXTARGET ID="ch647"><!-- POSTPROCESSDATA: ch647|violations:of security by unauthorized entry --><COMMAND>sat_ae_identity</COMMAND> event type. (Use <COMMAND>sat_select</COMMAND>, <COMMAND>sat_reduce</COMMAND>, and <COMMAND>sat_interpret</COMMAND> to collect and view these records.) The interpreted output of these events contains a text string that describes the attempt at entry. Intruders from outside your organization have a much higher instance of failed login attempts than your authorized users.</PARAGRAPH>
<PARAGRAPH>Three interesting text strings reveal attempts at unauthorized entry: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>unsuccessful login attempt </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>that user gave an invalid label </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>could not set the label connection for device</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Here is an example of an interpreted audit record of an unsuccessful login attempt:</PARAGRAPH>
<CODE>
Event type = sat_ae_identity 
Outcome = Failure 
Sequence number = 1 
Time of event = Mon Mar 11 12:45:40.34 PST 1991 
System call = syssgi,SGI_SATWRITE 
Error status = 0 (No error) 
SAT ID = anamaria 
Identity event = LOGIN|-|/dev/ttyq4|guest|Unsuccessful login attempt.
</CODE>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>System Use at Unusual Hours or from Unusual Locations </TITLE><PARAGRAPH>Usage of your system outside of normal working hours or, if your system maintains physical security of terminals, from unusual locations, is a matter of interest. In most cases, the usage of the system is legitimate, but each instance certainly bears notation and examination. Many potential violations of security from outside your user community happen during nonpeak hours, and rarely from within your physical site.<INDEXTARGET ID="ch648"><!-- POSTPROCESSDATA: ch648|unusual system usage --><INDEXTARGET ID="ch649"><!-- POSTPROCESSDATA: ch649|security violation (auditing):unusual system usage --><INDEXTARGET ID="ch650"><!-- POSTPROCESSDATA: ch650|violations:of security by unusual system usage --></PARAGRAPH>
<PARAGRAPH>To observe activity at odd hours, enter the following commands in order:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><USERINPUT>sat_reduce -a </USERINPUT><VARIABLE>start_time</VARIABLE><USERINPUT>&space;satfile > /usr/tmp/early+late </USERINPUT></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>sat_reduce -A </USERINPUT><VARIABLE>end_time</VARIABLE><USERINPUT>&space;satfile >> /usr/tmp/early+late </USERINPUT></PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>sat_reduce -U root -U sys -U daemon -U adm -U lp /usr/tmp/early+late > /usr/tmp/e+l_ordusers</USERINPUT>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>sat_interpret /usr/tmp/e+l_ordusers | more </USERINPUT></PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>If your site assigns a terminal to each user and maintains reasonable physical security for each terminal, you can monitor logins from unusual locations. For example, if a user normally working in a group computer lab makes a login attempt from a private office, this event may be cause for interest. To get a list of login events, enter the following command: </PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -e sat_ae_identity sat_file | sat_interpret | grep LOGIN</USERINPUT>&space;</PARAGRAPH>
<PARAGRAPH>Bear in mind that it does not necessarily represent a violation of security if a user is working at an unusual terminal or even if a user is logged on at two or more terminals at once. For instance, the user may be correcting a mistake and may have logged in elsewhere explicitly for the purpose of terminating unwanted processes. You should be looking for instances where the user is not genuinely logged in twice, but where one instance of the login is an intruder.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Connections with Machines Outside the Local Network </TITLE><PARAGRAPH>Whenever a user connects to a machine outside your trusted local network, an audit record should be generated. A connection to a host outside of the local network is worthy of notice but not necessarily a violation of security. You should be on the lookout for trojan horse programs that cause your system to make an outward connection at a later time. You can identify outward connections with the following command sequence:<INDEXTARGET ID="ch651"><!-- POSTPROCESSDATA: ch651|outside connections --><INDEXTARGET ID="ch652"><!-- POSTPROCESSDATA: ch652|security violation (auditing):outside connections --><INDEXTARGET ID="ch653"><!-- POSTPROCESSDATA: ch653|violations:through outside connections --></PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><USERINPUT>sat_reduce -e sat_bsdipc_addr </USERINPUT><VARIABLE>satfile</VARIABLE><USERINPUT>&space;> </USERINPUT><FILENAME>/usr/tmp/connect</FILENAME>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>sat_interpret </USERINPUT><FILENAME>/usr/tmp/connect</FILENAME><USERINPUT>&space;> </USERINPUT><FILENAME>/usr/tmp/connect.int</FILENAME>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>grep -n "Remote host" </USERINPUT><FILENAME>/usr/tmp/connect.int</FILENAME>&space;</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>The above command sequence is dependent on the specific implementation of your networking software. You may need to modify commands to reflect your networking situation. For example, if the software you are using does not generate the <COMMAND>sat_bsdipc_addr</COMMAND> auditing event type, you should search for another event type that is generated.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>System Use and Abuse by Inside Users</TITLE><PARAGRAPH>Beyond use and abuse by intruders, unfortunately, the possibility arises of abuse from within your organization. The following types of events are the most common instances of security violations. It is extremely counterproductive to assume that a security violation on the part of an authorized user indicates that the user is not trustworthy or is involved in some attempt to break security for malicious purposes. Most violations of system security by users involve a failure on the part of the Administrator to adequately prepare the working environment. Users are most concerned with accomplishing their work tasks, not with fixing the computer system to provide themselves with the correct tools. Therefore, you should not be suspicious of the user who violates security unless a clear pattern of a specific and unnecessary security violation is apparent.<INDEXTARGET ID="ch654"><!-- POSTPROCESSDATA: ch654|insider security violation --><INDEXTARGET ID="ch655"><!-- POSTPROCESSDATA: ch655|security violation:insider --><INDEXTARGET ID="ch656"><!-- POSTPROCESSDATA: ch656|violations:of security by insiders --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>File Permission Violations by Inside Users</TITLE><PARAGRAPH>Although the system records each instance where access to a file or resource is denied, the information contained in these audit records is rarely indicative of a security violation. Many applications and utilities operate on a principle of access denial as part of normal operation. These events are always logged, but only in rare cases do they indicate a violation. For example, the library function <INDEXTARGET ID="ch657"><!-- POSTPROCESSDATA: ch657|access control violations --><INDEXTARGET ID="ch658"><!-- POSTPROCESSDATA: ch658|security violation (auditing):access control --><INDEXTARGET ID="ch659"><!-- POSTPROCESSDATA: ch659|violations:of access control security --><FUNCTION>getutent </FUNCTION>always tries to open <FILENAME>/etc/utmp</FILENAME> for read-write access. If this action fails, <FUNCTION>getutent</FUNCTION> immediately tries again, but requesting read-only access. Permissions on <FILENAME>/etc/utmp</FILENAME> prohibit all users except root from opening this file for reading and writing. When an unprivileged user runs a program that calls <COMMAND>getutent</COMMAND>(), a <COMMAND>sat_access_denied</COMMAND> record is generated, and it is immediately followed in the audit trail by a <COMMAND>sat_open_ro</COMMAND> record, indicating that access was granted. The lesson in this example is that access denial is usually not indicative of a security violation.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>sat_access_failed</COMMAND> event is often confused with the denial event. The event type is completely different and is even more rarely a cause for concern than access denial. When a user enters a command to an interactive shell (such as <FILENAME>/bin/csh</FILENAME>), the shell tries to execute the command in each directory in the user's search path, failing at each attempt until it finds a directory that actually contains the command. Suppose a user enters <COMMAND>xterm</COMMAND> and his or her path variable contains</PARAGRAPH>
<EXAMPLE>
/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/bin/X11:~/bin
</EXAMPLE>
<PARAGRAPH>A <COMMAND>sat_access_failed</COMMAND> record is generated for each directory in the path until the command is found and executed. In this scenario, a record of failed access is generated for each of the following nonexistent programs: <FILENAME>/bin/xterm</FILENAME>, <FILENAME>/usr/bin/xterm</FILENAME>, <FILENAME>/usr/sbin/xterm</FILENAME>, <FILENAME>/usr/local/bin/xterm</FILENAME> and a successful <COMMAND>sat_file_exec</COMMAND> record for the real program: <FILENAME>/usr/bin/X11/xterm</FILENAME>. </PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Unexpected Use of Root Privilege by Inside Users</TITLE><PARAGRAPH>Every interpreted audit record contains a line beginning with the keyword<INDEXTARGET ID="ch660"><!-- POSTPROCESSDATA: ch660|root privilege violation --><INDEXTARGET ID="ch661"><!-- POSTPROCESSDATA: ch661|security violation (auditing):root privilege --><INDEXTARGET ID="ch662"><!-- POSTPROCESSDATA: ch662|violations:of root privilege security --><KEYWORD>&space;Outcome</KEYWORD>. The field following this keyword can be equal to one of <KEYWORD>Success</KEYWORD>, <KEYWORD>Failure</KEYWORD>, or <KEYWORD>Success due to privilege</KEYWORD>. The last case indicates that the user made a system call that would have failed except that superuser privilege was invoked to assure its successful completion. This is not necessarily a security violation or an unexpected use of root privilege. It is perfectly normal to see these outcomes. Any time an ordinary user runs a program that contains code that uses root privilege, <KEYWORD>Success due to privilege</KEYWORD> outcomes are generated. A good example of this kind of program is <COMMAND>passwd</COMMAND>. An ordinary user generates a record of this type simply by changing the password on his or her account.</PARAGRAPH>
<PARAGRAPH>What you should be looking for is an instance where the SAT ID or Effective ID field is different from the &ldquo;User ID&rdquo; field. This occurs when a user executes <FILENAME>/bin/su</FILENAME> to gain root privileges or otherwise promotes the privilege level of a session. In most cases, this is not a security violation, since the root password is necessary to successfully complete the <COMMAND>/bin/su</COMMAND> command.</PARAGRAPH>
<PARAGRAPH>An instance of using superuser privilege, though, is always worth examination in the audit trail. When you encounter an instance where a user has promoted his or her login session to root, you should check to see that the user is authorized to know the root password. If not, check whether the user indeed executed the <COMMAND>/bin/su</COMMAND> command, or if he or she promoted the privilege of the session by some other means, such as a Trojan horse <COMMAND>setuid</COMMAND> shell command.</PARAGRAPH>
<PARAGRAPH>Whenever a user runs <COMMAND>/bin/su</COMMAND> and thereby promotes the privilege of his or her login session, the auditor should also make a routine check of what actions the user took while the privilege was promoted.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Activity by Particular Inside Users </TITLE><PARAGRAPH>Sometimes a particular user is under official scrutiny by the management of a site. He or she may be on probation or may have just left employment under less than ideal circumstances. The auditor can choose to look at the records describing that user's behavior just by directing the audit trail through the <INDEXTARGET ID="ch663"><!-- POSTPROCESSDATA: ch663|audit:particularly interesting users --><INDEXTARGET ID="ch664"><!-- POSTPROCESSDATA: ch664|audit:a user --><COMMAND>sat_reduce</COMMAND> command as follows:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><USERINPUT>sat_reduce -u </USERINPUT><VARIABLE>jeff</VARIABLE><USERINPUT>&space;&lt; satfile > </USERINPUT><FILENAME>/tmp/sat.jeff</FILENAME>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>sat_interpret </USERINPUT><FILENAME>/tmp/sat.jeff</FILENAME><USERINPUT>&space;| more</USERINPUT></PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>Rarely should any user be subjected to this kind of accounting, and this feature should be used carefully and with consideration of the individuals involved.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Access to Particular Files or Resources</TITLE><PARAGRAPH>Sometimes a particular file or resource is of special interest. An information leak may have occurred and an investigation is proceeding into how the leak took place. Or a special file or resource may have been created as bait to trap browsing intruders. In either case, the file or resource should be closely accounted by the auditor.<INDEXTARGET ID="ch665"><!-- POSTPROCESSDATA: ch665|audit:a file --></PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -n </USERINPUT><FILENAME>interesting_file</FILENAME><USERINPUT>&space;-e sat_open -e sat_open_ro </USERINPUT><FILENAME>sat_filename</FILENAME><USERINPUT>&space;| sat_interpret</USERINPUT></PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>About Proper and Improper System Management</TITLE><PARAGRAPH>Frequently, actions taken by the Administrator or root result in unusual audit records. With the enhanced privilege of these accounts, it is not unusual for more audit records of potential concern to be generated. Again, it is rare for a record to be generated that cannot be explained by the normal usage of the system or by simple human error.<INDEXTARGET ID="ch666"><!-- POSTPROCESSDATA: ch666|audit:guidelines --><INDEXTARGET ID="ch667"><!-- POSTPROCESSDATA: ch667|audit:improper use --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Modifications of System Data Files</TITLE><PARAGRAPH>Every modification of system data files is of interest to the auditor. Since these data files are not only under system security but in fact define system security, any unauthorized access can result in a total breach of security.<INDEXTARGET ID="ch668"><!-- POSTPROCESSDATA: ch668|modification of system data files --><INDEXTARGET ID="ch669"><!-- POSTPROCESSDATA: ch669|system data files:modification --><INDEXTARGET ID="ch670"><!-- POSTPROCESSDATA: ch670|audit:system data files modification --></PARAGRAPH>
<PARAGRAPH>Each site has individual policies on how users are added to or removed from the system, how access control of files and hardware is administered, how network connectivity is maintained and administered, and a host of other issues. It is the responsibility of the auditor at each site to enforce the policies of the site and to use the auditing tool effectively to exercise that responsibility.</PARAGRAPH>
<PARAGRAPH>If you are running Trusted IRIX/B, system data files should be modified only with the dedicated editing tool, <COMMAND>dbedit</COMMAND>, and never with general-purpose text editors. Only privileged users can use the <INDEXTARGET ID="ch671"><!-- POSTPROCESSDATA: ch671|<ITALICS>dbedit</ITALICS> utility --><COMMAND>dbedit</COMMAND> tool, and only privileged users have permission to alter the contents of the system data files. Any use of any other editor on a system data file is a violation of security policy and should be noticed by the auditor. If your interpreted audit trail contains <COMMAND>sat_open</COMMAND> records where the Actual name field contains the string &ldquo;/secadm,&rdquo; check that the Process ID field (which gives both the PID and the name of the program being executed) does not contain &ldquo;vi,&rdquo; &ldquo;ex,&rdquo; &ldquo;emacs&rdquo; or any other commonly available text editor. This field should contain only the name &ldquo;dbedit.&rdquo;</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Modifications of System Program Attributes</TITLE><PARAGRAPH>The Administrator should never modify permissions, ownership, or labels of system programs. If your audit trail contains evidence that the administrator has attempted to change attributes of system programs, you should investigate and find the reason for the change. Again, the explanation given is likely to be valid, and this is not good cause to suspect your Administrator of subterfuge; however, you may want to examine your system's security policies and make certain that neither the users nor the administrators take a cavalier attitude toward the security policies.<INDEXTARGET ID="ch672"><!-- POSTPROCESSDATA: ch672|modifications of system programs --><INDEXTARGET ID="ch673"><!-- POSTPROCESSDATA: ch673|audit:system programs modification --></PARAGRAPH>
<PARAGRAPH>The following command searches your audit trail for the type of records that can indicate this problem:</PARAGRAPH>
<PARAGRAPH><USERINPUT>sat_reduce -e sat_file_attr_write -e sat_fd_attr_write &lt; satfile</USERINPUT>&space;</PARAGRAPH>
<PARAGRAPH>In the interpreted output, look for lines with the Actual name field. Any audit record showing modified attributes for resources in <FILENAME>/bin</FILENAME>, <FILENAME>/sbin</FILENAME>, <FILENAME>/etc</FILENAME>, <FILENAME>/lib</FILENAME>, <FILENAME>/var</FILENAME>, <FILENAME>/usr/bin</FILENAME>, <FILENAME>/usr/lib</FILENAME>,<FILENAME>&space;/usr/share</FILENAME>, <FILENAME>/usr/bsd</FILENAME>, /usr/sbin, or /usr/bin/X11 is an audit record deserving follow-up.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Manipulation of the Audit Trail </TITLE><PARAGRAPH>The auditor should be the only person to access the audit trail. No other users should read from it, write to it, remove files, or modify file attributes. Look at all records generated by people other than the one who knows the auditor account password, and check that none of those records refer to files in <INDEXTARGET ID="ch674"><!-- POSTPROCESSDATA: ch674|audit:the audit trail --><FILENAME>/var/adm/sat</FILENAME> or in any other directory you use to store audit trail information.</PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="37238">Archiving Audit Data</TITLE><PARAGRAPH>Since the audit trail is stored in ordinary system files, archiving your audit data is as easy as making a backup tape. Archive your audit data to conserve disk space but do keep copies of your audit trail; evidence of intrusion and damage to your system may not always be apparent immediately, and the ability to research your audit trail over time can be very valuable in tracking down a security breach. You can use the <INDEXTARGET ID="ch675"><!-- POSTPROCESSDATA: ch675|archiving audit data --><INDEXTARGET ID="ch676"><!-- POSTPROCESSDATA: ch676|audit:data archiving --><COMMAND>compress</COMMAND> utility to reduce the size of your old audit files by up to 80 percent.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="96299">Removing Audit Data</TITLE><PARAGRAPH>Since the audit trail is stored in ordinary system files, once it has been archived, audit trail files can be safely removed. If you enter the <INDEXTARGET ID="ch677"><!-- POSTPROCESSDATA: ch677|audit:data removing --><INDEXTARGET ID="ch678"><!-- POSTPROCESSDATA: ch678|removing:audit data --><COMMAND>df</COMMAND> command (disk free) and determine that the filesystem containing your audit trail is more than 90 percent full, you should remove old audit files. If your audit files are kept in <FILENAME>/var/adm/sat</FILENAME>, enter the command</PARAGRAPH>
<EXAMPLE>
<USERINPUT>df -k /var/adm/sat</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>The output should be similar to this:</PARAGRAPH>
<CODE>
Filesystem  Type blocks  use   avail %use Mounted on
/dev/root   efs  245916 218694 27222  89%    /
</CODE>
<PARAGRAPH>In this example, the file system is 89 percent full, and the auditor should archive and remove audit trail files.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>About Audit File Overflow</TITLE><PARAGRAPH>Do not allow your audit files to grow too large. Oversized audit files can use up your available disk space and cause the system to refuse new records and immediately cease operations. This can result in lost work and lost audit records. Maintain at least 10 percent free space in your audit filesystem at all times.</PARAGRAPH>
<PARAGRAPH>The audit daemon, <REFPAGE>satd(1M)</REFPAGE>, must always be running on your system. The daemon eventually becomes unable to write to the audit file if free disk space drops to 0 percent. When it can no longer write to the audit file, the daemon exits with an error, and the system changes the run level to single-user mode. You must then archive and remove the audit files to free disk space before bringing the system back to multi-user mode. If the <COMMAND>satd</COMMAND> daemon is somehow killed or interrupted on your system, the system changes the run level to single user mode immediately. The daemon is respawned when the system is brought back up.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Recovering from Audit File Overflow</TITLE><PARAGRAPH>To make space on the disk for your audit trail, first boot the system into single-user mode. No audit records are generated in this mode. Once in single-user mode, archive your audit files and remove them from the disk. Once at least 10 percent of the filesystem is free, you may boot into multiuser mode without difficulty.</PARAGRAPH>
<PARAGRAPH>If your auditing system directs the audit files to the <FILENAME>/</FILENAME> (root) filesystem or the <FILENAME>/usr</FILENAME> file system and either filesystem becomes full, you will not be able to bring the system to single-user mode to archive and remove your old audit files. If you find yourself in this situation, perform the following procedures to remove old audit files:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Boot the system from the original distribution media, and allow the <COMMAND>inst</COMMAND> utility to start up. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>At the Inst main menu, select the Admin menu, and then select the <COMMAND>shell</COMMAND> option from the Admin menu. You see a shell prompt. </PARAGRAPH>
<PARAGRAPH>From the shell, you must archive and remove the old audit files. Remember that when your system is running the Inst (also called <COMMAND>miniroot</COMMAND>) shell, your system's root directory appears as</PARAGRAPH>
<EXAMPLE>
/root/
</EXAMPLE>
<PARAGRAPH>rather than</PARAGRAPH>
<EXAMPLE>
/
</EXAMPLE>
<PARAGRAPH>and your <FILENAME>/usr</FILENAME> file system appears as</PARAGRAPH>
<EXAMPLE>
/root/usr
</EXAMPLE>
<PARAGRAPH>because your system's filesystems are mounted on the Inst filesystem. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Once you have created free disk space on your <FILENAME>/</FILENAME> (root) and <FILENAME>/usr</FILENAME> filesystems, you should be able to boot your system normally. If this is a recurring problem, you should refer to the <REFPAGE>satd(1M)</REFPAGE> reference page for information on changing the location of your audit files.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
</SECTION3>
</SECTION2>
</SECTION1>
</CHAPTER>
