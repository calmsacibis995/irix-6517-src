<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="7"><TITLE><XREFTARGET ID="32913">System Accounting</TITLE><PARAGRAPH>IRIX provides utilities to log certain types of system activity. These utilities perform process accounting and system accounting. This chapter contains the following sections:<INDEXTARGET ID="ch71"><!-- POSTPROCESSDATA: ch71|system accounting --><INDEXTARGET ID="ch72"><!-- POSTPROCESSDATA: ch72|process accounting --><INDEXTARGET ID="ch73"><!-- POSTPROCESSDATA: ch73|accounting:system --><INDEXTARGET ID="ch74"><!-- POSTPROCESSDATA: ch74|accounting:process --><INDEXTARGET ID="ch75"><!-- POSTPROCESSDATA: ch75|security:process accounting --><INDEXTARGET ID="ch76"><!-- POSTPROCESSDATA: ch76|system accounting --><INDEXTARGET ID="ch77"><!-- POSTPROCESSDATA: ch77|operating the system:general --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="82936" TYPE="TITLE">&ldquo;About the Process Accounting System&rdquo;</XREF> discusses the accounting subsystem that keeps track of system usage.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="11956" TYPE="TITLE">&ldquo;Accounting Files and Directories&rdquo;</XREF> talks about where accounting information is stored.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="72742" TYPE="TITLE">&ldquo;About Daily System Accounting&rdquo;</XREF> defines daily system accounting and gives setup procedures.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><XREF IDREF="26631" TYPE="TITLE">&ldquo;Daily System Accounting with runacct&rdquo;</XREF> describes how to operate the <COMMAND>runacct</COMMAND> program.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The four initial sections describe the standard UNIX System V accounting procedures. IRIX also implements an extended accounting facility, discussed in the following section:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><XREF IDREF="42770" TYPE="TITLE">&ldquo;IRIX Extended Accounting&rdquo;</XREF> describes an accounting subsystem useful for large computer sites.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Ask your Silicon Graphics sales representative for information on additional tools available. For example, SHARE II for IRIX is an optional product allowing additional administrative control of system resources including disk space, CPU entitlement, memory (real or virtual), number of processes, printer pages, terminal and modem connect-time, network packets, and more.</PARAGRAPH>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="82936">About the Process Accounting System</TITLE><PARAGRAPH>The IRIX process accounting system can provide the following information:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the number of programs a user runs </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the size and duration of user programs </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>data throughput (I/O) </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Using this information, you can: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Determine how system resources are used and if a particular user is using more than a reasonable share.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Trace significant system events, such as security breaches, by examining the list of all processes invoked by a particular user at a particular time.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Set up billing systems to charge login accounts for using system resources. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The next sections describe the parts of process accounting, how to turn on and off process accounting, and how to look at the various log files.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Parts of the Process Accounting System</TITLE><PARAGRAPH>The IRIX process accounting system has several parts: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The IRIX kernel writes a record of each process on the system that terminates into the file <FILENAME>/var/adm/pacct</FILENAME>. The file contains one record per terminated process, organized according to the format defined in <FILENAME>/usr/include/sys/acct.h.</FILENAME>&space;</PARAGRAPH>
<PARAGRAPH>You must specifically turn on this function. See <XREF IDREF="24663" TYPE="TITLE">&ldquo;Turning On Process Accounting&rdquo;</XREF>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Once process accounting is turned on, the cron program executes several accounting commands, as specified in <FILENAME>/var/spool/cron/crontabs/adm</FILENAME> and <FILENAME>/var/spool/crontabs/root.</FILENAME> The commands in <FILENAME>adm</FILENAME> perform monthly accounting (<FILENAME>monacct</FILENAME>), check the size of the <FILENAME>pacct</FILENAME> file (<FILENAME>ckpacct</FILENAME>), and provide a daily accounting of processes and connect time (runacct). The root crontab file runs the dodisk program, which provides a report on current disk usage. These commands run automatically when process accounting is turned on. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <COMMAND>login</COMMAND> and <COMMAND>init</COMMAND> programs record connect sessions by writing records into <FILENAME>/etc/wtmp</FILENAME>. This happens by default, as long as the <FILENAME>wtmp</FILENAME> file exists. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Records of date changes, reboots, and shutdowns are copied from <FILENAME>/etc/utmp</FILENAME> to <FILENAME>/etc/wtmp</FILENAME> by the <COMMAND>acctwtmp</COMMAND> command. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The <COMMAND>acctwtmp</COMMAND> utility is automatically called by <COMMAND>runacct</COMMAND>, /usr/lib/acct/startacct, and <FILENAME>/usr/lib/shutacct</FILENAME>, once process accounting is turned on. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The disk utilization programs <COMMAND>acctdusg</COMMAND> and <COMMAND>diskusg</COMMAND> break down disk usage by login and prepare reports. These programs are run by the <COMMAND>dodisk</COMMAND> script. For details, see the <REFPAGE>acct(1M)</REFPAGE>, <REFPAGE>acctsh(1M)</REFPAGE>, and <REFPAGE>diskusg(1M)</REFPAGE> reference pages.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Note that for XFS filesystems, disk quotas (installed with the subsystem eoe.sw.quotas) can be used as an efficient accounting tool to keep track of disk usage. Refer to <DOCTITLE></DOCTITLE>
<EXTREF IDREF="88526" BOOK="IA_DiskFiles" FILE="" HDG="88526" INFO="">IRIX Admin: Disks and Filesystems</EXTREF>
<DOCTITLE></DOCTITLE> for more information.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="24663">Turning On Process Accounting</TITLE><PARAGRAPH>To turn on process accounting: </PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Log in to the system as <ITALICS>root</ITALICS>. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Make sure the <FILENAME>eoe.sw.acct</FILENAME> subsystem is installed. If not, install it.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enter this command: </PARAGRAPH>
<CODE>
<USERINPUT>chkconfig acct on</USERINPUT>&space;
</CODE>
</LIST>
<LIST><PARAGRAPH>Enter this command: </PARAGRAPH>
<CODE>
<USERINPUT>/usr/lib/acct/startup</USERINPUT>&space;
</CODE>
<PARAGRAPH>This starts the kernel writing information into the file <FILENAME>/var/adm/pacct</FILENAME>. </PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>Process accounting is started every time you boot the system, and every time the system boots, you should see a message similar to this: </PARAGRAPH>
<CODE>
System accounting started 
</CODE>
<PARAGRAPH>Note that process accounting files, especially <FILENAME>/var/adm/pacct</FILENAME>, can grow very large. If you turn on process accounting, especially on a server, you should watch the amount of free disk space carefully. See <XREF IDREF="19570" TYPE="TITLE">&ldquo;Accounting File Size Control&rdquo;</XREF>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Turning Off Process Accounting</TITLE><PARAGRAPH>To turn off process accounting, follow these steps:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Log in as <ITALICS>root</ITALICS>. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enter this command: </PARAGRAPH>
<CODE>
<USERINPUT>chkconfig acct off</USERINPUT>&space;
</CODE>
</LIST>
<LIST><PARAGRAPH>Enter this command: </PARAGRAPH>
<CODE>
<USERINPUT>/usr/lib/acct/shutacct</USERINPUT>&space;
</CODE>
<PARAGRAPH>This stops the kernel from writing accounting data into the file <FILENAME>/var/adm/pacct.</FILENAME> Process accounting is now turned off.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="11956">Accounting Files and Directories</TITLE><PARAGRAPH>The directory <FILENAME>/usr/lib/acct</FILENAME> contains the programs and shell scripts necessary to run the accounting system. Process accounting uses a login (<FILENAME>/var/adm</FILENAME>) to perform certain tasks. <FILENAME>/var/adm</FILENAME> contains active data collection files used by the process accounting. Here is a description of the primary subdirectories in <FILENAME>/var/adm</FILENAME>:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><FILENAME>/var/adm/acct/nite</FILENAME> contains files that are reused daily by <COMMAND>runacct</COMMAND>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><FILENAME>/var/adm/acct/sum</FILENAME> contains the cumulative summary files updated by <COMMAND>runacct</COMMAND>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><FILENAME>/var/adm/acct/fiscal</FILENAME> contains periodic summary files created by <COMMAND>monacct</COMMAND>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="19570">Accounting File Size Control</TITLE><PARAGRAPH>Process and disk accounting files can grow very large. On a busy system, they can grow quite rapidly. </PARAGRAPH>
<PARAGRAPH>To help keep the size of the file <FILENAME>/var/adm/pacct</FILENAME> under control, the <COMMAND>cron</COMMAND> command runs <FILENAME>/usr/lib/acct/ckpacct</FILENAME> to check the size of the file and the available disk space on the file system.</PARAGRAPH>
<PARAGRAPH>If the size of the <FILENAME>pacct</FILENAME> file exceeds 1000 blocks (by default), it runs the <COMMAND>turnacct</COMMAND> command with argument &ldquo;switch.&rdquo; The &ldquo;switch&rdquo; argument causes <COMMAND>turnacct</COMMAND> to back up the <FILENAME>pacct</FILENAME> file (removing any existing backup copy) and start a new, empty <FILENAME>pacct</FILENAME> file. This means that at any time, no more than 2000 blocks of disk space are taken by <FILENAME>pacct</FILENAME> file information.</PARAGRAPH>
<PARAGRAPH>If the amount of free space in the file system falls below 500 blocks, <COMMAND>ckpacct</COMMAND> automatically turns off process accounting by running the <COMMAND>turnacct</COMMAND> command with the &ldquo;off&rdquo; argument. When at least 500 blocks of disk space are free, accounting is activated again the next time <COMMAND>cron</COMMAND> runs <COMMAND>ckpacct</COMMAND>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Files in the /var/adm Directory</TITLE><PARAGRAPH>The files listed here are located in the <FILENAME>/var/adm</FILENAME> directory:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><FILENAME>diskdiag</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>diagnostic output during the execution of disk accounting programs </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>dtmp</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>output from the acctdusg program </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>fee</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>output from the chargefee program, ASCII <FILENAME>tacct</FILENAME> records </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>pacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>active process accounting file </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>pacct</FILENAME>? </HANGITEM>
<HANGBODY><PARAGRAPH>process accounting files switched by <FILENAME>turnacct</FILENAME>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>Spact?.MMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>process accounting files for MMDD during execution of runacct</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Files in the /var/adm/acct/nite Directory</TITLE><PARAGRAPH>The following files are located in the <FILENAME>/var/adm/acct/nite</FILENAME> directory:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><FILENAME>active</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>used by <COMMAND>runacct</COMMAND> to record progress and print warning and error messages. <FILENAME>activeMMDD</FILENAME> is the same as <FILENAME>active</FILENAME> after <COMMAND>runacct</COMMAND> detects an error </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>cms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>ASCII total command summary used by <COMMAND>prdaily</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>ctacct.MMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>connect accounting records in <FILENAME>tawcct.h</FILENAME> format </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>ctmp</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>output of acctcon1 program, connect session records in<FILENAME>&space;ctmp.h</FILENAME> format </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>daycms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>ASCII daily command summary used by <COMMAND>prdaily</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>daytacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>total accounting records for one day in <FILENAME>tacct.h</FILENAME> format </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>disktacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>disk accounting records in <FILENAME>tacct.h</FILENAME> format, created by <COMMAND>dodisk</COMMAND> procedure</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>&space;<FILENAME>fd2log</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>diagnostic output during execution of <COMMAND>runacct</COMMAND> (see cron entry) </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>lastdate</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>last day runacct executed in date <VARIABLE>+%m%d</VARIABLE> format </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>lock lock1</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>used to control serial use of <COMMAND>runacct</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>lineuse</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>tty line usage report used by <COMMAND>prdaily</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>log</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>diagnostic output from <COMMAND>acctcon1</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>logMMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>same as log after <COMMAND>runacct</COMMAND> detects an error </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>reboots</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>contains beginning and ending dates from <FILENAME>wtmp</FILENAME> and contains a listing of reboots </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>statefile</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>used to record current state during execution of <COMMAND>runacct</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>tmpwtmp</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH><FILENAME>wtmp</FILENAME> file corrected by <COMMAND>wtmpfix</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>wtmperror</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>place for <COMMAND>wtmpfix</COMMAND> error messages </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>wtmperrorMMDD </FILENAME></HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;same as <FILENAME>wtmperror</FILENAME> after <COMMAND>runacct</COMMAND> detects an error </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>wtmp.MMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>previous day's <FILENAME>wtmp</FILENAME> file</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Files in the /var/adm/acct/sum Directory</TITLE><PARAGRAPH>The following files are located in the <FILENAME>/var/adm/acct/sum</FILENAME> directory:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><FILENAME>cms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>total command summary file for current fiscal period in internal summary format</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>cmsprev</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>command summary file without latest update </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>daycms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>command summary file for yesterday in internal summary format </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>loginlog</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>created by <COMMAND>lastlogin</COMMAND>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>pact.MMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>concatenated version of all <FILENAME>pacct</FILENAME> files for <VARIABLE>MMDD</VARIABLE>, removed by remove procedure after reboot </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>rprtMMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>saved output of <COMMAND>prdaily</COMMAND> programs </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>tacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>cumulative total accounting file for current fiscal period</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>tacctprev</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>same as <COMMAND>tacct</COMMAND> without latest update </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>tacctMMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>total accounting file for <VARIABLE>MMDD</VARIABLE>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>wtmp.MMDD</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>saved copy of <FILENAME>wtmp</FILENAME> file for <VARIABLE>MMDD</VARIABLE>, removed by remove procedure after reboot</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Files in the /var/adm/acct/fiscal Directory</TITLE><PARAGRAPH>The following files are located in the <FILENAME>/var/adm/acct/fiscal</FILENAME> directory:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><FILENAME>cms?</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>total command summary file for <VARIABLE>fiscal? </VARIABLE>in internal summary format</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>fiscrpt?</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>report similar to <COMMAND>prdaily</COMMAND> for <VARIABLE>fiscal?</VARIABLE>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>tacct?</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>total accounting file for <VARIABLE>fiscal?</VARIABLE>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="72742">About Daily System Accounting</TITLE><PARAGRAPH>When IRIX enters multiuser mode, <FILENAME>/usr/lib/acct/startup</FILENAME> is executed as follows: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The <COMMAND>acctwtmp</COMMAND> program adds a &ldquo;boot&rdquo; record to <FILENAME>/etc/wtmp</FILENAME>. This record is signified by using the system name as the login name in the <FILENAME>wtmp</FILENAME> record.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Process accounting is started by <COMMAND>turnacct</COMMAND>, which in turn executes <COMMAND>acct </COMMAND>on<FILENAME>&space;/var/adm/pacct</FILENAME>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>remove</COMMAND> is executed to clean up the saved <FILENAME>pacct</FILENAME> and <FILENAME>wtmp</FILENAME> files left in the <FILENAME>sum</FILENAME> directory by <COMMAND>runacct</COMMAND>. </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The <COMMAND>ckpacct</COMMAND> procedure is run through <COMMAND>cron</COMMAND> every hour of the day to check the size of <COMMAND>/var/adm/pacct</COMMAND>. If the file grows past 1000 blocks (default), the <COMMAND>turnacct</COMMAND> switch is executed. The advantage of having several smaller <FILENAME>pacct</FILENAME> files becomes apparent when you try to restart <COMMAND>runacct</COMMAND> after a failure processing these records.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>chargefee</COMMAND> program can be used to bill users for file restores, and so on. It adds records to<FILENAME>&space;/var/adm/fee </FILENAME>that are picked up and processed by the next execution of <COMMAND>runacct</COMMAND> and merged into the total accounting records. <COMMAND>runacct</COMMAND> is executed through <COMMAND>cron</COMMAND> each night. It processes the active accounting files, <FILENAME>/var/adm/pacct</FILENAME>, <FILENAME>/etc/wtmp</FILENAME>, <FILENAME>/var/adm/acct/nite/disktacct</FILENAME>, and <FILENAME>/var/adm/fee</FILENAME>.&space;It produces command summaries and usage summaries by login name. </PARAGRAPH>
<PARAGRAPH>When the system is shut down using <COMMAND>shutdown</COMMAND>, the <COMMAND>shutacct</COMMAND> shell procedure is executed. It writes a shutdown reason record into <FILENAME>/etc/wtmp</FILENAME> and turns process accounting off. </PARAGRAPH>
<PARAGRAPH>After the first reboot each morning, the administrator should execute <FILENAME>/usr/lib/acct/prdaily</FILENAME> to print the previous day's accounting report.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Setting Up the Accounting System</TITLE><PARAGRAPH>If you have installed the system accounting option, all the files and command lines for implementation have been set up properly. You may wish to verify that the entries in the system configuration files are correct. In order to automate the operation of the accounting system, you should check that the following have been done: </PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>The file <FILENAME>/etc/init.d/acct</FILENAME> should contain the following lines (among others):</PARAGRAPH>
<CODE>
<SCREENDISPLAY>/usr/lib/acct/startup</SCREENDISPLAY>
<SCREENDISPLAY>/usr/lib/acct/shutacct</SCREENDISPLAY>
</CODE>
<PARAGRAPH>The first line starts process accounting during the system startup process; the second stops it before the system is brought down.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>For most installations, the following entries should be in    <FILENAME>/var/spool/cron/crontabs/adm</FILENAME> so that <COMMAND>cron</COMMAND> automatically runs the daily accounting. These lines should already exist:</PARAGRAPH>
<EXAMPLE>
0 4 * * 1-6 if /etc/chkconfig acct; then /usr/lib/acct/runacct 2> /var/adm/acct/nite/fd2log; fi
5 * * * 1-6 if /etc/chkconfig acct; then /usr/lib/acct/ckpacct; fi
</EXAMPLE>
<PARAGRAPH>Note that the above <COMMAND>cron</COMMAND> commands must constitute only one line in the <FILENAME>crontabs</FILENAME> file. The following command, which also constitutes only one line in the <FILENAME>crontabs</FILENAME> file, should be in <FILENAME>/var/spool/cron/crontabs/root</FILENAME>:</PARAGRAPH>
<EXAMPLE>
0 2 * * 4 if /etc/chkconfig acct; then /usr/lib/acct/dodisk > /var/adm/acct/nite/disklog; fi
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>To facilitate monthly merging of accounting data, the following entry in <FILENAME>/var/spool/cron/crontabs/adm</FILENAME> allows <COMMAND>monacct</COMMAND> to clean up all daily reports   and daily total accounting files, and deposit one monthly total report and one monthly total accounting file in the fiscal directory: </PARAGRAPH>
<EXAMPLE>
0 5 1 * * if /etc/chkconfig acct; then /usr/lib/acct/monacct; fi
</EXAMPLE>
<PARAGRAPH>The above command is all on one line in the source file, and takes advantage of the default action of <COMMAND>monacct</COMMAND> that uses the current month's date as the suffix for the file names. Notice that the entry is executed when <COMMAND>runacct</COMMAND> has sufficient time to complete. This will, on the first day of each month, create monthly accounting files with the entire month's data. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>You may wish to verify that an account exists for <FILENAME>adm</FILENAME>. Also, verify that the PATH shell variable is set in <FILENAME>/var/adm/.profile</FILENAME> to:</PARAGRAPH>
<CODE>
PATH=/usr/lib/acct:/bin:/usr/bin 
</CODE>
</LIST>
<LIST><PARAGRAPH>To start up system accounting, simply type the commands</PARAGRAPH>
<PARAGRAPH><USERINPUT>chkconfig acct on </USERINPUT></PARAGRAPH>
<PARAGRAPH>and </PARAGRAPH>
<PARAGRAPH><USERINPUT>/usr/lib/acct/startup </USERINPUT></PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>The next time the system is booted, accounting starts.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="26631">Daily System Accounting with runacct</TITLE><PARAGRAPH>The <COMMAND>runacct</COMMAND> command is the main daily accounting shell procedure. It is normally initiated by <COMMAND>cron</COMMAND> during nonpeak hours. <COMMAND>runacct</COMMAND> processes connect, fee, disk, and process accounting files. It also prepares daily and cumulative summary files for use by <COMMAND>prdaily</COMMAND> or for billing purposes.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>runacct Summary Files</TITLE><PARAGRAPH>The following files produced by <COMMAND>runacct</COMMAND> are of particular interest: </PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM><FILENAME>nite/lineuse</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>Produced by <COMMAND>acctcon</COMMAND>, reads the <FILENAME>wtmp</FILENAME> file and produces usage statistics for each terminal line on the system. This report is especially useful for detecting bad lines. If the ratio between the number of logoffs to logins exceeds about 3:1, it is quite possible that the line is failing. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>nite/daytacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>The total accounting file for the previous day in <FILENAME>tacct.h </FILENAME>format. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>sum/tacct</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>The accumulation of each day's <FILENAME>nite/daytacct</FILENAME> can be used for billing purposes. It is restarted each month or fiscal period by the <COMMAND>monacct</COMMAND> procedure. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>sum/daycms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>Produced by the <COMMAND>acctcms</COMMAND> program. It contains the daily command summary. The ASCII version of this file is <FILENAME>nite/daycms</FILENAME>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>sum/cms</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>The accumulation of each day's command summaries. It is restarted by the execution of <COMMAND>monacct</COMMAND>. The ASCII version is <FILENAME>nite/cms</FILENAME>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>sum/loginlog</FILENAME> </HANGITEM>
<HANGBODY><PARAGRAPH>Produced by the last login shell procedure. It maintains a record of the last time each <COMMAND>login</COMMAND> name was used. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM><FILENAME>sum/rprtMMDD </FILENAME></HANGITEM>
<HANGBODY><PARAGRAPH> &lbreak;Each execution of <COMMAND>runacct</COMMAND> saves a copy of the daily report that can be printed by <COMMAND>prdaily</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH><COMMAND>runacct</COMMAND> takes care not to damage files in the event of errors. A series of protection mechanisms are used that attempt to recognize an error, provide intelligent diagnostics, and terminate processing in such a way that <COMMAND>runacct</COMMAND> can be restarted with minimal intervention. It records its progress by writing descriptive messages into the file <FILENAME>active</FILENAME>. (Files used by <COMMAND>runacct</COMMAND> are assumed to be in the <FILENAME>nite</FILENAME> directory unless otherwise noted.) All diagnostics output during the execution of <COMMAND>runacct</COMMAND> are written into <FILENAME>fd2log. runacct</FILENAME> complains if the files <FILENAME>lock</FILENAME> and <FILENAME>lockl</FILENAME> exist when invoked. The <FILENAME>lastdate</FILENAME> file contains the month and day <COMMAND>runacct</COMMAND> was last invoked and is used to prevent more than one execution per day. If <COMMAND>runacct</COMMAND> detects an error, a message is written to <FILENAME>/dev/console</FILENAME>, mail is sent to <ITALICS>root</ITALICS> and <ITALICS>adm</ITALICS>, locks are removed, diagnostic files are saved, and execution is terminated.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>runacct Reentrant States</TITLE><PARAGRAPH>To allow runacct to be restartable, processing is broken down into separate reentrant states. A file is used to remember the last state completed. When each state completes, <FILENAME>statefile</FILENAME> is updated to reflect the next state. After processing for the state is complete, <FILENAME>statefile</FILENAME> is read and the next state is processed. When <COMMAND>runacct</COMMAND> reaches the CLEANUP state, it removes the locks and terminates. States are executed as follows: </PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>SETUP </HANGITEM>
<HANGBODY><PARAGRAPH>The command <COMMAND>turnacct</COMMAND> switch is executed. The process accounting files, <FILENAME>/var/adm/pacct?</FILENAME>,&space;are moved to <FILENAME>/var/adm/Spacct?.MMDD</FILENAME>. The <FILENAME>/etc/wtmp</FILENAME> file is moved to <FILENAME>/var/adm/acct/nite/wtmp.MMDD</FILENAME> with the current time added on the end. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>WTMPFIX </HANGITEM>
<HANGBODY><PARAGRAPH>The <COMMAND>wtmpfix</COMMAND> program checks the <FILENAME>wtmp</FILENAME> file in the <FILENAME>nite</FILENAME> directory for correctness. Some date changes cause <COMMAND>acctcon1</COMMAND> to fail, so <COMMAND>wtmpfix</COMMAND> attempts to adjust the time stamps in the <FILENAME>wtmp</FILENAME> file if a date change record appears.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CONNECT1 </HANGITEM>
<HANGBODY><PARAGRAPH>Connect session records are written to <FILENAME>ctmp</FILENAME> in the form of <FILENAME>ctmp.h. T</FILENAME>he lineuse file is created, and the reboots file is created showing all of the boot records found in the <FILENAME>wtmp</FILENAME> file.</PARAGRAPH>
<PARAGRAPH><FILENAME>ctmp</FILENAME> is converted to <FILENAME>ctacct.MMDD</FILENAME>, which are connect accounting records. (Accounting records are in <FILENAME>tacct.h </FILENAME>format.)</PARAGRAPH>
<PARAGRAPH>The <COMMAND>acctprc1</COMMAND> and <COMMAND>acctprc2</COMMAND> programs are used to convert the process accounting files, <FILENAME>/var/adm/Spacct?.MMDD</FILENAME>, into total accounting records in<FILENAME>&space;ptacct?.MMDD</FILENAME>. The <FILENAME>Spacct</FILENAME> and <FILENAME>ptacct</FILENAME> files are correlated by number so that if <COMMAND>runacct</COMMAND> fails, the unnecessary reprocessing of <FILENAME>Spacct</FILENAME> files will not occur. One precaution should be noted: when restarting <COMMAND>runacct</COMMAND> in this state, remove the last <FILENAME>ptacct</FILENAME> file, because it will not be complete. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>MERGE </HANGITEM>
<HANGBODY><PARAGRAPH>Merge the process accounting records with the connect accounting records to form <FILENAME>daytacct</FILENAME>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>FEES </HANGITEM>
<HANGBODY><PARAGRAPH>Merge in any ASCII <FILENAME>tacct</FILENAME> records from the file <FILENAME>fee</FILENAME> into <FILENAME>daytacct</FILENAME>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>DISK </HANGITEM>
<HANGBODY><PARAGRAPH>On the day after the <COMMAND>dodisk</COMMAND> procedure runs, merge <FILENAME>disktacct</FILENAME> with <FILENAME>daytacct</FILENAME>.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>MERGETACCT </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Merge <FILENAME>daytacct</FILENAME> with <FILENAME>sum/tacct</FILENAME>, the cumulative total accounting file. Each day, <FILENAME>daytacct</FILENAME> is saved in<FILENAME>&space;sum/tacctMMDD</FILENAME>, so that <FILENAME>sum/tacct</FILENAME> can be recreated in case it is corrupted or lost. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CMS </HANGITEM>
<HANGBODY><PARAGRAPH>Merge in today's command summary with the cumulative command summary file <FILENAME>sum/cms</FILENAME>. Produce ASCII and internal format command summary files. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>USEREXIT </HANGITEM>
<HANGBODY><PARAGRAPH>Any installation-dependent (local) accounting programs can be included here.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CLEANUP </HANGITEM>
<HANGBODY><PARAGRAPH>Clean up temporary files, run <COMMAND>prdaily</COMMAND> and save its output in <FILENAME>sum/rprtMMDD</FILENAME>, remove the locks, then exit.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Recovering from runacct Failures</TITLE><PARAGRAPH>The <COMMAND>runacct</COMMAND> procedure can fail for a variety of reasons&mdash;usually due to a system crash, <FILENAME>/usr</FILENAME> running out of space, or a corrupted wtmp file. If the <FILENAME>activeMMDD</FILENAME> file exists, check it first for error messages. If the <FILENAME>active</FILENAME> file and lock files exist, check <FILENAME>fd2log</FILENAME> for any mysterious messages. The following are error messages produced by runacct and the recommended recovery actions: </PARAGRAPH>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: locks found, run aborted </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>The files <FILENAME>/var/adm/acct/nite/lock</FILENAME> and <FILENAME>/var/adm/acct/nite/lock1</FILENAME> were found. These files must be removed before runacct can restart. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: acctg already run for date: check /var/adm/acct/nite/lastdate </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>The date in <FILENAME>lastdate</FILENAME> and today's date are the same. Remove <FILENAME>lastdate</FILENAME>. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: turnacct switch returned rc=? </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>Check the integrity of <FILENAME>turnacct</FILENAME> and <FILENAME>accton</FILENAME>. The <COMMAND>accton</COMMAND> program must be owned by root and have the <ITALICS>setuid</ITALICS> bit set. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: Spacct?.MMDD already exists </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>File setups probably already run. Check status of files, then run setups manually. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: /var/adm/acct/nite/wtmp.MMDD already exists, run setup manually </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>Self-explanatory. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: wtmpfix detected a corrupted wtmp file. Use fwtmp to correct the corrupted file. </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>Self-explanatory.</PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: connect acctg failed: check /var/adm/acct/nite/log </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>The <COMMAND>acctcon1</COMMAND> program encountered a bad <FILENAME>wtmp</FILENAME> file. Use <COMMAND>fwtmp</COMMAND> to correct the bad file. </PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
<ERRORMSG><MSG><SCREENDISPLAY>ERROR: Invalid state, check /var/adm/acct/nite/active </SCREENDISPLAY>
</MSG>
<EXPLANATION><PARAGRAPH>The file <FILENAME>statefile</FILENAME> is probably corrupted. Check <FILENAME>statefile</FILENAME> for irregularities and read <FILENAME>active</FILENAME> before restarting.</PARAGRAPH>
</EXPLANATION>
</ERRORMSG>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Restarting runacct</TITLE><PARAGRAPH>The <COMMAND>runacct</COMMAND> program, called without arguments, assumes that this is the first invocation of the day. The argument MMDD is necessary if <COMMAND>runacct</COMMAND> is being restarted and specifies the month and day for which <COMMAND>runacct</COMMAND> will rerun the accounting. The entry point for processing is based on the contents of <FILENAME>statefile</FILENAME>. To override <FILENAME>statefile</FILENAME>, include the desired state on the command line. For example, to start <COMMAND>runacct</COMMAND>, use the command: </PARAGRAPH>
<PARAGRAPH><USERINPUT>nohup runacct 2 /var/adm/acct/nite/fd2log &amp;</USERINPUT>&space;</PARAGRAPH>
<PARAGRAPH>To restart <COMMAND>runacct</COMMAND>: </PARAGRAPH>
<PARAGRAPH><USERINPUT>nohup runacct 0601 2 /var/adm/acct/nite/fd2log &amp;</USERINPUT>&space;</PARAGRAPH>
<PARAGRAPH>To restart runacct at a specific state: </PARAGRAPH>
<PARAGRAPH><USERINPUT>nohup runacct 0601 WTMPFIX 2 /var/adm/acct/nite/fd2log &amp;</USERINPUT>&space;</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Fixing Corrupted Accounting Files</TITLE><PARAGRAPH>Sometimes, errors occur in the accounting system, and a file is corrupted or lost. You can ignore some of these errors, or simply restore lost or corrupted files from a backup. However, certain files must be fixed in order to maintain the integrity of the accounting system.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Fixing wtmp Errors</TITLE><PARAGRAPH>The <FILENAME>wtmp</FILENAME> files are the most delicate part of the accounting system. When the date is changed and the IRIX system is in multiuser mode, a set of date change records is written into <FILENAME>/etc/wtmp</FILENAME>. The <COMMAND>wtmpfix</COMMAND> program is designed to adjust the time stamps in the <FILENAME>wtmp</FILENAME> records when a date change is encountered. However, some combinations of date changes and reboots will slip through <COMMAND>wtmpfix</COMMAND> and cause <COMMAND>acctcon1</COMMAND> to fail. </PARAGRAPH>
<PARAGRAPH>The following steps show how to fix a <FILENAME>wtmp</FILENAME> file: </PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><USERINPUT>cd /var/adm/acct/nite</USERINPUT>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>fwtmp &lt; wtmp.MMDD > xwtmp</USERINPUT>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>ed xwtmp</USERINPUT>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Delete any corrupted records or delete all records from beginning up to the date change.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>fwtmp -ic &lt;wtmp> wtmp.MMDD</USERINPUT>&space;</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH> If the wtmp file is beyond repair, remove the file and create an empty wtmp file:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH><USERINPUT>rm /etc/wtmp</USERINPUT>&space;</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH><USERINPUT>touch /etc/wtmp</USERINPUT>&space;</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>This prevents any charging of connect time. <COMMAND>acctprc1</COMMAND> cannot determine which login owned a particular process, but it is charged to the login that is first in the password file for that user ID.</PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Fixing tacct Errors</TITLE><PARAGRAPH>If the installation is using the accounting system to charge users for system resources, the integrity of <FILENAME>sum/tacct</FILENAME> is quite important. Occasionally, mysterious <FILENAME>tacct</FILENAME> records appear with negative numbers, duplicate user IDs, or a user ID of 65,535. First check <FILENAME>sum/tacctprev </FILENAME>with <COMMAND>prtacct</COMMAND>. If it looks all right, the latest <FILENAME>sum/tacct.MMDD</FILENAME> should be patched up, then <FILENAME>sum/tacct</FILENAME> recreated. A simple patchup procedure would be: </PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Enter the command:</PARAGRAPH>
<CODE>
<USERINPUT>cd /var/adm/acct/sum</USERINPUT>&space;
</CODE>
</LIST>
<LIST><PARAGRAPH>Enter the command:</PARAGRAPH>
<CODE>
<USERINPUT>acctmerg -v &lt; tacct.MMDD > xtacct</USERINPUT>&space;
</CODE>
</LIST>
<LIST><PARAGRAPH>Enter the command:</PARAGRAPH>
<CODE>
<USERINPUT>ed xtacct </USERINPUT>
</CODE>
</LIST>
<LIST><PARAGRAPH>Remove the bad records. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Write duplicate UID records to another file. </PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enter the command: </PARAGRAPH>
<CODE>
<USERINPUT>acctmerg -i &lt; xtacc t > tacct.MMDD </USERINPUT>
</CODE>
</LIST>
<LIST><PARAGRAPH>Enter the command:</PARAGRAPH>
<CODE>
<USERINPUT>acctmerg tacctprev &lt;tacct.MMDD> tacct </USERINPUT>
</CODE>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>Remember that the <COMMAND>monacct</COMMAND> procedure removes all the <FILENAME>tacct.MMDD </FILENAME>files; therefore, you can recreate <FILENAME>sum/tacct</FILENAME> by merging these files.</PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Updating Holidays for Accounting</TITLE><PARAGRAPH>The file <FILENAME>/usr/lib/acct/holidays</FILENAME> contains the prime/nonprime table for the accounting system. The table should be edited to reflect your location's holiday schedule for the year. The format is composed of three types of entries:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Comment Lines, which may appear anywhere in the file as long as the first character in the line is an asterisk. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Year Designation Line, which should be the first data line (noncomment line) in the file and must appear only once. The line consists of three fields of four digits each (leading white space is ignored). For example, to specify the year as 1992, prime time at 9:00 a.m., and nonprime time at 4:30 p.m., the following entry is appropriate: </PARAGRAPH>
<CODE>
<SCREENDISPLAY>1992 0900 1630</SCREENDISPLAY>&space;
</CODE>
<PARAGRAPH>A special condition allowed for in the time field is that the time 2400 is automatically converted to 0000. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Company Holidays Lines, which follow the year designation line and have the following general format: </PARAGRAPH>
<CODE>
<SCREENDISPLAY>day-of-year Month Day Description of Holiday</SCREENDISPLAY>&space;
</CODE>
<PARAGRAPH>The day-of-year field is a number in the range of 1 through 366, indicating the day for the corresponding holiday (leading white space is ignored). The other three fields are actually commentary and are not currently used by other programs.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Daily runacct Reports</TITLE><PARAGRAPH><COMMAND>runacct</COMMAND> generates five basic reports upon each invocation. They cover the areas of connect accounting, usage by person on a daily basis, command usage reported by daily and monthly totals, and a report of the last time users were logged in. The following paragraphs describe the reports and the meanings of their tabulated data. </PARAGRAPH>
<PARAGRAPH>In the first part of the report, the from/to banner should alert the administrator to the period reported on. This period runs from the time the last accounting report was generated until the time the current accounting report was generated. It is followed by a log of system reboots, shutdowns, power fail recoveries, and any other record dumped into <FILENAME>/etc/wtmp</FILENAME> by the <COMMAND>acctwtmp</COMMAND> program. See the<REFPAGE>&space;acct(1M)</REFPAGE> reference page for more information.</PARAGRAPH>
<PARAGRAPH>The second part of the report is a breakdown of line utilization. The TOTAL DURATION field tells how long the system was in multiuser state (able to be accessed through the terminal lines). The columns are: </PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>LINE </HANGITEM>
<HANGBODY><PARAGRAPH>The terminal line or access port. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>MINUTES </HANGITEM>
<HANGBODY><PARAGRAPH>The total number of minutes the line was in use during the accounting period.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>PERCENT </HANGITEM>
<HANGBODY><PARAGRAPH>The total number of minutes the line was in use divided into the total duration of the accounting period. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># SESS </HANGITEM>
<HANGBODY><PARAGRAPH>The number of times this port was accessed for a <COMMAND>login</COMMAND> session. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># ON </HANGITEM>
<HANGBODY><PARAGRAPH>This column has little significance. It previously gave the number of times that the port was used to log a user on; but since <COMMAND>login</COMMAND> can no longer be executed explicitly to log in a new user, this column should be identical with SESS.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># OFF </HANGITEM>
<HANGBODY><PARAGRAPH>The number of times a user logged off and also any interrupts that occur on that line. Generally, interrupts occur on a port when the <COMMAND>getty</COMMAND> is first invoked after the system is brought to multiuser state. This column comes into play when the # OFF exceeds the # ON by a large factor. This usually indicates that the multiplexer, modem, or cable is going bad, or that there is a bad connection somewhere. The most common cause of this is an unconnected cable dangling from the multiplexer. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>During real time, <FILENAME>/etc/wtmp</FILENAME> should be monitored, since this is the file from which connect accounting is geared. If it grows rapidly, execute <COMMAND>acctcon1</COMMAND> to see which line is the noisiest. If the interrupting is occurring at a furious rate, general system performance will be affected.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Daily Usage Report</TITLE><PARAGRAPH>The daily usage report gives a by-user breakdown of system resource utilization. Its data consists of: </PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>UID </HANGITEM>
<HANGBODY><PARAGRAPH>The user ID. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>LOGIN NAME </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The login name of the user; more than one login name can exist for a single user ID, and this entry identifies which login name used the resource. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CPU (MINS) </HANGITEM>
<HANGBODY><PARAGRAPH>The amount of time the user's process used the central processing unit. This category is broken down into PRIME and NPRIME (nonprime) utilization. The accounting system's idea of this breakdown is located in the <FILENAME>/usr/lib/acct/holidays</FILENAME> file. As delivered, prime time is defined to be 0900 through 1700 hours. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>KCORE-MINS </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A cumulative measure of the amount of memory a process uses while running. The amount shown reflects kilobyte segments of memory used per minute. This measurement is also broken down into PRIME and NPRIME amounts. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CONNECT (MINS) </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The amount of time that a user was logged into the system. If this time is high and # OF PROCS is low, this indicates that the user was logged in for a long period of time without actually using the system. This column is also subdivided into PRIME and NPRIME utilization. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>DISK BLOCKS </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;When the disk accounting programs have been run, the output is merged into the total accounting record (<FILENAME>tacct.h</FILENAME>) and shows up in this column. This disk accounting is accomplished by the program <COMMAND>acctdusg</COMMAND>. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># OF PROCS </HANGITEM>
<HANGBODY><PARAGRAPH>The number of processes invoked by the user. Large numbers in this column indicate that a user may have had a shell running out of control. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># O SESS </HANGITEM>
<HANGBODY><PARAGRAPH>Number of times the user logged onto the system. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM># DISK SAMPLES </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;Number of times disk accounting was run to obtain the average number of DISK BLOCKS listed earlier. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>FEE </HANGITEM>
<HANGBODY><PARAGRAPH>An often unused field in the total accounting record, the FEE field represents the total accumulation of widgets charged against the user by the <COMMAND>chargefee</COMMAND> shell procedure. See <REFPAGE>acctsh(1M)</REFPAGE>. The&space;<COMMAND>chargefee</COMMAND> procedure is used to levy charges against a user for special services performed such as file restores, and so on.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Daily Command and Monthly Total Command Summaries</TITLE><PARAGRAPH>These two reports are virtually the same except that Daily Command Summary reports only on the current accounting period, while Monthly Total Command Summary tells the story for the start of the fiscal period to the current date. In other words, the monthly report reflects the data accumulated since the last invocation of <COMMAND>monacct</COMMAND>. </PARAGRAPH>
<PARAGRAPH>The data included in these reports tell an administrator which commands are used most heavily. Based on those commands' characteristics of system resource utilization, the administrator can decide what to weigh more heavily when system tuning. These reports are sorted by TOTAL KCOREMIN, which is an arbitrary yardstick but often a good one for calculating &ldquo;drain&rdquo; on a system. </PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>COMMAND NAME </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The name of the command. Unfortunately, all shell procedures are lumped together under the name<COMMAND>&space;sh</COMMAND> since only object modules are reported by the process accounting system. The administrator should monitor the frequency of programs called <FILENAME>a.out</FILENAME> or <FILENAME>core</FILENAME> or any other name that does not seem quite right. Often people like to work on their favorite version of a personal program, but they do not want everyone to know about it. <COMMAND>acctcom</COMMAND> is also a good tool for determining who executed a suspiciously named command and also to see if superuser privileges were abused. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>NUMBER CMDS </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The total number of invocations of this particular command. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>TOTAL KCOREMIN </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The total cumulative measurement of the amount of kilobyte segments of memory used by a process per minute of run time. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>TOTAL CPU-MIN </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The total processing time this program has accumulated. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>TOTAL REAL-MIN </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The total real-time (wall-clock) minutes this program has accumulated. This total is the actual &ldquo;waited for&rdquo; time as opposed to kicking off a process in the background. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>MEAN SIZE-K </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The mean of the TOTAL KCOREMIN over the number of invocations reflected by NUMBER CMDS. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>MEAN CPU-MIN </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;The mean derived between NUMBER CMDS and TOTAL CPU-MIN. </PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>HOG FACTOR </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;This gives a relative measure of the total available CPU time consumed by the process during its execution. It is a measurement of the ratio of system availability to system utilization. It is computed by the formula:</PARAGRAPH>
<PARAGRAPH><ITALICS>total CPU time</ITALICS> / <ITALICS>elapsed time</ITALICS>&space;</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>CHARS TRNSFD </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;This column, which may contain a negative value, is a total count of the number of characters pushed around by the <FUNCTION>read</FUNCTION> and <FUNCTION>write</FUNCTION> system calls.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>BLOCKS READ </HANGITEM>
<HANGBODY><PARAGRAPH>&lbreak;A total count of the physical block reads and writes that a process performed.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="42770">IRIX Extended Accounting</TITLE><PARAGRAPH>Large computing sites often have many unrelated users and must be able to charge them separately for resource usage. Although there are IRIX mechanisms to provide usage information, these mechanisms are inadequate for many sites. Standard IRIX accounting lacks some important metrics, uses lots of disk space, and provides little flexibility for usage billing. Third-party accounting software addresses some of these issues, but is still limited by data provided IRIX. Array clusters and hypercubes compound these problems by allowing a single user's resource usage to be spread over multiple systems.</PARAGRAPH>
<PARAGRAPH>IRIX provides three features to assist large computing sites with accounting needs: extended accounting, array sessions, and project IDs.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>About Extended Accounting</TITLE><PARAGRAPH>The original IRIX mechanism for resource accounting was based on standard System V accounting. Whenever a process exits, the kernel writes a record containing resource usage information to a file. Because the kernel itself does this file I/O, process accounting can become a minor bottleneck on heavily loaded systems. Another problem is with the format of data written by System V accounting: usage information is stored using an awkward compressed format that amounts to a 16-bit floating point number. Values quickly lose a significant amount of accuracy, and have a maximum value that is not difficult to exceed on modern systems (around 2<SUPERSCRIPT>34</SUPERSCRIPT>, or 16 GB). Finally, there is no room for expansion in the accounting records. Metrics provided are fairly limited, and many customers need additional data. However, with no room for expansion, additional fields would require increasing the record size, which would break virtually all the existing software that uses accounting data.</PARAGRAPH>
<PARAGRAPH>In IRIX release 6.1 and later, extended accounting is available, while System V accounting remains in place, essentially unchanged.</PARAGRAPH>
<PARAGRAPH>One significant change in extended accounting is the delivery mechanism: records are written using the system audit trail (SAT) facility, which uses a daemon to collect audit records from the kernel using special system calls. SAT writes records out to destinations chosen by the system administrator; see <REFPAGE>satd(1M)</REFPAGE>. This gets the kernel out of the file I/O business, and gives system administrators flexibility in the handling of accounting data.</PARAGRAPH>
<PARAGRAPH>The <COMMAND>sat_select</COMMAND> command can be used to select accounting events for the audit subsystem to monitor; see <REFPAGE>sat_select(1M)</REFPAGE> for details.</PARAGRAPH>
<PARAGRAPH>Housekeeping tasks such as rotating audit files and handling file-system-full conditions are handled by the <COMMAND>satd</COMMAND> program. Third party software can either read the audit files in their entirety (files may contain records for non-accounting events if a site has elected to audit them) or use the existing <COMMAND>sat_reduce</COMMAND> program to filter out only relevant accounting records; see <REFPAGE>sat_reduce(1M)</REFPAGE>. Contents of individual records can be dumped in ASCII format using the <COMMAND>sat_interpret</COMMAND> program; see <REFPAGE>sat_interpret(1M)</REFPAGE>.</PARAGRAPH>
<PARAGRAPH>Resource data contained in extended accounting records is stored as uncompressed 64-bit values, which should be sufficient for most metrics into the near future. Records contain spare fields to allow for future expansion, and a version code to allow software to handle future format changes gracefully. In addition to all of the metrics reported by System V accounting, these new metrics have been added:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>number of swaps</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>number of bytes read or written</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>number of read or write requests</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>time spent waiting</PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>for block I/O</PARAGRAPH>
</BULLETIND>
<BULLETIND><PARAGRAPH>for physical I/O</PARAGRAPH>
</BULLETIND>
<BULLETIND><PARAGRAPH>on the run queue</PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Using Extended Accounting</TITLE><PARAGRAPH>To begin using extended accounting on a system, follow these steps:</PARAGRAPH>
<ORDEREDLIST><LIST><PARAGRAPH>Enable session accounting in the kernel by using the <COMMAND>systune</COMMAND> command to set the <VARIABLE>do_sessacct</VARIABLE> or <VARIABLE>do_extpacct</VARIABLE> parameters to non-zero values; see <REFPAGE>systune(1M)</REFPAGE>.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Install the <FILENAME>eoe.sw.audit</FILENAME> subsystem from IRIX distribution media.</PARAGRAPH>
</LIST>
<LIST><PARAGRAPH>Enable the audit facility with the following command:</PARAGRAPH>
<EXAMPLE>
<USERINPUT>chkconfig audit on</USERINPUT>&space;
</EXAMPLE>
</LIST>
<LIST><PARAGRAPH>Use the <COMMAND>satconfig</COMMAND> command to enable the <VARIABLE>sat_proc_acct</VARIABLE> or <VARIABLE>sat_session_acct</VARIABLE> audit events; see <REFPAGE>satconfig(1M)</REFPAGE>. If you are using the audit facility for accounting purposes only, you may turn off all other events to conserve disk space.</PARAGRAPH>
</LIST>
</ORDEREDLIST>
<PARAGRAPH>For more information, see the <REFPAGE>extacct(1M)</REFPAGE> reference page. Appendix A of <DOCTITLE></DOCTITLE>
<EXTREF IDREF="97829" BOOK="IA_ConfigOps" FILE="" HDG="97829" INFO="">IRIX Admin: System Configuration and Operation</EXTREF>
<DOCTITLE></DOCTITLE>, lists kernel parameters for extended accounting.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Array Sessions</TITLE><PARAGRAPH>To reduce disk space consumption and processing time for accounting records, IRIX can accumulate and report accounting information by array session. Process accounting is separately controlled&mdash; sites can use either accounting style, or both. Session accounting records contains data similar to process accounting records, except that counters and values reflect the accumulated total of all processes that were members of the session.</PARAGRAPH>
<PARAGRAPH>An array session is a set of processes all related to each other by a single unique identifier, the array session handle (ASH). A child process ordinarily inherits the ASH of its parent when created, thus becoming a member of its parent's array session. However, a system call is provided to allow a process to leave its parent's array session and start a new one. Programs like <COMMAND>login</COMMAND> and <COMMAND>rshd</COMMAND> use these system calls so that logging into the system effectively starts a new session. Programs like <COMMAND>cron</COMMAND>, <COMMAND>su</COMMAND>, and several batch queuing systems use these system calls so that work done on behalf of another user can have its own session. When the last process with a given ASH exits, the array sessions ends, and a session accounting record is written.</PARAGRAPH>
<PARAGRAPH>The ASH is a 64-bit value. A unique, increasing value (similar to a process ID) is assigned by default to each new array session as its handle. However, a system call is provided to change an array session's handle if desired. This can be used to synchronize the handles of array sessions on several systems in an array, thus allowing a distributed job to be considered a single entity for accounting purposes.</PARAGRAPH>
<PARAGRAPH>For more information, see the <REFPAGE>array_sessions(5)</REFPAGE> reference page.</PARAGRAPH>
<PARAGRAPH>The range of handles that ths system assigns may be configurable, so it is possible to ensure that automatically assigned handles never conflict with process-specified ones. The system ensures that a particular ASH is never in use by more than one array session on that local system at one time.</PARAGRAPH>
<PARAGRAPH>In addition to accumulated totals of various process accounting data, session accounting records contain a 64-byte field intended for &ldquo;service provider information.&rdquo; In particular, batch queuing systems can use this field to record data about the queue name, initiator, and so forth. By default, the service provider information for a new array session is inherited from the array session of its parent process.</PARAGRAPH>
<PARAGRAPH>The standard <COMMAND>init</COMMAND> program always has its service provider information set to all zeroes, and standard login utilities (<COMMAND>login</COMMAND>, <COMMAND>su</COMMAND>, <COMMAND>rshd</COMMAND>) never change service provider information. Batch queuing systems, on the other hand, are always expected to set service provider information to some non-zero value. Thus, it is possible to distinguish batch jobs from interactive sessions by checking if the service provider information is all zeroes or not.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Project IDs</TITLE><PARAGRAPH>Many sites must be able to charge individual departments separately for their usage of a given system. Typically, this was done by billing total usage for each system user ID to the appropriate department. However, some sites have users that work for more than one department, so billing all usage to a single department is not appropriate. </PARAGRAPH>
<PARAGRAPH>To solve this accounting conundrum, the project ID feature was introduced into IRIX. A project ID is similar to a group ID, except that: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the current project ID is associated with an array session, not an individual process </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the project ID does not affect access permissions; its only purpose is for accounting</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>A default project ID is associated with every user ID. Whenever it is necessary for a user to do work that should be billed to a different project, the <COMMAND>newproj</COMMAND> command may be used to change project ID; see <REFPAGE>newproj(1)</REFPAGE> for details. This command starts a new shell and array session; background processes under the old shell continue being accounted for under the original project ID. Furthermore, the user ID and group ID remain unchanged, so access permissions are unaffected. To prevent users from specifying a project ID for which they are not authorized, the <COMMAND>newproj</COMMAND> command consults a file listing valid project IDs for each user. The system calls that set project ID require superuser privileges.</PARAGRAPH>
<PARAGRAPH>The file that contains user IDs and their authorized projects, <FILENAME>/etc/project</FILENAME>, is similar in style to <FILENAME>/etc/passwd</FILENAME> or <FILENAME>/etc/group</FILENAME>; see <REFPAGE>project(4)</REFPAGE> for details. This file also specifies the default project for each user, in order to avoid modifying <COMMAND>/etc/passwd</COMMAND>. Because the project ID is a simple number, an additional file, <FILENAME>/etc/projid</FILENAME>, associates mnemonic ASCII names with numeric project IDs; see <REFPAGE>projid(4)</REFPAGE> for details. The system administrator can configure a standard default project ID using the <VARIABLE>dfltprid</VARIABLE> variable of <COMMAND>systune</COMMAND>.</PARAGRAPH>
<PARAGRAPH>By default, an array session inherits the project ID of the session that spawned it. The standard login utilities (<COMMAND>login</COMMAND>, <COMMAND>su</COMMAND>, <COMMAND>rshd</COMMAND>) that start new array sessions have been updated to change project ID to the default project ID of the new user.</PARAGRAPH>
<PARAGRAPH>Library routines for reading project ID files is also provided, comparable to library routines for reading password file data. See <REFPAGE>projid(3C)</REFPAGE> for more information.</PARAGRAPH>
</SECTION2>
</SECTION1>
</CHAPTER>
