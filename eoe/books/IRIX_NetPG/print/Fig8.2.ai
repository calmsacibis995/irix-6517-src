%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.5
%%For: () ()
%%Title: (fig.8.2.transport.interface.ai)
%%CreationDate: (5/21/96) ( 3:03 PM)
%%BoundingBox: 159 292 398 528
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%%DocumentCustomColors: (blue)
%%+ (custom black)
%%+ (dark blue)
%%+ (extra dark red)
%%+ (red)
%%CMYKCustomColor: 1 0 0 0 (blue)
%%+ 0.05 0.65 0.8 0 (copper)
%%+ 0 0 0 1 (custom black)
%%+ 1 0.5 0 0.35 (dark blue)
%%+ 0.25 1 1 0.35 (extra dark red)
%%+ 0.8 0 1 0 (green)
%%+ 0 1 0.85 0 (red)
%AI3_TemplateBox: 279 364 279 364
%AI3_TileBox: 0 0 552 730
%AI3_DocumentPreview: Header
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			break
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1994 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @
(
0 i
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 O
1 0.5 0 0.35 (dark blue) 0 x
0 i
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
214.4937 357.2187 m
214.4937 387.5 L
211.4937 387.5 L
211.4937 357.2187 L
214.4937 357.2187 L
f
225.0208 348.4479 m
225.0208 390 L
222.0208 390 L
222.0208 348.4479 L
225.0208 348.4479 L
f
1 0 0 0 (blue) 0.5 x
1 w
317.8261 328.755 m
247.462 328.755 L
247.462 331.755 L
317.8261 331.755 L
314.375 335.3088 l
328 330.2921 l
314.375 325.1671 l
317.8261 328.755 L
f
248.5109 331.755 m
251.962 335.3088 l
238.337 330.2921 l
251.962 325.1671 l
248.5109 328.755 L
F
1 0.5 0 0.35 (dark blue) 0 x
211.5037 360.1114 m
207.95 363.5625 l
212.9666 349.9375 l
218.0916 363.5625 l
214.5037 360.1114 L
F
u
u
0 0 0 1 (custom black) 0 x
218.4022 309.8143 m
229.3367 309.8143 238.2012 318.6787 238.2012 329.6133 c
238.2012 340.5478 229.3367 349.4123 218.4022 349.4123 c
207.4677 349.4123 198.6032 340.5478 198.6032 329.6133 c
198.6032 318.6787 207.4677 309.8143 218.4022 309.8143 c
f
U
u
0 0 0 1 (custom black) 0.0562 x
217.9647 311.0915 m
207.4939 311.0915 199.0054 319.5799 199.0054 330.0508 c
199.0054 340.5215 207.4939 349.0101 217.9647 349.0101 c
228.4354 349.0101 236.924 340.5215 236.924 330.0508 c
236.924 319.5799 228.4354 311.0915 217.9647 311.0915 c
f
0 0 0 1 (custom black) 0.1125 x
217.5272 312.3687 m
207.5202 312.3687 199.4076 320.4812 199.4076 330.4883 c
199.4076 340.4953 207.5202 348.6079 217.5272 348.6079 c
227.5342 348.6079 235.6468 340.4953 235.6468 330.4883 c
235.6468 320.4812 227.5342 312.3687 217.5272 312.3687 c
f
0 0 0 1 (custom black) 0.1687 x
217.0897 313.6459 m
207.5464 313.6459 199.8098 321.3824 199.8098 330.9258 c
199.8098 340.4691 207.5464 348.2057 217.0897 348.2057 c
226.633 348.2057 234.3696 340.4691 234.3696 330.9258 c
234.3696 321.3824 226.633 313.6459 217.0897 313.6459 c
f
0 0 0 1 (custom black) 0.225 x
216.6522 314.923 m
207.5727 314.923 200.2119 322.2837 200.2119 331.3633 c
200.2119 340.4428 207.5727 347.8035 216.6522 347.8035 c
225.7317 347.8035 233.0924 340.4428 233.0924 331.3633 c
233.0924 322.2837 225.7317 314.923 216.6522 314.923 c
f
0 0 0 1 (custom black) 0.2812 x
216.2147 316.2002 m
207.5989 316.2002 200.6141 323.1849 200.6141 331.8008 c
200.6141 340.4166 207.5989 347.4013 216.2147 347.4013 c
224.8305 347.4013 231.8153 340.4166 231.8153 331.8008 c
231.8153 323.1849 224.8305 316.2002 216.2147 316.2002 c
f
0 0 0 1 (custom black) 0.3375 x
215.7772 317.4774 m
207.6251 317.4774 201.0163 324.0862 201.0163 332.2383 c
201.0163 340.3903 207.6251 346.9991 215.7772 346.9991 c
223.9293 346.9991 230.5381 340.3903 230.5381 332.2383 c
230.5381 324.0862 223.9293 317.4774 215.7772 317.4774 c
f
0 0 0 1 (custom black) 0.3937 x
215.3397 318.7546 m
207.6514 318.7546 201.4185 324.9874 201.4185 332.6758 c
201.4185 340.3641 207.6514 346.5969 215.3397 346.5969 c
223.028 346.5969 229.2609 340.3641 229.2609 332.6758 c
229.2609 324.9874 223.028 318.7546 215.3397 318.7546 c
f
0 0 0 1 (custom black) 0.45 x
214.9022 320.0318 m
207.6776 320.0318 201.8207 325.8886 201.8207 333.1133 c
201.8207 340.3378 207.6776 346.1947 214.9022 346.1947 c
222.1268 346.1947 227.9837 340.3378 227.9837 333.1133 c
227.9837 325.8886 222.1268 320.0318 214.9022 320.0318 c
f
0 0 0 1 (custom black) 0.5062 x
214.4647 321.309 m
207.7038 321.309 202.2229 326.7899 202.2229 333.5508 c
202.2229 340.3116 207.7038 345.7926 214.4647 345.7926 c
221.2256 345.7926 226.7065 340.3116 226.7065 333.5508 c
226.7065 326.7899 221.2256 321.309 214.4647 321.309 c
f
0 0 0 1 (custom black) 0.5625 x
214.0272 322.5862 m
207.7301 322.5862 202.6251 327.6911 202.6251 333.9883 c
202.6251 340.2854 207.7301 345.3904 214.0272 345.3904 c
220.3243 345.3904 225.4293 340.2854 225.4293 333.9883 c
225.4293 327.6911 220.3243 322.5862 214.0272 322.5862 c
f
0 0 0 1 (custom black) 0.6187 x
213.5897 323.8634 m
207.7563 323.8634 203.0273 328.5924 203.0273 334.4258 c
203.0273 340.2591 207.7563 344.9882 213.5897 344.9882 c
219.4231 344.9882 224.1521 340.2591 224.1521 334.4258 c
224.1521 328.5924 219.4231 323.8634 213.5897 323.8634 c
f
0 0 0 1 (custom black) 0.675 x
213.1522 325.1405 m
207.7826 325.1405 203.4294 329.4936 203.4294 334.8633 c
203.4294 340.2329 207.7826 344.586 213.1522 344.586 c
218.5218 344.586 222.8749 340.2329 222.8749 334.8633 c
222.8749 329.4936 218.5218 325.1405 213.1522 325.1405 c
f
0 0 0 1 (custom black) 0.7312 x
212.7147 326.4177 m
207.8088 326.4177 203.8316 330.3949 203.8316 335.3008 c
203.8316 340.2066 207.8088 344.1838 212.7147 344.1838 c
217.6206 344.1838 221.5978 340.2066 221.5978 335.3008 c
221.5978 330.3949 217.6206 326.4177 212.7147 326.4177 c
f
0 0 0 1 (custom black) 0.7875 x
212.2772 327.6949 m
207.835 327.6949 204.2338 331.2961 204.2338 335.7383 c
204.2338 340.1804 207.835 343.7816 212.2772 343.7816 c
216.7194 343.7816 220.3206 340.1804 220.3206 335.7383 c
220.3206 331.2961 216.7194 327.6949 212.2772 327.6949 c
f
0 0 0 1 (custom black) 0.8437 x
211.8397 328.9721 m
207.8613 328.9721 204.636 332.1974 204.636 336.1758 c
204.636 340.1541 207.8613 343.3794 211.8397 343.3794 c
215.8181 343.3794 219.0434 340.1541 219.0434 336.1758 c
219.0434 332.1974 215.8181 328.9721 211.8397 328.9721 c
f
U
u
0 0 0 1 (custom black) 0.9 x
211.4022 330.2493 m
214.9169 330.2493 217.7662 333.0986 217.7662 336.6133 c
217.7662 340.1279 214.9169 342.9772 211.4022 342.9772 c
207.8875 342.9772 205.0382 340.1279 205.0382 336.6133 c
205.0382 333.0986 207.8875 330.2493 211.4022 330.2493 c
f
U
U
u
*u
0 1 0.85 0 (red) 0.15 x
200.2335 402.8003 m
200.2335 408.2676 208.3065 412.6998 218.2647 412.6998 c
228.2229 412.6998 236.2959 408.2676 236.2959 402.8003 c
236.2959 397.3331 228.2229 392.9008 218.2647 392.9008 c
208.3065 392.9008 200.2335 397.3331 200.2335 402.8003 c
f
1 D
218.2647 396.0548 m
225.0502 396.0548 230.5511 399.075 230.5511 402.8003 c
230.5511 406.5257 225.0502 409.5458 218.2647 409.5458 c
211.4792 409.5458 205.9783 406.5257 205.9783 402.8003 c
205.9783 399.075 211.4792 396.0548 218.2647 396.0548 c
f
*U
u
0 1 0.85 0 (red) 0 x
0 D
207.0255 400.0295 m
206.3523 400.864 205.9783 401.829 205.9783 402.8003 c
205.9783 406.5257 211.4792 409.5458 218.2647 409.5458 c
225.0502 409.5458 230.5511 406.5257 230.5511 402.8003 c
230.5511 401.7853 230.2354 400.9346 229.5039 400.0711 C
227.5367 402.3569 223.1749 404.0458 218.2647 404.0458 c
213.2485 404.0458 208.9343 402.3953 207.0255 400.0295 C
f
u
218.2647 404.0458 m
218.4746 404.0458 218.6819 404.0386 218.8897 404.0325 C
218.8897 409.5371 L
218.6827 409.5428 218.4743 409.5458 218.2647 409.5458 c
218.1199 409.5458 217.9765 409.5425 217.8329 409.5398 C
217.8329 404.037 L
217.9769 404.0397 218.1194 404.0458 218.2647 404.0458 c
f
0.0227 1 0.8636 0.0318 k
217.8329 404.037 m
217.8329 409.5398 L
217.4765 409.533 217.1242 409.5179 216.7762 409.4948 C
216.7762 403.9923 L
217.1242 404.0155 217.4765 404.0302 217.8329 404.037 C
f
0.0455 1 0.8773 0.0636 k
216.7762 403.9923 m
216.7762 409.4948 L
216.4192 409.4711 216.0663 409.4402 215.7194 409.4 C
215.7194 403.8977 L
216.0663 403.9379 216.4192 403.9686 216.7762 403.9923 C
f
0.0682 1 0.8909 0.0955 k
215.7194 403.8977 m
215.7194 409.4 L
215.3611 409.3586 215.0085 409.3087 214.6625 409.2505 C
214.6625 403.7512 L
215.0079 403.8093 215.3617 403.8563 215.7194 403.8977 C
f
0.0909 1 0.9046 0.1273 k
214.6625 403.7512 m
214.6625 409.2505 L
214.3027 409.19 213.9506 409.1201 213.6056 409.0424 C
213.6056 403.5402 L
213.9513 403.6181 214.3019 403.6906 214.6625 403.7512 C
f
0.1136 1 0.9182 0.1591 k
213.6056 403.5402 m
213.6056 409.0424 L
213.2444 408.9611 212.892 408.8704 212.5489 408.7712 C
212.5489 403.2682 L
212.8923 403.3675 213.2441 403.4588 213.6056 403.5402 C
f
0.1363 1 0.9318 0.1909 k
212.5489 403.2682 m
212.5489 408.7712 L
212.1856 408.6661 211.8328 408.5517 211.4921 408.4279 C
211.4921 402.929 L
211.8317 403.0525 212.1869 403.1635 212.5489 403.2682 C
f
0.1591 1 0.9454 0.2227 k
211.4921 402.929 m
211.4921 408.4279 L
211.1259 408.2948 210.7725 408.152 210.4353 407.9987 C
210.4353 402.4936 L
210.7743 402.6478 211.1239 402.7952 211.4921 402.929 C
f
0.1818 1 0.9591 0.2545 k
210.4353 402.4936 m
210.4353 407.9987 L
210.0631 407.8296 209.7117 407.6475 209.3784 407.4558 C
209.3784 401.9554 L
209.7104 402.1464 210.0647 402.325 210.4353 402.4936 C
f
0.2045 1 0.9727 0.2864 k
209.3784 401.9554 m
209.3784 407.4558 L
208.9989 407.2375 208.6457 407.0057 208.3218 406.761 C
208.3218 401.2626 L
208.6451 401.5068 208.9996 401.7375 209.3784 401.9554 C
f
0.2273 1 0.9864 0.3182 k
208.3218 401.2626 m
208.3218 406.761 L
207.9234 406.4601 207.5694 406.1406 207.2647 405.805 C
207.2647 400.2993 L
207.5707 400.6369 207.9211 400.96 208.3218 401.2626 C
f
0.25 1 1 0.35 (extra dark red) 0 x
207.2647 405.805 m
206.443 404.9 205.9783 403.8802 205.9783 402.8003 c
205.9783 401.829 206.3523 400.864 207.0255 400.0295 C
207.0995 400.1212 207.1836 400.2098 207.2647 400.2993 C
207.2647 405.805 L
f
0 1 0.85 0 (red) 0 x
219.8443 403.9837 m
219.8443 409.4885 L
219.5293 409.5107 219.2117 409.5283 218.8897 409.5371 C
218.8897 404.0325 L
219.2108 404.0231 219.5291 404.0071 219.8443 403.9837 C
f
0 1 0.85 0 (red) 0.0455 x
220.7987 403.8917 m
220.7987 409.4015 L
220.485 409.4376 220.1663 409.4658 219.8443 409.4885 C
219.8443 403.9837 L
220.166 403.9597 220.4844 403.9297 220.7987 403.8917 C
f
0 1 0.85 0 (red) 0.0909 x
221.7533 403.7556 m
221.7533 409.2683 L
221.4399 409.3191 221.122 409.3642 220.7987 409.4015 C
220.7987 403.8917 L
221.121 403.8529 221.4399 403.8084 221.7533 403.7556 C
f
0 1 0.85 0 (red) 0.1364 x
222.7079 403.5708 m
222.7079 409.0891 L
222.3955 409.1557 222.0774 409.2157 221.7533 409.2683 C
221.7533 403.7556 L
222.0768 403.7011 222.3952 403.6394 222.7079 403.5708 C
f
0 1 0.85 0 (red) 0.1818 x
223.6624 403.3329 m
223.6624 408.8607 L
223.3516 408.9443 223.0327 409.0199 222.7079 409.0891 C
222.7079 403.5708 L
223.0332 403.4994 223.3503 403.4187 223.6624 403.3329 C
f
0 1 0.85 0 (red) 0.2273 x
224.6168 403.0406 m
224.6168 408.5752 L
224.3076 408.6779 223.9888 408.7729 223.6624 408.8607 C
223.6624 403.3329 L
223.9889 403.2431 224.3065 403.1451 224.6168 403.0406 C
f
0 1 0.85 0 (red) 0.2727 x
225.5714 402.6878 m
225.5714 408.223 L
225.2638 408.3482 224.9456 408.4659 224.6168 408.5752 C
224.6168 403.0406 L
224.9444 402.9302 225.2639 402.8134 225.5714 402.6878 C
f
0 1 0.85 0 (red) 0.3182 x
226.526 402.2571 m
226.526 407.7933 L
226.2216 407.9452 225.9025 408.0883 225.5714 408.223 C
225.5714 402.6878 L
225.9026 402.5525 226.2206 402.4086 226.526 402.2571 C
f
0 1 0.85 0 (red) 0.3636 x
227.4806 401.7317 m
227.4806 407.2589 L
227.1797 407.4462 226.8625 407.6254 226.526 407.7933 C
226.526 402.2571 L
226.861 402.0908 227.1797 401.9156 227.4806 401.7317 C
f
0 1 0.85 0 (red) 0.4091 x
228.435 401.0709 m
228.435 406.5855 L
228.1431 406.8213 227.8231 407.0457 227.4806 407.2589 C
227.4806 401.7317 L
227.8237 401.5219 228.1411 401.3009 228.435 401.0709 C
f
0 1 0.85 0 (red) 0.4545 x
229.3897 400.1925 m
229.3897 405.6638 L
229.1144 405.9856 228.7957 406.2939 228.435 406.5855 C
228.435 401.0709 L
228.7929 400.7909 229.113 400.4976 229.3897 400.1925 C
f
0 1 0.85 0 (red) 0.5 x
229.5039 400.0711 m
230.2353 400.9346 230.5511 401.7853 230.5511 402.8003 c
230.5511 403.8243 230.1334 404.7944 229.3897 405.6638 C
229.3897 400.1925 L
229.4267 400.1517 229.4685 400.1123 229.5039 400.0711 C
f
U
U
u
0 1 0.85 0 (red) 0 x
200.2335 402.8003 m
200.2335 397.3331 208.3065 392.9008 218.2647 392.9008 c
228.2229 392.9008 236.2959 397.3331 236.2959 402.8003 C
236.2959 396.0503 L
236.2959 390.5831 228.2229 386.1508 218.2647 386.1508 c
208.3065 386.1508 200.2335 390.5831 200.2335 396.0503 C
200.2335 402.8003 L
f
u
214.4745 386.3718 m
214.4745 393.1218 L
214.1981 393.1542 213.9239 393.1897 213.6524 393.229 C
213.6524 386.479 L
213.9239 386.4397 214.1981 386.4042 214.4745 386.3718 C
f
0 1 0.85 0 (red) 0.0312 x
213.6524 386.479 m
213.6524 393.229 L
213.3758 393.2691 213.1016 393.3123 212.8303 393.3593 C
212.8303 386.6093 L
213.1016 386.5623 213.3758 386.5191 213.6524 386.479 C
f
0 1 0.85 0 (red) 0.0625 x
212.8303 386.6093 m
212.8303 393.3593 L
212.5534 393.4073 212.2793 393.4588 212.0083 393.5138 C
212.0083 386.7638 L
212.2793 386.7088 212.5534 386.6573 212.8303 386.6093 C
f
0 1 0.85 0 (red) 0.0937 x
212.0083 386.7638 m
212.0083 393.5138 L
211.7309 393.5702 211.4569 393.6302 211.1862 393.6937 C
211.1862 386.9437 L
211.4569 386.8802 211.7309 386.8202 212.0083 386.7638 C
f
0 1 0.85 0 (red) 0.125 x
211.1862 386.9437 m
211.1862 393.6937 L
210.9084 393.7589 210.6345 393.828 210.3641 393.9005 C
210.3641 387.1505 L
210.6345 387.078 210.9084 387.0089 211.1862 386.9437 C
f
0 1 0.85 0 (red) 0.1562 x
210.3641 387.1505 m
210.3641 393.9005 L
210.0858 393.9751 209.8121 394.0539 209.542 394.136 C
209.542 387.386 L
209.8121 387.3039 210.0858 387.2251 210.3641 387.1505 C
f
0 1 0.85 0 (red) 0.1875 x
209.542 387.386 m
209.542 394.136 L
209.2632 394.2209 208.9896 394.3101 208.72 394.4026 C
208.72 387.6526 L
208.9896 387.5601 209.2632 387.4709 209.542 387.386 C
f
0 1 0.85 0 (red) 0.2187 x
208.72 387.6526 m
208.72 394.4026 L
208.4405 394.4986 208.1669 394.599 207.8979 394.703 C
207.8979 387.953 L
208.1669 387.849 208.4405 387.7486 208.72 387.6526 C
f
0 1 0.85 0 (red) 0.25 x
207.8979 387.953 m
207.8979 394.703 L
207.6179 394.8112 207.3439 394.9237 207.0759 395.0403 C
207.0759 388.2903 L
207.3439 388.1737 207.6179 388.0612 207.8979 387.953 C
f
0 1 0.85 0 (red) 0.2812 x
207.0759 388.2903 m
207.0759 395.0403 L
206.7954 395.1624 206.5204 395.2881 206.2538 395.4189 C
206.2538 388.6689 L
206.5204 388.5381 206.7954 388.4124 207.0759 388.2903 C
f
0 1 0.85 0 (red) 0.3125 x
206.2538 388.6689 m
206.2538 395.4189 L
205.9717 395.5574 205.6974 395.7003 205.4318 395.8482 C
205.4318 389.0982 L
205.6974 388.9503 205.9717 388.8074 206.2538 388.6689 C
f
0 1 0.85 0 (red) 0.3437 x
205.4318 389.0982 m
205.4318 395.8482 L
205.1472 396.0065 204.8744 396.171 204.6096 396.3394 C
204.6096 389.5894 L
204.8744 389.421 205.1472 389.2565 205.4318 389.0982 C
f
0 1 0.85 0 (red) 0.375 x
204.6096 389.5894 m
204.6096 396.3394 L
204.3246 396.5209 204.0484 396.7065 203.7876 396.899 C
203.7876 390.149 L
204.0484 389.9565 204.3246 389.7709 204.6096 389.5894 C
f
0 1 0.85 0 (red) 0.4062 x
203.7876 390.149 m
203.7876 396.899 L
203.497 397.1135 203.2243 397.3356 202.9656 397.563 C
202.9656 390.813 L
203.2243 390.5856 203.497 390.3635 203.7876 390.149 C
f
0 1 0.85 0 (red) 0.4375 x
202.9656 390.813 m
202.9656 397.563 L
202.6694 397.8232 202.3954 398.0915 202.1435 398.3672 C
202.1435 391.6172 L
202.3954 391.3415 202.6694 391.0732 202.9656 390.813 C
f
0 1 0.85 0 (red) 0.4687 x
202.1435 391.6172 m
202.1435 398.3672 L
201.8359 398.7036 201.5587 399.0498 201.3214 399.4067 C
201.3214 392.6567 L
201.5587 392.2998 201.8359 391.9536 202.1435 391.6172 C
f
0 1 0.85 0 (red) 0.5 x
201.3214 399.4067 m
200.7418 400.2787 200.3828 401.2085 200.273 402.1754 C
200.2335 402.1754 L
200.2335 396.0503 L
200.2335 394.8581 200.6178 393.7153 201.3214 392.6567 C
201.3214 399.4067 L
f
0 1 0.85 0 (red) 0 x
221.0995 393.0236 m
221.0995 386.2736 L
221.4049 386.3001 221.7076 386.331 222.0078 386.3658 C
222.0078 393.1158 L
221.7076 393.081 221.4049 393.0501 221.0995 393.0236 C
f
0.0156 1 0.8594 0.0219 k
222.0078 393.1158 m
222.0078 386.3658 L
222.3137 386.4012 222.6163 386.4413 222.9162 386.4851 C
222.9162 393.2351 L
222.6163 393.1913 222.3137 393.1512 222.0078 393.1158 C
f
0.0312 1 0.8688 0.0437 k
222.9162 393.2351 m
222.9162 386.4851 L
223.2224 386.5299 223.525 386.5794 223.8246 386.6327 C
223.8246 393.3827 L
223.525 393.3294 223.2224 393.2799 222.9162 393.2351 C
f
0.0469 1 0.8781 0.0656 k
223.8246 393.3827 m
223.8246 386.6327 L
224.1313 386.6872 224.4338 386.7465 224.733 386.8097 C
224.733 393.5597 L
224.4338 393.4965 224.1313 393.4372 223.8246 393.3827 C
f
0.0625 1 0.8875 0.0875 k
224.733 393.5597 m
224.733 386.8097 L
225.04 386.8745 225.3426 386.944 225.6414 387.0177 C
225.6414 393.7677 L
225.3426 393.694 225.04 393.6245 224.733 393.5597 C
f
0.0781 1 0.8969 0.1094 k
225.6414 393.7677 m
225.6414 387.0177 L
225.9488 387.0935 226.2517 387.1738 226.5498 387.2586 C
226.5498 394.0086 L
226.2517 393.9238 225.9488 393.8435 225.6414 393.7677 C
f
0.0937 1 0.9062 0.1313 k
226.5498 394.0086 m
226.5498 387.2586 L
226.8576 387.3462 227.1609 387.4377 227.4581 387.5346 C
227.4581 394.2846 L
227.1609 394.1877 226.8576 394.0962 226.5498 394.0086 C
f
0.1094 1 0.9156 0.1531 k
227.4581 394.2846 m
227.4581 387.5346 L
227.7664 387.6352 228.0704 387.7393 228.3665 387.8495 C
228.3665 394.5995 L
228.0704 394.4893 227.7664 394.3852 227.4581 394.2846 C
f
0.125 1 0.925 0.175 k
228.3665 394.5995 m
228.3665 387.8495 L
228.6772 387.9651 228.9784 388.0875 229.2749 388.2133 C
229.2749 394.9633 L
228.9784 394.8375 228.6772 394.7151 228.3665 394.5995 C
f
0.1406 1 0.9344 0.1969 k
229.2749 394.9633 m
229.2749 388.2133 L
229.5859 388.3452 229.8888 388.4824 230.1833 388.625 C
230.1833 395.375 L
229.8888 395.2324 229.5859 395.0952 229.2749 394.9633 C
f
0.1562 1 0.9438 0.2187 k
230.1833 395.375 m
230.1833 388.625 L
230.4954 388.7761 230.7993 388.9322 231.0917 389.0947 C
231.0917 395.8447 L
230.7993 395.6822 230.4954 395.5261 230.1833 395.375 C
f
0.1719 1 0.9531 0.2406 k
231.0917 395.8447 m
231.0917 389.0947 L
231.4071 389.27 231.7089 389.4525 232 389.6403 C
232 396.3903 L
231.7089 396.2025 231.4071 396.02 231.0917 395.8447 C
f
0.1875 1 0.9625 0.2625 k
232 396.3903 m
232 389.6403 L
232.3183 389.8457 232.621 390.0583 232.9084 390.2776 C
232.9084 397.0276 L
232.621 396.8083 232.3183 396.5957 232 396.3903 C
f
0.2031 1 0.9719 0.2844 k
232.9084 397.0276 m
232.9084 390.2776 L
233.2317 390.5244 233.5351 390.7794 233.8168 391.0425 C
233.8168 397.7925 L
233.5351 397.5294 233.2317 397.2744 232.9084 397.0276 C
f
0.2187 1 0.9812 0.3063 k
233.8168 397.7925 m
233.8168 391.0425 L
234.1509 391.3546 234.4538 391.6776 234.7252 392.0103 C
234.7252 398.7603 L
234.4538 398.4276 234.1509 398.1046 233.8168 397.7925 C
f
0.2344 1 0.9906 0.3281 k
234.7252 398.7603 m
234.7252 392.0103 L
235.0878 392.455 235.3922 392.9168 235.6336 393.3933 C
235.6336 400.1433 L
235.3922 399.6668 235.0878 399.205 234.7252 398.7603 C
f
0.25 1 1 0.35 (extra dark red) 0 x
235.6336 393.3933 m
236.062 394.2392 236.2959 395.1295 236.2959 396.0503 C
236.2959 402.1754 L
236.2564 402.1754 L
236.177 401.4757 235.9643 400.7962 235.6336 400.1433 C
235.6336 393.3933 L
f
U
U
U
u
0 g
206.2708 502.2129 m
208.6139 502.2129 210.5135 504.1124 210.5135 506.4555 c
210.5135 508.7986 208.6139 510.6982 206.2708 510.6982 c
203.9277 510.6982 202.0282 508.7986 202.0282 506.4555 c
202.0282 504.1124 203.9277 502.2129 206.2708 502.2129 c
f
206.2707 482.2055 m
203.9277 482.2056 202.0281 484.1051 202.0282 486.4482 C
202.0282 496.9482 L
202.0282 499.2913 203.9277 501.1908 206.2708 501.1908 c
208.6139 501.1908 210.5135 499.2913 210.5135 496.9482 c
210.5135 487.5355 l
215.3923 487.4766 l
217.7353 487.4765 219.6348 485.5486 219.6348 483.2055 c
219.6348 473.0389 l
214.875 473.0389 l
214.875 482.198 l
206.2707 482.2055 l
f
0 R
1 G
0.5 w
208.2291 499.5805 m
207.1476 500.6621 205.394 500.6621 204.3125 499.5805 c
203.2309 498.499 203.2309 496.7454 204.3125 495.6639 c
209.6042 490.3722 l
210.2183 489.758 211.0491 489.4926 211.8506 489.576 c
221 489.576 l
221 493.3722 l
214.4341 493.3722 l
208.2291 499.5805 l
b
1 w
213.1875 479.2055 m
213.8318 479.2055 214.3541 479.7279 214.3541 480.3722 C
214.3541 480.3722 L
214.3541 481.0165 213.8318 481.5389 213.1875 481.5389 C
202.5208 481.5389 L
201.8765 481.5389 201.3541 481.0165 201.3541 480.3722 C
201.3541 480.3722 L
201.3541 479.7279 201.8765 479.2055 202.5208 479.2055 C
213.1875 479.2055 L
f
198.7708 485.6222 m
198.7708 484.9779 199.2932 484.4556 199.9375 484.4556 C
199.9375 484.4556 L
200.5818 484.4556 201.1042 484.9779 201.1042 485.6222 C
201.1042 496.2889 L
201.1042 496.9332 200.5818 497.4556 199.9375 497.4556 C
199.9375 497.4556 L
199.2932 497.4556 198.7708 496.9332 198.7708 496.2889 C
198.7708 485.6222 L
f
208.6042 472.6222 m
208.6042 479.1222 L
207.0208 479.1222 L
207.0208 472.6222 L
208.6042 472.6222 L
f
212.2708 472.0806 m
212.2708 472.9972 L
203.5208 472.9972 L
203.5208 472.0806 L
212.2708 472.0806 L
f
203.5208 469.7282 m
204.1066 469.7282 204.5815 470.2031 204.5815 470.7889 c
204.5815 471.3746 204.1066 471.8495 203.5208 471.8495 c
202.9351 471.8495 202.4602 471.3746 202.4602 470.7889 c
202.4602 470.2031 202.9351 469.7282 203.5208 469.7282 c
f
212.1875 469.7282 m
212.7733 469.7282 213.2481 470.2031 213.2481 470.7889 c
213.2481 471.3746 212.7733 471.8495 212.1875 471.8495 c
211.6017 471.8495 211.1268 471.3746 211.1268 470.7889 c
211.1268 470.2031 211.6017 469.7282 212.1875 469.7282 c
f
221.5208 470.0389 m
221.5208 472.4555 L
215.0208 472.4555 L
215.0208 470.0389 L
221.5208 470.0389 L
f
225.5208 491.6222 m
225.5208 492.8722 L
221.2708 492.8722 L
221.2708 491.6222 L
225.5208 491.6222 L
f
228.7292 489.4764 m
228.7292 490.7264 L
224.4792 490.7264 L
224.4792 489.4764 L
228.7292 489.4764 L
f
240.0208 492.2889 m
240.0208 494.4556 L
229.5208 494.4556 L
229.5208 492.2889 L
240.0208 492.2889 L
f
236.9375 494.5389 m
236.9375 495.5389 L
232.7708 495.5389 L
232.7708 494.5389 L
236.9375 494.5389 L
f
233.4375 496.3722 m
233.4375 507.298 L
230.1042 507.298 L
230.1042 496.3722 L
233.4375 496.3722 L
f
233.4375 506.298 m
241.6042 503.5389 l
241.6042 500.2055 l
233.4375 497.5389 l
233.4375 505.3722 l
F
234.7708 495.8081 m
236.4631 495.8081 237.835 497.18 237.835 498.8722 c
237.835 500.5645 236.4631 501.9364 234.7708 501.9364 c
233.0786 501.9364 231.7067 500.5645 231.7067 498.8722 c
231.7067 497.18 233.0786 495.8081 234.7708 495.8081 c
f
U
1 0.5 0 0.35 (dark blue) 0 x
228.6187 442.8334 m
223.4937 456.4584 L
218.477 442.8334 L
222.0208 446.2748 L
222.0208 396.4375 L
223.625 396.7725 L
225.0208 397.25 L
225.0208 446.2845 L
225.0308 446.2845 L
228.6187 442.8334 L
f
0 R
0 G
0.5 w
250.2083 457 m
250.2083 514 L
186.2083 514 L
186.2083 457 L
250.2083 457 L
s
0 To
1 0 0 1 218.3333 459 0 Tp
TP
-26.1846 0 Td
0 Tr
0 O
0 g
1 w
/_Helvetica 8 Tf
0 Ts
100 Tz
0 Tt
0 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
1 Ta
0 Tq
9 0 Tl
0 Tc
0 Tw
(Transport user) Tx 
(\r) TX 
TO
0 To
1 0 0 1 276.5937 409.9687 0 Tp
TP
-17.2324 0 Td
0 Tr
(Transport\r) Tx 
1.7891 -9 Td
(interface) Tx 
(\r) TX 
TO
0 To
1 0 0 1 264.0937 303.5 0 Tp
TP
-17.2324 0 Td
0 Tr
(Transport\r) Tx 
2.6865 -9 Td
(provider) Tx 
(\r) TX 
TO
0 To
1 0 0 1 256 380.6875 0 Tp
TP
0 Tr
0 Ta
(Service events\r) Tx 
T*
(and results) Tx 
(\r) TX 
TO
0 To
1 0 0 1 190.5 435.1875 0 Tp
TP
-26.8535 0 Td
0 Tr
2 Ta
(Service\r) Tx 
-4.0352 -9 Td
(requests) Tx 
(\r) TX 
TO
0 R
0 G
0.5 w
236.5937 396.5312 m
257 404 l
S
0 To
1 0 0 1 331.125 333 0 Tp
TP
0 Tr
0 O
0 g
1 w
0 Ta
(To other transport\r) Tx 
T*
(providers and \r) Tx 
T*
(user processes) Tx 
(\r) TX 
TO
1 0.5 0 0.35 (dark blue) 0 x
0.5 w
212.875 396.75 m
214.4937 396.4375 L
214.4937 457 L
211.4937 457 L
211.4937 397.25 L
212.875 396.75 L
f
0 R
0 G
233.5 318.5 m
246 306 l
S
254 373.5 m
224 373.5 l
S
213 428 m
193 428 l
S
0 To
1 0 0 1 215 520.5 0 Tp
TP
-23.7207 0 Td
0 Tr
0 O
0 g
1 w
1 Ta
(User process) Tx 
(\r) TX 
TO
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
