<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="6"><TITLE><XREFTARGET ID="55141">XDR and RPC Language Structure</TITLE><PARAGRAPH>This chapter describes the XDR and RPC languages. Topics include:<INDEXTARGET ID="6.lang1"><!-- POSTPROCESSDATA: 6.lang1|RPC:languagelanguage, RPCXDR:language --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>XDR language structure, syntax, and examples</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>RPC language structure, syntax, and examples</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>For an overview of the relationship between the RPC and XDR languages and the RPC interface, see <XREF IDREF="11571" TYPE="TITLE">Chapter&nbsp;3, &ldquo;Introduction to RPC Programming.&rdquo;</XREF> For information about <COMMAND>rpcgen</COMMAND>, see <XREF IDREF="84027" TYPE="TITLE">Chapter&nbsp;4, &ldquo;Programming with rpcgen.&rdquo;</XREF> For information about RPC programming, see <XREF IDREF="49542" TYPE="TITLE">Chapter&nbsp;5, &ldquo;RPC Programming Guide.&rdquo;</XREF> For technical details about XDR, see <XREF IDREF="41930" TYPE="TITLE">Chapter&nbsp;7, &ldquo;XDR Programming Notes.&rdquo;</XREF> For complete specifications of the RPC and XDR protocols, see <XREF IDREF="94783" TYPE="TITLE">Appendix&nbsp;A, &ldquo;RPC Protocol Specification,&rdquo;</XREF> and <XREF IDREF="94683" TYPE="TITLE">Appendix&nbsp;B, &ldquo;XDR Protocol Specification.&rdquo;</XREF></NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE>XDR Language</TITLE><PARAGRAPH>This section describes the components of the XDR language.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Notational Conventions</TITLE><PARAGRAPH>This specification uses an extended Backus-Naur Form notation for describing the XDR language. This notation has the following characteristics:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>These are the special characters:</PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>|  (  )  [  ]  "  *</SCREENDISPLAY>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Terminal symbols are strings of any characters surrounded by double quotes (<SCREENDISPLAY>" "</SCREENDISPLAY>).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Nonterminal symbols are strings of non-special characters.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Alternative items are separated by a vertical bar (<SCREENDISPLAY>|</SCREENDISPLAY>). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Optional items are enclosed in brackets (<SCREENDISPLAY>[]</SCREENDISPLAY>). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Items are grouped by enclosing them in parentheses (<SCREENDISPLAY>( )</SCREENDISPLAY>). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>An asterisk (<SCREENDISPLAY>*</SCREENDISPLAY>) following an item means zero or more occurrences of that item.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>For example, consider this pattern: </PARAGRAPH>
<EXAMPLE>
"a" "very" ("," "very")* ["cold" "and"]  "rainy" ("day" | "night") 
</EXAMPLE>
<PARAGRAPH>An infinite number of strings match this pattern; for example:</PARAGRAPH>
<CODE>
"a very rainy day"
"a very, very rainy day"
"a very cold and rainy day"
"a very, very, very cold and rainy night"
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Lexical Notes</TITLE><PARAGRAPH>This section discusses some lexical features of the XDR language:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Comments begin with /* and end with */. For example:</PARAGRAPH>
<PARAGRAPH><SCREENDISPLAY>/* comment */</SCREENDISPLAY>&space;</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>White space separates items and is otherwise ignored. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>An identifier is a letter followed by an optional sequence of letters, digits, or an underscore (<SCREENDISPLAY>_</SCREENDISPLAY>). The case of identifiers is not ignored. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>A constant is a sequence of one or more decimal digits, optionally preceded by a minus sign (<SCREENDISPLAY>&ndash;</SCREENDISPLAY>). </PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Syntax Information</TITLE><PARAGRAPH>This section describes XDR language syntax:</PARAGRAPH>
<CODE>
declaration:
&space;   type-specifier identifier
&space;   | type-specifier identifier "[" value "]"
&space;   | type-specifier identifier "&lt;" [ value ] ">"
&space;   | "opaque" identifier "[" value "]"
&space;   | "opaque" identifier "&lt;" [ value ] ">"
&space;   | "string" identifier "&lt;" [ value ] ">"
&space;   | type-specifier "*" identifier
&space;   | "void"
value:
&space;   constant
&space;   | identifier
type-specifier:
&space;     [ "unsigned" ] "int"
&space;   | [ "unsigned" ] "hyper"
&space;   | "float"
&space;   | "double"
&space;   | "bool"
&space;   | enum-type-spec
&space;   | struct-type-spec
&space;   | union-type-spec
&space;   | identifier
enum-type-spec:
&space;   "enum" enum-body
enum-body:
&space;   "{"
&space;   ( identifier "=" value )
&space;   ( "," identifier "=" value )*
&space;   "}"
struct-type-spec:
&space;   "struct" struct-body
struct-body:
&space;   "{"
&space;   ( declaration ";" )
&space;   ( declaration ";" )*
&space;   "}"
union-type-spec:
&space;   "union" union-body
union-body:
&space;   "switch" "(" declaration ")" "{"
&space;   ( "case" value ":" declaration ";" )
&space;   ( "case" value ":" declaration ";" )*
&space;   [ "default" ":" declaration ";" ]
&space;   "}"
constant-def:
&space;   "const" identifier "=" constant ";"
type-def:
&space;   "typedef" declaration ";"
&space;   | "enum" identifier enum-body ";"
&space;   | "struct" identifier struct-body ";"
&space;   | "union" identifier union-body ";"
definition:
&space;   type-def
&space;   | constant-def
specification:
&space;   definition *
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Syntax Notes</TITLE><PARAGRAPH>This section provides additional information about XDR language syntax:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The following keywords cannot be used as identifiers:<INDEXTARGET ID="6.lang2"><!-- POSTPROCESSDATA: 6.lang2|XDR:language syntax --></PARAGRAPH>
<CODE>
bool        double      opaque    typedef
case        enum        string    union
const       float       struct    unsigned
default     hyper       switch    void
</CODE>
</BULLET>
<BULLET><PARAGRAPH>Only <VARIABLE>unsigned</VARIABLE> constants may be used as size specifications for arrays. If an identifier is used, it must have been declared previously as an <VARIABLE>unsigned</VARIABLE> constant in a <VARIABLE>const</VARIABLE> definition.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Constant and type identifiers within the scope of a specification are in the same name space and must be declared uniquely within this scope. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Similarly, variable names must be unique within the scope of <VARIABLE>struct</VARIABLE> and <VARIABLE>union</VARIABLE> declarations. Nested <VARIABLE>struct</VARIABLE> and <VARIABLE>union</VARIABLE> declarations create new scopes.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The discriminant of a <VARIABLE>union</VARIABLE> must be of a type that evaluates to an integer. That is, <VARIABLE>int</VARIABLE>, <VARIABLE>unsigned int</VARIABLE>, <VARIABLE>bool</VARIABLE>, an enumerated type, or any <FUNCTION>typedef</FUNCTION> type that evaluates to one of these is legal. Also, the <FUNCTION>case</FUNCTION> values must be one of the legal values of the discriminant. Finally, a <FUNCTION>case</FUNCTION> value may not be specified more than once within the scope of a <VARIABLE>union</VARIABLE> declaration. </PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>XDR Data Description Example</TITLE><PARAGRAPH>The following is a short XDR data description of a &ldquo;file&rdquo; that you might use to transfer files from one machine to another:</PARAGRAPH>
<CODE>
const MAXUSERNAME = 32;    /* max length of a user name */
const MAXFILELEN = 65535;  /* max length of a file */
const MAXNAMELEN = 255;    /* max length of a filename */

/* Types of files: */
enum filekind {
&space;   TEXT = 0,            /* ascii data */
&space;   DATA = 1,            /* raw data */
&space;   EXEC = 2             /* executable */
};

/* File information, per kind of file: */
union filetype switch (filekind kind) {
&space;   case TEXT:
&space;     void;                /* no extra information */
&space;   case DATA:
&space;     string creator&lt;MAXNAMELEN>;   /* data creator */
&space;   case EXEC:
&space;     string interpreter&lt;MAXNAMELEN>;/*program interpreter*/
};

/* A complete file: */
struct file {
&space;   string filename&lt;MAXNAMELEN>;    /* name of file */
&space;   filetype type;                  /* info about file */
&space;   string owner&lt;MAXUSERNAME>;      /* owner of file */
&space;   opaque data&lt;MAXFILELEN>;        /* file data  */
};
</CODE>
<PARAGRAPH>Suppose that a user named <ITALICS>jean</ITALICS> wants to store a LISP program <FILENAME>sillyprog</FILENAME>, which contains just the data &ldquo;(quit).&rdquo; The file would be encoded as shown in <XREF IDREF="43187" TYPE="TABLE">Table&nbsp;6-1</XREF>. </PARAGRAPH>
<TABLE COLUMNS="4"><CAPTION LBL="6-1"><PREFIX>Table 6-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="43187">DR Data Encoding Examples</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="36"><PARAGRAPH>Offset</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>Hex Bytes</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>ASCII</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Description</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>0</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>00 00 00 09</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>....</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Length of filename = 9 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>4</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>73 69 6c 6c</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>sill</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Filename characters </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>8</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>79 70 72 6</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>ypro</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>More filename characters </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>12</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>67 00 00 00</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>g...</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>The last filename character plus 3 zero-bytes of fill </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>16</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>00 00 00 02</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>....</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>File kind is EXEC = 2 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>20</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>00 00 00 04</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>....</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Length of interpreter name = 4 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>24</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>6c 69 73 70</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>lisp</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Interpreter name </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>28</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>00 00 00 04</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>....</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Length of owner name = 4 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>32</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>6a 65 61 6e</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>jean</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Owner name </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>36</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>00 00 00 06</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>....</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>Length of data = 6</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>40</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>28 71 75 69</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>(qui</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>File data bytes</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="36"><PARAGRAPH>44</PARAGRAPH>
</CELL>
<CELL LEFT="45" WIDTH="54"><PARAGRAPH>74 29 00 00</PARAGRAPH>
</CELL>
<CELL LEFT="105" WIDTH="36"><PARAGRAPH>t)..</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="228"><PARAGRAPH>More data plus 2 zero-bytes of fill </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>RPC Language</TITLE><PARAGRAPH>RPC language is an extension of the XDR language; the sole extension is the addition of the <VARIABLE>program</VARIABLE> type. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Definitions</TITLE><PARAGRAPH>An RPC language file consists of a series of definitions:</PARAGRAPH>
<CODE>
definition-list:
&space;   definition ";"
&space;   definition ";" definition-list
</CODE>
<PARAGRAPH>It recognizes six types of definition:</PARAGRAPH>
<CODE>
definition:
&space;   enum-definition
&space;   struct-definition
&space;   union-definition
&space;   typedef-definition
&space;   const-definition
&space;   program-definition
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Structures</TITLE><PARAGRAPH>An XDR structure is declared almost exactly like its C counterpart:<INDEXTARGET ID="6.lang3"><!-- POSTPROCESSDATA: 6.lang3|structures, XDRXDR:structures --></PARAGRAPH>
<CODE>
struct-definition:
&space;   "struct" struct-ident "{"
&space;       declaration-list
&space;   "}"

declaration-list:
&space;   declaration ";"
&space;   declaration ";" declaration-list
</CODE>
<PARAGRAPH>For example, the following code is an XDR structure for a two&ndash;dimensional coordinate and the C structure into which it is compiled in the output header file:</PARAGRAPH>
<CODE>
struct coord {          struct coord {
&space;   int x;       -->        int x;
&space;   int y;                  int y;
};                      };
&space;                       typedef struct coord coord;
</CODE>
<PARAGRAPH>The output is identical to the input, except for the added <FUNCTION>typedef</FUNCTION> at the end of the output. Using <FUNCTION>typedef</FUNCTION> allows you to use <VARIABLE>coord</VARIABLE> instead of <VARIABLE>struct coord</VARIABLE> when declaring items. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Unions</TITLE><PARAGRAPH>XDR unions are discriminated unions, and they look different from C unions. They are more analogous to Pascal variant records than they are to C unions:<INDEXTARGET ID="6.lang4"><!-- POSTPROCESSDATA: 6.lang4|unions, XDRXDR:unions --></PARAGRAPH>
<CODE>
union-definition:
&space;   "union" union-ident "switch" "(" declaration ")" "{"
&space;       case-list
&space;   "}"
case-list:
&space;   "case" value ":" declaration ";"
&space;   "default" ":" declaration ";"
&space;   "case" value ":" declaration ";" case-list
</CODE>
<PARAGRAPH>The next example shows a type that might be returned as the result of a read data operation. If no error, return a block of data. Otherwise, return nothing.</PARAGRAPH>
<CODE>
union read_result switch (int errno) {
case 0:
&space;   opaque data[1024];
default:
&space;   void;
}; 
</CODE>
<PARAGRAPH>This code is compiled into:</PARAGRAPH>
<CODE>
struct read_result {
&space;   int errno;
&space;   union {
&space;       char data[1024];
&space;   } read_result_u;
};
typedef struct read_result read_result;
</CODE>
<PARAGRAPH>Notice that the <VARIABLE>union</VARIABLE> component of the output <VARIABLE>struct</VARIABLE> has the name as the type name, except for the trailing <VARIABLE>_u</VARIABLE>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Enumerations</TITLE><PARAGRAPH>XDR enumerations have the same syntax as C enumerations:<INDEXTARGET ID="6.lang5"><!-- POSTPROCESSDATA: 6.lang5|enumerations, XDRXDR:enumerations --></PARAGRAPH>
<CODE>
enum-definition:
&space;   "enum" enum-ident "{"
&space;       enum-value-list
&space;   "}"

enum-value-list:
&space;   enum-value
&space;   enum-value "," enum-value-list

enum-value:
&space;   enum-value-ident
&space;   enum-value-ident "=" value
</CODE>
<PARAGRAPH>The XDR <VARIABLE>enum</VARIABLE> and the C <VARIABLE>enum</VARIABLE> are compiled into:</PARAGRAPH>
<CODE>
enum colortype {          enum colortype {
&space;   RED = 0,                  RED = 0,
&space;   GREEN = 1,     -->        GREEN = 1,
&space;   BLUE = 2                  BLUE = 2
};                        };
&space;                         typedef enum colortype colortype;
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Typedefs</TITLE><PARAGRAPH>An XDR <INDEXTARGET ID="6.lang6"><!-- POSTPROCESSDATA: 6.lang6|typedefs, XDRXDR:typedefs --><FUNCTION>typedef</FUNCTION> has the same syntax as a C <FUNCTION>typedef</FUNCTION>:</PARAGRAPH>
<CODE>
typedef-definition:
&space;   "typedef" declaration
</CODE>
<PARAGRAPH>The following example defines a <VARIABLE>fname_type</VARIABLE> used to declare filename strings that have a maximum length of 255 characters:</PARAGRAPH>
<CODE>
typedef string fname_type&lt;255>; --> typedef char *fname_type;
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Constants</TITLE><PARAGRAPH>XDR constants are symbolic constants. They may be used wherever an integer constant is used; for example, in array-size specifications:<INDEXTARGET ID="6.lang7"><!-- POSTPROCESSDATA: 6.lang7|constants, XDRXDR:constants --></PARAGRAPH>
<CODE>
const-definition:
&space;    "const" const-ident "=" integer
</CODE>
<PARAGRAPH>For example, the following defines a constant DOZEN equal to 12:</PARAGRAPH>
<EXAMPLE>
const DOZEN = 12;  -->  #define DOZEN 12
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Programs</TITLE><PARAGRAPH>RPC programs are declared using this syntax:<INDEXTARGET ID="6.lang8"><!-- POSTPROCESSDATA: 6.lang8|RPC:programs --></PARAGRAPH>
<CODE>
program-definition:
&space;   "program" program-ident "{" 
&space;       version-list
&space;   "}" "=" value

version-list:
&space;   version ";"
&space;   version ";" version-list

version:
&space;   "version" version-ident "{"
&space;       procedure-list
&space;   "}" "=" value

procedure-list:
&space;   procedure ";"
&space;   procedure ";" procedure-list

procedure:
&space;   type-ident procedure-ident "(" type-ident ")" "=" value
</CODE>
<PARAGRAPH>This example shows the time protocol, revisited:</PARAGRAPH>
<CODE>
/*
&space;* time.x: Get or set the time. Time is represented as
&space;* number of seconds since 0:00, January 1, 1970.
&space;*/
program TIMEPROG {
&space;   version TIMEVERS {
&space;       unsigned int TIMEGET(void) = 1;
&space;       void TIMESET(unsigned) = 2;
&space;   } = 1;
} = 44;
</CODE>
<PARAGRAPH>This file compiles into <FUNCTION>#define</FUNCTION>s in the output header file: </PARAGRAPH>
<CODE>
#define TIMEPROG 44
#define TIMEVERS 1
#define TIMEGET 1
#define TIMESET 2
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Declarations</TITLE><PARAGRAPH>There are four kinds of declaration in XDR:<INDEXTARGET ID="6.lang9"><!-- POSTPROCESSDATA: 6.lang9|rpcgen:declarations --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Simple declarations are like simple C declarations:</PARAGRAPH>
<CODE>
&space;   simple-declaration:
&space;       type-ident variable-ident
</CODE>
<PARAGRAPH>For example:</PARAGRAPH>
<EXAMPLE>
&space;   colortype color;    --> colortype color;
</EXAMPLE>
</BULLET>
<BULLET><PARAGRAPH>Fixed-array declarations are like array declarations in C:</PARAGRAPH>
<CODE>
&space;   fixed-array-declaration:
&space;       type-ident variable-ident "[" value "]"
</CODE>
<PARAGRAPH>For example:</PARAGRAPH>
<EXAMPLE>
&space;   colortype palette[8];    --> colortype palette[8];
</EXAMPLE>
</BULLET>
<BULLET><PARAGRAPH>Variable-array declarations have no explicit syntax in C, so XDR invents its own using angle brackets:</PARAGRAPH>
<CODE>
&space;   variable-array-declaration:
&space;       type-ident variable-ident "&lt;" value ">"
&space;       type-ident variable-ident "&lt;" ">"
</CODE>
</BULLET>
<BULLET><PARAGRAPH>The maximum size is specified between the angle brackets. The size may be omitted, indicating that the array may be of any size:</PARAGRAPH>
<CODE>
&space;   int heights&lt;12>;     /* at most 12 items */
&space;   int widths&lt;>;        /* any number of items */
</CODE>
</BULLET>
<BULLET><PARAGRAPH>Since variable-length arrays have no explicit syntax in C, these declarations are actually compiled into structs. For example, the <VARIABLE>heights</VARIABLE> declaration gets compiled into the following <VARIABLE>struct</VARIABLE>:</PARAGRAPH>
<CODE>
&space;   struct {
&space;       u_int heights_len;       /* # of items in array */
&space;       int *heights_val;        /* pointer to array */
&space;   } heights;
</CODE>
</BULLET>
<BULLET><PARAGRAPH>The number of items in the array is stored in the <VARIABLE>_len</VARIABLE>&space;component, and the pointer to the array is stored in the <VARIABLE>_val</VARIABLE>&space;component. The first part of each component's name is the same as the name of the declared XDR variable.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Pointer declarations are made in XDR exactly as they are in C. You can't really send pointers over the network, but you can use XDR pointers to send recursive data types such as lists and trees. The type is actually called <VARIABLE>optional data</VARIABLE>, not <VARIABLE>pointer</VARIABLE>, in XDR language.</PARAGRAPH>
<CODE>
&space;   pointer-declaration:
&space;       type-ident "*" variable-ident
</CODE>
<PARAGRAPH>For example:</PARAGRAPH>
<CODE>
&space;   listitem *next;    -->    listitem *next;
</CODE>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Special Cases</TITLE><PARAGRAPH>There are a few exceptions to the rules described in the preceding sections:<INDEXTARGET ID="6.lang10"><!-- POSTPROCESSDATA: 6.lang10|rpcgen:special casesspecial cases, rpcgenexceptions, rpcgen --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Booleans<INDEXTARGET ID="6.lang11"><!-- POSTPROCESSDATA: 6.lang11|booleans, XDRXDR:booleans --></PARAGRAPH>
<PARAGRAPH>C has no built-in boolean type. However, the RPC library does have a boolean type called <VARIABLE>bool_t</VARIABLE> that is either TRUE or FALSE. Things declared as type <VARIABLE>bool</VARIABLE> in XDR language are compiled into <VARIABLE>bool_t</VARIABLE> in the output header file. For example:</PARAGRAPH>
<EXAMPLE>
&space;   bool married;    -->    bool_t married;
</EXAMPLE>
</BULLET>
<BULLET><PARAGRAPH>Strings<INDEXTARGET ID="6.lang12"><!-- POSTPROCESSDATA: 6.lang12|strings, XDRXDR:strings --></PARAGRAPH>
<PARAGRAPH>C has no built-in string type, but instead uses the null-terminated <VARIABLE>char *</VARIABLE> convention. In XDR language, strings are declared using the <VARIABLE>string</VARIABLE> keyword and are compiled into <VARIABLE>char *</VARIABLE>s in the output header file. The number contained in the angle brackets specifies the maximum number of characters allowed in the string (not counting the NULL character). The maximum size may be left off, indicating a string of arbitrary length. For example:</PARAGRAPH>
<CODE>
&space;   string name&lt;32>;      -->    char *name;
&space;   string longname&lt;>;    -->    char *longname;
</CODE>
</BULLET>
<BULLET><PARAGRAPH>Opaque data</PARAGRAPH>
<PARAGRAPH>Opaque data is used in RPC and XDR to describe untyped data; that is, just sequences of arbitrary bytes. Opaque data may be declared as either a fixed- or a variable-length array. For example:</PARAGRAPH>
<CODE>
&space;   opaque diskblock[512];    -->    char diskblock[512];
&space;   opaque filedata&lt;1024>;    -->    struct {
&space;                                       u_int filedata_len;
&space;                                       char *filedata_val;
&space;                                   } filedata;
</CODE>
</BULLET>
<BULLET><PARAGRAPH>Voids<INDEXTARGET ID="6.lang13"><!-- POSTPROCESSDATA: 6.lang13|void, XDRXDR:void --></PARAGRAPH>
<PARAGRAPH>In a void declaration, the variable is not named. The declaration is just <VARIABLE>void</VARIABLE> and nothing else. Void declarations can occur in only two places: <VARIABLE>union</VARIABLE> definitions and program definitions (as the argument or the result of a remote procedure).</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
</SECTION1>
</CHAPTER>
