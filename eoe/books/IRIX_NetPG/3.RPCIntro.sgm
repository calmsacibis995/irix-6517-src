<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="3"><TITLE><XREFTARGET ID="11571">Introduction to RPC Programming</TITLE><PARAGRAPH>Remote procedure calls are a high-level communication paradigm that allows programmers to write network applications using procedure calls that hide the details of the underlying network. RPC implements a client/server system without requiring that callers be aware of the underlying network.</PARAGRAPH>
<PARAGRAPH>This chapter introduces the RPC programming interface, which enables an application to make procedure calls to remote machines using architecture-independent mechanisms. This portability is achieved by using eXternal Data Representation (XDR) data-encoding to resolve byte-ordering differences and the port mapper program to locate and invoke a requested procedure. </PARAGRAPH>
<PARAGRAPH>Topics in this chapter include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>an overview of remote procedure calls, including the RPC model, the RPC protocol, and RPC message authentication</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the XDR standard</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the layers of RPC</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the <COMMAND>rpcgen</COMMAND> protocol compiler</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>assigning RPC program numbers</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the port mapper programs</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE>Overview of Remote Procedure Calls</TITLE><PARAGRAPH>Programs that communicate over a network need a paradigm for communication. For example, a low-level mechanism might send a signal when incoming packets arrive, causing a network signal handler to execute. With the remote procedure call paradigm, a client makes a procedure call to send a data packet to the server. When the packet arrives, the server calls a dispatch routine, performs whatever service is requested, sends back the reply, and the procedure call returns to the client. </PARAGRAPH>
<PARAGRAPH>In this context, a <ITALICS>server</ITALICS> is a machine where some number of network services are implemented. A <ITALICS>service</ITALICS> is a collection of one or more remote programs. A remote program implements one or more remote procedures; the procedures, their parameters, and results are documented in the specific program's protocol specification. Network <ITALICS>clients</ITALICS> are pieces of software that initiate remote procedure calls to services. A server may support more than one version of a remote program in order to be forward-compatible with changing protocols.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>The Remote Procedure Call Model</TITLE><PARAGRAPH>The remote procedure call model is similar to the local procedure call model. With the local model, the caller places arguments to a procedure in a well-specified location (such as a result register) and transfers control to the procedure. When the caller eventually regains control, it extracts the results of the procedure from the well-specified location and continues execution.<INDEXTARGET ID="3.RPCIntro1"><!-- POSTPROCESSDATA: 3.RPCIntro1|RPC:modelmodel, RPC --></PARAGRAPH>
<PARAGRAPH>The remote procedure call model operates in a similar fashion, except control winds through two processes: the caller's process and a server's process. That is, the caller process sends a message to the server process and waits (blocks) for a reply message. The call message contains the procedure's parameters (among other things), and the reply message contains the procedure's results (among other things). When the reply message returns, the caller extracts the results of the procedure and resumes execution.</PARAGRAPH>
<PARAGRAPH>On the server side, a process is dormant as it waits for the arrival of a call message. When a reply arrives, the server process extracts the procedure's parameters, computes the results, sends a reply message, and then waits for the arrival of the next call message. </PARAGRAPH>
<PARAGRAPH>Note that in the remote procedure call model, only one of the two processes is active at any given time. However, this scenario is given only as an example. The RPC protocol (see <XREF IDREF="34013" TYPE="TITLE">&ldquo;RPC Transports and Semantics&rdquo;</XREF>) makes no restrictions on concurrency, and other scenarios are possible. For example, an implementation may choose to have asynchronous RPC calls, so the client may do useful work while waiting for the reply from the server. Another possibility is to have the server create a task to process an incoming request, so the server can be free to receive other requests. </PARAGRAPH>
<PARAGRAPH><XREF IDREF="46568" TYPE="GRAPHIC">Figure&nbsp;3-1</XREF> illustrates the remote procedure call model.</PARAGRAPH>
<!-- RASTERCONVERT: 3.RPCIntro.cgm -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="3.RPCIntro-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="3-1"><PREFIX>Figure 3-1 </PREFIX><XREFTARGET ID="46568">The Remote Procedure Call Model</CAPTION>
</FIGURE>
</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="34013">RPC Transports and Semantics</TITLE><PARAGRAPH>The RPC package is implemented using the RPC protocol, a message protocol specified using XDR language. The RPC protocol is independent of transport protocols; that is, RPC does not care how a message is passed from one process to another; the protocol is concerned only with the specification and interpretation of messages. <INDEXTARGET ID="3.RPCIntro2"><!-- POSTPROCESSDATA: 3.RPCIntro2|RPC:transports --></PARAGRAPH>
<PARAGRAPH>RPC does not try to implement reliability; the application must be aware of the type of transport protocol underneath RPC. If the application knows it's running on top of a reliable transport (such as TCP/IP), most of the work is already done. If the application is running on top of an unreliable transport (such as UDP/IP), however, it must implement its own retransmission and timeout policy, because the RPC layer does not provide this service.</PARAGRAPH>
<PARAGRAPH>To ensure transport independence, the RPC protocol does not attach specific semantics to the remote procedures or their execution. Semantics can be inferred from (but should be explicitly specified by) the underlying transport protocol. For example, consider what happens when RPC runs on top of an unreliable transport. If an application retransmits RPC messages after short timeouts and receives no reply, all it can infer is that the procedure was executed zero or more times. If it receives a reply, it can infer that the procedure was executed at least once.</PARAGRAPH>
<PARAGRAPH>A server may wish to ensure some degree of execute-at-most-once semantics and remember previously granted requests from a client and not grant them again. A server can do this by taking advantage of the transaction ID that is packaged with every RPC request. </PARAGRAPH>
<PARAGRAPH>The transaction ID is used primarily by the client RPC layer to match replies to requests. However, a client application may choose to reuse its previous transaction ID when retransmitting a request. The server application, knowing this fact, may choose to remember this ID after granting a request and not regrant requests with the same ID in order to achieve some degree of execute&ndash;at-most-once semantics. The server is not allowed to examine this ID in any other way except as a test for equality.</PARAGRAPH>
<PARAGRAPH>On the other hand, if the application uses a reliable transport, it can infer from a reply message that the procedure was executed exactly once. If it receives no reply message, however, it cannot assume the remote procedure was not executed. Note that even with a connection-oriented protocol such as TCP, an application still needs timeouts and reconnection to handle server crashes.</PARAGRAPH>
<PARAGRAPH>Additional transport possibilities exist for datagram- or connection&ndash;oriented protocols. On IRIX, RPC is currently implemented on top of both TCP/IP and UDP/IP transports. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Binding and Rendezvous Independence</TITLE><PARAGRAPH>The act of binding a client to a service is not part of the RPC specification. This important and necessary function is left up to some higher-level software. (The software may use RPC itself; see <INDEXTARGET ID="3.RPCIntro3"><!-- POSTPROCESSDATA: 3.RPCIntro3|RPC:bindingRPC:rendezvous independencebinding, RPCrendezvous independence, RPC --><XREF IDREF="37582" TYPE="TITLE">&ldquo;Port Mapper Program Protocol&rdquo; in Appendix&nbsp;A</XREF> for more information.)</PARAGRAPH>
<PARAGRAPH>Implementors should think of the RPC protocol as the jump-subroutine instruction (JSR) of a network; the loader (binder) makes JSR useful, and the loader itself uses JSR to accomplish its task. Likewise, the network makes RPC useful, using RPC to accomplish its task. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>RPC Message Identification and Authentication</TITLE><PARAGRAPH>The RPC protocol provides the fields necessary for a client to identify itself to a service and vice versa. Authentication and identity-based access control mechanisms, on the other hand, are not provided and must be added to provide security. <INDEXTARGET ID="3.RPCIntro4"><!-- POSTPROCESSDATA: 3.RPCIntro4|RPC:message authenticationmessage, authentication, RPCauthentication, RPC --></PARAGRAPH>
<PARAGRAPH>Identification is the means to present or assert an identity that is recognizable to the receiver; it provides no proof that the identity is valid. In UNIX, typing a user name at the login prompt is identification, as is putting a UID and a GID into an AUTH_UNIX credential for RPC. </PARAGRAPH>
<PARAGRAPH>Authentication provides the actions to verify the truth of the asserted identity. To continue with the examples above, the password is used by the UNIX login program to verify the user's identity, and the AUTH_DES or AUTH_KERB protocols (not provided with Silicon Graphics' RPC) provide authentication in RPC. The action the password program performs is to compare what the user types to the encrypted copy that resides on the system. AUTH_DES and AUTH_KERB use encryption-based user authentication. </PARAGRAPH>
<PARAGRAPH>Silicon Graphics' RPC message authentication mechanism, which consists of the AUTH_UNIX and AUTH_NONE protocols, does not provide authentication, as defined above. When these protocols are used, the application must provide the authentication. An example of how to extend RPC to include an authentication procedure, as provided in the <COMMAND>rlogin</COMMAND> program, is shown in <XREF IDREF="15504" TYPE="TITLE">&ldquo;Server-side Authentication&rdquo; in Chapter&nbsp;5</XREF>.</PARAGRAPH>
<PARAGRAPH>Once the client is identified and verified, access control can be implemented. Access control is the mechanism that provides permission to allow the requests made by the user to be granted, based upon the user's authentic identity. Access control is not provided in RPC and must be supplied by the application.</PARAGRAPH>
<PARAGRAPH>Several different authentication protocols are supported. A field in the RPC header indicates which protocol is being used.</PARAGRAPH>
<PARAGRAPH>For information about specific authentication protocols, see <XREF IDREF="11233" TYPE="TITLE">&ldquo;Authentication Protocols&rdquo; in Appendix&nbsp;A</XREF>.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>The XDR Standard</TITLE><PARAGRAPH>RPC assumes the existence of XDR, a set of library routines that allow a C programmer to describe arbitrary data structures in a machine-independent fashion. XDR is useful for transferring data between diverse computer architectures and has been used to communicate data between such diverse machines as the IRIS, Sun, VAX, IBM PC, and Cray computers.</PARAGRAPH>
<PARAGRAPH>XDR enables RPC to handle arbitrary data structures, regardless of a machine's byte order or structure layout conventions, by converting the data structures to XDR before sending them over the wire. Any program running on any machine can use XDR to create portable data by translating its local representation into the XDR representation; similarly, any program running on any machine can read portable data by translating the XDR standard representations into its local equivalents. This process of converting from a particular machine representation to XDR format is called <ITALICS>serializing</ITALICS>, and the reverse process is called <ITALICS>deserializing</ITALICS> (see <XREF IDREF="41930" TYPE="TITLE">Chapter&nbsp;7, &ldquo;XDR Programming Notes,&rdquo;</XREF> for details).</PARAGRAPH>
<PARAGRAPH>XDR uses the XDR language to describe data formats (see <XREF IDREF="55141" TYPE="TITLE">Chapter&nbsp;6, &ldquo;XDR and RPC Language Structure&rdquo;</XREF>). Protocols such as Sun RPC and NFS use XDR to describe their data format.</PARAGRAPH>
<PARAGRAPH>The XDR language lets you describe intricate data formats in a concise manner. The alternative&mdash;using graphical representations (an informal language)&mdash;quickly becomes incomprehensible when faced with complexity. The XDR language is similar to the C language, but it is not a programming language and can only be used to describe data. </PARAGRAPH>
<PARAGRAPH>XDR fits into the ISO presentation layer and is roughly analogous in purpose to X.409, ISO Abstract Syntax Notation. The major difference is that XDR uses implicit typing, while X.409 uses explicit typing.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>The Layers of RPC</TITLE><PARAGRAPH>This section provides a brief overview of the RPC layers. For programming details about each layer, see <XREF IDREF="49542" TYPE="TITLE">Chapter&nbsp;5, &ldquo;RPC Programming Guide.&rdquo;</XREF></PARAGRAPH>
<PARAGRAPH>RPC is divided into three layers: the highest layer, the middle layer, and the lowest layer.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>The Highest Layer</TITLE><PARAGRAPH>The highest layer of RPC is transparent to the operating system, the machine, and the network upon which it is run. It's probably best to think of this level as a way of using RPC, rather than as a part of &ldquo;RPC proper.&rdquo; Programmers who write RPC routines should (almost) always make this layer available to others by using a simple C front end that entirely hides the networking.</PARAGRAPH>
<PARAGRAPH>For example, at this level, a program can make a call to the C routine <FUNCTION>rnusers()</FUNCTION>, which returns the number of users on a remote machine. Users are not explicitly aware of using RPC&mdash;they simply call a procedure, just as they would call <FUNCTION>malloc()</FUNCTION>.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>The Middle Layer</TITLE><PARAGRAPH>The middle layer of RPC is really RPC proper and consists of routines used for most applications. In the middle layer, the user simply makes remote procedure calls to routines on other machines, without considering details about the socket interface, the UNIX system, or other low-level implementation mechanisms. For example, the middle layer allows RPC to pass the &ldquo;hello world&rdquo; test.</PARAGRAPH>
<PARAGRAPH>RPC calls are made with the <FUNCTION>registerrpc()</FUNCTION>, <FUNCTION>callrpc()</FUNCTION>, and <FUNCTION>svc_run()</FUNCTION> routines. <FUNCTION>registerrpc()</FUNCTION> and <FUNCTION>callrpc()</FUNCTION> are the most fundamental: <FUNCTION>registerrpc()</FUNCTION> obtains a unique system-wide procedure-identification number, and <FUNCTION>callrpc()</FUNCTION> actually executes a remote procedure call. In the middle layer, a call to <FUNCTION>rnusers()</FUNCTION> is implemented by using these two routines.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>The middle layer of RPC is rarely used in serious programming due to its inflexibility (simplicity). It does not allow timeout specifications or the choice of transport; it does not allow UNIX process control or flexibility in the case of errors; and it does not support multiple methods of call authentication. Although programmers rarely need all of these controls, one or two are sometimes necessary. </NOTE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>The Lowest Layer</TITLE><PARAGRAPH>In the lowest layer of RPC, the programmer has control over the hidden details and can write more-sophisticated applications that alter the defaults of the routines. At this layer, programmers can explicitly manipulate sockets used for transmitting RPC messages.</PARAGRAPH>
<PARAGRAPH>Programs written at this level are most efficient, but efficiency is rarely an issue, because RPC clients and servers rarely generate heavy network loads; if possible, this level should be avoided.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>This guide only describes the interface to C, but you can make remote procedure calls from any language. And, although this guide describes RPC when it is used to communicate between processes on different machines, it works just as well for communication between different processes on the same machine.</NOTE>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>The rpcgen Protocol Compiler</TITLE><PARAGRAPH>Programming applications that use RPC can be difficult, especially when you are writing XDR routines that convert procedure arguments and results into their network format and vice versa. The <COMMAND>rpcgen</COMMAND> compiler helps automate the process of writing RPC applications. Using <COMMAND>rpcgen</COMMAND> decreases development time that would otherwise be spent coding and debugging low-level routines. With <COMMAND>rpcgen</COMMAND>, the compiler does most of the dirty work; the programmer need only debug the main features of the application, rather than spend time debugging network interface code.</PARAGRAPH>
<PARAGRAPH><COMMAND>rpcgen</COMMAND> accepts remote program interface definitions written in the RPC language (see <XREF IDREF="55141" TYPE="TITLE">Chapter&nbsp;6, &ldquo;XDR and RPC Language Structure,&rdquo;</XREF> for more information) and produces C language output for RPC programs. This output consists of a stub version of the client routines, a server skeleton, XDR filter routines for parameters and results, a header file that contains common definitions, and ANSI C prototyped stub routines.</PARAGRAPH>
<PARAGRAPH>You can compile and link <COMMAND>rpcgen</COMMAND>'s output files using standard techniques. Then after writing the server procedures, you can link the server procedures with the server skeletons to produce an executable server program.</PARAGRAPH>
<PARAGRAPH>To use a remote program, the programmer writes an ordinary main program that makes local procedure calls to the client skeletons. Linking the main program with the skeletons creates an executable program.</PARAGRAPH>
<PARAGRAPH>Like other compilers, <COMMAND>rpcgen</COMMAND> provides an escape hatch that lets programmers mix low-level code with high-level code. In speed-critical applications, handwritten routines can be linked with the <COMMAND>rpcgen</COMMAND> output without any difficulty. In addition, <COMMAND>rpcgen</COMMAND> output can be used as a starting point; you can rewrite the code as necessary.</PARAGRAPH>
<PARAGRAPH>For details about <COMMAND>rpcgen</COMMAND>, see <XREF IDREF="84027" TYPE="TITLE">Chapter&nbsp;4, &ldquo;Programming with rpcgen.&rdquo;</XREF></PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="10975">Assigning RPC Program Numbers</TITLE><PARAGRAPH>An RPC call message has three fields, which uniquely identify the procedure to be called. These fields include:<INDEXTARGET ID="3.RPCIntro5"><!-- POSTPROCESSDATA: 3.RPCIntro5|RPC:remote programsRPC:proceduresremote, programs, RPCprocedures, RPC --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>the remote program's RPC version number</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the remote procedure number</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the remote program number</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The version field of the call message identifies which version of the RPC protocol the caller is using. Because most new protocols evolve into better, stable, and mature protocols, a version field of the call message identifies which version of the protocol the caller is using. Version numbers make it possible for old and new protocols to communicate through the same server process.</PARAGRAPH>
<PARAGRAPH>The procedure number identifies the procedure to be called. This number is documented in the specific program's protocol specification. For example, a file service's protocol specification may state that its procedure number 5 is <FUNCTION>read()</FUNCTION> and procedure number 12 is <FUNCTION>write()</FUNCTION> (see <XREF IDREF="35610" TYPE="TITLE">&ldquo;Remote Programs and Procedures&rdquo; in Appendix&nbsp;A</XREF> for more information).</PARAGRAPH>
<PARAGRAPH>Program numbers are administered by a central authority (such as Sun Microsystems). Once you have a program number, you can implement your remote program. <XREF IDREF="80836" TYPE="TABLE">Table&nbsp;3-1</XREF> lists some of the currently registered programs. </PARAGRAPH>
<TABLE COLUMNS="3"><CAPTION LBL="3-1"><PREFIX>Table 3-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="80836">Some Registered RPC Programs</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="110"><PARAGRAPH>RPC Number</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>Program</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>Description </PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100000</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>PMAPPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>port mapper</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100001</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>RSTATPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>remote stats </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100002</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>RUSERSPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>remote users </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100003</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>NFSPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>NFS</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100004</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>YPPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>NIS</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100005</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>MOUNTPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>mount daemon </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100006</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>DBXPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>remote dbx </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100007</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>YPBINDPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>ypbind server </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100008</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>WALLPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>shutdown msg </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100009</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>YPPASSWDPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>yppasswd server </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100010</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>ETHERSTATPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>ether stats </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100012</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>SPRAYPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>spray packets </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100017</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>REXECPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>remote execution </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100020</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>LOCKPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>local lock manager </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100021</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>NETLOCKPROG</PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>network lock manager </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100023</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>STATMON1PROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>status monitor 1 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100024</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>STATMON2PROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>status monitor 2 </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100026</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>BOOTPARAMPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>boot parameters service </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100028</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>YPUPDATEPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>ypupdate server </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100029</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>KEYSERVEPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>key server </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="110"><PARAGRAPH>100036</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="110"><PARAGRAPH>PWDAUTHPROG </PARAGRAPH>
</CELL>
<CELL LEFT="230" WIDTH="110"><PARAGRAPH>password authorization </PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>RPC program numbers are assigned in groups of 0x20000000 (536870912) according to the categories in <XREF IDREF="43348" TYPE="TABLE">Table&nbsp;3-2</XREF>.</PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="3-2"><PREFIX>Table 3-2 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="43348">RPC Program Number Assignment</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="144"><PARAGRAPH>Number</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Assignment </PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>&space;             0x0 - 0x1fffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Defined by Sun</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0x20000000 - 0x3fffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Defined by user</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0x40000000 - 0x5fffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Transient</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0x60000000 - 0x7fffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Reserved</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0x80000000 - 0x9fffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Reserved</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0xa0000000 - 0xbfffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Reserved</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0xc0000000 - 0xdfffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Reserved</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="144"><PARAGRAPH>0xe0000000 - 0xffffffff</PARAGRAPH>
</CELL>
<CELL LEFT="150" WIDTH="112"><PARAGRAPH>Reserved</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH>Sun Microsystems administers the first group of numbers. The second group is reserved for specific customer applications; this range is intended primarily for debugging new programs. The third group is reserved for applications that generate program numbers dynamically. The final groups are reserved for future use and should not be used.</PARAGRAPH>
<PARAGRAPH>To register a protocol specification, write to:</PARAGRAPH>
<PARAGRAPH>RPC Administrator&lbreak;Sun Microsystems&lbreak;2550 Garcia Avenue&lbreak;Mountain View, CA 94043</PARAGRAPH>
<PARAGRAPH>Make sure to include a compilable <COMMAND>rpcgen</COMMAND> &ldquo;<FILENAME>.x</FILENAME>&rdquo; file (see <XREF IDREF="84027" TYPE="TITLE">Chapter&nbsp;4</XREF>) describing your protocol. In return, you will be given a unique program number.</PARAGRAPH>
<PARAGRAPH>You can find the RPC program numbers and protocol specifications of standard Sun RPC services in the include files in <FILENAME>/usr/include/rpcsvc</FILENAME>. These services, however, constitute only a small subset of those that have been registered.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="62513">The Port Mapper Programs</TITLE><PARAGRAPH>The port mappers (see <REFPAGE>portmap(1M)</REFPAGE> or <INDEXTARGET ID="3.RPCIntro6"><!-- POSTPROCESSDATA: 3.RPCIntro6|rpcbind(1M) --><REFPAGE>rpcbind(1M)</REFPAGE>) are servers that convert RPC program numbers into universal addresses (IP port numbers). Either <COMMAND>portmap</COMMAND> or <COMMAND>rpcbind</COMMAND> must be running in order to make RPC calls. If <COMMAND>rpcbind</COMMAND> is installed, it runs by default.</PARAGRAPH>
<PARAGRAPH>When an RPC server is started, it tells the port mapper the port number it is listening to and what RPC program numbers it is prepared to serve. When a client wants to make an RPC call to a given program number, it first checks the port mapper on the server machine to determine the port number where RPC packets should be sent.</PARAGRAPH>
</SECTION1>
</CHAPTER>
