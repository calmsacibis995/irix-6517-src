<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="1"><TITLE><XREFTARGET ID="41871">Network Programming Overview</TITLE><PARAGRAPH>The network programming facilities available with the IRIX operating system include the BSD sockets library, and the Sun Microsystems Remote Procedure Call (RPC) interface, and ISO-OSI's TLI. The programming interface you use depends on the requirements of the application you plan to develop.</PARAGRAPH>
<PARAGRAPH>This chapter introduces general concepts related to network programming. Topics include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>an overview of network programming under IRIX</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>a discussion of the Internet Protocol (IP) suite</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>comments and caveats on compiling BSD and RPC programs</PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="18323">Introduction to IRIX Network Programming</TITLE><PARAGRAPH>The BSD program-to-program communication facility provides the <ITALICS>socket</ITALICS> abstraction. The sockets interface enables low-level access to network addressing and data transfer, and it provides the flexibility to accommodate diverse application requirements. The sockets interface also provides greater speed, simpler programming, and a wider base of platforms than TLI.</PARAGRAPH>
<PARAGRAPH>RPC implements a remote procedure call model, in which a procedure executing on a remote machine can be treated as a local procedure call by the calling application. RPC enables synchronous execution of procedure calls on remote hosts, provides transparent access to network facilities, and uses eXternal Data Representation (XDR) to ensure portability. (See <XREF IDREF="11571" TYPE="TITLE">Chapter&nbsp;3, &ldquo;Introduction to RPC Programming,&rdquo;</XREF> for more information.)</PARAGRAPH>
<PARAGRAPH>The International Standards Organization (ISO) has developed a standard known as the Reference Model of Open Systems Interconnection (abbreviated as ISO-OSI, or the OSI Reference Model, or simply OSI). This model conceives of networking as being divided into seven layers. The interface between the fourth and fifth layers (that is, between the transport layer and the session layer) is known as the Transport Layer Interface (TLI); it provides a set of functions for applications to call to perform various network procedures.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Silicon Graphics does not encourage use of the TLI model; its inclusion is for compatibility with interfaces used by other vendors. </NOTE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="28595">The Internet Protocol Suite</TITLE><PARAGRAPH>A <ITALICS>protocol</ITALICS> is a set of rules, data formats, and conventions that regulate the transfer of data between participants in the communication.</PARAGRAPH>
<PARAGRAPH>The IRIX operating system implements the Internet Protocol (IP) suite. The IP suite is a collection of layered protocols developed by the U.S. Department of Defense Advanced Research Projects Agency (DARPA). The two most widely used IP protocols are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP).</PARAGRAPH>
<PARAGRAPH>TCP/IP provides a reliable means of transferring data between systems. TCP/IP messages are acknowledged by the receiver as they are received. UDP/IP provides a faster, low-overhead method of transferring data, but the receiver under UDP/IP does not provide the sender with any acknowledgment of messages received.</PARAGRAPH>
<PARAGRAPH>TCP creates a <ITALICS>virtual circuit</ITALICS>, a data path in which data blocks are guaranteed delivery to a target machine in the correct order. Messages are sent from the sender to the receiver until the receiver sends back a message saying that all the data blocks have been received in the correct order.</PARAGRAPH>
<PARAGRAPH>By using network applications built on top of the IP suite, you can interactively transfer files between computers, log in to remote computers, execute commands on remote computers, and send mail between users on different machines.</PARAGRAPH>
<PARAGRAPH><XREF IDREF="97285" TYPE="GRAPHIC">Figure&nbsp;1-1</XREF> illustrates the BSD model of network layering.</PARAGRAPH>
<!-- RASTERCONVERT: 1.Overview.cgm -->
<PARAGRAPH><FIGURE><GRAPHIC FILE="1.Overview-1.gif" POSITION="INLINE" SCALE="FALSE"><CAPTION LBL="1-1"><PREFIX>Figure 1-1 </PREFIX><XREFTARGET ID="97285">BSD Model of Network Layering</CAPTION>
</FIGURE>
</PARAGRAPH>
<PARAGRAPH>Scheduled Transfers (ST) is a new protocol implemented under a standard being developed in the ANSI T11. committee. ST occupies levels two through four of the OSI networking model. The flow control characteristics of the ST protocol provides the receiving device or host more control over the flow of data. As the name Scheduled Transfers implies, data transfers must be scheduled in advance. ST does not allow data to be sent until the resources to the support the transfer have been allocated and reserved on the receiver. </PARAGRAPH>
<PARAGRAPH>There a two basic modes of data transmission in ST are as follows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Data sent using the first mode requires resources to be acquired on a per transfer basis.</PARAGRAPH>
<PARAGRAPH>This mode requires a three-way handshake prior to the data transmit operation: Request-To-Send Message (RTS), Clear-To-Send Message (CTS), and Data Message (Data).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Data sent using the second mode can be written into memory at any time by the sender because it uses the concept of &ldquo;persistent memory&rdquo;, in which a region of memory on the receiving device or host has been acquired by the sender ahead of time.</PARAGRAPH>
<PARAGRAPH>Because the transmission resources are acquired in advance, this mode does not require a protocol handshake to occur before data is sent.</PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="24434">Compiling BSD and RPC Programs</TITLE><PARAGRAPH>Most BSD and RPC programs compile and link under IRIX without change. Some BSD and RPC programs, however, may require compiler options, linking with additional libraries, or even source code modification.</PARAGRAPH>
<PARAGRAPH>Since most BSD and Sun RPC programs were written before the ANSI C standard, you may need to compile with the <CMDLINEOPT>&ndash;cckr</CMDLINEOPT>&space;command-line option to obtain traditional C&nbsp;semantics. For example:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cc -cckr example.c -o example</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>If your program assumes that the <VARIABLE>char</VARIABLE> data type is signed, use the <CMDLINEOPT>&ndash;signed</CMDLINEOPT>&space;option (most BSD programs assume signed characters, but the IRIX C compiler assumes unsigned characters by default). For example:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cc -cckr -signed example.c -o example</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>The BSD library routines formerly in <FILENAME>/usr/lib/libbsd.a</FILENAME> (in releases before IRIX&nbsp;3.3) are now in the standard C library, which is linked in by default during compilation.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>In previous versions of IRIX, BSD header files were located in the <FILENAME>/usr/include/bsd</FILENAME> directory. In more recent versions, such header files are in <FILENAME>/usr/include</FILENAME> with the other header files. If your program contains <FUNCTION>#include</FUNCTION> statements to include header files of the form &lt;<FILENAME>bsd/</FILENAME><VARIABLE>filename</VARIABLE><FILENAME>.h</FILENAME>>, you should remove the <FILENAME>bsd/</FILENAME> part of such filenames from the <FUNCTION>#include</FUNCTION> statement.</NOTE>
<PARAGRAPH>Several network library routines have NIS equivalents that used to be in the <FILENAME>libsun</FILENAME> library. In current versions of IRIX, <FILENAME>libsun</FILENAME> has been incorporated into <FILENAME>libc</FILENAME>.</PARAGRAPH>
<PARAGRAPH>IRIX provides UNIX System V, BSD, and POSIX signal handling mechanisms. BSD signals are obtained with the <CMDLINEOPT>&ndash;D_BSD_SIGNALS </CMDLINEOPT>compiler directive.</PARAGRAPH>
</SECTION1>
</CHAPTER>
