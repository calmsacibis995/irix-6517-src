<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<APPENDIX LBL="B"><TITLE><XREFTARGET ID="94683">XDR Protocol Specification</TITLE><PARAGRAPH>This chapter describes the XDR protocol, a standard for describing and encoding data. The XDR standard assumes that bytes (or octets) are portable, where a byte is defined as 8 bits of data. It also assumes that hardware that encodes bytes onto various media will preserve the bytes' meanings across hardware boundaries. (For example, the Ethernet standard suggests that bytes be encoded in &ldquo;little-endian&rdquo; style, or least significant bit first.)<INDEXTARGET ID="B.XDRspec1"><!-- POSTPROCESSDATA: B.XDRspec1|XDR:specification --></PARAGRAPH>
<PARAGRAPH>Once XDR data is shared among machines, it shouldn't matter that the data produced on an IRIS is consumed by a VAX (or vice versa). Similarly, the choice of operating systems should have no influence on how the data is represented externally. For programming languages, data produced by a C program should be readable by a FORTRAN or Pascal program. </PARAGRAPH>
<PARAGRAPH>Topics in this chapter include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>basic block size</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>XDR data types</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>discussion of common questions about XDR</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>For information about the structure and syntax of XDR language, see <XREF IDREF="55141" TYPE="TITLE">Chapter&nbsp;6, &ldquo;XDR and RPC Language Structure.&rdquo;</XREF> For details about XDR programming, see <XREF IDREF="41930" TYPE="TITLE">Chapter&nbsp;7, &ldquo;XDR Programming Notes.&rdquo;</XREF>&space;</NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE>Basic Block Size</TITLE><PARAGRAPH>Representation of all items requires a multiple of four bytes (32 bits) of data. The bytes are numbered 0 through <INDEXTARGET ID="B.XDRspec2"><!-- POSTPROCESSDATA: B.XDRspec2|XDR:basic block sizeblock size, XDRsize, block --><VARIABLE>n</VARIABLE>&ndash;1. The bytes are read or written to some byte stream such that byte <VARIABLE>m</VARIABLE> always precedes byte <VARIABLE>m</VARIABLE>+1. If the number of bytes needed to contain the data are not a multiple of 4, those <VARIABLE>n</VARIABLE> bytes are followed by enough (0 to 3) residual zero bytes, <VARIABLE>r</VARIABLE>, to make the total byte count a multiple of 4.</PARAGRAPH>
<PARAGRAPH>Include the familiar graphic box notation for illustration and comparison.    In most illustrations, each box (delimited by a plus sign at each of the four corners, and vertical bars and dashes) depicts a byte. Ellipses (...) between boxes indicate zero or more additional bytes, where required. </PARAGRAPH>
<SECTION2><SECTION3 LBL="" HELPID = ""><TITLE>Block</TITLE><CODE>
+--------+--------+...+--------+--------+...+--------+
| byte 0 | byte 1 |...|byte n-1|    0   |...|    0   |
+--------+--------+...+--------+--------+...+--------+
|&lt;-----------n bytes---------->|&lt;------r bytes------>|
|&lt;-----------n+r (where (n+r) mod 4 = 0)>----------->|
</CODE>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>XDR Data Types</TITLE><PARAGRAPH>This section describes the data types defined in the XDR standard, showing how each data type is declared in XDR language, and including a graphic representation of how each type is encoded.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Integers</TITLE><PARAGRAPH>An XDR signed integer is a 32-bit datum that encodes an integer in the range [&ndash;2147483648, 2147483647]. The integer is represented in two's complement notation. The most and least significant bytes are 0 and 3, respectively. The data description of integers is <INDEXTARGET ID="B.XDRspec3"><!-- POSTPROCESSDATA: B.XDRspec3|XDR:integerinteger, XDR --><VARIABLE>integer</VARIABLE>. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Integer</TITLE><CODE>
(MSB)                   (LSB)
+-------+-------+-------+-------+
|byte 0 |byte 1 |byte 2 |byte 3 |
+-------+-------+-------+-------+
&lt;------------32 bits------------>
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Unsigned Integers</TITLE><PARAGRAPH>An XDR unsigned integer is a 32-bit datum that encodes a non-negative integer in the range [0,4294967295]. It is represented by an unsigned binary number whose most and least significant bytes are 0 and 3, respectively. The data description of unsigned integers is <INDEXTARGET ID="B.XDRspec4"><!-- POSTPROCESSDATA: B.XDRspec4|unsigned integerinteger, unsigned --><VARIABLE>unsigned</VARIABLE>.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Unsigned Integer</TITLE><CODE>
(MSB)                   (LSB)
+-------+-------+-------+-------+
|byte 0 |byte 1 |byte 2 |byte 3 |
+-------+-------+-------+-------+
&lt;------------32 bits------------>
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Enumerations</TITLE><PARAGRAPH>Enumerations have the same representation as integers and are handy for describing subsets of integers. The data description of enumerated data is:<INDEXTARGET ID="B.XDRspec5"><!-- POSTPROCESSDATA: B.XDRspec5|XDR:enumerationsenumerations, XDR --></PARAGRAPH>
<EXAMPLE>
enum { name-identifier = constant, ... } identifier;
</EXAMPLE>
<PARAGRAPH>The three colors (red, yellow, and blue) could be described by an enumerated type, as follows:</PARAGRAPH>
<EXAMPLE>
enum { RED = 2, YELLOW = 3, BLUE = 5 } colors;
</EXAMPLE>
<PARAGRAPH>It is an error to encode enumerations that have not been given assignments in the <VARIABLE>enum</VARIABLE> declaration.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Booleans</TITLE><PARAGRAPH>Booleans are important enough and occur frequently enough to warrant their own explicit type in the standard. <INDEXTARGET ID="B.XDRspec6"><!-- POSTPROCESSDATA: B.XDRspec6|XDR:booleansboolean, XDR --></PARAGRAPH>
<PARAGRAPH>Booleans are declared like this: </PARAGRAPH>
<EXAMPLE>
bool identifier; 
</EXAMPLE>
<PARAGRAPH>This is equivalent to: </PARAGRAPH>
<EXAMPLE>
enum { FALSE = 0, TRUE = 1 } identifier; 
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Hyper Integers and Hyper Unsigned</TITLE><PARAGRAPH>The XDR standard also defines 64-bit (8-byte) numbers called hyper integers and unsigned hyper integers. Their representations are the obvious extensions of the integer and unsigned integer defined in the preceding sections in this chapter. They are represented in two's complement notation. The most and least significant bytes are 0 and 7, respectively. <INDEXTARGET ID="B.XDRspec7"><!-- POSTPROCESSDATA: B.XDRspec7|XDR:hyper integerXDR:hyper unsignedhyper integer, unsigned --></PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Hyper Integer or Unsigned Hyper Integer</TITLE><CODE>
(MSB)                                            (LSB)
+------+------+------+------+------+------+------+------+
|byte 0|byte 1|byte 2|byte 3|byte 4|byte 5|byte 6|byte 7|
+------+------+------+------+------+------+------+------+
&lt;-------------------------64 bits----------------------->
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Floating Points</TITLE><PARAGRAPH>The XDR standard defines the floating-point data type <INDEXTARGET ID="B.XDRspec8"><!-- POSTPROCESSDATA: B.XDRspec8|XDR:floating pointfloating point, XDR --><VARIABLE>float</VARIABLE> (32 bits or 4 bytes). The encoding used is the IEEE standard for normalized single&ndash;precision floating-point numbers. (See the ANSI/IEEE 754-1985 floating-point standard.)</PARAGRAPH>
<PARAGRAPH>The following fields describe the single-precision floating-point number:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>S</HANGITEM>
<HANGBODY><PARAGRAPH>The sign of the number. Values 0 and 1 represent positive and negative, respectively. One bit.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>E</HANGITEM>
<HANGBODY><PARAGRAPH>The exponent of the number, base 2. Eight bits are devoted to this field. The exponent is biased by 127.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>F</HANGITEM>
<HANGBODY><PARAGRAPH>The fractional part of the number's mantissa, base 2. Twenty-three bits are devoted to this field.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>Therefore, the floating-point number is described by:</PARAGRAPH>
<EXAMPLE>
(-1)S * 2{E - Bias} * 1.F
</EXAMPLE>
<PARAGRAPH>It is declared like this:</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Single-Precision Floating-Point</TITLE><CODE>
+-------+-------+-------+-------+
|byte 0 |byte 1 |byte 2 |byte 3 |
S|   E   |           F          |
+-------+-------+-------+-------+
1|&lt;- 8 ->|&lt;-------23 bits------>|
&lt;------------32 bits------------>
</CODE>
<PARAGRAPH>Just as the most and least significant bytes of a number are 0 and 3, the most and least significant bits of a single-precision, floating-point number are 0 and 31. The beginning bit (and most significant bit) offsets of S, E, and F are 0, 1, and 9, respectively. Note that these numbers refer to the mathematical positions of the bits, and not to their actual physical locations (which vary from medium to medium).</PARAGRAPH>
<PARAGRAPH>The IEEE specifications should be consulted regarding the encoding for signed zero, signed infinity (overflow), and denormalized numbers (underflow). According to IEEE specifications, the &ldquo;NaN&rdquo; (not a number) is system dependent and should not be used externally. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Double-Precision Floating Points</TITLE><PARAGRAPH>The XDR standard defines the encoding for the double-precision floating&ndash;point data type <INDEXTARGET ID="B.XDRspec9"><!-- POSTPROCESSDATA: B.XDRspec9|XDR:double precisiondouble precision, XDR --><VARIABLE>double</VARIABLE> (64 bits or 8 bytes). The encoding used is the ANSI/IEEE 754/1985 standard for normalized double-precision, floating&ndash;point numbers. </PARAGRAPH>
<PARAGRAPH>The following fields describe the double-precision floating-point number:</PARAGRAPH>
<HANGLIST><HANGPAIR><HANGITEM>S</HANGITEM>
<HANGBODY><PARAGRAPH>The sign of the number. Values 0 and 1 represent positive and negative, respectively. One bit.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>E</HANGITEM>
<HANGBODY><PARAGRAPH>The exponent of the number, base 2. Eleven bits are devoted to this field. The exponent is biased by 1023.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
<HANGPAIR><HANGITEM>F</HANGITEM>
<HANGBODY><PARAGRAPH>The fractional part of the number's mantissa, base 2. Fifty-two bits are devoted to this field.</PARAGRAPH>
</HANGBODY>
</HANGPAIR>
</HANGLIST>
<PARAGRAPH>It is declared as follows:</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Double-Precision Floating-Point</TITLE><CODE>
+------+------+------+------+------+------+------+------+
|byte 0|byte 1|byte 2|byte 3|byte 4|byte 5|byte 6|byte 7|
S|    E   |                    F                        |
+------+------+------+------+------+------+------+------+
1|&lt;--11-->|&lt;-----------------52 bits------------------->|
&lt;-----------------------64 bits------------------------->
</CODE>
<PARAGRAPH>Just as the most and least significant bytes of a number are 0 and 3, the most and least significant bits of a double-precision, floating-point number are 0 and 63. The beginning bit (and most significant bit) offsets of S, E, and F are 0, 1, and 12, respectively. Note that these numbers refer to the mathematical positions of the bits, and not to their actual physical locations (which vary from medium to medium).</PARAGRAPH>
<PARAGRAPH>The IEEE specifications should be consulted concerning the encoding for signed zero, signed infinity (overflow), and denormalized numbers (underflow). According to IEEE specifications, the &ldquo;NaN&rdquo; (not a number) is system dependent and should not be used externally. </PARAGRAPH>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Fixed-Length Opaque Data</TITLE><PARAGRAPH>At times, fixed-sized, uninterpreted data needs to be passed among machines. This data is called <INDEXTARGET ID="B.XDRspec10"><!-- POSTPROCESSDATA: B.XDRspec10|XDR:opaque dataopaque data, XDR --><VARIABLE>opaque</VARIABLE> and is declared like this:</PARAGRAPH>
<EXAMPLE>
opaque identifier[n];
</EXAMPLE>
<PARAGRAPH>Constant <VARIABLE>n</VARIABLE> is the (static) number of bytes necessary to contain the opaque data. If <VARIABLE>n</VARIABLE> is not a multiple of 4, the <VARIABLE>n</VARIABLE> bytes are followed by enough (0 to 3) residual zero bytes, <VARIABLE>r</VARIABLE>, to make the total byte count of the <VARIABLE>opaque</VARIABLE> object a multiple of 4.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Fixed-Length Opaque</TITLE><CODE>
0        1         ...
+--------+--------+...+--------+--------+...+--------+
| byte 0 | byte 1 |...|byte n-1|    0   |...|    0   |
+--------+--------+...+--------+--------+...+--------+
|&lt;-----------n bytes---------->|&lt;------r bytes------>|
|&lt;-----------n+r (where (n+r) mod 4 = 0)------------>|
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Variable-Length Opaque Data</TITLE><PARAGRAPH>The XDR standard also provides for variable-length (counted) opaque data, defined as a sequence of <INDEXTARGET ID="B.XDRspec11"><!-- POSTPROCESSDATA: B.XDRspec11|variable-length opaque dataopaque data, variable length --><VARIABLE>n</VARIABLE> (numbered 0 through <VARIABLE>n</VARIABLE>&ndash;1) arbitrary bytes to be the number <VARIABLE>n</VARIABLE> encoded as an <VARIABLE>unsigned integer</VARIABLE> and followed by the <VARIABLE>n</VARIABLE> bytes of the sequence.</PARAGRAPH>
<PARAGRAPH>Byte <VARIABLE>m</VARIABLE> of the sequence always precedes byte <VARIABLE>m</VARIABLE>+1 of the sequence, and byte 0 of the sequence always follows the sequence's length (count). Enough residual zero bytes (0 to 3), <VARIABLE>r</VARIABLE>, make the total byte count a multiple of 4. </PARAGRAPH>
<PARAGRAPH>Variable-length opaque data is declared like this: </PARAGRAPH>
<EXAMPLE>
opaque identifier&lt;m>; 
</EXAMPLE>
<PARAGRAPH>or </PARAGRAPH>
<EXAMPLE>
opaque identifier&lt;>; 
</EXAMPLE>
<PARAGRAPH>The constant <VARIABLE>m</VARIABLE> denotes an upper bound of the number of bytes the sequence may contain. If <VARIABLE>m</VARIABLE> is not specified, as in the second declaration, it is assumed to be the maximum length, (232) &ndash;1.</PARAGRAPH>
<PARAGRAPH>The constant <VARIABLE>m</VARIABLE> would normally be found in a protocol specification. For example, a filing protocol may state that the maximum data transfer size is 8192 bytes, as follows: </PARAGRAPH>
<EXAMPLE>
opaque filedata&lt;8192>;
</EXAMPLE>
<PARAGRAPH>It is an error to encode a length greater than the maximum described in the specification. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Variable-Length Opaque</TITLE><CODE>
0     1     2     3     4     5      ..
+-----+-----+-----+-----+-----+-----+..+-----+-----+..+-----+
|        length n       |byte0|byte1|..| n-1 |  0  |..|  0  |
+-----+-----+-----+-----+-----+-----+..+-----+-----+..+-----+
|&lt;-------4 bytes------->|&lt;------n bytes----->|&lt;---r bytes-->|
&space;                       |&lt;---n+r (where (n+r) mod 4 = 0)--->|
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Strings</TITLE><PARAGRAPH>The XDR standard defines a string of <INDEXTARGET ID="B.XDRspec12"><!-- POSTPROCESSDATA: B.XDRspec12|strings --><VARIABLE>n</VARIABLE> (numbered 0 through <VARIABLE>n</VARIABLE>&ndash;1) ASCII bytes to be the number <VARIABLE>n</VARIABLE> encoded as an <VARIABLE>unsigned integer</VARIABLE>, and followed by the <VARIABLE>n</VARIABLE> bytes of the string. Byte <VARIABLE>m</VARIABLE> of the string always precedes byte <VARIABLE>m</VARIABLE>+1 of the string, and byte 0 of the string always follows the string's length. If <VARIABLE>n</VARIABLE> is not a multiple of 4, the <VARIABLE>n</VARIABLE> bytes are followed by enough (0 to 3) residual zero bytes, <VARIABLE>r</VARIABLE>, to make the total byte count a multiple of 4. </PARAGRAPH>
<PARAGRAPH>Counted byte strings are declared as follows: </PARAGRAPH>
<EXAMPLE>
string object&lt;m>; 
</EXAMPLE>
<PARAGRAPH>or </PARAGRAPH>
<EXAMPLE>
string object&lt;>; 
</EXAMPLE>
<PARAGRAPH>The constant <VARIABLE>m</VARIABLE> denotes an upper bound of the number of bytes that a string may contain. If <VARIABLE>m</VARIABLE> is not specified, as in the second declaration, it is assumed to be the maximum length, (232) &ndash;1.</PARAGRAPH>
<PARAGRAPH>The constant <VARIABLE>m</VARIABLE> would normally be found in a protocol specification. For example, a filing protocol may state that a filename can be no longer than 255 bytes, as follows: </PARAGRAPH>
<EXAMPLE>
string filename&lt;255>;
</EXAMPLE>
<PARAGRAPH>It is an error to encode a length greater than the maximum described in the specification.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>String</TITLE><CODE>
0     1     2     3     4     5      ..
+-----+-----+-----+-----+-----+-----+..+-----+-----+..+-----+
|        length n       |byte0|byte1|..| n-1 |  0  |..|  0  |
+-----+-----+-----+-----+-----+-----+..+-----+-----+..+-----+
|&lt;-------4 bytes------->|&lt;-----n bytes------>|&lt;---r bytes-->|
&space;                       |&lt;---n+r (where (n+r) mod 4 = 0)--->|
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Fixed-Length Arrays</TITLE><PARAGRAPH>Declarations for fixed-length arrays of homogeneous elements are in this form:<INDEXTARGET ID="B.XDRspec13"><!-- POSTPROCESSDATA: B.XDRspec13|fixed-length arrayarray, fixed length --></PARAGRAPH>
<EXAMPLE>
type-name identifier[n];
</EXAMPLE>
<PARAGRAPH>Fixed-length arrays of elements numbered 0 through <VARIABLE>n</VARIABLE>&ndash;1 are encoded by individually encoding the elements of the array in their natural order, 0 through <VARIABLE>n</VARIABLE>&ndash;1. Each element's size is a multiple of 4 bytes. Although all elements are of the same type, the elements may have different sizes. For example, in a fixed-length array of strings, all elements are type <VARIABLE>string</VARIABLE>, yet each element will vary in length.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Fixed-Length Array </TITLE><CODE>

+---+---+---+---+---+---+---+---+...+---+---+---+---+
|   element 0   |   element 1   |...|  element n-1  |
+---+---+---+---+---+---+---+---+...+---+---+---+---+
|&lt;--------------------n elements------------------->|
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Variable-Length Arrays</TITLE><PARAGRAPH>Counted arrays provide the ability to encode variable-length arrays of homogeneous elements. The array is encoded as the element count <INDEXTARGET ID="B.XDRspec14"><!-- POSTPROCESSDATA: B.XDRspec14|variable-length arrayarray, variable length --><VARIABLE>n</VARIABLE> (an unsigned integer) followed by the encoding of each of the array's elements, starting with element 0 and progressing through element <VARIABLE>n</VARIABLE>&ndash;1. </PARAGRAPH>
<PARAGRAPH>Declaration for variable-length arrays follow this form: </PARAGRAPH>
<EXAMPLE>
type-name identifier&lt;m>; 
</EXAMPLE>
<PARAGRAPH>or </PARAGRAPH>
<EXAMPLE>
type-name identifier&lt;>; 
</EXAMPLE>
<PARAGRAPH>The constant <VARIABLE>m</VARIABLE> specifies the maximum acceptable element count of an array; if <VARIABLE>m</VARIABLE> is not specified, as in the second declaration, it is assumed to be (232) &ndash;1.</PARAGRAPH>
<PARAGRAPH>It is an error to encode a value of <VARIABLE>n</VARIABLE> that is greater than the maximum described in the specification.</PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Counted Array </TITLE><CODE>

0  1  2  3 
+--+--+--+--+--+--+--+--+--+--+--+--+...+--+--+--+--+ 
|     n     | element 0 | element 1 |...|element n-1| 
+--+--+--+--+--+--+--+--+--+--+--+--+...+--+--+--+--+ 
|&lt;-4 bytes->|&lt;--------------n elements------------->| 
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Structures</TITLE><PARAGRAPH>The data description for structures in the XDR standard is very similar to data description in standard C: <INDEXTARGET ID="B.XDRspec15"><!-- POSTPROCESSDATA: B.XDRspec15|XDR:structuresstructures, XDR --></PARAGRAPH>
<CODE>
struct {
&space;   component-declaration-A;
&space;   component-declaration-B;
&space;   ...  
} identifier; 
</CODE>
<PARAGRAPH>The components of the structure are encoded in the order of their declaration in the structure. Each component's size is a multiple of 4 bytes, although the components may be different sizes. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Discriminated Unions</TITLE><PARAGRAPH>A discriminated union is a type composed of a discriminant followed by a type selected from a set of prearranged types according to the value of the discriminant. The type of discriminant is either <INDEXTARGET ID="B.XDRspec16"><!-- POSTPROCESSDATA: B.XDRspec16|XDR:discriminated unionsdiscriminated unions, XDR --><VARIABLE>int</VARIABLE>, <VARIABLE>unsigned int</VARIABLE>, or an enumerated type, such as <VARIABLE>bool</VARIABLE>. The component types are called &ldquo;arms&rdquo; of the union, and are preceded by the value of the discriminant, which implies their encoding. </PARAGRAPH>
<PARAGRAPH>Discriminated unions are declared like this:</PARAGRAPH>
<CODE>
union switch (discriminant-declaration) {
&space;   case discriminant-value-A:
&space;   arm-declaration-A;
&space;   case discriminant-value-B:
&space;   arm-declaration-B;
&space;   ...
&space;   default: default-declaration; 
} identifier; 
</CODE>
<PARAGRAPH>Each <FUNCTION>case</FUNCTION> keyword is followed by a legal value of the discriminant. The default arm is optional; if not specified, a valid encoding of the union cannot take on unspecified discriminant values. The size of the implied arm is always a multiple of 4 bytes. The discriminated union is encoded as its discriminant followed by the encoding of the implied arm. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Discriminated Union </TITLE><CODE>

0   1   2   3 
+---+---+---+---+---+---+---+---+ 
|  discriminant |  implied arm  | 
+---+---+---+---+---+---+---+---+ 
|&lt;---4 bytes--->| 
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Voids</TITLE><PARAGRAPH>An XDR void is a 0-byte quantity. Voids are useful for describing operations that take no data as input or no data as output, and in unions, where some arms may contain data and others do not. </PARAGRAPH>
<PARAGRAPH>The declaration is:</PARAGRAPH>
<CODE>
void;
</CODE>
<SECTION3 LBL="" HELPID = ""><TITLE>Void</TITLE><CODE>
&space; ++
&space; ||
&space; ++ 
-->&lt;-- 0 bytes
</CODE>
</SECTION3>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Constants</TITLE><PARAGRAPH>The data declaration for a constant follows this form: <INDEXTARGET ID="B.XDRspec17"><!-- POSTPROCESSDATA: B.XDRspec17|constants --></PARAGRAPH>
<EXAMPLE>
const name-identifier = n; 
</EXAMPLE>
<PARAGRAPH><VARIABLE>const</VARIABLE> defines a symbolic name for a constant; it does not declare any data. The symbolic constant may be used anywhere a regular constant can be used. For example, the following defines the symbolic constant DOZEN, equal to 12: </PARAGRAPH>
<EXAMPLE>
const DOZEN = 12; 
</EXAMPLE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Typedefs</TITLE><PARAGRAPH>A <INDEXTARGET ID="B.XDRspec18"><!-- POSTPROCESSDATA: B.XDRspec18|typedefs --><FUNCTION>typedef</FUNCTION> does not declare data either, but it serves to define new identifiers for declaring data. The syntax is: </PARAGRAPH>
<EXAMPLE>
typedef declaration; 
</EXAMPLE>
<PARAGRAPH>The new type name is actually the variable name in the declaration part of the <FUNCTION>typedef</FUNCTION>. For example, the following defines a new type called <VARIABLE>eggbox</VARIABLE> using an existing type called <VARIABLE>egg</VARIABLE>:</PARAGRAPH>
<EXAMPLE>
typedef egg eggbox[DOZEN]; 
</EXAMPLE>
<PARAGRAPH>Variables declared using the new type name have the same type as the new type name would have in the <FUNCTION>typedef</FUNCTION>, if it was considered a variable. For example, the following two declarations are equivalent to declaring the variable <VARIABLE>fresheggs</VARIABLE>:</PARAGRAPH>
<CODE>
eggbox    fresheggs; 
egg    fresheggs[DOZEN]; 
</CODE>
<PARAGRAPH>When a <FUNCTION>typedef</FUNCTION> involves a <VARIABLE>struct</VARIABLE>, <VARIABLE>enum</VARIABLE>, or <VARIABLE>union</VARIABLE> definition, there is another (preferred) syntax that may be used to define the same type.</PARAGRAPH>
<PARAGRAPH>In general, a <FUNCTION>typedef</FUNCTION> of this form can be converted to the alternative form by removing the <FUNCTION>typedef</FUNCTION> part and placing the identifier after the <VARIABLE>struct</VARIABLE>, <VARIABLE>union</VARIABLE>, or <VARIABLE>enum</VARIABLE> keyword, instead of at the end:</PARAGRAPH>
<EXAMPLE>
typedef &lt;&lt;struct, union, or enum definition>> identifier; 
</EXAMPLE>
<PARAGRAPH>For example, there are two ways to define the type <VARIABLE>bool</VARIABLE>:</PARAGRAPH>
<CODE>
typedef enum {    /* using typedef */
&space;   FALSE = 0,
&space;   TRUE = 1 
} bool; 

enum bool {       /* preferred alternative */
&space;   FALSE = 0,
&space;   TRUE = 1 
}; 
</CODE>
<PARAGRAPH>The reason this syntax is preferred is that you do not have to wait until the end of a declaration to figure out the name of the new type. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Optional Data</TITLE><PARAGRAPH>Optional data is a kind of <INDEXTARGET ID="B.XDRspec19"><!-- POSTPROCESSDATA: B.XDRspec19|optional datadata, optional --><VARIABLE>union</VARIABLE> that occurs so frequently that it is given a special declaration syntax of its own: </PARAGRAPH>
<EXAMPLE>
type-name *identifier; 
</EXAMPLE>
<PARAGRAPH>This syntax is equivalent to the following <VARIABLE>union</VARIABLE> declaration:</PARAGRAPH>
<CODE>
union switch (bool opted) {
&space;   case TRUE:
&space;       type-name element;
&space;   case FALSE:
&space;       void; 
} identifier; 
</CODE>
<PARAGRAPH>This syntax is also equivalent to the following variable-length array declaration, since the boolean <VARIABLE>opted</VARIABLE> can be interpreted as the length of the array: </PARAGRAPH>
<EXAMPLE>
type-name identifier&lt;1>; 
</EXAMPLE>
<PARAGRAPH>Optional data is useful for describing recursive data structures, such as linked lists and trees. The following example defines a type <VARIABLE>stringlist</VARIABLE>, which encodes lists of arbitrary length strings:</PARAGRAPH>
<CODE>
struct *stringlist {
&space;   string item&lt;>;
&space;   stringlist next; 
}; 
</CODE>
<PARAGRAPH>It could be declared equivalently as a <VARIABLE>union</VARIABLE>: </PARAGRAPH>
<CODE>
union stringlist switch (bool opted) {
&space;   case TRUE:
&space;       struct {
&space;           string item&lt;>;
&space;           stringlist next;
&space;       } element;
&space;   case FALSE:
&space;       void; 
}; 
</CODE>
<PARAGRAPH>Or, it could be declared as a variable-length array: </PARAGRAPH>
<CODE>
struct stringlist&lt;1> {
&space;   string item&lt;>;
&space;   stringlist next; 
}; 
</CODE>
<PARAGRAPH>Both declarations obscure the intention of the <VARIABLE>stringlist</VARIABLE> type, however, so the optional-data declaration is preferred over both of them. </PARAGRAPH>
<PARAGRAPH>The optional-data type is also closely correlated with how recursive data structures are represented in high-level languages, such as Pascal and C. In these cases, recursive data structures use pointers. In fact, the syntax is the same as that of the C language for pointers. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Areas for Future Enhancement</TITLE><PARAGRAPH>The XDR standard lacks representations for bit fields and bitmaps, since the standard is based on bytes. Also missing are packed (or binary-coded) decimals.<INDEXTARGET ID="B.XDRspec20"><!-- POSTPROCESSDATA: B.XDRspec20|XDR:future directions --></PARAGRAPH>
<PARAGRAPH>It is not the intent of the XDR standard to describe every kind of data that people have ever sent (or will ever want to send) from machine to machine. It only describes the most commonly used data types of high-level languages, such as Pascal and C so applications written in these languages will be able to communicate easily over some medium.</PARAGRAPH>
<PARAGRAPH>One could imagine extensions to XDR that would let it describe almost any existing protocol, such as TCP. The minimum requirement for these extensions is support for different block sizes and byte orders. The XDR discussed here could then be considered the 4-byte, big-endian member of a larger XDR family. </PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Common Questions about XDR</TITLE><PARAGRAPH>This section attempts to answer questions you may have about XDR.</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Why have a language for describing data?</PARAGRAPH>
<PARAGRAPH>There are many advantages to using a data description language, such as XDR, over using diagrams. Languages are more formal than diagrams and lead to less ambiguous descriptions of data. Languages are also easier to understand and allow one to think of other issues instead of the low-level details of bit encoding. Also, there is a close analogy between the types of XDR and a high-level language such as C or Pascal, which makes the implementation of XDR encoding and decoding modules an easier task. Finally, the language specification itself is an ASCII string that can be passed from machine to machine to perform on-the-fly data interpretation. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Why is there only one byte order for an XDR unit?</PARAGRAPH>
<PARAGRAPH>Supporting two byte orderings requires a higher level protocol for determining in which byte order the data is encoded. Since XDR is not a protocol, it cannot support two byte orderings. The advantage, however, is that data in XDR format can be written to a magnetic tape, for example, and any machine will be able to interpret it, since no higher level protocol is necessary for determining the byte order. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Why does XDR use big-endian byte order?</PARAGRAPH>
<PARAGRAPH>Yes, it is unfair that XDR uses big-endian byte order, but having only one byte order means you have to be unfair to somebody. Many architectures, such as the MIPS R2000/3000, Motorola 68000, and IBM 370, support the big-endian byte order. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Why is the XDR unit four bytes wide?</PARAGRAPH>
<PARAGRAPH>There is a trade-off in choosing the XDR unit size. Choosing a small size such as two makes the encoded data small but causes alignment problems for machines that aren't aligned on these boundaries. A large size such as eight means the data will be aligned on virtually every machine but causes the encoded data to grow too big. Four was chosen as a compromise. The four-byte data unit is big enough to support most architectures efficiently, except for rare machines such as the 8-byte-aligned Cray. Four is also small enough to keep the encoded data restricted to a reasonable size. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Why must variable-length data be padded with zeros?</PARAGRAPH>
<PARAGRAPH>Forcing the padded bytes to be zero ensures that the same data is encoded into the same thing on all machines, enabling the encoded data to be meaningfully compared or checksummed.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>Why is there no explicit data typing?</PARAGRAPH>
<PARAGRAPH>Data typing has a relatively high cost for what small advantages it may have. One cost is the expansion of data due to the inserted type fields. Another is the added cost of interpreting these type fields and acting accordingly. Most protocols already know what type they expect, so data typing supplies only redundant information. However, one can still get the benefits of data typing using XDR. One way is to encode two things: first a string, which is the XDR data description of the encoded data, and then the encoded data itself. Another way is to assign a value to all the types in XDR, and then define a universal type that takes this value as its discriminant and for each value describes the corresponding data type. </PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION1>
</APPENDIX>
