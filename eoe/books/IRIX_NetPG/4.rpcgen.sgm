<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<CHAPTER LBL="4"><TITLE><XREFTARGET ID="84027">Programming with rpcgen</TITLE><PARAGRAPH>This chapter describes the <COMMAND>rpcgen</COMMAND> protocol compiler, which helps automate the process of writing RPC applications. When you use <COMMAND>rpcgen</COMMAND>, the compiler does most of the dirty work; you need only debug the main features of the application instead of spending time debugging network interface code.</PARAGRAPH>
<PARAGRAPH>Topics in this chapter include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>converting local procedures into remote procedures</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>generating XDR routines</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>the C preprocessor</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>rpcgen</COMMAND> programming notes</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>For a general introduction to RPC, see <XREF IDREF="11571" TYPE="TITLE">Chapter&nbsp;3, &ldquo;Introduction to RPC Programming.&rdquo;</XREF> For details about programming RPC without <COMMAND>rpcgen</COMMAND>, see <XREF IDREF="49542" TYPE="TITLE">Chapter&nbsp;5, &ldquo;RPC Programming Guide.&rdquo;</XREF></NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE>Introduction to the rpcgen Compiler</TITLE><PARAGRAPH>The <COMMAND>rpcgen</COMMAND> protocol compiler accepts remote program interface definitions written in RPC language and produces C language output for RPC programs. (See <XREF IDREF="55141" TYPE="TITLE">Chapter&nbsp;6, &ldquo;XDR and RPC Language Structure,&rdquo;</XREF> for details about writing program interface definitions using RPC language.) This C output includes: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>skeleton versions of the client routines</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>a server skeleton</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>XDR filter routines for parameters and results</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>a header file that contains common definitions </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>ANSI C prototyped stub routines (optional)</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The client skeletons interface with the RPC library and &ldquo;hide&rdquo; the network from its caller. Similarly, the server skeleton hides the network from server procedures that are to be invoked by remote clients.</PARAGRAPH>
<PARAGRAPH>The programmer writes server procedures, using any language that observes C language calling conventions, and links them with the server skeleton generated by <COMMAND>rpcgen</COMMAND> to produce an executable server program. To use a remote program, the programmer writes an ordinary main program that makes local procedure calls to the client skeletons produced by <COMMAND>rpcgen</COMMAND>. </PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>At present, the main program must be written in C or C++. </NOTE>
<PARAGRAPH>Linking the main program with <COMMAND>rpcgen</COMMAND>'s skeletons creates an executable program. Options to <COMMAND>rpcgen</COMMAND> let you suppress stub generation, specify the transport to be used by the server stub, pass flags to cpp, or choose a different preprocessor. See <REFPAGE>rpcgen(1)</REFPAGE> for details.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="48965">Changing Local Procedures to Remote Procedures</TITLE><PARAGRAPH>Assume you have an application that runs on a single machine and you want to convert it to run over a network. The following code sample demonstrates the conversion for a program that prints a message to the console: <INDEXTARGET ID="4.rpcgen1"><!-- POSTPROCESSDATA: 4.rpcgen1|rpcgen:local to remote procedure --></PARAGRAPH>
<CODE>
/*
&space;* printmsg.c: print a message on the console
&space;*/ 
#include &lt;stdio.h> 

main(int argc, char **argv)
{
&space;   char *message;

&space;   if (argc &lt; 2) {
&space;       fprintf(stderr, "usage: %s &lt;message>\n", argv[0]);
&space;       exit(1);
&space;   }
&space;   message = argv[1];

&space;   if (!printmessage(message)) {
&space;       fprintf(stderr, "%s: couldn't print your message\n", 
&space;               argv[0]);
&space;       exit(1);
&space;   } 
&space;   printf("Message Delivered!\n");
&space;   exit(0); 
}

/*
&space;* Print a message to the console. Return a boolean
&space;* indicating whether the message was actually printed.
&space;*/
printmessage(char *msg)
{
&space;   FILE *f;

&space;   f = fopen("/dev/console", "w");
&space;   if (f == NULL) {
&space;       return(0);
&space;   }
&space;   fprintf(f, "%s\n", msg);
&space;   fclose(f);
&space;   return(1); 
}
</CODE>
<PARAGRAPH>And then, of course:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>cc printmsg.c -o printmsg</USERINPUT>
% <USERINPUT>printmsg "Hello, there"</USERINPUT>
Message Delivered!
%
</EXAMPLE>
<PARAGRAPH>If <FUNCTION>printmessage()</FUNCTION> were turned into a remote procedure, it could be called from anywhere in the network. It would be nice to be able to simply insert a keyword such as remote in front of a procedure to turn it into a remote procedure. Unfortunately, you have to live within the constraints of the C language, since it existed long before RPC did. But even without language support, it's not very difficult to make a procedure remote.</PARAGRAPH>
<PARAGRAPH>In general, it's necessary to figure out what the types are for all procedure inputs and outputs. In this case, there is a procedure, <FUNCTION>printmessage()</FUNCTION>, that takes a string as input and returns an integer as output. Knowing this, you can write a protocol specification in RPC language that describes the remote version of <FUNCTION>printmessage()</FUNCTION>:</PARAGRAPH>
<CODE>
/*
&space;* msg.x: Remote message printing protocol
&space;*/ 
program MESSAGEPROG {
&space;   version MESSAGEVERS {
&space;       int PRINTMESSAGE(string) = 1;
&space;   } = 1;
} = 99;
</CODE>
<PARAGRAPH>Remote procedures are part of remote programs, so an entire remote program was declared here that contains the single procedure PRINTMESSAGE. This procedure was declared to be in version 1 of the remote program. No null procedure (procedure 0) is necessary, because <COMMAND>rpcgen</COMMAND> generates it automatically.</PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>Notice that everything is declared with all capital letters. This is not required, but it is a good convention to follow. </NOTE>
<PARAGRAPH>Notice that the argument type is string and not char *. This is because char * is ambiguous in C. Programmers usually intend it to mean a null-terminated string of characters, but it could also represent a pointer to a single character or a pointer to an array of characters. In RPC language, a null-terminated string is unambiguously called a string.</PARAGRAPH>
<PARAGRAPH>Next, define the remote procedure itself. The following example implements the PRINTMESSAGE procedure declared above:</PARAGRAPH>
<CODE>
/*
&space;*  msg_proc.c: implementation of the remote
&space;*  procedure "printmessage"
&space;*/
#include &lt;stdio.h>
#include &lt;sys/types.h>
#include &lt;sys/socket.h>
#include &lt;rpc/rpc.h>  /* Required. */
#define _RPCGEN_SVC   /*Selects server function prototypes.*/
#include "msg.h"      /* This will be generated by rpcgen. */

/*  Remote version of "printmessage" */
int *printmessage_1(msg, UNUSED)
/* UNUSED specified for prototype agreement */
char **msg;
struct svc_req *UNUSED;
{
&space;   static int result;  /* must be static! */

&space;   FILE *f;

&space;   f = fopen("/dev/console", "w");
&space;   if (f == NULL) {            /* failure! */
&space;       result = 0;
&space;       return (&amp;result);
&space;   }

&space;   fprintf(f, "%s\n", *msg);   /* success! */
&space;   fclose(f);
&space;   result = 1;
&space;   return (&amp;result);
}
</CODE>
<PARAGRAPH>Notice that the declaration of the remote procedure<FUNCTION>&space;printmessage_1() </FUNCTION>differs from the declaration of the local procedure <FUNCTION>printmessage() </FUNCTION>in three ways:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><FUNCTION>printmessage_1()</FUNCTION> takes a pointer to a string instead of a string itself, which is true of all remote procedures; they always take pointers to their arguments rather than the arguments themselves.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><FUNCTION>printmessage_1()</FUNCTION> returns a pointer to an integer instead of returning an integer itself. This is also generally true of remote procedures: they return a pointer to their results.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><FUNCTION>printmessage_1()</FUNCTION>&space;has _1&space;appended to its name. In general, all remote procedures called by <COMMAND>rpcgen</COMMAND> are named using the following rule: the name in the program definition (here PRINTMESSAGE) is converted to all lowercase letters and an underscore (_) is appended to it, followed by the version number (here, 1).</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Finally, declare the main client program that will call the remote procedure:</PARAGRAPH>
<CODE>
/*
&space;* rprintmsg.c: remote version of "printmsg.c"
&space;*/ 
#include &lt;stdio.h>
#include &lt;sys/types.h>
#include &lt;sys/socket.h>
#include &lt;rpc/rpc.h>  /* Required. */
#define _RPCGEN_CLNT  /*selects client function prototypes*/
#include "msg.h"      /* This will be generated by rpcgen. */

void main(argc, argv)
int argc;
char **argv;
{
&space;   CLIENT *cl;
&space;   int *result;
&space;   char *server;
&space;   char *message;

&space;   if (argc &lt; 3) {
&space;       fprintf(stderr, "usage: %s host message\n", argv[0]);
&space;       exit(1);
&space;   }

&space;   /* save values of command line arguments */
&space;   server = argv[1];
&space;   message = argv[2];

&space;   /* Create client "handle" used for calling MESSAGEPROG
&space;    * on the server designated on the command line. We tell
&space;    * the RPC package to use "tcp" when contacting the
&space;    * server.
&space;    */
&space;   cl = clnt_create(server, MESSAGEPROG, MESSAGEVERS,
&space;                    "tcp");
&space;   if (cl == NULL) {
&space;       /* Couldn't establish connection with the server.
&space;        * Print error message and exit.
&space;        */
&space;       clnt_pcreateerror(server);
&space;       exit(1);
&space;   }

&space;   cl->cl_auth = authunix_create_default();

&space;   /* Call the remote procedure "printmessage" on the
&space;    * server */
&space;   result = printmessage_1(&amp;message, cl);
&space;   if (result == NULL) {
&space;       /*
&space;        * An error occured while calling the server.
&space;        * Print error message and exit.
&space;        */
&space;       clnt_perror(cl, server);
&space;       exit(1);
&space;   }

&space;   /* Okay, we've *called( the server; now, did it print
&space;    * the message? */
&space;   if (*result == 0) {
&space;       /*  The server was unable to print our message.
&space;        *  Print error message and exit.
&space;        */
&space;       fprintf(stderr,
&space;               "%s: %s couldn't print your message\n",
&space;               argv[0], server);
&space;       exit(1);
&space;   }
&space;   /* The message was printed on the server's console */
&space;   printf("Message delivered to %s!\n", server);
&space;   exit(0);
}
</CODE>
<PARAGRAPH>There are two things to note: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>A client handle is created using the RPC library routine <FUNCTION>clnt_create()</FUNCTION>. This client handle will be passed to the stub routines that call the remote procedure. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The remote procedure <FUNCTION>printmessage_1()</FUNCTION>&space;is called exactly the same way as it is declared in <FILENAME>msg_proc.c</FILENAME> except for the inserted client handle as the second argument.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Here's how to put the pieces together:</PARAGRAPH>
<EXAMPLE>
% <USERINPUT>rpcgen -P msg.x</USERINPUT>
% <USERINPUT>cc rprintmsg.c msg_clnt.c -o rprintmsg</USERINPUT>
rprintmsg.c:
msg_clnt.c:
% <USERINPUT>cc msg_proc.c msg_svc.c -o msg_server</USERINPUT>
msg_proc.c:
msg_svc.c:
%
</EXAMPLE>
<NOTE><PREFIX>Note</PREFIX>The command-line option <CMDLINEOPT>&ndash;lsun</CMDLINEOPT> used to be required to compile these programs, but it should no longer be used because <FILENAME>libsun</FILENAME> has been incorporated into <FILENAME>libc</FILENAME>.</NOTE>
<PARAGRAPH>Two programs were compiled: the client program rprintmsg and the server program msg_server. Before compilation, <COMMAND>rpcgen</COMMAND> was used to fill in the missing pieces. The following explains what <COMMAND>rpcgen</COMMAND> did with the input file msg.x:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH><COMMAND>rpcgen</COMMAND> created a header file called <FILENAME>msg.h</FILENAME> that contained #defines for MESSAGEPROG, MESSAGEVERS, and PRINTMESSAGE for use in the other modules. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>rpcgen</COMMAND> created client stub routines in the <FILENAME>msg_clnt.c</FILENAME> file. In this case, there is only one, the <FUNCTION>printmessage_1()</FUNCTION> that was referred to from the printmsg client program. The name of the output file for client stub routines is always formed in this way: if the name of the input file is <FILENAME>foo.x</FILENAME>,&space;the client stubs output file is called <FILENAME>foo_clnt.c</FILENAME>. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH><COMMAND>rpcgen</COMMAND> created the server program that calls <FUNCTION>printmessage_1()</FUNCTION>&space;in <FILENAME>msg_proc.c</FILENAME>. This server program is named <FILENAME>msg_svc.c</FILENAME>. The rule for naming the server output file is similar to the previous one: for an input file called <FILENAME>foo.x</FILENAME>, the output server file is named <FILENAME>foo_svc.c</FILENAME>.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>The following shows the contents of the file <FILENAME>msg_svc.c</FILENAME>, as generated by <COMMAND>rpcgen</COMMAND> from the file <FILENAME>msg.x</FILENAME>. Note that all registerable RPC server functions take the same parameters as the function <FUNCTION>messageprog_1(), </FUNCTION>shown in this example.</PARAGRAPH>
<CODE>
/* msg_svc.c
&space;* Please do not edit this file.
&space;* It was generated using rpcgen.
&space;*/

#include &lt;bstring.h>
#include &lt;sys/types.h>
#include &lt;sys/socket.h>
#include &lt;stdio.h>
#include &lt;rpc/rpc.h>
#include &lt;rpc/pmap_clnt.h>
#define _RPCGEN_SVC
#include "msg.h"

static void messageprog_1(struct svc_req *, SVCXPRT *);

main(void)
{
&space;   register SVCXPRT *transp;

&space;   (void) pmap_unset(MESSAGEPROG, MESSAGEVERS);

&space;   transp = svcudp_create(RPC_ANYSOCK);
&space;   if (transp == NULL) {
&space;       fprintf(stderr, "cannot create udp service.");
&space;       exit(1);
&space;   }
&space;   if (!svc_register(transp, MESSAGEPROG, MESSAGEVERS, messageprog_1, IPPROTO_UDP)) {
&space;       fprintf(stderr, "unable to register (MESSAGEPROG, MESSAGEVERS, udp).");
&space;       exit(1);
&space;   }

&space;   transp = svctcp_create(RPC_ANYSOCK, 0, 0);
&space;   if (transp == NULL) {
&space;       fprintf(stderr, "cannot create tcp service.");
&space;       exit(1);
&space;   }
&space;   if (!svc_register(transp, MESSAGEPROG, MESSAGEVERS, messageprog_1, IPPROTO_TCP)) {
&space;       fprintf(stderr, "unable to register (MESSAGEPROG, MESSAGEVERS, tcp).");
&space;       exit(1);
&space;   }
&space;   svc_run();
&space;   fprintf(stderr, "svc_run returned");
&space;   exit(1);
&space;   /* NOTREACHED */
}

static void
messageprog_1(struct svc_req *rqstp, SVCXPRT *transp)
{
&space;   union __svcargun {
&space;       char *printmessage_1_arg;
&space;   } argument;
&space;   xdrproc_t xdr_argument, xdr_result;
&space;   void *result;
&space;   typedef void *(*__svcproc_t)(union __svcargun *, struct svc_req *);
&space;   __svcproc_t local;

&space;   switch (rqstp->rq_proc) {
&space;   case NULLPROC:
&space;       (void) svc_sendreply(transp, (xdrproc_t)xdr_void, (char *)NULL);
&space;       return;

&space;   case PRINTMESSAGE:
&space;       xdr_argument = (xdrproc_t)xdr_wrapstring;
&space;       xdr_result = (xdrproc_t)xdr_int;
&space;       local = (__svcproc_t) printmessage_1;
&space;       break;

&space;   default:
&space;       svcerr_noproc(transp);
&space;       return;
&space;   }
&space;   bzero((char *)&amp;argument, sizeof(argument));
&space;   if (!svc_getargs(transp, xdr_argument, &amp;argument)) {
&space;       svcerr_decode(transp);
&space;       return;
&space;   }
&space;   result = (*local)(&amp;argument, rqstp);
&space;   if (result != NULL &amp;&amp; !svc_sendreply(transp, xdr_result, result)) {
&space;       svcerr_systemerr(transp);
&space;   }
&space;   if (!svc_freeargs(transp, xdr_argument, &amp;argument)) {
&space;       fprintf(stderr, "unable to free arguments");
&space;       exit(1);
&space;   }
&space;   return;
}
</CODE>
<PARAGRAPH>Now you're ready to have some fun. For this example, the local machine is called bonnie and the remote machine is called clyde. First, copy the server to a remote machine and run it:</PARAGRAPH>
<EXAMPLE>
clyde% <USERINPUT>msg_server &amp;</USERINPUT>&space;
</EXAMPLE>
<NOTE><PREFIX>Note</PREFIX>Server processes are run in the background because they never exit. </NOTE>
<PARAGRAPH>Next, on the local machine (bonnie), print a message on the remote machine's console:</PARAGRAPH>
<EXAMPLE>
bonnie% <USERINPUT>rprintmsg clyde "Hello, clyde"</USERINPUT>&space;
Message delivered to clyde!
bonnie%
</EXAMPLE>
<PARAGRAPH>The message will print on clyde's console. You can print a message on anybody's console (including your own) with this program if you are able to copy the server to that person's machine and run it.</PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Generating XDR Routines</TITLE><PARAGRAPH>The previous example demonstrated the automatic generation of client and server RPC code. You can also use <INDEXTARGET ID="4.rpcgen2"><!-- POSTPROCESSDATA: 4.rpcgen2|RPC:generating XDR routinesXDR:routine generation --><COMMAND>rpcgen</COMMAND> to generate XDR routines; that is, the routines necessary to convert local data structures into network format and vice versa. This example presents a complete RPC service, a remote directory listing service; <COMMAND>rpcgen</COMMAND> is used to generate stub routines and to generate the XDR routines.</PARAGRAPH>
<PARAGRAPH>This code is an example of a protocol description file:</PARAGRAPH>
<CODE>
/* dir.x: Remote directory listing protocol */
const MAXNAMELEN = 255; /*maximum length of directory entry*/
typedef string nametype&lt;MAXNAMELEN>;  /* directory entry */
typedef struct namenode *namelist;    /* a link in listing */

/* A node in the directory listing */
struct namenode {
&space;   nametype name;        /* name of directory entry */
&space;   namelist next;        /* next entry */
};

/* The result of a READDIR operation. */
union readdir_res switch (int errno) {
case 0:
&space;   namelist list;   /* no error: return directory listing */
default:
&space;   void;        /* error occurred: nothing else to return */
};

/* The directory program definition */
program    DIRPROG {
&space;       version DIRVERS {
&space;           readdir_res READDIR(nametype) = 1;
&space;       } = 1;
} = 76;
</CODE>
<NOTE><PREFIX>Note</PREFIX>Define types (such as readdir_res in the example above) by using the struct, union, and enum keywords; these keywords should not be used in subsequent declarations of variables of those types. For example, if you define a union foo, you should declare using only foo and not union foo. In fact, <COMMAND>rpcgen</COMMAND> compiles RPC unions into C structures; it is an error to declare them using the union keyword.</NOTE>
<PARAGRAPH>Running <COMMAND>rpcgen &ndash;P</COMMAND> on <FILENAME>dir.x</FILENAME> creates four output files. Three are the same as before: a header file, client stub routines, and a server skeleton. The fourth output file consists of the XDR routines necessary for converting the data types you declared into XDR format and vice versa. These routines are output in the file dir_xdr.c.</PARAGRAPH>
<PARAGRAPH>This example implements the READDIR procedure: </PARAGRAPH>
<CODE>
/* dir_proc.c: remote readdir implementation */
#include &lt;string.h>
#include &lt;stdlib.h>
#include &lt;errno.h>
#include &lt;rpc/rpc.h>
#include &lt;sys/dir.h>
#include "dir.h"

readdir_res *readdir_1(dirname, UNUSED)
/* UNUSED specified for prototype agreement */
nametype *dirname;
struct svc_req *UNUSED;
{
&space;   DIR *dirp;
&space;   struct direct *d;
&space;   namelist nl;
&space;   namelist *nlp;
&space;   static readdir_res res;     /* must be static! */
&space;   
&space;   /* Open directory */
&space;   dirp = opendir(*dirname);
&space;   if (dirp == NULL) {
&space;       res.errno = errno;
&space;       return (&amp;res);
&space;   } 
&space;   /* Free previous result */
&space;   xdr_free(xdr_readdir_res, &amp;res);
&space;   
&space;   /* Collect directory entries. Memory allocated here
&space;    * will be freed by xdr_free next time readdir_1 is
&space;    * called
&space;    */
&space;   nlp = &amp;res.readdir_res_u.list;
&space;   while (d = readdir(dirp)) {
&space;       nl = *nlp = (namenode *) malloc(sizeof(namenode));
&space;       nl->name = strdup(d->d_name);
&space;       nlp = &amp;nl->next;
&space;   }
&space;   *nlp = NULL;

&space;   /* Return the result */
&space;   res.errno = 0;
&space;   closedir(dirp);
&space;   return (&amp;res);
}
</CODE>
<PARAGRAPH>This example shows the client-side program to call the server:</PARAGRAPH>
<CODE>
/*
&space;* rls.c: Remote directory listing client
&space;*/
#include &lt;stdio.h>
#include &lt;errno.h>
#include &lt;rpc/rpc.h>   /* always need this */
#define _RPCGEN_CLNT   /*selects client function prototypes*/
#include "dir.h"       /* will be generated by rpcgen */

main(argc, argv)
int argc;
char **argv;
{
&space;   CLIENT *cl;
&space;   char *server;
&space;   char *dir;
&space;   readdir_res *result;
&space;   namelist nl;
&space;   if (argc != 3) {
&space;       fprintf(stderr, "usage: %s host directory\n",
&space;               argv[0]);
&space;       exit(1);
&space;   }
&space;   /* Remember what command line arguments refer to */
&space;   server = argv[1];
&space;   dir = argv[2]; 
&space;   /* Create client "handle" used for calling
&space;    * MESSAGEPROG on the server designated on the
&space;    * command line. We tell the RPC package to use the
&space;    * "tcp" protocol when contacting the server.
&space;    */
&space;   cl = clnt_create(server, DIRPROG, DIRVERS, "tcp");
&space;   if (cl == NULL) {
&space;       /* Couldn't establish connection with server.
&space;        * Print error message and close up shop.
&space;        */
&space;       clnt_pcreateerror(server);
&space;       exit(1);
&space;   } 
&space;   /* Call the remote procedure readdir() on the server */
&space;   result = readdir_1(&amp;dir, cl);
&space;   if (result == NULL) {
&space;       /* An error occurred while calling the server.
&space;        * Print error message and exit.
&space;        */
&space;       clnt_perror(cl, server);
&space;       exit(1);
&space;   } 
&space;   /* Okay, the remote procedure was called successfully. */

&space;   if (result->errno != 0) {
&space;       /* A remote system error occurred. Print error
&space;        * message and exit.
&space;        */
&space;       errno = result->errno;
&space;       perror(dir);
&space;       exit(1);
&space;   }
&space;   /* Successfully got a directory listing.
&space;    * Print it out.
&space;    */
&space;   for (nl = result->readdir_res_u.list; nl != NULL;
&space;        nl = nl->next) {
&space;       printf("%s\n", nl->name);
&space;   }
&space;   exit(0);
}
</CODE>
<PARAGRAPH>Finally, compile everything and run the server:</PARAGRAPH>
<EXAMPLE>
bonnie% <USERINPUT>rpcgen -P dir.x</USERINPUT>&space;
bonnie% <USERINPUT>cc rls.c dir_clnt.c dir_xdr.c -o rls</USERINPUT>&space;
rls.c:
dir_clnt.c:
dir_xdr.c:
bonnie% <USERINPUT>cc dir_svc.c dir_proc.c dir_xdr.c -o dir_svc</USERINPUT>&space;
dir_svc.c:
dir_proc.c:
dir_xdr.c:
bonnie% <USERINPUT>dir_svc &amp;</USERINPUT>&space;
</EXAMPLE>
<PARAGRAPH>Now run the client from another machine:</PARAGRAPH>
<EXAMPLE>
clyde% <USERINPUT>rls bonnie /usr/pub</USERINPUT>&space;
.
..
apseqnchar
cateqnchar
eqnchar
psceqnchar
terminals
clyde%
</EXAMPLE>
<PARAGRAPH>You can test the client program and the server procedure together as a single program by linking them to each other, rather than linking to the client and server stubs. The procedure calls will be executed as ordinary local procedure calls, and the program can be debugged with a local debugger such as dbx. When the program is working, the client program can be linked to the client stub produced by <INDEXTARGET ID="4.rpcgen3"><!-- POSTPROCESSDATA: 4.rpcgen3|rpcgen:debugging --><COMMAND>rpcgen</COMMAND>, and the server procedures can be linked to the server stub produced by <COMMAND>rpcgen</COMMAND>.</PARAGRAPH>
<PARAGRAPH>Note that if you link the programs in this way, you may want to comment out calls to RPC library routines, and have client-side routines call server routines directly. </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>The C Preprocessor</TITLE><PARAGRAPH>The C preprocessor is run on all input files before they are compiled, so all preprocessor directives are legal within a .x&space;file.<INDEXTARGET ID="4.rpcgen4"><!-- POSTPROCESSDATA: 4.rpcgen4|rpcgen:C preprocessor --></PARAGRAPH>
<PARAGRAPH>Four symbols may be defined, depending on which output file is being generated. These symbols are listed in <XREF IDREF="27415" TYPE="TABLE">Table&nbsp;4-1</XREF>. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="4-1"><PREFIX>Table 4-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="27415">C Preprocessor Symbol Definition</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="108"><PARAGRAPH>Symbol</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="153"><PARAGRAPH>Usage </PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>RPC_CLNT</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="153"><PARAGRAPH>for client stub output</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>RPC_HDR</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="153"><PARAGRAPH>for header file output</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>RPC_SVC</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="153"><PARAGRAPH>for server skeleton output</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="108"><PARAGRAPH>RPC_XDR</PARAGRAPH>
</CELL>
<CELL LEFT="115" WIDTH="153"><PARAGRAPH>for XDR routine output</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
<PARAGRAPH><COMMAND>rpcgen</COMMAND> also does some preprocessing of its own. Any line that begins with a percent sign (%) is passed directly into the output file, without any interpretation of the line. The following example demonstrates the preprocessing features:</PARAGRAPH>
<CODE>
/* time.x: Remote time protocol */
program TIMEPROG {
&space;       version TIMEVERS {
&space;           unsigned int TIMEGET(void) = 1;
&space;       } = 1;
} = 44;

#ifdef RPC_SVC
%u_int *timeget_1()
%{
%    static u_int thetime;
%
%    thetime = time(0);
%    return (&amp;thetime);
%}
#endif
</CODE>
<NOTE><PREFIX>Note</PREFIX>The percent (%) feature is not generally recommended, since there is no guarantee that the compiler will put the output where you intended. </NOTE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>pcgen Programming Notes</TITLE><PARAGRAPH>This section describes ANSI C prototypes, timeout changes, broadcast on the server side, and information passed to server procedures. </PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Generating ANSI C Prototypes</TITLE><PARAGRAPH>To generate prototyped XDR and stub function declarations and definitions suitable for ANSI C, use the <CMDLINEOPT>&ndash;P</CMDLINEOPT> option to <COMMAND>rpcgen</COMMAND>&mdash;see <REFPAGE>rpcgen(1)</REFPAGE>. The prototypes for the client and server-side stubs are different; their declarations in the generated header file are conditionally compiled with the value _RPCGEN_CLNT or _RPCGEN_SVC. If you write your own client or server code, you must define the appropriate value in your source files before including the generated header file.</PARAGRAPH>
<PARAGRAPH>For instance, in the remote message example from the <XREF IDREF="48965" TYPE="TITLE">&ldquo;Changing Local Procedures to Remote Procedures&rdquo;</XREF> section, the file for client code uses:</PARAGRAPH>
<CODE>
#define _RPCGEN_CLNT
#include "msg.h"
</CODE>
<PARAGRAPH>and the file for server code uses:</PARAGRAPH>
<CODE>
#define _RPCGEN_SVC
#include "msg.h"
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Client-side Timeout Changes</TITLE><PARAGRAPH>RPC sets a default timeout of 25 seconds for RPC calls when <INDEXTARGET ID="4.rpcgen5"><!-- POSTPROCESSDATA: 4.rpcgen5|rpcgen:timeout changes --><FUNCTION>clnt_create()</FUNCTION> is used. This timeout may be changed using <FUNCTION>clnt_control()</FUNCTION>. This code fragment demonstrates the use of <FUNCTION>clnt_control()</FUNCTION>:</PARAGRAPH>
<CODE>
struct timeval tv;
CLIENT *cl; 
cl = clnt_create("somehost", SOMEPROG, SOMEVERS, "tcp");
if (cl == NULL) {
&space;   exit(1);
}
/* change timeout to 1 minute */
tv.tv_sec = 60;
tv.tv_usec = 0;
clnt_control(cl, CLSET_TIMEOUT, &amp;tv);
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Server-side Broadcast Handling</TITLE><PARAGRAPH>When a procedure is known to be called via broadcast RPC, it is usually wise for the server not to reply unless it can provide some useful information to the client. This prevents the network from being flooded by useless replies.<INDEXTARGET ID="4.rpcgen6"><!-- POSTPROCESSDATA: 4.rpcgen6|rpcgen:server broadcasting --></PARAGRAPH>
<PARAGRAPH>To prevent the server from replying, a remote procedure can return NULL as its result, and the server code generated by <COMMAND>rpcgen</COMMAND> will detect the NULL and not send out a reply.</PARAGRAPH>
<PARAGRAPH>The next example shows a simple procedure that replies only if it thinks it is an NFS server. It assumes an NFS client won't have this file, which may not be valid. </PARAGRAPH>
<CODE>
void *reply_if_nfsserver(void)
{
&space;   char notnull;  /* just here so you can use its address */ 
&space;   if (access("/etc/exports", F_OK) &lt; 0) {
&space;       return (NULL);    /* prevent RPC from replying */
&space;   }
&space;   /*return non-null pointer so RPC will send out a reply*/
&space;   return ((void *)&amp;notnull);
}
</CODE>
<PARAGRAPH>Note that if a procedure returns type void *,&space;it must return a non-NULL pointer if it wants RPC to reply to it.</PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="38490">Other Information Passed to Server Procedures</TITLE><PARAGRAPH>Server procedures will often want to know more about an RPC call than just its arguments. For example, getting authentication information is important to procedures that want to implement some level of security. <INDEXTARGET ID="4.rpcgen7"><!-- POSTPROCESSDATA: 4.rpcgen7|rpcgen:server procedures --></PARAGRAPH>
<PARAGRAPH>This extra information is actually supplied to the server procedure as a second argument, as shown in the following example. The previous <FUNCTION>printmessage_1()</FUNCTION> procedure has been rewritten to allow only root users to print a message to the console:</PARAGRAPH>
<CODE>
/*
&space;*  msg_proc.c: implementation of the remote
&space;*  procedure "printmessage"
&space;*/
#include &lt;stdio.h>
#include &lt;syslog.h>
#include &lt;pwd.h>
#include &lt;sys/types.h>
#include &lt;sys/socket.h>
#include &lt;netinet/in.h>
#include &lt;netdb.h>
#include &lt;rpc/rpc.h>  /* Required. */
#define _RPCGEN_SVC   /*Selects server function prototypes.*/
#include "msg.h"      /* This will be generated by rpcgen. */

#define MAX_LOG_MESSAGE 160

int printmessage_1_client_ok(struct svc_req *rqstp);

/*  Remote version of "printmessage" */
int *printmessage_1(msg, rq)
char **msg;
struct svc_req *rq;
{
&space;   static int result;    /* Must be static or external */
&space;   FILE *f;
&space;   struct authunix_parms *aup;

&space;   /* perform authentication checks on client credentials */
&space;   if (! printmessage_1_client_ok(rq)) {
&space;       result = 0;
&space;       return (&amp;result);
&space;   }

&space;   /*  Same code as before. */
&space;   f = fopen("/dev/console", "w");
&space;   if (f == NULL) {            /* failure! */
&space;       result = 0;
&space;       return (&amp;result);
&space;   }
&space;   fprintf(f, "%s\n", *msg);   /* success! */
&space;   fclose(f);
&space;   result = 1;
&space;   return (&amp;result);
}

static int logging_successful_requests = 1;

/* This routine attempts to verify that the client user is
&space;* authorized access on the server host.  A true value is
&space;* returned to indicate that the client user is not authorized.
&space;* Otherwize the value returned is false. */
int
printmessage_1_client_ok(struct svc_req *rqstp)
{
&space;   SVCXPRT *   transp  = rqstp->rq_xprt;
&space;   char *      user    = NULL;
&space;   uid_t       uid;
&space;   struct authunix_parms *unix_cred;
&space;   struct hostent *host_entry = NULL;
&space;   struct passwd  *passwd_entry = NULL;
&space;   char        log_message[MAX_LOG_MESSAGE];

&space;   static u_long peer_addr        = 0;
&space;   static u_long client_host_addr = 0;
&space;   static char * client_host      = NULL;

&space;   switch (rqstp->rq_cred.oa_flavor) {
&space;   case AUTH_UNIX:
&space;       unix_cred = (struct authunix_parms *)rqstp->rq_clntcred;
&space;       uid = unix_cred->aup_uid;
&space;       break;
&space;   case AUTH_NULL:
&space;   default:            /* invalid credentials */
&space;       sprintf(log_message, "Rejected request, "
&space;                "invalid credentials, type %d", rqstp->rq_cred.oa_flavor);
&space;       syslog(LOG_NOTICE | LOG_AUTH, log_message);
&space;       return 0;
&space;   }

&space;   if (transp->xp_raddr.sin_port >= IPPORT_RESERVED) {
&space;       sprintf(log_message, "Rejected request, "
&space;                "non-priviledged port %d", transp->xp_raddr.sin_port);
&space;       syslog(LOG_NOTICE | LOG_AUTH, log_message);
&space;       return 0;
&space;   }
&space;   /* Determine the client host name and address. */
&space;   if (peer_addr != transp->xp_raddr.sin_addr.s_addr) {
&space;       host_entry = gethostbyaddr(&amp;transp->xp_raddr.sin_addr,
&space;                                   sizeof(struct in_addr),
&space;                                   AF_INET);
&space;       if (host_entry == NULL) {
&space;           sprintf(log_message, "Rejected request, "
&space;                    "unknown client host at address 0x%08x",
&space;                    transp->xp_raddr.sin_addr);
&space;           syslog(LOG_NOTICE | LOG_AUTH, log_message);
&space;           return 0;
&space;       }
&space;       peer_addr = transp->xp_raddr.sin_addr.s_addr;
&space;       if (client_host != NULL) {
&space;           free(client_host);
&space;       }
&space;       client_host = strdup(host_entry->h_name);
&space;       client_host_addr = *(u_long *) host_entry->h_addr;
&space;   }

&space;   /* Determine the user name. */
&space;   passwd_entry = getpwuid(uid);
&space;   if (passwd_entry == NULL) {
&space;       sprintf(log_message, "Rejected request, "
&space;                "unknown uid %d from host %s",
&space;                uid, client_host);
&space;       syslog(LOG_NOTICE | LOG_AUTH, log_message);
&space;       return 0;
&space;   }
&space;   user = strdup(passwd_entry->pw_name);
&space;   if (passwd_entry->pw_passwd != NULL &amp;&amp;
&space;       *passwd_entry->pw_passwd != '\0' &amp;&amp;
&space;       ruserok(client_host, 1, user, "root") &lt; 0) {
&space;       sprintf(log_message, "Rejected request by %s at %s",
&space;                user, client_host);
&space;       syslog(LOG_NOTICE | LOG_AUTH, log_message);
&space;       free(user);
&space;       return 0;
&space;   }

&space;   if (logging_successful_requests) {
&space;       if (user != NULL) {
&space;           sprintf(log_message, "Granted request by %s at %s",
&space;                    user, client_host);
&space;       } else {
&space;           sprintf(log_message, "Granted request by uid %d at %s",
&space;                    uid, client_host);
&space;       }
&space;       syslog(LOG_INFO | LOG_AUTH, log_message);
&space;   }
&space;   if (user != NULL) {
&space;       free(user);
&space;   }
&space;   return 1;
} /* printmessage_1_client_ok */

</CODE>
</SECTION2>
</SECTION1>
</CHAPTER>
