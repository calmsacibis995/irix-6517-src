<!-- Produced by version 3.14 (11/22/96) of SGI Frame/SGML translator -->
<APPENDIX LBL="A"><TITLE><XREFTARGET ID="94783">RPC Protocol Specification</TITLE><PARAGRAPH>This chapter describes the RPC protocol, a message protocol that is specified with the XDR language and is used in implementing Sun's RPC package.</PARAGRAPH>
<PARAGRAPH>This chapter assumes you are familiar with both RPC and XDR, as described in this guide. It does not attempt to justify RPC or its uses. The casual user of RPC need not be familiar with the information in this chapter. </PARAGRAPH>
<PARAGRAPH>Topics in this chapter include:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>RPC protocol requirements</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>RPC protocol definition</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>authentication protocols</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>RPC record-marking standard</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>port mapper program protocol</PARAGRAPH>
</BULLET>
</BULLETLIST>
<NOTE><PREFIX>Note</PREFIX>For details about RPC programming, see <XREF IDREF="49542" TYPE="TITLE">Chapter&nbsp;5, &ldquo;RPC Programming Guide.&rdquo;</XREF> For information about the structure and syntax of XDR and RPC language, see <XREF IDREF="55141" TYPE="TITLE">Chapter&nbsp;6, &ldquo;XDR and RPC Language Structure.&rdquo;</XREF></NOTE>
<SECTION1 LBL="" HELPID = ""><TITLE>RPC Protocol Requirements</TITLE><PARAGRAPH>The RPC protocol provides:<INDEXTARGET ID="A.RPCspec1"><!-- POSTPROCESSDATA: A.RPCspec1|RPC:protocol requirementsprotocol requirements, RPC --></PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>unique specification of a procedure to be called </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>provisions for matching response messages to request messages </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>provisions for authenticating the caller to the service and vice versa </PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Besides these requirements, features that detect the following are worth supporting because of protocol roll-over errors, implementation bugs, user error, and network administration: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>RPC protocol mismatches </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>remote program protocol version mismatches</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>protocol errors (such as errors in specifying a procedure's parameters)</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>reasons why remote authentication failed </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>any other reasons why the desired procedure was not called </PARAGRAPH>
</BULLET>
</BULLETLIST>
<SECTION2 LBL="" HELPID = ""><TITLE><XREFTARGET ID="35610">Remote Programs and Procedures</TITLE><PARAGRAPH>An RPC call message has three unsigned fields that uniquely identify the procedure to be called:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>remote program number</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>remote program version number</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>remote procedure number</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Program numbers are administered by some central authority (see <XREF IDREF="10975" TYPE="TITLE">&ldquo;Assigning RPC Program Numbers&rdquo; in Chapter&nbsp;3</XREF> for details). Once you have a program number, you can implement your remote program.</PARAGRAPH>
<PARAGRAPH>The version field of the call message identifies the version of the RPC protocol being used by the caller. Because most new protocols evolve into better, stable, and mature protocols, a version field identifies which version of the protocol the caller is using. Version numbers make it possible to speak old and new protocols through the same server process.</PARAGRAPH>
<PARAGRAPH>The procedure number identifies the procedure to be called. Such numbers are documented in the specific program's protocol specification. For example, a file service's protocol specification may state that its procedure number 5 is <VARIABLE>read</VARIABLE> and procedure number 12 is <VARIABLE>write</VARIABLE>.</PARAGRAPH>
<PARAGRAPH>Just as remote program protocols may change over several versions, the actual RPC message protocol could also change. Therefore, the call message also has the RPC version number in it; this field must be two (2) for the version of RPC described here.</PARAGRAPH>
<PARAGRAPH>The reply message to a request message has enough information to distinguish the following error conditions: </PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The remote implementation of RPC does speak protocol version 2. The lowest and highest supported RPC version numbers are returned. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The remote program is not available on the remote system. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The remote program does not support the requested version number. The lowest and highest supported remote program version numbers are returned. </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The requested procedure number does not exist (this is usually a caller&ndash;side protocol or programming error). </PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The parameters to the remote procedure appear to be garbage from the server's point of view. (Again, this situation is caused by a disagreement about the protocol between client and service.) </PARAGRAPH>
</BULLET>
</BULLETLIST>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Message Authentication</TITLE><PARAGRAPH>The RPC protocol provides the fields necessary for a client to identify itself to a service and vice versa. The call message has two authentication fields, the credentials and verifier. The reply message has one authentication field, the response verifier. The RPC protocol specification defines all three fields as the following <INDEXTARGET ID="A.RPCspec2"><!-- POSTPROCESSDATA: A.RPCspec2|RPC:authenticationRPC:message authenticationmessage authentication, RPCauthentication, RPC --><VARIABLE>opaque</VARIABLE> type:</PARAGRAPH>
<CODE>
enum auth_flavor {
&space;   AUTH_NULL    = 0,
&space;   AUTH_UNIX    = 1,
&space;   AUTH_SHORT   = 2
/* and more to be defined */ 
}; 
struct opaque_auth {
&space;   auth_flavor flavor;
&space;   opaque body&lt;400>; 
}; 
</CODE>
<PARAGRAPH>In simple English, any <VARIABLE>opaque_auth</VARIABLE> structure is an <VARIABLE>auth_flavor</VARIABLE> enumeration followed by bytes that are opaque to the RPC protocol implementation.</PARAGRAPH>
<PARAGRAPH>The interpretation and semantics of the data contained within the authentication fields is specified by individual, independent authentication protocol specifications. (See <XREF IDREF="11233" TYPE="TITLE">&ldquo;Authentication Protocols&rdquo;</XREF> for definitions of the various authentication protocols.)</PARAGRAPH>
<PARAGRAPH>If authentication parameters are rejected, the response message contains information stating why they were rejected. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Other Uses of the RPC Protocol</TITLE><PARAGRAPH>The intended use of the RPC protocol is for calling remote procedures. That is, each call message is matched with a response message. However, the protocol itself is a message passing protocol with which other (non-RPC) protocols can be implemented. Sun currently uses the RPC message protocol for the following two (non-RPC) protocols: batching (or pipelining) and broadcast RPC. These two protocols are discussed (but not defined) next. </PARAGRAPH>
<SECTION3 LBL="" HELPID = ""><TITLE>Batching</TITLE><PARAGRAPH>Batching allows a client to send an arbitrarily large sequence of call messages to a server; batching uses reliable byte stream protocols (such as TCP/IP) for its transport. The client never waits for a reply from the server, and the server does not send replies to batch requests. A sequence of batch calls is usually terminated by a legitimate RPC in order to flush the pipeline (with positive acknowledgment). <INDEXTARGET ID="A.RPCspec3"><!-- POSTPROCESSDATA: A.RPCspec3|RPC:batchbatch, RPC --></PARAGRAPH>
</SECTION3>
<SECTION3 LBL="" HELPID = ""><TITLE>Broadcast RPC</TITLE><PARAGRAPH>In broadcast RPC-based protocols, the client sends a broadcast packet to the network and waits for numerous replies. Broadcast RPC uses unreliable, packet-based protocols (such as UDP/IP) as its transport. Servers that support broadcast protocols respond only when the request is successfully processed, and they are silent in the face of errors. Broadcast RPC uses the Port Mapper RPC service to achieve its semantics. See <INDEXTARGET ID="A.RPCspec4"><!-- POSTPROCESSDATA: A.RPCspec4|RPC:broadcastbroadcast, RPC --><XREF IDREF="37582" TYPE="TITLE">&ldquo;Port Mapper Program Protocol&rdquo;</XREF> for more information. </PARAGRAPH>
</SECTION3>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>RPC Protocol Definition</TITLE><PARAGRAPH>This section defines the RPC protocol in the XDR data description language. The message is defined in a top-down style. <INDEXTARGET ID="A.RPCspec5"><!-- POSTPROCESSDATA: A.RPCspec5|RPC:message protocolmessage, protocol, RPC --></PARAGRAPH>
<PARAGRAPH>Note that this is an XDR specification, not C code:</PARAGRAPH>
<CODE>
enum msg_type {
&space;   CALL = 0,
&space;   REPLY = 1 
}; 
/* 
&space;* A reply to a call message can take two forms:
&space;* the message was either accepted or rejected.
&space;*/ 
enum reply_stat {
&space;   MSG_ACCEPTED = 0,
&space;   MSG_DENIED = 1 
};
/* Given that a call message was accepted, the following is 
&space;* the status of an attempt to call a remote procedure.
&space;*/ 
enum accept_stat {
&space;   SUCCESS        =0,  /* RPC successfully executed */
&space;   PROG_UNAVAIL   =1,  /* remote machine exports program */
&space;   PROG_MISMATCH  =2,  /* remote can't support version num*/
&space;   PROC_UNAVAIL   =3   /* prog can't support procedure */
&space;   GARBAGE_ARGS   =4   /* remote can't figure out params */
}; 
/*
&space;* Reasons why a call message was rejected:
&space;*/ 
enum reject_stat {
&space;   RPC_MISMATCH = 0,   /* RPC version number not 2 */
&space;   AUTH_ERROR   = 1    /* caller not authenticated on */
&space;                       /* remote */    
};

/*
&space;* Why authentication failed:
&space;*/ 
enum auth_stat {
&space; AUTH_BADCRED      = 1, /* bad credentials (seal broken) */
&space; AUTH_REJECTEDCRED = 2, /* have client begin new session */
&space; AUTH_BADVERF      = 3, /* bogus verifier (seal broken) */
&space; AUTH_REJECTEDVERF = 4, /* verifier expired or replayed */
&space; AUTH_TOOWEAK      = 5, /* rejected for security reasons */ 
};

/*
&space;* The RPC message:
&space;* All messages start with a transaction identifier, xid,
&space;* followed by a two-armed discriminated union.  The
&space;* union's discriminant is a msg_type which switches to
&space;* one of the two types of the message.  The xid of a
&space;* REPLY message always matches that of the initiating
&space;* CALL message. NB: The xid field is only used for clients
&space;* matching reply messages with call messages or for servers
&space;* detecting  retransmissions; the service side cannot treat
&space;* this ID as any type of sequence number.
&space;*/ 
struct rpc_msg {
&space;   unsigned int    xid;
&space;   union switch (msg_type mtype) {
&space;       case CALL:  
&space;           call_body cbody;
&space;       case REPLY: 
&space;           reply_body rbody;
&space;   } body; 
};

/*
&space;* Body of an RPC request call:
&space;* In version 2 of the RPC protocol specification, rpcvers
&space;* must be equal to 2.  The fields prog, vers, and proc
&space;* specify the remote program, its version, and the
&space;* procedure within the remote program to be called.  These
&space;* fields are followed by two authentication parameters,
&space;* cred (authentication credentials) and verf
&space;* (authentication verifier).  The two authentication
&space;* parameters are followed by the parameters to the remote
&space;* procedure, which are specified by the specific program
&space;* protocol.
&space;*/ 
struct call_body {
&space;   unsigned int rpcvers;  /* must be equal to 2 */
&space;   unsigned int prog;
&space;   unsigned int vers;
&space;   unsigned int proc;
&space;   opaque_auth cred;
&space;   opaque_auth verf;
&space;   /* procedure-specific parameters start here */ 
};

/*  &lbreak; *  Body of a reply to an RPC request.
&space;*  The call message was either accepted or rejected.&lbreak; */
union reply_body switch (reply_stat stat) {
&space;   case MSG_ACCEPTED:  
&space;       accepted_reply areply;
&space;   case MSG_DENIED:  
&space;       rejected_reply rreply; 
} reply;

/*
&space;* Reply to an RPC request that was accepted by the server.
&space;* Note: there could be an error even though the request
&space;* was accepted.  The first field is an authentication
&space;* verifier which the server generates in order to validate
&space;* itself to the caller.  It is followed by a union whose
&space;* discriminant is an enum accept_stat.  The SUCCESS arm of
&space;* the union is protocol specific.  The PROG_UNAVAIL,
&space;* PROC_UNAVAIL, and GARBAGE_ARGS arms of the union are
&space;* void.  The PROG_MISMATCH arm specifies the lowest and
&space;* highest version numbers of the remote program that are
&space;* supported by the server.
&space;*/ 
struct accepted_reply {
&space;   opaque_auth verf;
&space;   union switch (accept_stat stat) {
&space;       case SUCCESS:
&space;           opaque results[0];
&space;       /* procedure-specific results start here */
&space;           case PROG_MISMATCH:
&space;           struct {
&space;               unsigned int low;
&space;               unsigned int high;
&space;       } mismatch_info;
&space;       default:
&space;       /* Void.  Cases include PROG_UNAVAIL,
&space;          PROC_UNAVAIL, and GARBAGE_ARGS. */
&space;       void;
&space;   } reply_data; 
}; 

/*
&space;* Reply to an RPC request that was rejected by the server.
&space;* The request can be rejected because of two reasons: either
&space;* the server is not running a compatible version of the 
&space;* RPC protocol (RPC_MISMATCH), or the server refused to 
&space;* authenticate the caller (AUTH_ERROR).  In the case of
&space;* an RPC version mismatch, the server returns the lowest and 
&space;* highest supported RPC version numbers. In the case of 
&space;* refused authentication, the failure status is returned.
&space;*/ 
union rejected_reply switch (reject_stat stat) {
&space;   case RPC_MISMATCH:
&space;       struct {
&space;           unsigned int low;
&space;           unsigned int high;
&space;       } mismatch_info;
&space;   case AUTH_ERROR: 
&space;       auth_stat stat; 
}; 
</CODE>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="11233">Authentication Protocols</TITLE><PARAGRAPH>As previously stated, authentication parameters are opaque but open-ended to the rest of the RPC protocol. This section defines some &ldquo;flavors&rdquo; of authentication in this implementation. Other sites are free to invent new authentication types, with the same rules of flavor number assignment as those for program number assignment.<INDEXTARGET ID="A.RPCspec6"><!-- POSTPROCESSDATA: A.RPCspec6|RPC:authentication protocolsRPC:parameter authentication --></PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Null Authentication</TITLE><PARAGRAPH>RPC calls are often made when the caller doesn't know its authentication parameters, and the server doesn't care. In this case, the <INDEXTARGET ID="A.RPCspec7"><!-- POSTPROCESSDATA: A.RPCspec7|RPC:null authenticationnull authentication --><VARIABLE>auth_flavor</VARIABLE> value (the discriminant of the <VARIABLE>opaque_auth</VARIABLE>'s union) of the RPC message's credentials, verifier, and response verifier is AUTH_NULL(0). The bytes of the <VARIABLE>opaque_auth</VARIABLE>'s body are undefined. It is recommended that the opaque length be zero. </PARAGRAPH>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>AUTH_UNIX Authentication</TITLE><PARAGRAPH>The caller of a remote procedure may want to identify itself as it is identified on a trusted UNIX system. The value of the <INDEXTARGET ID="A.RPCspec8"><!-- POSTPROCESSDATA: A.RPCspec8|RPC:UNIX authenticationRPC:authentication, UNIXUNIX authentication, RPC --><VARIABLE>credential</VARIABLE>'s discriminant of an RPC call message is AUTH_UNIX (1). The bytes of the <VARIABLE>credential</VARIABLE>'s opaque body encode the following structure: </PARAGRAPH>
<CODE>
struct auth_unix {
&space;   unsigned int stamp;
&space;   string machinename&lt;255>;
&space;   unsigned int uid;
&space;   unsigned int gid;
&space;   unsigned int gids&lt;16>; 
}; 
</CODE>
<PARAGRAPH>The <VARIABLE>stamp</VARIABLE> is an arbitrary ID that the caller machine may generate. The <VARIABLE>machinename</VARIABLE> is the name of the caller's machine (such as <VARIABLE>krypton</VARIABLE>). The <VARIABLE>uid</VARIABLE> is the caller's effective user ID. The <VARIABLE>gid</VARIABLE> is the caller's effective group ID. The <VARIABLE>gid</VARIABLE> is a counted array of groups that contain the caller as a member. The <VARIABLE>verifier</VARIABLE> accompanying the credentials should be of AUTH_NULL (defined in the previous section).</PARAGRAPH>
<PARAGRAPH>The value of the discriminate of the &ldquo;response verifier&rdquo; received in the reply message from the server may be AUTH_NULL or AUTH_SHORT(2). In the case of AUTH_SHORT, the bytes of the <ITALICS>response verifier</ITALICS>'s string encode an opaque structure. This new opaque structure may now be passed to the server instead of the original AUTH_UNIX flavor credentials. The server keeps a cache that maps shorthand opaque structures (passed back via an AUTH_SHORT style &ldquo;response verifier&rdquo;) to the original credentials of the caller. The caller can save network bandwidth and server CPU cycles by using the new credentials.</PARAGRAPH>
<PARAGRAPH>The server may flush the shorthand opaque structure at any time. If this happens, the remote procedure call message will be rejected due to an authentication error. The reason for the failure will be AUTH_REJECTEDCRED. At this point, the caller may want to try the original AUTH_UNIX style of credentials. </PARAGRAPH>
<NOTE><PREFIX>Note</PREFIX>In an open environment, extra checks should be performed against the source and identity of the originator before accepting the credential values.</NOTE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Trusted UNIX Systems</TITLE><PARAGRAPH>Authentication is based on the premise that one multi-user UNIX system should be able to accept and rely upon the user and group identification information from a trusted source. The criteria for such trust between two systems are as follows:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>Both systems are administered securely. This includes practices such as:</PARAGRAPH>
<BULLETLISTIND><BULLETIND><PARAGRAPH>using passwords on all accounts, especially root.</PARAGRAPH>
</BULLETIND>
<BULLETIND><PARAGRAPH>ensuring all setuid-root programs and daemons that run as root are <ITALICS>trustworthy</ITALICS>, that is, they do not lie about their UID and are not easily fooled.</PARAGRAPH>
</BULLETIND>
<BULLETIND><PARAGRAPH>protecting system files (the kernel) through file system permissions.</PARAGRAPH>
</BULLETIND>
</BULLETLISTIND>
</BULLET>
<BULLET><PARAGRAPH>Both systems share a common set of user UIDs and GIDs, such as is implemented with NIS.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>Systems that adhere to the criteria in the first bulleted item above are considered <ITALICS>equivalent</ITALICS>, and are typically named in the file<FILENAME>&space;/etc/hosts.equiv</FILENAME>.</PARAGRAPH>
<PARAGRAPH>As a result of following these criteria, a UNIX system believes the content of a credential is authentic if comes from a trusted and trustworthy source. A UNIX system attempts to assure itself that the credential has come from such a trusted source if:</PARAGRAPH>
<BULLETLIST><BULLET><PARAGRAPH>The packet is not self-inconsistent about its source (the host name in the credential maps to the IP source address of the packet).</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The packet bears a source address that maps into a list of trusted or <ITALICS>equivalent</ITALICS> hosts. Assuming that the list has been properly maintained, this assures the program that the source system is a UNIX system, with <ITALICS>privileged ports</ITALICS>.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The credential information (that is, the UIDs and GIDs) are all known to the local system. This attempts to catch information from hosts that do not have equivalent (common) sets of users' UIDs and GIDs.</PARAGRAPH>
</BULLET>
<BULLET><PARAGRAPH>The packet came from a privileged port on the source system. Given that the source system was a UNIX host, this implies that the packet came from a process running as root, which is trustworthy.</PARAGRAPH>
</BULLET>
</BULLETLIST>
<PARAGRAPH>All of these actions constitute authentication, not access control. They attempt to answer the question &ldquo;should we trust the identity information in this credential?&rdquo; not the question &ldquo;is the identity in this credential entitled to perform the requested RPC function?&rdquo;</PARAGRAPH>
<PARAGRAPH>This entire premise of authentication based on trust of equivalent systems is dated. Personal computers and UNIX workstations that are individually administered are far less likely to be worthy of the level of trust suggested here than were the large multi-user systems that were kept in locked computer rooms, and whose root passwords were known only to a few trusted system administrators, so common years ago. Most typical modern UNIX workstation environments simply don't meet the criteria for <ITALICS>equivalent systems</ITALICS> any more.</PARAGRAPH>
<PARAGRAPH>Personal computers do not have root accounts, and no privileged ports. Any user on a personal computer can send packets from a port number that would be a privileged port if it were a UNIX system.</PARAGRAPH>
<PARAGRAPH>So, accepting an AUTH_UNIX RPC request from a system not known to be UNIX is risky.</PARAGRAPH>
</SECTION2>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE>Record Marking Standard</TITLE><PARAGRAPH>When RPC messages are passed on top of a byte stream protocol (such as TCP/IP), it is necessary, or at least desirable, to delimit one message from another in order to detect and possibly recover from user protocol errors. This is called record marking (RM). This implementation of RPC uses this RM/TCP/IP transport for passing RPC messages on TCP streams. One RPC message fits into one RM record.<INDEXTARGET ID="A.RPCspec9"><!-- POSTPROCESSDATA: A.RPCspec9|RPC:record markingrecord marking, RPC --></PARAGRAPH>
<PARAGRAPH>A record is composed of one or more record fragments. A record fragment is a 4-byte header followed by 0 to 231-1 bytes of fragment data. The bytes encode an unsigned binary number; as with XDR integers, the byte order is from highest to lowest. The number encodes two values&mdash;a boolean, which indicates whether the fragment is the last fragment of the record (bit value 1 implies the fragment is the last fragment), and a 31-bit unsigned binary value, which is the length in bytes of the fragment's data. The boolean value is the highest order bit of the header; the length is the 31 low-order bits. (Note that this record specification is not in XDR standard form.) </PARAGRAPH>
</SECTION1>
<SECTION1 LBL="" HELPID = ""><TITLE><XREFTARGET ID="37582">Port Mapper Program Protocol</TITLE><PARAGRAPH>The port mapper program maps RPC program and version numbers to transport&ndash;specific port numbers, which enables dynamic binding of remote programs.<INDEXTARGET ID="A.RPCspec10"><!-- POSTPROCESSDATA: A.RPCspec10|RPC:port mapperport mapper, RPC --></PARAGRAPH>
<PARAGRAPH>This mapping is desirable because the range of reserved port numbers is very small and the number of potential remote programs is very large. By running only the port mapper on a reserved port, the port numbers of other remote programs can be ascertained by querying the port mapper.</PARAGRAPH>
<PARAGRAPH>The port mapper also aids in broadcast RPC. A given RPC program will usually have different port number bindings on different machines, so there is no way to directly broadcast to all of these programs. The port mapper, however, does have a fixed port number. To broadcast to a given program, the client actually sends its message to the port mapper located at the broadcast address. Each port mapper that picks up the broadcast then calls the local service specified by the client. When the port mapper gets the reply from the local service, it sends the reply back to the client.</PARAGRAPH>
<SECTION2 LBL="" HELPID = ""><TITLE>Port Mapper Protocol Specification</TITLE><PARAGRAPH>The following specifies the Port Mapper Protocol (in RPC language):</PARAGRAPH>
<CODE>
const PMAP_PORT = 111;      /* portmapper port number */ 

/*
&space;* A mapping of (program, version, protocol) to port number
&space;*/ 
struct mapping {
&space;   unsigned int prog;
&space;   unsigned int vers;
&space;   unsigned int prot;
&space;   unsigned int port; 
}; 

/* 
&space;* Supported values for the "prot" field
&space;*/ 
const IPPROTO_TCP = 6;      /* protocol number for TCP/IP */ 
const IPPROTO_UDP = 17;     /* protocol number for UDP/IP */ 

/*
&space;* A list of mappings
&space;*/ 
struct *pmaplist {
&space;   mapping map;
&space;   pmaplist next; 
}; 

/*
&space;* Arguments to callit
&space;*/ 
struct call_args {
&space;   unsigned int prog;
&space;   unsigned int vers;
&space;   unsigned int proc;
&space;   opaque args&lt;>; 
};  

/*
&space;* Results of callit
&space;*/ 
struct call_result {
&space;   unsigned int port;
&space;   opaque res&lt;>; 
}; 

/*
&space;* Port mapper procedures
&space;*/ 
program PMAP_PROG {
&space;   version PMAP_VERS {
&space;       void 
&space;       PMAPPROC_NULL(void)         = 0;
&space;       bool
&space;       PMAPPROC_SET(mapping)       = 1;
&space;       bool
&space;       PMAPPROC_UNSET(mapping)     = 2;
&space;       unsigned int
&space;       PMAPPROC_GETPORT(mapping)   = 3;
&space;       pmaplist
&space;       PMAPPROC_DUMP(void)         = 4;
&space;       call_result
&space;       PMAPPROC_CALLIT(call_args)  = 5;
&space;   } = 2; 
} = 100000; 
</CODE>
</SECTION2>
<SECTION2 LBL="" HELPID = ""><TITLE>Port Mapper Operation</TITLE><PARAGRAPH>The port mapper program currently supports two protocols (UDP/IP and TCP/IP). The port mapper is contacted by talking to it on assigned port number 111 (<VARIABLE>sunrpc</VARIABLE> in <FILENAME>/etc/services</FILENAME>) on either of these protocols. </PARAGRAPH>
<PARAGRAPH><XREF IDREF="24589" TYPE="TABLE">Table&nbsp;A-1</XREF> contains a description of each port mapper procedure. </PARAGRAPH>
<TABLE COLUMNS="2"><CAPTION LBL="A-1"><PREFIX>Table A-1 </PREFIX>&space;<EMPHASIS>(continued)        </EMPHASIS><XREFTARGET ID="24589">Port Mapper Procedures</CAPTION>
<TABLEHEADING><CELL LEFT="0" WIDTH="126"><PARAGRAPH>Procedure</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>Description</PARAGRAPH>
</CELL>
</TABLEHEADING>
<TABLEBODY><ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_NULL</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>This procedure does not do any work. By convention, procedure 
zero of any protocol takes no parameters and returns no results. </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_SET</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>When a program first becomes available on a machine, it 
registers itself with the port mapper program on the same 
machine. The program passes its program number <VARIABLE>prog</VARIABLE>, version 
number <VARIABLE>vers</VARIABLE>, transport protocol number <VARIABLE>prot</VARIABLE>, and the port <VARIABLE>port</VARIABLE> 
on which it awaits a service request. The procedure returns a 
boolean response whose value is TRUE if the procedure 
successfully established the mapping, and FALSE otherwise. 
The procedure refuses to establish a mapping if one already 
exists for the tuple &ldquo;(<VARIABLE>prog</VARIABLE>, <VARIABLE>vers</VARIABLE>, <VARIABLE>prot</VARIABLE>).&rdquo;</PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_UNSET</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>When a program becomes unavailable, it should unregister itself 
with the port mapper program on the same machine. The 
parameters and results have meanings identical to those of 
PMAPPROC_SET. The protocol and port number fields of the 
argument are ignored. </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_GETPORT</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>Given a program number <VARIABLE>prog</VARIABLE>, version number <VARIABLE>vers</VARIABLE>, and 
transport protocol number prot, this procedure returns the port 
number on which the program is awaiting call requests. A port 
value of zero means the program has not been registered. The 
<VARIABLE>port</VARIABLE> field of the argument is ignored. </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_DUMP </PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>This procedure enumerates all entries in the port mapper's 
database. The procedure takes no parameters and returns a list 
of program, version, protocol, and port values. </PARAGRAPH>
</CELL>
</ROW>
<ROW><CELL LEFT="0" WIDTH="126"><PARAGRAPH>PMAPPROC_CALLIT</PARAGRAPH>
</CELL>
<CELL LEFT="135" WIDTH="259"><PARAGRAPH>This procedure allows a caller to call another remote procedure 
on the same machine without knowing the remote procedure's 
port number. It is intended for supporting broadcasts to 
arbitrary remote programs via the well-known port mapper's 
port. The parameters <VARIABLE>prog</VARIABLE>, <VARIABLE>vers</VARIABLE>, <VARIABLE>proc</VARIABLE>, and the bytes of <VARIABLE>args</VARIABLE> are the 
program number, version number, procedure number, and 
parameters of the remote procedure.</PARAGRAPH>
<PARAGRAPH>This procedure sends a response only if the procedure was 
successfully executed and is silent (no response) otherwise.</PARAGRAPH>
<PARAGRAPH>The port mapper communicates with the remote program using 
UDP/IP only.</PARAGRAPH>
<PARAGRAPH>The procedure returns the remote program's port number, and 
the bytes of results are the results of the remote procedure.</PARAGRAPH>
</CELL>
</ROW>
</TABLEBODY>
</TABLE>
</SECTION2>
</SECTION1>
</APPENDIX>
