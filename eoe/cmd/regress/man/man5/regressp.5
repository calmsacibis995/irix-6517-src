'\"macro stdmacro
.if n .pH man5.regressp @(#)regressp 1.0 of 5/2/94
.TH REGRESSP 5
.SH NAME
\f4regressp\fP \- describes how to add tests to regressp's framework
.SH DESCRIPTION
.P
.B regressp
is a simple facility to preserve functional or regression style
tests for future application.
.PP
Because it is important for engineers to place their tests into the
.B regressp
framework, this system is designed to make it as easy as
possible for tests to be added; if there were lots of rules
that needed to be followed, many engineers simply would not submit their
tests.  Therefore, there are only three simple rules:
.RS 5
.HP
1) Tests should be self-contained.
.PD 0
.HP
2) Absolute paths should not be referenced in a test.
.HP
3) Standardized error reporting should be used (non-zero exit status on
error is required).
.RE
.PD
.PP
Although this provides a minimal set of rules to follow, there are some
additional facilities that the
.B regressp
framework provides:
.RS 5
.HP
- Ability to specify a ``configuration'' program to control execution of a
test or a group of tests.
.PD 0
.HP
- Ability to provide standard reporting.
.HP
- Convenient removal of temporary files that are created by the
test programs.
.HP
- Convenient placement of permanent files which are uniquely placed
for each invocation of \fBregressp\fP.
.RE
.PD

.SH "REGRESSP STRUCTURE"
Tests are structured hierarchically in directories, which reflect functional
grouping.  An example of this would be the placement of a directory
containing the virtual memory tests under the os directory.
.PP
New tests and directories are easily added: to add a new test, simply
place the files corresponding to a test in the tree and modify the
makefile for the corresponding directory.  To create a new
directory for tests, copy the makefile from the parent's directory to the
new directory and edit the appropriate macros (there should be enough
comments in the Makefile for it to be self-explanatory).

.SH "CONFIGURATION FILES"
The ability to configure which tests are executed based on rules contained
in configuration files is one of the key features of \fBregressp\fP.
There are actually two types of configuration files:
directory configuration files and test configuration files.  As explained
in \fBregressp\fP(1), the 
.I CONF
file is executed before running tests in a directory.  If the exit value of
this program in non-zero, then the directory is skipped altogether.
Similarly, before an individual test is executed, the corresponding
``.conf'' file is executed.  If the exit value of this program is non-zero,
then the test is not run.
.PP
In all cases, if a configuration file does not exist or is not runnable
(permissions are not set, etc.), then it is assumed that the corresponding
directory or test is configured.

.SH "TEST_FILES"
Normally,
.B regressp
assumes that any executable in a directory that is not a configuration file
is a test.  If a test-writer wants to create a ``controller script'' that
contains calls to other executables in the same directory that require
command-line arguments or a ``controller script'' that allows for parallel
execution of tests, then a mechanism is needed to make sure that the
supporting executables are not called directly by \fBregressp\fP.  This is
done by the use of a
.I TEST_FILES
file which contains the names of the tests that should be executed
in the containing directory.

.SH "INFO FILES"
When inserting a new test into the framework, a ``*.info'' file should
accompany it.  This file is a short description of what the test is trying
to accomplish.  Additionally, a directory may contain an
.I INFO
file that describes what types of tests the directory contains (particularly
useful if the directory name is somewhat ambiguous).

.SH "STANDARDIZED REPORTING"
There are two different types of reporting that should be standardized: the
exit value from a test to indicate whether a test succeeded or failed, and
any messages that a test may print out while it is running (such as the
reason for a failure or configuration information).
.PP
Standardization of the exit value from a test is simple: if a test fails or
has an error of some sort, the test should exit with a non-zero value.  If
the test succeeds, then the test should exit with a value of zero.  Since
this is the simplest method for a test-writer to communicate the status of
a test, this is how
.B regressp
determines how the test fared.
.PP
To standardize messages that a test may print out, messages should be
printed to stdout and should be of the following format:
.RS 4
<TYPE_OF_MESSAGE>: <message_text>
.RE
.PP
There are three environment variables that contain the absolute paths of
shell scripts that help with this standardization:  \fBERROR\fP,
\fBWARNING\fP, \fBINFO\fP.  The scripts pointed to by these environment
variables print out ``ERROR'', ``WARNING'' or ``INFO'', followed by the
rest of the arguments passed to the script.  If possible, these scripts
should be used for all output from within shell scripts.  For compiled
code, either use one of the library routines (not currently implemented) or
make sure that output messages conform to the above format.

.SH "TEMPORARY AND PERMANENT FILES"
.TP
.B TMPDIR
This unique directory is created at runtime and can be used to place all
temporary files that may be created during testing.  All files in TMPDIR
will be recursively removed when
.B regressp
terminates (either normally or abnormally).
.B regressp
checks to see if TMPDIR is already defined.  If so, the newly created
directory is placed underneath it.  Otherwise, the directory is placed in the
default temporary directory, /usr/regress/tmp.
If executed with the
.B \-v
option,
.B regressp
prints out the value of this variable.  
.TP
.B TESTSAVE
This unique directory is also created at runtime.  The value of this
variable is always printed out so that if the
.B \-l
option has been specified, the user will know where to locate the LOG 
file upon completion of the tests.  In an effort to remove directory
clutter, TESTSAVE will be removed if it is empty when
.B regressp
terminates.

.SH FILES
.TP
CONF -
This file, which is optional, is used to determine whether or
not
.B regressp
should enter a particular directory.  Since it is executed before any tests
in the directory (or in any subdirectories), it can be used to set up any
directory-wide invariants.
.TP
*.conf -
These files, which are optional,  are similar to the
.I CONF
file except that they are used to determine if an individual test should
be executed.
.TP
TEST_FILES -
This file, if present, specifies which of the files in the current
directory
.B regressp
should run as tests.
.TP
INFO -
This file, which is optional, describes the types of tests to
be found in a directory.
.TP
*.info - These files, which should be present but are not required,
describe an individual test.

.SH "SEE ALSO"
regressp(1).

.SH AUTHOR
Jonathan Thompson - jt@engr.sgi.com

.SH NOTES
.B regressp
uses a depth-first traversal while executing tests (tests in deeper
directories are run before tests in more shallow directories) but a
"top-down" execution of
.I CONF
files.  In other words, there may be an
arbitrarily large amount of processing that occurs between when a
.I CONF
file is executed and when the tests in that directory are actually
executed.
