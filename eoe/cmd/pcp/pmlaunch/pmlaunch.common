#
# pmlaunch scripts
#
# These shell procedures should be included by any scripts used
# for launching tools from tools which support the pmlaunch(5)
# metric specification format.
#
# By including this file, the shell script automatically parses
# the pmlaunch file from its stdin, and generates several files
#
# $Id: pmlaunch.common,v 1.32 1997/11/28 03:22:21 markgw Exp $

# Some degree of paranoia here ...
PATH=/usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin:/usr/pcp/bin:/usr/bin/X11
export PATH

TRACE=${PMLAUNCH_TRACE+true}
DUMP=${PMLAUNCH_DUMP+true}

if [ "${PMLAUNCH_CHECK+yes}" = yes ]
then
    LAUNCH=echo
else
    LAUNCH=eval
fi

export PCP_STDERR
[ -z "$PCP_STDERR" ] && PCP_STDERR=DISPLAY
[ "$PCP_STDERR" = DISPLAY -a -z "$DISPLAY" ] && unset PCP_STDERR

# diagnostic over-ride to ensure messages are sent to std error
#
${PCP_CAPTURE_MESSAGES-false} && PCP_STDERR=

TRACE_INIT=false		# boolean
tmp=${TMPDIR-/var/tmp}/$$	# prefix of temporary files

trap "rm -f $tmp.*; exit" 0 1 2 3 15

# tmp files
#
file_trace=${PMLAUNCH_FILE}
[ -z "$file_trace" ] && file_trace=${TMPDIR-/var/tmp}/pmlaunch.trace

file_conf=$tmp.conf		# original configuration file
file_metrics=$tmp.metrics	# all the metric specs

progname=`basename $0`		# name of program
launch_version=			# version of config from launching tool
version=			# version of config file passed to launch
				# scripts

target=				# where I think the target is

opt_namespace=			# known options
opt_timeport=
opt_starttime=
opt_endtime=
opt_offset=
opt_interval=
opt_timezone=
opt_defsourcetype=
opt_defsourcename=
opt_progname=
opt_pid=
opt_selected=
flag_debug=			# known PCP flags
flag_namespace=
flag_timeport=
flag_starttime=
flag_endtime=
flag_offset=
flag_interval=
flag_timezone=
flag_defsource=

# standard fatal error reporting
# Usage: _pmlaunch_error message goes in here
#
_pmlaunch_error()
{
    _pmlaunch_note Error error $*
}

# standard warning
# Usage: _pmlaunch_warning message goes in here
#
_pmlaunch_warning()
{
    _pmlaunch_note Warning warning $*
}

# standard info
# Usage: _pmlaunch_info message goes in here
#
_pmlaunch_info()
{
    _pmlaunch_note Info info $*
}

# generic notifier
# Usage: _pmlaunch_note tag icon args ...
#
_pmlaunch_note()
{
    tag=$1; shift
    icon=$1; shift
    button=""
    [ $tag = Error ] && button="-B Quit"

    _trace "$icon" "$*"
    case "$PCP_STDERR"
    in
	"DISPLAY")
	    /usr/bin/X11/xconfirm -icon $icon -t "$*" -noframe -header "$tag $progname" $button >/dev/null 2>&1
	    ;;
	"")
	    echo "$tag: $*" >&2
	    ;;
	*)
	    echo "$tag: $*" >>$PCP_STDERR
	    ;;
    esac

    [ $tag = Error ] && exit 1
}

# output some trace information of the form $1=$2
# USAGE: _trace description value
#
_trace()
{
    $TRACE || return

    if $TRACE_INIT
    then
	:
    else
	TRACE_INIT=true
	if [ ! -f $file_trace ]
	then
	    touch $file_trace
	    chmod 777 $file_trace
	fi
	echo >> $file_trace
	echo "================= `date` ====================" >> $file_trace
	echo "script:   $progname" >> $file_trace
	echo "cwd:      `pwd`" >> $file_trace
	echo "launcher: $LAUNCH" >> $file_trace
    fi
    echo "+ $1: $2" >> $file_trace
}

# dump a generated file into the trace file
# USAGE: _dump filename
#
_dump()
{
    $DUMP || return

    if $TRACE_INIT
    then
	:
    else
	_trace "File dumps" "on"
    fi

    echo "dump:     --- $1 $2 ---" >> $file_trace
    cat $1 >> $file_trace
    echo "end:      --- $1 ---" >> $file_trace
}

# pipes configuration file from stdin to $file_conf
# Usage: _setup
#
_setup()
{
    rm -f $file_conf $file_metrics
    touch $file_conf $file_metrics

    cat >> $file_conf

    _dump $file_conf "(config from launching app)"

    version=`head -1 $tmp.conf | nawk '
			{ ver = "" }
/^pmlaunch Version/	{ if (NF == 3) ver = $3 }
END			{ print ver }'`

    launch_version=$version

    if [ "X$version" = "X" ]
    then
	_pmlaunch_warning "No version string found, assuming version 1.0"
	version=1.0
	launch_version=1.0
    elif [ "X$version" != "X1.0" -a "X$version" != "X2.0" ]
    then
	_pmlaunch_error "pmlaunch configiration was version $version, not 1.0 or 2.0"
	# NOTREACHED
    fi

    if [ "X$version" = "X1.0" ]
    then
	rm -f $tmp.conf.v1
	cp $file_conf $tmp.conf.v1

	nawk -v version=$version < $tmp.conf.v1 > $file_conf '
NF >= 15	{ if ($1 != "metric")
		    next
		  if (version == 1.0) {
		    for (i = 1; i < 11; i++)
		      printf "%s ", $i
		    printf "- - - - -"
		    for (i = 11; i <= NF; i++)
		      printf " %s", $i
		    printf "\n"
		  }
		  else {
		    print $0
		  }
		  next
		}
		{ print $0 }'

	rm -f $tmp.conf.v1
	version=2.0
	_trace "Converted specification to current format" $version
    fi

    egrep '^metric' < $file_conf > $file_metrics

    _dump $file_metrics "(extracted metric specifications)"
    _trace "Setup done, config version" $version
}

# generate options
# USAGE: _parse_options
#
_parse_options()
{
    eval `egrep '^option' < $file_conf | sed -e 's/option //' | nawk -F'=' '
function parseArg(flagname, flag, out) {
				  if (length(out) > 0) {
				    gsub("\"","",out);
				    printf("flag_%s=\"-%s '\''%s'\''\"\n", flagname, flag, out);
				  }
				}
				{ printf "opt_%s=\"%s\"\n", $1, $2 }
tolower($1) == "debug"		{ parseArg("flag_debug", "D", $2);
				  next }
tolower($1) == "namespace"	{ parseArg("namespace", "n", $2);
				  next }
tolower($1) == "timeport"	{ parseArg("timeport", "p", $2);
				  next }
tolower($1) == "starttime"	{ parseArg("starttime", "S", $2);
				  next }
tolower($1) == "endtime"	{ parseArg("endtime", "T", $2);
				  next }
tolower($1) == "offset"		{ parseArg("offset", "O", $2);
				  next }
tolower($1) == "interval"	{ parseArg("interval", "t", $2);
				  next }
tolower($1) == "timezone"	{ parseArg("timezone", "Z", $2);
				  next }
'`

    if [ -n "$opt_defsourcename" -a -n "$opt_defsourcetype" ]
    then
	flag_defsource="-$opt_defsourcetype $opt_defsourcename"
    fi

    _trace "Option variables generate from" "$file_conf"
    _trace flag_debug "$flag_debug"
    _trace flag_defsource "$flag_defsource"
    _trace flag_endtime "$flag_endtime"
    _trace flag_interval "$flag_interval"
    _trace flag_namespace "$flag_namespace"
    _trace flag_offset "$flag_offset"
    _trace flag_starttime "$flag_starttime"
    _trace flag_timeport "$flag_timeport"
    _trace flag_timezone "$flag_timezone"
}

# Output the list of sources for a context type
# Usage: _listSources [ 'a' | 'h' ]
#
_listSources()
{
    nawk -v source=$1 < $file_metrics '
$5 == source	{ print $6 }' | 
    sort | 
    uniq
}

# Output instance list for a particular source
# Usage: _instancesFromSource [ 'a' | 'h' ] source
_instancesFromSource()
{
    nawk -v context=$1 -v source=$2 < $file_metrics '
$5 == context && $6 == source	{ print $0 }' |
    cut -d' ' -f20- | 
    sed -e 's/^\[//' | 
    sed -e 's/\].*//' | 
    sort | 
    uniq
}

# Output metric list for a particular source
# Usage: _metricsFromSource [ 'a' | 'h' ] source
_metricsFromSource()
{
    nawk -v context=$1 -v source=$2 < $file_metrics '
$5 == context && $6 == source	{ print $8 }' |
    sort | 
    uniq
}

# Output group list for a particular source
# Usage: _groupsFromSource [ 'a' | 'h' ] source
_groupsFromSource()
{
    nawk -v context=$1 -v source=$2 < $file_metrics '
$5 == context && $6 == source	{ print $3 }' |
    sort | 
    uniq
}

# Output instance list for a particular source and metric
# Usage: _instancesFromSourceMetric [ 'a' | 'h' ] source metric
_instancesFromSourceMetric()
{
    nawk -v context=$1 -v source=$2 -v metric=$3 < $file_metrics '
$5 == context && $6 == source && $8 == metric	{ print $0 }' |
    cut -d' ' -f20- | 
    sed -e 's/^\[//' | 
    sed -e 's/\].*//' | 
    sort | 
    uniq
}

# Check the integrity of the input file.
# Usage: _checkInputFile
_checkInputFile()
{
    err_msg=`nawk < $file_conf '
BEGIN		{ err = 0;
		  metric = 0;
		  option = 0
		}
NF == 0		{ next }
/^#/		{ next }
/^pmlaunch/	{ next }
/^metric/	{ metric++; 
		  if (NF < 20) {
		    printf("Illegal metric specification on line %d, expected 20 fields not %d\n",
			   NR, NF);
		    err = 1; exit 1;
		  }
		  if ($5 != "h" && $5 != "a") {
		    printf("Illegal context specification on line %d, expected \"h\" or \"a\" not \"%s\"\n", NR, $5);
		    err = 1; exit 1;
		  }
		  if ($9 != "S" && $9 != "D") {
		    printf("Illegal color specification on line %d, expected \"S\" or \"D\" not \"%s\"\n", NR, $9);
		    err = 1; exit 1;
		  }
		  if (NF >= 20 && (substr($20,1,1) != "[")) {
		    printf("Illegal instance specification on line %d, must begin with \"[\" not \"%s\"\n", NR, substr($20,1,1));
		    err = 1; exit 1;
		  }
		  next;
		}
/^option/	{ option++; 
		  if (NF < 2) {
		    printf("Illegal option specification on line %d\n", NR);
		    err = 1; exit 1;
		  }
		  next;
		}
		{ printf("Syntax error on line %d, %s unexpected\n", NR, $1);
		  err = 1; exit 1;
		}
END		{ if (err == 0) {
		    if (metric == 0)
		      printf("No metrics specified\n");
		    else if (option == 0)
		      printf("No options specified\n");
		  }
		}'`

    if [ -n "$err_msg" ]
    then
	_pmlaunch_error "$err_msg"
	# NOTREACHED
    else
	_trace "No errors in spec file" "$file_conf"
    fi
}

# _pmlaunch_work command
#
_pmlaunch_work()
{

    if type $1 >$tmp.type 2>&1
    then
	target=`awk < $tmp.type '{ print $3 }'`	
    else
	_pmlaunch_error "Cannot find executable \"$1\" on \$PATH"
	# NOTREACHED
    fi

    # Generate default files
    _setup

    # check the integrity of the input file
    _checkInputFile

    # Parse the command line options
    _parse_options
}
