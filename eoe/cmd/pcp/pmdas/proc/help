#
# $Revision: 2.9 $
#
# proc PMDA help file in the ASCII format
#
# lines beginning with a # are ignored
# lines beginning @ introduce a new entry of the form
#  @ metric-name oneline-text
#  help test goes
#  here over multiple lines
#  ...
#
# the metric-name is decoded against the default PMNS -- as a special case,
# a name of the form NNN.MM (for numeric NNN and MM) is interpreted as an
# instance domain identification, and the text describes the instance domain
#
# blank lines before the @ line are ignored
#

@ proc.nprocs number of processes
The current number of processes.

@ proc.psinfo.state per-process  numeric process state (see pr_sname) 
The numeric state (scheduling state) of the process, taken from the
pr_state field in struct prpsinfo (see /usr/include/sys/procfs.h).

The possible values are as follows:

SSLEEP:  1               Awaiting an event.
SRUN:    2               Running.
SZOMB:   3               Process terminated but not waited for
SSTOP:   4               Process stopped by signal
SIDL:    5               Intermediate state in process creation.
SXBRK:   7               Process being xswapped

@ proc.psinfo.sname per-process printable character representing pr_state
The printable state (scheduling state) of a process, taken from the
pr_sname field in struct prpsinfo (see /usr/include/sys/procfs.h).

The possible values are:
SSLEEP:    'S'          Awaiting an event.
SRUN:      'R'          Running.
SZOMB:     'Z'          Process terminated but not waited for
SSTOP:     'T'          Process stopped by signal
SIDL:      'I'          Intermediate state in process creation.
SXBRK:     'X'          Process being xswapped

@ proc.psinfo.zomb if non-zero, process terminated but not waited for
Flag indicating the process is in a zombie state (if nonzero); i.e. the
process has terminated but there is no process waiting for it.

The value is taken from the pr_zomb field of struct prpsinfo (see
/usr/include/sys/procfs.h).

@ proc.psinfo.nice per-process nice for cpu usage
The nice setting of the priority of the process, taken from the pr_nice
field of struct prpsinfo (see /usr/include/sys/procfs.h).

@ proc.psinfo.flag per-process process flags 
Process flags, taken from the pr_flag field of struct prpsinfo (see
/usr/include/sys/procfs.h).

The value is a bitmap formed from values like:
 #define PR_STOPPED      0x0001  /* process is stopped */
 #define PR_ISTOP        0x0002  /* process is stopped on event of
				    interest */
 #define PR_DSTOP        0x0004  /* process has stop directive in
				    effect */
 ...
For a complete list of the values please refer to
/usr/include/sys/procfs.h.

See also proc.pstatus.flags.

@ proc.psinfo.uid per-process real user id
The real user identification of the process owner.  This is taken from
the pr_uid field of struct prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pscred.ruid.

@ proc.psinfo.gid per-process real group id
The real group identification of the process.

This is taken from the pr_gid field of struct prpsinfo (see
/usr/include/sys/procfs.h).

See also proc.pscred.rgid.

@ proc.psinfo.pid per-process unique process id
The unique process identifier, taken from the pr_pid field of struct
prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pstatus.pid.

@ proc.psinfo.ppid per-process process id of parent
The unique parent process identifier, taken from the pr_ppid field of
struct prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pstatus.ppid.

@ proc.psinfo.pgrp per-process pid of process group leader
The unique process identifier of the process group leader, taken from
the pr_pgrp field of struct prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pstatus.pgrp.

@ proc.psinfo.sid per-process session id 
The process session identifier, taken from the pr_sid field of struct
prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pstatus.sid.

@ proc.psinfo.addr per-process physical address of process
This metric is taken from the pr_addr field of struct prpsinfo (see
/usr/include/sys/procfs.h).

It *may* be the physical address of the proc_t entry for the process
(at least this is the only interpretation that makes any sense).

@ proc.psinfo.size per-process size of process image
The total virtual size of the process, in Kbytes, taken from the
pr_size field of struct prpsinfo (see /usr/include/sys/procfs.h).

This value is the value reported by ps(1) in the SZ field, however,
ps(1) reports in units of pages instead of Kbytes. It is also the
length reported by "ls -l" of the process in /proc, however, ls(1)
reports in units of bytes instead of Kbytes.

See also proc.psusage.size.

@ proc.psinfo.rssize per-process resident set size
The total resident set size of the process, in Kbytes, taken from the
pr_rssize field of struct prpsinfo (see /usr/include/sys/procfs.h).

This value is the value reported by ps(1) in the RSS field, however,
ps(1) reports in units of pages instead of Kbytes.

This value reported by ps(1) is not pro-rated over all the types of
pages.  According to the ps(1) manual page, it is only pro-rated over
the shared parts of forked children and for shared memory. The
proc.memory.physical metrics, however, are pro-rated for the different
types of pages and thus when added together do not generally equal the
rss value.

See also proc.psusage.rss.

@ proc.psinfo.wchan per-process wait addr for sleeping process
The address of the semaphore the process is currently waiting for,
taken from the pr_wchan field of struct prpsinfo (see
/usr/include/sys/procfs.h).

@ proc.psinfo.wname name associated with psinfo.wchan
The name of the semaphore the process is currently waiting for, taken
from the pr_wname field of struct prpsinfo (see
/usr/include/sys/procfs.h).


@ proc.psinfo.start per-process process start time since epoch
The time the process started, in seconds since the epoch, taken from
the pr_start field of struct prpsinfo (see /usr/include/sys/procfs.h).

See also proc.psusage.starttime.

@ proc.psinfo.time per-process usr+sys cpu time for this process
CPU usage of the process (user plus system time), in milliseconds,
taken from the pr_time field of struct prpsinfo (see
/usr/include/sys/procfs.h).

When converted to a rate as is done in most PCP tools (e.g. pmchart,
pmview, pmie), this will effectively give the percentage cpu usage of
the process.

See also proc.pstatus.utime, proc.pstatus.stime, proc.psusage.utime,
proc.psusage.stime, proc.accounting.timers.utime and
proc.accounting.timers.stime.

@ proc.psinfo.pri per-process priority, high value is high priority 
The scheduling priority of a process, where a higher value represents
higher priority, taken from the pr_pri field of struct prpsinfo (see
/usr/include/sys/procfs.h).

@ proc.psinfo.oldpri per-process pre-SVR4, low value is high priority 
The pre-SVR4 scheduling priority of a process, where a lower value
represents higher priority, taken from the pr_oldpri field of struct
prpsinfo (see /usr/include/sys/procfs.h).

@ proc.psinfo.cpu per-process pre-SVR4, cpu usage for scheduling
The pre-SVR4 cpu usage of the process, taken from the pr_cpu field of
struct prpsinfo (see /usr/include/sys/procfs.h).

It is worth noting that the instantaneous percentage cpu number
reported by this metric is not the same as the rate converted
proc.psinfo.time value as one might expect.  When looking at processes
taking up 10%, 20%, 30%, and 40% of cpu, proc.psinfo.cpu reports usages
of around 15%, 30%, 50%, and 60-70% respectively. It is thus
recommended to use the rate converted proc.psinfo.time metric inorder
to look at cpu usage; it will report the values one would expect.

@ proc.psinfo.ttydev per-process controlling tty device (PRNODEV if none)
The controlling tty device (PRNODEV if none) of the process.  Returned
value is an aggregate byte string of type dev_t, taken from the
pr_ttydev field of struct prpsinfo.  (see /usr/include/sys/procfs.h).

@ proc.psinfo.clname per-process scheduling class name
The scheduling class name of the process, taken from the pr_clname
field of struct prpsinfo (see /usr/include/sys/procfs.h).

Returned value is a NULL terminated string of characters.

See also proc.pstatus.clname.

@ proc.psinfo.fname per-process last component of exec()ed pathname
The basename component of the exec'ed pathname of the process, taken
from the pr_fname field of struct prpsinfo (see
/usr/include/sys/procfs.h).

Returned value is a NULL terminated string of characters.

@ proc.psinfo.psargs per-process initial characters of arg list
The process name and arguments, taken from the pr_psargs field of
struct prpsinfo (see /usr/include/sys/procfs.h).

Returned value is a NULL terminated string of characters. The string is
truncated to at most PRARGSZ characters.

@ proc.psinfo.uname per-process user name of process owner
The user name of process owner (string version of proc.psinfo.uid).

The returned value is a NULL terminated string.

@ proc.psinfo.gname per-process group name of process group 
The group name of process group (string version of proc.psinfo.gid).

The returned value is a NULL terminated string.

@ proc.psinfo.ttyname per-process name of controlling tty ("?" if none)
The name of the controlling tty of the process ("?" if none) This is a
string version of proc.psinfo.ttydev.  Note: the alternate/aliased pty
names in /dev/pts are NOT returned.

The returned value is a NULL terminated string, truncated to at most 16
characters.

@ proc.psinfo.ttymajor per-process major device number of controlling tty
The major device number of the controlling tty, taken from the
pr_ttydev field of struct prpsinfo, using the ``major'' macro to
extract the major device number from the dev_t.

This is included for insulation from changes in the structure or
semantics of dev_t (see /usr/include/sys/procfs.h).

@ proc.psinfo.ttyminor per-process minor device number of controlling tty
The minor device number of the controlling tty, taken from the
pr_ttydev field of struct prpsinfo, using the ``minor'' macro to
extract the minor device number from the dev_t.

This is included for insulation from changes in the structure or
semantics of dev_t (see /usr/include/sys/procfs.h).

@ proc.psinfo.ctime per-process user+system CPU time for all children
The summed user and system CPU time in milliseconds used by all
children of this process.  Taken from the pr_ctime field of struct
prpsinfo (see /usr/include/sys/procfs.h).

See also proc.pstatus.cutime and proc.pstatus.cstime.

@proc.psinfo.shareuid user id of ShareII Lnode for process
The user identification from the ShareII lNode for the process, taken
from the pr_shareuid field of struct prpsinfo (see
/usr/include/sys/procfs.h).

@proc.psinfo.pset associated processor set name for process
The processor set identifier for the process, taken from the pr_pset
field of struct prpsinfo (see /usr/include/sys/procfs.h).

@proc.psinfo.sonproc processor the process is running on
The processor number the process is currently running on.  If the value
is less than zero, the process is not currently running. The value is
taken from the pr_sonproc field of struct prpsinfo (see
/usr/include/sys/procfs.h).

@proc.psinfo.spid sproc id of process
The sproc process identifier for the process. The value is taken from
the pr_spid field of struct prpsinfo (see /usr/include/sys/procfs.h).

@proc.psinfo.qtime usr+sys cpu time of process
CPU usage of the process (user plus system time), in milliseconds,
taken from the pr_qtime field of struct prpsinfo (see
/usr/include/sys/procfs.h).

This value is normally the same value as proc.psinfo.time but in
unusual cases, for certain type of sprocs, can be a different value.

@proc.psinfo.thds number of threads of process
The number of threads of the process, taken from the pr_thds field of
struct prpsinfo (see /usr/include/sys/procfs.h).

@ proc.pstatus.flags per-process process flags
Process flags, taken from the pr_flags field of struct prstatus (see
/usr/include/sys/procfs.h).

The value is a bitmap formed from values like:
 #define PR_STOPPED      0x0001  /* process is stopped */
 #define PR_ISTOP        0x0002  /* process is stopped on event of
				    interest */
 #define PR_DSTOP        0x0004  /* process has stop directive in
				    effect */
 ...
For a complete list of the values please refer to
/usr/include/sys/procfs.h.

See also proc.psinfo.flag.

@ proc.pstatus.why reason for process stopped (if stopped)
An integer indicating why a process has stopped (if it has stopped),
taken from the pr_why field of struct prstatus (see
/usr/include/sys/procfs.h).

The possible values are:

 #define PR_REQUESTED    1       /* in the interest of binary */
 #define PR_SIGNALLED    2       /* compatibility PR_REQUESTED thru */
 #define PR_SYSENTRY     3       /* PR_SYSEXIT match the prior */
 #define PR_SYSEXIT      4       /* settings from proc.h */
 #define PR_FAULTED      5
 #define PR_JOBCONTROL   6

@ proc.pstatus.what more detailed reason for process stopped (if stopped)
If proc.pstatus.why is PR_FAULTED, then this metric is the reason the
process has faulted.

This metric is taken from the pr_what field of struct prstatus (see
/usr/include/sys/procfs.h), which is in turn taken from the p_whatstop
field of struct proc (see /usr/include/sys/proc.h).

The possible values are:

 #define FAULTEDWATCH           1
 #define FAULTEDKWATCH          2
 #define FAULTEDPAGEIN          3
 #define FAULTEDSTACK           4
 #define FAULTEDSCWATCH         5

@ proc.pstatus.cursig per-process current signal
The current signal number of the process, taken from the pr_cursig
field of struct prstatus (see /usr/include/sys/procfs.h).

@ proc.pstatus.sigpend per-process set of pending signals (sigset_t)
The set of pending signals for the process, taken from the pr_sigpend
field of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type sigset_t.

@ proc.pstatus.sighold per-process set of held signals (sigset_t)
The set of held signals for the process, taken from the pr_sighold
field of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type sigset_t.

@ proc.pstatus.info per-process info associated with signal or fault (struct siginfo)
The signal info associated with signal or fault for the process, taken
from the pr_info field of struct prstatus (see
/usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type struct siginfo.

@ proc.pstatus.altstack per-process alternate signal stack info (struct sigaltstack)
The alternate signal stack info of the process, taken from the
pr_altstack field of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type struct signalstack.

@ proc.pstatus.action per-process signal action for current signal (struct sigaction)
The signal action for current signal for the process, taken from the
pr_action field of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type struct sigaction.

@ proc.pstatus.syscall per-process system call number (if in syscall)
The number of the system call currently executing for the process,
taken from the pr_syscall field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.pstatus.nsysarg per-process number of arguments to this syscall
The number of arguments supplied to the system call currently executing
for the process, taken from the pr_nsysarg field of struct prstatus
(see /usr/include/sys/procfs.h).

@ proc.pstatus.errno per-process error number from system call
The error number of the system call currently executing for the
process, taken from the pr_errno field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.pstatus.rval1 per-process system call return value 1 
The first returned value of the system call currently executing for the
process, taken from the pr_rval1 field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.pstatus.rval2 per-process system call return value 2 
The second returned value of the system call currently executing for
the process, taken from the pr_rval2 field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.pstatus.sysarg per-process arguments to current syscall 
The arguments to the current system call executing for the process,
taken from the pr_sysarg field of struct prstatus (see
/usr/include/sys/procfs.h).

Returned value is an aggregate/array of long values of length
PRSYSARGS.

@ proc.pstatus.pid per-process process id 
The unique process identifier, taken from the pr_pid field of struct
prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.pid.

@ proc.pstatus.ppid per-process parent process id
The unique parent process identifier, taken from the pr_ppid field of
struct prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.ppid.

@ proc.pstatus.pgrp per-process process group id
The unique process identifier of the process group leader, taken from
the pr_pgrp field of struct prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.pgrp.

@ proc.pstatus.sid per-process session id
The process session identifier, taken from the pr_sid field of struct
prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.sid.

@ proc.pstatus.utime per-process process user cpu time 
The user CPU time of the process, in milliseconds, taken from the
pr_utime field of struct prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.time, proc.psusage.utime and
proc.accounting.timers.utime.

@ proc.pstatus.stime per-process process system cpu time
The system CPU time of the process, in milliseconds, taken from the
pr_stime field of struct prstatus (see /usr/include/sys/procfs.h).

See also proc.psinfo.time, proc.psusage.stime and
proc.accounting.timers.stime.

@ proc.pstatus.cutime per-process sum of children's user times
The sum of the user CPU time of children of the process, in
milliseconds, taken from the pr_cutime field of struct prstatus (see
/usr/include/sys/procfs.h).

See also proc.psinfo.ctime.

@ proc.pstatus.cstime per-process sum of children's system times
The sum of the system CPU time of children of the process, in
milliseconds, taken from the pr_cstime field of struct prstatus (see
/usr/include/sys/procfs.h).

See also proc.psinfo.ctime.

@ proc.pstatus.clname per-process scheduling class name
The scheduling class name of the process, taken from the pr_clname
field of struct prpstatus (see /usr/include/sys/procfs.h).

Returned value is a NULL terminated string of characters.

See also proc.psinfo.clname.

@ proc.pstatus.instr per-process current instruction
The current instruction for the process, taken from the pr_instr field
of struct prstatus (see /usr/include/sys/procfs.h).

@ proc.pstatus.reg per-process general registers (gregset_t)
The saved general registers of the process, taken from the pr_reg field
of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type gregset_t.

@ proc.pstatus.nthreads per-process number of kernel threads
The number of kernel threads of the process, taken from the pr_nthreads
field of struct prstatus (see /usr/include/sys/procfs.h).

@ proc.pstatus.thsigpend set of signals pending on thread
The set of signals pending on thread, taken from the pr_thsigpend field
of struct prstatus (see /usr/include/sys/procfs.h).

Returned value is an aggregate byte string of type sigset_t.

@ proc.pstatus.who which kernel thread has pending signals
Which kernel thread that the set of signals is pending on.  It is taken
from the pr_who field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.pscred.euid per-process effective user id
The effective user identifier of the process owner, taken from the
pr_euid field of struct pscred (see /usr/include/sys/procfs.h).

@ proc.pscred.ruid per-process real user id
The real user identifier of the process owner, taken from the pr_ruid
field of struct pscred (see /usr/include/sys/procfs.h).

See also proc.psinfo.uid.

@ proc.pscred.suid per-process saved user id (from exec)
The saved user identifier of the process owner, taken from the pr_suid
field of struct pscred (see /usr/include/sys/procfs.h).

@ proc.pscred.egid per-process effective group id 
The effective group identifier of the process, taken from the pr_egid
field of struct pscred (see /usr/include/sys/procfs.h).

@ proc.pscred.rgid per-process real group id 
The real group identifier of the process, taken from the pr_rgid field
of struct pscred (see /usr/include/sys/procfs.h).

See also proc.psinfo.gid.

@ proc.pscred.sgid per-process saved group id (from exec)
The saved group identifier of the process, taken from the pr_sgid field
of struct pscred (see /usr/include/sys/procfs.h).

@ proc.pscred.ngroups per-process number of supplementary groups
The number of supplementary groups of the process, taken from the
pr_ngroups field of struct prstatus (see /usr/include/sys/procfs.h).

@ proc.psusage.tstamp per-process time stamp
The time this metric was collected, in seconds since the epoch, taken
from the pu_tstamp field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.starttime per-process process start time since epoch 
The time the process started, in seconds since the epoch, taken from
the pu_starttime field of struct prusage (see
/usr/include/sys/procfs.h).

See also proc.psinfo.start.

@ proc.psusage.utime per-process user CPU time
The user CPU time of the process, in milliseconds, taken from the
pu_utime field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.psinfo.time, proc.pstatus.utime and
proc.accounting.timers.utime.

@ proc.psusage.stime per-process system CPU time
The system CPU time of the process, in milliseconds, taken from the
pu_stime field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.psinfo.time, proc.pstatus.stime and
proc.accounting.timers.stime.

@ proc.psusage.minf per-process minor (mapping) page faults
The number of minor (mapping) page faults incurred by the process,
taken from the pu_minf field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.majf per-process major (disk) page faults
The number of major (disk) page faults incurred by the process, taken
from the pu_majf field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.utlb per-process user TLB misses
The number of user mode TLB misses incurred by the process, taken from
the pu_utlb field of struct prusage (see /usr/include/sys/procfs.h).
This may always be zero for some versions of IRIX.

@ proc.psusage.nswap per-process number of swaps
The number of process swaps incurred by the process, taken from the
pu_nswap field of struct prusage (see /usr/include/sys/procfs.h).

@ proc.psusage.gbread per-process gigabytes read
The number of Gbytes read by the process, taken from the pu_gbread
field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.accounting.counts.chr.

@ proc.psusage.bread per-process bytes read
The number of bytes read by the process, taken from the pu_bread field
of struct prusage (see /usr/include/sys/procfs.h).

When proc.psusage.gbread is incremented after having read a gigabyte of
data, then proc.psusage.bread is reset to zero.

See also proc.accounting.counts.chr.

@ proc.psusage.gbwrit per-process gigabytes written
The number of Gbytes written by the process, taken from the pu_gbwrit
field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.accounting.counts.chw.

@ proc.psusage.bwrit per-process bytes written
The number of bytes written by the process, taken from the pu_bwrit
field of struct prusage (see /usr/include/sys/procfs.h).

When proc.psusage.gbwrit is incremented after having written a gigabyte
of data, then proc.psusage.bwrit is reset to zero.

See also proc.accounting.counts.chw.

@ proc.psusage.sigs per-process signals received
The number of signals received by the process, taken from the pu_sigs
field of struct prusage (see /usr/include/sys/procfs.h).

@ proc.psusage.vctx per-process voluntary context switches
The number of voluntary context switches incurred by the process, taken
from the pu_vctx field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.ictx per-process involuntary context switches
The number of involuntary context switches incurred by the process,
taken from the pu_ictx field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.sysc per-process system calls
The number of system calls made by the process, taken from the pu_sysc
field of struct prusage (see /usr/include/sys/procfs.h).

@ proc.psusage.syscr per-process read() system calls
The number of read system calls made by the process, taken from the
pu_syscr field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.accounting.counts.syscr.

@ proc.psusage.syscw per-process write() system calls
The number of write system calls made by the process, taken from the
pu_syscw field of struct prusage (see /usr/include/sys/procfs.h).

See also proc.accounting.counts.syscw.

@ proc.psusage.syscps per-process poll() or select() system calls 
The number of poll or select system calls made by the process, taken
from the pu_syscps field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.sysci per-process ioctl() system calls
The number of ioctl system calls made by the process, taken from the
pu_sysci field of struct prusage (see /usr/include/sys/procfs.h).

@ proc.psusage.graphfifo per-process graphics pipeline stalls
The number of graphics pipeline stalls incurred by the process, taken
from the pu_graphfifo field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.graph_req per-process graphics resource requests
The number of graphics resource requests stalls incurred by the
process, taken from the pu_graph_req field of struct prusage (see
/usr/include/sys/procfs.h).

Returned value is an aggregate/array of long values (length 8).

@ proc.psusage.graph_wait per-process graphics resource waits
The number of graphics resource waits incurred by the process, taken
from the pu_graph_wait field of struct prusage (see
/usr/include/sys/procfs.h).

Returned value is an aggregate/array of long values (length 8).

@ proc.psusage.size per-process size of process image
The total virtual size of the process, in Kbytes, taken from the
pu_size field of struct prstatus (see /usr/include/sys/procfs.h).

This value is the value reported by ps(1) in the SZ field, however,
ps(1) reports in units of pages instead of Kbytes. It is also the
length reported by "ls -l" of the process in /proc, however, ls(1)
reports in units of bytes instead of Kbytes.

See also proc.psinfo.size.

@ proc.psusage.rss per-process resident set size of process image
The total resident set size of the process, in Kbytes, taken from the
pu_rss field of struct prstatus (see /usr/include/sys/procfs.h).

This value is the value reported by ps(1) in the RSS field, however,
ps(1) reports in units of pages instead of Kbytes.

This value reported by ps(1) is not pro-rated over all the types of
pages.  According to the ps(1) manual page, it is only pro-rated over
the shared parts of forked children and for shared memory. The
proc.memory.physical metrics, however, are pro-rated for the different
types of pages and thus when added together do not generally equal the
rss value.

See also proc.psinfo.rssize.

@ proc.psusage.inblock per-process block input operations
The number of block input operations made by the process, taken from
the pu_inblock field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.psusage.oublock per-process block output operations
The number of block output operations made by the process, taken from
the pu_oublock field of struct prstatus (see
/usr/include/sys/procfs.h).

@ proc.psusage.ktlb per-process kernel TLB misses
The number of kernel mode TLB misses incurred by the process, taken
from the pu_ktlb field of struct prusage (see
/usr/include/sys/procfs.h).

@ proc.psusage.vfault total number of vfaults
Cumulative count for a process of translation lookaside buffer (TLB)
faults where the valid bit is not set in the page table entry.  This
occurs on the first reference to each page, for illegal references (as
in those that cause SIGSEGV or SIGBUS) and when the valid bit is
cleared by the kernel to emulate hardware reference counting as part of
the virtual memory management.  This number is taken from the pu_vfault
field of struct prusage (see /usr/include/sys/procfs.h).

@ proc.memory.virtual.txt per-process executable text virtual memory usage
The total virtual size, in Kbytes, of the executable text segments of
the process.

@ proc.memory.virtual.dat per-process initialized data virtual memory usage
The total virtual size, in Kbytes, of the initialized data segments of
the process.

@ proc.memory.virtual.bss per-process uninitialized data and break segment virtual memory usage
The total virtual size, in Kbytes, of the uninitialized data and break
segments of the process.

@ proc.memory.virtual.stack per-process stack segment virtual memory usage
The total virtual size, in Kbytes, of the stack segment of the
process.

@ proc.memory.virtual.shm per-process shared-memory segment virtual memory usage
The total virtual size, in Kbytes, of the shared memory segments
attached to the process.

@ proc.memory.physical.txt per-process executable text physical memory usage
The total physical (resident) memory usage, in kbytes, of the
executable text segments of the process, pro-rated between all
processes using the same text segments.

@ proc.memory.physical.dat per-process initialized data physical memory usage
The total physical (resident) memory usage, in kbytes, of the
initialized data segments of the process, pro-rated between all
processes using the same data segments.

@ proc.memory.physical.bss per-process uninitialized data and break segment physical memory usage
The total physical (resident) memory usage, in kbytes, of the
uninitialized data and break segments of the process, pro-rated between
all processes using the same segments.

@ proc.memory.physical.stack per-process stack segment physical memory usage
The total physical (resident) memory usage, in kbytes, of the stack
segment of the process.

@ proc.memory.physical.shm per-process shared-memory segment physical memory usage
The total physical (resident) memory usage, in kbytes, of the shared
memory segments attached to the process, pro-rated between all
processes attached to the same segments.

@ proc.accounting.flag per-process accounting flags
The accounting flags for the process.  The value is a bitmap formed
from the
following:

 #define AIF_FORK       0x80            /* has executed fork, but no
 exec */
 #define AIF_SU         0x40            /* used privilege */
 #define AIF_NOUSER     0x01            /* no user data: some fields
 invalid */

@ proc.accounting.ash array session handle
The array session handle for the process, taken from the pr_ash field
of struct pracinfo (see /usr/include/sys/procfs).

@ proc.accounting.prid project ID
Project ID for the process, taken from the pr_prid field of struct
pracinfo (see /usr/include/sys/procfs).

@ proc.accounting.timers.utime user time in nanoseconds
User time in nanoseconds, taken from the ac_utime field of the
acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psinfo.time, proc.pstatus.utime and proc.psusage.utime.

@ proc.accounting.timers.stime system time in nanoseconds
System time in nanoseconds, taken from the ac_stime field of the
acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psinfo.time, proc.pstatus.stime and proc.psusage.stime.

@ proc.accounting.timers.bwtime time in nanoseconds waiting for block I/O
Time in nanoseconds spent waiting for block I/O, taken from the
ac_bwtime field of the acct_timers struct within the pracinfo struct
(see /usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

@ proc.accounting.timers.rwtime time in nanoseconds waiting for raw I/O
Time in nanoseconds spent waiting for raw I/O, taken from the ac_rwtime
field of the acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

@ proc.accounting.timers.qwtime time in nanoseconds waiting on run queue
Time in nanoseconds spent waiting on run queue, taken from the
ac_qwtime field of the acct_timers struct within the pracinfo struct
(see /usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

@ proc.accounting.counts.mem accounting memory usage
The summation of the process' rss (see proc.psinfo.rssize) in pages,
accumulated per clock tick of the process' cpu usage (user + system
time).  By looking at the delta of this value over a time period
divided by the delta in cputime in ticks of the process, one gets an
approximation of the average memory usage of the process.

Please see the description of ac_mem in acct(4) for a further
explanation.  This value is taken from the ac_mem field of the
acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

@ proc.accounting.counts.swaps number of swaps
Number of swaps, taken from the ac_swaps field of the acct_timers
struct within the pracinfo struct (see /usr/include/sys/procfs.h and
/usr/include/sys/extacct.h).

@ proc.accounting.counts.chr number of bytes read by process
The number of bytes read by the process, taken from the ac_chr field of
the acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psusage.bread and proc.psusage.gbread.

@ proc.accounting.counts.chw number of bytes written by process
The number of bytes written by the process, taken from the ac_chw field
of the acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psusage.bwrit and proc.psusage.gbwrit.

@ proc.accounting.counts.br number of blocks read
Number of blocks read, taken from the ac_br field of the acct_timers
struct within the pracinfo struct (see /usr/include/sys/procfs.h and
/usr/include/sys/extacct.h).

@ proc.accounting.counts.bw number of blocks written
Number of blocks written, taken from the ac_bw field of the acct_timers
struct within the pracinfo struct (see /usr/include/sys/procfs.h and
/usr/include/sys/extacct.h).

@ proc.accounting.counts.syscr number of read syscalls
Number of read syscalls, taken from the ac_syscr field of the
acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psusage.syscr.

@ proc.accounting.counts.syscw number of write syscalls
Number of write syscalls, taken from the ac_syscw field of the
acct_timers struct within the pracinfo struct (see
/usr/include/sys/procfs.h and /usr/include/sys/extacct.h).

See also proc.psusage.syscw.

