/***********************************************************************
 * skeleton: act.sk - actions
 ***********************************************************************/
/* $Id: act.sk,v 1.1 1999/04/28 10:06:17 kenmcd Exp $ */

/*
 *  operator: actAnd
 */
void
actAnd(Expr *x)
{
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;

    EVALARG(arg1)
    EVALARG(arg2)
    *(Truth *)x->ring = (*(Truth *)arg1->ring == TRUE) && (*(Truth *)arg2->ring == TRUE);
}


/*
 *  operator: actOr
 */
void
actOr(Expr *x)
{
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;

    EVALARG(arg1)
    if (*(Truth *)arg1->ring == FALSE) {
	EVALARG(arg2)
	*(Truth *)x->ring = *(Truth *)arg2->ring;
    }
    else *(Truth *)x->ring = TRUE;
}


/*
 *  operator: actShell
 */
void
actShell(Expr *x)
{
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;
    pid_t   sts;

    if ((arg2 == NULL) ||
	(x->smpls[0].stamp == 0) ||
	(now >= *(RealTime *)arg2->ring + x->smpls[0].stamp))
    {
	EVALARG(arg1)
	fflush(stdout);
	fflush(stderr);
	sts = fork();
	if (sts == 0) {
	    setsid();
	    putenv("PATH=/usr/sbin:/usr/bsd:/sbin:/usr/bin:/bin");
	    putenv("IFS=\t\n");
	    system((char *)arg1->ring);
	    _exit(0);	/* avoid atexit() handler */
	}
	else if (sts > 0) {
	    x->valid = sts;
	    *(Truth *)x->ring = TRUE;
	    x->smpls[0].stamp = now;
	}
	else {
	    __pmNotifyErr(LOG_ERR, "fork for shell failed\n");
	    *(Truth *)x->ring = FALSE;
	}
	perf->actions++;
    }
}


/*
 *  operator: actAlarm
 */
void
actAlarm(Expr *x)
{
    static char *alarmv[] = {
	"/usr/bin/X11/xconfirm",
	    "-header", "Performance Co-Pilot Alarm",
	    "-b", "Cancel",
	    "-icon", "warning",
	    "-t", NULL,
	    "-t", NULL,
	    NULL};

    char    ctime[26];
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;
    time_t  clock;
    pid_t   sts;

    /* if old alarm still active, don't post new one */
    if ((x->valid != 0) &&
	(waitpid((pid_t)x->valid, NULL, WNOHANG) == 0))
	return;

    if ((arg2 == NULL) ||
	(x->smpls[0].stamp == 0) ||
	(now >= *(RealTime *)arg2->ring + x->smpls[0].stamp))
    {
	EVALARG(arg1)
	clock = (time_t)(now+0.5);
	pmCtime(&clock, ctime);
	sts = fork();
	if (sts == 0) {
	    alarmv[8] = ctime;
	    alarmv[10] = (char *)arg1->ring;
	    setsid();
	    fclose(stdin);
	    fclose(stdout);
	    fclose(stderr);
	    execvp(alarmv[0], alarmv);
	    _exit(1);	/* avoid atexit() handler */
	}
	else if (sts > 0) {
	    x->valid = sts;
	    *(Truth *)x->ring = TRUE;
	    x->smpls[0].stamp = now;
	    perf->actions++;
	}
	else {
	    __pmNotifyErr(LOG_ERR, "fork for alarm failed\n");
	    *(Truth *)x->ring = FALSE;
	}
    }
}


/*
 *  operator: actSyslog
 */
void
actSyslog(Expr *x)
{
    Expr	*arg1 = x->arg1;
    Expr	*arg2 = x->arg2;
    int		*pri;
    char	*tag;

    if ((arg2 == NULL) ||
	(x->smpls[0].stamp == 0) ||
	(now >= *(RealTime *)arg2->ring + x->smpls[0].stamp))
    {
	pri = (int *)arg1->arg2->ring;
	tag = &((char *)arg1->arg2->ring)[sizeof(int)];
	EVALARG(arg1)
	openlog(tag, LOG_PID|LOG_CONS, LOG_DAEMON);
	if (arg1->ring == NULL)
	    syslog(*pri, "");
	else
	    syslog(*pri, "%s", arg1->ring);
	closelog();
	*(Truth *)x->ring = TRUE;
	x->smpls[0].stamp = now;
	perf->actions++;
    }
}


/*
 *  operator: actPrint
 */
void
actPrint(Expr *x)
{
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;
    time_t  clock = (time_t)now;
    char    bfr[26];

    if ((arg2 == NULL) ||
	(x->smpls[0].stamp == 0) ||
	(now >= *(RealTime *)arg2->ring + x->smpls[0].stamp))
    {
	EVALARG(arg1)
	*(Truth *)x->ring = TRUE;
	x->smpls[0].stamp = now;
	pmCtime(&clock, bfr);
	bfr[24] = '\0';
	printf("%s: %s\n", bfr, (char *)arg1->ring);
	fflush(stdout);
	perf->actions++;
    }
}


/*
 * fake actions for archive mode
 */
void
actArg(Expr *x)
{
    Expr    *sp = x->arg1;
    char    *string = (char *)0;
    size_t  length = 0;

    for (sp = x->arg1; sp != NULL; sp = sp->arg1)
	length = formatSatisfyingValue((char *)sp->ring, length, &string);

    newStringBfr(x, length, string);
}


/*
 * fake actions for archive mode
 */
void
actFake(Expr *x)
{
    Expr    *arg1 = x->arg1;
    Expr    *arg2 = x->arg2;
    time_t  clock = (time_t)now;
    char    bfr[26];

    if ((arg2 == NULL) ||
	(x->smpls[0].stamp == 0) ||
	(now >= *(RealTime *)arg2->ring + x->smpls[0].stamp))
    {
	EVALARG(arg1)
	*(Truth *)x->ring = TRUE;
	x->smpls[0].stamp = now;
	pmCtime(&clock, bfr);
	bfr[24] = '\0';
	printf("%s %s: %s\n", opStrings(x->op), bfr, (char *)arg1->ring);
    }
}

