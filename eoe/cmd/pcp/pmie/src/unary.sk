/***********************************************************************
 * skeleton: unary.sk - unary operator
 ***********************************************************************/
/* $Id: unary.sk,v 1.1 1999/04/28 10:06:17 kenmcd Exp $ */

/*
 *  operator: @FUN
 */

#define @OP

void
@FUN_n(Expr *x)
{
    Expr        *arg1 = x->arg1;
    Sample	*is = &arg1->smpls[0];
    Sample	*os = &x->smpls[0];
    @ITYPE	*ip;
    @OTYPE	*op;
    int		n;
    int         i;

    EVALARG(arg1)
    ROTATE(x)

    if (arg1->valid) {
	ip = (@ITYPE *) is->ptr;
	op = (@OTYPE *) os->ptr;
	n = x->tspan;
	for (i = 0; i < n; i++) {
	    *op = OP(*ip);
	    op++;
	    ip++;
	}
	os->stamp = is->stamp;
	x->valid++;
    }
    else x->valid = 0;

#if PCP_DEBUG
    if (pmDebug & DBG_TRACE_APPL2) {
	fprintf(stderr, "@FUN_n(0x%p) ...\n", x);
	dumpExpr(x);
    }
#endif
}

void
@FUN_1(Expr *x)
{
    Expr        *arg1 = x->arg1;
    Sample	*is = &arg1->smpls[0];
    Sample	*os = &x->smpls[0];

    EVALARG(arg1)
    ROTATE(x)

    if (arg1->valid) {
	*(@OTYPE *)os->ptr = OP(*(@ITYPE *)is->ptr);
	os->stamp = is->stamp;
	x->valid++;
    }
    else x->valid = 0;

#if PCP_DEBUG
    if (pmDebug & DBG_TRACE_APPL2) {
	fprintf(stderr, "@FUN_1(0x%p) ...\n", x);
	dumpExpr(x);
    }
#endif
}

#undef OP

