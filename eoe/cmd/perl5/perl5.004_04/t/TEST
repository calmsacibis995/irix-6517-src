#!./perl

# Last change: Fri Jan 10 09:57:03 WET 1997

# This is written in a peculiar style, since we're trying to avoid
# most of the constructs we'll be testing for.

$| = 1;

if ($#ARGV >= 0 && $ARGV[0] eq '-v') {
    $verbose = 1;
    shift;
}

chdir 't' if -f 't/TEST';

die "You need to run \"make test\" first to set things up.\n"
  unless -e 'perl' or -e 'perl.exe';

$ENV{EMXSHELL} = 'sh';        # For OS/2

if ($#ARGV == -1) {
    @ARGV = split(/[ \n]/,
      `echo base/*.t comp/*.t cmd/*.t io/*.t; echo op/*.t pragma/*.t lib/*.t`);
}

if ($^O eq 'os2' || $^O eq 'qnx') {
    $sharpbang = 0;
}
else {
    open(CONFIG, "../config.sh");
    while (<CONFIG>) {
	if (/sharpbang='(.*)'/) {
	    $sharpbang = ($1 eq '#!');
	    last;
	}
    }
    close(CONFIG);
}

$bad = 0;
$good = 0;
$total = @ARGV;
$files  = 0;
$totmax = 0;
while ($test = shift) {
    if ($test =~ /^$/) {
	next;
    }
    $te = $test;
    chop($te);
    print "$te" . '.' x (18 - length($te));
    if ($sharpbang) {
	-x $test || (print "isn't executable.\n");
	open(RESULTS,"./$test |") || (print "can't run.\n");
    } else {
	open(SCRIPT,"$test") || die "Can't run $test.\n";
	$_ = <SCRIPT>;
	close(SCRIPT);
	if (/#!..perl(.*)/) {
	    $switch = $1;
	    if ($^O eq 'VMS') {
		# Must protect uppercase switches with "" on command line
		$switch =~ s/-([A-Z]\S*)/"-$1"/g;
	    }
	} else {
	    $switch = '';
	}
	open(RESULTS,"./perl$switch $test |") || (print "can't run.\n");
    }
    $ok = 0;
    $next = 0;
    while (<RESULTS>) {
	if ($verbose) {
	    print $_;
	}
	unless (/^#/) {
	    if (/^1\.\.([0-9]+)/) {
		$max = $1;
		$totmax += $max;
		$files += 1;
		$next = 1;
		$ok = 1;
	    } else {
		$next = $1, $ok = 0, last if /^not ok ([0-9]*)/;
		if (/^ok (.*)/ && $1 == $next) {
		    $next = $next + 1;
		} else {
		    $ok = 0;
		}
	    }
	}
    }
    $next = $next - 1;
    if ($ok && $next == $max) {
	if ($max) {
	    print "ok\n";
	    $good = $good + 1;
	} else {
	    print "skipping test on this platform\n";
	    $files -= 1;
	}
    } else {
	$next += 1;
	print "FAILED at test $next\n";
	$bad = $bad + 1;
	$_ = $test;
	if (/^base/) {
	    die "Failed a basic test--cannot continue.\n";
	}
    }
}

if ($bad == 0) {
    if ($ok) {
	print "All tests successful.\n";
	# XXX add mention of 'perlbug -ok' ?
    } else {
	die "FAILED--no tests were run for some reason.\n";
    }
} else {
    $pct = sprintf("%.2f", $good / $total * 100);
    if ($bad == 1) {
	warn "Failed 1 test script out of $total, $pct% okay.\n";
    } else {
	warn "Failed $bad test scripts out of $total, $pct% okay.\n";
    }
       warn <<'SHRDLU';
   ### Since not all tests were successful, you may want to run some
   ### of them individually and examine any diagnostic messages they
   ### produce.  See the INSTALL document's section on "make test".
SHRDLU
       warn <<'SHRDLU' if $good / $total > 0.8;
   ###
   ### Since most tests were successful, you have a good chance to
   ### get information with better granularity by running
   ###     ./perl harness
   ### in directory ./t.
SHRDLU
}
($user,$sys,$cuser,$csys) = times;
print sprintf("u=%g  s=%g  cu=%g  cs=%g  scripts=%d  tests=%d\n",
    $user,$sys,$cuser,$csys,$files,$totmax);
exit ($bad != 0);
