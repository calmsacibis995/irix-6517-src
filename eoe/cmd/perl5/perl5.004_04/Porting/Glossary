This file contains a description of all the shell variables whose value is
determined by the Configure script.  Variables intended for use in C
programs (e.g. I_UNISTD) are already described in config_h.SH.

alignbytes (alignbytes.U):
	This variable holds the number of bytes required to align a
	double. Usual values are 2, 4 and 8.

ar (Unix.U):
	This variable defines the command to use to create an archive 
	library.  For unix, it is 'ar'.

archlib (archlib.U):
	This variable holds the name of the directory in which the user wants
	to put architecture-dependent public library files for $package.
	It is most often a local directory such as /usr/local/lib.
	Programs using this variable must be prepared to deal
	with filename expansion.

archlibexp (archlib.U):
	This variable is the same as the archlib variable, but is
	filename expanded at configuration time, for convenient use.

archobjs (Unix.U):
	This variable defines any additional objects that must be linked
	in with the program on this architecture.  On unix, it is usually
	empty.  It is typically used to include emulations of unix calls
	or other facilities.  For perl on OS/2, for example, this would
	include os2/os2.obj.

bin (bin.U):
	This variable holds the name of the directory in which the user wants
	to put publicly executable images for the package in question.  It
	is most often a local directory such as /usr/local/bin. Programs using
	this variable must be prepared to deal with ~name substitution.

bincompat3 (bincompat3.U):
	This variable contains y if Perl 5.004 should be binary-compatible
	with Perl 5.003.

byteorder (byteorder.U):
	This variable holds the byte order. In the following, larger digits
	indicate more significance.  The variable byteorder is either 4321
	on a big-endian machine, or 1234 on a little-endian, or 87654321
	on a Cray ... or 3412 with weird order !

c (n.U):
	This variable contains the \c string if that is what causes the echo
	command to suppress newline.  Otherwise it is null.  Correct usage is
	    $echo $n "prompt for a question: $c".

castflags (d_castneg.U):
	This variable contains a flag that precise difficulties the
	compiler has casting odd floating values to unsigned long:
		0 = ok
		1 = couldn't cast < 0
		2 = couldn't cast >= 0x80000000
		4 = couldn't cast in argument expression list

cc (cc.U):
	This variable holds the name of a command to execute a C compiler which
	can resolve multiple global references that happen to have the same
	name.  Usual values are "cc", "Mcc", "cc -M", and "gcc".

cccdlflags (dlsrc.U):
	This variable contains any special flags that might need to be
	passed with cc -c to compile modules to be used to create a shared
	library that will be used for dynamic loading.  For hpux, this 
	should be +z.  It is up to the makefile to use it.

ccdlflags (dlsrc.U):
	This variable contains any special flags that might need to be
	passed to cc to link with a shared library for dynamic loading. 
	It is up to the makefile to use it.  For sunos 4.1, it should
	be empty.

ccflags (ccflags.U):
	This variable contains any additional C compiler flags desired by
	the user.  It is up to the Makefile to use this.

cf_by (cf_who.U):
	Login name of the person who ran the Configure script and answered the
	questions. This is used to tag both config.sh and config_h.SH.

cf_time (cf_who.U):
	Holds the output of the "date" command when the configuration file was
	produced. This is used to tag both config.sh and config_h.SH.

cpp_stuff (cpp_stuff.U):
	This variable contains an identification of the catenation mechanism
	used by the C preprocessor.

cppflags (ccflags.U):
	This variable holds the flags that will be passed to the C pre-
	processor. It is up to the Makefile to use it.

cppminus (cppstdin.U):
	This variable contains the second part of the string which will invoke
	the C preprocessor on the standard input and produce to standard
	output.  This variable will have the value "-" if cppstdin needs a minus
	to specify standard input, otherwise the value is "".

cppstdin (cppstdin.U):
	This variable contains the command which will invoke the C
	preprocessor on standard input and put the output to stdout.
	It is primarily used by other Configure units that ask about
	preprocessor symbols.

cryptlib (d_crypt.U):
	This variable holds -lcrypt or the path to a libcrypt.a archive if
	the crypt() function is not defined in the standard C library. It is
	up to the Makefile to use this.

d_Gconvert (d_gconvert.U):
	This variable holds what Gconvert is defined as to convert
	floating point numbers into strings. It could be 'gconvert'
	or a more complex macro emulating gconvert with gcvt() or sprintf.

d_access (d_access.U):
	This variable conditionally defines HAS_ACCESS if the access() system
	call is available to check for access permissions using real IDs.

d_alarm (d_alarm.U):
	This variable conditionally defines the HAS_ALARM symbol, which
	indicates to the C program that the alarm() routine is available.

d_archlib (archlib.U):
	This variable conditionally defines ARCHLIB to hold the pathname
	of architecture-dependent library files for $package.  If
	$archlib is the same as $privlib, then this is set to undef.

d_bcmp (d_bcmp.U):
	This variable conditionally defines the HAS_BCMP symbol if
	the bcmp() routine is available to compare strings.

d_bcopy (d_bcopy.U):
	This variable conditionally defines the HAS_BCOPY symbol if
	the bcopy() routine is available to copy strings.

d_bincompat3 (bincompat3.U):
	This variable conditionally defines BINCOMPAT3 so that embed.h
	can take special action if Perl 5.004 should be binary-compatible
	with Perl 5.003.

d_bsdgetpgrp (d_getpgrp.U):
	This variable conditionally defines USE_BSD_GETPGRP if
	getpgrp needs one arguments whereas USG one needs none.

d_bsdpgrp (d_setpgrp.U):
	This variable conditionally defines USE_BSDPGRP if the notion of
	process group is the BSD one. This means setpgrp needs two arguments
	whereas USG one needs none.

d_bsdsetpgrp (d_setpgrp.U):
	This variable conditionally defines USE_BSD_SETPGRP if
	setpgrp needs two arguments whereas USG one needs none.
	See also d_setpgid for a POSIX interface.

d_bzero (d_bzero.U):
	This variable conditionally defines the HAS_BZERO symbol if
	the bzero() routine is available to set memory to 0.

d_casti32 (d_casti32.U):
	This variable conditionally defines CASTI32, which indicates
	whether the C compiler can cast large floats to 32-bit ints.

d_castneg (d_castneg.U):
	This variable conditionally defines CASTNEG, which indicates
	wether the C compiler can cast negative float to unsigned.

d_charvspr (d_vprintf.U):
	This variable conditionally defines CHARVSPRINTF if this system
	has vsprintf returning type (char*).  The trend seems to be to
	declare it as "int vsprintf()".

d_chown (d_chown.U):
	This variable conditionally defines the HAS_CHOWN symbol, which
	indicates to the C program that the chown() routine is available.

d_chroot (d_chroot.U):
	This variable conditionally defines the HAS_CHROOT symbol, which
	indicates to the C program that the chroot() routine is available.

d_chsize (d_chsize.U):
	This variable conditionally defines the CHSIZE symbol, which
	indicates to the C program that the chsize() routine is available
	to truncate files.  You might need a -lx to get this routine.

d_const (d_const.U):
	This variable conditionally defines the HASCONST symbol, which
	indicates to the C program that this C compiler knows about the
	const type.

d_crypt (d_crypt.U):
	This variable conditionally defines the CRYPT symbol, which
	indicates to the C program that the crypt() routine is available
	to encrypt passwords and the like.

d_csh (d_csh.U):
	This variable conditionally defines the CSH symbol, which
	indicates to the C program that the C-shell exists.

d_cuserid (d_cuserid.U):
	This variable conditionally defines the HAS_CUSERID symbol, which
	indicates to the C program that the cuserid() routine is available
	to get character login names.

d_dbl_dig (d_dbl_dig.U):
	This variable conditionally defines d_dbl_dig if this system's
	header files provide DBL_DIG, which is the number of significant
	digits in a double precision number.

d_difftime (d_difftime.U):
	This variable conditionally defines the HAS_DIFFTIME symbol, which
	indicates to the C program that the difftime() routine is available.

d_dirnamlen (i_dirent.U):
	This variable conditionally defines DIRNAMLEN, which indicates
	to the C program that the length of directory entry names is
	provided by a d_namelen field.

d_dlerror (d_dlerror.U):
	This variable conditionally defines the HAS_DLERROR symbol, which
	indicates to the C program that the dlerror() routine is available.

d_dlsymun (d_dlsymun.U):
	This variable conditionally defines DLSYM_NEEDS_UNDERSCORE, which
	indicates that we need to prepend an underscore to the symbol
	name before calling dlsym().

d_dosuid (d_dosuid.U):
	This variable conditionally defines the symbol DOSUID, which
	tells the C program that it should insert setuid emulation code
	on hosts which have setuid #! scripts disabled.

d_dup2 (d_dup2.U):
	This variable conditionally defines HAS_DUP2 if dup2() is
	available to duplicate file descriptors.

d_eofnblk (nblock_io.U):
	This variable conditionally defines EOF_NONBLOCK if EOF can be seen
	when reading from a non-blocking I/O source.

d_fchmod (d_fchmod.U):
	This variable conditionally defines the HAS_FCHMOD symbol, which
	indicates to the C program that the fchmod() routine is available
	to change mode of opened files.

d_fchown (d_fchown.U):
	This variable conditionally defines the HAS_FCHOWN symbol, which
	indicates to the C program that the fchown() routine is available
	to change ownership of opened files.

d_fcntl (d_fcntl.U):
	This variable conditionally defines the HAS_FCNTL symbol, and indicates
	whether the fcntl() function exists

d_fgetpos (d_fgetpos.U):
	This variable conditionally defines HAS_FGETPOS if fgetpos() is
	available to get the file position indicator.

d_flexfnam (d_flexfnam.U):
	This variable conditionally defines the FLEXFILENAMES symbol, which
	indicates that the system supports filenames longer than 14 characters.

d_flock (d_flock.U):
	This variable conditionally defines HAS_FLOCK if flock() is
	available to do file locking.

d_fork (d_fork.U):
	This variable conditionally defines the HAS_FORK symbol, which
	indicates to the C program that the fork() routine is available.

d_fpathconf (d_pathconf.U):
	This variable conditionally defines the HAS_FPATHCONF symbol, which
	indicates to the C program that the pathconf() routine is available
	to determine file-system related limits and options associated
	with a given open file descriptor.

d_fsetpos (d_fsetpos.U):
	This variable conditionally defines HAS_FSETPOS if fsetpos() is
	available to set the file position indicator.

d_ftime (d_ftime.U):
	This variable conditionally defines the HAS_FTIME symbol, which
	indicates that the ftime() routine exists.  The ftime() routine is
	basically a sub-second accuracy clock.

d_gethent (d_gethent.U):
	This variable conditionally defines HAS_GETHOSTENT if gethostent() is
	available to dup file descriptors.

d_gettimeod (d_ftime.U):
	This variable conditionally defines the HAS_GETTIMEOFDAY symbol, which
	indicates that the gettimeofday() system call exists (to obtain a
	sub-second accuracy clock).

d_getlogin (d_getlogin.U):
	This variable conditionally defines the HAS_GETLOGIN symbol, which
	indicates to the C program that the getlogin() routine is available
	to get the login name.

d_getpgid (d_getpgid.U):
	This variable conditionally defines the HAS_GETPGID symbol, which
	indicates to the C program that the getpgid(pid) function
	is available to get the process group id.

d_getpgrp (d_getpgrp.U):
	This variable conditionally defines HAS_GETPGRP if getpgrp() is
	available to get the current process group.

d_getpgrp2 (d_getpgrp2.U):
	This variable conditionally defines the HAS_GETPGRP2 symbol, which
	indicates to the C program that the getpgrp2() (as in DG/UX) routine
	is available to get the current process group.

d_getppid (d_getppid.U):
	This variable conditionally defines the HAS_GETPPID symbol, which
	indicates to the C program that the getppid() routine is available
	to get the parent process ID.

d_getprior (d_getprior.U):
	This variable conditionally defines HAS_GETPRIORITY if getpriority()
	is available to get a process's priority.

d_htonl (d_htonl.U):
	This variable conditionally defines HAS_HTONL if htonl() and its
	friends are available to do network order byte swapping.

d_index (d_strchr.U):
	This variable conditionally defines HAS_INDEX if index() and
	rindex() are available for string searching.

d_inetaton (d_inetaton.U):
	This variable conditionally defines the HAS_INET_ATON symbol, which
	indicates to the C program that the inet_aton() function is available
	to parse IP address "dotted-quad" strings.

d_isascii (d_isascii.U):
	This variable conditionally defines the HAS_ISASCII constant,
	which indicates to the C program that isascii() is available.

d_killpg (d_killpg.U):
	This variable conditionally defines the HAS_KILLPG symbol, which
	indicates to the C program that the killpg() routine is available
	to kill process groups.

d_link (d_link.U):
	This variable conditionally defines HAS_LINK if link() is
	available to create hard links.

d_locconv (d_locconv.U):
	This variable conditionally defines HAS_LOCALECONV if localeconv() is
	available for numeric and monetary formatting conventions.

d_lockf (d_lockf.U):
	This variable conditionally defines HAS_LOCKF if lockf() is
	available to do file locking.

d_lstat (d_lstat.U):
	This variable conditionally defines HAS_LSTAT if lstat() is
	available to do file stats on symbolic links.

d_mblen (d_mblen.U):
	This variable conditionally defines the HAS_MBLEN symbol, which
	indicates to the C program that the mblen() routine is available
	to find the number of bytes in a multibye character.

d_mbstowcs (d_mbstowcs.U):
	This variable conditionally defines the HAS_MBSTOWCS symbol, which
	indicates to the C program that the mbstowcs() routine is available
	to convert a multibyte string into a wide character string.

d_mbtowc (d_mbtowc.U):
	This variable conditionally defines the HAS_MBTOWC symbol, which
	indicates to the C program that the mbtowc() routine is available
	to convert multibyte to a wide character.

d_memcmp (d_memcmp.U):
	This variable conditionally defines the HAS_MEMCMP symbol, which
	indicates to the C program that the memcmp() routine is available
	to compare blocks of memory.

d_memcpy (d_memcpy.U):
	This variable conditionally defines the HAS_MEMCPY symbol, which
	indicates to the C program that the memcpy() routine is available
	to copy blocks of memory.

d_memmove (d_memmove.U):
	This variable conditionally defines the HAS_MEMMOVE symbol, which
	indicates to the C program that the memmove() routine is available
	to copy potentatially overlapping blocks of memory.

d_memset (d_memset.U):
	This variable conditionally defines the HAS_MEMSET symbol, which
	indicates to the C program that the memset() routine is available
	to set blocks of memory.

d_mkdir (d_mkdir.U):
	This variable conditionally defines the HAS_MKDIR symbol, which
	indicates to the C program that the mkdir() routine is available
	to create directories..

d_mkfifo (d_mkfifo.U):
	This variable conditionally defines the HAS_MKFIFO symbol, which
	indicates to the C program that the mkfifo() routine is available.

d_mktime (d_mktime.U):
	This variable conditionally defines the HAS_MKTIME symbol, which
	indicates to the C program that the mktime() routine is available.

d_msg (d_msg.U):
	This variable conditionally defines the HAS_MSG symbol, which
	indicates that the entire msg*(2) library is present.

d_mymalloc (mallocsrc.U):
	This variable conditionally defines MYMALLOC in case other parts
	of the source want to take special action if MYMALLOC is used.
	This may include different sorts of profiling or error detection.

d_nice (d_nice.U):
	This variable conditionally defines the HAS_NICE symbol, which
	indicates to the C program that the nice() routine is available.

d_oldarchlib (oldarchlib.U):
	This variable conditionally defines OLDARCHLIB to hold the pathname
	of architecture-dependent library files for a previous
	version of $package.

d_open3 (d_open3.U):
	This variable conditionally defines the HAS_OPEN3 manifest constant,
	which indicates to the C program that the 3 argument version of
	the open(2) function is available.

d_pathconf (d_pathconf.U):
	This variable conditionally defines the HAS_PATHCONF symbol, which
	indicates to the C program that the pathconf() routine is available
	to determine file-system related limits and options associated
	with a given filename.

d_pause (d_pause.U):
	This variable conditionally defines the HAS_PAUSE symbol, which
	indicates to the C program that the pause() routine is available
	to suspend a process until a signal is received.

d_pipe (d_pipe.U):
	This variable conditionally defines the HAS_PIPE symbol, which
	indicates to the C program that the pipe() routine is available
	to create an inter-process channel.

d_poll (d_poll.U):
	This variable conditionally defines the HAS_POLL symbol, which
	indicates to the C program that the poll() routine is available
	to poll active file descriptors.

d_pwage (i_pwd.U):
	This varaible conditionally defines PWAGE, which indicates
	that struct passwd contains pw_age.

d_pwchange (i_pwd.U):
	This varaible conditionally defines PWCHANGE, which indicates
	that struct passwd contains pw_change.

d_pwclass (i_pwd.U):
	This varaible conditionally defines PWCLASS, which indicates
	that struct passwd contains pw_class.

d_pwcomment (i_pwd.U):
	This varaible conditionally defines PWCOMMENT, which indicates
	that struct passwd contains pw_comment.

d_pwexpire (i_pwd.U):
	This varaible conditionally defines PWEXPIRE, which indicates
	that struct passwd contains pw_expire.

d_pwquota (i_pwd.U):
	This varaible conditionally defines PWQUOTA, which indicates
	that struct passwd contains pw_quota.

d_readdir (d_readdir.U):
	This variable conditionally defines HAS_READDIR if readdir() is
	available to read directory entries.

d_readlink (d_readlink.U):
	This variable conditionally defines the HAS_READLINK symbol, which
	indicates to the C program that the readlink() routine is available
	to read the value of a symbolic link.

d_rename (d_rename.U):
	This variable conditionally defines the HAS_RENAME symbol, which
	indicates to the C program that the rename() routine is available
	to rename files.

d_rewinddir (d_readdir.U):
	This variable conditionally defines HAS_REWINDDIR if rewinddir() is
	available.

d_rmdir (d_rmdir.U):
	This variable conditionally defines HAS_RMDIR if rmdir() is
	available to remove directories.

d_safebcpy (d_safebcpy.U):
	This variable conditionally defines the HAS_SAFE_BCOPY symbol if
	the bcopy() routine can do overlapping copies.

d_safemcpy (d_safemcpy.U):
	This variable conditionally defines the HAS_SAFE_MEMCPY symbol if
	the memcpy() routine can do overlapping copies.

d_sanemcmp (d_sanemcmp.U):
	This variable conditionally defines the HAS_SANE_MEMCMP symbol if
	the memcpy() routine is available and can be used to compare relative
	magnitudes of chars with their high bits set.

d_seekdir (d_readdir.U):
	This variable conditionally defines HAS_SEEKDIR if seekdir() is
	available.

d_select (d_select.U):
	This variable conditionally defines HAS_SELECT if select() is
	available to select active file descriptors. A <sys/time.h>
	inclusion may be necessary for the timeout field.

d_sem (d_sem.U):
	This variable conditionally defines the HAS_SEM symbol, which
	indicates that the entire sem*(2) library is present.

d_setegid (d_setegid.U):
	This variable conditionally defines the HAS_SETEGID symbol, which
	indicates to the C program that the setegid() routine is available
	to change the effective gid of the current program.

d_seteuid (d_seteuid.U):
	This variable conditionally defines the HAS_SETEUID symbol, which
	indicates to the C program that the seteuid() routine is available
	to change the effective uid of the current program.

d_setlinebuf (d_setlnbuf.U):
	This variable conditionally defines the HAS_SETLINEBUF symbol, which
	indicates to the C program that the setlinebuf() routine is available
	to change stderr or stdout from block-buffered or unbuffered to a
	line-buffered mode.

d_setlocale (d_setlocale.U):
	This variable conditionally defines HAS_SETLOCALE if setlocale() is
	available to handle locale-specific ctype implementations.

d_setpgid (d_setpgid.U):
	This variable conditionally defines the HAS_SETPGID symbol, which
	indicates to the C program that the setpgid(pid, gpid) function
	is available to set the process group id.

d_setpgrp (d_setpgrp.U):
	This variable conditionally defines HAS_SETPGRP if setpgrp() is
	available to set the current process group.

d_setpgrp2 (d_setpgrp2.U):
	This variable conditionally defines the HAS_SETPGRP2 symbol, which
	indicates to the C program that the setpgrp2() (as in DG/UX) routine
	is available to set the current process group.

d_setprior (d_setprior.U):
	This variable conditionally defines HAS_SETPRIORITY if setpriority()
	is available to set a process's priority.

d_setregid (d_setregid.U):
	This variable conditionally defines HAS_SETREGID if setregid() is
	available to change the real and effective gid of the current
	process.

d_setresgid (d_setregid.U):
	This variable conditionally defines HAS_SETRESGID if setresgid() is
	available to change the real, effective and saved gid of the current
	process.

d_setresuid (d_setreuid.U):
	This variable conditionally defines HAS_SETREUID if setresuid() is
	available to change the real, effective and saved uid of the current
	process.

d_setreuid (d_setreuid.U):
	This variable conditionally defines HAS_SETREUID if setreuid() is
	available to change the real and effective uid of the current
	process.

d_setrgid (d_setrgid.U):
	This variable conditionally defines the HAS_SETRGID symbol, which
	indicates to the C program that the setrgid() routine is available
	to change the real gid of the current program.

d_setruid (d_setruid.U):
	This variable conditionally defines the HAS_SETRUID symbol, which
	indicates to the C program that the setruid() routine is available
	to change the real uid of the current program.

d_setsid (d_setsid.U):
	This variable conditionally defines HAS_SETSID if setsid() is
	available to set the process group ID.

d_sfio (d_sfio.U):
	This variable conditionally defines the USE_SFIO symbol,
	and indicates whether sfio is available (and should be used).

d_shm (d_shm.U):
	This variable conditionally defines the HAS_SHM symbol, which
	indicates that the entire shm*(2) library is present.

d_shmatprototype (d_shmat.U):
	This variable conditionally defines the HAS_SHMAT_PROTOTYPE 
	symbol, which indicates that sys/shm.h has a prototype for
	shmat.

d_sigaction (d_sigaction.U):
	This variable conditionally defines the HAS_SIGACTION symbol, which
	indicates that the Vr4 sigaction() routine is available.

d_sigsetjmp (d_sigsetjmp.U):
	This variable conditionally defines the HAS_SIGSETJMP symbol,
	which indicates that the sigsetjmp() routine is available to
	call setjmp() and optionally save the process's signal mask.

d_socket (d_socket.U):
	This variable conditionally defines HAS_SOCKET, which indicates
	that the BSD socket interface is supported.

d_sockpair (d_socket.U):
	This variable conditionally defines the HAS_SOCKETPAIR symbol, which
	indicates that the BSD socketpair() is supported.

d_statblks (d_statblks.U):
	This variable conditionally defines USE_STAT_BLOCKS if this system
	has a stat structure declaring st_blksize and st_blocks.

d_stdio_cnt_lval (d_stdstdio.U):
	This variable conditionally defines STDIO_CNT_LVALUE if the
	FILE_cnt macro can be used as an lvalue.

d_stdio_ptr_lval (d_stdstdio.U):
	This variable conditionally defines STDIO_PTR_LVALUE if the
	FILE_ptr macro can be used as an lvalue.

d_stdiobase (d_stdstdio.U):
	This variable conditionally defines USE_STDIO_BASE if this system
	has a FILE structure declaring a usable _base field (or equivalent)
	in stdio.h.

d_stdstdio (d_stdstdio.U):
	This variable conditionally defines USE_STDIO_PTR if this system
	has a FILE structure declaring usable _ptr and _cnt fields (or
	equivalent) in stdio.h.

d_strchr (d_strchr.U):
	This variable conditionally defines HAS_STRCHR if strchr() and
	strrchr() are available for string searching.

d_strcoll (d_strcoll.U):
	This variable conditionally defines HAS_STRCOLL if strcoll() is
	available to compare strings using collating information.

d_strctcpy (d_strctcpy.U):
	This variable conditionally defines the USE_STRUCT_COPY symbol, which
	indicates to the C program that this C compiler knows how to copy
	structures.

d_strerrm (d_strerror.U):
	This variable holds what Strerrr is defined as to translate an error
	code condition into an error message string. It could be 'strerror'
	or a more complex macro emulating strrror with sys_errlist[], or the
	"unknown" string when both strerror and sys_errlist are missing.

d_strerror (d_strerror.U):
	This variable conditionally defines HAS_STRERROR if strerror() is
	available to translate error numbers to strings.

d_strtod (d_strtod.U):
	This variable conditionally defines the HAS_STRTOD symbol, which
	indicates to the C program that the strtod() routine is available
	to provide better numeric string conversion than atof().

d_strtol (d_strtol.U):
	This variable conditionally defines the HAS_STRTOL symbol, which
	indicates to the C program that the strtol() routine is available
	to provide better numeric string conversion than atoi() and friends.

d_strtoul (d_strtoul.U):
	This variable conditionally defines the HAS_STRTOUL symbol, which
	indicates to the C program that the strtoul() routine is available
	to provide conversion of strings to unsigned long.

d_strxfrm (d_strxfrm.U):
	This variable conditionally defines HAS_STRXFRM if strxfrm() is
	available to transform strings.

d_suidsafe (d_dosuid.U):
	This variable conditionally defines SETUID_SCRIPTS_ARE_SECURE_NOW
	if setuid scripts can be secure.  This test looks in /dev/fd/.

d_symlink (d_symlink.U):
	This variable conditionally defines the HAS_SYMLINK symbol, which
	indicates to the C program that the symlink() routine is available
	to create symbolic links.

d_syscall (d_syscall.U):
	This variable conditionally defines HAS_SYSCALL if syscall() is
	available call arbitrary system calls.

d_sysconf (d_sysconf.U):
	This variable conditionally defines the HAS_SYSCONF symbol, which
	indicates to the C program that the sysconf() routine is available
	to determine system related limits and options.

d_syserrlst (d_strerror.U):
	This variable conditionally defines HAS_SYS_ERRLIST if sys_errlist[] is
	available to translate error numbers to strings.

d_system (d_system.U):
	This variable conditionally defines HAS_SYSTEM if system() is
	available to issue a shell command.

d_tcgetpgrp (d_tcgtpgrp.U):
	This variable conditionally defines the HAS_TCGETPGRP symbol, which
	indicates to the C program that the tcgetpgrp() routine is available.
	to get foreground process group ID.

d_tcsetpgrp (d_tcstpgrp.U):
	This variable conditionally defines the HAS_TCSETPGRP symbol, which
	indicates to the C program that the tcsetpgrp() routine is available
	to set foreground process group ID.

d_telldir (d_readdir.U):
	This variable conditionally defines HAS_TELLDIR if telldir() is
	available.

d_times (d_times.U):
	This variable conditionally defines the HAS_TIMES symbol, which indicates
	that the times() routine exists.  The times() routine is normaly
	provided on UNIX systems. You may have to include <sys/times.h>.

d_truncate (d_truncate.U):
	This variable conditionally defines HAS_TRUNCATE if truncate() is
	available to truncate files.

d_tzname (d_tzname.U):
	This variable conditionally defines HAS_TZNAME if tzname[] is
	available to access timezone names.

d_umask (d_umask.U):
	This variable conditionally defines the HAS_UMASK symbol, which
	indicates to the C program that the umask() routine is available.
	to set and get the value of the file creation mask.

d_uname (d_gethname.U):
	This variable conditionally defines the HAS_UNAME symbol, which
	indicates to the C program that the uname() routine may be
	used to derive the host name.

d_vfork (d_vfork.U):
	This variable conditionally defines the HAS_VFORK symbol, which
	indicates the vfork() routine is available.

d_void_closedir (d_closedir.U):
	This variable conditionally defines VOID_CLOSEDIR if closedir()
	does not return a value.

d_volatile (d_volatile.U):
	This variable conditionally defines the HASVOLATILE symbol, which
	indicates to the C program that this C compiler knows about the
	volatile declaration.

d_vprintf (d_vprintf.U):
	This variable conditionally defines the HAS_VPRINTF symbol, which
	indicates to the C program that the vprintf() routine is available
	to printf with a pointer to an argument list.

d_wait4 (d_wait4.U):
	This variable conditionally defines the HAS_WAIT4 symbol, which
	indicates the wait4() routine is available.

d_waitpid (d_waitpid.U):
	This variable conditionally defines HAS_WAITPID if waitpid() is
	available to wait for child process.

d_wcstombs (d_wcstombs.U):
	This variable conditionally defines the HAS_WCSTOMBS symbol, which
	indicates to the C program that the wcstombs() routine is available
	to convert wide character strings to multibyte strings.

d_wctomb (d_wctomb.U):
	This variable conditionally defines the HAS_WCTOMB symbol, which
	indicates to the C program that the wctomb() routine is available
	to convert a wide character to a multibyte.

db_hashtype (i_db.U):
	This variable contains the type of the hash structure element
	in the <db.h> header file.  In older versions of DB, it was
	int, while in newer ones it is u_int32_t.

db_prefixtype (i_db.U):
	This variable contains the type of the prefix structure element
	in the <db.h> header file.  In older versions of DB, it was
	int, while in newer ones it is size_t.

direntrytype (i_dirent.U):
	This symbol is set to 'struct direct' or 'struct dirent' depending on
	whether dirent is available or not. You should use this pseudo type to
	portably declare your directory entries.

dlext (dlext.U):
	This variable contains the extension that is to be used for the
	dynamically loaded modules that perl generaties.

dlsrc (dlsrc.U):
	This variable contains the name of the dynamic loading file that
	will be used with the package.

dynamic_ext (Extensions.U):
	This variable holds a list of extension files we want to
	link dynamically into the package.  It is used by Makefile.

eagain (nblock_io.U):
	This variable bears the symbolic errno code set by read() when no
	data is present on the file and non-blocking I/O was enabled (otherwise,
	read() blocks naturally).

eunicefix (Init.U):
	When running under Eunice this variable contains a command which will
	convert a shell script to the proper form of text file for it to be
	executable by the shell.  On other systems it is a no-op.

exe_ext (Unix.U):
	This variable defines the extension used for executable files.
	For unix it is empty.  Other possible values include '.exe'.

firstmakefile (Unix.U):
	This variable defines the first file searched by make.  On unix,
	it is makefile (then Makefile).  On case-insensitive systems,
	it might be something else.  This is only used to deal with
	convoluted make depend tricks.

fpostype (fpostype.U):
	This variable defines Fpos_t to be something like fpost_t, long, 
	uint, or whatever type is used to declare file positions in libc.

freetype (mallocsrc.U):
	This variable contains the return type of free().  It is usually
	void, but occasionally int.

full_csh (d_csh.U):
	This variable contains the full pathname to 'csh', whether or
	not the user has specified 'portability'.  This is only used
	in the compiled C program, and we assume that all systems which
	can share this executable will have the same full pathname to
	'csh.'

full_sed (Loc_sed.U):
	This variable contains the full pathname to 'sed', whether or
	not the user has specified 'portability'.  This is only used
	in the compiled C program, and we assume that all systems which
	can share this executable will have the same full pathname to
	'sed.'

gidtype (gidtype.U):
	This variable defines Gid_t to be something like gid_t, int,
	ushort, or whatever type is used to declare the return type
	of getgid().  Typically, it is the type of group ids in the kernel.

groupstype (groupstype.U):
	This variable defines Groups_t to be something like gid_t, int, 
	ushort, or whatever type is used for the second argument to
	getgroups().  Usually, this is the same of gidtype, but
	sometimes it isn't.

i_dirent (i_dirent.U):
	This variable conditionally defines I_DIRENT, which indicates
	to the C program that it should include <dirent.h>.

i_dlfcn (i_dlfcn.U):
	This variable conditionally defines the I_DLFCN symbol, which
	indicates to the C program that <dlfcn.h> exists and should
	be included.

i_fcntl (i_fcntl.U):
	This variable controls the value of I_FCNTL (which tells
	the C program to include <fcntl.h>).

i_float (i_float.U):
	This variable conditionally defines the I_FLOAT symbol, and indicates
	whether a C program may include <float.h> to get symbols like DBL_MAX
	or DBL_MIN, i.e. machine dependent floating point values.

i_grp (i_grp.U):
	This variable conditionally defines the I_GRP symbol, and indicates
	whether a C program should include <grp.h>.

i_limits (i_limits.U):
	This variable conditionally defines the I_LIMITS symbol, and indicates
	whether a C program may include <limits.h> to get symbols like WORD_BIT
	and friends.

i_locale (i_locale.U):
	This variable conditionally defines the I_LOCALE symbol,
	and indicates whether a C program should include <locale.h>.

i_math (i_math.U):
	This variable conditionally defines the I_MATH symbol, and indicates
	whether a C program may include <math.h>.

i_memory (i_memory.U):
	This variable conditionally defines the I_MEMORY symbol, and indicates
	whether a C program should include <memory.h>.

i_neterrno (i_neterrno.U):
	This variable conditionally defines the I_NET_ERRNO symbol, which
	indicates to the C program that <net/errno.h> exists and should
	be included.

i_niin (i_niin.U):
	This variable conditionally defines I_NETINET_IN, which indicates
	to the C program that it should include <netinet/in.h>. Otherwise,
	you may try <sys/in.h>.

i_pwd (i_pwd.U):
	This variable conditionally defines I_PWD, which indicates
	to the C program that it should include <pwd.h>.

i_rpcsvcdbm (i_dbm.U):
	This variable conditionally defines the I_RPCSVC_DBM symbol, which
	indicates to the C program that <rpcsvc/dbm.h> exists and should
	be included.  Some System V systems might need this instead of <dbm.h>.

i_sfio (i_sfio.U):
	This variable conditionally defines the I_SFIO symbol,
	and indicates whether a C program should include <sfio.h>.

i_sgtty (i_termio.U):
	This variable conditionally defines the I_SGTTY symbol, which
	indicates to the C program that it should include <sgtty.h> rather
	than <termio.h>.

i_stdarg (i_varhdr.U):
	This variable conditionally defines the I_STDARG symbol, which
	indicates to the C program that <stdarg.h> exists and should
	be included.

i_stddef (i_stddef.U):
	This variable conditionally defines the I_STDDEF symbol, which
	indicates to the C program that <stddef.h> exists and should
	be included.

i_stdlib (i_stdlib.U):
	This variable conditionally defines the I_STDLIB symbol, which
	indicates to the C program that <stdlib.h> exists and should
	be included.

i_string (i_string.U):
	This variable conditionally defines the I_STRING symbol, which
	indicates that <string.h> should be included rather than <strings.h>.

i_sysdir (i_sysdir.U):
	This variable conditionally defines the I_SYS_DIR symbol, and indicates
	whether a C program should include <sys/dir.h>.

i_sysfile (i_sysfile.U):
	This variable conditionally defines the I_SYS_FILE symbol, and indicates
	whether a C program should include <sys/file.h> to get R_OK and friends.

i_sysioctl (i_sysioctl.U):
	This variable conditionally defines the I_SYS_IOCTL symbol, which
	indicates to the C program that <sys/ioctl.h> exists and should
	be included.

i_sysndir (i_sysndir.U):
	This variable conditionally defines the I_SYS_NDIR symbol, and indicates
	whether a C program should include <sys/ndir.h>.

i_sysparam (i_sysparam.U):
	This variable conditionally defines the I_SYS_PARAM symbol, and indicates
	whether a C program should include <sys/param.h>.

i_sysresrc (i_sysresrc.U):
	This variable conditionally defines the I_SYS_RESOURCE symbol,
	and indicates whether a C program should include <sys/resource.h>.

i_sysselct (i_sysselct.U):
	This variable conditionally defines I_SYS_SELECT, which indicates
	to the C program that it should include <sys/select.h> in order to
	get the definition of struct timeval.

i_sysstat (i_sysstat.U):
	This variable conditionally defines the I_SYS_STAT symbol,
	and indicates whether a C program should include <sys/stat.h>.

i_systime (i_time.U):
	This variable conditionally defines I_SYS_TIME, which indicates
	to the C program that it should include <sys/time.h>.

i_systimek (i_time.U):
	This variable conditionally defines I_SYS_TIME_KERNEL, which
	indicates to the C program that it should include <sys/time.h>
	with KERNEL defined.

i_systimes (i_systimes.U):
	This variable conditionally defines the I_SYS_TIMES symbol, and indicates
	whether a C program should include <sys/times.h>.

i_systypes (i_systypes.U):
	This variable conditionally defines the I_SYS_TYPES symbol,
	and indicates whether a C program should include <sys/types.h>.

i_sysun (i_sysun.U):
	This variable conditionally defines I_SYS_UN, which indicates
	to the C program that it should include <sys/un.h> to get UNIX
	domain socket definitions.

i_syswait (i_syswait.U):
	This variable conditionally defines I_SYS_WAIT, which indicates
	to the C program that it should include <sys/wait.h>.

i_termio (i_termio.U):
	This variable conditionally defines the I_TERMIO symbol, which
	indicates to the C program that it should include <termio.h> rather
	than <sgtty.h>.

i_termios (i_termio.U):
	This variable conditionally defines the I_TERMIOS symbol, which
	indicates to the C program that the POSIX <termios.h> file is
	to be included.

i_time (i_time.U):
	This variable conditionally defines I_TIME, which indicates
	to the C program that it should include <time.h>.

i_unistd (i_unistd.U):
	This variable conditionally defines the I_UNISTD symbol, and indicates
	whether a C program should include <unistd.h>.

i_utime (i_utime.U):
	This variable conditionally defines the I_UTIME symbol, and indicates
	whether a C program should include <utime.h>.

i_values (i_values.U):
	This variable conditionally defines the I_VALUES symbol, and indicates
	whether a C program may include <values.h> to get symbols like MAXLONG
	and friends.

i_varargs (i_varhdr.U):
	This variable conditionally defines I_VARARGS, which indicates
	to the C program that it should include <varargs.h>.

i_varhdr (i_varhdr.U):
	Contains the name of the header to be included to get va_dcl definition.
	Typically one of varargs.h or stdarg.h.

i_vfork (i_vfork.U):
	This variable conditionally defines the I_VFORK symbol, and indicates
	whether a C program should include vfork.h.

installbin (bin.U):
	This variable is the same as binexp unless AFS is running in which case
	the user is explicitely prompted for it. This variable should always
	be used in your makefiles for maximum portability.

installprivlib (privlib.U):
	This variable is really the same as privlibexp but may differ on
	those systems using AFS. For extra portability, only this variable
	should be used in makefiles.

intsize (intsize.U):
	This variable contains the value of the INTSIZE symbol,
	which indicates to the C program how many bytes there are
	in an integer.

large (models.U):
	This variable contains a flag which will tell the C compiler and loader
	to produce a program running with a large memory model.  It is up to
	the Makefile to use this.

ld (dlsrc.U):
	This variable indicates the program to be used to link
	libraries for dynamic loading.  On some systems, it is 'ld'.
	On ELF systems, it should be $cc.  Mostly, we'll try to respect
	the hint file setting.

lddlflags (dlsrc.U):
	This variable contains any special flags that might need to be
	passed to $ld to create a shared library suitable for dynamic
	loading.  It is up to the makefile to use it.  For hpux, it
	should be -b.  For sunos 4.1, it is empty.

ldflags (ccflags.U):
	This variable contains any additional C loader flags desired by
	the user.  It is up to the Makefile to use this.

lib_ext (Unix.U):
	This variable defines the extension used for ordinary libraries.
	For unix, it is '.a'.  The '.' is included.  Other possible
	values include '.lib'.

libperl (libperl.U):
	The perl executable is obtained by linking perlmain.c with
	libperl, any static extensions (usually just DynaLoader),
	and any other libraries needed on this system.  libperl
	is usually libperl.a, but can also be libperl.so.xxx if
	the user wishes to build a perl executable with a shared
	library.

libs (libs.U):
	This variable holds the additional libraries we want to use.
	It is up to the Makefile to deal with it.

lns (lns.U):
	This variable holds the name of the command to make 
	symbolic links (if they are supported).  It can be used
	in the Makefile. It is either 'ln -s' or 'ln'

longsize (intsize.U):
	This variable contains the value of the LONGSIZE symbol,
	which indicates to the C program how many bytes there are
	in a long integer.

lseektype (lseektype.U):
	This variable defines lseektype to be something like off_t, long, 
	or whatever type is used to declare lseek offset's type in the
	kernel (which also appears to be lseek's return type).

make (make.U):
	This variable sets the path to the 'make' command.  It is
	here rather than in Loc.U so that users can override it
	with  Configure -Dmake=pmake, or equivalent.

make_set_make (make.U):
	Some versions of 'make' set the variable MAKE.  Others do not.
	This variable contains the string to be included in Makefile.SH
	so that MAKE is set if needed, and not if not needed.
	Possible values are:
	make_set_make='#'	# If your make program handles this for you,
	make_set_make=$make	# if it doesn't.
	I used a comment character so that we can distinguish a
	'set' value (from a previous config.sh or Configure -D option)
	from an uncomputed value.

mallocobj (mallocsrc.U):
	This variable contains the name of the malloc.o that this package
	generates, if that malloc.o is preferred over the system malloc.
	Otherwise the value is null.  This variable is intended for generating
	Makefiles.  See mallocsrc.

mallocsrc (mallocsrc.U):
	This variable contains the name of the malloc.c that comes with
	the package, if that malloc.c is preferred over the system malloc.
	Otherwise the value is null.  This variable is intended for generating
	Makefiles.

malloctype (mallocsrc.U):
	This variable contains the kind of ptr returned by malloc and realloc.

man1dir (man1dir.U):
	This variable contains the name of the directory in which manual
	source pages are to be put.  It is the responsibility of the
	Makefile.SH to get the value of this into the proper command.
	You must be prepared to do the ~name expansion yourself.

man1ext (man1dir.U):
	This variable contains the extension that the manual page should
	have: one of 'n', 'l', or '1'.  The Makefile must supply the '.'.
	See man1dir.

man3dir (man3dir.U):
	This variable contains the name of the directory in which manual
	source pages are to be put.  It is the responsibility of the
	Makefile.SH to get the value of this into the proper command.
	You must be prepared to do the ~name expansion yourself.

man3ext (man3dir.U):
	This variable contains the extension that the manual page should
	have: one of 'n', 'l', or '3'.  The Makefile must supply the '.'.
	See man3dir.

modetype (modetype.U):
	This variable defines modetype to be something like mode_t, 
	int, unsigned short, or whatever type is used to declare file 
	modes for system calls.

n (n.U):
	This variable contains the -n flag if that is what causes the echo
	command to suppress newline.  Otherwise it is null.  Correct usage is
	    $echo $n "prompt for a question: $c".

o_nonblock (nblock_io.U):
	This variable bears the symbol value to be used during open() or fcntl()
	to turn on non-blocking I/O for a file descriptor. If you wish to switch
	between blocking and non-blocking, you may try ioctl(FIOSNBIO) instead,
	but that is only supported by some devices.

oldarchlib (oldarchlib.U):
	This variable holds the name of the directory in which perl5.000
	and perl5.001 stored 
	architecture-dependent public library files.

oldarchlibexp (oldarchlib.U):
	This variable is the same as the oldarchlib variable, but is 
	filename expanded at configuration time, for convenient use.

optimize (ccflags.U):
	This variable contains any optimizer/debugger flag that should be used.
	It is up to the Makefile to use it.

osname (Oldconfig.U):
	This variable contains the operating system name (e.g. sunos,
	solaris, hpux, etc.).  It can be useful later on for setting
	defaults.  Any spaces are replaced with underscores.  It is set
	to a null string if we can't figure it out.

pager (pager.U):
	This variable contains the name of the preferred pager on the system.
	Usual values are (the full pathnames of) more, less, pg, or cat.

path_sep (Unix.U):
	This variable defines the character used to separate elements in
	the shell's PATH environment variable.  On Unix, it is ':'.
	This is probably identical to Head.U's p_ variable and can
	probably be dropped.

perladmin (perladmin.U):
	Electronic mail address of the perl5 administrator.

perlpath (perlpath.U):
	This variable contains the eventual value of the PERLPATH symbol,
	which contains the name of the perl interpreter to be used in
	shell scripts and in the "eval 'exec'" idiom.

prefix (prefix.U):
	This variable holds the name of the directory below which the
	user will install the package.  Usually, this is /usr/local, and
	executables go in /usr/local/bin, library stuff in /usr/local/lib,
	man pages in /usr/local/man, etc.  It is only used to set defaults
	for things in bin.U, mansrc.U, privlib.U, or scriptdir.U.

privlib (privlib.U):
	This variable contains the eventual value of the PRIVLIB symbol,
	which is the name of the private library for this package.  It may
	have a ~ on the front. It is up to the makefile to eventually create
	this directory while performing installation (with ~ substitution).

privlibexp (privlib.U):
	This variable is the ~name expanded version of privlib, so that you
	may use it directly in Makefiles or shell scripts.

prototype (prototype.U):
	This variable holds the eventual value of CAN_PROTOTYPE, which
	indicates the C compiler can handle funciton prototypes.

randbits (randbits.U):
	This variable contains the eventual value of the RANDBITS symbol,
	which indicates to the C program how many bits of random number
	the rand() function produces.

ranlib (orderlib.U):
	This variable is set to the pathname of the ranlib program, if it is
	needed to generate random libraries.  Set to ":" if ar can generate
	random libraries or if random libraries are not supported

rd_nodata (nblock_io.U):
	This variable holds the return code from read() when no data is
	present. It should be -1, but some systems return 0 when O_NDELAY is
	used, which is a shame because you cannot make the difference between
	no data and an EOF.. Sigh!

scriptdir (scriptdir.U):
	This variable holds the name of the directory in which the user wants
	to put publicly scripts for the package in question.  It is either
	the same directory as for binaries, or a special one that can be
	mounted across different architectures, like /usr/share. Programs
	must be prepared to deal with ~name expansion.

selecttype (selecttype.U):
	This variable holds the type used for the 2nd, 3rd, and 4th
	arguments to select.  Usually, this is 'fd_set *', if HAS_FD_SET
	is defined, and 'int *' otherwise.  This is only useful if you 
	have select(), naturally.

sh (sh.U):
	This variable contains the full pathname of the shell used
	on this system to execute Bourne shell scripts.  Usually, this will be
	/bin/sh, though it's possible that some systems will have /bin/ksh,
	/bin/pdksh, /bin/ash, /bin/bash, or even something such as
	D:/bin/sh.exe.
	This unit comes before Options.U, so you can't set sh with a -D
	option, though you can override this (and startsh)
	with -O -Dsh=/bin/whatever -Dstartsh=whatever

shmattype (d_shmat.U):
	This symbol contains the type of pointer returned by shmat().
	It can be 'void *' or 'char *'.

shortsize (intsize.U):
	This variable contains the value of the SHORTSIZE symbol,
	which indicates to the C program how many bytes there are
	in a short integer.

shrpenv (libperl.U):
	If the user builds a shared libperl.so, then we need to tell the
	'perl' executable where it will be able to find the installed libperl.so. 
	One way to do this on some systems is to set the environment variable
	LD_RUN_PATH to the directory that will be the final location of the
	shared libperl.so.  The makefile can use this with something like
		$shrpenv $(CC) -o perl perlmain.o $libperl $libs
	Typical values are
		shrpenv="env LD_RUN_PATH=$archlibexp/CORE"
	or
		shrpenv=''
	See the main perl Makefile.SH for actual working usage.
	Alternatively, we might be able to use a command line option such
	as -R $archlibexp/CORE (Solaris, NetBSD) or -Wl,-rpath
	$archlibexp/CORE (Linux).

sig_name (sig_name.U):
	This variable holds the signal names, space separated. The leading
	SIG in signals name is removed. See sig_num.

sig_num (sig_name.U):
	This variable holds the signal numbers, space separated. Those numbers
	correspond to the value of the signal listed in the same place within
	the sig_name list.

signal_t (d_voidsig.U):
	This variable holds the type of the signal handler (void or int).

sitearch (sitearch.U):
	This variable contains the eventual value of the SITEARCH symbol,
	which is the name of the private library for this package.  It may
	have a ~ on the front. It is up to the makefile to eventually create
	this directory while performing installation (with ~ substitution).

sitearchexp (sitearch.U):
	This variable is the ~name expanded version of sitearch, so that you
	may use it directly in Makefiles or shell scripts.

sitelib (sitelib.U):
	This variable contains the eventual value of the SITELIB symbol,
	which is the name of the private library for this package.  It may
	have a ~ on the front. It is up to the makefile to eventually create
	this directory while performing installation (with ~ substitution).

sitelibexp (sitelib.U):
	This variable is the ~name expanded version of sitelib, so that you
	may use it directly in Makefiles or shell scripts.

sizetype (sizetype.U):
	This variable defines sizetype to be something like size_t, 
	unsigned long, or whatever type is used to declare length 
	parameters for string functions.

small (models.U):
	This variable contains a flag which will tell the C compiler and loader
	to produce a program running with a small memory model.  It is up to
	the Makefile to use this.

spitshell (spitshell.U):
	This variable contains the command necessary to spit out a runnable
	shell on this system.  It is either cat or a grep -v for # comments.

split (models.U):
	This variable contains a flag which will tell the C compiler and loader
	to produce a program that will run in separate I and D space, for those
	machines that support separation of instruction and data space.  It is
	up to the Makefile to use this.

ssizetype (ssizetype.U):
	This variable defines ssizetype to be something like ssize_t, 
	long or int.  It is used by functions that return a count 
	of bytes or an error condition.  It must be a signed type.
	We will pick a type such that sizeof(SSize_t) == sizeof(Size_t).

startperl (startperl.U):
	This variable contains the string to put on the front of a perl
	script to make sure (hopefully) that it runs with perl and not some
	shell. Of course, that leading line must be followed by the classical
	perl idiom:
		eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
			if $running_under_some_shell;
	to guarantee perl startup should the shell execute the script. Note
	that this magic incatation is not understood by csh.

startsh (startsh.U):
	This variable contains the string to put on the front of a shell
	script to make sure (hopefully) that it runs with sh and not some
	other shell.

static_ext (Extensions.U):
	This variable holds a list of extension files we want to
	link statically into the package.  It is used by Makefile.

stdchar (stdchar.U):
	This variable conditionally defines STDCHAR to be the type of char
	used in stdio.h.  It has the values "unsigned char" or "char".

timetype (d_time.U):
	This variable holds the type returned by time(). It can be long,
	or time_t on BSD sites (in which case <sys/types.h> should be
	included). Anyway, the type Time_t should be used.

uidtype (uidtype.U):
	This variable defines Uid_t to be something like uid_t, int, 
	ushort, or whatever type is used to declare user ids in the kernel.

useperlio (useperlio.U):
	This variable conditionally defines the USE_PERLIO symbol,
	and indicates that the PerlIO abstraction should be
	used throughout.

useshrplib (libperl.U):
	This variable is set to 'yes' if the user wishes
	to build a shared libperl, and 'no' otherwise.

voidflags (voidflags.U):
	This variable contains the eventual value of the VOIDFLAGS symbol,
	which indicates how much support of the void type is given by this
	compiler.  See VOIDFLAGS for more info.

