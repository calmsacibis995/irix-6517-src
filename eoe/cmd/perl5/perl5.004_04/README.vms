Last Revised 11-September-1997 by Dan Sugalski <sugalsd@lbcc.cc.or.us>
Originally by Charles Bailey <bailey@newman.upenn.edu>

* Intro

The VMS port of Perl is as functionally complete as any other Perl port
(and as complete as the ports on some Unix systems). The Perl binaries
provide all the Perl system calls that are either available under VMS or
reasonably emulated. There are some incompatibilites in process handling
(e.g the fork/exec model for creating subprocesses doesn't do what you
might expect under Unix), mainly because VMS and Unix handle processes and
sub-processes very differently.

There are still some unimplemented system functions, and of coursse we
could use modules implementing useful VMS system services, so if you'd like
to lend a hand we'd love to have you. Join the Perl Porting Team Now!

The current sources and build procedures have been tested on a VAX using
VaxC and Dec C, and on an AXP using Dec C. If you run into problems with
other compilers, please let us know.

There are issues with varions versions of Dec C, so if you're not running a
relatively modern version, check the Dec C issues section later on in this
document.

* Other required software

In addition to VMS, you'll need:
        1) A C compiler. Dec C for AXP, or VAX C, Dec C, or gcc for the
           VAX.
        2) A make tool. Dec's MMS (v2.6 or later), or MadGoat's free MMS
           analog MMK (available from ftp.madgoat.com/madgoat) both work
           just fine. Gnu Make might work, but it's been so long since
           anyone's tested it that we're not sure. MMK's free, though, so
           go ahead and use that.


If you want to include socket support, you'll need a TCP stack and either
Dec C, or socket libraries. See the Socket Support topic for more details.

* Compiling Perl

>From the top level of the Perl source directory, do this:

MMS/DESCRIP=[.VMS]DESCRIP.MMS

If you're on an Alpha, add /Macro=("__AXP__=1","decc=1")
If you're using Dec C as your C compiler (you are on all alphas), add
/Macro=("decc=1")
If Vac C is your default C compiler and you want to use Dec C, add
/Macro=("CC=CC/DECC") (Don't forget the /macro=("decc=1")
If Dec C is your default C compiler and you want to use Vax C, add
/Macro=("CC=CC/VAXC")
If you want Socket support and are using the SOCKETSHR socket library, add
/Macro=("SOCKETSHR_SOCKETS=1")
If you want Socket support and are using the Dec C RTL socket interface
(You must be using Dec C for this), add /Macro=("DECC_SOCKETS=1")

If you have multiple /macro= items, combine them together in one /Macro=()
switch, with all the options inside the parentheses separated by commas.

Samples:

VMS AXP, with Socketshr sockets:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("decc=1","__AXP__=1","SOCKETSHR_SOCKETS=1")

VMS AXP with no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("decc=1","__AXP__=1")

VMS AXP with the Dec C RTL sockets

$MMS/DESCRIP=[.VMS]/Macro=("decc=1","__AXP__=1","DECC_SOCKETS=1")

VMS VAX with default system compiler, no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS

VMS VAX with Dec C compiler, no sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1")

VMS VAX with Dec C compiler, Dec C RTL sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1","DECC_SOCKETS=1")

VMS VAX with Dec C compiler, Socketshr sockets

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("CC=CC/DECC","decc=1","SOCKETSHR_SOCKETS=1")

Using Dec C is recommended over Vax C. The compiler is newer, and
supported. (Vax C was decommisioned around 1993) Various older versions had
some gotchas, so if you're using a version older than 5.2, check the Dec C
Issues section.

We'll also point out that Dec C will get you at least a ten-fold increase
in line-oriented IO over Vax C. The optimizer is amazingly better, too. If
you can use Dec C, then you *really*, *really* should.


Once you issue your MMS command, sit back and wait. Perl should build and
link without a problem. If it doesn't, check the Gotchas to watch out for
section. If that doesn't help, send some mail to the VMSPERL mailing list.
Instructions are in the Mailing Lists section.

* Testing Perl

Once Perl has built cleanly, you need to test it to make sure things work.
This step is very important--there are always things that can go wrong
somehow and get you a dysfunctional Perl.

Testing is very easy, though, as there's a full test suite in the perl
distribution. To run the tests, enter the *exact* MMS line you used to
compile Perl and add the word "test" to the end, like this:

Compile Command:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1")

Test Command:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1") test

MMS will run all the tests. This may take some time, as there are a lot of
tests. If any tests fail, there will be a note made on-screen. At the end
of all the tests, a summary of the tests, the number passed and failed, and
the time taken will be displayed.

If any tests fail, it means something's wrong with Perl. If the test suite
hangs (some tests can take upwards of two or three minutes, or more if
you're on an especially slow machine, depending on you machine speed, so
don't be hasty), then the test *after* the last one displayed failed. Don't
install Perl unless you're confident that you're OK. Regardless of how
confident you are, make a bug report to the VMSPerl mailing list.

If one or more tests fail, you can get more info on the failure by issuing
this command sequence:

$ SET DEFAULT [.T]
$ @[-.VMS]TEST .typ -v [.subdir]test.T

where ".typ" is the file type of the Perl images you just built (if you
didn't do anything special, use .EXE), and "[.subdir]test.T" is the test
that failed. For example, with a normal Perl build, if the test indicated
that [.op]time failed, then you'd do this:

$ SET DEFAULT [.T]
$ @[-.VMS]TEST .EXE -v [.OP]TIME.T

When you send in a bug report for failed tests, please include the output
from this command, which is run from the main source directory:

MCR []MINIPERL "-V"

Note that "-V" really is a capital V in double quotes. This will dump out a
couple of screens worth of config info, and can help us diagnose the problem.

* Cleaning up and starting fresh

If you need to recompile from scratch, you have to make sure you clean up
first. There's a procedure to do it--enter the *exact* MMS line you used to
compile and add "realclean" at the end, like this:

Compile Command:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1")

Cleanup Command:

$MMS/DESCRIP=[.VMS]DESCRIP.MMS/Macro=("__AXP__=1","decc=1","DECCRTL_SOCKETS=1") realclean

If you don't do this, things may behave erratically. They might not, too,
so it's best to be sure and do it.

* Installing Perl

There are several steps you need to take to get Perl installed and
running. At some point we'll have a working install in DESCRIP.MMS, but for
right now the procedure's manual, and goes like this.

1) Create a directory somewhere and define the concealed logical PERL_ROOT
to point to it. For example, DEFINE/TRANS=(CONC,TERM) PERL_ROOT dka200:[perl.]

2) Copy perl.exe into PERL_ROOT:[000000]

3) Copy everything in [.LIB] and [.UTILS] (including all the
subdirectories!) to PERL_ROOT:[LIB] and PERL_ROOT:[UTILS].

4) Either copy PERLSHR.EXE to SYS$SHARE, or to somewhere globally accessble
and define the logical PERLSHR to point to it (DEFINE PERLSHR
PERL_ROOT:[000000]PERLSHR.EXE or something like that). The PerlShr image
should have W:RE protections on it. (Just W:E triggers increased security in
the image activator. Not a huge problem, but Perl will need to have any
other shared image it accesses INSTALLed. It's a huge pain, so don't unless
you know what you're doing)

5) Either define the symbol PERL somewhere, such as
SYS$MANAGER:SYLOGIN.COM, to be "PERL :== $PERL_ROOT:[000000]PERL.EXE", or
install Perl into DCLTABLES.EXE )Check out the section "Installing Perl
into DCLTABLES" for more info), or put the image in a directory that's in
your DCL$PATH (if you're using VMS 6.2 or higher).

6) Optionally define the command PERLDOC as 
PERLDOC :== $PERL_ROOT:[000000]PERL PERL_ROOT:[LIB.POD]PERLDOC.COM -T

7) Optionally define the command PERLBUG (the Perl bug report generator) as
PERLBUG :== $PERL_ROOT:[000000]PERL PERL_ROOT:[LIB]PERLBUG.COM"

* Installing Perl into DCLTABLES

Courtesy of Brad  Hughes:

Put the following, modified to reflect where your .exe is, in PERL.CLD:

define verb perl
image perl_root:[exe]perl.exe
cliflags (foreign)

and then

$ set command perl /table=sys$common:[syslib]dcltables.exe -
 /output=sys$common:[syslib]dcltables.exe
$ install replace sys$common:[syslib]dcltables.exe

and you don't need perl :== $perl_root:[exe]perl.exe.

* Changing compile-time things

Most of the user-definable features of Perl are enabled or disabled in
[.VMS]CONFIG.VMS. There's code in there to Do The Right Thing, but that may
end up being the wrong thing for you. Make sure you understand what you're
doing, since changes here can get you a busted perl.

Odds are that there's nothing here to change, unless you're on a version of
VMS later than 6.2 and Dec C later than 5.6. Even if you are, the correct
values will still be chosen, most likely. Poking around here should be
unnecessary.

The one exception is the various *DIR install locations. Changing those
requires changes in genconfig.pl as well. Be really careful if you need to
change these,a s they can cause some fairly subtle problems.

* Extra things in the Perl distribution

In addition to the standard stuff that gets installed, there are two
optional extensions, DCLSYM and STDIO, that are handy. Instructions for
these two modules are in [.VMS.EXT.DCLSYM] and [.VMS.EXT.STDIO],
respectively.

* Socket Support

Perl includes a number of functions for IP sockets, which are available if
you choose to compile Perl with socket support. (See the section Compiling
Perl for more info on selecting a socket stack) Since IP networking is an
optional addition to VMS, there are several different IP stacks
available. How well integrated they are into the system depends on the
stack, your version of VMS, and the version of your C compiler.

The most portable solution uses the SOCKETSHR library. In combination with
either UCX or NetLib, this supports all the major TCP stacks (Multinet,
Pathways, TCPWare, UCX, and CMU) on all versions of VMS Perl runs on, with
all the compilers on both VAX and Alpha. The socket interface is also
consistent across versions of VMS and C compilers. It has a problem with
UDP sockets when used with Multinet, though, so you should be aware of
that.

The other solution available is to use the socket routines built into Dec
C. Which routines are available depend on the version of VMS you're
running, and require proper UCX emulation by your TCP/IP vendor.
Relatively current versions of Multinet, TCPWare, Pathway, and UCX all
provide the required libraries--check your manuals or release notes to see
if your version is new enough.

* Reporting Bugs

If you come across what you think might be a bug in Perl, please report
it. There's a script in PERL_ROOT:[UTILS], perlbug, that walks you through
the process of creating a bug report. This script includes details of your
installation, and is very handy. Completed bug reports should go to
PERLBUG@PERL.COM.

* Gotchas to watch out for

Probably the single biggest gotcha in compiling Perl is giving the wrong
switches to MMS/MMK when you build. If Perl's building oddly, double-check
your switches. If you're on a VAX, be sure to add a /Macro=("decc=1") if
you're using Dec C, and if you're on an alpha and using MMS, you'll need a
/Macro=("__AXP__=1")

The next big gotcha is directory depth. Perl can create directories four
and five levels deep during the build, so you don't have to be too deep to
start to hit the RMS 8 level point. It's best to do a
$DEFINE/TRANS=(CONC,TERM) PERLSRC disk:[dir.dir.dir.perldir.]"  (note the
trailing period) and $SET DEFAULT PERLSRC:[000000] before building. Perl
modules can be just as bad (or worse), so watch out for them, too.

Finally, the third thing that bites people is leftover pieces from a failed
build. If things go wrong, make sure you do a "(MMK|MMS|make) realclean"
before you rebuild.

* Dec C issues

Note to DECC users: Some early versions (pre-5.2, some pre-4. If you're Dec
C 5.x or higher, with current patches if anym you're fine) of the DECCRTL
contained a few bugs which affect Perl performance:
    - Newlines are lost on I/O through pipes, causing lines to run together.
      This shows up as RMS RTB errors when reading from a pipe.  You can
      work around this by having one process write data to a file, and
      then having the other read the file, instead of the pipe.  This is
      fixed in version 4 of DECC.
    - The modf() routine returns a non-integral value for some values above
      INT_MAX; the Perl "int" operator will return a non-integral value in
      these cases.  This is fixed in version 4 of DECC.
    - On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine
      changes the process default device and directory permanently, even
      though the call specified that the change should not persist after
      Perl exited.  This is fixed by DEC CSC patch AXPACRT04_061.

* Mailing Lists

There are several mailing lists available to the Perl porter. For VMS
specific issues (including both Perl questions and installation problems)
there is the VMSPERL mailing list. It's usually a low-volume (10-12
messages a week) mailing list.

The subscription address is VMSPERL-REQUEST@NEWMAN.UPENN.EDU. Send a mail
message with just the words SUBSCRIBE VMSPERL in the body of the message.

The VMSPERL mailing list address is VMSPERL@NEWMAN.UPENN.EDU. Any mail
sent there gets echoed to all subscribers of the list.

The Perl5-Porters list is for anyone involved in porting Perl to a
platform. This includes you, if you want to participate. It's a high-volume
list (60-100 messages a day during active development times), so be sure
you want to be there. The subscription address is
Perl5-Porters-request@perl.org. Send a message with just the word SUBSCRIBE
in the body. The posting address is Perl5-Porters@perl.org.

* Acknowledgements

A real big thanks needs to go to Charles Bailey
<bailey@newman.upenn.edu>, who is ultimately responsible for Perl 5.004
running on VMS. Without him, nothing the rest of us have done would be at
all important.

There are, of course, far too many people involved in the porting and testing
of Perl to mention everyone who deserves it, so please forgive us if we've
missed someone.  That said, special thanks are due to the following:
  Tim Adye <T.J.Adye@rl.ac.uk>
     for the VMS emulations of getpw*()
  David Denholm <denholm@conmat.phys.soton.ac.uk>
     for extensive testing and provision of pipe and SocketShr code,
  Mark Pizzolato <mark@infocomm.com>
     for the getredirection() code
  Rich Salz <rsalz@bbn.com>
     for readdir() and related routines
  Peter Prymmer <pvhp@lns62.lns.cornell.edu)
     for extensive testing, as well as development work on
     configuration and documentation for VMS Perl,
  Dan Sugalski <sugalsd@stargate.lbcc.cc.or.us>
     for extensive contributions to recent version support,
     development of VMS-specific extensions, and dissemination
     of information about VMS Perl,
  the Stanford Synchrotron Radiation Laboratory and the
     Laboratory of Nuclear Studies at Cornell University for
     the the opportunity to test and develop for the AXP,
and to the entire VMSperl group for useful advice and suggestions.  In
addition the perl5-porters deserve credit for their creativity and
willingness to work with the VMS newcomers.  Finally, the greatest debt of
gratitude is due to Larry Wall <larry@wall.org>, for having the ideas which
have made our sleepless nights possible.

Thanks,
The VMSperl group


---------------------------------------------------------------------------
[Here's the pre-5.004_04 version of README.vms, for the record.]

Last revised: 19-Jan-1996 by Charles Bailey  bailey@genetics.upenn.edu

The VMS port of Perl is still under development.  At this time, the Perl
binaries built under VMS handle internal operations properly, for the most
part, as well as most of the system calls which have close equivalents under
VMS. There are still some incompatibilities in process handling (e.g the
fork/exec model for creating subprocesses doesn't do what you might expect
under Unix), and there remain some file handling differences from Unix.  Over
the longer term, we'll try to get many of the useful VMS system services
integrated as well, depending on time and people available.  Of course, if
you'd like to add something yourself, or join the porting team, we'd love to
have you!

The current sources and build procedures have been tested on a VAX using VAXC
and DECC, and on an AXP using DECC.  If you run into problems with other
compilers, please let us know.

Note to DECC users: Some early versions of the DECCRTL contained a few bugs
which affect Perl performance:
    - Newlines are lost on I/O through pipes, causing lines to run together.
      This shows up as RMS RTB errors when reading from a pipe.  You can
      work around this by having one process write data to a file, and
      then having the other read the file, instead of the pipe.  This is
      fixed in version 4 of DECC.
    - The modf() routine returns a non-integral value for some values above
      INT_MAX; the Perl "int" operator will return a non-integral value in
      these cases.  This is fixed in version 4 of DECC.
    - On the AXP, if SYSNAM privilege is enabled, the CRTL chdir() routine 
      changes the process default device and directory permanently, even
      though the call specified that the change should not persist after
      Perl exited.  This is fixed by DEC CSC patch AXPACRT04_061.

* Other software required

At the moment, in addition to basic VMS, you'll need two things:
   - a C compiler: VAXC, DECC, or gcc for the VAX; DECC for the AXP
   - a make tool: DEC's MMS (version 2.6 or later) or the free analog MMK
     (available from ftp.spc.edu), or a standard make utility (e.g. GNU make,
     also available from ftp.spc.edu).
In addition, you may include socket support if you have an IP stack running
on your system.  See the topic "Socket support" for more information.

* Socket support

Perl includes a number of IP socket routines among its builtin functions,
which are available if you choose to compile Perl with socket support.  Since
IP networking is an optional addition to VMS, there are several different IP
stacks available, so it's difficult to automate the process of building Perl
with socket support in a way which will work on all systems.  

By default, Perl is built without IP socket support.  If you define the macro
SOCKET when invoking MMK, however, socket support will be included.  As
distributed, Perl for VMS includes support for the SOCKETSHR socket library,
which is layered on MadGoat software's vendor-independent NETLIB interface. 
This provides support for all socket calls used by Perl except the
[g|s]etnet*() routines, which are replaced for the moment by stubs which
generate a fatal error if a Perl script attempts to call one of these routines. 
Both SOCKETSHR and NETLIB are available from MadGoat ftp sites, such as
ftp.spc.edu or ftp.wku.edu.

You can link Perl directly to your TCP/IP stack's library, *as long as* it
supplies shims for stdio routines which will properly handle both sockets and
normal file descriptors.  This is necessary because Perl does not distinguish
between the two, and will try to make normal stdio calls such as read() and
getc() on socket file descriptors.  If you'd like to link Perl directly to
your IP stack, then make the following changes:
  - In Descrip.MMS, locate the section beginning with .ifdef SOCKET, and
    change the SOCKLIB macro so that it translates to  the filespec of your
    IP stack's socket library.  This will be added to the RTL options file.
  - Edit the file SockAdapt.H in the [.VMS] subdirectory so that it
    includes the Socket.H, In.H, Inet.H, NetDb.H, and, if necessary,
    Errno.H header files for your IP stack, or so that it declares the
    standard TCP/IP constants and data structures appropriately.  (See
    the distributed copy of SockAdapt.H for a collection of the structures
    needed by Perl itself, and [.ext.Socket]Socket.xs for a list of the
    constants used by the Socket extension, if you elect to built it.)
    You should also define any logical names necessary for your C compiler
    to find these files before invoking MM[KS] to build Perl.
  - Edit the file SockAdapt.C in the [.VMS] subdirectory so that it
    contains routines which substitute for any IP library routines
    required by Perl which your IP stack does not provide.  This may
    require a little trial and error; we'll try to compile a complete
    list soon of socket routines required by Perl.


* Building Perl under VMS

Since you're reading this, presumably you've unpacked the Perl distribution
into its directory tree, in which you will find a [.vms] subdirectory below
the directory in which this file is found.  If this isn't the case, then you'll
need to unpack the distribution properly, or manually edit Descrip.MMS or
the VMS Makefile to alter directory paths as necessary.  (I'd advise using the 
`normal' directory tree, at least for the first time through.)  This
subdirectory contains several files, among which are the following:
  Config.VMS     - A template Config.H set up for VMS.
  Descrip.MMS    - The MMS/MMK dependency file for building Perl
  GenConfig.Pl   - A Perl script to generate Config.SH retrospectively
                   from Config.VMS, since the Configure shell script which
                   normally generates Config.SH doesn't run under VMS.
  GenOpt.Com     - A little DCL procedure used to write some linker options
                   files, since not all make utilities can do this easily.
  Gen_ShrFls.Pl  - A Perl script which generates linker options files and
                   MACRO declarations for PerlShr.Exe.
  Makefile       - The make dependency file for building Perl  
  MMS2Make.Pl    - A Perl script used to generate Makefile from Descrip.MMS
  PerlVMS.pod    - Documentation for VMS-specific behavior of Perl
  Perly_[CH].VMS - Versions of the byacc output from Perl's grammar,
                   modified to include VMS-specific C compiler options
  SockAdapt.[CH] - C source code used to integrate VMS TCP/IP support
  Test.Com       - DCL driver for Perl regression tests
  VMSish.H       - C header file containing VMS-specific definitions
  VMS.C          - C source code for VMS-specific routines
  VMS_Yfix.Pl    - Perl script to convert Perly.[CH] to Perly_[CH].VMS
  WriteMain.Pl   - Perl script to generate Perlmain.C
The [.Ext...] directories contain VMS-specific extensions distributed with
Perl.  There may also be other files in [.VMS...] pertaining to features under
development; for the most part, you can ignore them.  Note that packages in
[.ext.*] are not built with Perl by default; you build the ones you want
once the basic Perl build is complete (see the perlvms docs for instructions
on building extensions.)

Config.VMS and Decrip.MMS/Makefile are set up to build a version of Perl which
includes all features known to work when this release was assembled.  If you
have code at your site which would support additional features (e.g. emulation
of Unix system calls), feel free to make the appropriate changes to these
files.  (Note: Do not use or edit config.h in the main Perl source directory;
it is superseded by the current Config.VMS during the build.)  You may also
wish to make site-specific changes to Descrip.MMS or Makefile to reflect local
conventions for naming of files, etc.

There are several pieces of system-specific information which become part of
the Perl Config extension.  Under VMS, the data for Config are generated by the
script GenConfig.Pl in the [.VMS] subdirectory.  It tries to ascertain the
necessary information from various files, or from the system itself, and
generally does the right thing.  There is a list of hard-coded values at the
end of this script which specifies items that are correct for most VMS systems,
but may be incorrect for you, if your site is set up in an unusual fashion.  If
you're familiar with Perl's Config extension, feel free to edit these values as
necessary.  If this doesn't mean much to you, don't worry -- the information is
probably correct, and even if it's not, none of these parameters affect your
ability to build or run Perl.  You'll only get the wrong answer if you ask for
it specifically from Config.

Examine the information at the beginning of Descrip.MMS for information about
specifying alternate C compilers or building a version of Perl with debugging
support.  For instance, if you want to use DECC, you'll need to include the
/macro="decc=1" qualifier to MMK  (If you're using make, these options are not
supported.)  If you're on an AXP system, define the macro __AXP__ (MMK does
this for you), and DECC will automatically be selected.

To start the build, set default to the main source directory.  Since
Descrip.MMS assumes that VMS commands have their usual meaning, and makes use
of command-line macros, you may want to be certain that you haven't defined DCL
symbols which would interfere with the build.  Then, if you are using MMS or
MMK, say
$ MMS/Descrip=[.VMS] ! or MMK
(N.B. If you are using MMS, you must use version 2.6 or later; a bug in
earlier versions produces malformed cc command lines.)  If you are using a
version of make, say
$ Make -f [.VMS]Makefile
Note that the Makefile doesn't support conditional compilation, is
set up to use VAXC on a VAX, and does not include socket support.  You can
either edit the Makefile by hand, using Descrip.MMS as a guide, or use the
Makefile to build Miniperl.Exe, and then run the Perl script MMS2Make.pl,
found in the [.VMS] subdirectory, to generate a new Makefile with the options
appropriate to your site.

If you are using MM[SK], and you decide to rebuild Perl with a different set
of parameters (e.g. changing the C compiler, or adding socket support), be
sure to say
$ MMK/Descrip=[.VMS] realclean
first, in order to remove files generated during the previous build.  If
you omit this step, you risk ending up with a copy of Perl which
composed partially of old files and partially of new ones, which may lead
to strange effects when you try to run Perl.

A bug in some early versions of the DECC RTL on the AXP causes newlines
to be lost when writing to a pipe.  A different bug in some patched versions
of DECC 4.0 for VAX can also scramble preprocessor output.  Finally, gcc 2.7.2
has yet another preprocessor bug, which causes line breaks to be inserted
into the output at inopportune times.  Each of these bugs causes Gen_ShrFls.pl
to fail, since it can't parse the preprocessor output to identify global
variables and routines.  This problem is generally manifested as missing
global symbols when linking PerlShr.Exe or Perl.Exe.  You can work around
it by defining the macro PIPES_BROKEN when you invoke MMS or MMK.


This will build the following files:
  Miniperl.Exe        - a stand-alone version of without any extensions.
                        Miniperl has all the intrinsic capabilities of Perl,
                        but cannot make use of the DynaLoader or any
                        extensions which use XS code.
  PerlShr.Exe         - a shareable image containing most of Perl's internal
                        routines and global variables.  Perl.Exe is linked to
                        this image, as are all dynamic extensions, so everyone's
                        using the same set of global variables and routines.
  Perl.Exe            - the main Perl executable image.  It's contains the
                        main() routine, plus code for any statically linked
                        extensions.
  PerlShr_Attr.Opt    - A linker options file which specifies psect attributes
                        matching those in PerlShr.Exe.  It should be used when
                        linking images against PerlShr.Exe
  PerlShr_Bld.Opt     - A linker options file which specifies various things
                        used to build PerlShr.Exe.  It should be used when
                        rebuilding PerlShr.Exe via MakeMaker-produced
                        Descrip.MMS files for static extensions.
  c2ph                - Perl program which generates template code to access
                        C struct members from Perl.
  h2ph                - Perl program which generates template code to access
                        #defined constants in a C header file from Perl,
                        using the "old-style" interface.  (Largely supplanted
                        by h2xs.)
  h2xs                - Perl program which generates template files for creating
                        XSUB extensions, optionally beginning with the #defined
                        constants in a C header file.
  [.lib.pod]perldoc   - A Perl program which locates and displays documentation
                        for Perl and its extensions.
  [.Lib]Config.pm     - the Perl extension which saves configuration information
                        about Perl and your system.
  [.Lib]DynaLoader.pm - The Perl extension which performs dynamic linking of
                        shareable images for extensions.
  Several subdirectories under [.Lib] containing preprocessed files or
                        site-specific files.
There are, of course, a number of other files created for use during the build. 
Once you've got the binaries built, you may wish to `build' the `tidy' or
`clean' targets to remove extra files.

If you run into problems during the build, you can get help from the VMSPerl
or perl5-porters mailing lists (see below).  When you report the problem,
please include the following information:
  - The version of Perl you're trying to build.  Please include any
    "letter" patchlevel, in addition to the version number.  If the
    build successfully created Miniperl.Exe, you can check this by
    saying '$ MCR Sys$Disk:[]Miniperl -v'.  Also, please mention
    where you obtained the distribution kit; in particular, note
    whether you were using a basic Perl kit or the VMS test kit
    (see below).
  - The exact command you issued to build Perl.
  - A copy of all error messages which were generated during the build.
    Please include enough of the build log to establish the context of
    the error messages.
  - A summary of your configuration.  If the build progressed far enough
    to generate Miniperl.Exe and [.Lib]Config.pm, you can obtain this
    by saying '$ MCR Sys$Disk:[]Miniperl "-V"' (note the "" around -V).
    If not, then you can say '$ MMK/Descrip=[.VMS] printconfig' to
    produce the summary.
This may sound like a lot of information to send, but it'll often make
it easier for someone to spot the problem, instead of having to give
a spectrum of possibilities.
  


* Installing Perl once it's built

Once the build is complete, you'll need to do the following:
  - Put PerlShr.Exe in a common directory, and make it world-readable.
    If you place it in a location other than Sys$Share, you'll need to
    define the logical name PerlShr to point to the image.  (If you're
    installing on a VMScluster, be sure that each node is using the
    copy of PerlShr you expect [e.g. if you put PerlShr.Exe in Sys$Share,
    do they all share Sys$Share?]).
  - Put Perl.Exe in a common directory, and make it world-executable.
  - Define a foreign command to invoke Perl, using a statement like
    $ Perl == "$dev:[dir]Perl.Exe"
  - Create a world-readable directory tree for Perl library modules,
    scripts, and what-have-you, and define PERL_ROOT as a rooted logical
    name pointing to the top of this tree (i.e. if your Perl files were
    going to live in DKA1:[Util.Perl5...], then you should
      $ Define/Translation=Concealed Perl_Root DKA1:[Util.Perl5.]
    (Be careful to follow the rules for rooted logical names; in particular,
    remember that a rooted logical name cannot have as its device portion
    another rooted logical name - you've got to supply the actual device name
    and directory path to the root directory.)
  - Place the files from the [.lib...] directory tree in the distribution
    package into a [.lib...] directory tree off the root directory described
    above.
  - Most of the Perl documentation lives in the [.pod] subdirectory, and
    is written in a simple markup format which can be easily read.  In this
    directory as well are pod2man and pod2html translators to reformat the
    docs for common display engines; a pod2hlp translator is under development.
    These files are copied to [.lib.pod] during the installation.
  - Define a foreign command to execute perldoc, such as
    $ Perldoc == "''Perl' Perl_Root:[lib.pod]Perldoc -t"
    This will allow users to retrieve documentation using Perldoc.  For
    more details, say "perldoc perldoc".
That's it.

If you run into a bug in Perl, please submit a bug report.  The PerlBug
program, found in the [.lib] directory, will walk you through the process
of assembling the necessary information into a bug report, and sending
of to the Perl bug reporting address, perlbug@perl.com.

* For more information

If you're interested in more information on Perl in general, you may wish to
consult the Usenet newsgroups comp.lang.perl.announce and comp.lang.perl.misc.
The FAQ for these groups provides pointers to other online sources of
information, as well as books describing Perl in depth.

If you're interested in up-to-date information on Perl development and
internals, you might want to subscribe to the perl5-porters mailing list.  You
can do this by sending a message to perl5-porters-request@nicoh.com, containing
the single line
subscribe perl5-porters
This is a high-volume list at the moment (>50 messages/day).

If you're interested in ongoing information about the VMS port, you can
subscribe to the VMSPerl mailing list by sending a request to
vmsperl-request@genetics.upenn.edu, containing the single line
subscribe VMSPerl
as the body of the message.  And, as always, we welcome any help or code you'd
like to offer - you can send mail to bailey@genetics.upenn.edu or directly to
the VMSPerl list at vmsperl@genetics.upenn.edu.

Finally, if you'd like to try out the latest changes to VMS Perl, you can
retrieve a test distribution kit by anonymous ftp from genetics.upenn.edu, in
the file [.perl5]perl5_ppp_yymmddx.zip, where "ppp" is the current Perl
patchlevel, and "yymmddx" is a sequence number indicating the date that
particular kit was assembled.  In order to make retrieval convenient, this
kit is also available by the name Perl5_VMSTest.Zip.  These test kits contain
"unofficial" patches from the perl5-porters group, test patches for important
bugs, and VMS-specific fixes and improvements which have occurred since the
last Perl release.  Most of these changes will be incorporated in the next
release of Perl, but until Larry Wall's looked at them and said they're OK,
none of them should be considered official.

Good luck using Perl.  Please let us know how it works for you - we can't
guarantee that we'll be able to fix bugs quickly, but we'll try, and we'd
certainly like to know they're out there.


* Acknowledgements

There are, of course, far too many people involved in the porting and testing
of Perl to mention everyone who deserves it, so please forgive us if we've
missed someone.  That said, special thanks are due to the following:
  Tim Adye <T.J.Adye@rl.ac.uk>
     for the VMS emulations of getpw*()
  David Denholm <denholm@conmat.phys.soton.ac.uk>
     for extensive testing and provision of pipe and SocketShr code,
  Mark Pizzolato <mark@infocomm.com>
     for the getredirection() code
  Rich Salz <rsalz@bbn.com>
     for readdir() and related routines
  Peter Prymmer <pvhp@lns62.lns.cornell.edu)
     for extensive testing, as well as development work on
     configuration and documentation for VMS Perl,
  the Stanford Synchrotron Radiation Laboratory and the
     Laboratory of Nuclear Studies at Cornell University for
     the the opportunity to test and develop for the AXP,
and to the entire VMSperl group for useful advice and suggestions.  In addition
the perl5-porters, especially Andy Dougherty <doughera@lafcol.lafayette.edu>
and Tim Bunce <Tim.Bunce@ig.co.uk>,  deserve credit for their creativity and
willingness to work with the VMS newcomers.  Finally, the greatest debt of
gratitude is due to Larry Wall <larry@wall.org>, for having the ideas which
have made our sleepless nights possible.

Thanks,
The VMSperl group
