#!./perl

BEGIN {
    require 5.004;
    @INC = 'lib';
    $ENV{PERL5LIB} = 'lib';
}

use File::Find;
use File::Compare;
use File::Copy ();
use File::Path ();
use Config;
use subs qw(unlink link chmod);

# override the ones in the rest of the script
sub mkpath {
    File::Path::mkpath(@_) unless $nonono;
}

$mainperldir = "/usr/bin";
$exe_ext = $Config{exe_ext};

while (@ARGV) {
    $nonono = 1 if $ARGV[0] eq '-n';
    $versiononly = 1 if $ARGV[0] eq '-v';
    shift;
}

umask 022;

@scripts = qw(	utils/c2ph utils/h2ph utils/h2xs
		utils/perlbug utils/perldoc utils/pl2pm utils/splain
		x2p/s2p x2p/find2perl
		pod/pod2man pod/pod2html pod/pod2latex pod/pod2text);

@pods = (<pod/*.pod>);

%archpms = (Config => 1, FileHandle => 1, overload => 1);
find(sub {
	if ("$File::Find::dir/$_" =~ m{^ext/[^/]+/(.*)\.pm$}) {
	    (my $pm = $1) =~ s{^lib/}{};
	    $archpms{$pm} = 1;
	}
    }, 'ext');

$ver = $];
$release = substr($ver,0,3);   # Not used presently.
$patchlevel = substr($ver,3,2);
die "Patchlevel of perl ($patchlevel)",
    "and patchlevel of config.sh ($Config{'PATCHLEVEL'}) don't match\n"
	if $patchlevel != $Config{'PATCHLEVEL'};

# Fetch some frequently-used items from %Config
$installbin = $Config{installbin};
$installscript = $Config{installscript};
$installprivlib = $Config{installprivlib};
$installarchlib = $Config{installarchlib};
$installsitelib = $Config{installsitelib};
$installsitearch = $Config{installsitearch};
$installman1dir = $Config{installman1dir};
$man1ext = $Config{man1ext};
$libperl = $Config{libperl};
# Shared library and dynamic loading suffixes.
$so = $Config{so};
$dlext = $Config{dlext};

$d_dosuid = $Config{d_dosuid};
$binexp = $Config{binexp};

# Do some quick sanity checks.

if ($d_dosuid && $>) { die "You must run as root to install suidperl\n"; }

   $installbin		|| die "No installbin directory in config.sh\n";
-d $installbin		|| mkpath($installbin, 1, 0777);
-d $installbin		|| $nonono || die "$installbin is not a directory\n";
-w $installbin		|| $nonono || die "$installbin is not writable by you\n"
	unless $installbin =~ m#^/afs/# || $nonono;

-x 'perl' . $exe_ext	|| die "perl isn't executable!\n";
-x 'suidperl' . $exe_ext|| die "suidperl isn't executable!\n" if $d_dosuid;

-x 't/TEST'		|| warn "WARNING: You've never run 'make test'!!!",
	"  (Installing anyway.)\n";

# First we install the version-numbered executables.

safe_unlink("$installbin/perl$ver$exe_ext");
copy("perl$exe_ext", "$installbin/perl$ver$exe_ext");
chmod(0755, "$installbin/perl$ver$exe_ext");

safe_unlink("$installbin/sperl$ver$exe_ext");
if ($d_dosuid) {
    copy("suidperl$exe_ext", "$installbin/sperl$ver$exe_ext");
    chmod(04711, "$installbin/sperl$ver$exe_ext");
}

# Install library files.

$do_installarchlib = $do_installprivlib = 0;
    
mkpath($installprivlib, 1, 0777);
mkpath($installarchlib, 1, 0777);
mkpath($installsitelib, 1, 0777) if ($installsitelib);
mkpath($installsitearch, 1, 0777) if ($installsitearch);

if (chdir "lib") {
    $do_installarchlib = ! samepath($installarchlib, '.');
    $do_installprivlib = ! samepath($installprivlib, '.');
#    $do_installprivlib = 0 if $versiononly || !($installprivlib =~ m/\Q$]/);

    if ($do_installarchlib || $do_installprivlib) {
	find(\&installlib, '.');
    }
    chdir ".." || die "Can't cd back to source directory: $!\n";
}
else {
    warn "Can't cd to lib to install lib files: $!\n";
}

# Install header files and libraries.
mkpath("$installarchlib/CORE", 1, 0777);
@corefiles = <*.h>;
push(@corefiles,$libperl) if $Config{"useshrplib"} ne "true";
# AIX needs perl.exp installed as well.
push(@corefiles,'perl.exp') if $^O eq 'aix';
# If they have built sperl.o...
push(@corefiles,'sperl.o') if -f 'sperl.o';
foreach $file (@corefiles) {
    # HP-UX (at least) needs to maintain execute permissions
    # on dynamically-loadable libraries. So we do it for all.
    copy_if_diff($file,"$installarchlib/CORE/$file")
	and chmod($file =~ /\.(so|\Q$dlext\E)$/ ? 0555 : 0444,
		   "$installarchlib/CORE/$file");
}
if ($Config{"useshrplib"} eq "true") {
    my($shrpdir) = $Config{"shrpdir"};
    $shrpdir = "$installarchlib/CORE" unless $shrpdir;
    copy_if_diff($libperl,"$shrpdir/$libperl")
	and chmod(0555, "$shrpdir/$libperl");
}    

# Offer to install perl in a "standard" location

$mainperl_is_instperl = 0;

if (!$versiononly && !$nonono && -t STDIN && -t STDERR
	&& -w $mainperldir && ! samepath($mainperldir, $installbin)) {
    local($usrbinperl)	= "$mainperldir/perl$exe_ext";
    local($instperl)	= "$installbin/perl$exe_ext";
    local($expinstperl)	= "$binexp/perl$exe_ext";

    # First make sure $usrbinperl is not already the same as the perl we
    # just installed.
    if (-x $usrbinperl) {
	# Try to be clever about mainperl being a symbolic link
	# to binexp/perl if binexp and installbin are different.
	$mainperl_is_instperl =
	    samepath($usrbinperl, $instperl) ||
	    samepath($usrbinperl, $expinstperl) ||
	     (($binexp ne $installbin) &&
	      (-l $usrbinperl) &&
	      ((readlink $usrbinperl) eq $expinstperl));
    }
    if ((! $mainperl_is_instperl) &&
	(yn("Many scripts expect perl to be installed as $usrbinperl.\n" . 
	     "Do you wish to have $usrbinperl be the same as\n" .
	     "$expinstperl? [y] ")))
    {	
	unlink($usrbinperl);
	eval { CORE::link $instperl, $usrbinperl } ||
	    eval { symlink $expinstperl, $usrbinperl } ||
		copy($instperl, $usrbinperl);
	$mainperl_is_instperl = 1;
    }
}

# Make links to ordinary names if installbin directory isn't current directory.

if (! $versiononly && ! samepath($installbin, '.')) {
    safe_unlink("$installbin/perl$exe_ext", "$installbin/suidperl$exe_ext");
    link("$installbin/perl$ver$exe_ext", "$installbin/perl$exe_ext");
    link("$installbin/sperl$ver$exe_ext", "$installbin/suidperl$exe_ext") 
      if $d_dosuid;
}

if (!$versiononly && ! samepath($installbin, 'x2p')) {
    safe_unlink("$installbin/a2p$exe_ext");
    copy("x2p/a2p$exe_ext", "$installbin/a2p$exe_ext");
    chmod(0755, "$installbin/a2p$exe_ext");
}

# cppstdin is just a script, but it is architecture-dependent, so
# it can't safely be shared.  Place it in $installbin.
# Note that Configure doesn't build cppstin if it isn't needed, so
# we skip this if cppstdin doesn't exist.
if (! $versiononly && (-f 'cppstdin') && (! samepath($installbin, '.'))) {
    safe_unlink("$installbin/cppstdin");
    copy("cppstdin", "$installbin/cppstdin");
    chmod(0755, "$installbin/cppstdin");
}

# Install scripts.

mkpath($installscript, 1, 0777);

if (! $versiononly) {
    for (@scripts) {
	(my $base = $_) =~ s#.*/##;
	copy($_, "$installscript/$base");
	chmod(0755, "$installscript/$base");
    }
}

# pstruct should be a link to c2ph

if (! $versiononly) {
    safe_unlink("$installscript/pstruct");
    link("$installscript/c2ph","$installscript/pstruct");
}

# Install pod pages.  Where? I guess in $installprivlib/pod.

if (! $versiononly && !($installprivlib =~ m/\Q$]/)) {
    mkpath("${installprivlib}/pod", 1, 0777);

    # If Perl 5.003's perldiag.pod is there, rename it.
    if (!$nonono && open POD, "${installprivlib}/pod/perldiag.pod") {
	read POD, $_, 4000;
	close POD;
	# Some of Perl 5.003's diagnostic messages ended with periods.
	if (/^=.*\.$/m) {
	    my ($from, $to) = ("${installprivlib}/pod/perldiag.pod",
			       "${installprivlib}/pod/perldiag-5.003.pod");
	    print STDERR "  rename $from $to";
	    rename($from, $to)
		or warn "Couldn't rename $from to $to: $!\n"
		unless $nonono;
	}
    }

    foreach $file (@pods) {
	# $file is a name like  pod/perl.pod
	copy_if_diff($file, "${installprivlib}/${file}");
    }

    # Link perldiag.pod into archlib
    my ($from, $to) = ("${installprivlib}/pod/perldiag.pod",
		       "${installarchlib}/pod/perldiag.pod");
    if (compare($from, $to) || $nonono) {
	mkpath("${installarchlib}/pod", 1, 0777);
	unlink($to);
	link($from, $to);
    }
}

# Check to make sure there aren't other perls around in installer's
# path.  This is probably UNIX-specific.  Check all absolute directories
# in the path except for where public executables are supposed to live.
# Also skip $mainperl if the user opted to have it be a link to the
# installed perl.

if (!$versiononly) {

    $dirsep = ($^O eq 'os2') ? ';' : ':' ;
    ($path = $ENV{"PATH"}) =~ s:\\:/:g ;
    @path = split(/$dirsep/, $path);
    @otherperls = ();
    for (@path) {
	next unless m,^/,;
	# Use &samepath here because some systems have other dirs linked
	# to $mainperldir (like SunOS)
	next if samepath($_, $binexp);
	next if ($mainperl_is_instperl && samepath($_, $mainperldir));
	push(@otherperls, "$_/perl$exe_ext")
	    if (-x "$_/perl$exe_ext" && ! -d "$_/perl$exe_ext");
    }
    if (@otherperls) {
	print STDERR "\nWarning: perl appears in your path in the following " .
	    "locations beyond where\nwe just installed it:\n";
	for (@otherperls) {
	    print STDERR "    ", $_, "\n";
	}
	print STDERR "\n";
    }

}

print STDERR "  Installation complete\n";

exit 0;

###############################################################################

sub yn {
    local($prompt) = @_;
    local($answer);
    local($default) = $prompt =~ m/\[([yn])\]\s*$/i;
    print STDERR $prompt;
    chop($answer = <STDIN>);
    $answer = $default if $answer =~ m/^\s*$/;
    ($answer =~ m/^[yY]/);
}

sub unlink {
    local(@names) = @_;
    my($cnt) = 0;

    foreach $name (@names) {
	next unless -e $name;
	chmod 0777, $name if $^O eq 'os2';
	print STDERR "  unlink $name\n";
	( CORE::unlink($name) and ++$cnt 
	  or warn "Couldn't unlink $name: $!\n" ) unless $nonono;
    }
    return $cnt;
}

sub safe_unlink {
    return if $nonono;
    local @names = @_;
    foreach $name (@names) {
	next unless -e $name;
	chmod 0777, $name if $^O eq 'os2';
	print STDERR "  unlink $name\n";
	next if CORE::unlink($name);
	warn "Couldn't unlink $name: $!\n";
	if ($! =~ /busy/i) {
	    print STDERR "  mv $name $name.old\n";
	    safe_rename($name, "$name.old")
		or warn "Couldn't rename $name: $!\n";
	}
    }
}

sub safe_rename {
    local($from,$to) = @_;
    if (-f $to and not unlink($to)) {
	my($i);
	for ($i = 1; $i < 50; $i++) {
	    last if rename($to, "$to.$i");
	}
	warn("Cannot rename to `$to.$i': $!"), return 0 
	   if $i >= 50;	# Give up!
    }
    link($from,$to) || return 0;
    unlink($from);
}

sub link {
    my($from,$to) = @_;
    my($success) = 0;

    print STDERR "  ln $from $to\n";
    eval {
	CORE::link($from, $to)
	    ? $success++
	    : ($from =~ m#^/afs/# || $to =~ m#^/afs/#)
	      ? die "AFS"  # okay inside eval {}
	      : warn "Couldn't link $from to $to: $!\n"
	  unless $nonono;
    };
    if ($@) {
	File::Copy::copy($from, $to)
	    ? $success++
	    : warn "Couldn't copy $from to $to: $!\n"
	  unless $nonono;
    }
    $success;
}

sub chmod {
    local($mode,$name) = @_;

    printf STDERR "  chmod %o %s\n", $mode, $name;
    CORE::chmod($mode,$name)
	|| warn sprintf("Couldn't chmod %o %s: $!\n", $mode, $name)
      unless $nonono;
}

sub copy {
    my($from,$to) = @_;

    print STDERR "  cp $from $to\n";
    File::Copy::copy($from, $to)
	|| warn "Couldn't copy $from to $to: $!\n"
      unless $nonono;
}

sub samepath {
    local($p1, $p2) = @_;
    local($dev1, $ino1, $dev2, $ino2);

    if ($p1 ne $p2) {
	($dev1, $ino1) = stat($p1);
	($dev2, $ino2) = stat($p2);
	($dev1 == $dev2 && $ino1 == $ino2);
    }
    else {
	1;
    }
}

sub installlib {
    my $dir = $File::Find::dir;
    $dir =~ s#^\.(?![^/])/?##;
    local($depth) = $dir ? "lib/$dir" : "lib";

    my $name = $_;

    if ($name eq 'CVS' && -d $name) {
	$File::Find::prune = 1;
	return;
    }
    
    # ignore patch backups and the .exists files.
    return if $name =~ m{[-\.]orig$|~$|^\.exists};

    $name = "$dir/$name" if $dir ne '';

    my $installlib = $installprivlib;
    if ($dir =~ /^auto/ ||
	  ($name =~ /^(.*)\.(?:pm|pod)$/ && $archpms{$1})) {
        $installlib = $installarchlib;
	return unless $do_installarchlib;
    } else {
	return unless $do_installprivlib;
    }

    if (-f $_) {
	if (/\.(?:al|ix)$/ && !($dir =~ m[^auto/(.*)$] && $archpms{$1})) {
	    $installlib = $installprivlib;
	    #We're installing *.al and *.ix files into $installprivlib,
	    #but we have to delete old *.al and *.ix files from the 5.000
	    #distribution:
	    #This might not work because $archname might have changed.
	    unlink("$installarchlib/$name");
	}
	if (compare($_, "$installlib/$name") || $nonono) {
	    unlink("$installlib/$name");
	    mkpath("$installlib/$dir", 1, 0777);
	    # HP-UX (at least) needs to maintain execute permissions
	    # on dynamically-loaded libraries.
	    copy_if_diff($_, "$installlib/$name")
		and chmod($name =~ /\.(so|$dlext)$/o ? 0555 : 0444,
			   "$installlib/$name");
	}
    } elsif (-d $_) {
	mkpath("$installlib/$name", 1, 0777);
    }
}

# Copy $from to $to, only if $from is different than $to.
# Also preserve modification times for .a libraries.
# On some systems, if you do
#   ranlib libperl.a
#   cp libperl.a /usr/local/lib/perl5/archlib/CORE/libperl.a
# and then try to link against the installed libperl.a, you might
# get an error message to the effect that the symbol table is older
# than the library.
# Return true if copying occurred.

sub copy_if_diff {
    my($from,$to)=@_;
    -f $from || die "$0: $from not found";
    if (compare($from, $to) || $nonono) {
	safe_unlink($to);   # In case we don't have write permissions.
        if ($nonono) {
            $from = $depth . "/" . $from if $depth;
        }
	copy($from, $to);
	# Restore timestamps if it's a .a library or for OS/2.
	if (!$nonono && ($^O eq 'os2' || $to =~ /\.a$/)) {
	    my ($atime, $mtime) = (stat $from)[8,9];
	    utime $atime, $mtime, $to;
	}
	1;
    }
}
