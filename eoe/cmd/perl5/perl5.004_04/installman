#!./perl
BEGIN { @INC = ('lib') }
use Config;
use Getopt::Long;
use File::Find;
use File::Path qw(mkpath);
use subs qw(unlink chmod rename link);
require Cwd;

umask 022;
$ENV{SHELL} = 'sh' if $^O eq 'os2';

$ver = $];
$release = substr($ver,0,3);   # Not used presently.
$patchlevel = substr($ver,3,2);
die "Patchlevel of perl ($patchlevel)",
    "and patchlevel of config.sh ($Config{'PATCHLEVEL'}) don't match\n"
	if $patchlevel != $Config{'PATCHLEVEL'};

$usage =
"Usage:  installman --man1dir=/usr/wherever --man1ext=1
                    --man3dir=/usr/wherever --man3ext=3
		    --notify --help
	Defaults are:
	man1dir = $Config{'installman1dir'};
	man1ext = $Config{'man1ext'};
	man3dir = $Config{'installman3dir'};
	man3ext = $Config{'man3ext'};
	--notify (or -n) just lists commands that would be executed.\n";

GetOptions( qw( man1dir=s man1ext=s man3dir=s man3ext=s notify n help)) 
	|| die $usage;
die $usage if $opt_help;

# These are written funny to avoid -w typo warnings.
$man1dir = defined($opt_man1dir) ? $opt_man1dir : $Config{'installman1dir'};
$man1ext = defined($opt_man1ext) ? $opt_man1ext : $Config{'man1ext'};
$man3dir = defined($opt_man3dir) ? $opt_man3dir : $Config{'installman3dir'};
$man3ext = defined($opt_man3ext) ? $opt_man3ext : $Config{'man3ext'};

$notify = $opt_notify || $opt_n;

# SGI build environment override defaults
if ($ENV{"ROOT"} and $ENV{"TOOLROOT"}) {
    $man3dir = "/usr/share/catman/p_man/man3" unless $opt_man3dir;
}

#Sanity checks

-x  "./perl$Config{exe_ext}" 
  or warn "./perl$Config{exe_ext} not found!  Have you run make?\n";
-d  $Config{'installprivlib'}
	|| warn "Perl library directory $Config{'installprivlib'} not found.
		Have you run make install?.  (Installing anyway.)\n";
-x "t/perl$Config{exe_ext}"		|| warn "WARNING: You've never run 'make test'!!!",
	"  (Installing anyway.)\n";

# Install the main pod pages.
runpod2man('pod', $man1dir, $man1ext);

# Install the pods for library modules.
runpod2man('lib', $man3dir, $man3ext);

# Install the pods embedded in the installed scripts
runpod2man('utils', $man1dir, $man1ext, 'c2ph');
runpod2man('utils', $man1dir, $man1ext, 'h2ph');
runpod2man('utils', $man1dir, $man1ext, 'h2xs');
runpod2man('utils', $man1dir, $man1ext, 'perldoc');
runpod2man('utils', $man1dir, $man1ext, 'perlbug');
runpod2man('utils', $man1dir, $man1ext, 'pl2pm');
runpod2man('utils', $man1dir, $man1ext, 'splain');
runpod2man('x2p', $man1dir, $man1ext, 's2p');
runpod2man('x2p', $man1dir, $man1ext, 'a2p.pod');
runpod2man('pod', $man1dir, $man1ext, 'pod2man');
runpod2man('pod', $man1dir, $man1ext, 'pod2html');

# It would probably be better to have this page linked
# to the c2ph man page.  Or, this one could say ".so man1/c2ph.1",
# but then it would have to pay attention to $man1dir and $man1ext.
runpod2man('utils', $man1dir, $man1ext, 'pstruct'); 

runpod2man('lib/ExtUtils', $man1dir, $man1ext, 'xsubpp');

sub runpod2man {
    # $script is script name if we are installing a manpage embedded 
    # in a script, undef otherwise
    my($poddir, $mandir, $manext, $script) = @_;

    my($downdir); # can't just use .. when installing xsubpp manpage

    $downdir = $poddir;
    $downdir =~ s:[^/]+:..:g;
    my($builddir) = Cwd::getcwd();

    if ($mandir eq ' ' or $mandir eq '') {
	print STDERR "Skipping installation of ",
	    ($script ? "$poddir/$script man page" : "$poddir man pages"), ".\n";
	return;
    }

    print STDERR "chdir $poddir\n";
    chdir $poddir || die "Unable to cd to $poddir directory!\n$!\n";

    # We insist on using the current version of pod2man in case there
    # are enhancements or changes from previous installed versions.
    # The error message doesn't include the '..' because the user
    # won't be aware that we've chdir to $poddir.
    -r  "$downdir/pod/pod2man" || die "Executable pod/pod2man not found.\n";

    # We want to be sure to use the current perl.  We can't rely on
    # the installed perl because it might not be actually installed
    # yet. (The user may have set the $install* Configure variables 
    # to point to some temporary home, from which the executable gets
    # installed by occult means.)
    $pod2man = "$downdir/perl -I $downdir/lib $downdir/pod/pod2man --section=$manext --official";

    mkpath($mandir, 1, 0777) unless $notify;  # In File::Path
    # Make a list of all the .pm and .pod files in the directory.  We will
    # always run pod2man from the lib directory and feed it the full pathname
    # of the pod.  This might be useful for pod2man someday.
    if ($script) {
	@modpods = ($script);
    } else {
	@modpods = ();
	find(\&lsmodpods, '.');
    }
    foreach $mod (@modpods) {
	$manpage = $mod;
	my $tmp;
	# Skip .pm files that have corresponding .pod files, and Functions.pm.
	next if (($tmp = $mod) =~ s/\.pm$/.pod/ && -f $tmp);
	next if ($mod eq 'Pod/Functions.pm');	#### Used only by pod itself

	# Convert name from  File/Basename.pm to File::Basename.3 format,
	# if necessary.
	$manpage =~ s#\.p(m|od)$##;
	if ($^O eq 'os2' || $^O eq 'amigaos') {
	  $manpage =~ s#/#.#g;
	} else {
	  $manpage =~ s#/#::#g;
	}
	$tmp = "${mandir}/${manpage}.tmp";
	$manpage = "${mandir}/${manpage}.${manext}";
	if (&cmd("$pod2man $mod > $tmp") == 0 && !$notify && -s $tmp) {
	    rename($tmp, $manpage) && next;
	}
	unless ($notify) {
    unlink($tmp);
	}
    }
    chdir "$builddir" || die "Unable to cd back to $builddir directory!\n$!\n";
    print STDERR "chdir $builddir\n";
}

sub lsmodpods {
    my $dir  = $File::Find::dir;
    my $name = $File::Find::name;
    if (-f $_) {
        $name =~ s#^\./##;
	push(@modpods, $name) if ($name =~ /\.p(m|od)$/);
    }
}

print STDERR "  Installation complete\n";

exit 0;
    

###############################################################################
# Utility subroutines from installperl

sub cmd {
    local($cmd) = @_;
    print STDERR "  $cmd\n";
    unless ($notify) {
	if ($Config{d_fork}) {
	    fork ? wait : exec $cmd;  # Allow user to ^C out of command.
	}
	else {
	    system $cmd;
	}
	warn "Command failed!!\n" if $?;
    }
    return $? != 0;
}

sub unlink {
    local(@names) = @_;
    my $cnt = 0;

    foreach $name (@names) {
next unless -e $name;
chmod 0777, $name if $^O eq 'os2';
print STDERR "  unlink $name\n";
( CORE::unlink($name) and ++$cnt 
    or warn "Couldn't unlink $name: $!\n" ) unless $notify;
    }
    return $cnt;
}

sub link {
    local($from,$to) = @_;

    print STDERR "  ln $from $to\n";
    eval { CORE::link($from,$to) }
|| system('cp', $from, $to) == 0
|| warn "Couldn't link $from to $to: $!\n" unless $notify;
}

sub rename {
    local($from,$to) = @_;
    if (-f $to and not unlink($to)) {
my($i);
for ($i = 1; $i < 50; $i++) {
    last if CORE::rename($to, "$to.$i");
}
warn("Cannot rename to `$to.$i': $!"), return 0 
    if $i >= 50;	# Give up!
    }
    link($from,$to) || return 0;
    unlink($from);
}

sub chmod {
    local($mode,$name) = @_;

    printf STDERR "  chmod %o %s\n", $mode, $name;
    CORE::chmod($mode,$name) || warn sprintf("Couldn't chmod %o %s: $!\n",$mode,$name)
	unless $notify;
}

sub samepath {
    local($p1, $p2) = @_;
    local($dev1, $ino1, $dev2, $ino2);

    if ($p1 ne $p2) {
	($dev1, $ino1) = stat($p1);
	($dev2, $ino2) = stat($p2);
	($dev1 == $dev2 && $ino1 == $ino2);
    }
    else {
	1;
    }
}
