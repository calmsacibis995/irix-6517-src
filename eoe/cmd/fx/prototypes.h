/* for library routine prototypes */
#ifndef ARCS_SA
#ifndef _STANDALONE
#include <bstring.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#endif
#else
#include <libsc.h>
#endif

/* fx routine prototypes */
ITEM *matchitem(MENU *m, char *s, int numok);
char *attribs(ITEM *items, int flags);
char *cylsub(daddr_t bn);
char *dksub(void);
char *getarg(void);
char *skipcnum(char *sp, int defradix, uint64_t *ip);
char *smfd_partname(int p);
daddr_t exarea(daddr_t startbn);
int SetTestPhase(int x);
int addibb(daddr_t bn);
int argnum(uint *(_n), uint dfl, uint hi, char *name);
int checkparts(void);
int checkvh(struct volume_header *vhp);
int chkmounts(char *special);
int dpcmp(struct device_parameters *v, struct device_parameters *a);
int errwarn(char *msg, ...);
int exercisetrack(daddr_t blk);
int formattrack(uint cyl, uint hd);
int get_nums(uint64_t hi, uint64_t *n, uint cnt);
int getdefectlist(uint cyl, uint head, unchar *buf);
int getfloptype(char *argstr);
int getfrac(uint curval, uint divisor, char *prmpt);
int getnum(uint64_t *_n, uint64_t hi, char *name);
int gioctl(int cmd, void *ptr);
int gopen(uint d, uint p);
int gread(daddr_t bn, void *buf, uint count);
int gwrite(daddr_t bn, void *buf, uint count);
int intersect(struct partition_table *p1, struct partition_table *p2);
int isbn(char *str, daddr_t *_bn);
int iscnum(char *src, uint64_t *ip);
int iscyl(char *str, daddr_t *_bn);
int isfstype(int t);
int map_alloc(char *map, uint len, uint n);
int maptrack(uint cyl, uint hd, uint rcyl, uint rhd);
int match(MENU *m, char *s, int numok);
int mkintr(void);
int noargs(void);
int partcheck(uint n, struct partition_table *p);
int passthru( int code, int *(_retcode));
int prefmatch(char *ipart, char *str);
int rawcdcread(daddr_t bn, char *buf);
int rawread(daddr_t bn, unchar *buf);
int readconfig(unchar *buffer);
int readdvh(struct volume_header *bp);
int readformat(unchar *buffer);
int readinvh(struct volume_header *vhp);
int readsgilabel(CBLOCK *bp, int complain);
int rt_cfind(void);
int rwcheck(daddr_t bn, uint sectors);
int scanpass(void);
int scsi_addbb(uint bn);
int scsi_readcapacity(unsigned *addr);
int setintr(int flag);
int slipsector(uint cyl, uint head, uint sector);
#ifdef	D_MAGIC /* needs dklabel.h */
int sgi_labchk(struct disk_label *tab, struct disk_label *dsk);
#endif
int wmatch(char *iname, char *s);
struct volume_directory *findent(char *name, int flag);
uint btos(uint n);
uint getscreenwdith(void);
uint getscreenwidth(void);
uint mbytes(uint blocks);
uint mbytetoblk(uint mbyte);
uint stob(uint n);
uint strbreak(char *line, char **vec, int maxvec);
void SetTestPat(unchar *s, int n);
void TestPatFill(unchar *buf, int len);
void addbb_func(void);
void adderr(int drive, daddr_t bn, char *s);
void argbn(daddr_t *_bn, daddr_t dfl, daddr_t hi, char *name);
void argcheck(void);
void argchoice(int *_n, int dfl, MENU *m, const char *name);
void argerr(char *msg, ...);
void argslice(uint *_slice, uint dfl, uint hi, char *name);
void auto_func(void);
void banner(char *s);
void bflystepper(void);
void butterfly_func(void);
void callfunc(void (*sub)(void), char *line);
void callmenu(MENU *m);
void callsub(void (*sub)(), int argc, char **argv);
void check_dp(char *dname, int vhvalid);
void checkbn(char *str, daddr_t *_bn, daddr_t hi, char *name);
void checkdname(char *str, char *tgt, char *name);
void clearent(char *name);
void cmpbuf_func(void);
void colprint(void *p, uint n, uint size, uint w, void (*sub)());
void complete_func(void);
void completeargs(void);
void create_all_func(void);
void create_bi_func(void);
void create_dt_func(void);
void create_label(void);
void create_pt_func(void);
void create_sgiinfo_func(void);
void ctlrcheck(void);
void deflogical( int ix, u_char *bp, char *tgt);
void deletebb_func(void);
void diffbuf(unchar *a, unchar *b, uint nbytes);
void do_scsidefault(void);
void do_scsiformat(int);
void do_smfdformat(int);
void doformat(int cyl, int ncyls);
void dot_func(void);
void dotdot_func(void);
void dotset(int cyl);
void dumpbuf_func(void);
void dumpslice(struct partition_table *p, char *prompt);
void editbuf_func(void);
void err_fmt(char *msg, ...);
void errlog_func(void);
void errlog_summary(void);
void exargs(void);
void exit_func(void);
void fatal_mapbanner(void);
void fillbuf_func(void);
void flushoutp(void);
void format_func(void);
void forward_func(void);
void forwarding(void);
void funchelp(int n, ITEM *t);
void fx_find_ctlr(void);
void fxscript(char *);
void gclose(void);
void get_drivetype(int *_n);
void get_scsi_param(void);
void get_vh(struct volume_header *vp);
void getattribs(int *_n, ITEM *items);
void getbn(daddr_t *_bn, daddr_t hi, char *name);
void getchoice(int *_n, MENU *m, const char *name, int numok);
void getstring(char *str, char *dfl, char *name);
void ggets(char *buf, int len);
void help_func(void);
void helpitem(int n, register ITEM *t);
void hsortibb(void);
void import_bst(void);
void init_db(void);
void init_ex(void);
void init_label(char *dname);
void init_menus(MENU *m);
void initibb(void);
void invalibb(daddr_t bn);
void lastchance(void);
void lastchance_dp(void);
void logmsg(char *fmt, ...);
void ls_init(char *lmap, int *lmax);
void main_fx(void);
void map_busy(char *map, uint len, uint a, int n);
void map_unbusy(char *map, uint len, uint a, int n);
void menu_digest(MENU *m);
void menu_traverse(MENU *m);
void menuhelp(int n, ITEM *t);
void menuloop_init(void);
void menuloop(void);
void mgetargs(char *line, uint len, int *_argc, char ***_argv);
void mpop(void);
void newline(void);
void number_func(void);
void optupdate(void);
void prh(void);
int print_scsidefects(int logical, int justmfg);
void printerr(void);
void printibb(void);
void printversion(void);
void prmenupath(MENU *m);
void prompt(char *s);
void pt_expert_func(void);
void select_options(int);
void root_select_func(void);
void show_pts(struct volume_header *);
void sroot_select_func(void);
void option_select_func(void);
void pt_resize_func(void);
void pt_root_func(void);
void pt_sroot_func(void);
void pt_xlvroot_func(void);
void pt_optdrive_func(void);
void pt_xlvoptdrive_func(void);
void qhelp(void);
void fxsort(void *base, size_t n, size_t size, int (*compar) (const void *, const void *));
void random_func(void);
void randstepper(void);
void readbuf_func(void);
void readdefects_func(void);
void readin_bi_func(void);
void readin_dp(void);
void readin_dt_func(void);
void readin_pt_func(void);
void readin_sgiinfo_func(void);
void reinst_warning(void);
void repl_init(void);
void scerrwarn(char *msg, ...);
void scsi_defparm_func(void);
void scsi_dname(char *s, int len);
void scsi_setgeom_func(void);
void scsi_setparam_func(void);
void scsi_showgeom_func(void);
void scsi_showparam_func(void);
void scsiset_dp(struct device_parameters *dp);
void scsiset_label(CBLOCK *sgijunk, int showname);
void seek_func(void);
void seqstepper(void);
void sequential_func(void);
void set_bi_func(void);
void set_dp_func(void);
void set_pt_func(void);
void set_sgiinfo_func(void);
int  set_vh(struct volume_header *vp);
void setoff(const char *s, ...);
void setpage_func(void);
void settestpat_func(void);
void show_all_func(void);
void show_bi_func(void);
void show_dt_func(void);
void show_pt_cap(void);
void show_pt_func(void);
void show_sgiinfo_func(void);
void showbb_func(void);
void showcapacity_func(void);
void showdiff_dp(void);
void showpages_func(void);
void showstatus_func(void);
void showtestpat_func(void);
void showuib_func(void);
void sortibb(void);
void stop_on_error_func(void);
void sync_func(void);
int  update(void);
void update_bst(int bflag);
void update_dt(char *name, void *data, int len);
void update_sgi(void);
int  update_vh(void);
void writebuf_func(void);
int qcheck(char *s);
void argstring(char *str, char *dfl, char *name);
void checkstring(char *str, char *dfl);
void checkflags(char *cp, char *fp);
int no(char *s);
int yes(char *s);
int yesno(int yflag, char *s);
void update_mbr(void *);
#ifndef _STANDALONE
int vhchksum(int *, size_t);
char *index(const char *, int);
#endif
#if defined(_STANDALONE) && !defined(ARCS_SA)
int vh_checksum(int *ip, size_t n);
extern void *malloc(size_t);
#endif

#ifdef ARCS_SA
void exit(int);
#endif
