.\"
.so gpsml
..\"  @OSF_COPYRIGHT@
...\"  COPYRIGHT NOTICE
...\"  Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.
...\"  ALL RIGHTS RESERVED (DCE).  See the file named COPYRIGHT.DCE in the
...\"  src directory for the full copyright text.
...\"
...\"
...\" ********************************************************************
...\"                                                                    *
...\" HP/DIGITAL CONFIDENTIAL
...\" Copyright (c) 1991 Hewlett-Packard Co. and Digital Equipment Corp.
...\" All rights reserved.
...\"                                                                    *
...\" ********************************************************************
.wH "<command_section>"(DCE RPC)
.wH "<reference>(prod) -- DCE RPC"
.TH "idl" "1rpc"
.nh
.iX "DCE RPC entity" "\*Lidl\*O command"
.iX "\*Lidl\*O command"
.iX "commands" "\*Lidl\*O"
.iX "compilers" "IDL"
.iX "IDL"
.iX "IDL" "compiler"
.iX "-: IDL" "Interface Definition Language"
.wH "<reference>(prod) -- DCE RPC"
.SH "NAME"
.PP
\*Lidl\*O - Invokes the Interface Definition Language (IDL) compiler
.SH "SYNOPSIS"
.PP
.wH "<endosf_overview>"
.sS
\*Lidl\*O
\*Vfilename\*O
\*O[\*Vargument\*O] \&.\&.\&.
.sE
.wH "<endformat>"
.br
.ne 1.5i
.SH "ARGUMENTS"
.PP
.iX "\*Lidl\*O command" "arguments"
.VL 8m
.LI "\*L\-client \*Vfile_type\*O"
.iX "client" "files"
.iX "client" "stub"
.iX "client" "auxiliary file"
.iX "stub" "client"
.iX "auxiliary file" "client, server"
.iX "files" "client"
.iX "files" "stub"
.iX "files" "auxiliary"
Determines which client files to generate. If you do not specify this
argument, the compiler generates all client files. The file types are
as follows:
.VL 5m
.LI "\*Lnone\*O"
Does not generate client files.
.LI "\*Lstub\*O"
Generates only a client stub file.
.LI "\*Laux\*O"
Generates only a client auxiliary file. A
client auxiliary file is generated only if the interface contains any
out-of-line or self-pointing types.
.LI "\*Lall\*O"
Generates client stub and client auxiliary
files. This is the default and is the same as not specifying the
\*L\-client\*O argument.
.LE
.LI "\*L\-server \*Vfile_type\*O"
.iX "files" "server"
.iX "files" "stub"
.iX "files" "auxiliary"
.iX "server" "files"
.iX "server" "stub"
.iX "server" "auxiliary file"
.iX "stub" "server"
Determines which server files to generate. If you do not specify this
argument, the compiler generates all server files. The file types are
as follows:
.VL 5m
.LI "\*Lnone\*O"
Does not generate server files.
.LI "\*Lstub\*O"
Generates only a server stub file.
.LI "\*Laux\*O"
Generates only a server auxiliary file. A
server auxiliary file is generated only if the interface contains any
out-of-line, self-pointing, or pipe types.
.LI "\*Lall\*O"
Generates server stub and server auxiliary
files. This is the default and is the same as not specifying the
\*L\-server\*O argument.
.LE
.LI "\*L\-cstub \*Vfilename\*O"
Specifies a pathname for the client stub file. When you give a filename,
do not give a file extension; the \*Lidl\*O compiler
appends \*L.c\*O to the C source file and \*L.o\*O to the object file.
If you do not use the \*L\-cstub\*O argument, the \*Lidl\*O compiler
appends \*L_cstub.c\*O to the C source file and \*L_cstub.o\*O to
the object file.
.LI "\*L\-sstub \*Vfilename\*O"
Specifies a pathname for the server stub file. When you give a filename,
do not give a file extension; the \*Lidl\*O compiler
appends \*L.c\*O to the C source file and \*L.o\*O to the object file.
If you do not use the \*L\-sstub\*O argument, the \*Lidl\*O compiler
appends \*L_sstub.c\*O to the C source file and \*L_sstub.o\*O to
the object file.
.LI "\*L\-caux \*Vfilename\*O"
Specifies a pathname for the client auxiliary file. When you give a filename,
do not give a file extension; the \*Lidl\*O compiler
appends \*L.c\*O to the C source file and \*L.o\*O to the object file.
If you do not use the \*L\-caux\*O argument, the \*Lidl\*O compiler
appends \*L_caux.c\*O to the C source file and \*L_caux.o\*O to
the object file.
.LI "\*L\-saux \*Vfilename\*O"
Specifies a pathname for the server auxiliary file. When you give a filename,
do not give a file extension; the \*Lidl\*O compiler
appends \*L.c\*O to the C source file and \*L.o\*O to the object file.
If you do not use the \*L\-caux\*O argument, the \*Lidl\*O compiler
appends \*L_saux.c\*O to the C source file and \*L_saux.o\*O to
the object file.
.LI "\*L\-header \*Vheader_file\*O"
.iX "header file"
.iX "files" "header"
Allows you to specify a name for the generated header file. By default the
compiler takes the basename of the IDL file and appends the \*L.h\*O
extension to it.
.LI "\*L\-out \*Vdirectory\*O"
.iX "directories"
Places the output files in the directory you specify. By default the
compiler places the output files in the current working directory.
.LI "\*L\-I\*Vdirectory\*O"
Specifies a directory name that contains imported interface definition
files. You can specify more than one directory by specifying additional
\*L\-I\*Vdirectory\*O arguments on the command line. The
compiler searches the directories in the order you list them. If a file is
present in more than one directory, the compiler takes the first occurrence
of the file. The default behavior of the compiler is to first search the
current directory, then all directories you specify, then the system IDL
directory. The directory you specify is also passed to the C preprocessor
and the C compiler.
.iX "compilers" "C"
.iX "C language"
.iX "C language" "compiler"
.iX "compilers" "C"
.LI "\*L\-no_def_idir\*O"
Specifies that the compiler search only the current directory for imported
files. When you use this with \*L\-I\*Vdirectory\*O, the
compiler searches only the directories you list, not the current directory,
and not the system IDL directory.
.LI "\*L\-no_mepv\*O"
.iX "EPV"
.iX "-; EPV" "entry point vector"
.iX "-; CEPV" "EPV"
Causes the compiler to not generate a manager Entry Point Vector (EPV) in
the server stub. Use this argument if the manager code and IDL file do not use
the same operation names. If you specify this argument you must provide
an EPV within the manager code that can be used when the interface
is registered with the RPC server runtime.
The name of the type that you construct an EPV with is
\*Eif_name\*L_v\*Emajor-version\*L_\*Eminor-version\*L_epv_t\*O where
\*Eif_name\*O is the interface name.
It is not necessary to
use this argument if the operation names in the manager code and IDL file
are the same. In this case, the compiler generates a manager EPV in the
server stub using the names of the operations in the IDL file.
(For information on registering
the server, see the \*Lintro(3rpc)\*O and \*Lrpc_server_register_if(3rpc)\*O
reference pages later in this chapter.
See also the \*VOSF DCE Application Development Guide\*O.)
.LI "\*L\-cepv\*O"
.iX "CEPV"
.iX "-; CEPV" "client entry point vector"
.iX "-; EPV" "CEPV"
Generates local routines in the client stub file
(\*Vfilename\*L_cstub.c\*O) and defines a Client Entry Point Vector (CEPV)
of the name \*Eif_name\*L_v\*Emajor-version\*L_\*Eminor-version\*L_c_epv\*O
where \*Eif_name\*O is the interface name. The CEPV
contains the addresses of the local routines. The client code must call the
routines indirectly by using the addresses in the CEPV; otherwise, the stub
routines in the client stub file must have the same names as the operations in
the IDL file. (For information on registering
the server, see the \*Lintro(3rpc)\*O and \*Lrpc_server_register_if(3rpc)\*O
reference pages later in this chapter.
See also the \*VOSF DCE Application Development Guide\*O.)
.LI "\*L\-cpp_cmd \*V'c_preprocessor_command_line'\*O"
.iX "C language" "preprocessor"
.iX "preprocessor"
Allows you to specify a C preprocessor
other than the default. The compiler invokes the C
preprocessor found in that command line. The output of the C preprocessor is
an expanded version of the input file(s) containing replacement text for any
preprocessor directives (for example, the \*L#include\*O preprocessor directive).
.LI "\*L\-cpp_opt \*V'command_options'\*O"
Specifies additional options to be passed to the C preprocessor. You can add
options to the command line used to invoke the C preprocessor
independent of the \*L\-cpp_cmd\*O argument. The IDL compiler
concatenates the \*L\-cpp_cmd, -cpp_opt, -D, -U, -I\*O arguments
and the source filename into a command used to invoke the C preprocessor.
.PP
The compiler repeats this process for each Attribute Configuration File (ACF)
and IDL file.
.LI "\*L\-no_cpp\*O"
Does not invoke the C preprocessor. Note that the C preprocessor must be run on
files that contain preprocessor directives (such as \*L#include\*O) in the
interface definition.
.LI "\*L\-cc_cmd \*V'command_line'\*O"
Invokes the C compiler and compiler options you specify in the
\*V'command_line'\*O argument rather than the default C compiler and
compiler options.
.LI "\*L\-cc_opt \*V'command_options'\*O"
Specifies additional options to be passed to the C compiler. You can add
options to the command line used to invoke the C compiler
independent of the \*L\-cc_cmd\*O argument. The IDL compiler
concatenates the \*L\-cc_cmd\*O, \*L\-cc_opt\*O, \*L\-I\*O
arguments and the source filename into a command that invokes the C
compiler. This procedure is done for each generated stub or auxiliary file.
.LI "\*L\-D\*Vname\*O[\*L=\*Vdefinition\*O]"
.iX "\*L#define\*O"
Defines a symbol name and an optional value to be passed to the C
preprocessor. You can use this method of defining a symbol instead of using
\*L#define\*O in the source code. You can use more than one \*L\-D\*Vname\*O
argument on the command line. This argument has no effect if
you use the \*L\-no_cpp\*O argument.
.LI "\*L\-U\*Vname\*O"
Removes (undefines) any initial definition of a symbol name as defined by
\*L\-D\*Vname\*O. You can use this method to remove a
symbol name instead of using \*L#undef\*O in the source code.
You can use more than one
\*L\-U\*Vname\*O argument on the command line.
This argument has no effect if you use the \*L\-no_cpp\*O argument. If
you define and undefine a name on the same command line, undefining takes
precedence.
.LI "\*L\-space_opt\*O"
.iX "marshalling"
Generates code for the marshalling and unmarshalling of data
that is optimized for space, rather than speed.
.LI "\*L\-syntax_only\*O"
Checks only the syntax of the IDL file, but does not generate any output files.
.LI "\*L\-keep \*Vfile_types\*O"
Specifies which files to retain. To produce the object modules, the IDL
compiler first creates C source modules, then invokes the target C compiler
to produce object modules, and finally, deletes the C source modules.
If you do not use \*L\-keep\*O, only the object modules are saved.
.PP
The file types are as follows:
.VL 5m
.LI "\*Lnone\*O"
Does not save the C source or the object
modules. Does not invoke the C compiler.
.LI "\*Lc_source\*O"
Saves only the C source modules. Does
not invoke the C compiler.
.LI "\*Lobject\*O"
Saves only the object modules.
.LI "\*Lall\*O"
Saves both the C source and the object
modules.
.LE
.LI "\*L\-bug \*Vn\*O, \*L\-no_bug \*Vn\*O"
...\" .LI "\*L\-no_bug \*Vn\*O"
.iX "bugs"
Retains (\*L\-bug\*O) or does not retain (\*L\-no_bug\*O) a specified bug from earlier IDL
compiler versions. This is desirable if a bug fix introduces
incompatibilities between the old incorrect behavior (\*L\-bug\*O)
and the new correct behavior (\*L\-no_bug\*O). The \*Vn\*O
specifies the number of the bug in the NCS Version 1
Network Interface Definition Language (NIDL) compiler that may
.iX "-:NIDL" "Network Interface Definition Language"
.iX "-;IDL" "NIDL"
be incompatible with the new DCE IDL compiler. You can specify more than one
bug or no bug argument on the command line. By default, no bugs are preserved.
Bug numbers are as follows:
.VL 5m
.LI "\*L\-bug 1\*O"
If a varying \*L[v1_array]\*O with no elements is
marshalled, required pad bytes preceding subsequent parameters are sometimes
missing.
.LI "\*L\-bug 2\*O"
If a varying \*L[v1_array]\*O with no elements is
marshalled, extra pad bytes preceding subsequent parameters are sometimes
included.
.LI "\*L\-bug 3\*O"
Defines the value of \*Lndr_true\*O to be 0xFF, instead of 0x01. For
new development in DCE RPC, the symbol \*Lidl_true\*O and the obsolete
symbol \*Lndr_true\*O are defined as 0x01. However, if you specify the
\*L\-bug 3\*O argument, both symbols are defined with the value 0xFF.
.LE
.LI "\*L\-stdin\*O"
Takes the standard output of a previous utility as the input to the \*Lidl\*O
command. For example:
.iS
\*C$ \*Lcat my_filename.idl | idl -stdin
.iE
.LI "\*L\-version\*O"
Displays the current version of the IDL compiler.
.LI "\*L\-v\*O"
Prints informational messages (verbose mode) on the screen while the
compiler is running.
.iX "messages" "informational"
.LI "\*L\-no_warn\*O"
.iX "messages" "warning"
Suppresses compiler warning messages.
.LI "\*L\-confirm\*O"
Displays all the \*Lidl\*O command arguments you chose, but
does not compile the source IDL file. If you use this with the
\*L\-v\*O argument, informational messages about how the compiler
behaves if you do not use \*L\-confirm\*O are displayed but no corresponding
actions are performed.
.LE
.wH "<endarguments>"
.br
.ne 1.5i
.SH "DESCRIPTION"
.PP
.iX "interface definition"
The \*Lidl\*O command invokes the IDL compiler to convert an
interface definition, written in IDL, into output files. The output files
include a header file, server stub file, client stub file, and auxiliary
files. The compiler constructs the names of the output files
by keeping the basename of the interface definition source file but
replacing the filename extension with the new extension (or suffix and
extension) appropriate to the newly generated type of output file.
For example, \*Lmath.idl\*O could produce \*Lmath_sstub.c\*O
or \*Lmath_sstub.o\*O for the server stub.
.PP
The \*Lidl\*O command accepts the following input:
.ad l
.ML
.LI
An interface definition filename.
.LI
Arguments to indicate either special actions to be performed by the
compiler, or special properties of the input or output files.
.LE
.ad b
.PP
The IDL compiler searches through directories
for any related ACF. For example,
if you compile a file named \*Lsource.idl\*O, the compiler automatically
searches for a file named \*Lsource.acf\*O. The compiler also searches
for any imported IDL file (and its related ACF).   The compiler
searches for these files using the following order:
.PP
.AL
.LI
The current working directory. The compiler always searches this directory
unless you specify the \*L\-no_def_idir\*O and \*L\-I\*O\*Vdirectory\*O
arguments together.
.LI
Any imported directory. The compiler searches each directory you are
specifying
in the \*L\-I\*O\*Vdirectory\*O argument.
.LI
The system IDL directory.
The compiler automatically imports \*Lnbase.idl\*O, which resides in
the system IDL directory.
The compiler always searches this directory
unless you specify the \*L\-no_def_idir\*O argument.
.LI
The directory specified in the source filename.  If you explicitly specify
a directory in the source IDL pathname, then that directory is searched
for the corresponding ACF.  For example,
.iS
\*C$ \*Lidl /path/pathname/my_source.idl\*O
.iE
.PP
causes the IDL compiler to look for \*L/path/pathname/my_source.acf\*O if
\*Lmy_source.acf\*O is not found in the directories in 1 through 3 above.
.PP
Note that this directory is not searched for any imported IDL file or
its corresponding ACF.
.LE
.SS "Restrictions"
.PP
The following filenames are reserved by the IDL compiler. Naming an IDL file
with one of these names may result in unexpected behavior.
.TS
center tab(@);
lbe lbe lbe lbe.
iovector.idl@lbase.idl@nbase.idl@ncastat.idl
ndrold.idl@rpc.idl@rpcbase.idl@rpcpvt.idl
rpcsts.idl@rpctypes.idl@twr.idl@uuid.idl
.TE
...\" .VL
...\" .LI "\*L iovector.idl\*O"
...\" \*Llbase.idl\*O
...\" .LI "\*L nbase.idl\*O"
...\" \*Lncastat.idl\*O
...\" .LI "\*L ndrold.idl\*O"
...\" \*Lrpc.idl\*O
...\" .LI "\*L rpcbase.idl\*O"
...\" \*Lrpcpvt.idl\*O
...\" .LI "\*L rpcsts.idl\*O"
...\" \*Lrpctypes.idl\*O
...\" .LI "\*L twr.idl\*O"
...\" \*Luuid.idl\*O
...\" .LE
.PP
.wH "<endfiles>"
.br
.ne 1.5i
.SH "CAUTIONS"
.PP
.iX "messages" "warning"
The IDL compiler generates ANSI C code. It also supports C compilers that
are not fully ANSI compliant although a warning message may occur during
compilation of the stubs by the C compiler.
A C compiler that is not fully ANSI compliant may generate the following
warning messages:
.ad l
.ML
.LI
\*Cwarning: & before array or function: ignored\*O
.LI
\*Cwarning: enumeration type clash, operator =\*O
.LE
.ad b
.br
.ne 1.5i
.SH "FILES"
.PP
.VL 15m
.LI "\*L/lib/cpp\*O"
C preprocessor
.LI "\*Edceshared\*L/bin/idl\*O"
Compiler
.LI "\*Edceshared\*L/include\*O"
System IDL directory for imported files
.LI "\*Edceshared\*L/include/nbase.idl\*O"
Predefined IDL types
.LI "\*Edceshared\*L/include/nbase.acf\*O"
Predefined ACF types
.LI "\*Edceshared\*L/nls/msg/\*ELANG\*L/idl.cat\*O"
Compiler error messages
.LI "\*Edceshared\*L/share/include/\*Efile.ext\*O"
All \*L.idl\*O or \*L.h\*O files that are part of DCE RPC
.LE
.br
.ne 1.5i
.SH "EXAMPLES"
.PP
.AL
.LI
Invoke the IDL compiler to compile the interface definition file \*Ltest.idl\*O
and keep the generated C source modules. Only server files are generated.
The server stub default filename is overridden by creating a file named
\*Ltest_ss.c\*O for the
server stub module. The server auxiliary default filename
is overridden by creating a file named \*Ltest_sa.c\*O for the server auxiliary
module.
.iS
\*C$ \*Lidl test.idl -keep c_source -client none -sstub test_ss.c -saux test_sa.c
.iE
.LI
Invoke the IDL compiler to compile the interface definition file
\*Ltest.idl\*O, but do not run the C preprocessor.
The manager entry point vector is not
defined in the generated server stub module. The IDL compiler searches the
parent directory of the current directory for any IDL files that \*Ltest.idl\*O
could import. The generated output files are located in the \*Loutput\*O
subdirectory under the current directory.
.iS
\*C$ \*Lidl test.idl -no_cpp -no_mepv -I.. -out ./output
.iE
.LE
.SH "RELATED INFORMATION"
.PP
.ad l
Books:  \*VOSF DCE Application Development Guide\*O.
.ad b
