
RSVP -- ReSerVation Protocol
USC Information Sciences Institute
Marina del Rey, CA



		CHANGES IN /rsvpd DIRECTORY

CHANGES IN RELEASE 4.1a6   June 10, 1997:

rapi_lib.h, rapi_lib.c, rapi_fmt.c:
		Further updates to RAPI interface, to match RAPI spec.
		Eg: Sockaddr_in -> sockaddr, to handle IPv6.  GPI_SESSION flag
		value changed to avoid internal conflict with (obsolete!)
		direction flags (see below).  Changed flag bits and fixed
		type inconsistency in Simplified format Adspec qos_adspecx_t.

rsvp_api.c:	"Direction" flags RAPI_DIR_SEND and RAPI_DIR_RECV were long
		ago removed from RAPI interface to application.  The flags
		were then used internally across the Unix socket, but they
		are not logically necessary.  Clean up this mess: rename flags
		as API_DIR_SEND/RECV to avoid confusion.  Ignore them
		across the RAPI interface and/or the Unix socket, but use
		them locally within rsvpd and within rapi_lib.c.

rapi_lib.c, rsvp_api.c:
		In conjunction with the above, define new RAPI_STAT_...
		direction flags for rapi_status call.

rapi_lib.h, rsvp_api.h:
		Move definitions of ISI-specific RAPI-based management
		interface from general RAPI defn in rapi_lib.h to ISI-
		specific rsvp_api.h.

rapi_fmt.c, rsvp_api.c, rsvp_debug.c, rsvp_print.c, rsvp_util.c
		Support and display IPv4 GPI format SESSION and 
		FILTER/SENDER_TSPEC objects from RAPI/API.

rapi_lib.c, rapi_err.h:
		Define new RAPI error code for GPI errors.

rsvp_path.c, rsvp_netio.c:
		Move "reverse path unicast routing kludge" out of accept_path
		and removed #ifdef SunOS brackets.
		
rsvp_path.c:	Implement new rules for accepting Path messages and Path
		Tear messages, as discussed on RSVP mailing list.

rsvp_path.c:	Fix bug: longtime bug in the use of a global fPSB.
		Adopted fix suggested by [Koutarou Ise, Toshiba], which
		sets fPSB dynamically in each call of Route_Update, by
		scanning PSB list.

rsvp_err.c:	Fix bug: erroneous reordering of code in accept_path_err()
		[Stephen Ostrowski, Synnet].

rsvp_debug.c:	Fix bug: Missing (unused) arguments in fmt_object calls.
		[Stephen Ostrowski, Synnet].

rsvp_resv.c:	Fix bug: CONFIRM object was not getting freed.  However,
		there was a larger error: the code was not sending a
		CONFIRM upstream on more than one interface (the spec
		is unclear on this).  [John Stewart, Microsoft]

rsvp_api.c:	Fix bug: TTL sent on Path message from local API was too
		low by 1. [Ramesh Pabbati, Microsoft]

rsvp_netio.c:	Fix bug: 4.1a5 started sent WF style ResvTear messages
		without a flowspec, and then ignored these msgs.

rapi_lib.c:	Fix bug: calculation of vbl length in rapi_reserve did not
		take into account the "empty" entries in encoding.
		[Jim Stewart, Microsoft]

rsvp_resv.c:	Fix bug: CONFIRM object originated with default interface
		address rather than appropriate API reservation address.
		[reported by Jim Stewart, Microsoft]

rsvp_path.c, rsvp_util.c:
		Fixed bug: if_num was used instead of vif_num for API in
		PSB.
		
rsvp_bord.c:	Convert LIH in HOP objects to/from host byte order.  This is
		not logically required, but little-endian values LOOK FUNNY
		in the debug traces.


CHANGES IN RELEASE 4.1a5  May 12, 1997:

rapi_lib.h, rsvp_intserv.h:
		In preparation for the XOPEN effort to define a standard
		API based upon our RAPI interface, split rapi_lib.h into
		two parts: rsvp_intserv.h contains the int-serv data
		structure definitions (flowspec, Tspec, Adspec), while the
		new rapi_lib.h contains ONLY the API definitions.

rapi_lib.h, rapi_lib.c, rapi_fmt.c, rsvp_api.c, rtap_cmds.c:
		Did major clean-up on rapi_lib.h for XOPEN.  Surrounded
		obsolete "Legacy" formats with #ifdef OBSOLETE_API
		brackets.  Renamed "Extended legacy" formats as "Simplified".
		Cleaned up declarations in rapi_lib.h.  [Don Hoffman, Sun]
		RAPI object formats now distinguish flowspec from Tspec.

rsvp_var.h, rsvp_netio.c, rsvp_path.c, rsvp_resv.c, rsvp_err.c,
	rsvp_debug.c, rsvp_util.c:
		Added code to support feature in spec that saves and
		forwards some objects with unknown class types, for
		extensibility.  Note: forced split of rsvp_pkt_process()
		routine; new back-end is rsvp_pkt_process1().

rsvp_netio.c:	Vers. 1 RSVP spec has wierdness that it allows an 'empty'
		message, i.e., no flow descriptor or sender descriptor.
		Modified rsvp_pkt_process to simply ignore an empty message.

rsvp_netio.c:	Vers. 1 RSVP spec removed any order requirements from
		objects in Path-like messages, and in particular the
		Sender Template, Sender Tspec, and Adspec objects can
		come in any order.  Removed order checking from
		rsvp_map_packet.

rsvp_path.c:	Changed tear_PSB() to omit SenderTspec when forward PathTear
		(which is optional in spec).  [noted by Liang Li, IBM]

rsvp_path.c:	Fixed bug: slow memory leak.  Every TC_Advertise call created
		new ADSPEC that was not being freed.

rsvp_resv.c:	Fixed bug in resv teardown: ps_resv_spec might not be freed
		upon tear down of a shared reservation (SE or WF); subsequent
		new reservation would not be forwarded until refresh timeout.

rsvp_path.c:	Fixed bug in path teardown: remove gratuitous test for
		port confusion from accept_path_tear(). [Ramesh Pabbati,
		Microsoft].

rsvp_err.c:	Fixed bugs in ResvErr: For Style SE, accept_resv_err() did
		not allow multiple filter specs [Koutarou Ise, Toshiba]
		(and fixed bugs for FF, too).
		
rsvp_resv.c:	Fixed bugs: CONFIRM request object was not always forwarded
		in a Resv refresh when there were multiple senders per PHOP,
		or when an FF refresh was the same as last time.  Also,
		receipt of CONFIRM request object did not always trigger
		an immediate refresh, as it should. [noted by: Hung-Kei
		Keith Chow, U Toronto]

rsvp_main.c:	Fixed bug: remove erroneous little-endian hton16 call on
		ip_len from do_sendto. [Koutarou Ise, Toshiba]

rsvp_netio.c:	Fixed bug: build_send_pkt() code was building UDP and/or
		IP header on top of other stack variables.
		[Koutarou Ise, Toshiba]

rapi_fmt.c:	Fixed bug: rapi_fmt_adspecbody2 was testing wrong Ignore bit.
		[Ramesh Pabbati, Microsoft]

rapi_lib.c:	Fixed bug: CSZXtoCL_spec() was setting p to infinity.
		[Shai Mohaban, Class Data]

rsvp_types.h:	Fixed bug: INFINITY32f was wrong for FreeBSD.
		[Kimio Ishii, Sony]

rsvp_err.c:	Fixed bug: memory leak in send_confirm() [Ramesh Pabbati,
		Microsoft]

rsvp_unicast.c:	Fixed bug: tried to look up route from kernel even if
		initialization had failed to resolve kernel symbols.

rsvp_util.c:	Fixed bug: Missing ( ) in clear_scope_union. [Jim Stewart,
		Microsoft]

rapi_fmt.c, rsvp_api.c, rapi_lib.h
		Made rapi_fmt_filtspec "official" in RAPI interface, so
		moved it from rsvp_api.c to rapi_fmt.c

rsvp_netio.c:	Added kludge for SunOS on multihomed host (i.e., no
		mrouted): determine likely incoming physical interface
		for Path message by reverse route lookup of previous hop 
		address.
 
rapi_fmt.c, rsvp_debug.c:
		Small improvements in display formats.  Also, display
		unknown object types.

rsvp_main.c, rsvp_netio.c:
		Did minor internal re-modularization: made do_sendmsg(),
		do_sendto() independent of RSVP structures.

rsvp_var.h, rsvp_path.c, rsvp_util.c, rsvp_netio.c:
		Started to put POLICY_DATA objects back in: code to send
		and receive arbitrary lists of POLICY_DATA objects.

rsvp_var.h, rsvp_err.c, rsvp_netio.c:
		Deleted obsolete policy_data ptrs from FlowDesc and
		SenderDesc structs of packet_map [Ramesh Pabbati,
		Microsoft]

rsvp.h:		Added current definitions for Diagnostic messages DREP, DREQ.

rtap_cmds.c, rsvp_rtap.c:
		Added new rtap command 'hexmsg' to send an RSVP message with
		arbitrary hex contents following common header.  Works only
		for local rtap.

Pm_parse.c:	Allowed hyphen in host name.

CHANGES IN RELEASE 4.1a4  March 19, 1997:

rsvp_path.c:	Fix bug in setting ps_1sthop in make_PSB().
		[noted by Shai Mohaban, Classdata].

rsvp_main.c;	If "freebsd" and "IPRECVIF" are both defined, add code to
		exploit FreeBSD Rel2.2 code to return receive interface
		number for every packet received: raw_input() and udp_input()
		call recvmsg() instead of recvfrom().

rsvp_main.c:	Fix little-endian bug in creating UDP header in do_sendto.
		[Simon Liu]

rsvp_main.c:	Fix bug in next_word subr used in parsing config file
		[Don Hoffman, Sun]

rsvp_specs.c:	Fix little-endian bugs in ntoh_tspec(), hton_tspec()
		[Koutarou Ise, Toshiba]

rsvp_specs.c:	Remove obsolete parameter from rapi_fmt_specbody3(),
		rapi_fmt_tspecbody3(), rapi_fmt_adspecbody3().
		[Kai Krasnodembski]

rsvp_resv.c:	Fix bug in update_TC) for WF style: was not correctly
		scanning RSBs for merge.

rsvp_rtap.c:	When rsvpd closed API socket because of egregious error,
		rtap was hanging; return code from rapi_dispatch was being
		treated improperly.

CHANGES IN RELEASE 4.1a3  Feb 14, 1997:

rsvp_var.h, rsvp_resv.c, rsvp_timer.c, rsvp_path.c:
		Fix an important error/omission in the ISI code: when
                receiving and merging a new or changed Resv message, it
                could forward the "new" Resv even though the forwarded
                state had not changed because of merging.  This violated
               	the logarithmic scaling of RSVP with the number of receivers 
               	making reservations.  The solution was actually simple: keep
                the last flowspec sent in a Resv message in each PSB
               	(or first PSB of PHOP for wildcard)

rsvp_resv.c:    Fix bug in blockade state: it was not cleared by teardown
		of corresponding reservation state.

		Fix bug: path teardown when there are two merged
		reservations on an interface did not actually call
		TC_DelFlowspec. [Reported by Ramesh Pabbati, Microsoft]

rsvp_resv.c:	Fix design error: a TCSB's filter spec structure was a pointer
		to a filter spec owned by an RSB.  This was manifested in two 
		different bugs: a spurious TC_DelFilter/TC_AddFilter call pair,
		and accessing freed storage.  TCSB now has its own copy, and
		find_fstar() searches by value, not address. [Much help from 
		Ramesh Pabbati, Microsoft].

rsvp_resv.c:	Major cleanup of teardown code.


CHANGES IN RELEASE 4.1a2   January 31, 1997:

rsvp_netio.c, rsvp_api.c:
		For WF Resv, Conflicting Src Port check was segment-faulting
		because there was no filter spec. [Reported by Koutarou Ise, 
		Toshiba]

rsvp_specs.c:	In ntoh_flowspec(), hton_flowspec(), was not converting byte
		order for p parameter of CL service. [Reported by Koutarou Ise, 
		Toshiba]

rsvp.h, rsvp_util.c:
		Begin to insert IPSEC code, by matching GPI filter specs/
		sender tspecs in match_filter().

rsvp_rtap.c:	Make rtap 'delay' command work in integral rtap.

rsvp_util.c, rsvp_path.c:
		Remove obsolete wildcard match on port number from
		match_filter() routine, and delete obsolete equal_filter()
		routine.

rsvp_path.c:	Don't call TC_Advertise if there was no Adspec.  (There
		*should* be an Adspec always, but code should not crash if
		there is not!)

		Do PATH_EVENT upcall only after route lookup is done.

rsvp_specs.c, rsvp_unicast.c:
		Fix some typos that show up when compile for freeBSD
		(little-endian and BSD4.4 routing socket). [A number of
		people using FreeBSD pointed these out.]

CHANGES IN RELEASE 4.1a  January 9, 1997:

---> THIS IS THE MAJOR CHANGE IN THIS RELEASE:
rapi_lib.h, rapi_lib.c, rsvp_specs.c, tc_test.c:
		Update intserv data structures to match latest usage document:
		draft-ietf-intserv-rsvp-use-01.txt.

OTHER CHANGES:
rsvp_path.c, rsvp_rsrr.c, rsvp_var.h:
		Fixed bugs in accept_path(), which was not properly handling 
		refresh processing that could follow an asynchronous response
		to route lookup.

rsvp_path.c:	Fixed bug in processing a Path message to a unicast address:
		for unicast route, param in_vif = -1 to Route_Update in
		macro Incr_ifstats would clobber storage.
		
rsvp_err.c:	Fixed bugs:
		1. Forwarding a Path error message could result in a
		segmentation fault [Report from Koutarou Ise, Toshiba(?)]

		2. When processing a ResvErr message in an end system
		(maybe only in SunOS), there could be a failure when the
		incoming interface was unknown.

		3. A PathErr message resulting from a UDP-encapsulated
		Path message was not itself UDP-encapsulated.

rsvp_netio.c:	1. Remove erroneous fix (see 4.0a9 below) on handling of
		return code from rsvp_map_packet.

		2. Made a number of fixes in rsvp_map_packet, including
		removing obsolete code, adding several missing checks,
		and removing segmentation fault when receiving PathErr
		message.

rsvp_resv.c:	Added code to send a ResvErr message in the (unlikely)
		case that changing Sender_Tspec causes an admission control
		failure.

rsvp_resv.c:	Fixed bugs:
		1. In update_TC , could cause spurious TC_DelFilter calls
		for SE reservations.

		2. Was Erroneously tearing down previous reservation when 
		TC_ModFlowspec failed (KR-I problem).

		3. In RSB_match_path.

rsvp_resv.c:	Return error code 21 instead of 1 for service conflict.
		Also display TCSB flags as mnemonic bit characters.

rsvp_main.c:	vif=-1 (unknown) in do_sendto() was not properly handled.
		This could only happen for UDP encapsulation.

rsvp_unicast.c: My attempt to fix the routing socket version of unicast
		routing.  [Reported by Jim Boyle, Mitre and Nuno Pimenta,
		U of Coimbra].

rsvp_print.c, rsvp_netio.c:
		Fix small bugs in checking & display. [Reported by Ramesh
		Pabbatu, Microsoft.]

rsvp_timer.c:	Fix little-endian problem in printing port number for
		timer events.

rsvp_api.c, rsvp_debug.c, rsvp_util.c, rsvp_print.c, rsvp_resv.c, rsvp_path.c:
		Cosmetic changes in routine names, and in debug printing.

rsvp_main.c, Makefile:
		Display correct version number in log header.


CHANGES IN RELEASE 4.0a9:

rsvp_main.c:	Fixed serious bug in raw_input, udp_input routines: packet
		map was allocated in stack with room for only one flow
		descriptor.  Two worked by accident, but more than two
		would clobber stack.  [Report from Marek Kotelba,
		Cascade Communications]

rsvp_resv.c:	Fixed teardown bug for FF reservation style. [Report from
		Koutarou Ise, Toshiba]

rsvp_netio.c:	Return code from rsvp_map_packet was being ignored, causing
		failures on some packet format errors.
		[Fix from Ramesh Pabbati, Microsoft]

rsvp_netio.c, rsvp_resv.c:
		Don't give parse error in rsvp_netio.c when receive
		Resv_Tear message without flowspec.  [Report by Ramesh
		Pabbati, Microsoft]  Also, changed rsvp_resv.c to omit
		flowspec from Resv_Tear messages.

rsvp_main.c:	Typo in text of log output for config failure [Fix from
		Kai Krasnodembski]

rsvp_api.c, rapi_lib.h, rapi_err.h:
		If one local sender gave non-zero sender port and
		another local sender gave zero sender port, violating
		the port rules, this was detected as a packet format
		error rather than as a legitimate error upcall.  New
		RAPI error code added for this case.

CHANGES IN RELEASE 4.0a8:

rapi_lib.h, config.h:
		Move definition of IEEE floating point infinity (INFINITY32f)
		to config.h, and handle Solaris as special case [Don Hoffman,
		Sun]

rsvp_resv.c:	Fix bug in update_TC routine of rsvp_resv.c for teardown of
		WF reservation: Second scan of RSBs was erroneously matching
		filterspecs for shared reservation, causing failure of ASSERT
		in match_fstar2fstar() call.

		When new RSB created, was not setting its LIH field from
		Resv message [Jim Stewart, Microsoft]

		Another memory leak for SE in flow_reservation()
		[Ishwar Vishandas, MICOM]

rapi_lib.c:	Freeing trash pointer upon error condition in rapi_reserve.
		[Ishwar Vishandas, MICOM]

		Plug memory leak/bad free in rapi_dispatch_fd()
                [Ishwar Vishandas, MICOM]

rsvp_api.c:	Did not call api_free_packet() after sending ResvTear in
		api_tear_resv().

		Mixing zero and non-zero port numbers in RAPI sender calls
		could cause segmentation fault.

		Did not free buffer in api_PATH_EVENT_upcall().
		[Ishwar Vishandas, MICOM]

rsvp_specs.c:	Remove obsolete (and uncompilable) little-endian conversion
		code for service-specific Tspec formats.

rsvp_err.c:	PSB lookup in accept_path_err() was erroneously checking
		the incoming interface. [Koutarou Ise, Toshiba]

rsvp_netio.c:	rsvp_pkt_process() should not have been validity-checking
		the LIH of a received PathErr message; but this check
		was needed for a ResvTear message. [Koutarou Ise, Toshiba]

rsvp_main.c:	A ResvConfirm message was being improperly forwarded in
		raw_input. [Koutarou Ise, Toshiba]

rsvp_var.h, tc_test.c:
		Change symbol if_mtu to if_path_mtu to avoid conflict with
		kernel macro.

CHANGES IN RELEASE 4.0a7:

rapi_fmt.c, rapi_lib.h:
		Fixed looping bug in fspec_fmtf() having to do with IEEE
		floating point infinity.

rapi_lib.c, rsvp_api.h:
		Do dynamic allocation of variable-length read/write buffers.

rsvp_api.c:	Fixed semantics error in upcalls: RESV_EVENT and PATH_ERROR 
		upcalls were being delivered to all RAPI sessions for
		same RSVP session; now they are delivered only to
		matching senders.

rapi_lib.c:	Clean up semantics of upcalls, especially n_filter, n_flowspec,
		n_adspec.

rsvp_resv.c:	Resv Tear now causes RESV_EVENT upcall with nflwds == 0.

rsvp_api.h:	Remove unused (and large!) packet_map structures from
		per-application-session structure api_rec.

rsvp_api.c:	Fixed bug in RESV_ERROR upcall resulting from illegal receiver
		address.

rsvp_api.c:	Made RAPI status call work for Path state.

rsvp_api.c:	Some code cleanup.

rsvp_main.c:	Fixed bug in forwarding raw packets not for me [Mark
		Smith, SGI].

rsvp.h:		Remove unused flags from SESSION object: NonRSVP, MaybeRSVP.

rapi_fmt.c:	Fix bugs in printing service name in fmt_specbody2() and
		fmt_tspecbody2().


CHANGES IN 4.0a6 Release:

rsvp_err.c:	Send PHOP object in ResvErr message, per current spec.

rapi_lib.h, rapi_fmt.c, rsvp_debug.c, rsvp_api.c, rsvp_api.h, rsvp_specs.c:

		Update ADSPEC and Tspec formats per new RSVP-usage
		doc.  Add code to make ADSPECs "real": display ADSPECs,
		create minimal ADSPEC, get ADSPEC from API, and send
		ADSPEC to API (upcall).

rsvp_specs.c, rapi_lib.h:
		Slack term in Guaranteed flowspec had wrong type.

rapi_lib.c:
		Bug in CSZXtoCL_tspec: parm# not set [Ishwar Vishandas, MICOM]

rsvp_mac.h:	Remove Dstport from session hash function; its inclusion was 
		preventing detection of Conflicting Dstport errors
		[Ishwar Vishandas, MICOM].

rsvp_rsrr.c:	Fix bug in rsrr_accept_rr that resulted in refreshing ALL
		path state for session when a new sender first arrives.

rsvp_main.c:	Fix bug in forwarding packet that was not addressed
		to me: extra IP header was included.

rsvp_resv.c:	Fix a number of bugs found in the Message Processing Rules
		by [Lou Berger et al, Fore]

rsvp.h:		ADSPEC and SENDER_TSPEC objects had wrong CTypes [Fred Baker,
		Cisco]

rsvp_netio.c:	Move misplaced check for LIH in range from receiving PathTear
		to receiving PathErr [Mark Smith@ SGI]

rsvp_recv.c:	Rhandle returned by TC_AddFlowspec was not being saved.
		[Don Hoffman, Sun]

rsvp_api.c:	Fix bug in API: Initial rapi_session operation did not
		trigger Path Event upcalls when path state already
		existed.[Don Hoffman, Sun].

rsvp_unicast.c, rtap_cmds.c:
		Fix little-endian bugs (gratuitous byte swap of host address)


CHANGES IN 4.0a5 release:

rapi_lib.h, rapi_lib.c, rapi_fmt.c:
		Major revision of Tspec definitions in API.

rsvp_main.c:    Fix bug that was preventing reliable inclusion of Router
		Alert option.

rsvp_path.c:	Provide Path Event upcall when path state is deleted.

rsvp_specs.c:	Fix little-endian bugs in hton_flowspec() and hton_tspec()
		[Ishwar Vishandas, MICOM]

rsvp_unicast.c:	For PF_ROUTE case, unicast_init was returning wrong values
		[Mark Smith, SGI]

rsvp_main.c:	Insert SGI-specific code for daemonizing [Mark Smith, SGI].

rsvp_netio.c:	Fix typo in build_send_pkt() call for sending Path msg
		using -R option [Ishwar Vishandas, MICOM].

rsvp_path.c:	Remove idiocy that accessed freed memory in path_refresh()
		when entire destination state timed out. [Ishwar Vishandas]

rsvp_main.c:	In API, avoid trying to send upcall to application process
		after Unix socket is closed.

rapi_fmt.c:	Typo in rapi_fmt_tspecbody3() [Ishwar Vishandas, MICOM]

rsvp_bord.c:	HTON16 was misplaced [Tom Calderwood, BBN]

rsvp_netio.c:	Supply missing precision for logging long host names [Mark
		Smith, SGI]

rsvp_main.c:	Re-signal SIGPIPE in sigpipe event routine.
		[Tom Calderwood, BBN]

rsvp_main.c, rsvp_api.c:
		Make rapi_status work for Path state, at least [Resv state
		still unfinished].

rsvp_api.c:	Was not handling zero protocol id correctly as default (UDP).

rsvp_types.c, rsvp_specs.c:
		Define and install special version of byte order macros
		for float values [Tom Calderwood, BBN].

rsvp_resv.c:	Fix two zero-pointer bugs, in resv_refresh_PSB and in
		delete_resv [Iswar Vishandas, MICOM].

rsvp_main.c:    Add missing IP_MULTICAST_IF call for Uisock[]; result was
		to send Path data on wrong (default) interface of
		multihomed host [Tom Calderwood, BBN].

bsdendian.h, system.h, config.h:
		Portability fixes [A number of inputs]

CHANGES IN 4.0a4 release:

	* Bug prevented TC call for WF filter [[Mark David Smith, SGI]

	* Memory leaks patched [Ishwar Vishandas, Micom]

	* Portability problems and some typos fixed [Bill Nowicki, SGI]

	* Portability problems for IRIX 5.3 fixed [Tom Calderwood, BBN]

	* Error in Guaranteed Flowspec declaration [Mark David Smith, SGI]

	* Would not run with RTAP in daemon mode [Tim O'Malley, BBN]

	* & errors in ratp_cmds.c, and a misplaced #endif [Tim O'Malley]


CHANGES IN 4.0a3 release:

	* A few minor bugs and release errors corrected.

	* Fixes for some endian problems [Ishwar Vishandas, Micom]

	* Implements the INTEGRITY object and checking as described in
		draft-ietf-rsvp-md5-02.txt [June 1996].

______________________________
Bob Braden
Steve Berson
Subramanian Vincent
