/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>

#define LM_MAXSTRLEN	1024
#ifdef MAXNAMELEN
#undef MAXNAMELEN
#endif
#define MAXNAMELEN	LM_MAXSTRLEN+1

enum nlm_stats {
	nlm_granted = 0,
	nlm_denied = 1,
	nlm_denied_nolocks = 2,
	nlm_blocked = 3,
	nlm_denied_grace_period = 4,
	nlm_deadlck = 5
};
typedef enum nlm_stats nlm_stats;
extern bool_t xdr_nlm_stats(XDR *, nlm_stats *);


struct nlm_holder {
	bool_t exclusive;
	int svid;
	netobj oh;
	u_int l_offset;
	u_int l_len;
};
typedef struct nlm_holder nlm_holder;
extern bool_t xdr_nlm_holder(XDR *, nlm_holder *);


struct nlm_testrply {
	nlm_stats stat;
	union {
		struct nlm_holder holder;
	} nlm_testrply_u;
};
typedef struct nlm_testrply nlm_testrply;
extern bool_t xdr_nlm_testrply(XDR *, nlm_testrply *);


struct nlm_stat {
	nlm_stats stat;
};
typedef struct nlm_stat nlm_stat;
extern bool_t xdr_nlm_stat(XDR *, nlm_stat *);


struct nlm_res {
	netobj cookie;
	nlm_stat stat;
};
typedef struct nlm_res nlm_res;
extern bool_t xdr_nlm_res(XDR *, nlm_res *);


struct nlm_testres {
	netobj cookie;
	nlm_testrply stat;
};
typedef struct nlm_testres nlm_testres;
extern bool_t xdr_nlm_testres(XDR *, nlm_testres *);


struct nlm_lock {
	char *caller_name;
	netobj fh;
	netobj oh;
	int svid;
	u_int l_offset;
	u_int l_len;
};
typedef struct nlm_lock nlm_lock;
extern bool_t xdr_nlm_lock(XDR *, nlm_lock *);


struct nlm_lockargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm_lock alock;
	bool_t reclaim;
	int state;
};
typedef struct nlm_lockargs nlm_lockargs;
extern bool_t xdr_nlm_lockargs(XDR *, nlm_lockargs *);


struct nlm_cancargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm_lock alock;
};
typedef struct nlm_cancargs nlm_cancargs;
extern bool_t xdr_nlm_cancargs(XDR *, nlm_cancargs *);


struct nlm_testargs {
	netobj cookie;
	bool_t exclusive;
	struct nlm_lock alock;
};
typedef struct nlm_testargs nlm_testargs;
extern bool_t xdr_nlm_testargs(XDR *, nlm_testargs *);


struct nlm_unlockargs {
	netobj cookie;
	struct nlm_lock alock;
};
typedef struct nlm_unlockargs nlm_unlockargs;
extern bool_t xdr_nlm_unlockargs(XDR *, nlm_unlockargs *);



enum fsh_mode {
	fsm_DN = 0,
	fsm_DR = 1,
	fsm_DW = 2,
	fsm_DRW = 3
};
typedef enum fsh_mode fsh_mode;
extern bool_t xdr_fsh_mode(XDR *, fsh_mode *);


enum fsh_access {
	fsa_NONE = 0,
	fsa_R = 1,
	fsa_W = 2,
	fsa_RW = 3
};
typedef enum fsh_access fsh_access;
extern bool_t xdr_fsh_access(XDR *, fsh_access *);


struct nlm_share {
	char *caller_name;
	netobj fh;
	netobj oh;
	fsh_mode mode;
	fsh_access access;
};
typedef struct nlm_share nlm_share;
extern bool_t xdr_nlm_share(XDR *, nlm_share *);


struct nlm_shareargs {
	netobj cookie;
	nlm_share share;
	bool_t reclaim;
};
typedef struct nlm_shareargs nlm_shareargs;
extern bool_t xdr_nlm_shareargs(XDR *, nlm_shareargs *);


struct nlm_shareres {
	netobj cookie;
	nlm_stats stat;
	int sequence;
};
typedef struct nlm_shareres nlm_shareres;
extern bool_t xdr_nlm_shareres(XDR *, nlm_shareres *);


struct nlm_notify {
	char *name;
	long state;
};
typedef struct nlm_notify nlm_notify;
extern bool_t xdr_nlm_notify(XDR *, nlm_notify *);


enum nlm4_stats {
	NLM4_GRANTED = 0,
	NLM4_DENIED = 1,
	NLM4_DENIED_NOLOCKS = 2,
	NLM4_BLOCKED = 3,
	NLM4_DENIED_GRACE_PERIOD = 4,
	NLM4_DEADLCK = 5,
	NLM4_ROFS = 6,
	NLM4_STALE_FH = 7,
	NLM4_FBIG = 8,
	NLM4_FAILED = 9
};
typedef enum nlm4_stats nlm4_stats;
extern bool_t xdr_nlm4_stats(XDR *, nlm4_stats *);


struct nlm4_holder {
	bool_t exclusive;
	__int32_t svid;
	netobj oh;
	__uint64_t l_offset;
	__uint64_t l_len;
};
typedef struct nlm4_holder nlm4_holder;
extern bool_t xdr_nlm4_holder(XDR *, nlm4_holder *);


struct nlm4_testrply {
	nlm4_stats stat;
	union {
		struct nlm4_holder holder;
	} nlm4_testrply_u;
};
typedef struct nlm4_testrply nlm4_testrply;
extern bool_t xdr_nlm4_testrply(XDR *, nlm4_testrply *);


struct nlm4_stat {
	nlm4_stats stat;
};
typedef struct nlm4_stat nlm4_stat;
extern bool_t xdr_nlm4_stat(XDR *, nlm4_stat *);


struct nlm4_res {
	netobj cookie;
	nlm4_stat stat;
};
typedef struct nlm4_res nlm4_res;
extern bool_t xdr_nlm4_res(XDR *, nlm4_res *);


struct nlm4_testres {
	netobj cookie;
	nlm4_testrply stat;
};
typedef struct nlm4_testres nlm4_testres;
extern bool_t xdr_nlm4_testres(XDR *, nlm4_testres *);


struct nlm4_lock {
	char *caller_name;
	netobj fh;
	netobj oh;
	__int32_t svid;
	__uint64_t l_offset;
	__uint64_t l_len;
};
typedef struct nlm4_lock nlm4_lock;
extern bool_t xdr_nlm4_lock(XDR *, nlm4_lock *);


struct nlm4_lockargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm4_lock alock;
	bool_t reclaim;
	__int32_t state;
};
typedef struct nlm4_lockargs nlm4_lockargs;
extern bool_t xdr_nlm4_lockargs(XDR *, nlm4_lockargs *);


struct nlm4_cancargs {
	netobj cookie;
	bool_t block;
	bool_t exclusive;
	struct nlm4_lock alock;
};
typedef struct nlm4_cancargs nlm4_cancargs;
extern bool_t xdr_nlm4_cancargs(XDR *, nlm4_cancargs *);


struct nlm4_testargs {
	netobj cookie;
	bool_t exclusive;
	struct nlm4_lock alock;
};
typedef struct nlm4_testargs nlm4_testargs;
extern bool_t xdr_nlm4_testargs(XDR *, nlm4_testargs *);


struct nlm4_unlockargs {
	netobj cookie;
	struct nlm4_lock alock;
};
typedef struct nlm4_unlockargs nlm4_unlockargs;
extern bool_t xdr_nlm4_unlockargs(XDR *, nlm4_unlockargs *);



enum fsh4_mode {
	FSM_DN = 0,
	FSM_DR = 1,
	FSM_DW = 2,
	FSM_DRW = 3
};
typedef enum fsh4_mode fsh4_mode;
extern bool_t xdr_fsh4_mode(XDR *, fsh4_mode *);


enum fsh4_access {
	FSA_NONE = 0,
	FSA_R = 1,
	FSA_W = 2,
	FSA_RW = 3
};
typedef enum fsh4_access fsh4_access;
extern bool_t xdr_fsh4_access(XDR *, fsh4_access *);


struct nlm4_share {
	char *caller_name;
	netobj fh;
	netobj oh;
	fsh4_mode mode;
	fsh4_access access;
};
typedef struct nlm4_share nlm4_share;
extern bool_t xdr_nlm4_share(XDR *, nlm4_share *);


struct nlm4_shareargs {
	netobj cookie;
	nlm4_share share;
	bool_t reclaim;
};
typedef struct nlm4_shareargs nlm4_shareargs;
extern bool_t xdr_nlm4_shareargs(XDR *, nlm4_shareargs *);


struct nlm4_shareres {
	netobj cookie;
	nlm4_stats stat;
	__int32_t sequence;
};
typedef struct nlm4_shareres nlm4_shareres;
extern bool_t xdr_nlm4_shareres(XDR *, nlm4_shareres *);


struct nlm4_notify {
	char *name;
	__int32_t state;
};
typedef struct nlm4_notify nlm4_notify;
extern bool_t xdr_nlm4_notify(XDR *, nlm4_notify *);


#define NLM_PROG ((u_long)100021)
#define NLM_VERS ((u_long)1)
#define NLM_TEST ((u_long)1)
#define NLM_LOCK ((u_long)2)
#define NLM_CANCEL ((u_long)3)
#define NLM_UNLOCK ((u_long)4)
#define NLM_GRANTED ((u_long)5)
#define NLM_TEST_MSG ((u_long)6)
#define NLM_LOCK_MSG ((u_long)7)
#define NLM_CANCEL_MSG ((u_long)8)
#define NLM_UNLOCK_MSG ((u_long)9)
#define NLM_GRANTED_MSG ((u_long)10)
#define NLM_TEST_RES ((u_long)11)
#define NLM_LOCK_RES ((u_long)12)
#define NLM_CANCEL_RES ((u_long)13)
#define NLM_UNLOCK_RES ((u_long)14)
#define NLM_GRANTED_RES ((u_long)15)

#ifdef _RPCGEN_SVC
extern nlm_testres *nlm_test_1(nlm_testargs *, struct svc_req *);
extern nlm_res *nlm_lock_1(nlm_lockargs *, struct svc_req *);
extern nlm_res *nlm_cancel_1(nlm_cancargs *, struct svc_req *);
extern nlm_res *nlm_unlock_1(nlm_unlockargs *, struct svc_req *);
extern nlm_res *nlm_granted_1(nlm_testargs *, struct svc_req *);
extern void *nlm_test_msg_1(nlm_testargs *, struct svc_req *);
extern void *nlm_lock_msg_1(nlm_lockargs *, struct svc_req *);
extern void *nlm_cancel_msg_1(nlm_cancargs *, struct svc_req *);
extern void *nlm_unlock_msg_1(nlm_unlockargs *, struct svc_req *);
extern void *nlm_granted_msg_1(nlm_testargs *, struct svc_req *);
extern void *nlm_test_res_1(nlm_testres *, struct svc_req *);
extern void *nlm_lock_res_1(nlm_res *, struct svc_req *);
extern void *nlm_cancel_res_1(nlm_res *, struct svc_req *);
extern void *nlm_unlock_res_1(nlm_res *, struct svc_req *);
extern void *nlm_granted_res_1(nlm_res *, struct svc_req *);
#endif
#ifdef _RPCGEN_CLNT
extern nlm_testres *nlm_test_1(nlm_testargs *, CLIENT *);
extern nlm_res *nlm_lock_1(nlm_lockargs *, CLIENT *);
extern nlm_res *nlm_cancel_1(nlm_cancargs *, CLIENT *);
extern nlm_res *nlm_unlock_1(nlm_unlockargs *, CLIENT *);
extern nlm_res *nlm_granted_1(nlm_testargs *, CLIENT *);
extern void *nlm_test_msg_1(nlm_testargs *, CLIENT *);
extern void *nlm_lock_msg_1(nlm_lockargs *, CLIENT *);
extern void *nlm_cancel_msg_1(nlm_cancargs *, CLIENT *);
extern void *nlm_unlock_msg_1(nlm_unlockargs *, CLIENT *);
extern void *nlm_granted_msg_1(nlm_testargs *, CLIENT *);
extern void *nlm_test_res_1(nlm_testres *, CLIENT *);
extern void *nlm_lock_res_1(nlm_res *, CLIENT *);
extern void *nlm_cancel_res_1(nlm_res *, CLIENT *);
extern void *nlm_unlock_res_1(nlm_res *, CLIENT *);
extern void *nlm_granted_res_1(nlm_res *, CLIENT *);
#endif
#define NLM_VERSX ((u_long)3)
#define NLM_SHARE ((u_long)20)
#define NLM_UNSHARE ((u_long)21)
#define NLM_NM_LOCK ((u_long)22)
#define NLM_FREE_ALL ((u_long)23)

#ifdef _RPCGEN_SVC
extern nlm_shareres *nlm_share_3(nlm_shareargs *, struct svc_req *);
extern nlm_shareres *nlm_unshare_3(nlm_shareargs *, struct svc_req *);
extern nlm_res *nlm_nm_lock_3(nlm_lockargs *, struct svc_req *);
extern void *nlm_free_all_3(nlm_notify *, struct svc_req *);
#endif
#ifdef _RPCGEN_CLNT
extern nlm_shareres *nlm_share_3(nlm_shareargs *, CLIENT *);
extern nlm_shareres *nlm_unshare_3(nlm_shareargs *, CLIENT *);
extern nlm_res *nlm_nm_lock_3(nlm_lockargs *, CLIENT *);
extern void *nlm_free_all_3(nlm_notify *, CLIENT *);
#endif
#define NLM4_VERS ((u_long)4)
#define NLMPROC_NULL ((u_long)0)
#define NLMPROC_TEST ((u_long)1)
#define NLMPROC_LOCK ((u_long)2)
#define NLMPROC_CANCEL ((u_long)3)
#define NLMPROC_UNLOCK ((u_long)4)
#define NLMPROC_GRANTED ((u_long)5)
#define NLMPROC_TEST_MSG ((u_long)6)
#define NLMPROC_LOCK_MSG ((u_long)7)
#define NLMPROC_CANCEL_MSG ((u_long)8)
#define NLMPROC_UNLOCK_MSG ((u_long)9)
#define NLMPROC_GRANTED_MSG ((u_long)10)
#define NLMPROC_TEST_RES ((u_long)11)
#define NLMPROC_LOCK_RES ((u_long)12)
#define NLMPROC_CANCEL_RES ((u_long)13)
#define NLMPROC_UNLOCK_RES ((u_long)14)
#define NLMPROC_GRANTED_RES ((u_long)15)
#define NLMPROC_SHARE ((u_long)20)
#define NLMPROC_UNSHARE ((u_long)21)
#define NLMPROC_NM_LOCK ((u_long)22)
#define NLMPROC_FREE_ALL ((u_long)23)

#ifdef _RPCGEN_SVC
extern void *nlmproc_null_4(void *, struct svc_req *);
extern nlm4_testres *nlmproc_test_4(nlm4_testargs *, struct svc_req *);
extern nlm4_res *nlmproc_lock_4(nlm4_lockargs *, struct svc_req *);
extern nlm4_res *nlmproc_cancel_4(nlm4_cancargs *, struct svc_req *);
extern nlm4_res *nlmproc_unlock_4(nlm4_unlockargs *, struct svc_req *);
extern nlm4_res *nlmproc_granted_4(nlm4_testargs *, struct svc_req *);
extern void *nlmproc_test_msg_4(nlm4_testargs *, struct svc_req *);
extern void *nlmproc_lock_msg_4(nlm4_lockargs *, struct svc_req *);
extern void *nlmproc_cancel_msg_4(nlm4_cancargs *, struct svc_req *);
extern void *nlmproc_unlock_msg_4(nlm4_unlockargs *, struct svc_req *);
extern void *nlmproc_granted_msg_4(nlm4_testargs *, struct svc_req *);
extern void *nlmproc_test_res_4(nlm4_testres *, struct svc_req *);
extern void *nlmproc_lock_res_4(nlm4_res *, struct svc_req *);
extern void *nlmproc_cancel_res_4(nlm4_res *, struct svc_req *);
extern void *nlmproc_unlock_res_4(nlm4_res *, struct svc_req *);
extern void *nlmproc_granted_res_4(nlm4_res *, struct svc_req *);
extern nlm4_shareres *nlmproc_share_4(nlm4_shareargs *, struct svc_req *);
extern nlm4_shareres *nlmproc_unshare_4(nlm4_shareargs *, struct svc_req *);
extern nlm4_res *nlmproc_nm_lock_4(nlm4_lockargs *, struct svc_req *);
extern void *nlmproc_free_all_4(nlm4_notify *, struct svc_req *);
#endif
#ifdef _RPCGEN_CLNT
extern void *nlmproc_null_4(void *, CLIENT *);
extern nlm4_testres *nlmproc_test_4(nlm4_testargs *, CLIENT *);
extern nlm4_res *nlmproc_lock_4(nlm4_lockargs *, CLIENT *);
extern nlm4_res *nlmproc_cancel_4(nlm4_cancargs *, CLIENT *);
extern nlm4_res *nlmproc_unlock_4(nlm4_unlockargs *, CLIENT *);
extern nlm4_res *nlmproc_granted_4(nlm4_testargs *, CLIENT *);
extern void *nlmproc_test_msg_4(nlm4_testargs *, CLIENT *);
extern void *nlmproc_lock_msg_4(nlm4_lockargs *, CLIENT *);
extern void *nlmproc_cancel_msg_4(nlm4_cancargs *, CLIENT *);
extern void *nlmproc_unlock_msg_4(nlm4_unlockargs *, CLIENT *);
extern void *nlmproc_granted_msg_4(nlm4_testargs *, CLIENT *);
extern void *nlmproc_test_res_4(nlm4_testres *, CLIENT *);
extern void *nlmproc_lock_res_4(nlm4_res *, CLIENT *);
extern void *nlmproc_cancel_res_4(nlm4_res *, CLIENT *);
extern void *nlmproc_unlock_res_4(nlm4_res *, CLIENT *);
extern void *nlmproc_granted_res_4(nlm4_res *, CLIENT *);
extern nlm4_shareres *nlmproc_share_4(nlm4_shareargs *, CLIENT *);
extern nlm4_shareres *nlmproc_unshare_4(nlm4_shareargs *, CLIENT *);
extern nlm4_res *nlmproc_nm_lock_4(nlm4_lockargs *, CLIENT *);
extern void *nlmproc_free_all_4(nlm4_notify *, CLIENT *);
#endif

