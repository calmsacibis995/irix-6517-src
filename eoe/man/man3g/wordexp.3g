'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH g3g.wordexp @(#)wordexp	40.8 of 7/05/95
.\" Copyright 1995 Silicon Graphics, Inc.
.nr X
.if \nX=0 .ds x} wordexp 3G "Enhanced Programming Library" "\&"
.if \nX=1 .ds x} wordexp 3G "Enhanced Programming Library"
.if \nX=2 .ds x} wordexp 3G "" "\&"
.if \nX=3 .ds x} wordexp "" "" "\&"
.TH \*(x}
.SH NAME
\f4wordexp, wordfree\f1 \- perform word expansions
.SH "SYNOPSIS"
.nf
\f4#include <wordexp.h>\f1
.sp .6v
.B "int wordexp(const char \(**words, wordexp_t \(**pwordexp, int flags);"
.sp
.B "void wordfree(wordexp_t \(**pwordexp);"
.fi
.SH DESCRIPTION
\f4wordexp\fP performs word expansions and places the list of expanded
words into the structure pointed to by \f2pwordexp\f1.
.sp
The \f2words\f1 argument is a pointer to a string containing one or more
words to be expanded.  The expansions will be the same as would be performed
by the shell if \f2words\f1 were the part of a command line representing the
arguments to a utility.  Therefore, \f2words\f1 must not contain an unquoted
newline or any of the unquoted shell special characters:
.sp
.nf
     |   &   ;   <   >
.fi
.sp
except in the context of command substitution.  It also must not contain
unquoted parentheses or braces, except in the context of command or variable
substitution.  If the argument \f2words\f1 contains an unquoted comment
character (number sign) that is the beginning of a token, \f4wordexp\fP may
treat the comment character as a regular character, or may intrepret it as a
comment indicator and ignore the remainder of \f2words\f1.
.sp
The structure type
.B "wordexp_t"
is defined in the header \f4<wordexp.h>\fP and includes at least the
following members:
.sp
.nf
MemberType  MemberName Description
_______________________________________________________________
.B "size_t      we_wordc   Count of words matched by \f2words\f1.
.B "char \(***     we_wordv   Pointer to list of expanded words."
.B "size_t      we_offs    Slots to reserve at start of pwordexp->we_wordv."
.fi
.sp
The \f4wordexp\fP function stores the number of generated words into
.br
.B "pwordexp->we_wordc"
and a pointer to a list of pointers to words in
.br
.B "pwordexp->we_wordv."
Each individual field created during field splitting or pathname expansion is
a separate word in the
.B "pwordexp->we_wordv"
list.  The words are in order.  The first pointer after the last word pointer
will be a null pointer.  The expansion of special parameters is unspecified.
.sp
It is the caller's responsibilty to allocate storage pointed to by
\f2pwordexp\f1.  The \f4wordexp\f1 function allocates other space as needed,
including memory pointed to by
.B "pwordexp->we_wordv."
The \f4wordfree\fP function frees any memory associated with \f2pwordexp\f1
from a previous call to \f4wordexp\fP.
.sp
The \f2flags\f1 argument is used to control the behaviour of \f4wrodexp\fP.
The value of \f2flags\f1 is the bitwise inclusive OR of zero or more of the
following constants, which are defined in the header \f4<wordexp.h>\fP:
.sp
\f2WRDE_APPEND\f1
.sp
.in+0.5i
Append words generated to the ones from a previous call to \f4wordexp\fP.
.in-0.5i
.sp
\f2WRDE_DOOFFS\f1
.sp
.in+0.5i
Make use of
.B "pwordexp->we_offs."
If this flag is set,
.br
.B "pwordexp->we_offs"
is used to specify how many null pointers to add to the beginning of
.B "wordexp->we_wordv."
In other words,
.br
.B "wordexp->we_wordv."
will point to
.B "pwordexp->we_offs"
null pointers, followed by
.B "wordexp->we_wordc"
word pointers, followed by a null pointer.
.in-0.5i
.sp
\f2WRDE_NOCMD\f1
.sp
.in+0.5i
Fail if command substitution is requested.
.in-0.5i
.sp
\f2WRDE_REUSE\f1
.sp
.in+0.5i
The \f2pwordexp\f1 argument was passed to a previous successful call to
\f4wordexp\fP, and has not been passed to \f4wordfree\fP.  The result will
be the same as if the application had called \f4wordfree\fP and then called
\f4wordexp\fP without WRDE_REUSE.
.in-0.5i
.sp
\f2WRDE_SHOWERR\f1
.sp
.in+0.5i
Do not redirect \f2stderr\f1 to \f4/dev/null\fP.
.in-0.5i
.sp
\f2WRDE_UNDEF\f1
.sp
.in+0.5i
Report error on an attempt to expand an undefined shell variable.
.in-0.5i
.sp
The WRDE_APPEND flag can be used to append a new set of words to those
generated by a previous call to \f4wordexp\fP.  The following rules apply
when two or more calls to \f4wordexp\fP are made with the same value of
\f2pwordexp\f1 and without intervening calls to \f4wordfree\fP:
.sp
.in+0.2i
The first such call must not set WRDE_APPEND.  All subsequent calls must
set it.
.sp
All of the calls must set WRDE_DOOFFS, or all must not set it.
.sp
After the second call and each subsequent call,
.B "pwordexp->we_wordv"
will point to a list containing the following:
.sp
.in+0.3i
Zero or more null pointers, as specified by WRDE_DOOFFS and
.br
.B "pwordexp->we_offs."
.sp
Pointers to the words that were in the
.B "pwordexp->we_wordv"
list before the call, in the same order as before.
.sp
Pointers to the new words generated by the latest call, in the
specified order.
.sp
.in-0.3i
The count returned in
.B "pwordexp->we_wordc"
will be the total number of pathnames from all of the calls.
.sp
The application can change any of the fields after a call to \f4wordexp\fP,
but if it does, it must reset them to the original value before a subsequent
call, using the same \f2pwordexp\f1 value, to \f4wordfree\fP or \f4wordexp\fP
with the WRDE_APPEND or WRDE_REUSE flag.
.sp
.in-0.2i
If \f2words\f1 contains an unquoted:
.sp
.nf
        <newline>   |   &   ;   <   >   (   )   {   }
.fi
.sp
in an inappropriate context, \f4wordexp\fP will fail, and the number of
expanded words will be zero.
.sp
Unless WRDE_SHOWERR is set in \f2flags\f1, \f4wordexp\fP will redirect
\f2stderr\f1 to \f4/dev/null\fP for any utilites executed as a result of
command substitution while expanding \f2words\f1.  If WRDE_SHOWERR is set,
\f4wordexp\fP may write messages to \f2stderr\f1 if syntax errors are detected
while expanding \f2words\f1.
.sp
If WRDE_DOOFFS is set, then
.B "pwordexp->we_offs"
must have the same value for each \f4wordexp\fP call and \f4wordfree\fP call
using a given \f2pwordexp\f1.
.sp
The following constants are defined as error return values:
.sp
\f2WRDE_BADCHAR\f1
.sp
.in +0.5i
One of the unquoted characters:
.sp
.nf
          <newline>   |   &   ;   <   >   (   )   {   }
.fi
.sp
appears in \f2words\f1 in an inappropriate context.
.in -0.5i
.sp
\f2WRDE_BADVAL\f1
.sp
.in +0.5i
Reference to undefined shell variable when WRDE_UNDEF is set in \f2flags\f1.
.in -0.5i
.sp
\f2WRDE_CMDSUB\f1
.sp
.in +0.5i
Command substitution requested when WRDE_NOCMD was set in \f2flags\f1.
.in -0.5i
.sp
\f2WRDE_NOSPACE\f1
.sp
.in +0.5i
Attempt to allocate memory failed.
.in -0.5i
.sp
\f2WRDE_SYNTAX\f1
.sp
.in +0.5i
Shell syntax error, such as unbalanced parentheses or unterminated string.
.in -0.5i
.sp
.SH "RETURN VALUE"
On successful completion, \f4wordexp\fP returns zero.
.sp
Otherwise, a non-zero value is returned to indicate an error.  If
\f4wordexp\fP returns the value WRDE_NOSPACE, then
.B "pwordexp->we_wordc"
and
.br
.B "pwordexp->we_wordv"
will be updated to reflect any words that were successfully expanded.  In
other cases, they were not modified.
.sp
The \f4wordfree\fP function returns no value.
.SH "APPLICATION USAGE"
This function is intended to be used by an application that wants to do all of
the shell's expansions on a word or words obtained from a user.  For example,
if the application prompts for a filename (or list of filenames) and then uses
\f4wordexp\fP to process the input, the user could respond with anything that
would be valid as input to the shell.
.sp
The WRDE_NOCMD flag is provided for applications that, for security or other
reasons, want to prevent a user from executing shell commands.  Disallowing
unquoted shell special characters also prevents unwanted side effects such as
executing a command or writing a file.
.SH "SEE ALSO"
fnmatch(3g), glob(3g), systune(1M), \f4<wordexp.h>\fP.
