'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH g3g.regcomp @(#)regcomp    41.3 of 11/28/95
.\" Copyright 1995 Silicon Graphics, Inc.
.nr X
.if \nX=0 .ds x} regcomp 3G "Enhanced Programming Library" "\&"
.if \nX=1 .ds x} regcomp 3G "Enhanced Programming Library"
.if \nX=2 .ds x} regcomp 3G "" "\&"
.if \nX=3 .ds x} regcomp "" "" "\&"
.TH \*(x}
.SH "NAME"
\f4regcomp\f1: \f4regexec\f1, \f4regerror\f1, \f4regfree\f1 \- regular expression matching
.SH SYNOPSIS
.PP
\f4#include <sys/types.h>\f1
.PP
\f4#include <regex.h>\f1
.PP
\f4int regcomp (regex_t \(**\f2preg\fP, const char \(**\f2pattern\fP, int \f2cflags\fP);\f1
.PP
\f4int  regexec (const regex_t \(**\f2preg\fP, const char \(**\f2string\fP, size_t \f2nmatch\fP, regmatch_t \f2pmatch[]\fP, int \f2eflags\fP);\f1
.PP
\f4size_t regerror (int \f2 errcode\fP, const regex_t \(**\f2preg\fP,
char \(**\f2errbuf\fP, size_t \f2errbuf_size\fP);\f1
.PP
\f4size_t regfree (regex_t \(**\f2preg\fP);\f1
.SH DESCRIPTION
The structure type regex_t contains the following members:
.PP
.TS
center, tab(@);
l l
l l .
MEMBER@MEANING
_
int re_magic@RE magic number
size_t re_nsub@number of parenthesized subexpressions
const char *re_endp@end pointer for REG_PEND
struct re_guts *re_g@internal RE data structure
.TE

The structure type regmatch_t contains the following members:
.PP
.TS
center, tab(@);
l l
l l .
MEMBER@MEANING
_
regoff_t rm_so@Byte offset from start of string to start
@of substring
regoff_t rm_eo@Byte offset from start of string of the
@first character after the end of substring
.TE
.PP
The \f4regcomp\fP() function will compile the regular expression
contained in the string pointed to by the \f2pattern\fP
argument and place the results in the structure pointed to by
\f2preg\fP.
The \f2cflags\fP argument is the bitwise inclusive
OR of zero or more of the following flags, which are defined in the
header \f4<regex.h>\fP: 
.PP
.TS
center, tab(@);
l l
l l .
_
REG_EXTENDED@Use Extended Regular Expressions.
REG_ICASE@Ignore case in match.
REG_NOSUB@Report only success/fail in regexec() . 
REG_NEWLINE@Change the handling of newline characters,
@as described in the text.
.TE

The default regular expression type for \f2pattern\fP is a \f4Basic Regular
Expression\fP. The application can specify
\f4Extended Regular Expressions\fP using the REG_EXTENDED \f2cflags\fP flag.
.PP
On successful completion, it returns 0; otherwise it returns non-zero,
and the content of \f2preg\fP is undefined.
.PP
If the REG_NOSUB flag was not set in \f2cflags\fP,
then \f4regcomp\fP()  will set
\f2re_nsub\fP to the number of parenthesised
subexpressions (delimited by \e( \e) in \f4basic regular expressions\fP
or ( ) in \f4extended regular expressions\fP) found in \f2pattern\fP. 

The \f4regexec\fP()  function compares the null-terminated
string specified by \f2string\fP with the compiled regular
expression \f2preg\fP initialised by a previous call to \f4regcomp\fP().
If it finds a match, \f4regexec\fP()  returns 0; otherwise it
returns non-zero indicating either no match or an error.
The \f2eflags\fP
argument is the bitwise inclusive OR of zero
or more of the following flags, which are defined in the header
\f4<regex.h>\fP: 
.PP
.TS
center, tab(@);
l l
l l .
_
REG_NOTBOL@The first character of the string pointed to
@by \f2string\fP is not the beginning of the line.
@Therefore, the circumflex character (^), when
@taken as a special character, will not match
@the beginning of \f2string\fP. 

REG_NOTEOL@The last character of the string pointed to
@by \f2string\fP is not the end of the line.
@Therefore, the dollar sign ($), when taken
@as a special character, will not match the
@end of \f2string\fP. 
.TE
.PP
If \f2nmatch\fP is 0 or REG_NOSUB was set in the \f2cflags\fP
argument to
\f4regcomp\fP() , then \f4regexec\fP()  will ignore the 
\f2pmatch\fP argument. Otherwise, the \f2pmatch\fP argument
must point to an array with at least \f2nmatch\fP elements, and 
\f4regexec\fP()  will fill in the elements of that array with
offsets of the
substrings of \f2string\fP that correspond to the
parenthesised subexpressions of \f2pattern\fP: \f2pmatch[i].rm_so\fP
will be the byte offset of the beginning and
\f2pmatch[i].rm_eo\fP will be one greater
than the byte offset of the end of
substring i. (Subexpression i begins at the ith
matched open parenthesis, counting from 1.) Offsets in \f2pmatch[0]\fP
identify the substring that corresponds to the
entire regular expression. Unused elements of \f2pmatch\fP up to
\f2pmatch[nmatch-1]\fP will be filled with -1. If there
are more than \f2nmatch\fP subexpressions in \f2pattern\fP
(\f2pattern\fP itself counts as a subexpression), then \f4regexec\fP()  will
still do the match, but will record only the first \f2nmatch\fP
substrings.

When matching a \f4basic\fP or \f4extended regular expression\fP,
any given
parenthesised subexpression of \f2pattern\fP might
participate in the match of several different substrings of
\f2string\fP, or
it might not match any substring even
though the pattern as a whole did match. The following rules are used
to determine which substrings to report in 
\f2pmatch\fP when matching regular expressions:
.RS
.IP "1. If subexpression i in a regular expression is not"
contained within another subexpression, and it participated in 
the match several times, then the byte offsets in \f2pmatch[i]\fP will
delimit the last such match.

.IP "2. If subexpression i is not contained within another"
subexpression, and it did not participate in an otherwise"
successful match, the byte offsets in \f2pmatch[i]\fP will be -1.  A
subexpression does not participate in the match when: * or \e{ \e}
appears immediately after the subexpression in a basic regular
expression, or *, ?, or { } appears immediately after the
subexpression in an extended regular expression, and the subexpression
did not match (matched 0 times)

or:

| is used in an extended regular expression to select this
subexpression or another, and the other
subexpression matched.

.IP "3.If subexpression i is contained within another"
subexpression j, and i is not contained within any other
subexpression that is contained within j, and a match of subexpression
j is reported in \f2pmatch[j]\fP, then the
match or non-match of subexpression i reported in \f2pmatch[i]\fP
will be
as described in 1. and 2. above, but
within the substring reported in \f2pmatch[j]\fP rather than the whole
string. 

.IP "4.If subexpression i is contained in subexpression j, and"
the byte offsets in \f2pmatch[j]\fP are -1, then the pointers in
\f2pmatch[i]\fP also will be -1. 

.IP "5.If subexpression i matched a zero-length string, then"
both byte offsets in \f2pmatch[i]\fP will be the byte
offset of the character or null terminator immediately
following the zero-length string.
.RE

If, when \f4regexec\fP()  is called, the locale is different
from when the
regular expression was compiled, the result is undefined.

If REG_NEWLINE is not set in \f2cflags\fP, then a newline character in
\f2pattern\fP or \f2string\fP will be
treated as an ordinary character. If
REG_NEWLINE is set, then newline will be treated as an ordinary
character except as follows:

.RS
.IP "1.A newline character in \f2string\fP will not be matched by a"
period outside a bracket expression or by any form of a
non-matching list

.IP "2.A circumflex (^) in \f2pattern\fP, when used to specify"
expression anchoring, will match the zero-length string
immediately after a
newline in \f2string\fP, regardless of the setting of REG_NOTBOL.

.IP "3.A dollar-sign ($) in \f2pattern\fP, when used to specify"
expression anchoring, will match the zero-length string
immediately before a
newline in \f2string\fP, regardless of the setting of REG_NOTEOL.
.RE

The \f4regfree\fP()  function frees any memory allocated by
\f4regcomp\fP() associated with \f2preg\fP. 

The following constants are defined as error return values:
.PP
.TS
center, tab(@);
l l
l l .
_
REG_NOMATCH@\f4regexec\fP()  failed to match.

REG_BADPAT@Invalid regular expression.

REG_ECOLLATE@Invalid collating element referenced.

REG_ECTYPE@Invalid character class type referenced.

REG_EESCAPE@Trailing \e in pattern.

REG_ESUBREG@Number in \edigit invalid or in error.

REG_EBRACK@[ ] imbalance.

REG_ENOSYS@The function is not supported.

REG_EPAREN@\e( \e) or ( ) imbalance.

REG_EBRACE@\e{ \e} imbalance.

REG_BADBR@Content of \e{ \e} invalid: not a number, number
@too large, more than two numbers, first
@larger than second.

REG_ERANGE@Invalid endpoint in range expression.

REG_ESPACE@Out of memory.

REG_BADRPT@?, * or + not preceded by valid regular
@expression.
.TE

The \f4regerror\fP()  function provides a mapping from error
codes returned by \f4regcomp\fP()  and \f4regexec\fP()  to
unspecified printable strings. It generates a string
corresponding to the value of the \f2errcode\fP argument,
which must be the last non-zero value returned by \f4regcomp\fP()  or
\f4regexec\fP()  with the given value of \f2preg\fP.
If \f2errcode\fP is not such a
value, the content of the generated string is unspecified.

If \f2preg\fP is a null pointer, but \f2errcode\fP is a
value returned by a
previous call to \f4regexec\fP()  or \f4regcomp\fP(),
the \f4regerror\fP()  still
generates an error string corresponding to the value of
\f2errcode\fP.

If the \f2errbuf_size\fP argument is not 0, \f4regerror\fP()
will place the generated string into the buffer of size
\f2errbuf_size\fP bytes pointed to
by \f2errbuf\fP. If the string (including the terminating null)
cannot fit
in the buffer, \f4regerror\fP()  will truncate the string
and null-terminate the result.

If \f2errbuf_size\fP is 0, \f4regerror\fP()  ignores
the \f2errbuf\fP argument, and
returns the size of the buffer needed to hold the generated string.

If the \f2preg\fP argument to \f4regexec\fP()  or
\f4regfree\fP()  is not a compiled regular expression returned
by \f4regcomp\fP() , the result is undefined. A \f2preg\fP is no
longer treated as a compiled regular expression after it is
given to \f4regfree\fP() . 

.SH "RETURN VALUE"
On successful completion, the \f4regcomp\fP()  function returns 0.
Otherwise, it returns an integer value indicating an error as
described in \f4<regex.h>\fP, and the content of \f2preg\fP is
undefined.

On successful completion, the \f4regexec\fP()  function returns 0.
Otherwise it returns REG_NOMATCH to indicate no match, or REG_ENOSYS
to indicate that the function is not supported.

Upon successful completion, the \f4regerror\fP()  function returns the
number of bytes needed to hold the entire generated string. Otherwise,
it returns 0 to indicate that the function is not implemented.

The \f4regfree\fP()  function returns no value.

.SH "EXAMPLES"

#include \f4<regex.h>\fP

/*
 * Match string against the extended regular expression in
 * pattern, treating errors as no match.
 *
 * return 1 for match, 0 for no match
 */

int match(const char *string, char *pattern)
{
  int status;
  regex_t re;

  if (regcomp(&re, pattern, REG_EXTENDED | REG_NOSUB) != 0)
  {
      return(0);      /* report error */
  }
  status = regexec(&re, string, (size_t) 0, NULL, 0);
  regfree(&re);
  if (status != 0) {
      return(0);      /* report error */
  }
  return(1);
.br
}

The following demonstrates how the REG_NOTBOL flag could be used with
\f4regexec\fP()  to find all substrings in a line that match a pattern
supplied by a user. (For simplicity of the example, very little error
checking is done.)
.PP
(void) regcomp (&re, pattern, 0);
.br
/* this call to regexec( ) finds the first match
 * on the line
 */

error = regexec (&re, &buffer[0], 1, &pm, 0);
.br
while (error == 0) { /* while matches found */
.br
    /* substring found between pm.rm_so and pm.rm_eo */
    /* This call to regexec( ) finds the next match */
.br
    error = regexec (&re, buffer + pm.rm_eo, 1,
                     &pm, REG_NOTBOL);
.br
}

.SH "APPLICATION USAGE"

An application could use:
.RS
.ft4
\f4regerror\fP(code,preg,(char *)NULL,(size_t)0)
.ft1
.RE
to find out how big a buffer is needed for the generated string,
\f4malloc\fP()  a buffer to hold the string, and then call 
\f4regerror\fP()  again to get the string. Alternately,
it could allocate a
fixed, static buffer that is big enough to hold
most strings, and then use \f4malloc\fP()  to allocate
a larger buffer if it finds that this is too small.

.SH "SEE ALSO"
\f4fnmatch\fP(3g), \f4glob\fP(3g), \f4<sys/types.h>\fP,
\f4<regex.h>\fP
