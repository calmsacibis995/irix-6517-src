.\" Copyright (c) 1988 Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Computer Consoles Inc.
.\"
.\" Redistribution and use in source and binary forms are permitted
.\" provided that the above copyright notice and this paragraph are
.\" duplicated in all such forms and that any documentation,
.\" advertising materials, and other materials related to such
.\" distribution and use acknowledge that the software was developed
.\" by the University of California, Berkeley.  The name of the
.\" University may not be used to endorse or promote products derived
.\" from this software without specific prior written permission.
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
.\" WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\"	@(#)fsdb.1M	6.2 (Berkeley) 7/9/88
.\"
.TH fsdb 1M "July 9, 1988"
.SH NAME
fsdb \- filesystem debugger for EFS
.SH SYNOPSIS
.nf
\f3fsdb\f1 [\f3\-?\f1] [\f3\-o\f1] [\f3\-p'\f2string\f3'\f1] [\f3\-w\f1] \c
\f2special\f1
.fi
.SH DESCRIPTION
.I fsdb
is applicable only to EFS filesystems.
.PP
.I fsdb
can be used
to patch up
a damaged filesystem
after a crash.
It has conversions
to translate block and i-numbers
into their corresponding disk addresses.
Also included are mnemonic offsets
to access different parts
of an inode.
These greatly simplify the process
of correcting control block entries
or descending the filesystem tree.
.PP
Because
.I fsdb
reads the disk raw,
it is able to circumvent normal
filesystem security.
It also bypasses the buffer cache mechanism.
Hence, it is not advisable to use
.I fsdb
to write to a mounted filesystem.
.PP
The options available to
.I fsdb
are:
.TP 13
.B \-?
Display usage.
.TP
.B \-o
Override some error conditions.
.TP
.B "\-p'\f2string\f3'"
Set prompt to
.IR string .
.TP
.B \-w
Open for write.
.PP
.I fsdb
contains several error-checking routines
to verify inode and block addresses.
These can be disabled if necessary
by invoking
.I fsdb
with the
.B \-o
option
or by the use of the
.B o
command.
.PP
.I special
is the name of a character device file.
.I fsdb
searches
.I /etc/fstab
for the raw character device filename, if given
the name of a filesystem.
A buffer management routine
is used to retain commonly used
blocks of data
in order to reduce the number of read system calls.
All assignment operations result
in an immediate write-through
of the corresponding block.
Since
.I fsdb
opens the raw device file, any write-throughs bypass the
filesystem buffer cache, resulting in a potential mismatch between on-disk
and buffer cache data structures.
Hence, it is recommended that
.I fsdb
not be used to write to a mounted filesystem.
Note that in order to modify
any portion of the disk,
.I fsdb
must be invoked with the
.B \-w
option.
.PP
Wherever possible,
.IR adb\- like
syntax was adopted
to promote the use
of
.I fsdb
through familiarity.
.PP
Numbers are considered hexadecimal by default.
However, the user has control over how data are
to be displayed
or accepted.
The
.I base
command displays
or sets the input/output base.
Once set,
all input defaults to this base
and all output is shown in this base.
The base can be overridden temporarily for input by
preceding hexadecimal numbers with \f30x\f1,
decimal numbers with \f30t\f1, or
octal numbers with \f30\f1.
Hexadecimal numbers beginning with \f3a\-f\f1 or \f3A\-F\f1 must
be preceded with \f30x\f1
to distinguish them from commands.
.PP
Disk addressing by
.I fsdb
is at the byte level.
However,
.I fsdb
offers many commands to convert
a desired inode, directory entry,
block, superblock, and so forth to a
byte address.
Once the address has been calculated,
.I fsdb
records the result in
.IR dot .
.PP
Several global values are maintained by
.IR fsdb :
the current base (referred to as
.IR base ),
the current address (referred to as
.IR dot ),
the current inode (referred to as
.IR inode ),
the current count (referred to as
.IR count ),
and the current type (referred to as
.IR type ).
Most commands use the preset value of
.I dot
in
their execution.
For example,
.Ex
> 2:inode
.Ee
first sets the value of
.I dot
to 2, \f3:\f1 alerts the start of a command,
and the
.I inode
command sets
.I inode
to 2.
A count is specified after a \f3,\f1.
Once set,
.I count
remains at this value
until a new command is encountered,
which resets the value back to 1 (the default).
So, if
.Ex
> 2000,400/X
.Ee
is typed,
400 hexadecimal longs are listed
from 2000,
and when completed
the value of
.I dot
is 2000 + 400 * sizeof (long).
If a carriage return is then typed,
the output routine uses the
current values of
.IR dot ,
.IR count ,
and
.I type
and displays 400 more hexadecimal longs.
An \f3*\f1 causes the entire block to
be displayed.
.PP
End of block and file are maintained by
.IR fsdb .
When displaying data as blocks,
an error message is displayed when the end of the
block is reached.
When displaying data using the
.IR db ,
.IR directory ,
or
.I file
commands, an error message is displayed if the
end of file is reached.
This is needed primarily
to avoid passing the
end of a directory or file
and getting unknown and unwanted results.
.PP
Examples showing several commands and
the use of carriage return are:
.Ex
> 2:ino; 0:dir?d
.Ee
or
.Ex
> 2:ino; 0:db:block?d
.Ee
The two examples are synonymous for getting to the first
directory entry of the root of the filesystem.
Once there,
subsequent carriage returns (or + or \-) advance to subsequent
entries.
.PP
Note that:
.Ex
> 2:inode; :ls /
.Ee
or
.Ex
> 2:inode
> :ls /
.Ee
is again synonymous.
.SH EXPRESSIONS
.I fsdb
recognizes the following symbols.
There should be no white space between
the symbols and the arguments.
.TP 9
.B carriage return
Update the value of
.I dot
by the current value of
.I type
and display using the current value of
.IR count .
.TP
.B #
Numeric expressions can be composed of +, \-, *, and % operators
(evaluated left to right) and can use parentheses.
Once evaluated,
the value of
.I dot
is updated.
.TP
.BI \&, "count"
Count indicator.
The global value of
.I count
is updated to
.IR count .
The value of
.I count
remains until a new command is run.
A count specifier of \f3*\f1 attempts to show a
.IR block 's
worth of information.
The default for
.I count
is 1.
.TP
.BI ? "f"
Display in structured style with format
specifier
.I f
(see FORMATTED OUTPUT section).
.TP
.BI / "f"
Display in unstructured style with format
specifier
.I f
(see FORMATTED OUTPUT section).
.TP
.B \&.
The value of
.IR dot .
.TP
.BI + "e"
Increment the value of
.I dot
by the expression
.IR e .
The amount actually incremented is dependent
on the size of
.IR type :
.IP
.RS
	dot = dot + e * sizeof (type)
.RE
.IP
The default for
.I e
is 1.
.TP
.BI \- "e"
Decrement the value of
.I dot
by the expression
.I e
(see +).
.TP
.BI * "e"
Multiply the value of
.I dot
by the expression
.IR e .
Multiplication and division do not
use
.IR type .
In the above calculation of
.IR dot ,
consider the
sizeof (
.IR type )
to be 1.
.TP
.BI % "e"
Divide the value of
.I dot
by the expression
.I e
(see *).
.TP
.BI < "name"
Restore an address saved in register
.IR name .
.I name
must be a single letter or digit.
.TP
.BI > "name"
Save an address in register
.IR name .
.I name
must be a single letter or digit.
.TP
.BI = "f"
Display indicator.
If
.I f
is a legitimate format specifier
(see FORMATTED OUTPUT
section),
then the value of
.I dot
is displayed using
format specifier
.IR f .
Otherwise,
assignment is assumed
(see next item).
.TP
\f3=\f1[\f2e\f1]
.TP
\f3=\f1[\f2s\f1]
Assignment indicator.
The address pointed to by
.I dot
has its contents changed to the value of the
expression
.I e
or to the
ASCII
representation of the
quoted (") string
.IR s .
This may be useful for changing
directory names or
ASCII
file information.
.TP
.BI =+ "e"
Incremental assignment.
The address pointed to by
.I dot
has its contents incremented by expression
.IR e .
.TP
.BI =- "e"
Decremental assignment.
The address pointed to by
.I dot
has its contents decremented by expression
.IR e .
.SH COMMANDS
.PP
A command must be prefixed by a \f3:\f1 character.
Only enough letters of the command
to uniquely
distinguish it are needed.
Multiple commands can be entered
on one line by separating
them by a space, tab, or \f3;\f1.
.PP
In order to view a potentially
unmounted disk in a reasonable
manner,
.I fsdb
offers the
.IR cd ,
.IR pwd ,
.IR ls ,
and
.I find
commands.
The functionality of these
commands substantially matches those of
its
IRIX
counterparts
(see individual commands for details).
The \f3*\f1, \f3?\f1, and \f3[\-]\f1 wildcard
characters are available.
.TP 12
.BI base= b
Display or set base.
As stated above,
all input and output is governed by
the current
.IR base .
If the \f3=b\f1 is left off,
the current
.I base
is displayed.
Otherwise, the current
.I base
is set
to
.IR b .
Note that this is interpreted
using the old value of
.IR base .
To ensure correctness, use the \f30\f1, \f30t\f1, or \f30x\f1
prefix when changing the
.IR base .
The default for
.I base
is hexadecimal.
.TP
.B block
Convert the value of
.I dot
to a block address.
.TP
.BI cd " dir"
Change the current directory
to directory
.IR dir .
The current values of
.I inode
and
.I dot
are also updated.
If no
.I dir
is specified,
then change directories to
inode 2 (\f3/\f1).
.TP
.B cg
Convert the value of
.I dot
to a cylinder group.
.TP
.I directory
If the current
.I inode
is a directory,
then the value of
.I dot
is converted to a directory
slot offset in that directory.
.I dot
now points to
this entry.
.TP
.I file
The value of
.I dot
is taken as
a relative block count from the
beginning of the file.
The value of
.I dot
is updated to the first byte
of this block.
.TP
\f3find\f1 \f2dir\f1 [\f3\-name\f1 \f2n\f1] [\f3\-inum\f1 \f2i\f1]
Find files by name or i-number.
.I find
recursively searches
directory
.I dir
and below for filenames whose
i-number matches
.I i
or whose name
matches pattern
.IR n .
Note that only one of the two options
.RB ( \-name
or
.BR \-inum )
can be used at one time.
Also, the
.B \-print
is not needed or
accepted.
.TP
.BI fill= "p"
Fill an area of disk with pattern
.IR p .
The area of disk
is delimited by
.I dot
and
.IR count .
.TP
.I inode
Convert the value of
.I dot
to an inode address.
If successful,
the current value of
.I inode
is updated as well as
the value of
.IR dot .
As a convenient shorthand,
if \f3:inode\f1 appears at the
beginning of the line,
the value of
.I dot
is set to the current
.I inode
and that inode is displayed
in inode format.
.TP
\f3ls\f1 [\f3\-R\f1] [\f3\-l\f1] \f2pat1 pat2\f1 ...
List directories or files.
If no file is specified,
the current directory is assumed.
Either or both of the
options can be used (but, if used,
must
be specified before the
filename specifiers).
Also, as stated above,
wildcard characters are
available and multiple
arguments can be given.
The long listing shows only
the i-number and the name;
use the
.I inode
command with \f3?i\f1
to get more information.
The output is sorted in alphabetical order.
If either the
.B \-R
or the
.B \-l
options is used, then the files can have a character following the
filename, indicating the type of the file.
Directories have a \f3/\f1, symbolic links have
a \f3@\f1, AF_UNIX address family sockets have a
\f3=\f1 and fifos have an \f3f\f1.
Regular files and block and character
device files have an \f3*\f1 if they are executable.
If the file type is unknown,
then a \f3?\f1 is printed.
.TP
.B override
Toggle the value of override.
Some error conditions can be
overridden
if override is toggled on.
.TP
.BI prompt " p"
Change the
.I fsdb
prompt to
.IR p .
.I p
must be surrounded by double quotes (").
.TP
.B pwd
Display the current working directory.
.TP
.B quit
Quit
.IR fsdb .
.TP
.B sb
The value of
.I dot
is taken as the basic block
number and then converted to
the address of the superblock
in that cylinder group.
As a shorthand, \f3:sb\f1 at
the beginning of a line
sets the value of
.I dot
to the superblock and displays it
in superblock format.
.TP
.B "! sh"
Escape to shell.
.SH INODE COMMANDS
In addition to the above commands,
there are several commands that deal with inode
fields and operate directly on the current
.I inode
(they still require the \f3:\f1).
They can be used to display more easily
or change the particular fields.
The value of
.I dot
is only used by the \f3:db\f1, \f3:len\f1,
and \f3:off\f1 commands.
Upon completion of the command,
the value of
.I dot
is changed to point to
that particular field.
For example,
.Ex
> :ln=+1
.Ee
increments the link count of the current
.I inode
and set the value of
.I dot
to the address of the link
count field.
It is important to know the format of the disk inode structure and
the size and alignment of the respective fields;
otherwise the output of these commands is
not coherent.
The disk inode structure is available
in
.IR <sys/fs/efs_ino.h> .
.TP
.B at
Access time.
.TP
.B ct
Creation time.
.TP
.B db
Use the current value of
.I dot
as an index into the list of extents stored in the disk inode to get
the starting disk block number associated with the corresponding extent.
Extents number from 0 to 11.
In order to display the block
itself, you need to pipe this
result into the
.I block
command.
For example,
.IP
.RS
	> 1:db:block,20/X
.RE
.IP
gets the contents of
disk block number field of extent number 1 from the inode and
converts it to a block address.
Twenty longs are then displayed in hexadecimal
(see the FORMATTED OUTPUT section).
.TP
.B gen
Inode generation number.
.TP
.B gid
Group ID.
.TP
.B ln
Link count.
.TP
.B len
Use the current value of
.I dot
as an index into the list of extents stored in the disk inode to get
the length associated with the corresponding extent.
Extents number from
0 to 11.
This field is one byte long.
For example,
.IP
.RS
	> 1:len/b
.RE
.IP
displays the contents of the len field of extent number 1.
.TP
.B mt
Modification time.
.TP
.B md
Mode.
.TP
.B maj
Major device number.
.TP
.B min
Minor device number.
.TP
.B nex
Number of extents.
.TP
.B nm
Although listed here,
this command actually
operates on the directory
name field.
Once poised at the desired
directory entry (using the
.I directory
command),
this command allows
you to change or display
the directory name.
For example,
.IP
.RS
	> 7:dir:nm="foo"
.RE
.IP
gets the seventh directory
entry of the current
.I inode
and changes its name to foo.
Names
have to be the same size as the original name.
If the new name is smaller, it is padded with \f3#\f1.
If it is larger, the string is truncated to fit
and a warning message to this
effect is displayed.
.TP
.B off
Use the current value of
.I dot
as an index into the list of extents stored in the disk inode to get
the logical block offset associated with the corresponding extent.
Extents number from
0 to 11.
This field is three bytes long.
For example,
.IP
.RS
	> 3:off,3/b
.RE
.IP
displays the contents of the off field of extent number 3.
.TP
.B sz
File size.
.TP
.B uid
User ID.
.SH FORMATTED OUTPUT
.PP
There are two styles
and many format types.
The two styles are structured and
unstructured.
Structured output is used to display
inodes, directories, superblocks, and the
like.
Unstructured output only displays
raw data.
The following table shows the
different ways of displaying:
.TP
.B ?
.RS
.PD 0
.TP 6
.B c
Display as cylinder groups
.TP 6
.B i
Display as inodes
.TP 6
.B I
Display as inodes (all direct extents)
.TP 6
.B d
Display as directories
.TP 6
.B s
Display as superblocks
.TP 6
.B e
Display as extents
.PD
.RE
.TP
.B /
.RS
.PD 0
.TP 6
.B b
Display as bytes
.TP 6
.B c
Display as characters
.TP 6
.B o O
Display as octal shorts or longs
.TP 6
.B d D
Display as decimal shorts or longs
.TP 6
.B x X
Display as hexadecimal shorts or longs
.PD
.RE
.PP
The format specifier immediately follows
the \f3/\f1 or \f3?\f1 character.
The values displayed by \f3/b\f1 and all \f3?\f1
formats are displayed in the current
.IR base .
Also,
.I type
is appropriately updated
upon completion.
.SH EXAMPLES
.TP 16
> :base
Display the current input/output base (hexadecimal by default).
.TP 16
> :base=0xa
Change the current input/output base to decimal.
.TP 16
> 0t2000+(0t400%(0t20+0t20))=D
Display 2010 in decimal (use of
.I fsdb
as a calculator
for complex arithmetic).
The \f30t\f1 indicates that the numbers are to
be interpreted as decimal numbers and are necessary only if the current
base is not decimal.
Brackets should be used to force ordering since
.I fsdb
does not force the normal ordering of operators.
Note that \f3%\f1 is
the division symbol.
.TP 16
> 386:ino?i
Display i-number 386 in an inode format.
This now becomes the current
.IR inode .
.TP 16
> :ln=4
Change the link count for the
current
.I inode
to 4.
.TP 16
> :ln/x
Display the link count as a hexadecimal short.
.TP 16
> :ln=+1
Increment the link count by 1.
.TP 16
> :sz/D
Display the size field as a decimal long.
.TP 16
> :sz/X
Display the size field as a hexadecimal long.
.TP 16
> :ct=X
Display the creation time as a hexadecimal long.
.TP 16
> :mt=t
Display the modification time in time format.
.TP 16
> 0:db,3/b
Display the block number of the first extent as 3 bytes.
The block
number has to be
printed out as bytes, because of alignment considerations.
.TP 16
> 0:file/c
Display, in ASCII,
block zero of the file associated
with the current
.IR inode .
.TP 16
> 5:dir:inode; 0:file,*/c
Change the current inode to that
associated with the fifth directory entry
(numbered from zero)
of the current
.IR inode .
The first logical block of the file
is then displayed in ASCII.
.TP 16
> :sb
Display the superblock of this filesystem.
.TP 16
> 0:cg?c
Display cylinder group information and summary
for the first cylinder group (cg number 0).
.TP 16
> 7:dir:nm="name"
Change the name field
in the directory slot to
.IR name .
.TP 16
> 2:db:block,*?d
Display the third block of the current
.I inode
as directory entries.
.TP 16
> 0:db=0x43b
Change the disk block number associated with extent 0 of the inode
to 0x43b.
.TP 16
> 0:len=0x4
Change the length of extent 0 to 4.
.TP 16
> 1:off=0xa
Change the logical block offset of extent 1 to 4.
.TP 16
> 0x43b:block/X
Display the first four bytes of the contents of block 0x43b.
.TP 16
> 0x43b:block=0xdeadbeef
Set the contents of disk block number 0x43b to 0xdeadbeef.
0xdeadbeef may be truncated depending on the current
.IR type .
.TP 16
> 2050=0xffffffff
Set the contents of address 2050 to 0xffffffff.
0xffffffff may be truncated depending on the current
.IR type .
.TP 16
> 1c92434="this is some text"
Place the ASCII
for the string at
1c92434.
.TP 16
> 2:inode:0:db:block,*?d
Change the current inode to 2.
Take the first block associated with
this (root) inode and display its contents as directory entries.
It stops prematurely if the EOF is reached.
.SH SEE ALSO
fsck(1M),
dir(4),
efs(4),
inode(4).
