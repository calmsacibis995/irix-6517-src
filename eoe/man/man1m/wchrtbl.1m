'\"macro stdmacro
.if n .pH g1a.wchrtbl @(#)wchrtbl	41.6 of 5/26/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1990 AT&T
.nr X
.if \nX=0 .ds x} wchrtbl 1M "" "\&"
.if \nX=1 .ds x} wchrtbl 1M ""
.if \nX=2 .ds x} wchrtbl 1M "" "\&"
.if \nX=3 .ds x} wchrtbl "" "" "\&"
.if \nX=9 .ds x} wchrtbl 1M "SVR4 MNLS" "\&"
.TH \*(x}
.SH NAME
\f4wchrtbl\fP \- generate character classification and conversion tables for \s-1ASCII\s+1 and supplementary code sets
.SH SYNOPSIS
\f4wchrtbl \f1[\f2file\f1\^]
.SH DESCRIPTION
\f4wchrtbl\fP creates
tables containing information on character classification, character 
conversion, character set width, and numeric editing.
The first table is a multi-byte-sized array encoded such that a table lookup
can be used to determine the character classification of a character,
convert a character [see \f4ctype\fP(3C) and \f4wctype\fP(3W)], and find
the byte
and screen width of a character in one of the supplementary code sets.
The size of the array is (2*257*4) + 7 bytes:
257*4 bytes are required for the 32-bit code set
character classification table, 514*2 bytes for the upper- to lowercase
and lower- to uppercase 16-bit conversion table, and 7 bytes for character
set width information.

The second table contains information about the format of non-monetary
numeric quantities: the first byte specifies the decimal delimiter;
the second byte specifies the thousands delimiter; and the remaining
bytes comprise a null-terminated string indicating the grouping (each
element of the string is taken as an integer that indicates the number
of digits that comprise the current group in a formatted non-monetary
numeric quantity).

If supplementary code sets are specified, additional variable sized tables
are generated for multibyte character classification and conversion.
.P
\f4wchrtbl\fP reads the user-defined character
classification and conversion information from \f2file\fP
and creates three output files
in the current directory.
One output file,
\f4wctype.c\fP
(a C language source file),
contains the variable sized array generated from processing
the information from
\f2file\f1.
You should review
the content of
\f4wctype.c\fP
to verify that the array is set
up as you had planned.
The first 257*4 bytes of the array in
\f4wctype.c\fP
are used for storing 32-bit character classification for each
of 257 single byte characters.
The characters used for initializing these bytes of
the array represent character classifications that are defined in
\f4ctype.h\fP;
for example, 
\f4_L\fP
means a character is lower case and
\f4_S\fP\(bv\|\f4_B\fP
means the character is both a spacing character and a blank.
The second 257*4 bytes of the array are used for character conversion
with 514 elements consisting of 16-bit each.
These bytes of the array are initialized
so that characters for which you do not provide conversion information
will be converted to themselves.
When you do provide conversion information,
the first value of the pair is stored where the second one would be stored normally,
and vice versa.
For example, if you provide
\f4<0x41 0x61>\fP,
then
\f40x61\fP
is stored where
\f40x41\fP
would be stored normally, and
\f40x61\fP
is stored where
\f40x41\fP
would be stored normally.
The last 7 bytes are used for character width information.
Up to three supplementary code sets can be specified.
.P
For supplementary code sets, there are three sets of tables.
The first set is three pointer arrays which point to supplementary code set
information tables.
If the
corresponding supplementary code set 
information is not specified, the contents of the pointers are zeros.
The second one is a set of three supplementary code set information tables.
Each table contains minimum and maximum code values to be classified
and converted, and also contains pointers to character classification
and conversion tables.
If there is no corresponding table, the contents of
the pointers are zeros.
The last one is a set of character classification and
conversion tables which contain the same information as the single byte table
except that the codes are represented as process codes and the table size is
variable.
The characters used for initializing values of the character 
classification table represent character classifications that are defined in
\f4ctype.h\f1 and \f4wctype.h\fP.
\f4_E1\fP through \f4_E8\fP are for international
use and \f4_E9\fP through \f4_E24\fP are for
language-dependent use.
.PP
The second output file (a data file)
contains the same information, but is structured for
efficient use by the character classification
and conversion routines [see \f4ctype\fP(3C) and \f4wctype\fP(3W)].
The name of this output file is the value of the character classification
\f4LC_CTYPE\fP
read in from \f2file\fP.
This output file must be copied
to the \f4/usr/lib/locale/\f2locale\f4/LC_CTYPE\f1 file
by someone who is super-user
or a member of group \f4bin\f1.
This file must be readable by user,
group, and other; no other permissions should be set.
To use the character classification and conversion tables on this file,
set the \f4LC_CTYPE\fP category
of
\f4setlocale\fP [see \f4setlocale\fP(3C)] appropriately.
.PP
The third output file (a data file)
is created only if numeric editing information is specified
in the input file.
The name of the file is the value of the character
classification \f4LC_NUMERIC\fP read from the \f2file\f1.
This output file must be copied
to the \f4/usr/lib/locale/\f2locale\f4/LC_NUMERIC\f1 file
by someone who is super-user or a member of group \f4bin\fP.
This file must be readable by user,
group, and other; no other permissions should be set.
To use the numeric editing information on this file,
set the \f4LC_NUMERIC\fP category
of
\f4setlocale\fP appropriately.
.P
If no input file is given, or if the argument
\f4\-\fP is encountered,
\f4wchrtbl\fP
reads from standard input.
.P
The syntax of \f2file\fP allows the
user to define the name of the data file created by
\f4wchrtbl\fP, the assignment of characters to
character classifications, the
relationship between conversion letters,
and byte and screen widths for up to three supplementary code sets.
The keywords recognized by \f4wchrtbl\fP are:
.TP 24
\f4LC_CTYPE\f1
name of the first data file to be created by \f(CWwchrtbl\fP
.TP 24
\f4isupper\f1\^
character codes to be classified as uppercase letters
.TP 24
\f4islower\f1\^
character codes to be classified as lowercase letters
.TP 24
\f4isalpha\f1\^
character codes to be classified as letters
.TP 24
\f4isdigit\f1\^
character codes to be classified as numeric digits
.TP 24
\f4isspace\f1\^
character codes to be classified as white-space (delimiter) characters
.TP 24
\f4ispunct\f1\^
character codes to be classified as punctuation characters
.TP 24
\f4iscntrl\f1\^
character codes to be classified as control characters
.TP 24
\f4isblank\f1\^
character codes to be classified as blank characters
.TP 24
\f4isprint\f1\^
character codes to be classified as printing characters, including the
space character
.TP 24
\f4isgraph\f1\^
character codes to be classified as printable characters, not including the
space character

.TP 24
\f4isxdigit\f1\^
character codes to be classified as hexadecimal digits
.TP 24
\f4ul\f1\^
relationship between conversion characters
.TP 24
\f4cswidth\f1\^
byte and screen width information
.TP 24
\f4LC_NUMERIC\f1\^
name of the second data file created by \f4wchrtbl\fP
.TP 24
\f4decimal_point\f1\^
decimal delimiters
.TP 24
\f4thousands_sep\f1\^
thousands delimiters
.TP 24
\f4grouping\f1\^
string in which each element is taken as an integer that
indicates the number of digits that comprise the current
group in a formatted non-monetary numeric quantity.
.TP 24
\f4LC_CTYPE1\f1\^
specify that functions for specification of supplementary code set 1 follows
.TP 24
\f4LC_CTYPE2\f1\^
specify that functions for specification of supplementary code set 2 follows
.TP 24
\f4LC_CTYPE3\f1\^
specify that functions for specification of supplementary code set 3 follows
.TP 24
\f4isphonogram(iswchar1)\f1\^
character codes to be classified as phonograms in supplementary code sets
.TP 24
\f4isideogram(iswchar2)\f1\^
character codes to be classified as ideograms in supplementary code sets
.TP 24
\f4isenglish(iswchar3)\f1\^
character codes to be classified as English letters in supplementary code sets
.TP 24
\f4isnumber(iswchar4)\f1\^
character codes to be classified as numeric in supplementary code sets
.TP 24
\f4isspecial(iswchar5)\f1\^
character codes to be classified as special letters in supplementary code sets
.TP 24
\f4iswchar6\f1\^
character codes to be classified as other printable letters in supplementary code sets
.TP 24
\f4iswchar9\f1 - \f4iswchar22\f1\^
character codes to be classified as language-dependent letters/characters
.P
The keywords \f4iswchar1\fP through \f4iswchar22\fP correspond to bit names 
\f4_E1\fP through \f4_E22\fP defined in \f4wctype.h\fP
.P
Any lines with the number sign (\f4#\fP)
in the first column are treated as comments and are
ignored.
Blank lines are also ignored.
.sp
Characters for \f4isupper\fP,
\f4islower\fP, \f4isalpha\fP, \f4isdigit\fP, \f4isspace\fP, \f4ispunct\fP,
\f4iscntrl\fP, \f4isblank\fP, \f4isprint\fP, \f4isgraph\fP, \f4isxdigit\fP, \f4ul\fP,
\f4isphonogram\fP, \f4isideogram\fP, \f4isenglish\fP,
\f4isnumber\fP, \f4isspecial\fP, \f4iswchar1\fP\-\f4iswchar6\fP and
\f4iswchar9\fP\-\f4iswchar22\fP
can be represented as hexadecimal
or octal constants (for example, the letter \f4a\fP can
be represented as \f40x61\fP in hexadecimal or \f40141\fP in octal)
and must be up to two byte process codes.
Hexadecimal and octal constants may be
separated by one or more space and tab characters.
.P
The following is the format of an input specification
for \f4cswidth\fP (byte widths for supplementary code sets
2 and 3 are exclusive of the single shift characters):
.IP
\f4cswidth n1[[:s1][,n2[:s2][,n3[:s3]]]]\fP
.PP
where,
.sp .5
.nf
\f4n1\fP	byte width for supplementary code set 1
\f4s1\fP	screen width for supplementary code set 1
\f4n2\fP	byte width for supplementary code set 2
\f4s2\fP	screen width for supplementary code set 2
\f4n3\fP	byte width for supplementary code set 3
\f4s3\fP	screen width for supplementary code set 3
.fi
.P
The dash character (\^\f4\-\fP\^) may be used to
indicate a range of consecutive numbers
(inclusive of the characters delimiting the range).
Zero or more space characters may be used for
separating the dash character from the numbers.
.P
The backslash character (\^\f4\e\fP\^) is used for line continuation.
Only a carriage return is permitted after the backslash character.
.PP
The relationship between conversion
letters (\f4ul\fP)
is expressed as ordered pairs of octal or hexadecimal constants:
<\f2converting-character converted-character\fP>.
These two constants must be up to two byte process codes
and may be separated by one or more space characters.
Zero or more space characters may be used 
for separating the angle brackets (<\0>) from 
the numbers.
.ne 8
.SH EXAMPLE
The following is an example of an input 
file used to create the
.SM JAPAN
code set definition table on a file named
\f4LC_CTYPE\fP and \f4LC_NUMERIC\fP.
.RS
.PD 0
.ft CW
.cs CW 18
.nf

#
# locale JAPAN
#
LC_CTYPE	LC_CTYPE
#
# specification for single byte characters
#
isupper	  0x41 - 0x5a
islower	  0x61 - 0x7a
isdigit	  0x30 - 0x39
isspace	  0x20   0x9 - 0xd
ispunct	  0x21 - 0x2f	0x3a - 0x40  \e
		  0x5b - 0x60	0x7b - 0x7e
iscntrl	  0x0 - 0x1f	0x7f - 0x9f
isblank	  0x9 0x20
isprint   0x20
isxdigit  0x30 - 0x39	0x61 - 0x66	0x41 - 0x46
ul		<0x41 0x61> <0x42 0x62> <0x43 0x63> \e
		<0x44 0x64> <0x45 0x65> <0x46 0x66> \e
		<0x47 0x67> <0x48 0x68> <0x49 0x69> \e
		<0x4a 0x6a> <0x4b 0x6b> <0x4c 0x6c> \e
		<0x4d 0x6d> <0x4e 0x6e> <0x4f 0x6f> \e
		<0x50 0x70> <0x51 0x71> <0x52 0x72> \e
		<0x53 0x73> <0x54 0x74> <0x55 0x75> \e
		<0x56 0x76> <0x57 0x77> <0x58 0x78> \e
		<0x59 0x79> <0x5a 0x7a>
cswidth		2:2,1:1,2:2
LC_NUMERIC	LC_NUMERIC
decimal_point	\f6.\fP
thousands_sep
.br
.ne 1i
#
# specification for supplementary code set 1
#
LC_CTYPE1	
isupper		0xa3c1 - 0xa3da
islower		0xa3e1 - 0xa3fa
isdigit		0xa3b0 - 0xa3b9
isspace		0xa1a1
isphonogram	0xa4a1 - 0xa4f3 0xa5a1 - 0xa5f6
isideogram	0xb0a1 - 0xb0fe 0xb1a1 - 0xb1fe 0xb2a1 - 0xb2fe \e
		0xb3a1 - 0xb3fe 0xb4a1 - 0xb4fe 0xb5a1 - 0xb5fe \e
		0xb6a1 - 0xb6fe 0xb7a1 - 0xb7fe 0xb8a1 - 0xb8fe \e
		0xb9a1 - 0xb9fe 0xbaa1 - 0xbafe 0xbba1 - 0xbbfe \e
		0xbca1 - 0xbcfe 0xbda1 - 0xbdfe 0xbea1 - 0xbefe \e
		0xbfa1 - 0xbffe 0xc0a1 - 0xc0fe 0xc1a1 - 0xc1fe \e
		0xc2a1 - 0xc2fe 0xc3a1 - 0xc3fe 0xc4a1 - 0xc4fe \e
		0xc5a1 - 0xc5fe 0xc6a1 - 0xc6fe 0xc7a1 - 0xc7fe \e
		0xcca1 - 0xccfe 0xcda1 - 0xcdfe 0xcea1 - 0xcefe \e
		0xcfa1 - 0xcffe 0xd0a1 - 0xd0fe 0xd1a1 - 0xd1fe \e
		0xd2a1 - 0xd2fe 0xd3a1 - 0xd3fe 0xd4a1 - 0xd4fe \e
		0xd5a1 - 0xd5fe 0xd6a1 - 0xd6fe 0xd7a1 - 0xd7fe \e
		0xd8a1 - 0xd8fe 0xd9a1 - 0xd9fe 0xdaa1 - 0xdafe \e
		0xdba1 - 0xdbfe 0xdca1 - 0xdcfe 0xdda1 - 0xddfe \e
		0xdea1 - 0xdefe 0xdfa1 - 0xdffe 0xe0a1 - 0xe0fe \e
		0xe1a1 - 0xe1fe 0xe2a1 - 0xe2fe 0xe3a1 - 0xe3fe \e
		0xe4a1 - 0xe4fe 0xe5a1 - 0xe5fe 0xe6a1 - 0xe6fe \e
		0xe7a1 - 0xe7fe 0xe8a1 - 0xe8fe 0xe9a1 - 0xe9fe \e
		0xeaa1 - 0xeafe 0xeba1 - 0xebfe 0xeca1 - 0xecfe \e
		0xeda1 - 0xedfe 0xeea1 - 0xeefe 0xefa1 - 0xeffe \e
		0xf0a1 - 0xf0fe 0xf1a1 - 0xf1fe 0xf2a1 - 0xf2fe \e
		0xf3a1 - 0xf3fe 0xf4a1 - 0xf4fe 0xf5a1 - 0xf5fe \e
		0xf6a1 - 0xf6fe 0xf7a1 - 0xf7fe 0xf8a1 - 0xf8fe \e
		0xf9a1 - 0xf9fe 0xfaa1 - 0xfafe 0xfba1 - 0xfbfe \e
		0xfca1 - 0xfcfe 0xfda1 - 0xfdfe 0xfea1 - 0xfefe
isenglish	0xa3c1 - 0xa3da 0xa3e1 - 0xa3fa
isnumber	0xa3b0 - 0xa3b9
isspecial	0xa1a2 - 0xa1fe 0xa2a1 - 0xa2ae 0xa2ba - 0xa2c1 \e
		0xa2ca - 0xa2d0 0xa2dc - 0xa2ea 0xa2f2 - 0xa2f9 \e
		0xa2fe
iswchar6	0xa6a1 - 0xa6b8 0xa6c1 - 0xa6d8 0xa7a1 - 0xa7c1 \e
		0xa7d1 - 0xa7f1
#
#		JIS X0208 whole code set
#
iswchar9	0xa1a1 - 0xa1fe 0xa2a1 - 0xa2fe 0xa3a1 - 0xa3fe \e
		0xa4a1 - 0xa4fe 0xa5a1 - 0xa5fe 0xa6a1 - 0xa6fe \e
		0xa7a1 - 0xa7fe 0xa8a1 - 0xa8fe 0xa9a1 - 0xa9fe \e
		0xaaa1 - 0xaafe 0xaba1 - 0xabfe 0xaca1 - 0xacfe \e
		0xada1 - 0xadfe 0xaea1 - 0xaefe 0xafa1 - 0xaffe \e
		0xb0a1 - 0xb0fe 0xb1a1 - 0xb1fe 0xb2a1 - 0xb2fe \e
		0xb3a1 - 0xb3fe 0xb4a1 - 0xb4fe 0xb5a1 - 0xb5fe \e
		0xb6a1 - 0xb6fe 0xb7a1 - 0xb7fe 0xb8a1 - 0xb8fe \e
		0xb9a1 - 0xb9fe 0xbaa1 - 0xbafe 0xbba1 - 0xbbfe \e
		0xbca1 - 0xbcfe 0xbda1 - 0xbdfe 0xbea1 - 0xbefe \e
		0xbfa1 - 0xbffe 0xc0a1 - 0xc0fe 0xc1a1 - 0xc1fe \e
		0xc2a1 - 0xc2fe 0xc3a1 - 0xc3fe 0xc4a1 - 0xc4fe \e
		0xc5a1 - 0xc5fe 0xc6a1 - 0xc6fe 0xc7a1 - 0xc7fe \e
		0xc8a1 - 0xc8fe 0xc9a1 - 0xc9fe 0xcaa1 - 0xcafe \e
		0xcba1 - 0xcbfe 0xcca1 - 0xccfe 0xcda1 - 0xcdfe \e
		0xcea1 - 0xcefe 0xcfa1 - 0xcffe 0xd0a1 - 0xd0fe \e
		0xd1a1 - 0xd1fe 0xd2a1 - 0xd2fe 0xd3a1 - 0xd3fe \e
		0xd4a1 - 0xd4fe 0xd5a1 - 0xd5fe 0xd6a1 - 0xd6fe \e
		0xd7a1 - 0xd7fe 0xd8a1 - 0xd8fe 0xd9a1 - 0xd9fe \e
		0xdaa1 - 0xdafe 0xdba1 - 0xdbfe 0xdca1 - 0xdcfe \e
		0xdda1 - 0xddfe 0xdea1 - 0xdefe 0xdfa1 - 0xdffe \e
		0xe0a1 - 0xe0fe 0xe1a1 - 0xe1fe 0xe2a1 - 0xe2fe \e
		0xe3a1 - 0xe3fe 0xe4a1 - 0xe4fe 0xe5a1 - 0xe5fe \e
		0xe6a1 - 0xe6fe 0xe7a1 - 0xe7fe 0xe8a1 - 0xe8fe \e
		0xe9a1 - 0xe9fe 0xeaa1 - 0xeafe 0xeba1 - 0xebfe \e
		0xeca1 - 0xecfe 0xeda1 - 0xedfe 0xeea1 - 0xeefe \e
		0xefa1 - 0xeffe 0xf0a1 - 0xf0fe 0xf1a1 - 0xf1fe \e
		0xf2a1 - 0xf2fe 0xf3a1 - 0xf3fe 0xf4a1 - 0xf4fe \e
		0xf5a1 - 0xf5fe 0xf6a1 - 0xf6fe 0xf7a1 - 0xf7fe \e
		0xf8a1 - 0xf8fe 0xf9a1 - 0xf9fe 0xfaa1 - 0xfafe \e
		0xfba1 - 0xfbfe 0xfca1 - 0xfcfe 0xfda1 - 0xfdfe \e
		0xfea1 - 0xfefe
#
#		JIS X0208 parentheses
#
iswchar10	0xa1c6 - 0xa1db
#
#		JIS X0208 hiragana
#
iswchar11	0xa4a1 - 0xa4f3
#
#		JIS X0208 katakana
#
iswchar12	0xa5a1 - 0xa5f6
#
#		JIS X0208 other characters
#
iswchar13	0xa6a1 - 0xa6b8 0xa6c1 - 0xa6d8 0xa7a1 - 0xa7c1 \e
		0xa7d1 - 0xa7f1 0xa8a1 - 0xa8bf
#
#		English letter translation table
#
ul		<0xa3c1 0xa3e1> <0xa3c2 0xa3e2> <0xa3c3 0xa3e3> \e
		<0xa3c4 0xa3e4> <0xa3c5 0xa3e5> <0xa3c6 0xa3e6> \e
		<0xa3c7 0xa3e7> <0xa3c8 0xa3e8> <0xa3c9 0xa3e9> \e
		<0xa3ca 0xa3ea> <0xa3cb 0xa3eb> <0xa3cc 0xa3ec> \e
		<0xa3cd 0xa3ed> <0xa3ce 0xa3ee> <0xa3cf 0xa3ef> \e
		<0xa3d0 0xa3f0> <0xa3d1 0xa3f1> <0xa3d2 0xa3f2> \e
		<0xa3d3 0xa3f3> <0xa3d4 0xa3f4> <0xa3d5 0xa3f5> \e
		<0xa3d6 0xa3f6> <0xa3d7 0xa3f7> <0xa3d8 0xa3f8> \e
		<0xa3d9 0xa3f9> <0xa3da 0xa3fa> \e
#
#		kana translation table
#
		<0xa4a1 0xa5a1> <0xa4a2 0xa5a2> <0xa4a3 0xa5a3> \e
		<0xa4a4 0xa5a4> <0xa4a5 0xa5a5> <0xa4a6 0xa5a6> \e
		<0xa4a7 0xa5a7> <0xa4a8 0xa5a8> <0xa4a9 0xa5a9> \e
		<0xa4aa 0xa5aa> <0xa4ab 0xa5ab> <0xa4ac 0xa5ac> \e
		<0xa4ad 0xa5ad> <0xa4ae 0xa5ae> <0xa4af 0xa5af> \e
		<0xa4b0 0xa5b0> <0xa4b1 0xa5b1> <0xa4b2 0xa5b2> \e
		<0xa4b3 0xa5b3> <0xa4b4 0xa5b4> <0xa4b5 0xa5b5> \e
		<0xa4b6 0xa5b6> <0xa4b7 0xa5b7> <0xa4b8 0xa5b8> \e
		<0xa4b9 0xa5b9> <0xa4ba 0xa5ba> <0xa4bb 0xa5bb> \e
		<0xa4bc 0xa5bc> <0xa4bd 0xa5bd> <0xa4be 0xa5be> \e
		<0xa4bf 0xa5bf> <0xa4c0 0xa5c0> <0xa4c1 0xa5c1> \e
		<0xa4c2 0xa5c2> <0xa4c3 0xa5c3> <0xa4c4 0xa5c4> \e
		<0xa4c5 0xa5c5> <0xa4c6 0xa5c6> <0xa4c7 0xa5c7> \e
		<0xa4c8 0xa5c8> <0xa4c9 0xa5c9> <0xa4ca 0xa5ca> \e
		<0xa4cb 0xa5cb> <0xa4cc 0xa5cc> <0xa4cd 0xa5cd> \e
		<0xa4ce 0xa5ce> <0xa4cf 0xa5cf> <0xa4d0 0xa5d0> \e
		<0xa4d1 0xa5d1> <0xa4d2 0xa5d2> <0xa4d3 0xa5d3> \e
		<0xa4d4 0xa5d4> <0xa4d5 0xa5d5> <0xa4d6 0xa5d6> \e
		<0xa4d7 0xa5d7> <0xa4d8 0xa5d8> <0xa4d9 0xa5d9> \e
		<0xa4da 0xa5da> <0xa4db 0xa5db> <0xa4dc 0xa5dc> \e
		<0xa4dd 0xa5dd> <0xa4de 0xa5de> <0xa4df 0xa5df> \e
		<0xa4e0 0xa5e0> <0xa4e1 0xa5e1> <0xa4e2 0xa5e2> \e
		<0xa4e3 0xa5e3> <0xa4e4 0xa5e4> <0xa4e5 0xa5e5> \e
		<0xa4e6 0xa5e6> <0xa4e7 0xa5e7> <0xa4e8 0xa5e8> \e
		<0xa4e9 0xa5e9> <0xa4ea 0xa5ea> <0xa4eb 0xa5eb> \e
		<0xa4ec 0xa5ec> <0xa4ed 0xa5ed> <0xa4ee 0xa5ee> \e
		<0xa4ef 0xa5ef> <0xa4f0 0xa5f0> <0xa4f1 0xa5f1> \e
		<0xa4f2 0xa5f2> <0xa4f3 0xa5f3>
#
# specification for supplementary code set 2
#
LC_CTYPE2
iswchar6	0xa1 - 0xdf
iswchar14	0xa1 - 0xdf
.cs CW
.ft 1
.fi
.RE
.PD
.SH FILES
.PD 0
.TP 16
\f4/usr/lib/locale/\fP\f2locale\f4/LC_CTYPE\fP
.br
data files containing character classification and conversion tables
and character set width information created by \f4chrtbl\fP or
\f4wchrtbl\fP.
.TP 16
\f4/usr/lib/locale/\fP\f2locale\f4/LC_NUMERIC\fP
.br
data files containing numeric editing information.
.TP 16
\f4/usr/include/ctype.h\fP
.br
header file containing information used by character classification and conversion routines for single byte characters.
.TP 16
\f4/usr/include/wctype.h\fP
.br
header file containing information used by international character classification and conversion routines for supplementary code sets.
.TP 16
\f4/usr/include/xctype.h\fP
.br
header file containing information used by language-dependent character classification and conversion routines for supplementary code sets.
.PD
.SH "SEE ALSO"
.na
\f4ctype\fP(3C),
\f4setlocale\fP(3C),
\f4wctype\fP(3W),
\f4environ\fP(5)
.ad
.SH DIAGNOSTICS
The error messages produced by \f4wchrtbl\fP
are intended to be self-explanatory.
They indicate errors in the command line or syntactic errors encountered
within the input file.
.SH "NOTES"
In IRIX 6.5, the content of the \f4LC_CTYPE\f1
locale category was extended to comply with the XPG/4 standard.
The older LC_CTYPE binary format will not be recognized by the C library.
Therefore, all custom-built locales created under an older version of
IRIX must be regenerated with the later versions of \f4localedef\f1(1) and
associated \f4chrtbl\f1(1M)/\f4wchrtbl\f1(1M).
