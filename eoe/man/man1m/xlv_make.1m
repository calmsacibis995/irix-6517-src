.TH xlv_make 1M
.SH NAME
xlv_make \- create logical volume objects
.SH SYNOPSIS
.nf
\f3xlv_make\f1 [ \f3\-c\f1 cmdstring ] [ \f3\-f\f1 ] [ \f3\-h\f1 nodename ] \c
[ \f3\-v\f1 ]
	[ \f3\-A\f1 ] [ input_file ]
.fi
.SH DESCRIPTION
.I xlv_make
creates new logical volume objects by writing logical volume labels
to the devices that are to constitute the volume objects.
A volume
object can be an entire volume, a plex, or a volume
element.
.I xlv_make
allows you to create objects that are not full volumes
so that you can maintain a set of spares.
.PP
.I xlv_make
supports the following command line options:
.TP 8
\f3\-c\f1 \f2cmdstring\f1
Command line option.
Causes \f2xlv_make\f1 to go into command line mode and
use \f2cmdstring\f1 as the command input.
Multiple instances of \f3\-c\f1 are accumulated.
The \f3exit\f1 or \f3quit\f1 command must be used to terminate input.
.TP
.B \-f
Force
.I xlv_make
to create a
.I volume element
even if the partition type for the partition specified
does not correspond with its intended usage.
This is useful, for example, in converting \f2lv\f1(7M) volumes to
\f2xlv\f1(7M) volumes.
It is also used to allow creation of objects involving currently
mounted partitions.
.TP
\f3\-h\f1 \f2nodename\f1
Use
.I nodename
as the local nodename.
This option implies the
.B \-A
option below.
.TP
.B \-v
Verbose option.
Causes
.I xlv_make
to generate more detailed output.
Also, it causes
.IR xlv_assemble (1M)
to generate output upon exit from
.IR xlv_make .
.TP
.B \-A
Do not invoke
.IR xlv_assemble (1M)
upon exit from
.IR xlv_make .
The default is to invoke \f2xlv_assemble\f1 with the \f3\-q\f1 option unless
the \f3\-v\f1 option is specified, in which case \f2xlv_assemble\f1 is
invoked with no options.
To invoke other \f2xlv_assemble\f1 options, specify the
\f3\-A\f1 option and invoke \f2xlv_assemble\f1 manually.
.PP
\f2xlv_make\f1 only allows you to create volume objects out of
disk partitions that are not currently part of other volume
objects.
Partitions must be of a type suitable for use by \f2xlv_make\f1.
Suitable types are \f3xfs\f1, \f3efs\f1, \f3xlv\f1, and \f3xfslog\f1.
Partition types other than these are rejected unless the \f3\-f\f1
command line option or the \f3ve \-force\f1 interactive command is specified.
See \f2fx\f1(1M) for more information regarding partition types.
.IR xlv_mgr (1M)
must be used to modify or destroy volume objects.
.PP
.I xlv_make
can be run either interactively or it can take its commands
from an input file, \f2input_file\f1.
.I xlv_make
is written using Tcl.
Therefore, all the Tcl features such as
variables, control structures, and so on
can be used in
.I xlv_make
commands.
.PP
.I xlv_make
creates volume objects by writing the disk labels.
To make the newly created logical
volumes active,
.IR xlv_assemble (1M)
must be run.
.I xlv_assemble
is, by default, automatically invoked upon successful exit from \f2xlv_make\f1; \f2xlv_assemble\f1
scans all the disks attached to the system
and automatically assembles all the available logical volumes.
.PP
Objects are specified top-down and depth-first.
You start by specifying the
top-level object and continue to specify the pieces that make it up.
When you have completed specifying an object at one level, you can back up
and specify another object at the same level.
.PP
The commands are:
.TP 8
.BI vol " volume_name"
Specifies a volume.
The \f2volume_name\f1 is required.
It can be up to 14 alphanumeric characters in length.
.TP
.B data
Specifies a data subvolume.
This subvolume is required.
.TP
.B log
Specifies a log subvolume.
This is an optional subvolume used by the XFS filesystem.
.TP
\f3rt\f1
Specifies a real-time subvolume.
Real-time subvolumes are used for guaranteed-rate
I/O and also for high performance applications that
isolate user data on a separate subvolume.
This is an optional subvolume.
.TP
\f3plex\f1 [\f2plex_name\f1]
Specifies a plex.
If this plex is specified outside of a volume,
\f2plex_name\f1 must be given.
The name can be up to 14 alphanumeric characters.
A plex that exists outside of a
volume is known as a standalone plex.
.sp .8v
.PD 0
.TP
\f3ve\f1 [\f2volume_element_name\f1] [\f3\-stripe\f1] [\f3\-concat\f1] [\f3\-force\f1]
.TP
[\f3\-stripe_unit\f1 \f2stripe_unit_size\f1] [\f3\-start\f1 \f2blkno\f1] \f2device_pathnames\f1
Specifies a volume element.
If this volume element is specified
outside of a plex, \f2volume_element_name\f1 must be given.
The name can be up to 14 alphanumeric characters.
.PD
.RS
.TP 15
.B \-stripe
Specifies that the data within this volume element is to be
striped across all the disks named by \f2device_pathnames\f1.
.TP
.B \-concat
Specifies that all the devices named by \f2device_pathnames\f1 are
to be joined linearly into a single logical range of blocks.
This is the default if no flags are specified.
.TP
.B \-force
Forces the specification of the volume element when the partition type
does not agree with the volume element's intended usage.
For example, a partition with type \f3xfslog\f1 could be assigned to a
data subvolume.
Also, \f3\-force\f1 allows the specification of an object that
includes a partition that is currently
mounted.
.TP
\f3\-stripe_unit\f1 \f2stripe_unit_size\f1
specifies the number of blocks to write to one disk before
writing to the next disk in a stripe set.
.I stripe_unit_size
is expressed in 512-byte blocks.
\f3\-stripe_unit\f1 is only meaningful when used in conjunction
with \f3\-stripe\f1.
The default stripe unit size, if this flag is not set, is one
track.
Note: \f2lv\f1 called this parameter the granularity.
.TP
\f3\-start\f1 \f2blkno\f1
Specifies that this volume element should start at the given
block number within the plex.
.RE
.TP
.B end
Terminates the specification of the current object.
.TP
.B create
Create all new objects just specified during this session by
writing the disk labels out to all the disks affected.
This
command is similar to the \f3exit\f1 command except the session
is not terminated.
.TP
.B clear
Removes the current, uncompleted object.
.TP
.B show
Prints out all the volume objects on the system.
This includes
existing volume objects (created during an earlier \f2xlv_make\f1
session) and new objects
specified during this session that have not been created (written out
to the disk labels) yet.
.TP
.B exit
Create the objects specified during this session by
writing the disk labels out to all the disks affected, and
exit
\f2xlv_make\f1.
In interactive mode, the user is prompted to confirm this action if any new
objects have been created.
.TP
.B quit
Leave \f2xlv_make\f1 without creating the specified objects
(without writing the disk labels).
All the work done during this invocation of \f2xlv_make\f1 is lost.
In interactive mode, the user is prompted to confirm this action if any
objects have been specified.
.TP
.B help
Displays a summary of \f2xlv_make\f1 commands.
.TP
.B \?
Same as \f3help\f1.
.TP
.B sh
Fork a shell.
.SH EXAMPLES
.SS "Example 1"
To make a volume from a description in an input file called
\f2volume_config.txt\f1, give this command:
.Ex
# \f4xlv_make volume_config.txt\f1
.Ee
.SS "Example 2"
This example shows making some volume objects interactively.
.Ex
# \f4xlv_make\f1
.Ee
.PP
Make a spare plex so we can plug it into another volume on
demand.
.Ex
xlv_make> \f4plex spare_plex1\fP
spare_plex1
xlv_make> \f4ve /dev/dsk/dks0d2s1 /dev/dsk/dks0d2s2\fP
spare_plex1.0
xlv_make> \f4end\fP
Object specification completed
.Ee
Now make a small volume.
(Note that
.I xlv_make
automatically adds a
.I /dev/dsk
to the disk partition name if it is missing from the
.I ve
command.)
.Ex
xlv_make> \f4vol small\fP
small
xlv_make> \f4log\fP
small.log
xlv_make> \f4plex\fP
small.log.0
xlv_make> \f4ve dks0d2s3\fP
small.log.0.0
xlv_make> \f4data\fP
small.data
xlv_make> \f4plex\fP
small.data.0
xlv_make> \f4ve dks0d2s14 dks0d2s12\fP
small.data.0.0
xlv_make> \f4end\fP
Object specification completed
xlv_make> \f4show\fP
vol small
ve small.log.0.0        d710aa7d-b21d-1001-868d-080069077725
  start=0, end=1523, (cat)grp_size=1
  /dev/dsk/dks0d2s3 (1524 blks)   d710aa7e-b21d-1001-868d-080069077725
ve small.data.0.0       d710aa81-b21d-1001-868d-080069077725
  start=0, end=4571, (cat)grp_size=2
  /dev/dsk/dks0d2s14 (1524 blks)  d710aa82-b21d-1001-868d-080069077725
  /dev/dsk/dks0d2s12 (3048 blks)  d710aa83-b21d-1001-868d-080069077725
plex spare_plex1
ve spare_plex1.0        d710aa77-b21d-1001-868d-080069077725
  start=0, end=3047, (cat)grp_size=2
  /dev/dsk/dks0d2s1 (1524 blks)   d710aa78-b21d-1001-868d-080069077725
  /dev/dsk/dks0d2s2 (1524 blks)   d710aa79-b21d-1001-868d-080069077725
.sp .8v
xlv_make> \f4help\fP
vol volume_name  - Create a volume.
data | log | rt  - Create subvolume of this type.
plex [plex_name] - Create a plex.
ve [-start] [-stripe] [-stripe_unit N] [-force] [volume_element_name]
  partition(s)
end  - Finished composing current object.
clear- Delete partially created object.
show - Show all objects.
exit - Write labels and terminate session.
quit - Terminate session without writing labels.
help or ? - Display this help message.
sh - Fork a shell.
.sp .8v
xlv_make> \f4exit\fP
#
.Ee
Note that the strings like
.I d710aa82-b21d-1001-868d-080069077725
shown above
are the universally unique identifiers (UUIDs) that identify each XLV object.
.PP
.SS "Example 3"
This example shows a description file that makes the same volume objects
as in Example 2.
.Ex
# A spare plex
plex spare_plex1
ve dks0d2s1 dks0d2s2
# A small volume
vol small
log
plex
ve dks0d2s3
data
plex
ve dks0d2s14 dks0d2s12
end
# Write labels before terminating session.
exit
.Ee
.SS "Example 4"
This example shows making a complex volume interactively.
It makes a volume for an XFS filesystem that has a single-partition
log and a plexed (mirrored) data subvolume that is striped.
.Ex
# \f4xlv_make\fP
xlv_make> \f4vol movies\fP
movies
xlv_make> \f4log\fP
movies.log
xlv_make> \f4plex\fP
movies.log.0
xlv_make> \f4ve /dev/dsk/dks0d2s1\fP
movies.log.0.0
.Ee
.PP
Let the data subvolume have two plexes, each of which consists of
two sets of striped disks.
The data written to the data subvolume
is copied to both movies.data.0 and movies.data.1.
.Ex
xlv_make> \f4data\fP
movies.data
xlv_make> \f4plex\fP
movies.data.0
xlv_make> \f4ve -stripe dks0d1s6 dks0d2s6 dks0d3s6\fP
movies.data.0.0
xlv_make> \f4ve -stripe dks0d4s6 dks0d5s6\fP
movies.data.0.1
xlv_make> \f4plex\fP
movies.data.1
xlv_make> \f4ve -stripe dks1d1s6 dks1d2s6 dks1d3s6\fP
movies.data.1.0
xlv_make> \f4ve -stripe dks1d4s6 dks1d5s6\fP
movies.data.1.1
.Ee
Add a small real-time subvolume.
Stripe the data across two disks, with the stripe unit set to
1024 512-byte sectors.
.Ex
xlv_make> \f4rt\fP
movies.rt
xlv_make> \f4plex\fP
movies.rt.0
xlv_make> \f4ve -stripe -stripe_unit 1024 dks4d1s6 dks4d2s6\fP
movies.rt.0.0
xlv_make> \f4end\fP
Object specification completed
xlv_make> \f4exit\fP
#
.Ee
.SH DIAGNOSTICS
.TP 15
\f7Previous object not completed\f1
You have tried to specify a new object before the previous object has
been completely specified.
For example, the sequence \f3plex plex\f1 is not valid because the
volume elements for the first plex have not been specified yet.
.TP
\f7A volume has not been specified yet\f1
This error results from giving \f3rt\f1, \f3data\f1, or \f3log\f1
without first specifying a volume to which these subvolumes belong.
.TP
\f7An object with that name has already been specified\f1
This error results from giving the \f3vol\f1 \f2volume_name\f1,
\f3plex\f1 \f2plex_name\f1,
or \f3ve\f1 \f2volume_element_name\f1 command when an object with the same name
already exists or has been specified in this session.
.TP
\f7A log subvolume has already been specified for this volume\f1
.TP
\f7A data subvolume has already been specified for this volume\f1
.TP
\f7A real-time subvolume has already been specified for this volume\f1
These errors results from giving the \f3log\f1, \f3data\f1, or \f3rt\f1
command for a volume that already has a subvolume of the given type.
.TP
\f7A subvolume has not been specified yet\f1
You have given a \f3volume\f1 command and then given the \f3plex\f1 command
without first specifying a subvolume to which the plex belongs.
.TP
\f7Too many plexes have been specified for this subvolume\f1
You have already specified the maximum allowable number of plexes for
this subvolume.
.TP
\f7A plex has not been specified yet\f1
You have given a \f3ve\f1 command without first giving the \f3plex\f1
command.
.TP
\f7Too many volume elements have been specified for this plex\f1
You have reached the maximum number of volume elements that can be
in a single plex.
.TP
\f7An error occurred in creating the specified objects\f1
An error occurred while writing the volume configuration out to the disk
labels.
.TP
\f7Unrecognized flag: \f1\f2flag\f1
\f2flag\f1 is not recognized.
.TP
\f7Unexpected symbol: \f1\f2symbol\f1
\f2symbol\f1 is an unknown command.
.TP
\f7A volume name must be specified\f1
You have given a \f3vol\f1 command without giving the name of the
volume as an argument.
.TP
\f7Too many disk partitions\f1
You have specified too many devices for the volume element.
.TP
\f7Cannot determine size of \f1\f2partition\f1\f7; please verify that the device exists\f1
\f2xlv_make\f1 is unable to figure out the size of the specified disk partition.
Make sure that the device exists.
.TP
\f7Unequal partition sizes, truncating the larger partition\f1
The partitions specified for a striped volume element are not of the
same size.
This leaves some disk space unusable in the larger partition because data is
striped across all the partitions in a volume element.
.TP
\f7A disk partition must be specified\f1
You have given the \f3ve\f1 command without specifying the
disk partitions that belong to the volume element as arguments to the
command.
.TP
\f7Unknown device: %s\f1
You have specified a disk partition that either has no device node
in \f2/dev/dsk\f1 or is missing altogether.
.TP
\f7Illegal value\f1
The value is out of range for the given flag.
.TP
\f7The volume element's address range must be increasing\f1
When you specify the starting offset of a volume element within a plex
by using the \f3ve \-start\f1 command, you must specify them in increasing
order.
.TP
\f7Disk partition \f1\f2partition\f1\f7 is already being used\f1
The disk partition named in the \f3ve\f1 command is already in use by some
other volume object.
.TP
\f7Disk partition \f1\f2partition\f1\f7 is mounted; use ``\-force'' to override\f1
The disk partition named in the \f3ve\f1 command is currently mounted.
Use of the \f3\-force\f1 argument is required to perform the operation.
.TP
\f7Address range doesn't match corresponding volume element in other plexes\f1
A volume element within a plex must have the same address range in all plexes for the subvolume
that includes those plexes.
.TP
\f7There are partially specified objects, use ``quit'' to exit without \c
creating them\f1
You have entered the \f3quit\f1 command while there are specified, but not
created objects.
You should enter \f3quit\f1 again to really quit at this
point and discard specified objects.
.TP
\f7Missing flag value for: %s\f1
A command was given that requires an additional argument that was
not given.
.TP
\f7Malloc failed\f1
There is insufficient memory available for \f2xlv_make\f1 to operate
successfully.
.TP
\f7An error occurred in updating the volume header\f1
An attempt to modify a disk's volume header was unsuccessful.
.TP
\f7A striped volume element must have at least two partitions\f1
The \f3ve \-stripe\f1 command was given and only one partition was specified.
.TP
\f7Log ve should have partition type xfslog\f1
.TP
\f7Data ve should have partition type xlv\f1
.TP
\f7Rt ve should have partition type xlv\f1
.TP
\f7Standalone object should have partition type xlv or xfslog\f1
.TP
\f7Mixing partition type xfslog with data types not allowed\f1
All the partitions that make up a volume element must have the same partition
type, either \f3xlv\f1 or \f3xfslog\f1.
.TP
\f7Partition type must be consistent with other ve's in plex\f1
Partition type does not correspond with intended usage.
.TP
\f7Partition could already belong to lv.
Check /etc/lvtab\f1
A warning that this partition may already belong to an \f2lv\f1 volume.
.TP
\f7Illegal partition type\f1
An attempt was made to specify a partition that cannot, under any circumstance,
be used in an \f2xlv\f1(7M) volume.
An example of such a partition would be the volume header.
.TP
\f7Subvolume type does not match any known\f1
The subvolume being operated on is of no known type.
.TP
\f7Size mismatch\f1
The partition size information in the volume header does not match that
contained in the xlv label.
.TP
\f7Device number mismatch\f1
A warning that the device number in the xlv label does not match that of the volume header.
.TP
\f7The same partition cannot be listed twice\f1
The \f3ve\f1 command was given with the same partition listed twice.
.SH SEE ALSO
xlv_assemble(1M),
xlv_labd(1M),
xlv_mgr(1M),
xlv_plexd(1M),
xlv_shutdown(1M),
xlvd(1M),
xlv(7M).
.PP
\f2Tcl and the Tk Toolkit\f1
by John K.
Ousterhout, Addison-Wesley, 1994.
.SH NOTES
The disk labels created by \f2xlv_make\f1 are stored only in the volume header
of the disks.
They do not destroy user data.
Therefore, you can
make an \f2lv\f1(7M) volume into an XLV volume and still preserve all the
data on the logical volume.
.PP
\f2xlv_make\f1 changes the partition type of partitions used
in newly created objects to either \f3xlv\f1 or \f3xfslog\f1 depending
upon their usage.
.PP
You must pick a different name for each volume, standalone plex, and
standalone volume element.
You cannot have, for example, both a volume
and a plex named
.IR yy .
.PP
You must be root to run
.IR xlv_make .
