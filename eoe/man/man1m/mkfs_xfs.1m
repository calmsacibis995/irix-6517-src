.TH mkfs_xfs 1M
.SH NAME
mkfs_xfs \- construct an XFS filesystem
.SH SYNOPSIS
.nf
\f3mkfs_xfs\f1 [ \f3\-b\f1 subopt=value ] \c
[ \f3\-d\f1 subopt[=value] ] [ \f3\-i\f1 subopt=value ]
	[ \f3\-l\f1 subopt[=value] ] \c
[ \f3\-n\f1 subopt[=value] ] \c
[ \f3\-p\f1 protofile ] [ \f3\-q\f1 ] 
	[ \f3\-r\f1 subopt[=value] ] [ \f3\-C\f1 ] device
.fi
.SH DESCRIPTION
.I mkfs_xfs
constructs an XFS filesystem by writing on a special
file using the values found in the arguments of the command line.
It is invoked automatically by \f2mkfs\f1(1M) when \f2mkfs\f1 is
given the \f3\-t xfs\f1 option, options that are specific to XFS,
or no options that are specific to EFS.
.PP
In its simplest (and most commonly used form), the size of the 
filesystem is determined from the disk driver.  As an example, to
make a filesystem on partition 7 (all of the useable portion of an
option drive, normally) on drive 7 on SCSI bus 0, with an internal
log, use:
.Ex
	mkfs_xfs /dev/dsk/dks0d7s7
.Ee
.PP
XFS filesystems are composed of a data section, a log section,
and optionally a real-time section.
This separation can be accomplished using the XLV volume manager
to create a multi-subvolume volume,
or by embedding an
.I internal
log section in the data section.
In the former case, the
.I device
name is supplied as the final argument.
In the latter case a disk partition or
XLV logical volume without a log subvolume can contain
the XFS filesystem, which is named by the
.BI "\-d name=" special
option or by the final argument.
.PP
Each of the
.I subopt=value
elements in the argument list above can be given as multiple comma-separated
.I subopt=value
suboptions if multiple suboptions apply to the same option.
Equivalently, each main option can be given multiple times with
different suboptions.
For example,
.B \-l internal,size=1000b
and
.B \-l internal \-l size=1000b
are equivalent.
.PP
In the descriptions below, sizes are given in bytes, blocks, kilobytes,
or megabytes.
Sizes are treated as hexadecimal if prefixed by 0x or 0X,
octal if prefixed by 0, or decimal otherwise.
If suffixed with \f3b\f1 then the size is converted by multiplying it
by the filesystem's block size.
If suffixed with \f3k\f1 then the size is converted by multiplying it by 1024.
If suffixed with \f3m\f1 then the size is converted by multiplying it by
If suffixed with \f3g\f1 then the size is converted by multiplying it by
1073741824 (1024 * 1024 * 1024).
.TP
.B \-b
Block size options.
.IP
This option specifies the fundamental block size of the filesystem.
The valid suboptions are:
.BI log= value
and
\f3size=\f1\f2value\f1;
only one can be supplied.
The block size is specified either as a base two logarithm value with
.BR log= ,
or in bytes with
.BR size= .
The default value is
4096 bytes (4 KB).
The minimum value for block size is 512; the maximum is 65536 (64 KB).
.TP
.B \-d
Data section options.
.IP
These options specify the location, size, and other parameters of the
data section of the filesystem.
The valid suboptions are:
\f3agcount=\f1\f2value\f1,
\f3file\f1[\f3=\f1\f2value\f1],
\f3name=\f1\f2value\f1,
\f3size=\f1\f2value\f1,
\f3sunit=\f1\f2value\f1,
\f3swidth=\f1\f2value\f1,
and
\f3unwritten\f1[\f3=\f1\f2value\f1].
.IP
The
.B agcount
suboption is used to specify the number of allocation groups.
The data section of the filesystem is divided into allocation groups
to improve the performance of XFS.
More allocation groups imply that more parallelism can be achieved
when allocating blocks and inodes.
The minimum allocation group size is 16 MB;
the maximum size is just under 4 GB.
The data section of the filesystem is divided into
.I agcount
allocation groups (default value 8, unless the filesystem is smaller
than 128 MB or larger than 8 GB).
Setting
.I agcount
to a very large number should be avoided, since this causes an unreasonable
amount of CPU time to be used when the filesystem is close to full.
.IP
The
.B name
suboption can be used to specify the name of the special file containing
the filesystem.
In this case, the log section must be specified as
.B internal
(with a size, see the
.B \-l
option below) and there can be no real-time section.
Either the block or character special device can be supplied.
An XLV logical volume with a log subvolume cannot be supplied here.
Note that the default log in this case is an internal log with
at least 1000 blocks, actual size depending on the filesystem block
size and the directory block size.
.IP
The
.B file
suboption is used to specify that the file given by the
.B name
suboption is a regular file.
The suboption value is either 0 or 1,
with 1 signifying that the file is regular.
This suboption is used only to make a filesystem image
(for instance, a miniroot image).
If the value is omitted then 1 is assumed.
.IP
The
.B size
suboption is used to specify the size of the data section.
This suboption is required if
.B \-d file[=1]
is given.
Otherwise, it is only needed if the filesystem should occupy
less space than the size of the special file.
.IP
The
.B sunit
suboption is used to specify the stripe unit for a RAID device or XLV
striped volume.
The suboption value has to be specified in 512-byte block units.
This suboption ensures that data allocations will be stripe unit aligned 
when the current end of file is being extended and the file size is larger 
than 512KB.
Also inode allocations and the internal log will be stripe unit aligned.
.IP
The
.B swidth
suboption is used to specify the stripe width for a RAID device or XLV
striped volume.
The suboption value has to be specified in 512-byte block units.
This suboption is required if
.B \-d sunit
has been specified and it has to be a multiple of the 
.B \-d sunit 
suboption.
The stripe width will be the preferred iosize returned in the stat system call.
.IP
The
.B unwritten
suboption is used to specify whether unwritten extents are flagged as such,
or not.
The suboption value is either 0 or 1, with 1 signifying that unwritten
extent flagging should occur.
If the suboption is omitted, unwritten extent flagging is enabled.
If unwritten extents are flagged, filesystem write performance
will be negatively affected for preallocated file extents, since
extra filesystem transactions are required to convert extent flags 
for the range of the file written.
This suboption should be disabled if the filesystem
needs to be used on operating system versions which do not support the
flagging capability.
.TP
.B \-i
Inode options.
.IP
This option specifies the inode size of the filesystem, and other
inode allocation parameters.
The XFS inode contains a fixed-size part and a variable-size part.
The variable-size part, whose size is affected by this option, can contain:
directory data, for small directories;
attribute data, for small attribute sets;
symbolic link data, for small symbolic links;
the extent list for the file, for files with a small number of extents;
and the root of a tree describing the location of extents for the file,
for files with a large number of extents.
.IP
The valid suboptions for specifying inode size are:
\f3log=\f1\f2value\f1,
\f3perblock=\f1\f2value\f1,
and
\f3size=\f1\f2value\f1;
only one can be supplied.
The inode size is specified either as a base two logarithm value with
.BR log= ,
in bytes with
.BR size= ,
or as the number fitting in a filesystem block with
.BR perblock= .
The mininum (and default) value is 256 bytes.
The maximum value is 2048 (2 KB) subject to the restriction that
the inode size cannot exceed one half of the filesystem block size.
.IP
The option \f3maxpct=\f1\f2value\f1 specifies the maximum percentage
of space in the filesystem that can be allocated to inodes.
The default value is 25%.
Setting the value to 0 means that
essentially all of the filesystem can become inode blocks.
.IP
The option
.BI align[= value ]
is used to specify that inode allocation is or is not aligned.
The value is either 0 or 1,
with 1 signifying that inodes are allocated aligned.
If the value is omitted, 1 is assumed.
The default is that inodes are aligned.
Aligned inode access is normally more efficient than unaligned access;
alignment must be established at the time the filesystem is created,
since inodes are allocated at that time.
This option can be used to turn off inode alignment when the
filesystem needs to be mountable by a version of IRIX
that does not have the inode alignment feature
(any release of IRIX before 6.2, and IRIX 6.2 without XFS patches).
.TP
.B \-l
Log section options.
.IP
These options specify the location, size, and other parameters of the
log section of the filesystem.
The valid suboptions are:
.BI internal[= value ]
and
\f3size=\f1\f2value\f1.
.IP
The
.B internal
suboption is used to specify that the log section is a piece of
the data section instead of being a separate part of an XLV logical volume.
The suboption value is either 0 or 1,
with 1 signifying that the log is internal.
If the value is omitted, 1 is assumed.
.IP
The
.B size
suboption is used to specify the size of the log section.
This suboption is required if
.B \-l internal[=1]
is given.
Otherwise, it is only needed if the log section of the filesystem
should occupy less space than the size of the special file.
The size is specified in bytes or blocks, with a \f3b\f1 suffix 
meaning multiplication by the filesystem block size, as described above.
The overriding minimum value for size is 512 blocks.
With some combinations of filesystem block size, inode size,
and directory block size, the minimum log size is larger than 512 blocks.
.IP
For a filesystem which is not contained in an XLV logical volume with
a log subvolume, the default is to make an internal log 1000 blocks long,
or longer with some combinations of filesystem block size, inode size,
and directory block size.
.IP
For a filesystem which is contained in a XLV striped logical volume, the 
default internal log size is rounded up to a multiple of the stripe unit 
size.
In this case, the user specified 
.B size
value must be a multiple of the stripe unit size. 
.TP
.B \-n
Naming options.
.IP
These options specify the version and size parameters for the naming
(directory) area of the filesystem.
The valid suboptions are:
\f3log=\f1\f2value\f1,
\f3size=\f1\f2value\f1,
and
\f3version=\f1\f2value\f1.
The naming (directory) version is 1 or 2,
defaulting to 1 if unspecified.
With version 2 directories,
the directory block size can be any power of 2 size
from the filesystem block size up to 65536.
The block size is specified either as a base two logarithm value with
.BR log= ,
or in bytes with
.BR size= .
The default size value for version 2 directories is 4096 bytes (4 KB), 
unless the filesystem block size is larger than 4096,
in which case the default value is the filesystem block size.
For version 1 directories the block size is the same as the 
filesystem block size.
.TP
\f3\-p\f1 \f2protofile\f1
If the optional
.B \-p
.I protofile
argument is given,
.I mkfs_xfs
uses
.I protofile
as a prototype file
and takes its directions from that file.
The blocks and inodes
specifiers in the
.I protofile
are provided for backwards compatibility, but are otherwise unused.
The prototype file
contains tokens separated by spaces or
newlines.
A sample prototype specification follows (line numbers have been added to
aid in the explanation):
.nf
.sp .8v
.in +5
\f71       /stand/\f1\f2diskboot\f1\f7
2       4872 110
3       d--777 3 1
4       usr     d--777 3 1
5       sh      ---755 3 1 /bin/sh
6       ken     d--755 6 1
7               $
8       b0      b--644 3 1 0 0
9       c0      c--644 3 1 0 0
10      fifo    p--644 3 1
11      slink   l--644 3 1 /a/symbolic/link
12      :  This is a comment line
13      $
14      $\f1
.in -5
.fi
.IP
Line 1 is a dummy string.
(It was formerly the bootfilename.)
It is present for backward
compatibility; boot blocks are not used on SGI systems.
.IP
Note that some string of characters must be present as the first line of
the proto file to cause it to be parsed correctly; the value
of this string is immaterial since it is ignored.
.IP
Line 2 contains two numeric values (formerly the numbers of blocks and inodes).
These are also merely for backward compatibility: two numeric values must
appear at this point for the proto file to be correctly parsed,
but their values are immaterial since they are ignored.
.IP
Lines 3-11 tell
.I mkfs_xfs
about files and directories to
be included in this filesystem.
Line 3 specifies the root directory.
Lines 4-6 and 8-10 specifies other directories and files.
Note the special symbolic link syntax on line 11.
.IP
The
.B $
on line 7 tells
.I mkfs_xfs
to end the branch of the filesystem it is on, and continue
from the next higher directory.
It must be the last character
on a line.
The colon
on line 12 introduces a comment; all characters up until the
following newline are ignored.
Note that this means you cannot
have a file in a prototype file whose name contains a colon.
The
.B $
on lines 13 and 14 end the process, since no additional
specifications follow.
.IP
File specifications give the mode,
the user ID,
the group ID,
and the initial contents of the file.
Valid syntax for the contents field
depends on the first character of the mode.
.IP
The mode for a file is specified by a 6-character string.
The first character
specifies the type of the file.
The character range is
.B \-bcdpl
to specify regular, block special,
character special, directory files, named pipes (fifos), and symbolic
links, respectively.
The second character of the mode
is either
.B u
or
.B \-
to specify setuserID mode or not.
The third is
.B g
or
.B \-
for the setgroupID mode.
The rest of the mode
is a three digit octal number giving the
owner, group, and other read, write, execute
permissions (see
.IR chmod (1)).
.IP
Two decimal number
tokens come after the mode; they specify the
user and group IDs of the owner of the file.
.IP
If the file is a regular file,
the next token of the specification can be a pathname
from which the contents and size are copied.
If the file is a block or character special file,
two decimal numbers
follow that give the major and minor device numbers.
If the file is a symbolic link, the next token of the specification
is used as the contents of the link.
If the file is a directory,
.I mkfs_xfs
makes the entries
.BR . ""
and
.B  ..
and then
reads a list of names and
(recursively)
file specifications for the entries
in the directory.
As noted above, the scan is terminated with the
token
.BR $ .
.TP
.B \-q
Quiet option.
.IP
Normally
.I mkfs_xfs
prints the parameters of the filesystem
to be constructed;
the
.B \-q
flag suppresses this.
.TP
.B \-r
Real-time section options.
.IP
These options specify the location, size, and other parameters of the
real-time section of the filesystem.
The valid suboptions are:
.BI extsize= value
and
\f3size=\f1\f2value\f1.
.IP
The
.B extsize
suboption is used to specify the size of the blocks in the real-time
section of the filesystem.
This size must be a multiple of the filesystem block size.
The minimum allowed value is the filesystem block size
or 4 KB (whichever is larger);
the default value is the stripe width for striped volumes or 64 KB for
non-striped volumes;
the maximum allowed value is 1 GB.
The real-time extent size should be carefully chosen to match the
parameters of the physical media used.
.IP
The
.B size
suboption is used to specify the size of the real-time section.
This suboption is only needed if the real-time section of the
filesystem should occupy
less space than the size of the XLV real-time subvolume.
.TP
.B \-C
Disable overlapping partition/volume checks.
.IP
By default \f2mkfs_xfs\f1 checks to see if the destination partition or logical
volume overlaps any mounted or reserved partitions in the system.  If an
overlap or mount conflict is found, the user will be notified and prevented
from potentially corrupting the existing data.  For systems with
a large number of disks, this additional checking may add noticable overhead
to the command's execution time.  For situations where command performance is
necessary, this switch may be used to disable the safeguards.  Due to the
potential for user-error causing corrupted filesystems or other on-disk
data corruption, we strongly discourage use of this switch in normal operation.
.SH SEE ALSO
mkfs(1M),
mkfs_efs(1M).
.SH BUGS
With a prototype file, it is not possible to specify hard links.
