.TH RSVPD 1M
.SH NAME
rsvpd \- Resource ReSerVations Protocol daemon
.SH SYNOPSIS
.na
.B rsvpd 
[
.B \-D
] [
.B \-d
.I debug_bits
] [
.B \-l
.I logging_level
] [
.B \-R
.I router_addr
] [
.B \-t
.I mstat_TTL
]
[
.B -e
.I MIB_entry_purge_minutes
]
[
.B -c
.I config_file
]
.br
.ad
.SH DESCRIPTION
.LP
\fIRsvpd\fP is a daemon program that uses the RSVP resource reservation
protocol to set up reservation state in hosts and routers.  It supports
an API that allows applications to make reservation requests.  It includes
an adaptation module to the admission control and traffic control
mechanisms provided by the output device drivers in the kernel.

rsvpd contains a SNMP agent, called rsvpd-snmpagent.
The rsvpd-snmpagent allows SNMP managers to read all RSVP and Integrated
Service MIB variables, and to write the intSrvIfAttribMaxAllocatedBits
variable.  See \fIrsvpd-snmpagent(1m)\fP for more details.

.SH OPTIONS
.TP
.B \-D
Execute rsvpd in debugging mode, i.e., do not detach the process,
and print debugging information to stderr.
.TP
.B \-d
Set the debugging mask to the integer \fIdebug_bits\fP.  This mask
selects which additional information, if any, will be logged when the
logging level (see below) is at least LOG_DEBUG.  See the section
below on LOGGING CONTROLS.
.TP
.B \-l
Set the logging level, which controls logging of data for debugging and
diagnosis, to the integer \fIlogging_level\fP.  See the section below
on LOGGING CONTROLS.
.TP
.B \-R
Specify \fIrsvp_router\fP as the name or dotted-decimal number of a
first-hop router to be used by \fIrsvpd\fP running on a host.  With
this parameter, \fIrsvpd\fP will send a unicast copy of any
UDP-encapsulated RSVP message directly to \fIrsvp_router\fP, in
addition to copies it normally sends.  The \fB\-R\fP parameters is
required only when the multicast TTL threshold of a tunnel or firewall
would otherwise make the first-hop router inaccessible from the host.
.TP
.B \-t
Set the IP TTL value for multicasting diagnostic information (summary
of the state) to \fImcast_TTL\fP.  This information is multicast when
the DEBUG_MCAST_STATE bit (see LOGGING CONTROLS) is set in the
debugging bit mask.  The default is TTL = 1, i.e., one hop.
.B \-e
Controls how long an old MIB entry will be kept before it is deleted.
An old MIB entry is one that is no longer active because the session,
sender, reservation, forwarded reservation, or flow that it describes
is no longer active.  The default
is 5 minutes.  Delaying the deletion of an inactive MIB entry gives
network managers some time to examine the entry after receiving the
lostFlow notification.
.B \-c
Specify another location for the configuration file.  The default is
/etc/config/rsvpd.conf.
.ne 3
.SH CONFIGURATION FILE
.LP
By default, the RSVP daemon looks for a configuration file named \fIrsvpd.conf\fP
in /etc/config.  This file may contain configuration
commands, one command per line.  Each command consists of a series of
keywords separated by blanks or tabs; some keywords are followed by one
or two parameters.  The first keyword in the line is the name of the
command; other keywords may come in any order.  A blank line or a
comment line beginning with '#' will be ignored.

There is currently two commands defined:

    \fBinterface\fP \fIiface_name\fP [police] [udpencap] [udpttl \fInn\fP] 

                [refresh \fIrr\fP] [disable] [passbreak] [passnormal]

                [integrity] [sendkey \fIid\fP \fIkey\fP]

    \fBneighbor\fP \fIhost\fP [sendkey \fIid\fP \fIkey\fP]

Here \fIiface_name\fP is the name of a physical interface (e.g.,
`le0'), to which the following keywords apply.  Similarly, \fIhost\fP
is the name or dotted-decimal address of a neighboring host.  More than
one command line may be given for the same interface or host, and
corresponding lines have a cumulative effect.

The following keywords are defined for the \fBinterface\fP command:
.TP
.B police
Traffic control policing is to be applied to the specified interface.
.TP
.B udpencap
Force \fIrsvpd\fP to use UDP encapsulation of RSVP messages on the
specified interface.  In most cases \fIrsvpd\fP will automatically
configure itself to do UDP encapsulation on any interfaces on which it
is required.  The \fBudp\fP keyword should be required only by a router
connected to a LAN which has no hosts that act as RSVP senders.
.TP
.B udpttl \fPttl\fI
UDP encapsulation using the specified TTL is to be performed on RSVP
messages sent out the specified interface.  This keyword implies the
\fBudp\fP keyword.  The default TTL for encapsulation is 1.

The \fBudpttl\fP keyword is required only when the local environment
includes RSVP-capable hosts separated by non-RSVP-capable routers, or
to satisfy TTL threshold requirements.  The TTL value must not exceed
the hop distance to the first-hop router; violation of this restriction
will cause gratuitous UDP encapsulation between routers.
.TP
.B disable
Disable RSVP on the specified interface.  No RSVP messages are forwarded
on this interface.  This option is useful to prevent RSVP messages from
ever reaching certain parts of the network.
.TP
.B passbreak
Forward RSVP PATH messages as normal, but set the RSVP TTL field so
that the next hop router will think this hop does not support RSVP.
Kernel admission and traffic control is bypassed.  All reservation
requests are accepted.  This option is useful on systems with
some interfaces which do not support RSVP admission and traffic control.
RSVP messages are still forwarded on those interfaces; however, other
nodes will know what those interfaces do not support RSVP traffic control.
.TP
.B passnormal
Process the RSVP messages normally, but bypass kernel admission and traffic
control.  All reservation requests are supported.  This option is useful
for high speed interfaces which do not
support RSVP admission and traffic control.  However, because of their high
bandwidth, they are unlikely to be a bottleneck for the flow.
This option allows those interfaces to pretend they support RSVP traffic
control, even though they don't.  IP over ATM and HIPPI
interfaces are good candidates for this option.
.TP
.B refresh \fItime\fP
Override the default refresh period for the specified interface.
Here \fItime\fP is a new refresh period in seconds. [Not supported yet].
.TP
.B integrity
Integrity checking is required on messages received on the specified
interface.
.TP
.B sendkey \fIid\fP \fIkey\fP

Here \fIid\fP is an integer key id and \fIkey\fP is a corresponding
key for sending messages to the specified interface.  \fIKey\fP must
be 16 bytes written in hexadecimal notation, with no spaces.
.TP
.B recvkey \fIid\fP \fIkey\fP

Here \fIid\fP is an integer key id and \fIkey\fP is a corresponding key
for receiving messages from the specified neighbor node.  \fIKey\fP
must be 16 bytes written in hexadecimal notation, with no spaces.
.TP

Here is an example configuration file

	# rsvpd configuration
.br
	interface le0   udpttl 3   integrity refresh 60
.br
	interface le0  sendkey 32  c0640a4abda195de6062afe2de5a7e47
.br
	interface le0  sendkey 33  7fa12385f3ac29b333715ff314d56fc9
.br
	neighbor can.isi.edu recvkey 77 32fc719d796f2ad764f36cf072dfc5d4
.br
	neighbor can.isi.edu recvkey 78  68fa01780355d7772997e5bf92927985


.ne
.SH LOGGING CONTROLS
.LP
The RSVP daemon logs state and event information for management,
diagnosis, and debugging.  The logged data is written into an rsvpd log
file (e.g., \fI/var/tmp/.rsvpd.log\fP).  It also appears on the console
(stderr) if \fIrsvpd\fP is executed in non-daemon mode (i.e., with the
\fB\-D\fP flag).  The rsvpd log file can grow to a maximum size of
approximately 400KB; it will then be closed and renamed to
\fI/var/tmp/.rsvpd.log.prev\fP, and a new log file will be started.

Logging is controlled by two integer parameters, the `debugging mask'
and the `logging level'.  These parameters may be set on the
\fBrsvpd\fP command line or dynamically using the \fBrtap\fP console
interface (see rtap(8)).

Each log message has a priority, and it will appear in the log if its
priority is at least equal to the logging level.  The priorities
(defined in \fI<sys/syslog.h>\fP) used by \fIrsvpd\fP are as follows:

.TP 0.5i
3	LOG_ERR
.RS
These messages indicate system errors, configuration errors, internal
logical errors within rsvpd, or logical errors in the client end of an
API socket.  They should never occur in normal operation.
.RE

4	LOG_WARNING
.RS
These messages indicate temporary resource shortage or protocol errors in
RSVP messages received from remote hosts.
.RE

6	LOG_INFO
.RS
These message log changes of management parameters.
.RE

7	LOG_DEBUG
.RS
These message contain debugging information.  This will generally
consist of a one-line summary of the event.  Then additional
information may follow, depending upon the setting of the debugging
mask bits DEBUG_IO and DEBUG_EVENTS.
.RE

8	LOG_HEXD
.RS
Dump all RSVP messages sent and received in hex.
.RE 

For example, a logging_level of LOG_DEBUG will cause all
events that occur to be logged, while a logging_level
of LOG_INFO will log everything but debug messages.

The debugging mask is considered to be a set of bits; the bits and their
symbolic designations in the code are as follows:
.TP 0.5i
1	DEBUG_IO
.RS
If this bit is included, the contents of the each RSVP message will be
formatted to the log following its transmission or receipt.
.RE

2	DEBUG_DS_DUMP
.RS
If this bit is included, the complete path and reservation state will
be written into the log, periodically and when the state changes.
.RE

4	DEBUG_EVENTS
.RS
If this bit is included, additional details on API and kernel
scheduling events will be logged following the corresponding event lines.
.RE

8	DEBUG_ROUTE
.RS
If this bit is included, a great deal of information concerning route
lookups will be logged.
.RE

16	DEBUG_MCAST_STATE
.RS
This bit does not control logging.  If it is on, \fIrsvpd\fP will multicast
its internal state periodically.  The RSVP tool \fIrsvpeep\fP will receive and
format this information.  The multicast TTL may be
set using the \fB\-t\fP parameter (see above).
.RE

32	DEBUG_TIMERS
.RS
If this bit is included, a great deal of information concerning the
timer queue will be logged.
.RE

.SH SEE ALSO
rtap(1m), rstat(1m), rsvpeep(1m), rsvpfilter(1m), psifconfig(1m),
rsvpd-snmpagent(1m)
.LP

.SH SGI Notes
The rsvpd in IRIX6.5 is based on ISI rel4.1a6.  It has been compiled
without OBSOLETE_API defined.

The IRIX6.5 kernel supports Controlled Load traffic control, so rsvpd
has been compiled with the SCHEDULE option defined.

.LP

