.TH xlv_mgr 1M
.SH NAME
xlv_mgr \- administers XLV logical volume objects and their disk labels
.SH SYNOPSIS
.nf
\f3xlv_mgr\f1 [ \f3\-r\f1 root ] [ \f3\-c\f1 cmdstring ] [ \f3\-v\f1 ] [ \f3\-x\f1 ] [ \f3\-R\f1 ]
.fi
.SH DESCRIPTION
.I xlv_mgr
displays and modifies existing XLV objects
(volumes, plexes, volume elements, and XLV disk labels).
.I xlv_mgr
can operate on XLV volumes even while they are mounted and in use.
.PP
.I xlv_mgr
supports the following command line options:
.TP 10
\f3\-r\f1 \f2root\f1
Use \f2root\f1 as the root directory.
This is used in the miniroot when \f2/\f1 is
mounted as \f2/root\f1.
.TP 10
\f3\-c\f1 \f2cmdstring\f1
Command line option.
Causes \f2xlv_mgr\f1 to go into command line mode and
use \f2cmdstring\f1 as the command input.
Multiple instances of \f3\-c\f1 are accumulated.
.TP 10
.B \-v
Verbose option.
Causes \f2xlv_mgr\f1 to generate more detailed output.
.TP 10
.B \-x
Expert mode.
Provides additional functions.
.TP 10
.B \-R
Do not read the XLV configuration information from
the disks at the time \f2xlv_mgr\f1 is invoked.
This allows \f2xlv_mgr\f1 to quickly startup.
The XLV configuration information can be read from
the disks at a later time with the \f3reset\f1 command.
.PP
Commands that pertain to plexes are displayed only when the system
has been licensed for the plexing portion of XLV.
.PP
.I xlv_mgr
provides several types of operations:
\f3attach\f1,
\f3detach\f1,
\f3delete\f1,
\f3change\f1,
\f3script\f1, and
\f3show\f1:
.TP 10
\f3attach\f1
Add an XLV object to another XLV object.
You can add a volume element to a plex or plex to a volume.
The volume element or plex to be added must first be
created using
.IR xlv_make (1M).
.TP
\f3detach\f1
Separate a part of an XLV object and make
it an independent (standalone) XLV object.
For example,
if you detach a plex from a plexed volume,
that plex is separated from the volume and made into a
standalone plex.
The original volume then has one less plex.
.TP
\f3delete\f1
Delete an entire XLV object.
.TP
\f3script\f1
Generate the
.I xlv_make
commands required to create some or all XLV objects.
.TP
\f3show\f1
Display the list of XLV objects on the
system and their structure.
.TP
\f3change\f1
Change an attribute associated with
can XLV object.
.PP
The commands are:
.TP
\f3show\f1 [\f3\-long\f1][\f3\-verbose\f1] \f3all\f1
Displays all known XLV objects by name and type.
The \f3\-long\f1 option causes more information about each XLV object
to be displayed.
The \f3\-verbose\f1 displays more detailed information,
such as the uuid.
The following is an example of the output of this command:
.nf
.sp .8v
\f7xlv_mgr> \f1\f4show all\f1
.sp .8v
\f7Volume:             root_vol (complete)
Volume:             db1 (complete)
Volume Element:     ve12
Plex:               plex2\f1
.fi
.TP
\f3show\f1 [\f3\-short\f1][\f3\-verbose\f1] \f3kernel\f1 [\f2volume_name\f1]
Displays all XLV objects or the specified \f2volume_name\f1
configured into the running kernel.
The only XLV objects in the kernel are volumes.
Standalone plexes and
volume elements are not viable objects in the kernel because they cannot
be used.
The \f3\-short\f1 option displays terse information on each
volume.
The \f3\-verbose\f1 displays more detailed information on each
volume.
.TP
\f3show\f1 [\f3\-long\f1][\f3\-verbose\f1] \f3labels\f1 [\f2device_volume_header\f1]
Displays XLV disk labels on all disks or the specifed
.IR device_volume_header .
The \f3\-long\f1 option displays the secondary label.
.TP
\f3show config\f1
Displays XLV software configuration information
about the running kernel.  Included are statistics on the XLV
memory pools for all plexed volumes (if support is present) and all 
volume elements.  
For example:
.nf
.sp .8v
\f7xlv_mgr> \f1\f4show config\f1
.sp .8v
\f7
Allocated subvol locks: 30      locks in use: 8
Plexing license: present
Plexing support: present
Statistic Collection: off
Plex buffer pool statistics: 
        maximum concurrent I/O's 13;  buffer size 1016 bytes
        pool hits 1121; misses 141; waits 0; resized 4 times
        memory growth rate 50%; maximum miss rate 10%
Volume Element buffer pool statistics: 
        maximum concurrent I/O's 53;  buffer size 1.48KB
        pool hits 1636; misses 225; waits 0; resized 5 times
        memory growth rate 50%; maximum miss rate 10%
Maximum subvol block number: 0x7fffffff
.fi
.PD
.IP
The \f3Statistic Collection\f1 tag indicates if
statistics gathering is enabled (\f3on\f1) or disabled (\f3off\f1).
.IP
In the pool statistics, \f3hits\f1 imply an efficent I/O path
and \f3misses\f1 suggest a somewhat slower path.
When the \f3maximum miss rate\f1 is exceeded, the buffer pool
is grown by the \f3growth rate\f1.
The \f3maximum concurrent I/O's\f1 gives an upper bound on the
number of efficient I/Os possible, and the \f3buffer size\f1
is the amount of memory dedicated for each I/O request.
.TP
\f3show\f1 [\f3\-verbose\f1] \f3object\f1 \f2object_name\f1
Displays detailed information on an XLV object \f2object_name\f1.
The information includes all the XLV parameters and the disk partitions
that make up the object.
.IP
In the example below, the volume named
.I db1
has one subvolume of type \f3data\f1 that contains two plexes.
The first plex has two volume elements, while the second plex
only has one volume element.
The first volume element in each
plex covers the same range of disk blocks.
For each volume element,
.I xlv_mgr
displays the partitions that make up the volume element, the size of the
partition, and the range of this volume's disk blocks that map to the
volume element.
For example:
.nf
.sp .8v
\f7xlv_mgr> \f1\f4show object db1\f1\f7
VOL db1 (complete)
VE db1.data.0.0 [active]
        start=0, end=1100799, (cat)grp_size=1
        /dev/dsk/dks1d4s0 (1100800 blks)
VE db1.data.0.1 [active]
        start=1100800, end=2201599, (cat)grp_size=1
        /dev/dsk/dks1d4s1 (1100800 blks)
VE db1.data.1.0 [active]
        start=0, end=1100799, (cat)grp_size=1
        /dev/dsk/dks1d4s2 (1100800 blks)
.fi

.TP
\f3show\f1 \f3stat\f1 [\f2subvolume\f1]
Displays statistics gathered for either all subvolumes
or the specified subvolume.
For example:
.nf
.sp .8v
\f7xlv_mgr> \f1\f4show stat root.data\f1\f7
Subvolume 0 (root.data): 
  read ops: 668,  read blocks: 286015
  write ops: 2025,  write blocks: 305508
.fi
.PD
.IP
The above example shows the number of read/write operations
and read/write blocks going to the \f4data\f1 subvolume of
the volume \f2root\f1.
.IP
The following example shows the statistics for subvolume 6
which has a striped volume element.
.sp .8v
.nf
\f7xlv_mgr> \f1\f4show stat 6\f1\f7
Subvolume 6 (rickey.data):
  read ops: 300,  read blocks: 2457600
  write ops: 300,  write blocks: 2457600
    stripe ops: 600,  total units: 19200
     largest single i/o: 32 stripe units,  frequency: 600
     aligned     <    stripe width; ends on stripe unit: 0
     aligned     >    stripe width; ends on stripe unit: 600
     aligned     =    stripe width; ends on stripe unit: 0
     aligned   > or < stripe width; doesn't end on stripe unit: 0

     unaligned   <    stripe width; ends on stripe unit: 0
     unaligned   >    stripe width; ends on stripe unit: 0
     unaligned   =    stripe width; doesn't end on stripe unit: 0
     unaligned > or < stripe width; doesn't end on stripe unit: 0
.fi
.IP
A stripe width is composed of the product of the stripe unit and the
number of disks comprising the stripe.  The stripe unit determines
the number of blocks to write to one disk before writing to the next.
The stripe statistics are:
.RS
.TP 22
.B "stripe ops"
The number of operations issued to the subvolume's
striped volume elements.  Depending on the volume geometry,
and whether or not the subvolume is plexed,
this may not match the number of read and write operations.
.TP
.B "total units"
The cumulative count of all stripe units involved in
stripe operations to the subvolume.  
.TP
.B "largest single i/o"
Keeps track of the largest I/O size issued to the subvolume measured in
stripe units.
.TP
.B "frequency"
The number of times the largest I/O was issued.
.RE
.IP
There are three parameters for evaluating how an I/O spans a
striped volume: 
.RS
.TP 22
.B "aligned/unaligned"
Indicates whether or not the start address of the I/O begins on a stripe unit
boundary.  If an I/O doesn't start on a boundary, the stripe unit is
used inefficiently.
.TP
.B "< stripe width"
.PD 0
.TP
.B "> stripe width"
.TP
.PD 0
.B "= stripe width"
.PD
Specifies if the transfer is less than a stripe width's worth of data,
more than a stripe width, or an even multiple of the stripe width size.
Transfers of full stripe widths are optimal since all disks are accessed evenly.
Transfers of more or less than a stripe width are less optimal due to
uneven drive access patterns.  
.TP
.B "doesn't end on a stripe unit"
.PD 0
.TP
.B "ends on a stripe unit"
.PD
When an I/O ends on a stripe unit, the next sequential I/O will start aligned
on a stripe unit boundary.  If it doesn't end on a stripe unit, then the
stripe is used inefficiently since a sequential access will require that
particular unit to be accessed multiple times.
.RE
.TP
\f3attach ve\f1 \f2source\f1 \f2dest-plex\f1
.PD 0
.TP
\f3attach ve\f1 \f2source\f1 \f2volume\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2N\f1
The command appends standalone volume element object
\f2source\f1 to the end of destination plex.
This enables you to grow a plex or volume by adding a volume element
to the end of a plex.
You can use this in conjunction with
.IR xfs_growfs (1M)
to grow an XFS filesystem without unmounting it.
.PD
.IP
Suppose that you have a volume element, \f2spareve\f1, that contains a
single disk partition
.IR /dev/dsk/dks1d4s2 .
The following command appends it to plex 0 of the data subvolume
of volume
.IR db1 :
.nf
.sp .8v
\f7xlv_mgr> \f1\f4attach ve spareve db1.data.0\f1\f7
xlv_mgr> \f1\f4show object db1\f1\f7
VOL db1 (complete)
VE db1.data.0.0 [active]
        start=0, end=1100799, (cat)grp_size=1
        /dev/dsk/dks1d4s0 (1100800 blks)
VE db1.data.0.1 [active]
        start=1100800, end=2201599, (cat)grp_size=1
        /dev/dsk/dks1d4s1 (1100800 blks)
VE db1.data.0.2 [active]
        start=2201600, end=3302399, (cat)grp_size=1
        /dev/dsk/dks1d4s2 (1100800 blks)\f1
.fi
.TP
\f3attach plex\f1 \f2source\f1 \f2volume\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}
Appends standalone plex object \f2source\f1 to existing volume \f2volume\f1.
This command creates duplicate copies of the data on
the volume for greater reliability.
This operation
is sometimes called
.IR mirroring .
After the plex has been added,
.I xlv_mgr
automatically initiates a plex revive operation; this copies the
data from the original XLV plexes to the newly added plex so that
the plex holds the same data as the original plexes in the volume.
The following appends a plex named
.I plex2
to the data subvolume of volume
.IR db1 :
.sp .8v
\f7xlv_mgr> \f1\f4attach plex plex2 db1.data\f1\f7
.IP
Use the \f3show object\f1 command to display volume
.I db1
and see that the disk partitions that were part of
.I plex2
are now a component of
.IR db2 .
.I plex2
no longer exists as a standalone plex since it was merged into volume
.IR db1 .
.TP
.PD 0
\f3insert ve\f1 \f2source\f1 \f2vol\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2N\f1
.TP
\f3insert ve\f1 \f2source\f1 \f2plex\f3.\f2N\f1
Inserts standalone volume element object \f2source\f1 into
the destination plex object.
This enables you to add a volume element
into a gap in a plex.
'\"This is useful when you are replacing a faulty disk.
.PD
.IP
.I xlv_mgr
requires that the destination be a fully qualified
XLV pathname (for example, movies.data.0).
The pathname
must specify the relative position
within the plex to insert the volume element.
(The first volume element in a plex is at position 0.)
The plex to be operated on can be a standalone plex or a part of
a volume.
If the plex is part of a volume, the volume, subvolume,
and plex must be specified.
In the example below it is volume
.IR test .
The following example inserts a volume element
.I ve5
into a gap in the volume
.IR test .
There is a gap because the first volume element starts
at block number 76200.
First display the configuration of
.I test
and
.I ve5
before inserting
.I ve5
into
.IR test .
.nf
.sp .8v
\f7xlv_mgr> \f1\f4show object test\f1\f7
.sp .8v
VOL test (has holes)
VE test.data.0.0 [active]
        start=76200, end=152399, (cat)grp_size=1
        /dev/dsk/dks0d2s1 (76200 blks)
VE test.data.0.1 [active]
        start=152400, end=228599, (cat)grp_size=1
        /dev/dsk/dks0d2s2 (76200 blks)\f1
.sp .8v
\f7xlv_mgr> \f1\f4show object ve5\f1\f7
.sp .8v
VE ve5 [empty]
        start=0, end=76199, (cat)grp_size=1
        /dev/dsk/dks0d2s5 (76200 blks)\f1
.sp .8v
\f7xlv_mgr> \f1\f4insert ve ve5 test.data.0\f1\f7
.sp .8v
\f7xlv_mgr> \f1\f4show object test\f1\f7
.sp .8v
\f7VOL test (complete)
VE test.data.0.0 [stale]
        start=0, end=76199, (cat)grp_size=1
        /dev/dsk/dks0d2s5 (76200 blks)
VE test.data.0.1 [active]
        start=76200, end=152399, (cat)grp_size=1
        /dev/dsk/dks0d2s1 (76200 blks)
VE test.data.0.2 [active]
        start=152400, end=228599, (cat)grp_size=1
        /dev/dsk/dks0d2s2 (76200 blks)\f1
.fi
.TP
.PD 0
\f3detach\f1 [\f3\-force\f1] \f3ve\f1 \f2plex\f3.\f2N\f1 \f2ve-object\f1
.TP
\f3detach\f1 [\f3\-force\f1] \f3ve\f1 \f2volume\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2N\f1 \f2ve-object\f1
Removes specified volume element from its parent object and
save it as \f2ve-object\f1.
This command separates a volume element from its parent plex.
This volume element can later be added to some other XLV object.
The plex from which the volume element is removed can be a
standalone plex or part of a volume.
The detached volume element becomes a standalone
XLV volume element object.
You must specify the fully qualified pathname of the
volume element to be detached and the name to be
given to the detached volume element.
The \f3-force\f1 option forces the detach when the
the parent object is missing any pieces.
The detach operation leaves the volume element intact.
.PD
.TP
\f3detach\f1 [\f3\-force\f1] \f3plex\f1 \f2volname\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2plexno\f1 \f2plexobject\f1
This command removes the specified plex from its parent object and
saves it as \f2plexobject\f1.
The \f3-force\f1 option forces the detach when the
the parent object is missing any pieces.
This new standalone plex can later be added back to a volume via
the \f3attach plex\f1 command.
.IP
The following example shows how to detach the first plex from a volume:
.sp .8v
\f7xlv_mgr> \f1\f4detach plex db1.data.0 savedplex\f1
.TP
\f3delete object\f1 \f2name\f1
Deletes the object \f2name\f1.
This command enables you to delete a volume, a standalone
plex, or a standalone volume element.
The XLV configuration is removed from the disks that make
up the XLV object.
Because the XLV configuration information
is stored in the volume header (see
.IR vh (7M)),
this command does not affect any user data that may have been
written to the user disk partitions.
.TP
\f3delete all\f1[\f3_labels\f1]
An expert command, this command deletes the XLV labels
from all disks on the local system.
You might want to do this
to initialize all the disks on a new system and ensure that there
is no leftover XLV configuration information on the disks.
Note that this is a very dangerous operation.
Deleting the
disk labels destroys all of the XLV objects on the system.
.TP
\f3delete label\f1 \f2device_volume_header\f1
An expert command, this command deletes the XLV disk label
from the named \f2device_volume_header\f1.
.TP
\f3change name\f1 \f2object_name\f1 \f2newname\f1
This command renames the given XLV object
.I object_name
to
.IR newname .
.IP
The following example shows how to rename an object
.I small
to
.IR big .
.sp .8v
\f7xlv_mgr> \f1\f4change name small big\f1
.TP
\f3change nodename\f1 \f2name\f1 \f2object\f1 ...
This command changes the nodename associated with the named objects.
.IP
The following example shows how to set the node name
for the volume
.I db1
to
.IR homestead .
.sp .8v
\f7xlv_mgr> \f1\f4change nodename homestead db1\f1
.TP
.PD 0
\f3change online\f1 \f2vol\f1\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2N\f3.\f2N\f1
.TP
\f3change offline\f1 \f2vol\f1\f3.\f1{\f3data\f1|\f3log\f1|\f3rt\f1}\f3.\f2N\f3.\f2N\f1
This command transitions the specified volume element
online or offline.
.PD
.TP
.PD 0
\f3change stat on\f1
.TP
\f3change stat off\f1
Expert commands to enable or disable statistics gathering.
The default setting for statistics gathering is specified in the
configuration file \f2/var/sysgen/master.d/xlv\f1.
.PD
.TP
\f3change type\f1 \f3ve\f1|\f3plex\f1|\f3vol\f1 \f2object\f1
This command changes the type of the given object.
.IP
The following example shows how to change a standalone plex object
.I sa_plex
to a volume and then rename the volume to
.IR backup_vol .
.nf
.sp .8v
\f7xlv_mgr> \f1\f4change type vol sa_plex\f1
\f7xlv_mgr> \f1\f4change name sa_plex backup_vol\f1
.fi
.TP
\f3change ve_start\f1 \f2start_block\f1 \f2sa_ve\f1
This command changes the start address of a standalone volume element.
This is useful to aid in detaching a volume element from one object
and arbitrarily inserting it in another.
.TP
\f3change plexmem\f1  \f2max-pool-i/os\f1  \f2growth%\f1  \f2maximum-miss%\f1
.PD 0
.TP
\f3change vemem\f1  \f2max-pool-i/os\f1  \f2growth%\f1  \f2maximum-miss%\f1
.IP
An expert command, these two commands allow you to modify the parameters
for the two XLV memory/buffer pools.
.PD
.IP
When servicing an I/O request, there are two types of memory allocated.
The first is for plexed volumes, if plexing support is present,
and the second is for the underlying volume elements.
If no memory available in the respective memory pool, XLV gets
memory from the system general purpose memory allocator.
By changing the maximum number of concurrent I/O \f2max-pool-i/os\f1,
you can increase the efficiency of an I/O request because
memory taken from the pool is more efficient than using the
general purpose allocator.
Changing the growth percentage \f2growth%\f1 alters how
fast the pool grows when the number of misses exceeds
the miss percentage \f2maximum-miss%\f1.
.PD
.IP
Note that any changes to the pool parameters are only for life
of the running system.  The changes are not kept across system restarts.
.PD
.TP
\f3reset\f1
Reinitializes \f2xlv_mgr\f1
data structures by rereading all the XLV configuration
information from all the disks.
.PD
.TP
\f3reset stat\f1 [\f2subvolume\f1]
An expert command to clear the statistics of either all subvolumes
or the named subvolume.
.TP
.PD 0
\f3script\f1 [\f3\-write\f1 \f2filename\f1] \f3object\f1 \f2name\f1
.TP
\f3script\f1 [\f3\-write\f1 \f2filename\f1] \f3all\f1
Generates the required
.I xlv_make
commands to create the named object or all objects.
When the \f3\-write\f1 option is specified, the \f2xlv_make\f1 commands
are saved into
.IR filename .
.PD
.TP
.B help
Displays a summary of \f2xlv_mgr\f1 commands.
.TP
.B \?
Same as \f3help\f1.
.TP
.B sh
Fork a shell.
.TP
.B quit
Terminate this session.
.PP
'\".IP
'\"Note that the \f2xlv_mgr\f1 operations are complete in that they modify
'\"the XLV disk labels and kernel as appropriate.
'\"If an operation is not successful, an error message is printed to
'\"the screen explaining the failure.
.SH EXAMPLES
These examples show the making of some XLV objects and
the growing and plexing of a volume.
The resulting volume configuration is saved to a
.IR xlv_make (1M)
input file.
.PP
Use
.IR xlv_make (1M)
to create a volume named \f2bigvolume\f1.
.Ex
xlv_make> \f4vol bigvolume\fP
bigvolume
xlv_make> \f4data\fP
bigvolume.data
xlv_make> \f4plex\fP
bigvolume.data.0
xlv_make> \f4ve dks131d3s7\fP
bigvolume.data.0.0
xlv_make> \f4end\f1
Object specification completed
xlv_make> \f4exit\f1
Newly created objects will be written to disk.
Is this what you want?(yes)  \f4yes\f1
Invoking xlv_assemble
.Ee
Create a standalone volume element \f2spare_ve\f1.
.Ex
# \f4xlv_make\f1
xlv_make> \f4ve spare_ve dks131d4s7\fP
spare_ve
xlv_make> \f4end\f1
Object specification completed
xlv_make> \f4exit\f1
Newly created objects will be written to disk.
Is this what you want?(yes)  \f4yes\f1
Invoking xlv_assemble
.Ee
Use the \f2xlv_mgr\f1 \f4attach ve\f1
command to grow the volume \f2bigvolume\f1 by appending \f2spare_ve\f1
to plex 0 of the data subvolume.
.Ex
# \f4xlv_mgr\f1
xlv_mgr> \f4attach ve spare_ve bigvolume.data.0\f1
xlv_mgr> \f4exit\f1
.Ee
Create a standalone plex \f2spare_plex\f1 which can be used
to completely mirror the volume \f2bigvolume\f1.
.Ex
xlv_make> \f4plex spare_plex\fP
spare_plex
xlv_make> \f4ve dks133d3s7\fP
spare_plex.0
xlv_make> \f4ve dks133d4s7\fP
spare_plex.1
xlv_make> \f4end\f1
Object specification completed
xlv_make> \f4exit\f1
Newly created objects will be written to disk.
Is this what you want?(yes)  \f4yes\f1
Invoking xlv_assemble
.Ee
Use the \f2xlv_mgr\f1 \f4attach plex\f1 command to mirror
the volume \f2bigvolume\f1 by adding plex \f2spare_plex\f1
to the data subvolume.
.Ex
# \f4xlv_mgr\f1
xlv_mgr> \f4attach plex spare_plex bigvolume.data\f1
xlv_mgr> \f4exit\f1
.Ee
Save the volume configuration to a file.
.Ex
# \f4xlv_mgr\f1
xlv_mgr> \f4script -write /etc/xlv_make.bigvolume.input object bigvolume\f1
xlv_mgr> \f4exit\f1
.Ee
.SH SEE ALSO
xlv_assemble(1M),
xlv_make(1M),
xlv_plexd(1M),
xlv_shutdown(1M),
xlv(7M).
.PP
\f2Tcl and the Tk Toolkit\f1
by John K. Ousterhout, Addison-Wesley, 1994.
.SH NOTES
.I xlv_mgr
operations modify both the XLV disk labels and the kernel data structures
as appropriate.
This means that you do not need to run
.IR xlv_assemble (1M)
for your changes to take effect.
The only exceptions are the XLV label deleting commands
\f3delete all_labels\f1 and \f3delete label\f1,
which effect only the disk labels.
.PP
.I xlv_mgr
automatically initiates plex revive operations (see
.IR xlv_plexd (1M))
as required after adding a new plex to a volume or a volume element to a
plexed volume.
.PP
You should be root when running
.IR xlv_mgr .
Otherwise you have limited functionality.
