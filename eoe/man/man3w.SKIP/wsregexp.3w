'\"macro stdmacro
.if n .pH g3w.wsregexp @(#)wsregexp	40.14 of 4/12/91
.\" Copyright 1993 Silicon Graphics
.\" Author Suresh Duddi, dps@esd.sgi.com
.nr X
.if \nX=0 .ds x} wsregexp 3W "" "\&"
.if \nX=1 .ds x} wsregexp 3W ""
.if \nX=2 .ds x} wsregexp 3W "" "\&"
.if \nX=3 .ds x} wsregexp "" "" "\&"
.if \nX=9 .ds x} wsregexp 3W "SGI NLS" "\&"
.TH \*(x}
.tr ~
.SH NAME
\f4wsregexp\f1: \f4 wsrecompile\f1, \f4wsrestep\f1, \f4wsrematch\f1, \f4wsreerr\f1 \- Wide character based regular expression compile and match routines
.SH SYNOPSIS
.nf
.ft 4
.sp0.5
#include <wsregexp.h>
#include <widec.h>
.sp0.5
.ta +0.5i +1.5i
long	wsrecompile(struct rexdata *prex, long *expbuf,
		long *endbuf, wchar_t eof);
.sp0.5
int	wsrestep(struct rexdata *prex, wchar_t *wstr, long *expbuf);
.sp0.5
int	wsrematch(struct rexdata *prex, wchar_t *wstr, long *expbuf);
.sp0.5
char	*wsreerr(int err);
.sp0.5
.ft 1
.fi
.SH DESCRIPTION
These functions are general purpose internationalized
regular expression matching
routines to be used in programs that perform regular expression matching.
These functions are defined by the \f4wsregexp.h\f1 header file.
.P
The function \f4wsrecompile\f1 takes as input an internationalized
regular expression as defined below (apart from the normal regular
expressions as defined by \f4regexp\f1) and produces a compiled
expression that can be used with \f4wsrestep\f1
or \f4wsrematch\f1.
.RS
.nf
.ft 4
.ta +0.5i +1i +1i
struct rexdata {
	short	sed;	/* flag for sed */
	wchar_t	*str;	/* regular expression */
	int	err;	/* returned error code, 0 = no error */
	wchar_t	*loc1;
	wchar_t	*loc2;
	int	circf;
	...
};
.fi
.RE
.P
The first parameter, \f2prex\f1, is a pointer to the 
specification of the regular
expression. \f2prex->sed\f1 should be non-zero if sed style delimiter syntax
is to be adopted. \f2prex->str\f1 should point to the regular
expression that needs to be compiled. The regular expression string
should be in wide character format. \f2prex->err\f1 indicated any
error during the compilation and use of this regular expression.
\f2expbuf\f1 points to the place where the compiled regular
expression will be placed. 
\f2endbuf\f1 points to the first long after the space where the
compiled regular expression may be placed.
\f2(endbuf\-expbuf)\f1 should be large enough for the
compiled regular expression to fit.
\f2eof\f1 is the wide character which marks the end of the
regular expression.  This character is usually a \f4/\f1 (slash).
.P
If \f4wsrecompile\f1 was successful, it returns the pointer to the end of
the regular expression, \f2endbuf\f1. Otherwise, 0 is returned and the
error code is set in \f2prex->err\f1.
.P
The functions \f4wsrestep\f1 and \f4wsrematch\f1 do pattern matching given
a null terminated wide character string \f2wstr\f1 and a compiled
regular expression \f2expbuf\f1 as input. \f2expbuf\f1 for these
functions should be the compiled regular expression which was
obtained by a call to the function \f4wsrecompile\f1.
.P
The function \f4wsrestep\f1 returns non-zero
if some substring of \f2wstr\f1 matches the regular expression in
\f2expbuf\f1 and zero if there is no match.
The function \f4wsrematch\f1 returns non-zero
if a substring of \f2wstr\f1 starting from the beginning
matches the regular expression in
\f2expbuf\f1 and zero if there is no match.
If there is a match, \f2prex->loc1\f1 and \f2prex->loc2\f1 are set.
\f2prex->loc1\f1 points to the first wide character that
matched the regular expression; \f2prex->loc2\f1
points to the wide character after the last wide character that matches
the regular expression.
Thus if the regular expression matches the entire input string,
\f2prex->loc1\f1 will point to the first wide character of \f2wstr\f1
and \f2prex->loc2\f1 will point to the null at the end of \f2wstr\f1.
.P
\f4wsrestep\f1 uses the variable \f2circf\f1 of \f2struct rexdata\f1
which is set by \f4wsrecompile\f1 if the regular expression begins
with \f4^\f1 (caret). If this is set then \f4wsrestep\f1
will try to match the regular expression to the beginning of the string
only. If more than one regular expression is to be compiled before
the first is executed, the value of \f2prex\->circf\f1 should be saved for
each compiled expression and should be set to that saved value before
each call to \f4wsrestep\f1.
.P
\f4wsreerr\f1 returns the error message corresponding to the error
code in the language of the current locale. The error code \f2err\f1
should be one returned by the wsregexp functions in the \f2err\f1
variable of \f2struct rexdata\f1.
.P
The internationalized regular expressions available for use with the
wsregexp functions are constructed as follows:
.TP 12
\f2Expression\f1
\f2Meaning\f1
.TP
\f2c\f1
the character \f2c\f1 where \f2c\f1 is not a special character.
.TP
\f4[[:\f2class\f4:]]\f1
\f2class\f1 is any character type as defined by the \f2LC_TYPE\f1
locale catagory. \f2class\f1 can be one of the following
.RS 12
.TP 8
\f2alpha\f1
a letter
.TP
\f2upper\f1
an upper-case letter
.TP
\f2lower\f1
a lower-case letter
.TP
\f2digit\f1
a decimal digit
.TP
\f2xdigit\f1
a hexadecimal digit
.TP
\f2alnum\f1
an alphanumeric character
.TP
\f2space\f1
any whitespace character
.TP
\f2punct\f1
a punctuation character
.TP
\f2print\f1
a printable character
.TP
\f2graph\f1
a character that has a visible representation
.TP
\f2cntrl\f1
a control character
.RS -12
.TP 12
\f4[[=\f2c\f4=]]\f1
An equivalence class, or, any collation element defined as having
the same relative order in the current collation sequence as \f2c\f1.
As an example, if \f4A\f1 and \f4a\f1 belong to the same equivalence
class, then both \f2[[=A=]b]]\f1 and \f2[[=a=]b]]\f
are equivalent to \f2[Aab]\f1.
.TP 12
\f4[[.\f2cc\f4.]]\f1
This represents a multi-character collating symbol.
Multi-character collating elements must be
represented as collating symbols to distinguish them from
single-character collating elements. As an example, if the string
\f2ab\f1 is a valid collating element, then \f2[[.ab.]]\f1 will
be treated as an element and will match the same string of
characters, while \f2ab\f1 will match the list of characters
\f2a\f1 and \f2b\f1. If the multi-character collating symbol is
not a valid collating element in the current collating sequence
definition, the symbol will be treated as an invalid expression.
.TP 12
\f4[[\f2c\f4-\f2c\f4]]\f1
Any collation element in the character expression range \f2c-c\f1,
where \f2c\f1 can identify a collating symbol or an equivalence class.
If the character \f4-\f1 (hyphen) appears immediately after an opening
square bracker, \f2e.g.\f1 \f2[-c]\f1, or immediately prior to a closing
square bracket, \f2e.g.\f1 \f2[c-]\f1, it has no special meaning.
.P
Immediately following an opening square bracket \f2^\f1 means the complement
of, \f2e.g.\f1 \f2[^c]\f1. Otherwise, it has no special meaning.
.P
Within square brackets, a \f4.\f1 that is not part of a \f2[[.cc.]]\f1
sequence, or a \f4:\f1 that is not part of a \f2[[:class:]]\f1 sequence,
matches itself.
.SH SEE ALSO
regexp(5)
.SH "DIAGNOSTICS"
Errors are:
.RS
.TP 25
\f4ERR_NORMBR\f1
no remembered search string
.TP
\f4ERR_REOVFLOW\f1
regexp overflow
.br
This happens when \f4wsrecompile\f1 cant fit the compiled regular
expression in \f2(endbuf-expbuf)\f1.
.TP
\f4ERR_BRA\f1
\f4( )\f1 imbalance
.TP
\f4ERR_DELIM\f1
illegal or missing delimiter.
.TP
\f4ERR_NBR\f1
bad number in \f4{ }\f1
.TP
\f4ERR_2MNBR\f1
more than 2 numbers given in \f4{ }\f1
.TP
\f4ERR_DIGIT\f1
\f4digit\f1 out of range
.TP
\f4ERR_2MLBRA\f1
too many \f4(\f1
.TP
\f4ERR_RANGE\f1
range number too large
.TP
\f4ERR_MISSB\f1
\f4}\f1 expected after \f4\e\f1
.TP
\f4ERR_BADRNG\f1
first number exceeds second in \f4{ }\f1.
.TP
\f4ERR_SIMBAL\f1
\f4[ ]\f1 imbalance.
.TP
\f4ERR_SYNTAX\f1
illegal regular expression
.TP
\f4ERR_ILLCLASS\f2
illegal \f4[:\f2class\f4:]\f1
.TP
\f4ERR_EQUIL\f2
illegal \f4[=\f2class\f4=]\f1
.TP
\f4ERR_COLL\f2
illegal \f4[.\f2cc\f4.]\f1
.RE
.SH EXAMPLE
The following is an example of how the regular expression
macros and calls might be defined by an application program:
.P
.RS
.nf
.ft 4
.sp0.5
#include <wsregexp.h>
#include <widec.h>
.sp0.5
.ta +2.75i
 . . .
struct rexdata rex;
long expbuf [BUFSIZ];	/* Buffer for the compiled RE */

/* Define a RE to identify a capitalized word */
char *regexp = "[[:space:]][[:upper:]]";
wchar_t wregexp [512];
wchar_t weof;	/* The end of regular expression */
char eof = '\e0';

wchar_t linebuf [BUFSIZ];	/* Buffer for the input string */
 . . .
(void) mbstowcs(wregexp, regexp, strlen(regexp)+1);
(void) mbtowc(&weof, &eof, 1);
rex.str = wregexp;
rex.sed = 0;
rex.err = 0;
if (!wsrecompile(&rex, expbuf, &expbuf[BUFSIZ], weof))
        fprintf(stderr, "%s\en", wsreerr(rex.err));
 . . .
if (wsrestep(&rex, linebuf, expbuf))
        succeed;
.ft 1
.fi
.RE
.\"	@(#)regexp.5	6.3 of 9/6/83
.Ee
