.TH showrefs 1
.SH NAME
showrefs \- display interface information about libraries
.SH SYNOPSIS
\f3showrefs\f1
[\f3-AadeghimNnPpruvw]
[\f3-D\f2dir\f1]
[\f3-M\f2manpath\f1]
\f2files\f1
.SH DESCRIPTION
\f3showrefs\fP
displays various pieces of information concerning a library's symbol space.
This is useful when trying to ensure that a library conforms to the
name space rules that govern certain libraries that are part
of standards, and that should be heeded by all libraries.
.PP
There are three main rules that libraries should follow:
.in +4
1) Libraries should export only those unreserved symbols that are defined
to be the public interface for the library, and are present in one or
more header files and man pages.
.sp
2) Libraries that come under the auspices of various standards must make
sure that internal usage of a function that isn't part of the standard
(but is part of the library) doesn't become part of the
application's name space. An example is \f3fopen\fP which is part of
ANSI.
The implementation of \f3fopen\fP of course eventually calls \f3open\fP
which is NOT in the ANSI permitted name space. Since ANSI permits
an application to define a function \f3open\fP, it is up to the
the implementation of \f3fopen\fP to make sure that it will still work
correctly in the face of an application written \f3open\fP.
.sp
3) Usage of a library's routines by another library shouldn't necessarily
force any unreserved symbols of the dependent library into the applications
name space.
.in -4
.PP
Reserved symbols include any identifier that starts with an '\f3_\fP', followed
by another '\f3_\fP' or an upper case letter;
or any non-macro that starts with an '\f3_\fP' (See the ANSI specification for
a more complete definition).
So, the way to conform to the first rule above is to make sure that all internal
data and function symbols are either marked \f3static\fP or begin with
an '\f3_\fP'.
The \f3-e\fP option to \f3showrefs\fP can be used to print the external/public
interface that a library is exporting.
.PP
To conform to the second rule above requires that all internal usage
of routines use a reserved name.
A easy way to do this is to have a file \f3synonyms.h\fP that \f3#define\fPs
all the externally visible symbols to be \f3_\f2symbol\f1.
Then, have each file in the library include a \f3#pragma\fP:
.ti +10
\f3#pragma weak \f2symbol\f3 = _\f2symbol\f1
.ti +10
\f3#include <synonyms.h>\fP
.br
By doing this, each function or data will have a strong symbol in the
reserved name space, and a weak symbol in the unreserved name space.
Since all files in the library will include \f3synonyms.h\fP, all internal
references to \f2symbol\fP defined within the library will be changed to
references to \f3_\f2symbol\f1, which is in the reserved name space.
.PP
To conform to the third rule, each file in the library should include
all dependent library's \f2synonyms.h\fP file.
This will change all references to references to reserved name space.
.PP
\f3showrefs\fP with no options will show all symbols in the library that
are strong symbols in the unreserved name space.
If a library conforms to all three rules above, there will be no
such symbols.
It is best to run \f3showrefs\fP on DSOs rather than archives.
.PP
The following options are understood:
.TP 10
\f3-A\fP
Show ansi symbols.
This option is really only useful for \f3libc\fP.
.TP
\f3-a\fP
Print all instances of a symbol - normally, the output is run through
\f3sort -u\fP.
.TP
\f3-D\f2dir\fP
Display symbols associated with the source in the directory specified 
with this option. 
.TP
\f3-d\fP
Show all strong symbols in the unreserved name space.
.TP
\f3-e\fP
Show the external interface.
These are symbols (strong or weak) that are in the unreserved name space
(i.e. do not begin with an \f3_\fP).
This equivalent to using the \f3-Daw\fP options.
Note that this is NOT the same as a listing of all the external/global
symbols.
.TP
\f3-g\fP
List all global variables. 
.TP
\f3-h\fP
Print all \f4HIDDEN\fP symbols in a DSO.
.TP
\f3-i\fP
List the \f4implementation interface\fP which consists of all public  
symbols which comply with ANSI/POSIX naming conventions (__ or _Cap).
.TP
\f3-M\fP\f2manpath\fP
The path to search for manual pages.
By default \f4/usr/share/catman/p_man:/usr/share/man/p_man\fP is used.
Note that \f3MANPATH\fP is not used - it points to too many non-library
manual pages.
.TP
\f3-m\fP
Print a list of all public symbols that have man pages.
Information is derived from using the \f3-w\fP option to \f3man\fP(1).
If a public symbol begins with an \f3_\fP, a man page for the symbol
without the initial \f3_\fP is considered a match.
.TP
\f3-N\fP
List all \f4non-compliant\fP public symbols \f4without man pages\fP. 
None should exist if the implementation interfaces are named 
correctly and the application interfaces all have man pages. 
.TP
\f3-n\fP
Print a list of all public symbols without man pages.
.TP
\f3-P\fP
List public symbols and associated demangled names. Demangled names
are listed as leading comments, delimited by '#'.  This option is
provided for generation of common.exports files.
.TP
\f3-p\fP
Print the public interface. This consists of all symbols in a DSO that
aren't \f4HIDDEN\fP and aren't compiler private symbols.
This information is derived from running \f4elfdump -Dt\fP on the DSO.
.TP
\f3-r\fP
List the \f4raw applications interface\fP which consists of \f4all 
non-compliant symbols\fP with or without man pages. 
.TP
\f3-u\fP
Show all undefines.
\f3showrefs\fP attempts to perform a transitive closure within the
library, so this list should be those symbols the library uses that
it doesn't define.
.TP
\f3-v\fP
Add some verbosity to various output.
.TP
\f3-w\fP
Show weak symbols in the unreserved name space.
.SH "SEE ALSO"
\f3man\f1(1), \f3nm\f1(1), \f3elfdump\fP(1).




