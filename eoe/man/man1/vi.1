'\"!  tbl | mmdoc
'\"macro stdmacro
.nr X
.if \nX=0 .ds x} vi 1 "Editing Utilities" "\&"
.TH \*(x}
.SH NAME
vi, view, vedit \- screen-oriented (visual) display editors based on ex
.SH SYNOPSIS
.nf
\f3vi\f1 [\f3\-t\f1 tag] [\f3\-r\f1 file] [\f3\-L\f1] [\f3\-w\f1n] \c
[\f3\-R\f1] \c
[\f3\-x\f1] [\f3\-C\f1] [\f3\-c\f1 command] file ...
\f3view\f1 [\f3\-t\f1 tag] [\f3\-r\f1 file] [\f3\-L\f1] [\f3\-w\f1n] \c
[\f3\-R\f1] [\f3\-x\f1] [\f3\-C\f1] [\f3\-c\f1 command] file ...
\f3vedit\f1 [\f3\-t\f1 tag] [\f3\-r\f1 file] [\f3\-L\f1] [\f3\-w\f1n] \c
[\f3\-R\f1] [\f3\-x\f1] [\f3\-C\f1] [\f3\-c\f1 command] file ...
.fi
.SH DESCRIPTION
.I vi
(visual) is a display-oriented text editor based on
an underlying line editor
.IR ex (1).
It is possible to use
the command mode of
.I ex
from within
.I vi
and vice-versa.
The visual commands are described on this
manual page;
how to set options
(like automatically numbering lines
and automatically starting a new output line when you type carriage return)
and all \f2ex\f1 line editor
commands are described on the \f2ex\f1(1)
reference page.
.PP
When using
.IR vi ,
changes you make to the file are reflected in what you see on your
terminal screen.
The position of the cursor on the screen indicates
the position within the file.
.SS Invocation Options
The following invocation options are interpreted by
.I vi
(previously documented options are discussed in the
.B NOTES
section at the end of this manual page):
.TP 14
\f3\-t \f2tag\f1
Edit the file containing the
.I tag
and position the editor at its definition.
.TP
.BI \-r " file"
Edit
.I file
after an editor or system crash.
(Recovers the version of
.I file
that was in the buffer when the crash occurred.)
.TP
.B \-L
List the name of all files saved as the
result of an editor or system crash.
.TP
.BI \-w n
Set the default window size to
.IR n .
This is useful when using the editor over a slow speed line.
.TP
.B \-R
.B Readonly
mode; the
.B readonly
flag is set, preventing accidental overwriting of the file.
.TP
.B \-x
Encryption option; when used,
.I vi
simulates the
.B X
command of
.I ex
and prompts the user for a key.
This key is used to encrypt and decrypt
text using the algorithm of
.IR crypt (1).
The
.B X
command
makes an educated guess to determine whether text
read in is encrypted or not.
The temporary buffer file is encrypted also,
using a transformed version of the key
typed in for the
.B \-x
option.
See
.IR crypt (1).
.TP
.B \-C
Encryption option;
same as the
.B \-x
option, except that
.I vi
simulates the
.B C
command of
.IR ex .
The
.B C
command is like the
.B X
command of
.IR ex ,
except that
all text read in is assumed to have been encrypted.
.TP
.BI \-c "  command"
Begin editing by executing the specified editor
.I command
(usually a search or positioning command).
When used with
.IR -t ,
the specified command is given after moving to the tag.
.PP
The
.I file
argument indicates one or more files to be edited.
.PP
The
.I view
invocation is the same as
.I vi
except that the
.B readonly
flag is set.
.PP
The
.I vedit
invocation is intended for beginners.
It is the same as \f2vi\f1 except that the
.B report
flag is set to 1, the
.B showmode
and
.B novice
flags are set,
and
.B magic
is turned off.
These defaults make it easier to learn how to use \f2vi\f1.
.SS vi Modes
.TP 12
Command
Normal and initial mode.
Other modes return to command mode
upon completion.
\f3ESC\f1 (escape) is used to cancel a partial command.
.TP
Input
Entered by setting any of the following options:
.B a A i I o O
.B c C s S R .
Arbitrary text can then be entered.
Input mode is normally terminated with \f3ESC\f1 character,
or, abnormally, with an interrupt.
.TP
Last line
Reading input for \f3: / ?\fP or \f3!\fP; terminate
by typing a carriage return; an interrupt cancels
termination.
.SH "COMMAND SUMMARY"
In the descriptions,
CR stands for carriage return
and \f3ESC\f1 stands for the escape key.
.SS "Sample commands"
.TS
lw(1.5i)b lw(1.7i).
\(<- \(da \(ua \(->	arrow keys move the cursor
h j k l	same as arrow keys
i\f2text\f3ESC\fP	insert \f2text\f1
cw\f2new\fP\f3ESC\f1\fP	change word to \f2new\fP
ea\f2s\fP\f3ESC\fP	pluralize word (end of word; append \f3s\f1;
	escape from input state)
x	delete a character
dw	delete a word
dd	delete a line
3dd	delete 3 lines
u	undo previous change
ZZ	exit \f2vi\f1, saving changes
:q!\f3CR\fP	quit, discarding changes
/\f2text\f3CR\f1	search for \f2text\fP
^U ^D	scroll up or down
:\f2cmd\f3CR\f1	any \f2ex\f1 or \f2ed\f1 command
.TE
.SS "Counts before vi commands"
Numbers can be typed as a prefix to some commands.
They are interpreted in one of these ways.
.PP
.TS
lw(1.5i) lw(1.7i)b.
line/column number	z  G  |	
scroll amount	^D  ^U
repeat effect	\f1most of the rest\fP
.TE
.SS "Interrupting, canceling"
.TS
aw(0.75i)b aw(1.6i).
\f3ESC\f1	end insert or incomplete cmd
DEL	(delete or rubout) interrupts
.TE
.SS "File manipulation"
.TS
aw(0.75i)b aw(1.6i).
ZZ	if file modified, write and exit; otherwise, exit
:wCR	write back changes
:w!CR	forced write, if permission originally not valid
:qCR	quit
:q!CR	quit, discard changes
:e \f2name\f3CR	edit file \f2name\fP
:e!CR	reedit, discard changes
:e + \f2name\f3CR	edit, starting at end
:e +\f2n\f3CR	edit starting at line \f2n\f1
:e #CR	edit alternate file
:e! #CR	edit alternate file, discard changes
:w \f2name\f3CR	write file \f2name\fP
:w! \f2name\f3CR	overwrite file \f2name\fP
:shCR	run shell, then return
:!\f2cmd\f3CR	run \f2cmd\f1, then return
:nCR	edit next file in arglist
:n \f2args\f3CR	specify new arglist
^G	show current file and line
:tag \f2tag\f3CR	position cursor to \f2tag\fP (see \f2ctags\f1(1)), save position
:popCR	return to previous tag's position
.TE
.PP
In general, any
.I ex
or
.I ed
command (such as
.I substitute
or
.IR global )
can be typed, preceded by a colon and followed by a carriage return.
.SS "Positioning within file"
.TS
aw(0.75i)b aw(1.6i).
^F	forward screen
^B	backward screen
^D	scroll down half screen
^U	scroll up half screen
\f2n\f3G	go to the beginning of the specified line
	(end default), where \f2n\f1 is a line number
/\f2pat\f1	next line matching \f2pat\f1
?\f2pat\f1	previous line matching \f2pat\f1
n	repeat last \f3/\f1 or \f3?\f1 command
N	reverse last \f3/\f1 or \f3?\f1 command
/\f2pat\fP/+\f2n\fP	nth line after \f2pat\f1
?\f2pat\fP?\-\f2n\fP	nth line before \f2pat\f1
]]	next section/function
[[	previous section/function
(	beginning of sentence
)	end of sentence
{	beginning of paragraph
}	end of paragraph
%	find matching \f3( ) {\fP or \f3}\fP
^]	:tag command using word after the cursor as the tag
^T	return to previous tag's position (:pop command)
.TE
.SS "Adjusting the screen"
.TS
aw(0.75i)b aw(1.6i).
^L	clear and redraw window
^R	clear and redraw window if \f3^L\f1 is \(-> key
z\f3CR\fP	redraw screen with current line at top of window
z\-	redraw screen with current line at bottom of window
z.	redraw screen with current line at center of window
/\f2pat\fP/z\-\f3CR\fP	move \f2pat\fP line to bottom of window
z\f2n\fP.	use \f2n\fP-line window
^E	scroll window down 1 line
^Y	scroll window up 1 line
.TE
.SS "Marking and returning"
.TS
aw(0.5i)b aw(2.0i).
\(ga\(ga	move cursor to previous context
\(aa\(aa	move cursor to first non-white space in line
m\f2x\fP	mark current position with the ASCII lower-case letter \f2x\fP
\(ga\f2x\fP	move cursor to mark \f2x\fP
\(aa\f2x\fP	move cursor to first non-white space in line marked by \f2x\fP
.TE
.SS "Line positioning"
.TS
aw(0.5i)b aw(2.0i).
H	top line on screen
L	last line on screen
M	middle line on screen
+	next line, at first non-white
\-	previous line, at first non-white
\f3CR\fP	return, same as +
\(da \f1or\fP j	next line, same column
\(ua \f1or\fP k	previous line, same column
.TE
.SS "Character positioning"
.TS
aw(0.5i)b aw(2.0i).
^	first non white-space character
0	beginning of line
$	end of line
l \f1or\fP \(->	forward
h \f1or\fP \(<-	backward
^H	same as \f3\(<-\fP (backspace)
\f1space\fP	same as \f3\(->\fP (space bar)
f\f2x\fP	find next \f2x\fP
F\f2x\fP	find previous \f3x\f1
t\f2x\fP	move to character prior to next \f2x\fP
T\f2x\fP	move to character following previous \f2x\fP
;	repeat last \f3f F t\fP or \f3T\fP
,	repeat inverse of last \f3f F t\fP or \f3T\fP
\f2n\fP|	move to column \f2n\fP
%	find matching \f3( { )\fP or \f3}\f1
.TE
.SS "Words, sentences, sections, and paragraphs"
.TS
aw(0.5i)b aw(2.0i).
w	forward a word
b	back a word
e	end of word
)	to next sentence
}	to next paragraph
]]	next section/function
[[	previous section/function
(	back a sentence
{	back a paragraph
W	forward a blank-delimited word
B	back a blank-delimited word
E	end of a blank-delimited word
.TE
.PP
A paragraph is a superset of a section.
In addition to the
delimiters set by the
.I paragraph
and
.I section
variables, a section is defined as a line starting with a
.B {
or a
.BR formfeed .
A paragraph starts with those, a blank line, or the beginning of
a file.
These definitions are
.B XPG4
compliant, and somewhat different than earlier releases.
To use
the older definitions, set the variable
.IR oldparagraphs .
.ne 18
.SS "Corrections during insert"
.TS
aw(.5i)b aw(2.0i).
^H	erase last character (backspace)
^W	erase last word
\f1erase\fP	your erase character, same as \f3^H\fP (backspace)
\f1kill\fP	your kill character, erase this line of input
\e	quotes your erase and kill characters
\f3ESC\f1	ends insertion, back to command mode
DEL	interrupt, terminates insert mode
^D	backtab one character; reset left margin
	of \f2autoindent\fP
^^D	caret (^) followed by control-d (^D);
	backtab to beginning of line;
	do not reset left margin of \f2autoindent\f1
0^D	backtab to beginning of line;
	reset left margin of \f2autoindent\f1
^T	insert \f2shiftwidth\f1 spaces.
^V	quote non-printable character
.TE
.SS "Insert and replace"
.TS
aw(.5i)b aw(2.0i).
a	append after cursor
A	append at end of line
i	insert before cursor
I	insert before first non-blank
o	open line below
O	open above
r\f2x\fP	replace single char with \f2x\fP
R\f2text\f3ESC\f1\f1	replace characters
.TE
.SS "Operators"
Operators are followed by a cursor motion, and affect
all text that would have been moved over.
For example, since
.B w
moves over a word,
.B dw
deletes the word that would be moved over.
Double the operator, for example,
.B dd
to affect whole lines.
.PP
.TS
aw(0.5i)b aw(2.0i).
d	delete
c	change
y	yank lines to buffer
<	left shift
>	right shift
!	filter through command
.TE
.SS "Miscellaneous Operations"
.TS
aw(0.5i)b aw(2.0i).
C	change rest of line (\f3c$\f1)
D	delete rest of line (\f3d$\f1)
s	substitute chars (\f3cl\f1)
S	substitute lines (\f3cc\f1)
J	join lines
x	delete characters (\f3dl\f1)
X	delete characters before cursor (\f3dh\f1)
Y	yank lines (\f3yy\f1)
.TE
.SS "Yank and Put"
Put inserts the text most recently deleted or yanked;
however, if a buffer is named
(using the ASCII lower-case letters \f3a\fP\-\f3z\fP),
the text in that buffer is put instead.
.PP
.TS
aw(0.5i)b aw(2.0i).
3yy	yank 3 lines
3yl	yank 3 characters
p	put back text after cursor
P	put back text before cursor
"\f2x\fPp	put from buffer \f2x\fP
"\f2x\fPy	yank to buffer \f2x\fP
"\f2x\fPd	delete into buffer \f2x\fP
.TE
.SS "Undo, Redo, Retrieve"
.TS
aw(0.5i)b aw(2.0i).
u	undo last change
U	restore current line
\f3.\fP	repeat last change
"\f2d\fPp	retrieve \f2d\fP'th last delete
.TE
.SH AUTHOR
.I vi
and
.I ex
were developed by
The University of California,
Berkeley California,
Computer Science Division,
Department of Electrical Engineering and Computer Science.
.SH FILES
.PD 0
.TP 7
/tmp
default directory where temporary work files are placed;
it can be changed using the
.B directory
option
(see the
.I ex
.B set
command)
.TP
/usr/share/lib/terminfo/?/\(**
compiled terminal description database
.PD
.SH NOTES
Two options, although they continue to be supported,
have been replaced in the documentation by options that follow
the Command Syntax Standard (see
.IR intro (1)).
A
.B \-r
option that is not followed with an option-argument has been replaced by
.B \-L
and
.BI + command
has been replaced by
.B \-c
.IR command .
.PP
.I vi
has a limit of 15,687,678 editable lines.
Attempts to edit or create files
larger than this limit cause
.I vi
to terminate with an appropriate error message.
There is also a limit of 8192 bytes per line (languages with
multibyte characters may therefore have fewer than 8192 characters
per line; otherwise this is also the number of characters per line.
Files with longer lines are not edittable (or even viewable) with 
this editor.  Use of either
.IR fold (1)
or
.IR fmt (1)
on the file (while changing the contents) can be used to avoid
this limit.
.PP
Several changes have been made and bugs fixed for
.B XPG4
compliance.
See the discussion about
.I paragraphs
above, for one case.
Additionally, the
.B e
(move to end of word) command had bugs skipping over single
letter words, and skipped one to few words, when the current
position was the last letter in a word.
Formerly, the ordering
of the
.B \-c
and
.B \-t
options was not defined, and the command was executed before moving
to the tag.
The order is now reversed.
If a file is readonly, the 
.B !
override must now be used whenever you write the file, not just the first time.
.PP
Tampering with entries in
\f2/usr/lib/terminfo/?/\(**\f1
(for example, changing or removing an entry) can affect
programs such as
that expect the entry to be present and correct.
In particular,
removing the "dumb" terminal may cause unexpected problems.
.PP
The regular expression has been changed to XPG4 compliance, please
see regcomp(5).
.SH "SEE ALSO"
ctags(1),
ed(1),
edit(1),
ex(1),
regcomp(5),
vi(1).
.SH BUGS
.PP
In insert mode, software tabs using \f3^T\f1 work only immediately after the
.BR autoindent .
.PP
Left and right shifts on intelligent terminals do not make use of
insert and delete character operations in the terminal.
