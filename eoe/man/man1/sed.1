'\"macro stdmacro
.if n .pH g1.sed @(#)sed	31.3 of 7/8/86
.nr X
.if \nX=0 .ds x} SED 1 "Essential Utilities" "\&"
.if \nX=1 .ds x} SED 1 "Essential Utilities"
.if \nX=2 .ds x} SED 1 "" "\&"
.if \nX=3 .ds x} SED "" "" "\&"
.TH \*(x}
.SH NAME
sed \- stream editor
.SH SYNOPSIS
.B sed
.RB [ \-n ]
script [file ...]
.sp 1
.B sed
.RB [ \-n ]
.RB [ \-e
script]...
.RB [ \-f
script_file]... [file ...]
.SH DESCRIPTION
.I sed\^
copies the named
.I files\^
(standard input default) to the standard output,
edited according to a script of commands.
The 
.B \-e
option causes the script to be take from the
.IR script
option argument.
The
.B \-f
option causes the script to be taken from file
.IR script_file.
The scripts from the 
.B \-e
and
.B \-f
options accumulate.
If there is just one
.B \-e
option and no
.B \-f
options,
the flag
.B \-e
may be omitted.
The
.B \-n
option suppresses the default output.
.PP
.I sed
has two operating modes.  By default, 
.I sed
operates compatibly with certain earlier versions of 
System V 
.I sed\^.
If the
environment variable 
.B _XPG
is defined, and has a numeric value greater than 0,
.I sed
operates in conformance with the X/Open XPG4 specifications.
In the 
backward compatibility mode, when 
.B \-n
is not specified and the \f3"p"\fP
option to the \f3"s"\fP
command is used, the pattern space will be output only once,
no matter how many substitutions are made.
Also, the format of the output of the \f3"l"\fP
command will differ in some details from the XPG4 format.
.PP
Note that the null string is a part of the solutions when
_XPG numerical value > 0. i.e., sed -e 's/b*/a/' will insert
"a" at the beginning of any input as "b*" would match
an empty string. To substitute the first non-empty string consisting
of one or more letter b's with "a", then 
it should be: sed -e 's/bb*/a/'
.PP
A script consists of editing commands, one per line,
of the following form:
.PP
.RS
[ \|address \|[ \|, \|address \|] \|] \|function \|[ \|arguments \|]
.RE
.PP
Zero or more blank characters are accepted before the first address
and before command.
.PP
Each input 
.IR file
is a text file to be edited.  The 
.IR files
are read in the order given.
.PP
In normal operation,
.I sed\^
cyclically copies a line of input into a
.I pattern space\^
(unless there is something left after
a
.B D
command),
applies in sequence
all commands whose
.I addresses\^
select that pattern space,
and at the end of the script copies the pattern space
to the standard output (except when
.BR \-n
is specified)
and deletes the pattern space.
Whenever the pattern space is written to standard output or a named
file, sed will immediately follow it with a newline character.
.PP
Some of the commands use a
.I hold space\^
to save all or part of the
.I pattern space\^
for subsequent retrieval.
The 
.I hold
and 
.I pattern spaces\^
each hold at least 8192 bytes.
.PP
An
.I address\^
is either a decimal number that counts
input lines cumulatively across files, a
.B $
that
addresses the last line of input, or a context address,
i.e.,
a
.BI / "regular expression" /
in the style of
.IR ed (1)
modified thus:
.PP
.PD 0
.RS
.HP
In a context address, the construction
\f3\e\fP\f2?regular expression?\^\fP,
where
.IR ?
is any character,
is identical to
.BI / "regular expression" /\f1.\fP
Note that in the context address
.BR \exabc\exdefx ,
the second
.B x
stands for itself, so that the
regular expression is
.BR abcxdef .
.HP
The escape sequence
.B \en
matches a
new-line
.I embedded\^
in the pattern space.
.HP
A period
.B .
matches any character except the
.I terminal\^
new-line of the pattern space.
.HP
A command line with no addresses selects every pattern space.
.HP
A command line with
one address selects each pattern space that matches the address.
.HP
A command line with
two addresses selects the inclusive range from the first
pattern space that matches the first address through
the next pattern space that matches
the second.
(If the second address is a number less than or equal
to the line number first selected, only one
line is selected.)\ 
Thereafter the process is repeated, looking again for the
first address.
.HP
.PP
.B \e<
and
.BR \e>
are not currently supported.
.RE
.PD
.PP
Editing commands can be applied only to non-selected pattern
spaces by use of the negation function
.B !
(below).
.PP
In the following list of functions the
maximum number of permissible addresses
for each function is indicated in parentheses.
.PP
The
.I text\^
argument
consists of one or more lines,
all but the last of which end with
.B \e
to hide the
new-line.
Backslashes in text are treated like backslashes
in the replacement string of an
.B s
command,
and may be used to protect initial blanks and tabs
against the stripping that is done on
every script line.
The
.I rfile\^
or
.I wfile\^
argument
must terminate the command
line and must be preceded by exactly one blank.
Each
.I wfile\^
is created before processing begins.
There can be at most 10 distinct
.I wfile\^
arguments.
.PP
.PD 0
.TP 10
(1)\|\f3a\e\fP
.br
.ns
.TP
.I text\^
Append.
Place
.I text\^
on the output before
reading the next input line.
.TP
.RI (2)\|\f3b\fP " label\^"
Branch to the
.B :
command bearing the
.IR label .
If
.I label\^
is empty, branch to the end of the script.
.br
.ne 2.1v
.TP
(2)\|\f3c\e\fP
.br
.ns
.TP
.I text\^
Change.
Delete the pattern space.
With 0 or 1 address or at the end of a 2-address range, place
.I text\^
on the output.
Start the next cycle.
.TP
(2)\|\f3d\fP
Delete the pattern space.
Start the next cycle.
.TP
(2)\|\f3D\fP
Delete the initial segment of the
pattern space through the first new-line.
Start the next cycle.
.TP
(2)\|\f3g\fP
Replace the contents of the pattern space
by the contents of the hold space.
.TP
(2)\|\f3G\fP
Append the contents of the hold space to the pattern space.
.TP
(2)\|\f3h\fP
Replace the contents of the hold space by the contents of the pattern space.
.TP
(2)\|\f3H\fP
Append the contents of the pattern space to the hold space.
.TP
(1)\|\f3i\e\fP
.br
.ns
.TP
.I text\^
Insert.
Place
.I text\^
on the standard output.
.TP
(2)\|\f3l\fP
List the pattern space on the standard output in an
unambiguous form.
Non-printable characters are displayed in octal notation
and long lines are folded.
.TP
(2)\|\f3n\fP
Copy the pattern space to the standard output.
Replace the pattern space with the next line of input.
.TP
(2)\|\f3N\fP
Append the next line of input to the pattern space
with an embedded new-line.
(The current line number changes.)
.TP
(2)\|\f3p\fP
Print.
Copy the pattern space to the standard output.
.TP
(2)\|\f3P\fP
Copy the initial segment of the pattern space through
the first new-line to the standard output.
.TP
(1)\|\f3q\fP
Quit.
Branch to the end of the script.
Do not start a new cycle.
.TP
.RI (2)\|\f3r\fP " rfile\^"
Read the contents of
.IR rfile .
Place them on the output before reading
the next input line.
.TP
.RI (2)\|\f3s\fP/ "regular expression" / replacement / flags\^
Substitute the
.I replacement\^
string for instances of the
.I regular expression\^
in the pattern space.
Any character may be used instead of
.BR / .
For a fuller description see
.IR ed (1).
.I Flags\^
is zero or more of:
.RS
.TP 10
.B n
n= 1 - 512.
Substitute for just the n th occurrence of the
.I regular expression.\^
.TP
.B g
Global.
Substitute for all nonoverlapping instances of the
.I regular expression\^
rather than just the
first one.
.TP
.B p
Print the pattern space if a replacement was made.
.br
.ne 8
.TP
.BI "w " wfile
Write.
Append the pattern space to
.I wfile\^
if a replacement
was made.
.RE
.TP
.RI (2)\|\f3t\fP " label\^"
Test.
Branch to the
.B :
command bearing the
.I label\^
if any
substitutions have been made since the most recent
reading of an input line or execution of a
.BR t .
If
.I label\^
is empty, branch to the end of the script.
.TP
.RI (2)\|\f3w\fP " wfile\^"
Write.
Append the pattern space to
.IR wfile .
.TP
(2)\|\f3x\fP
Exchange the contents of the pattern and hold spaces.
.TP
.RI (2)\|\f3y\fP/ string1 / string2 /\^
Transform.
Replace all occurrences of characters in
.I string1\^
with the corresponding character in
.IR string2 .
The lengths of
.I
string1
and
.I string2\^
must be equal.
.TP
.RI (2)\f3!\fP " function\^"
Don't.
Apply the
.I function\^
(or group, if
.I function\^
is
.BR {\| )
only to lines
.I not\^
selected by the address(es).
.TP
.RI (0)\|\f3:\fP " label\^"
This command does nothing; it bears a
.I label\^
for
.B b
and
.B t
commands to branch to.
.TP
(1)\|\f3=\fP
Place the current line number on the standard output as a line.
.TP
(2)\|\f3{\fP
Execute the following commands through a matching
.B }
only when the pattern space is selected.
.TP
(0)\|
An empty command is ignored.
.TP
(0)\|\f3#\fP
If a
.B #
appears as the first character on a line of a script file,
then that entire line is treated as a comment, with one exception.
If the character after the
.B #
is an 'n', then the default output will be suppressed.
The rest of the line after
.BR # n
is also ignored.
A script file must contain at least one non-comment line.
.PD
.SH SEE ALSO
awk(1), ed(1), grep(1), regcomp(5).
.\"	@(#)sed.1	6.2 of 03/18/96
.Ee
'\".so /pubs/tools/origin.att1
