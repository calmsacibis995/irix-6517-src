'\"macro stdmacro
.if n .pH man1.rtmon-dump @(#)rtmon-dump 30.3 of 2/1/86
.TH RTMON-DUMP 1
.SH NAME
rtmon-dump \- dump the contents of events collect from rtmond
.SH SYNOPSIS
.B rtmon-dump
[
.I options
] [ file ]
.SH DESCRIPTION
.B rtmon-dump
prints binary event data collected from an
.BR rtmond (1)
server process using
.BR rtmon-client (1)
or
.BR padc (1).
Data can be read from a file or from the standard input.
By default,
.B rtmon-dump
displays all interesting events found in a file using
the same format as
.BR par (1).
Various options are provided for filtering which events
are printed and how they are displayed.
.SH OPTIONS
.TP
.BI \-d " usecs"
Use
.I usecs
for the threshold for displaying system calls as begin and end entries.
By default,
.B rtmon-dump
will display system call events as single line if there are no events
to display between the start and finish of the system call and if the
duration of the system is less than a nominal threshold (default 2
milliseconds).
If a system call takes longer than this threshold than it is displayed
as separate begin and end events so that it is easy to pick out
long-running calls.
.TP
.B \-f
Follow the growth of event data collected in a file.
If a file is specified on the command line and the
.B \-f
option is specified, then
.B rtmon-dump
will dump the contents of the file and then periodically
monitor it for new data.
In this situation
.B rtmon-dump
will never exit voluntarily; it must be terminated with an
interrupt signal (e.g. from a keyboard interrupt).
.TP
.B \-i
Display ``internal'' event as well as normal events.
This option causes the display of certain events that
are normally used only in decoding other events:  CPU
configuration, task names, process execs, etc.
.TP
.BI \-m " event-mask"
Display only events specified by
.IR event-mask .
An
.I "event mask"
specifies a set of events; it is a set of
.I "event classes"
with each class specified symbolically as one of the following:
.nf
.sp
.ta \w'framesched  'u
\fBName	Description\fP
all	All events (default)
alloc	Memory allocation 
.\"debug	...
disk	Disk i/o work
.\"framesched	...
intr	Hardware interrupts
io	I/O-related events (disk+intr)
netflow	Network I/O flow
netsched	Network I/O scheduling
network	Network-related events (netflow+netsched)
none	No events
profile	Kernel profiling
scheduler	Process and thread scheduler
signal	Signal delivery and reception
syscall	System calls and their arguments
task	Process and thread scheduling
taskproc	Process scheduling (system threads are not included)
vm	Virtual memory operation
.sp
.fi
Event class names are case insensitive; i.e. ``SIGNAL'' is interpreted
the same as ``signal''.
Multiple event classes may be included by using a ``+'', ``|'', or ``,''
symbol to separate the names.
Event classes may be excluded by using a ``-'' to separate the name.
For example, ``network+io-disk'' indicates all network and i/o events
should be included except for disk-related events.
In addition to the above names, a number may be used
to specify a value, where the various events are selected
by bits in the value, as defined in ``<sys/rtmon.h>''.
.TP
.B \-O
Print unrecognized event data in octal instead of decimal.
.TP
.B \-x
Print unrecognized event data in hexadecimal instead of decimal.
.TP
.BI \-p " cpu-list"
Display only events from certain CPUs.
CPUs are specified as a comma-separated list of CPU numbers or
range of CPU numbers.
CPUs are numbered starting at zero.
For example, 
.BI \-p " 1,4-7,11"
means processors 1, 4, 5, 6, 7, and 11.
An open-ended range
is interpreted as all CPUs to the maximum CPU number; e.g.
.IR 2-
on an 8-processor system is the same as
.IR 2-7 .
The CPU list must be one string with no white space.
By default,
.B rtmon-dump
displays events from all CPUs.
.TP
.B \-r
Display event decoding; display all events as raw data.
.TP
.B \-u
Display event times as milliseconds with a microsecond fraction
and show the number of microseconds between displayed events.
.TP
.B \-v
Enable verbose output.
.SH "SEE ALSO"
.BR padc (1),
.BR par (1),
.BR rtmond (1),
.BR rtmon_log_user_tstamp (3)
