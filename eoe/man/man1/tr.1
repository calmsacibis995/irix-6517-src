.if n .pH 1/gen/tr @(#)tr	43.4 of 3/18/93
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.\" Copyright 1990, 1989 AT&T
.TH tr 1
.SH NAME
\f4tr\f1 \- translate characters
.SH SYNOPSIS
.nf
.ft 4
tr [-cds] [\f2string1\fP [\f2string2\fP]] 
.ft 1
.ft 4
tr [-cs] \f2string1\fP \f2string2\fP 
.ft 1
.ft 4
tr -s[-c] \f2string1\fP
.ft 1
.ft 4
tr -d[-c] \f2string1\fP
.ft 1
.ft 4
tr -ds[-c] \f2string1\fP \f2string2\fP 
.ft 1
.fi
.SH DESCRIPTION
\f4tr\fP
copies the standard input to the standard output with 
substitution or deletion of selected characters.
Input characters found in 
\f2string1\f1
are mapped into the corresponding characters of
\f2string2\f1.
\f4tr\f1 processes supplementary code set characters
according to the locale specified in the \f4LC_CTYPE\fP
environment variable [see \f4LANG\fP on \f4environ\fP(5)].
Searches and translations are performed
on characters, not bytes.
.PP
The following options are supported:
.RS 0
.TP 8
\f4-c\f1
Complements the set of characters in
\f2string1\f1
with respect to the universe of characters
whose
codes are 001 through 377 octal.
.TP
\f4-d\f1
Deletes all input characters in
\f2string1\f1.
.TP
\f4-s\f1
Squeezes all strings of repeated output characters that are
in 
\f2string2\f1
to single characters.
.RE
.PP
The following abbreviation conventions may be used
to introduce ranges of characters or repeated characters into
the strings:
.RS 0
.TP 8
\f4[a-z]\f1
Stands for the string of characters whose
ASCII
codes run
from character
\f4a\f1
to character
\f4z\f1,
inclusive.
.TP
\f4[a\(**\f2n\fP]\f1
Stands for \f2n\fP repetitions of \f4a\fP.
If the first digit of
\f2n\f1
is
\f40\f1,
\f2n\f1
is considered octal; otherwise,
\f2n\f1
is taken to be decimal.
A zero or missing
\f2n\f1
is taken to be huge;
this facility is useful for padding
\f2string2\f1.
.RE
.PP
The escape character
\f4\e\f1
may be used as in
the shell
to remove special meaning from any character in a string.
In addition,
\f4\e\f1
followed by 1, 2, or 3 octal digits stands for the
character whose
code is given by those digits.
When octal notation with the backslash (\e) escape character
is used,
a backslash is placed before each byte of multibyte characters.
.SH "EXTENDED DESCRIPTION"
The operands \f2string1\f1 and \f2string2\f1 (if specified) define two arrays 
of characters. The constructs in the following list can be used to specify 
characters or single-character collating elements. If any of the constructs 
result in multi-character collating elements, \f4tr\f1 will exclude, without a 
diagnostic, those multi-character elements from the resulting array.
.RS 0
.TP 8
\f4character\f1
Any character not described by one of the conventions below represents itself.
.TP
\f4\eoctal\f1
Octal sequences can be used to represent characters with specific coded values.
An octal sequence consists of a backslash followed by the longest sequence of 
one-, two-  or three-octal-digit characters (01234567). The sequence causes the
character whose encoding is represented by the one-, two- or three-digit octal 
integer to be placed into the array. If the size of a byte on the system is 
greater than nine bits, the valid escape sequence used to represent a byte is 
implementation-dependent. Multi-byte characters require multiple, concatenated 
escape sequences of this type, including the leading \f4\e\f1 for each byte.
.TP
\f4\echaracter\f1
The backslash-escape sequences (\f4\e, \ea, \eb, \ef, \en, \er, \et, \ev\f1)
are supported.  The results of using any other character, other than an octal 
digit, following the backslash are unspecified.
.TP
\f4c-c\f1
Represents the range of collating elements between the range endpoints, 
inclusive, as defined by the current setting of the LC_COLLATE locale category.
The starting endpoint must precede the second endpoint in the current collation
order. The characters or collating elements in the range are placed in the 
array in ascending collation sequence.
.TP
\f4[:class:]\f1
Represents all characters belonging to the defined character class, as defined 
by the current setting of the LC_CTYPE locale category. The following character
class names will be accepted when specified in \f2string1\f1:
.ft 4
alnum, alpha, blank, cntrl, digit, graph, lower, print, punct, space, upper,
xdigit
.ft 1
.sp
In addition, character class expressions of the form \f4[:name:]\f1 are 
recognised in those locales where the name keyword has been given a charclass 
definition in the LC_CTYPE category. 
.sp
When both the \f4-d\f1 and \f4-s\f1 options are specified, any of the character
class names will be accepted in \f2string2\f1. Otherwise, only character class 
names \f4lower\f1 or \f4upper\f1 are valid in \f2string2\f1 and then only if 
the corresponding character class (\f4upper\f1 and \f4lower\f1, respectively) 
is specified in the same relative position in \f2string1\f1. Such a 
specification is interpreted as a request for case conversion. When 
\f4[:lower:]\f1 appears in \f2string1\f1 and \f4[:upper:] \f1appears in 
\f2string2\f1, the arrays will contain the characters from the \f4toupper\f1 
mapping in the LC_CTYPE category of the current locale. When \f4[:upper:]\f1 
appears in \f2string1\f1 and \f4[:lower:]\f1 appears in \f2string2\f1, the 
arrays will contain the characters from the \f4tolower\f1 mapping in the 
LC_CTYPE category of the current locale. The first character from each mapping
pair will be in the array for \f2string1\f1 and the second character from each
mapping pair will be in the array for \f2string2\f1 in the same relative 
position.
.sp
Except for case conversion, the characters specified by a character class 
expression are placed in the array in an unspecified order.
.sp
If the name specified for \f2class\f1 does not define a valid character 
class in the current locale, the behaviour is undefined.
.TP
\f4[=equiv=]\f1
Represents all characters or collating elements belonging to the same 
equivalence class as \f2equiv\f1, as defined by the current setting of the 
LC_COLLATE locale category. An equivalence class expression is allowed only in
\f2string1\f1, or in \f2string2\f1 when it is being used by the combined 
\f4-d\f1 and \f4-s]\f1 options. The characters belonging to the equivalence 
class are placed in the array in an unspecified order.
.TP
\f4[x*n]\f1
Represents \f2n\f1 repeated occurrences of the character \f2x\f1. Because this 
expression is used to map multiple characters to one, it is only valid when it 
occurs in \f2string2\f1. If \f2n\f1 is omitted or is zero, it is interpreted as
large enough to extend the \f2string2\f1-based sequence to the length of the
\f2string1\f1-based sequence. If \f2n\f1 has a leading zero, it is interpreted 
as an octal value. Otherwise, it is interpreted as a decimal value.
.RE
.PP
When the \f4-d\f1 option is not specified:
.PP
Each input character found in the array specified by \f2string1\f1 is replaced 
by the character in the same relative position in the array specified by 
\f2string2\f1. When the array specified by \f2string2\f1 is shorter that the 
one specified by \f2string1\f1, the results are unspecified.
.PP
If the \f4-c\f1 option is specified, the complements of the characters 
specified by \f2string1\f1 (the set of all characters in the current character 
set, as defined by the current setting of LC_CTYPE, except for those actually 
specified in the \f2string1\f1 operand) are placed in the array in ascending 
collation sequence, as defined by the current setting of LC_COLLATE.
.PP
Because the order in which characters specified by character class expressions 
or equivalence class expressions is undefined, such expressions should only be 
used if the intent is to map several characters into one. An exception is case 
conversion, as described previously.
.PP
When the \f4-d\f1 option is specified:
.PP
Input characters found in the array specified by \f2string1\f1 will be deleted.
.PP
When the \f4-c\f1 option is specified with \f4-d\f1 , all characters except 
those specified by \f2string1\f1 will be deleted. The contents of \f2string2\f1
will be ignored, unless the \f4-s\f1 option is also specified.
.PP
The same string cannot be used for both the \f4-d\f1 and the \f4-s\f1 option; 
when both options are specified, both \f2string1\f1 (used for deletion) and 
\f2string2\f1 (used for squeezing) are required.
.PP
When the \f4-s\f1 option is specified, after any deletions or translations have
taken place, repeated sequences of the same character will be replaced by one 
occurrence of the same character, if the character is found in the array 
specified by the last operand. If the last operand contains a character class, 
such as the following example:
.sp
.ft 4
    tr -s '[:space:]'
.ft 1
.sp
the last operand's array will contain all of the characters in that character 
class. However, in a case conversion, as described previously, such as:
.sp
.ft 4
    tr -s '[:upper:]' '[:lower:]'
.ft 1
.sp
the last operand's array will contain only those characters defined as the 
second characters in each of the \f4toupper\f1 or \f4tolower\f1 character 
pairs, as appropriate.
.sp
An empty string used for \f2string1\f1 or \f2string2\f1 produces undefined 
results.
.SH "EXAMPLES"
The following example creates a list of all
the words in \f2file1\fP one per line in \f2file2\fP,
where a word is taken to be a maximal string of alphabetics.
The strings are quoted
to protect the special characters from interpretation by the shell;
012 is the
ASCII
code for newline.
.PP
.sp
.RS
.nf
.ft 4
tr -cs "[A-Z][a-z]" "[\\012\(**]" < \f2file1\fP > \f2file2\fP
.ft 1
.fi
.sp 0.4
.RE
.PP
The following example creates a list of all words in \f2file1\f1 one per line 
in \f2file2\f1, where a word is taken to be a maximal string of letters.
.sp
.RS
.nf
.ft 4
tr -cs "[:alpha:]" "[\\n*]" < \f2file1\fP > \f2file2\fP
.ft 1
.fi
.sp 0.4
.RE
.PP
The next example translates all lower-case characters in \f2file1\f1 to 
upper-case and writes the results to standard output.
.sp
.RS
.nf
.ft 4
tr "[:lower:]" "[:upper:]" < \f2file1\f1
.ft 1
.fi
.sp 0.4
.RE
Note that the caveat expressed in the corresponding Issue 3 example is no 
longer in effect. This case conversion is now a special case that employs the
\f4tolower\f1 and \f4toupper\f1 classifications, ensuring that proper mapping 
is accomplished (when the locale is correctly defined).
.PP
This example uses an equivalence class to identify accented variants of the 
base character e in \f2file1\f1, which are stripped of diacritical marks and 
written to \f2file2\f1. 
.sp 0.4
.RS
.nf
.ft 4
tr "[=e=]" e < \f2file1\fP > \f2file2\fP
.ft 1
.fi
.sp 0.4
.RE
.SH "EXIT STATUS"
The following exit values are returned:
.sp
.RS
.nf
     0   All input was processed successfully.
    >0   An error occurred.
.fi
.sp 0.4
.RE
.SH "APPLICATION USAGE"
If necessary, \f2string1\f1 and \f2string2\f1 can be quoted to avoid pattern 
matching by the shell.
.PP
If an ordinary digit (representing itself) is to follow an octal sequence, 
the octal sequence must use the full three digits to avoid ambiguity.
.PP
When \f2string2\f1 is shorter than \f2string1\f1, a difference results between 
historical System V and BSD systems. A BSD system will pad \f2string2\f1 with 
the last character found in \f2string2\f1.  Thus, it is possible to do the 
following:
.sp
.RS
.nf
.ft 4
tr 0123456789 d
.ft 1
.fi
.RE
.sp 0.4
which would translate all digits to the letter \f2d\f1. Since this area is 
specifically unspecified in the document, both the BSD and System V behaviours 
are allowed, but a portable application cannot rely on the BSD behaviour. It 
would have to code the example in the following way:
.sp
.RS
.nf
.ft 4
tr 0123456789 '[d*]'
.ft 1
.fi
.RE
.sp 0.4
It should be noted that, despite similarities in appearance, the string 
operands used by \f4tr\f1 are not regular expressions.
.PP
NUL characters can be stripped by using \f4tr -d '\e000'\f1.
.SH FILES
.RS 0
.TP
\f4/usr/lib/locale/\f2locale\fP/LC_MESSAGES/uxcore.abi\f1
language-specific message file [See \f4LANG\fP on \f4environ\f1(5).]
.RE
.SH "REFERENCES"
\f4ascii\fP(5),
\f4ed\fP(1), 
\f4sh\fP(1)
.SH NOTICES
\f4tr\f1 will not handle
ASCII
\f4NUL\f1
in
\f2string1\f1
or
\f2string2\f1;
it always deletes
\f4NUL\f1
from input.
