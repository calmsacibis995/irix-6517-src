'\"macro stdmacro
.if n .pH g1.m4 @(#)m4	41.5 of 5/26/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.if t .ds ' \h@.05m@\s+4\v@.333m@\'\v@-.333m@\s-4\h@.05m@
.if n .ds ' '
.if t .ds ` \h@.05m@\s+4\v@.333m@\`\v@-.333m@\s-4\h@.05m@
.if n .ds ` `
.nr X
.if \nX=0 .ds x} m4 1 "Enhanced Programming Utilities" "\&"
.if \nX=1 .ds x} m4 1 "Enhanced Programming Utilities"
.if \nX=2 .ds x} m4 1 "" "\&"
.if \nX=3 .ds x} m4 "" "" "\&"
.TH \*(x}
.SH NAME
\f4m4\f1 \- macro processor
.SH SYNOPSIS
\f4m4 [\f2options\f4] [\f2files\f4] \f1
.SH DESCRIPTION
The
\f4m4\fP
command is a macro processor
intended as a front end for C, assembler, and other languages.
Each of the argument files is processed in order;
if there are no files, or if a file name is
\f4\-\f1,
the standard input is read.
The processed text is written on the standard output.
\f4m4\f1 processes supplementary code set characters
in comments and literals
according to the locale specified in the \f4LC_CTYPE\fP
environment variable [see \f4LANG\fP on \f4environ\fP(5)].
.PP
The options and their effects are as follows:
.TP 8
\f4\-e\f1
Operate interactively.
Interrupts are ignored and the output is unbuffered.
.TP
\f4\-s\f1
Enable line sync output for the C preprocessor
\f1(\f4#\f1line .\|.\|.\|)
.TP
\f4\-B\f2int\^\f1
Change the size of the push-back and argument collection
buffers from the default of 4,096.
.TP
\f4\-H\f2int\^\f1
Change the size of the symbol table hash array from the
default of 199.
The size should be prime.
.TP
\f4\-S\f2int\^\f1
Change the size of the call stack from the default of 100 slots.
Macros take three slots, and non-macro arguments take one.
.TP
\f4\-T\f2int\^\f1
Change the size of the token buffer from the default of 512 bytes.
.PP
To be effective, the above flags must appear before any
file names and before any
\f4\-D\f1
or
\f4\-U\f1
flags:
.TP 1i
\f4\-D\fP\f2name\^\fP[\f4=\fP\f2val\^\fP]
Defines
.I name\^
to
\f2val\fP
or to null in
\f2val\fP's
absence.
.TP
\f4\-U\f2name\^\f1
undefines
.IR name .
.PP
Macro calls
have the form:
.PP
.RS
\f2name\f1(\f2arg1\f1,\f2arg2\f1, .\|.\|., \f2argn\f1)
.RE
.PP
The
\f4(\f1
must immediately follow the name of the macro.
If the name of a defined macro is not followed by a
\f4(\f1,
it is deemed to be a call of that macro with no arguments.
Potential macro names consist of alphanumeric characters
and underscore
(\|\f4_\f1\|),
where the first character is not a digit.
.PP
Leading unquoted blanks, tabs, and new-lines are ignored while collecting arguments.
Left and right single quotes are used to quote strings.
The value of a quoted string is the string stripped of the quotes.
.PP
When a macro name is recognized,
its arguments are collected by searching for a matching right
parenthesis.
If fewer arguments are supplied than are in the macro definition,
the trailing arguments are taken to be null.
Macro evaluation proceeds normally during the collection of the arguments,
and any commas or right parentheses
that happen to turn up within the value of a nested
call are as effective as those in the original input text.
After argument collection,
the value of the macro is pushed back onto the input stream
and rescanned.
.PP
\f4m4\fP
makes available the following built-in macros.
These macros may be redefined, but once this is done the
original meaning is lost.
Their values are null unless otherwise stated.
.TP 13
\f4define\f1
the second argument is installed as the value of the macro
whose name is the first argument.
Each occurrence of
\f4$\f2n\^\f1
in the replacement text,
where
.I n\^
is a digit,
is replaced by the
.IR n -th
argument.
Argument 0 is the name of the macro;
missing arguments are replaced by the null string;
\f4$#\f1
is replaced by the number of arguments;
\f4$\(**\f1
is replaced by a list of all the arguments separated by commas;
\f4$@\f1
is like
\f4$\(**\f1,
but each argument is quoted (with the current quotes).
.TP
\f4undefine\f1
removes the definition of the macro named in its argument.
.TP
\f4defn\f1
returns the quoted definition of its argument(s).
It is useful for renaming macros, especially built-ins.
.TP
\f4pushdef\f1
like \f4define\f1,
but saves any previous definition.
.TP
\f4popdef\f1
removes current definition of its argument(s),
exposing the previous one, if any.
.TP
\f4ifdef\f1
If the first argument to the ifdef macro is defined and it is not defined to
be zero, the defining text is the second argument. Otherwise, the defining 
text is the third argument, if specified, or the null string, if not.
The word
\f4unix\f1
is predefined.
.TP
\f4shift\f1
returns all but its first argument.
The other arguments are quoted and pushed back with
commas in between.
The quoting nullifies the effect of the extra scan that
will subsequently be performed.
.TP
\f4changequote\f1
change quote symbols to the first and second arguments.
The symbols may be up to five characters long.
\f4changequote\f1
without arguments restores the original values
(that is, \f4\*`\|\*'\f1).
.TP
\f4changecom\f1
change left and right comment markers from the default
\f4#\f1
and new-line.
With no arguments, the comment mechanism is effectively
disabled.
With one argument, the left marker becomes the argument and
the right marker becomes new-line.
With two arguments, both markers are affected.
Comment markers may be up to five characters long.
.TP
\f4divert\f1
\f4m4\fP
maintains 10 output streams,
numbered 0-9.
The final output is the concatenation of the streams
in numerical order;
initially stream 0 is the current stream.
The
\f4divert\f1
macro changes the current output stream to its (digit-string)
argument.
Output diverted to a stream other than 0 through 9
is discarded.
.TP
\f4undivert\f1
causes immediate output of text from diversions named as
arguments, or all diversions if no argument.
Text may be undiverted into another diversion.
Undiverting discards the diverted text.
.TP
\f4divnum\f1
returns the value of the current output stream.
.TP
\f4dnl\f1
reads and discards characters up to and including the next new-line.
.TP
\f4ifelse\f1
has three or more arguments.
If the first argument is the same string as the second,
then the value is the third argument.
If not, and if there are more than four arguments, the process is repeated with arguments 4, 5, 6 and 7.
Otherwise, the value is either the fourth string, or, if it is not present,
null.
.TP
\f4incr\f1
returns the value of its argument incremented by 1.
The value of the argument is calculated
by interpreting an initial digit-string as a decimal number.
.TP
\f4decr\f1
returns the value of its argument decremented by 1.
.TP
\f4eval\f1
evaluates its argument as an arithmetic expression, using 32-bit arithmetic.
Operators include
\f4+\f1,
\f4\-\f1,
\f4\(**\f1,
\f4/\f1,
\f4%\f1,
\f4\(**\(**\f1
(exponentiation),
bitwise
\f4&\f1,
\(bv,
\f4^\f1,
and
\f4~\f1;
relationals; parentheses.
Octal and hex numbers may be specified as in C.
The second argument specifies the radix for the result;
the default is 10.
The third argument may be used to specify the minimum number
of digits in the result.
.TP
\f4len\f1
returns the number of characters in its argument.
.TP
\f4index\f1
returns the position in its first argument where the second argument begins (zero origin),
or \-1 if the second argument does not occur.
.TP
\f4substr\f1
returns a substring of its first argument.
The second argument is a zero origin
number selecting the first character;
the third argument indicates the length of the substring.
A missing third argument is taken to be large enough to extend to
the end of the first string.
.TP
\f4translit\f1
transliterates the characters in its first argument
from the set given by the second argument to the set given by the third.
No abbreviations are permitted.
.TP
\f4include\f1
returns the contents of the file named in the argument.
.TP
\f4sinclude\f1
is identical to \f4include\f1,
except that it
says nothing if the file is inaccessible.
.TP
\f4syscmd\f1
executes the
UNIX System command given in the first argument.
No value is returned.
.TP
\f4sysval\f1
is the return code from the last call to
\f4syscmd\f1.
.TP
\f4maketemp\f1
fills in a string of
\f4XXXXX\f1
in its argument with the current process
.SM ID\*S.
.TP
\f4m4exit\f1
causes immediate exit from
\f4m4\fP.
Argument 1, if given, is the exit code;
the default is 0.
.TP
\f4m4wrap\f1
The first argument will be processed when EOF is reached. If the m4wrap macro
is used multiple times, the arguments specified will be processed in the order
in which the m4wrap macros were processed.
.TP
\f4errprint\f1
prints its argument
on the diagnostic output file.
.TP
\f4dumpdef\f1
prints current names and definitions,
for the named items, or for all if no arguments are given.
.TP
\f4traceon\f1
with no arguments, turns on tracing for all macros
(including built-ins).
Otherwise, turns on tracing for named macros.
.TP
\f4traceoff\f1
turns off trace globally and for any macros specified.
Macros specifically traced by
\f4traceon\f1
can be untraced only by specific calls to
\f4traceoff\f1.
.SH SEE ALSO
\f4as\fP(1),
\f4cc\fP(1)
.\"	@(#)m4.1	6.2 of 9/2/83
.Ee
