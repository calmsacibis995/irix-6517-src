'\"macro stdmacro
.nr X
.if \nX=0 .ds x} PAR 1 "" "\&"
.if \nX=1 .ds x} PAR 1 ""
.if \nX=2 .ds x} PAR 1 "" "\&"
.if \nX=3 .ds x} PAR "" "" "\&"
.TH \*(x}
.SH NAME
\f4par\fP \- process activity reporter / truss-like system call tracer
.SH SYNOPSIS
\f4par\f1
[\f4report-options\f1\^]
[\f4collection-options\f1\^]
[\f2cmd args ...\f1\^]
.sp
\f4par\f1
[\f4report-options\f1\^]
[\f4collection-options\f1\^]
[\f4\-p \f2pid\f1\^]
[\f4\-p \f2...\f1\^]
.sp
\f4par\f1
[\f4report-options\f1\^]
[\f4collection-options\f1\^]
[\f4\-t \f2time\f1\^]
.sp
\f4par\f1
[\f4report-options\f1\^]
.SH DESCRIPTION
\f4par\fP
is a system utility program that reports on system call and
scheduling activity for one or more processes.
\f4par\fP
can be used to trace the activity of a single process,
a related group of processes, or the system as a whole.
See the \f4EXAMPLES\fP section near the end for some examples
on how par is commonly used.
.PP
When tracing system calls, \f4par\fP(1) prints a report showing
all system calls made by the subject processes complete with
arguments and return values.
In this mode, \f4par\fP(1) also reports all signals delivered
to the subject processes.
When tracing scheduler actions, \f4par\fP(1) reports
all scheduling events taking place in the system during the
measurement period.  The report shows each time a process is
put on a run queue, started on a processor, and descheduled
from a processor.
All scheduling events are timestamped and, when available,
include the reason for the action.
.PP
\f4par\fP(1) works by processing the output of \f4padc\fP(1).
This can be done in two ways:  \f4padc\fP can be run separately
and the output saved in a file (to be fed to \f4par\fP as a
separate operation), or \f4padc\fP can be invoked by \f4par\fP
to perform the data collection and reporting in one step.
\f4par\fP can generate different reports from
data collected by \f4padc\fP depending on the reporting
options that are specified.
The ability to generate different reports from a single
set of data is one reason that it is often desirable to run the
data collection as a separate step.
.PP
There are three things that need to be specified on the \f4par\fP
command line:
what information to report,
what data should be collected,
and
what objects are to be monitored.
\f4par\fP can be run without displaying any information (collection-only)
or without collecting any event data (report-only).
Objects to be monitored may be running processes or commands
that are started up specifically for the purpose of collecting
event data.
.PP
If an object is specified for monitoring (either a command to
launch or an existing process), but no data collection or reporting
options are specified, then \f4par\fP defaults to
collecting and reporting system call and signal data.
.PP
\f4Data Collection Options\fP
.PP
These options should only be supplied when event data is to
be collected by running a command or by tracing an already
running process or set of processes.
.TP 10
\f4\-s\fP
Collect system call and signal data for the
.B cmd
or those processes specified via the
.B \-p
option.  If neither are specified, system call and signal data for all
processes that you have permissions to access will be collected.
.TP
\f4\-r\fP
Collect scheduler activity data for the
.B cmd
or those processes specified via the
.B \-p
option.  If neither are specified, scheduler activity data for the entire
system will be collected.
.TP
\f4\-k\fP
Collect disk i/o activity data.
.TP
\f4\-i\fP
Inherit tracing to forked children of object processes.
.TP
\f4\-O \f2file\fP
Write raw event data to the specified \f2file\fP.
.PP
\f4Reporting Options\fP
.PP
Note that various options are meaningful only when the event data
includes relevant information.
For example, requesting a report on system call activity is useless
if no system call events are collected (with the \f4-s\fP option)
or none are present in a file of previously collected data.
.TP 10
\f4\-S\fP
Print a summary of system calls and signal counts.
.TP
\f4\-SS\fP
Print both the summary of system call activity and a
trace of each system call and signal action.
.TP
\f4\-Q\f2
Print a summary of scheduling work.
.TP
\f4\-QQ\f2
Print both the summary of scheduling work and a
trace of each scheduler operation.
.TP
\f4\-QQQ\f2
In addition to the detailed scheduling trace, print the contents
of the global run queue after each scheduler operation.
.\".TP
.\"\f4\-k\fP
.\"Print disk activity events together with system call and scheduler actions.
.TP
\f4\-n \f2syscall\fP
Show records for the specified system call, where the
system call is specified by name or number.
This option may be specified multiple times.
Specifying this option automatically enables detailed system
call reporting.
.TP
\f4\-e \f2syscall\fP
Exclude the specified system call from the report.
This option may be specified multiple times.
Specifying this option automatically enables detailed system
call reporting.
.PP
Other options that control the format and content
of reports are:
.TP 10
\f4\-A\fP
Show system call parameter data (e.g. from a \f4read\fP call)
in character format.
Non printable characters are output in hex.
Normally, \f4par\fP selects ASCII or binary format for
data according to the data content.
.TP
\f4\-a\fP \f2len\fP
Set the maximum number of bytes printed in character format for data
(e.g. from a \f4read\fP call) to \f2len\fP.
This value defaults to 30 bytes.
The larger of the value for this option and the \f4\-b\fP option is used
to inform \f4padc\fP, if appropriate, how much data to collect (see the
\f4\-I\fP option of \f4padc\fP).
The maximum value for this option is 4096 bytes.
.TP
\f4\-B\fP
Show system call parameter data (e.g. from a \f4read\fP call)
in hex binary format.
Normally, \f4par\fP selects ASCII or binary format for
data according to the data content.
.TP
\f4\-b\fP \f2len\fP
Set the maximum number of bytes printed in binary format for data
(e.g. from a \f4read\fP call) to \f2len\fP.
This value defaults to 16.
The maximum value for this option is 4096 bytes.
.TP
\f4\-c\f2
Do not print CPU numbers in detailed trace reports.
.TP
\f4\-d\f2
Show each system call as two entries: one for when the system call is
begun and a second when the system call completes.
Normally \f4par\fP displays system calls as a single line, showing
input arguments, output arguments and return values.
The time displayed is the time of the start of the system call.
This compaction is done unless the duration of the system call exceeds a
nominal threshold (25 microseconds by default).
With the \f4-d\fP option system calls are always displayed as
beginning and ending operations.
.TP
\f4\-l\fP
Show system call output in a long format that includes each
process name and the CPU on which it is run.
By default \f4par\fP will use this format whenever it
is needed to avoid confusion; e.g. when multiple processes might
appear in the report.
Otherwise, \f4par\fP uses a more compact format that does not
show the process name or CPU number.
This option is only useful when a detailed report is requested;
e.g. \f4-QQ\fP and/or \f4-SS\fP.
.TP
\f4\-o\fP \f2file\fP
Print all output (including errors) to \f4file\fP.
This is useful when monitoring a program that itself does output.
.TP
\f4\-P \f2pid\fP
List activity only for the process specified by \f2pid\fP.
Note that this is markedly different from the \f4\-p\fP \f2pid\fP option
that requests that the named \f2pid\fP be traced.
Thus one could request that processes 100 and 101 be traced,
but only report system calls for process 101.
This option is typically specified when \f4padc\fP has been
used to collect data on a number of processes \(em often
either by collecting for all processes on the
system or all processes descended from a specified process.
.TP
\f4\-u\f2
Print event times as milliseconds and microseconds since the
last displayed event.
.PP
\f4Object Specification\fP
.TP 10
\f4\-p \f2pid\fP
Trace the process specified by \f2pid\fP. 
If the \f4\-i\fP flag is specified then any child processes created
by \f2pid\fP will also be traced.
Multiple \f4\-p\fP options may be given to trace multiple processes.
In this mode, \f4padc\f1(1) is automatically invoked by \f4par\f1.
.TP 10
\f4\-t \f2time\fP
Terminate the trace after \f2time\fP seconds. 
Primarily useful when tracing the system as a whole.
.TP 10
\f4[\f2command arguments ...\^\f4]\f1
Run the specified command with tracing enabled.
If the \f4\-i\fP option is specified, any child processes that are
created by \f2command\fP will also be traced.
In this mode, \f4padc\f1(1) is automatically invoked by \f4par\f1.
.TP 10
\f2nothing\f1
If no specification of an object is given, all specified activity
will be traced for the system as a whole.
Note that only the superuser can trace the system as a whole.
In this mode, \f4padc\f1(1) is automatically invoked by \f4par\f1.
.PP 10
If no data collection options are specified and no object is
specified, \f4par\f1 will read standard input as output from \f4padc\f1
and report the data according to the reporting options selected.
.PP
.SH "INTERPRETING THE REPORTS"
.PP
\f4par\fP generates several different reports.
Summary reports, requested with the \f4\-S\fP and \f4\-Q\fP
options, are straightforward and are not described here.
Other reports provide a detailed listing of the event data;
they are composed of lines of the form:
.nf
.sp
.ti +.5i
\f2<time>\fPmS[\f2<cpu>\fP] \f2<name>\fP(\f2<pid>\fP): \f2...\fP
.fi
.sp
with the following explanations:
.TP 10
\f2<time>\fP
The time of the event in milliseconds relative to the start
of data collection.
If the \f4\-u\fP option is supplied, \f2<time>\fP will be
followed by the number of microseconds since the last event
(enclosed in parenthesis).
.TP 10
\f2<cpu>\fP
The CPU number the event was generated on.
This is displayed if a long listing is
requested with the \f4-l\fP option or
if there is more than one CPU in the system that data
is collected on.
The \f4\-c\fP option can be used to disable display of the CPU number.
.TP 10
\f2<name>\fP
The name of the process (as displayed by \f4ps\fP(1)).
This is only displayed for a long listing.
.TP 10
\f2<pid>\fP
The PID of the process.
This is only displayed for a long listing.
.PP
The remaining information that \f4par\fP prints depends on the type
of event that is being reported.
For system calls each line is of the form:
.nf
.sp
.ti +.5i
 ... : \f2<syscall>\fP(\f2<arg1>\fP, \f2<arg2>\fP, ..., \f2<argN>\fP) = \f2<result>\fP
.fi
.sp
with the following information:
.TP 10
\f2<syscall>\fP
The system call name.
If the system call being displayed is split into 2 events, the event
marking the end of the system call will have \f4END-\fP prepended to
the name.
See below for some help in decoding system call names.
\f4par\fP attempts to print an entire system call - input arguments,
output arguments, and error return on a single line.
It does not do this if the \f4\-d\fP option is given or if
another event needs to be reported between the
start and end of a call.
.TP 10
\f2<argN>\fP
The system call arguments.
Various amounts of decoding of arguments is done.
Some system calls have complex arguments that have
both input and output values.
If an entire system call is printed on one single line, these
input/output arguments have the words \f4IN:\fP or \f4OUT:\fP printed
before the decoding of the argument.
Some complex indirect parameters are displayed symbolically using their
C structure definition.
Note that not all indirect parameter values are available; some are not
returned by the operation system while others may not be copied out
because doing so would exceed the maximum amount of indirect data to
included in an event (see the \f4\-I\fP option for \f4padc\fP).
.TP 10
\f2<result>\fP
The error status or return value of the system call.
For system calls that simply return success or failure,
\f4par\fP prints \f4OK\fP for success, and the error value for failure.
System calls that return values have those values printed.
.PP
Since \f4par\fP's information comes straight from the operating
system at the system call level, some calls that \f4par\fP presents
may not seem to correspond to the calls that the application made.
This is because some system calls are implemented in runtime
libraries on top of more primitive system calls.
Some notable examples of this are:
.TP 10
\f4waitsys\fP
is the underlying system call for all wait-like calls.
Its arguments are the same as \f4waitid\fP(2) except that it takes as a
fifth argument a pointer to a \f2struct rusage\fP.
.TP
\f4?xstat\fP
These stat calls are the same as the application entry points except
that the first argument is a version number.
.TP 
\f4sigaction\fP
is used to implement all type signal routines.
It takes one additional parameter than the application entry point -
the address of the library handler that all signals funnel through.
.TP
\f4sigreturn\fP
is used to return a process from its signal handler to the previous context.
.TP
\f4sigpoll\fP
is used to implement \f4sigwaitrt\fP(3) and \f4sigtimedwait\fP(3).
.TP
\f4ERESTART\fP
is returned when a system call should be automatically restarted after
being interrupted by a signal (see \f4sigaction\fP).
This error is never actually returned to the user but \f4par\fP reports
the re-invocation of a system call as an error.
.PP
.SH EXAMPLES
.Ex
\f4par ls /\fP
.Ee
Display a system call trace and summary for the command 'ls /'.
(\f4par\fP
supplies the implicit \-sSS options because a command to launch was
specified without any reporting or collection options.):
.Ex
apache% par ls /
MISER      de         hosts      mnt        par.out    tmp        var
RTMON      debug      hw         ns         proc       tmp_mnt
TESTS      dev        lib        opt        proj       unix
bin        doouf      lib32      out.1      rtmon.out  unix.benf
build      etc        lib64      output.1   sbin       unix.orig
build11    ficus      miser      par        stand      usr
    0mS[  1] was sent signal SIGUSR1
    0mS[  3] received signal SIGUSR1 (handler 0x10002560)
    0mS[  3] END-pause() errno = 4 (Interrupted function call)
    1mS[  3] sigreturn(0x7fff2b40) OK
    1mS[  3] execve(./ls, 0x7fff2f6c, 0x7fff2f78)
  262mS[  3] END-execve() errno = 2 (No such file or directory)
  262mS[  3] execve(/usr/sbin/ls, 0x7fff2f6c, 0x7fff2f78) errno = 2 (No such file or directory)
  263mS[  3] execve(/usr/bsd/ls, 0x7fff2f6c, 0x7fff2f78) errno = 2 (No such file or directory)
  264mS[  3] execve(/sbin/ls, 0x7fff2f6c, 0x7fff2f78)
  274mS[  3] END-execve() OK
  274mS[  3] open(/lib32/rld, O_RDONLY, 04) = 3
  275mS[  3] read(3, <7f 45 4c 46 01 02 01 00 00 00 00 00 00 00 00 00>..., 512) = 512
  276mS[  3] elfmap(3, 0x7fff2d54, 2) = 0xfb60000
  276mS[  3] close(3) OK
  279mS[  3] getpagesize() = 16384
  279mS[  3] sysinfo(_MIPS_SI_PROCESSORS, 0x7fff2dc0, 257) = 43
  281mS[  3] open(/dev/zero, O_RDONLY, 0) = 3
  282mS[  3] mmap(0xfbd4000, 16384, PROT_WRITE|PROT_READ, MAP_PRIVATE, 3, 0) = 0xfbd4000
  282mS[  3] close(3) OK
  ...
.Ee
Note that output from the command is intermixed with the system call
report; the \f4\-o\fP option can be used to direct the report to a
file separately from any output generated by the command.
The report about the command receiving a SIGUSR1 signal is
expected; this is done as part of the normal procedure for starting
up a program with tracing.
Finally, note that many system call parameters are displayed
symbolically and that the \fIindirect value\fP of many parameters
is displayed; e.g. ``/lib32/rld'' and ``/dev/zero'' for open.
.Ex
\f4par -rsSSQQ -O ls.padc ls /\fP
.Ee
Report on system calls and scheduling activities for the command 'ls /',
and also record the raw event data in the file \f2ls.padc\fP.
.Ex
\f4par -o outfile -n open -n close ls\fP
.Ee
Trace only the open and close system calls.  Write the resulting
output to \f2outfile\fP.
Note that it is not necessary to specify \f4\-SS\fP options
since they are implied by the \f4\-n\fP option.
Also, the \f4\-s\fP
option is not required because system calls
are the default data to collect when a command is specified.
.Ex
\f4par -o outfile -i -t 30 -p 1
.Ee
Trace all processes started directly by process 1 (which is the 
\f3init\fP process, the ancestor of all user processes)
for thirty seconds, and store the report in the file \f2outfile\fP.
Note that the \f4\-i\fP option will cause only processes
newly created by \f3init\fP to be traced; i.e. it does not mark
all existing child processes for tracing.
.PP
.SH LIMITATIONS
To reduce system load, when collecting system call
event data, system calls executed by \f4padc\fP(1) and
\f4rtmond(1)\fP are not recorded.
This can lead to some inexplicable gaps when tracing complete system activity.
.PP
The process name associated with an event may be misleading.
This is because a process's name may change between the time an event
is generated and the time the event collection process (\f4rtmond\fP)
checks for the name.
For example, a process may generate events then exit before \f4rtmond\fP
is able to query the system for the process name.
In this case the events will show up as being associated with a process
without a name.
.SH "SEE ALSO"
\f4padc\fP(1),
\f4rtmond\fP(1).
