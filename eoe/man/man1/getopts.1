'\"macro stdmacro
.if n .pH g1.getopts @(#)getopts	30.14 of 7/9/86
.nr X
.if \nX=0 .ds x} GETOPTS 1 "Essential Utilities" "\&"
.if \nX=1 .ds x} GETOPTS 1 "Essential Utilities"
.if \nX=2 .ds x} GETOPTS 1 "" "\&"
.if \nX=3 .ds x} GETOPTS "" "" "\&"
.TH \*(x}
.if t .ds ' \h@.05m@\s+4\v@.333m@\'\v@-.333m@\s-4\h@.05m@
.if n .ds ' '
.if t .ds ` \h@.05m@\s+4\v@.333m@\`\v@-.333m@\s-4\h@.05m@
.if n .ds ` `
.SH NAME
getopts, getoptcvt \- parse command options
.SH SYNOPSIS
.BR getopts " optstring name [arg .\|.\|.]"
.PP
.BR /usr/lib/getoptcvt " [" \-b "] file"
.SH DESCRIPTION
.I getopts
is a built-in command to 
.IR sh (1)
used to parse positional parameters 
and to check for legal options.
It supports all applicable rules of the command syntax standard
(see Rules 3-10,
.IR intro\^ (1)).
It should be used in place of the
.IR getopt (1)
command.
See the
.BR \s-1WARNINGS\s0
section below.
.PP
.I optstring
must contain the option letters the command using
.I getopts
will recognize;
if a letter is followed by a colon, the option
is expected to have an argument, or group of arguments,
which must
be separated from it by white space.
.PP
Each time it is invoked,
.I getopts
will place the next option in the shell variable
.I name
and the index of the next argument to be processed
in the shell variable
.BR \s-1OPTIND\s0 .
Whenever the shell or a shell
procedure is invoked,
.B \s-1OPTIND\s0
is initialized to
.BR 1 .
.PP
When an option requires an option-argument,
.I getopts
places it in the
shell variable
.BR \s-1OPTARG\s0 .
.PP
If
an illegal option is encountered,
.B ?
will be placed in
.IR name\^ .
.PP
When the end of options is encountered,
.I getopts
exits with a non-zero
exit status.  The special option
.RB `` -- ''
may be used to delimit the end of the
options.
.PP
By default,
.I getopts
parses the positional parameters.  If extra arguments
.RI ( arg
\&.\|.\|.)
are given on the
.I getopts
command line,
.I getopts
will parse them instead.
.PP
.I /usr/lib/getoptcvt
reads the shell script in
.IR file\^ ,
converts it to use
.IR getopts\^ (1)
instead of
.IR getopt\^ (1),
and writes the results on the standard output.
.TP
.B \-b
the results of running
.I /usr/lib/getoptcvt
will be portable to earlier releases of the UNIX system.
.I /usr/lib/getoptcvt
modifies the shell script in
.I file 
so that when the resulting shell script is executed,
it determines at run time whether to invoke
.IR getopts (1)
or
.IR getopt (1).
.PP
So all new commands will adhere to the command syntax standard
described in
.IR intro\^ (1),
they should use
.IR getopts\^ (1)
or
.IR getopt\^ (3C)
to parse positional parameters and check for options that are legal
for that command
(see the
.BR \s-1WARNINGS\s0
section below).
.SH EXAMPLE
The following fragment of a shell program shows how one might process the arguments
for a command that can take the options
.B a
or
.BR b ,
as well as the option
.BR o ,
which requires an option-argument:
.PP
.RS
.nf
.ft 7
.ss 18
.ta +.5i +1i
while getopts abo: c
do
	case $c in
	a \(bv b)	FLAG=$c;;
	o)	OARG=$OPTARG;;
	\\?)	echo $USAGE
		exit 2;;
	esac
done
shift `expr $OPTIND \- 1`
.fi
.ta
.ss 12
.ftP
.RE
.PP
This code will accept any of the following as equivalent:
.PP
.RS
.nf
.ft 7
.ss 18
cmd \-a \-b \-o "xxx z yy" file
cmd \-a \-b \-o "xxx z yy" -- file
cmd \-ab \-o xxx,z,yy file
cmd \-ab \-o "xxx z yy" file
cmd \-o xxx,z,yy \-b \-a file
.fi
.ss 12
.ft P
.RE
.SH SEE ALSO
intro(1), sh(1),
getopt(3C)
.SH WARNINGS
Although
the following command syntax rule (see
.IR intro (1))
relaxations are permitted
under the current implementation,
they should not be used because they may not be supported
in future releases of the system.
As in the
.B \s-1EXAMPLE\s0
section above,
.B a
and
.B b
are options, and the option
.B o
requires an option-argument:
.PP
.RS
.ft 7
.nf
.ss 18
cmd \-aboxxx file  \f1(Rule 5 violation:  options with
.br
      option-arguments must not be grouped with other options)\fP
cmd \-ab \-oxxx file  \f1(Rule 6 violation:  there must be
      white space after an option that takes an option-argument)\fP	
.fi
.ss 12
.ft P
.RE
.PP
Changing the value of the shell variable
.B \s-1OPTIND\s0
or parsing different sets of arguments may lead to unexpected results.
.SH DIAGNOSTICS
.I getopts
prints an error message on
the standard error
when it encounters an option letter not included in
.IR optstring .
.\"	@(#)getopt.1	6.2 of 9/2/83
.Ee
'\".so /pubs/tools/origin.att
