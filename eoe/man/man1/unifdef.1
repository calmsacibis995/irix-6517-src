'\"macro stdmacro
.TH UNIFDEF 1 local "Silicon Graphics, Inc."
.SH NAME
unifdef \- strip or reduce ifdefs in C code
.SH SYNOPSIS
.B unifdef 
.RB [ \-D \f2name\fP ]
.RB [ \-D \f2name=string\fP ]
.RB [ \-U \f2name\fP ]
.RB [ \-o \f2output\fP ]
.RB [ -z ]
.RI [ input ...]
.SH DESCRIPTION
.I Unifdef 
reads C source files and prints all input lines
except those excluded by
.B \s-1#ifdef\s+1
constructs that refer to specified identifiers.
.PP
The
.B \-D
option defines
.I name
as a macro with the value 1, causing
.I unifdef
to simplify
.Ex 5
#ifdef \f2name\fP
\f2Included text\fP
#else
\f2Excluded text\fP
#endif
.Ee
.PP
to just
.Ex
\f2Included text\fP
.Ee
.PP
and contrariwise for
.BR \s-1#ifndef\s+1 .
.PP
The
.B \-U
option works like
.B \-D
except that
.I name
is undefined, so the
.B \s-1#ifdef\s+1
above would simplify to
.Ex
\f2Excluded text\fP
.Ee
.PP
.BI -D name=string
causes
.I unifdef
to replace occurrences of
.I name
with
.I string
when evaluating
.B \s-1#if\s0
and
.B \s-1#elif\s0
expressions.
For example,
.B "\s-1unifdef \-DBSD=43\s+1"
would rewrite
.Ex
#if BSD == 43
\f24.3BSD code\fP
#elif BSD == 42
\f24.2BSD code\fP
#endif
.Ee
.PP
as
.Ex
\f24.3BSD code\fP
.Ee
.PP
All
.B \s-1#ifdef\s+1
constructs that refer to names not defined with
.B \-D
or undefined with
.B \-U
are passed unchanged to output.
.I Unifdef
simplifies
.B \s-1#if\s+1
expressions that mix defined or undefined names with unknown names
to express operations on just the unknown names.
Thus 
.B "\s-1unifdef \-Dsgi\s+1"
would rewrite
.Ex
#if defined sgi && !defined KERNEL
.Ee
.PP
as
.Ex
#ifndef KERNEL
.Ee
.PP
and would preserve associated
.B \s-1#else\s+1
and
.B \s-1#endif\s+1
sections.
.I Unifdef
simplifies
.B \s-1#elif\s0
chains as if they consisted of
.B \s-1#if\s0
constructs nested within
.B \s-1#else\s0
sections.
For example,
.B "\s-1unifdef \-DBSD=43\s+1"
would rewrite
.Ex
#if SYSV
\f2System V code\fP
#elif BSD == 42
\f24.2BSD code\fP
#elif BSD == 43
\f24.3BSD code\fP
#elif XENIX
\f2Xenix code\fP
#endif
.Ee
.PP
as
.Ex
#if SYSV
\f2System V code\fP
#else
\f24.3BSD code\fP
#if XENIX
\f2Xenix code\fP
#endif
#endif
.Ee
.PP
.I Unifdef
rewrites
.B \s-1#else\s0
and
.B \s-1#endif\s0
lines to conform to ANSI C, by enclosing any tokens after these keywords
with comment delimiters.
For example,
.Ex
#ifdef DEBUG
\f2Debugging code\fP
#endif DEBUG
.Ee
.PP
would be transcribed as
.Ex
#ifdef DEBUG
\f2Debugging code\fP
#endif /* DEBUG */
.Ee
.PP
.I Unifdef
writes to standard output by default.
The
.B \-o
option may be used in lieu of shell redirection to specify an output file.
More important, the file specified by
.I output
may be identical to one of the
.I input
files, or to standard input if there are no arguments.
In this case,
.I unifdef
will safely overwrite the input file.
.PP
The
.B \-z
option causes
.I unifdef
to simplify or eliminate sections controlled by
.B \s-1#if\s+1
constructs that test constant integer expressions.
By default, constructs such as
.Ex 3
#if 0
\f2Excluded text\fP
#endif
.Ee
.PP
are left intact.
.SH AUTHOR
Brendan Eich, 03/16/89
.SH "SEE ALSO"
cc(1),
cpp(1).
