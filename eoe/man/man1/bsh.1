.nr X
.if \nX=0 .ds x} bsh 1 "Essential Utilities" "\&"
.TH \*(x}
.ds OK [
.ds CK ]
.SH NAME
\f4bsh, jsh\f1 \- shell, the standard/job control command programming language
.SH SYNOPSIS
.nf
\f4bsh\f1 [ \f3\-acefhiknprstuvx\f1 ] [ args ]
\f4jsh\f1 [ \f3\-acefhiknprstuvx\f1 ] [ args ]
.fi
.SH DESCRIPTION
\f3Note:\f1 This is the Bourne shell description. All references to 
.I sh
and
.I shell
pertain to
.I bsh
and all references below to
.I /usr/lib/rsh,
the restricted shell, no longer apply to the Bourne shell. (See \f4sh(1)\f1).
.PP
.I bsh
is a command programming language
that executes commands read from a terminal
or a file.
.PP
.I jsh
is an interface to the shell that provides all the functionality of
.I sh
and enables Job Control (see \f3Job Control\f1 below).
.PP
See
\f3Invocation\f1
below
for the meaning of arguments to the shell.
.PP
See \f3CAVEATS\f1 below for interaction with Korn shell builtins.
.SS Definitions
A
.I blank
is a tab or a space.
A
.I name
is a sequence of letters, digits, or underscores beginning with a letter
or underscore.
A
.I parameter
is a name, a digit, or any of the characters
.BR * ,
.BR @ ,
.BR # ,
.BR ? ,
.BR \- ,
.BR $ ,
and
.BR !\ .
.SS Commands
A
.I simple-command
is a sequence of non-blank
.I words
separated by
.IR blanks .
The first word specifies the name of the command to
be executed.
Except as specified below,
the remaining words are passed as arguments
to the invoked command.
The command name is passed as argument 0
(see
.IR exec (2)).
The
.I value
of a \f2simple-command\f1 is its exit status
if it terminates normally, or (octal) 200+\f2status\fP if
it terminates abnormally (see
.IR signal (2)
for a list of
status values).
.PP
A
.I pipeline
is a sequence of one or more
.I commands
separated by
.BR \(bv .
The standard output of each command but the last
is connected by a
.IR pipe (2)
to the standard input of the next command.
Each command is run as a separate process;
the shell waits for the last command to terminate.
The exit status of a pipeline is the exit status of the last command.
.PP
A
.I list
is a sequence of one or more
pipelines
separated by
.BR ; ,
.BR & ,
.BR && ,
or
.BR \(bv\(bv ,
and optionally terminated by
.B ;
or
.BR & .
Of these four symbols,
.B ;
and
.B &
have equal precedence,
which is lower than that of
.B &&
and
.BR \(bv\(bv .
The symbols
.B &&
and
.B \(bv\(bv
also have equal precedence.
A semicolon
.RB ( ; )
causes sequential execution of the preceding pipeline; an ampersand
.RB ( & )
causes asynchronous execution of the preceding pipeline (that is, the shell does
.I not
wait for that pipeline to finish).
The symbol
.B &&
.RB ( \(bv\(bv )
causes the
.I list
following it to be executed only if the preceding
pipeline
returns a zero (nonzero) exit status.
An arbitrary number of newlines can appear in a
.IR list ,
instead of semicolons,
to delimit commands.
.PP
A
.I command
is either a \f2simple-command\f1
or one of the following.
Unless otherwise stated,
the value returned by a command is that of the
last \f2simple-command\f1 executed in the command.
.PP
.TP 10
\f3for\fP \f2name\fP \*(OK \f3in\fP \f2word\fP ...\& \*(CK \f3do\fP \f2list\fP \f3done\fP
Each time a
.B for
command is executed,
.I name
is set to the next
.I word
taken from the
.B in
.I word
list.
If
.BI in " word"
\&...
is omitted,
the
.B for
command executes the \f3do\fP \f2list\fP once for each positional parameter
that is set
(see
.B "Parameter Substitution"
below).
Execution ends when there are no more words in the list.
.TP
\f3case\fP \f2word\fP \f3in\fP \*(OK \f2pattern\fP \*(OK \(bv \
\f2pattern\fP \*(CK ...\f3)\fP \f2list\fP \f3;;\fP \*(CK ...\f3 esac\fP
A
.B case
command executes the
.I list
associated with the first
.I pattern
that matches
.IR word .
The form of the patterns is
the same as that used for
filename generation (see
\f3Filename Generation\f1)
except that a slash, a leading dot, or a dot immediately
following a slash need not be matched explicitly.
.TP
\f3if\fP \f2list\fP \f3then\fP \f2list\fP \*(OK \
\f3elif\fP \f2list\fP \f3then\fP \f2list\fP \*(CK ...\& \
\*(OK \f3else\fP \f2list\fP \*(CK \f3f\&i\fP
The
.I list
following \f3if\fP is executed and,
if it
returns a zero exit status, the
.I list
following
the first
.B then
is executed.
Otherwise, the
.I list
following \f3elif\fP
is executed and, if its value is zero,
the
.I list
following
the next
.B then
is executed.
Failing that, the
.B else
.I list
is executed.
If no
.B else
.I list
or
.B then
.I list
is executed, the
.B if
command returns a zero exit status.
.TP
\f3while\fP \f2list\fP \f3do\fP \f2list\fP \f3done\fP
A
.B while
command repeatedly executes the
.B while
.I list
and, if the exit status of the last command in the list is zero, executes
the
.B do
.IR list ;
otherwise the loop terminates.
If no commands in the
.B do
.I list
are executed, the
.B while
command returns a zero exit status;
.B until
can be used in place of
.B while
to negate
the loop termination test.
.TP
\f3(\fP\f2list\fP\f3)\fP
Execute
.I list
in a subshell.
.TP
\f3{\fP\f2list\fP\f3;}\fP
.I list
is executed in the current (that is, parent) shell.
The \f3{\fP must be followed by a space.
.TP
\f2name\fP \f3() {\fP\f2list\fP\f3;}\fP
Define a function
that is referenced by
.IR name .
The body of the function
is the
.I list
of commands between
.BR { " and " } "."
The \f2list\fP can appear
on the same line as the \f4{\fP.
If it does,
the \f3{\fP and \f2list\fP must be separated by a space.
The \f3}\fP cannot be on the same line as \f2list\fP;
it must be on a newline.
Execution of functions is described below (see
.BR Execution ).
The
\f4{\f1 and \f4}\f1
are unnecessary if the body of the function is a
.I command
as defined above, under \f3Commands\f1.
.PP
The following words
are only recognized as the first word of a command and when not quoted:
.Ex
\f3if then else elif fi case esac for while until do done { }\f1
.Ee
.SS Comments
A word beginning with
.B #
causes that word and all the following characters up to a newline
to be ignored.
.SS Command Substitution
The shell reads commands from the string between two grave accents
(\f3``\fP)
and the standard output from these commands can
be used as all or part of a word.
Trailing newlines from the
standard output are removed.
.P
No interpretation is done on the string before the string is
read,
except to remove backslashes (\f3\e\f1)
used to escape other characters.
Backslashes
can be used to escape a grave accent
(\f3`\f1)
or another backslash (\f3\e\f1) and are
removed before the command string is read.
Escaping grave accents allows nested command substitution.
If the command substitution lies within a pair of double
quotes
(\f3" ...\& `...` ...\& "\f1),
a backslash used to escape a double quote
(\f3\e"\f1)
is removed; otherwise, it is left intact.
.P
If a backslash is used to escape a newline character
(\f3\enewline\f1),
both the backslash and the newline are removed
(see the later section on "Quoting").
In addition, backslashes used to escape dollar signs
(\f3\e$\f1)
are removed.
Since no interpretation is done on the command string before
it is read, inserting a backslash to escape a dollar
sign has no effect.
Backslashes that precede characters other than
.BR \e ,
.BR ` ,
\f3"\fP,
.BR newline ,
and
.B $
are left intact when the command string is read.
.SS Parameter Substitution
The character
.B $
is used to introduce substitutable
.IR parameters .
There are two types of parameters,
positional and keyword.
If
.I parameter
is a digit, it is a positional parameter.
Positional parameters can be assigned values by
.BR set .
Keyword parameters (also known as variables)
can be assigned values by writing:
.Ex
\f2name\f1 \f3=\f1 \f2value\f1 \*(OK \f2name\f1 \f3=\f1 \f2value\f1 \*(CK ...
.Ee
Pattern-matching is not performed on
.IR value .
There cannot be a function and a variable with the same
.IR name .
.TP 20
\f3${\fP\f2parameter\fP\f3}\fP
The value, if any, of the parameter is substituted.
The braces are required only when
.I parameter
is followed by a letter, digit, or underscore
that is not to be interpreted as part of its name.
If
.I parameter
is
.B *
or
.BR @ ,
all the positional
parameters, starting with
.BR $1 ,
are substituted
(separated by spaces).
Parameter
.B $0
is set from argument zero when the shell
is invoked.
.TP
\f3${\fP\f2parameter\fP\f3:\-\fP\f2word\fP\f3}\fP
If
.I parameter
is set and is non-null, substitute its value;
otherwise substitute
.IR word .
.TP
\f3${\fP\f2parameter\fP\f3:=\fP\f2word\fP\f3}\fP
If
.I parameter
is not set or is null
set it to
.IR word ;
the value of the parameter is substituted.
Positional parameters cannot be assigned to
in this way.
.TP
\f3${\fP\f2parameter\fP\f3:?\fP\f2word\fP\f3}\fP
If
.I parameter
is set and is non-null, substitute its value;
otherwise, print
.I word
and exit from the shell.
If
.I word
is omitted, the message
"parameter null or not set"
is printed.
.TP
\f3${\fP\f2parameter\fP\f3:+\fP\f2word\fP\f3}\fP
If
.I parameter
is set and is non-null, substitute
.IR word ;
otherwise substitute nothing.
.PP
In the above,
.I word
is not evaluated unless it is
to be used as the substituted string,
so that, in the following example,
.B pwd
is executed only if
.B d
is not set or is null:
.Ex
\f4echo ${d:\-`pwd`}\f1
.Ee
If the colon
.RB ( : ") is"
omitted from the above expressions, the
shell only checks whether
.I parameter
is set or not.
.PP
The following
parameters
are automatically set by the shell:
.TP
.B *
Expands to the positional parameters,
beginning with \f41\f1.
.TP
.B @
Expands to the positional parameters
beginning with \f41\fP,
except when expanded within double quotes,
in which case each positional parameter
expands as a separate field.
.TP
.B #
The number of positional parameters in decimal.
.TP
.B \-
Flags supplied to the shell on invocation or by
the
.B set
command.
.TP
.B ?
The decimal value returned by the last synchronously executed command.
.TP
.B $
The process number of this shell.
\f4$\fP reports the process ID of
the parent shell in all shell constructs,
including pipelines, and in parenthesized subshells.
.TP
.B !
The process number of the last background command invoked.
.PP
The following
parameters
are used by the shell:
.TP 10
.B HOME
The default argument (home directory) for the
\f4cd\fP
command, set to the user's login directory
by \f4login\fP(1) from the password file
(see \f4passwd\fP(4)).
.TP
.B PATH
The search path for commands (see
.B Execution
below).
The user cannot change
.B PATH
if executing under
.IR rsh .
.TP
.B CDPATH
The search path for the
.I cd
command.
.TP
.B MAIL
If this parameter is set to the name of a mail file
.I and
the
.B MAILPATH
parameter is not set, the shell informs the user of the arrival of mail
in the specified file.
.TP
.B MAILCHECK
This parameter specifies how often
(in seconds) the shell
checks for the arrival of mail in the files specified by the
.B MAILPATH
or
.B MAIL
parameters.
The default value is 600 seconds (10 minutes).
If set to 0, the shell checks before each prompt.
.TP
.B MAILPATH
A colon
.RB ( : )
separated list of filenames.
If this parameter is set, the shell informs the user of the arrival of mail
in any of the specified files.
Each filename can be followed by
.B %
and a message to be printed when the
modification time changes.
The default message is
"you have mail".
.TP
.B PS1
Primary prompt string, by default
.RB `` "$ " ''.
.TP
.B PS2
Secondary prompt string, by default
.RB `` "> " ''.
.TP
.B IFS
Internal field separators,
normally
.BR space ,
.BR tab ,
and
.BR newline .
.TP
.B SHACCT
If this parameter is set to
the name of a file writable by the user,
the shell writes an accounting record
in the file for each shell procedure executed.
.TP
.B SHELL
When the shell is invoked, it scans the environment
(see \f3Environment\f1 below)
for this name.
If it is found and 'rsh' is
the filename part of its value,
the shell becomes a restricted shell.
.PP
The shell gives default values to
\f3PATH\fP, \f3PS1\fP, \f3PS2\fP, \f3MAILCHECK\fP, and \f3IFS\fP.
.B HOME
and
.B MAIL
are set by
.IR login (1).
.SS Blank Interpretation
After parameter and command substitution,
the results of substitution are scanned for internal field separator
characters (those found in
.BR IFS )
and split into distinct arguments where such characters are found.
Explicit null arguments (\f3""\fP or \f3''\fP) are retained.
Implicit null arguments
(those resulting from
.I parameters
that have no values) are removed.
The original whitespace characters
(space, tab, and newline)
are always considered internal field separators.
.SS Input/Output
A command's input and output
can be redirected using a special notation interpreted by the shell.
The following can appear anywhere in a \f2simple-command\f1
or can precede or follow a
.I command
and are
.I not
passed on as arguments to the invoked command.
Note that parameter and command substitution occurs before
.I word
or
.I digit
is used.
.PP
.TP 10
.B <word
Use file
.I word
as standard input (file descriptor 0).
.TP
.B >word
Use file
.I word
as standard output (file descriptor 1).
If the file does not exist it is created;
otherwise, it is truncated to zero length.
.TP
.B \h@-.3m@>>word
Use file
.I word
as standard output.
If the file exists output is appended to it (by first seeking to the end-of-file);
otherwise, the file is created.
.TP
\f3<<\fP\*(OK\f3\-\fP\*(CK\f3word\fP
After parameter and command substitution is done on
.IR word ,
the shell input is read up to the first line that literally matches the resulting
.IR word ,
or to an end-of-file.
If, however,
.B \-
is appended to
.BR << :
.RS
.TP 4
1.
Leading tabs are stripped from
.I word
before the shell input is read
(but after parameter and command substitution is done on
.IR word ).
.TP
2.
Leading tabs are stripped from
the shell input as it is read and before each line is compared with
.IR word .
.TP
3.
Shell input is read up to the first line that literally matches the resulting
.IR word ,
or to an end-of-file.
.RE
.IP
If any
character of
.I word
is quoted
(see \f3Quoting\f1, later),
no additional processing is done to the shell input.
If no characters of
.I word
are quoted:
.RS
.TP 4
1.
Parameter and command substitution occurs.
.TP
2.
(Escaped)
.B \enewline
is ignored.
.TP
3.
.B \e
must be used to quote the characters
.BR \e ,
.BR $ ,
and
.BR ` .
.RE
.IP
The resulting document becomes
the standard input.
.TP
.BI <\h@-.1m@& digit
Use the file associated with file descriptor
.I digit
as standard input.
Similarly for the standard output using
\f3>\h@-.1m@&\f1\f2digit\f1.
.TP
.B <\h@-.1m@&\h@-.1m@\-
The standard input is closed.
Similarly for the standard output using
.BR >\h@-.1m@&\h@-.1m@\- .
.PP
If any of the above is preceded by a digit,
the
file descriptor that will be associated with the file
is that specified
by the digit
(instead of the default 0 or 1).
For example:
.Ex
\f4\&...\& 2>&1\f1
.Ee
associates file descriptor 2 with the file currently associated with
file descriptor 1.
.PP
The order in which redirections are specified is significant.
The shell evaluates redirections left-to-right.
For example:
.Ex
\f4\&...\& 1>\f2xxx\fP 2>&1\f1
.Ee
first associates file descriptor 1 with file
.IR xxx .
It associates file descriptor 2 with the file associated with file
descriptor 1 (that is,
.IR xxx ).
If the order of redirections were reversed, file descriptor 2 would be associated
with the terminal (assuming file descriptor 1 had been) and file descriptor
1 would be associated with file
.IR xxx .
.PP
Using the terminology introduced on the first page, under
\f3Commands\f1,
if a
.I command
is composed of several
.IR "simple commands" ,
redirection is evaluated for the entire
.I command
before it is evaluated for each
.IR "simple command" .
That is, the shell evaluates redirection
for the entire
.IR list ,
then each
.I pipeline
within the
.IR list ,
then each
.I command
within each
.IR pipeline ,
then each
.I list
within each
.IR command .
.PP
If a command is followed by
.B &
the default standard input
for the command
is the empty file
.IR /dev/null .
Otherwise, the environment for the execution of a command contains the
file descriptors of the invoking shell as modified by
input/output specifications.
.PP
Redirection of output is not allowed in the restricted shell.
.SS Filename Generation
Before a command is executed,
each command
.I word
is scanned for
the characters
.BR * ,
.BR ? ,
and
.BR \*(OK .
If one of these characters appears
the word is regarded as a
.IR pattern .
The word is replaced with alphabetically sorted filenames that match the pattern.
If no filename is found that matches the pattern,
the word is left unchanged.
The character
.B .
at the start of a filename
or immediately following a
.BR / ,
as well as the character
.B /
itself,
must be matched explicitly.
.PP
.TP
.B *
Matches any string, including the null string.
.TP
.B ?
Matches any single character.
.TP
.BR \*(OK ... \*(CK
Matches any one of the enclosed characters.
A pair of characters separated by
.B \-
matches any
character lexically between the pair, inclusive.
If the first character following the opening
\f3\*(OK\f1 is a \f3!\f1,
any character not enclosed is matched.
.SS Quoting
The following characters have a special meaning to the shell
and cause termination of a word unless quoted:
.Ex
\f3;  &  (  )  \(bv  ^  <  >  newline  space  tab\f1
.Ee
A character can be
.I quoted
that is, made to stand for itself)
by preceding
it with a
backslash (\f3\e\fP) or inserting it between a pair of quote marks
(\f3''\fP or \f3""\fP).
During processing,
the shell can quote certain characters to prevent them from taking on
a special meaning.
Backslashes used to quote a single character are removed from the word before
the command is executed.
The pair
.B \enewline
is removed from a word before command and parameter substitution.
.PP
All characters enclosed between a pair of single quote marks
(\f3''\fP),
except a single quote,
are quoted by the shell.
Backslash has no special meaning inside a pair of single quotes.
A single quote can be quoted inside a pair of double quote marks
(for example, \f3"'"\fP).
.PP
Inside a pair of double quote marks
(\f3""\fP),
parameter and command substitution occurs and
the shell quotes the results to avoid blank interpretation and filename
generation.
If
.B $*
is within a pair of double quotes,
the positional parameters are substituted and quoted,
separated by quoted spaces
(\f3"$1 $2\fP ...\f3"\fP);
however,
if
.B $@
is within a pair of double quotes,
the positional parameters are substituted and quoted,
separated by unquoted spaces
(\f3"$1" "$2"\f1 ...).
.B \e
quotes the characters
.BR \e ,
.BR ` ,
\f3"\fP,
and
.BR $ .
The pair
.B \enewline
is removed before parameter and command substitution.
If a backslash precedes characters other than
.BR \e ,
.BR ` ,
\f3"\fP,
.BR $ ,
and
newline, then the backslash itself is quoted by the shell.
.SS Prompting
When used interactively,
the shell prompts with the value of
.B PS1
before reading a command.
If at any time a newline is typed and further input is needed
to complete a command, the secondary prompt
that is, the value of
.BR PS2 )
is issued.
.SS Environment
The
.I environment
(see
.IR environ (5))
is a list of name-value pairs that is passed to
an executed program in the same way as a normal argument list.
The shell interacts with the environment in several ways.
On invocation, the shell scans the environment
and creates a
parameter
for each name found,
giving it the corresponding value.
If the user modifies the value of any of these
parameters
or creates new parameters,
none of these affects the environment
unless the
.B export
command is used to bind the shell's
parameter
to the environment (see also
.BR "set \-a" ).
A parameter can be removed from the environment
with the
.B unset
command.
The environment seen by any executed command is thus composed
of any unmodified name-value pairs originally inherited by the shell,
minus any pairs removed by
.BR unset ,
plus any modifications or additions,
all of which must be noted in
.B export
commands.
.PP
The environment for any
.I simple-command
can be augmented by prefixing it with one or more assignments to
parameters.
Thus these two commands
are equivalent (as far as the execution of
.I cmd
is concerned if
.I cmd
is not a Special Command):
.Ex
\f4TERM=450 cmd
(export TERM; TERM=450; cmd)\f1
.Ee
If
.I cmd
is a Special Command, then
.Ex
\f4TERM=45 cmd\f1
.Ee
modifies the \f4TERM\fP variable in the current shell.
.PP
If the
.B \-k
flag is set,
.I all
keyword arguments are placed in the environment,
even if they occur after the command name.
The following
first prints
.B "a=b c"
and
.BR c :
.Ex
\f4echo a=b c
set -k
echo a=b c\f1
.Ee
.SS Signals
When a command is run in the background
(\f2cmd \f4&\f1) under \f4sh\fP,
it can receive INTERRUPT and QUIT signals
but ignores them by default.
(A background process
can override this default behavior
via trap or signal.
For details, see the description of \f4trap\fP, below,
or \f4signal\fP(2).)
When a command is run in the background
under \f4jsh\fP, however,
it does not receive INTERRUPT or QUIT signals.
.P
Otherwise signals have the values
inherited by the shell from its parent,
with the exception of signal 11 (SIGSEGV).
See also the \f4trap\f1 command below.
.SS Execution
.PP
Each time a command is executed,
the command substitution,
parameter substitution,
blank interpretation,
input/output redirection, and filename generation
listed above are carried out.
If the command name matches the name of a defined function, the function is executed
in the shell process (note how this differs from the execution of shell procedures).
If the command name does not match
the name of a defined function,
but matches one of the \f3Special Commands\f1 listed below,
it is executed in the shell process.
The positional parameters
.BR $1 ,
.BR $2 ,
and so on
are set to the arguments of the function.
If the command name matches neither a
Special Command
nor the name of a defined function,
a new process is created and an attempt is made to
execute the command via
.IR exec (2).
.PP
The shell parameter
.B PATH
defines the search path for
the directory containing the command.
Alternative directory names are separated by
a colon
.RB ( : ).
The default path is:
.Ex
.B :/usr/sbin:/usr/bsd:/bin:/usr/bin:/usr/bin/X11
.Ee
specifying the current directory,
.IR /usr/sbin ,
.IR /usr/bsd ,
.IR /bin ,
.IR /usr/bin ,
and
.IR /usr/bin/X11 ,
in that order.
Note that the current directory is specified by a null pathname.
It can appear immediately after the equal sign,
between two colon delimiters anywhere in the path list,
or at the end of the path list.
If the command name contains a \f3/\fP the search path
is not used;
such commands are not executed by the restricted shell.
Otherwise, each directory in the path is
searched for an executable file.
If the file has execute permission but is not an
.B a.out
file,
it is assumed to be a file containing shell commands.
A subshell is spawned to read it.
A parenthesized command is also executed in
a subshell.
.PP
The location in the search path where a command was found is remembered by the
shell
(to help avoid unnecessary
.I execs
later).
If the command was found in a relative directory, its location must be
re-determined whenever the current directory changes.
The shell forgets all remembered locations whenever the
.B PATH
variable is changed or the
.B hash \-r
command is executed (see below).
.SS Special Commands
Input/output redirection is now permitted for these commands.
File descriptor 1 is the default output location.
When Job Control is enabled,
additional Special Commands
are added to the shell's environment (see \f3Job Control\f1).
.TP 20
.B :
No effect; the command does nothing.
A zero exit code is returned.
.TP
.BI ". " file
Read and execute commands from
.I file
and return.
The search path
specified by
.B PATH
is used to find the directory containing
.IR file .
.TP
\f3break\fP \*(OK \f2n\fP \*(CK
Exit from the enclosing \f3for\fP or
.B while
loop, if any.
If
.I n
is specified break
.I n
levels.
.TP
\f3continue\fP \*(OK \f2n\fP \*(CK
Resume the next iteration of the enclosing
\f3for\fP or
.B while
loop.
If
.I n
is specified resume at the
.IR n -th
enclosing loop.
.TP
\f3cd\fP \*(OK \f2arg\fP \*(CK
Change the current directory to
.IR arg .
The shell
parameter
.B HOME
is the default
.IR arg .
The shell parameter
.B CDPATH
defines the search path for
the directory containing
.IR arg .
Alternative directory names are separated by
a colon
.RB ( : ).
The default path is
.B <null>
(specifying the current directory).
Note that the current directory is specified by a null pathname.
It can appear immediately after the equal sign
or between the colon delimiters anywhere else in the path list.
If
.I arg
begins with a \f3/\fP the search path
is not used.
Otherwise, each directory in the path is
searched for
.IR arg .
The
.I cd
command cannot be executed by
.IR rsh .
.TP
\f3echo\fP \*(OK \f2arg\fP ...\& \*(CK
Echo arguments.
See
.IR echo (1)
for usage and description.
.TP
\f3eval\fP \*(OK \f2arg\fP ...\& \*(CK
The arguments are read as input
to the shell
and the resulting command(s) executed.
.TP
\f3exec\fP \*(OK \f2arg\fP ...\& \*(CK
The command specified by
the arguments is executed in place of this shell
without creating a new process.
Input/output arguments can appear and, if no other
arguments are given, cause the shell
input/output to be modified.
.TP
\f3exit\fP \*(OK \f2n\fP \*(CK
Causes a shell to exit
with the exit status specified by
.IR n .
If
.I n
is omitted, the exit status is that of the last command executed
(an end-of-file also causes the shell to exit.)
.TP
\f3export\fP \*(OK \f2name\fP ...\& \*(CK
The given
.IR name s
are marked
for automatic export to the
.I environment
of subsequently-executed commands.
If no arguments are given,
variable names that have been marked for export during the current shell's execution
are listed.
(Variable names exported from a parent shell are listed only if they
have been exported again during the current shell's execution.)
Function names are
.I not
exported.
.TP
.B getopts
Use in shell scripts to
support command syntax standards (see
.IR intro (1));
it parses positional parameters and checks for legal options.
See
.IR getopts (1)
for usage and description.
.TP
\f3hash\fP \*(OK \f3\-r\fP \*(CK \*(OK \f2name\fP ...\& \*(CK
For each
.IR name ,
the location in the search path of the command specified by
.I name
is determined and remembered by the shell.
The
.B \-r
option causes the shell to forget all remembered locations.
If no arguments are given, information about remembered commands is
presented.
\f2hits\fP is the number of times a command has been invoked by the shell process.
\f2cost\fP is a measure of the work required to locate a
command in the search path.
If a command is found in a "relative" directory in the search path,
after changing to that directory,
the stored location
of that command is recalculated.
Commands for which this is done are indicated by an asterisk (\f3*\f1)
adjacent to the \f2hits\f1 information.
\f2cost\f1 is incremented when the recalculation is done.
.TP
\f3limit\fP \*(OK \f3\-h\fP \*(CK \*(OK \f2resource\fP \*(OK\f2maximum-use\fP \*(CK \*(CK
Limits the consumption by the current process and each process
it creates to not individually exceed \f2maximum-use\f1 on the
specified \f2resource\f1.
If no \f2maximum-use\f1 is given, then
the current limit is printed; if no \f2resource\f1 is given, then
all limitations are given.
If the \f3\-h\f1
flag is given, the hard limits are used instead of the current
limits.
The hard limits impose a ceiling on the values of
the current limits.
Only the superuser can raise the hard limits,
but a user can lower or raise the current limits within the legal range.
.TP
\&
Resources controllable currently include \f2cputime\f1, the maximum
number of cpu-seconds to be used by each process, \f2filesize\f1,
the largest single file that can be created, \f2datasize\f1,
the maximum growth of the data region via
.IR sbrk (2)
beyond the end of the program text, \f2stacksize\f1, the maximum
size of the automatically-extended stack region, \f2coredumpsize\f1,
the size of the largest core dump created,
\f2memoryuse\f1, the maximum amount of physical memory a process
can have allocated to it at a given time,
\f2descriptors\f1, the maximum number of open files,
and
\f2vmemory\f1, the maximum total virtual size of the process,
including text, data, heap, shared memory, mapped files, stack, and so on.
.TP
\&
The \f2maximum-use\f1 can be given as a (floating point or integer)
number followed by a scale factor.
For all limits other than \f2cputime\f1
the default scale is \f3k\f1 or \f3kilobytes\f1 (1024 bytes);
a scale factor of \f3m\f1 or \f3megabytes\f1 can also be used.
For
.I cputime
the default scaling is \f3seconds\f1, while \f3m\f1 for minutes
or \f3h\f1 for hours, or a time of the form \f2mm\f1\f3:\f1\f2ss\f1
giving minutes
and seconds can be used.
.TP
\&
For both \f2resource\f1 names and scale factors, unambiguous prefixes
of the names suffice.
.TP
\f3newgrp\fP \*(OK \f2arg\fP ...\& \*(CK
Equivalent to
.BI "exec newgrp" " arg"
\&....
See
.IR newgrp (1)
for usage and description.
.TP
\f3pwd\fP
Print the current working directory.
See
.IR pwd (1)
for usage and description.
.TP
\f3read\fP \*(OK \f2name\fP ...\& \*(CK
One line is read from the standard input and,
using the internal field separator,
.B IFS
(normally space or tab),
to delimit word boundaries,
the first
word is assigned to the first
.IR name ,
the second word
to the second
.IR name ,
and so on, with leftover words assigned to the last
.IR name .
Lines can be continued using
.BR \enewline .
Characters other than
.B newline
can be quoted by preceding them with a backslash.
These backslashes are removed before words are assigned to
.IR names ,
and no interpretation is done on the character that follows the backslash.
The return code is 0 unless an end-of-file is encountered.
.TP
\f3readonly\fP \*(OK \f2name\fP ...\& \*(CK
The given
.IR name s
are marked
.B readonly
and
the values of the these
.IR name s
cannot be changed
by subsequent assignment.
If no arguments are given, a list
of all
.B readonly
names is printed.
.TP
\f3return\fP \*(OK \f2n\fP \*(CK
Causes a function to exit with the return value specified by
.IR n .
If
.I n
is omitted, the return status is that of the last command executed.
.TP
\f3set\fP \*(OK \f3\-\-aefhkntuvx\fP \*(OK \f2arg\fP ...\& \*(CK \*(CK
.RS
.TP
.B \-a
Mark variables that are modified or created for export.
.TP
.B \-e
Exit immediately if a command
exits with a nonzero exit status.
.TP
.B \-f
Disable filename generation.
.TP
.B \-h
Locate and remember function commands as functions are defined
(function commands are normally located when the function is executed).
.TP
.B \-k
All keyword arguments are placed in the environment for a command,
not just those that precede the command name.
.TP
.B \-n
Read commands but do not execute them.
.TP
.B \-t
Exit after reading and executing one command.
.TP
.B \-u
Treat unset variables as an error when substituting.
.TP
.B \-v
Print shell input lines as they are read.
.TP
.B \-x
Print commands and their arguments as they are executed.
.TP
.B \-\-
Do not change any of the flags; useful in setting
.B $1
to
.BR \- .
.PP
Using
.B \+
rather than
.B \-
causes these flags to be turned off.
These flags can also be used upon invocation of the shell.
The current set of flags can be found in
.BR $\- .
The remaining arguments are positional
parameters and are assigned, in order, to
.BR $1 ,
.BR $2 ,
\&....
If no arguments are given the values
of all names are printed.
.RE
.TP
\f3shift\fP \*(OK \f2n\fP \*(CK
The positional parameters from
.B $n+1
\&...
are renamed
.B $1
\&....
If
.I n
is not given, it is assumed to be 1.
.TP
\f3test\fP
Evaluate conditional expressions.
See
.IR test (1)
for usage and description.
.TP
\f3times\fP
Print the accumulated user and system times for processes
run from the shell.
.TP
\f3trap\fP \*(OK \f2arg\fP \*(CK \*(OK \f2n\fP \*(CK ...
The command
.I arg
is to be read and executed when the shell
receives signal(s)
.IR n .
(Note that
.I arg
is scanned once when
the trap is set and once when the trap
is taken.)
Trap commands are executed in order of signal number.
Any attempt to set a trap on a signal that
was ignored on entry to the current shell is ineffective.
An error results when an attempt is made to trap
signal 11 (SIGSEGV\-\-segmentation fault).
If
.I arg
is absent all trap(s)
.I n
are reset
to their original values.
If
.I arg
is the null
string this signal is ignored by the shell and by the commands
it invokes.
If
.I n
is 0 the command
.I arg
is executed
on exit from the shell.
The
.B trap
command
with no arguments prints a list
of commands associated with each signal number.
.TP
\f3type\fP \*(OK \f2name\fP ...\& \*(CK
For each
.IR name ,
indicate how it would be interpreted if used as a command name.
.TP
\f3ulimit\fP \*(OK \f2n\fP \*(CK
Impose a size limit of
.I n
blocks on files written by the shell and its child processes
(files of any size can be read).
If
.I n
is omitted, the current limit is printed.
You can lower your own ulimit, but only a superuser
(see
.IR su (1M))
can raise a ulimit.
.TP
\f3umask\fP \*(OK \f2nnn\fP \*(CK
The user file creation mask is set to
.I nnn
(see
.IR umask (1)).
If
.I nnn
is omitted, the current value of the mask is printed.
.TP
\f3unlimit\fP \*(OK \f3\-h\fP \*(CK \*(OK \f2resource\fP \*(CK
Removes the limitation on \f2resource\f1.
If no \f2resource\f1
is specified, then all \f2resource\f1 limitations are removed.
If
\f3\-h\f1 is given, the corresponding hard limits are removed.
Only the
superuser can do this.
.TP
\f3unset\fP \*(OK \f2name\fP ...\& \*(CK
For each
.IR name ,
remove the corresponding variable or function.
The variables
\f3PATH\fP, \f3PS1\fP, \f3PS2\fP, \f3MAILCHECK\fP and \f3IFS\fP
cannot be unset.
.TP
\f3wait\fP \*(OK \f2n\fP \*(CK
Wait for your background process whose process id is
.I n
and report its termination status.
If
.I n
is omitted,
all your shell's currently active background processes are waited for
and the return code is zero.
.SS Invocation
If the shell is invoked through
.IR exec (2)
and the first character of argument zero
is
.BR \- ,
commands are initially read from
.I /etc/profile
and from
.IR $HOME/.profile ,
if such files exist.
Thereafter, commands are read as described below, which
is also the case when the shell is invoked as
.IR /bin/sh .
The flags below are interpreted by the shell on invocation only; Note
that unless the
.B \-c
or
.B \-s
flag is specified, the first argument is assumed to be the
name of a file containing commands, and the remaining
arguments are passed as positional parameters
to that command file:
.TP
.BI \-c " string"
If the
.B \-c
flag is present,
commands are read from
.IR string .
.TP
.B \-s
If the
.B \-s
flag is present or if no
arguments remain,
commands are read from the standard input.
Any remaining arguments specify the positional parameters.
Shell output (except for
Special Commands)
is written to file descriptor 2.
.TP
.B \-i
If the
.B \-i
flag is present or
if the shell input and output are attached to a terminal,
this shell is
.IR interactive .
In this case TERMINATE is ignored (so that \f3kill 0\fP
does not kill an interactive shell) and INTERRUPT is caught and ignored
(so that
.B wait
is interruptible).
In all cases, QUIT is ignored by the shell.
.TP
.B \-p
If the
.B \-p
flag is present, the shell skips the processing of the system
profile (\f4/etc/profile\fP) and the user profile (\f4\.profile\fP)
when it starts.
.TP
.B \-r
If the
.B \-r
flag is present the shell is a restricted shell.
.PP
The remaining flags and arguments
are described under the \f4set\f1 command above.
.SS Job Control (jsh)
When the shell is invoked as \f4jsh\fP,
Job Control is enabled
in addition to all of the functionality
described previously for \f4sh\fP.
Typically Job Control is enabled for the interactive shell only.
Noninteractive shells typically do not benefit from the added functionality
of Job Control.
.P
With Job Control enabled every command or pipeline the user enters at
the terminal is called a \f2job\f1.
All jobs exist in one of the
following states: foreground, background, or stopped.
These terms are defined as follows:
1) a job in the foreground has read and write access to the controlling terminal;
2) a job in the background is denied read access and has
conditional write access to the
controlling terminal (see \f4stty\fP(1));
3) a stopped job is a job that has been placed in a suspended state,
usually as a result of a \f4SIGTSTP\fP signal
(see \f4signal\fP(2)).
Jobs in the foreground
can be stopped by INTERRUPT or QUIT signals
from the keyboard;
background jobs cannot be stopped by these signals.
.P
Every job the shell starts
is assigned a positive integer, called a \f2job number\f1,
which is tracked by the shell
and is used, later, as an identifier to
indicate a specific job.
Additionally the shell keeps track of the
\f2current\f1 and \f2previous\f1 jobs.
The \f2current job\f1 is the
most recent job to be started or restarted.
The \f2previous job\f1 is the first noncurrent job.
.P
The acceptable syntax for a Job Identifier is of the form:
.IP
\f4%\f1\f2jobid\f1
.PP
where \f2jobid\f1 can be specified in any of the following formats:
.TP 10
\f4%\f1 or \f4+\f1
For the current job.
.TP
\f4\(mi\f1
For the previous job.
.TP
\f4?\f1\f2string\f1
Specify the job for which the command line uniquely contains \f2string\f1.
.TP
\f2n\f1
For job number \f2n\f1, where \f2n\f1 is a job number.
.TP
\f2pref\f1
Where \f2pref\f1 is a
unique prefix of the command name (for example, if the command
\f4ls \(mil foo\f1 were running in the background, it
could be referred to as \f4%ls\f1); \f4\f1\f2pref\f1 cannot contain blanks
unless it is quoted.
.P
When Job Control is enabled,
the following commands are
added to the user's environment to manipulate jobs:
.TP 20
\&\f4bg\f1 [\f4%\fP\f2jobid\f1 ...]
Resumes the execution of a stopped job in
the background.
If \f4%\fP\f2jobid\f1 is omitted the current job is assumed.
.TP
\&\f4fg\f1 [\f4%\fP\f2jobid\f1 ...]
Resumes the execution of a stopped
job in the foreground, also
moves an executing background job into the foreground.
If \f4%\fP\f2jobid\f1 is omitted the current job is assumed.
.TP
\&\f4jobs\f1 [\f4\-p|\-l\f1] [\f4%\fP\f2jobid\f1 ...]
.TP
\&\f4jobs\f1 \f4\-x\f1 \f2command\f1 [\f2arguments\f1]
Reports all jobs that are stopped or
executing in the background.
If \f4%\fP\f2jobid\f1 is omitted, all jobs that
are stopped or running in the background are reported.
The following
options modify/enhance the output of \f4jobs\f1:
.RS
.TP
\f4\-l\f1
Report the process group ID and working directory of the jobs.
.TP
\f4\-p\f1
Report only the process group ID of the jobs.
.TP
\f4\-x\f1
Replace any \f2jobid\f1 found in \f2command\f1 or \f2arguments\f1 with
the corresponding process group ID, and then execute \f2command\f1 passing
it \f2arguments\f1.
.RE
.TP
\&\f4kill\f1 [\-\f4signal\fP] \f4%\fP\f2jobid\f1
Builtin version of \f4kill\f1 to provide the functionality of the
\f4kill\f1 command for processes identified with a \f2jobid\f1.
.TP
\&\f4stop\f1 \f4%\fP\f2jobid\f1 . . .
Stops the execution of a background job(s).
.TP
\&\f4suspend\f1
Stops the execution of the current shell (but not if it is the login
shell).
.TP
\&\f4wait\f1 [\f4%\fP\f2jobid\f1 ...]
\f4wait\f1 builtin accepts a job identifier.
If \f4%\fP\f2jobid\f1 is omitted,
\f4wait\fP behaves as described above
under \f3Special Commands\f1.
.SS Restricted Shell (/usr/lib/rsh) Only
\f4/usr/lib/rsh\fP
is used to set up login names
and execution environments whose capabilities are
more controlled than those of the standard shell.
The actions of \f4/usr/lib/rsh\fP
are identical to those of \f4sh\fP,
except that the following are disallowed:
.PP
.PD 0
.IP \(bu 3
changing directory (see
.IR cd (1))
.IP \(bu 3
setting the value of
.B $PATH
.IP \(bu 3
specifying path or
command names containing
.B /
.IP \(bu 3
redirecting output
.RB ( >
and
.BR >> )
.PD
.PP
The restrictions above are enforced
after \f2.profile\fP is interpreted.
.PP
A restricted shell can be invoked in one of the following ways:
(1)
.I rsh
is the filename part of the last entry in the
.I /etc/passwd
file
(see
.IR passwd (4));
(2) the environment variable
.B SHELL
exists and
.I rsh
is the filename part of its value;
(3)
the shell is invoked and
.I rsh
is the filename part of argument 0;
(4)
the shell is invoke with the
.B \-r
option.
.PP
When a command to be executed is found to be a shell procedure,
.I /usr/lib/rsh
invokes
.I sh
to execute it.
Thus, it is possible to provide to the end-user shell procedures
that have access to the full power of
the standard shell,
while imposing a limited menu of commands;
this scheme assumes that the end-user does not have write and
execute permissions in the same directory.
.PP
The net effect of these rules is that the writer of the
.I .profile
(see
.IR profile (4))
has complete control over user actions
by performing guaranteed setup actions
and leaving the user in an appropriate directory
(probably
.I not
the login directory).
.PP
The system administrator often sets up a directory
of commands
(that is,
.IR /usr/rbin )
that can be safely invoked by
a restricted shell.
IRIX provides a restricted editor,
.IR red (1).
.SH EXIT STATUS
Errors detected by the shell, such as syntax errors,
cause the shell
to return a nonzero exit status.
If the shell is being used noninteractively
execution of the shell file is abandoned.
Otherwise, the shell returns the exit status of
the last command executed (see also the
.B exit
command above).
.SS jsh Only
If the shell is invoked as \f4jsh\fP and an attempt is made to exit
the shell while there are stopped jobs, the shell issues one warning:
.Ex
\f4UX:jsh:WARNING:there are stopped jobs\f1
.Ee
This is the only message.
If another exit attempt is made and there are
still stopped jobs, they are sent a \f4SIGHUP\f1 signal from the kernel
and the shell is exited.
.SH FILES
/etc/profile
.br
$HOME/\f3.\fPprofile
.br
/tmp/sh*
.br
/dev/null
.SH SEE ALSO
cd(1),
echo(1),
env(1),
getopts(1),
intro(1),
login(1),
newgrp(1),
pwd(1),
systune(1m),
test(1),
umask(1),
wait(1),
xargs(1),
dup(2),
exec(2),
fork(2),
getrlimit(2),
pipe(2),
signal(2),
ulimit(2),
profile(4).
.SH CAVEATS
Positional parameters have a range of 0 to 9.
Attempting to use
the positional parameter
.B $10
gives the contents of
.B $1
followed by a \f30\f1, which is probably not the desired result.
.PP
Words used for filenames in input/output redirection
are not interpreted for filename generation
(see
\f3Filename Generation\f1,
above).
For example,
.B "cat file1 >a*"
creates a file with the name
.BR a* .
.PP
Because commands in pipelines are run as separate processes,
variables set in a pipeline have no effect on the parent shell.
.PP
If you get the error message
"cannot fork, too many processes",
try using the
.IR wait (1)
command to clean up your background processes.
If this doesn't help,
the system process table is probably full or you have too many active foreground processes.
(There is a limit to the number of process ids
associated with your login,
and to the number the system can keep track of.)
.PP
For compatibility with the POSIX builtin executables linked to /sbin/builtin_exec,
the Korn shell parameter expansion ${parameter##pattern} has been implemented
only for the specific pattern '*/' to emulate basename. This allows the Bourne
shell builtins to work correctly when called with fullpaths e.g. /sbin/jobs.
.SH NOTES
Sometimes, particularly when using wildcards, the shell will fail to
execute a command, and complain with the message
   \f3Arg list or environment too large\fP
.br
This can often be avoided by using multiple commands, the 
.IR xargs (1)
command, or by increasing the \f3ncargs\fP kernel parameter with the
.IR systune (1m)
command.
.SH BUGS
Only the last process in a pipeline can be waited for.
.PP
If a command is executed, and a command with the same name is
installed in a directory in the search path before the directory where the
original command was found, the shell continues to
.I exec
the original command.
Use the
.B hash
command to correct this situation.
.PP
Prior to IRIX Release 5.0, the \f4rsh\fP command invoked the restricted shell.
This restricted shell command is \f4/usr/lib/rsh\fP and it can be
executed by using the full pathname.
Beginning with IRIX Release 5.0, the \f4rsh\fP command is the remote shell.
See \f4rsh_bsd\fP(1C).
