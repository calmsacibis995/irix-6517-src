'\"!  tbl | mmdoc
'\"macro stdmacro
.nr X
.if \nX=0 .ds x} ex 1 "Editing Utilities" "\&"
.TH \*(x}
.SH NAME
ex \- text editor
.SH SYNOPSIS
.nf
\f3ex\f1 [\f3\-s\f1] [\f3\-l\f1] [\f3\-L\f1] [\f3\-R\f1] [\f3\-r\f1 file] \c
[\f3\-t\f1 tag] [\f3\-v\f1] [\f3\-V\f1] [\f3\-x\f1] [\f3\-C\f1] \c
[\f3+\f1 command] 
[\f3\-c\f1 command] [\f3\-w\f1 size] file ...
.fi
.SH DESCRIPTION
.I ex
is the root of a family of editors:
.I ex
and
.IR vi .
.I ex
is a superset of
.IR ed ,
with the most notable extension being a display editing facility.
Display based editing is the focus of
.IR vi .
.PP
If you use a window or a CRT terminal, you may wish to use the
.IR vi (1)
editor, which focuses on the display-editing portion of
.IR ex .
.SS For ed Users
If you have used
.IR ed (1)
you will find that,
in addition to having all of the
.IR ed (1)
commands available,
.I ex
has a number of additional features useful on CRT terminals.
Intelligent terminals and high speed terminals are very pleasant to use
with
.IR vi .
Generally, the
.I ex
editor uses far more of the capabilities of terminals than
.IR ed (1)
does and uses the terminal capability data base
(see
.IR terminfo (4))
and the type of the terminal you are using from the environment variable
TERM
to determine how to drive your terminal efficiently.
The editor makes use of features such as insert and delete character and line
in its
.B visual
command
(which can be abbreviated \f3vi\f1)
and which is the central mode of editing when using
.IR vi (1).
.PP
.I ex
contains a number of features for easily viewing the text of the file.
The
.B z
command gives easy access to windows of text.
Typing
.B ^D
(control-d) causes the editor to scroll a half-window of text
and is more useful for quickly stepping through a file than just typing
return.
Of course, the screen-oriented
.B visual
mode gives constant access to editing context.
.PP
.I ex
gives you help when you make mistakes.
The
.B undo
(\f3u\f1)
command allows you to reverse any single change that goes astray.
.I ex
gives you a lot of feedback, normally printing changed lines,
and indicates when more than a few lines are affected by a command
so that it is easy to detect when a command has affected more lines
than it should have.
.PP
The editor also normally prevents overwriting existing files, unless you
edited them, so that you do not accidentally overwrite
a file other than the one you are editing.
If the system (or editor) crashes, or you accidentally hang up the telephone,
you can use the editor
.B recover
command
(or
.BI \-r " file"
option)
to retrieve your work.
This gets you back to within a few lines of where you left off.
.PP
.I ex
has several features for dealing with more than one file at a time.
You can give it a list of files on the command line
and use the
.B next
(\f3n\f1) command to deal with each in turn.
The
.B next
command can also be given a list of filenames, or a pattern
as used by the shell to specify a new set of files to be dealt with.
In general, filenames in the editor can be formed with full shell
metasyntax.
The metacharacter \f3%\f1 is also available in forming filenames and is replaced
by the name of the current file.
For editing large groups of related files you can use
.IR ex 's
.B tag
command to quickly locate functions and other important points in
any of the files.
This is useful when working on a large program when you want to quickly
find the definition of a particular function.
The
.IR ctags (1)
utility builds a
.I tags
file for C, Pascal, and FORTRAN programs.
.PP
The editor has a group
of buffers whose names are the ASCII lower-case letters
.RB ( a \- z ).
You can place text in these named buffers
where it is available to be inserted elsewhere in the file.
The contents of these buffers remain available when you begin editing a new file
using the
.B edit
(\f3e\f1)
command.
.PP
There is a command
.B &
in
.I ex
that repeats the last
.B substitute
command.
In addition, there is a
confirmed substitute command.
You give a range of substitutions to be done and the editor interactively
asks whether each substitution is desired.
.PP
It is possible to ignore the case
of letters in searches and substitutions.
.I ex
also allows regular expressions that match words to be constructed.
This is convenient, for example, in searching for the word
\f3edit\f1 if your document also contains the word \f3editor\f1.  See the
\f3regcomp\f1(5) man page for information about using the regular
expression syntax.  This version of \f2ex\f1 is X/Open compliant and uses the
X/Open defined regular expression syntax.
.PP
.I ex
has a set of
options
that you can set to tailor it to your liking.
One option that is very useful is the
.B autoindent
option that allows the editor to supply leading white
space to align text automatically.
You can then use
.B ^D
as a backtab
and space or tab to move forward to align new code easily.
.PP
Miscellaneous useful features include an intelligent
.B join
(\f3j\f1) command that supplies white space between joined lines
automatically,
commands \f3<\f1 and \f3>\f1 that shift groups of lines,
and the ability to filter
portions of the buffer through commands such as
.IR sort (1).
.SS Invocation Options
The following invocation options are interpreted by
.I ex
(previously documented options are discussed in the
.B NOTES
section at the end of this manual page):
.TP 13
.B \-s
Suppress all interactive-user feedback.
This is useful in processing editor scripts.
.TP
.B \-l
Set lisp mode; indents appropriately for Lisp code; the \f2()\f1, \f2{}\f1, 
\f3[[\f1 and \f3]]\f1 commands in visual mode are modified to have meaning 
for Lisp. 
.TP
.B \-L
List the names of all files saved as the
result of an editor or system crash.
.TP
.B \-R
\f3Readonly\f1 mode;
the
.B readonly
flag is set, preventing accidental
overwriting of the file.
.BI \-r " file"
Edit
.I file
after an editor or system crash.
(Recovers the version of
.I file
that was in the buffer when the
crash occurred.)
.TP
\f3\-t\f1 \f2tag\f1
Edit the file containing the
.I tag
and position the editor at its definition.
.TP
.B \-v
Invoke
.IR vi .
.TP
.TP
.B \-x
Encryption option; when used,
.I ex
simulates an
.B X
command and prompts the user for a key.
This key is used to encrypt and decrypt
text using the algorithm of
.IR crypt (1).
The
.B X
command
makes an educated guess to determine whether text
read in is encrypted or not.
The temporary buffer file is encrypted also,
using a transformed version of the key
typed in for the
.B \-x
option.
See
.IR crypt (1).
.TP
.B \-C
Encryption option; the same as the
.B \-x
option, except that
.I ex
simulates a
.B C
command.
The
.B C
command is like the
.B X
command,
except that
all text read in is assumed to have been encrypted.
.TP
.BI \+ " command"
Begin editing by executing the specified \f2ex\f1 command-mode commands.  As 
with normal editing command-line entries, the \f2command\f1 option-argument 
can consist of multiple \f2ex\f1 commands separated by vertical-line 
characters (|).  The use of commands that enter input or visual modes in 
this manner produces undefined results.
.TP
.BI \-w " size"
Set the value of the \f2window\f1 editor option to \f2size\f1. 
.TP
.BI \-c " command"
Begin editing by executing the specified editor
.I command
(usually a search or positioning command).
.PP
The
.I file
argument indicates one or more files to be edited.
.SS "ex States"
.TP 10
Command
Normal and initial state.
Input prompted for by \f3:\fP.
Your line kill character cancels a partial command.
.TP
Insert
Entered by \f3a\fP, \f3i\fP, or \f3c\fP.
Arbitrary text can be entered.
Insert state normally is terminated by a line having only "\f3.\f1"
on it,
or, abnormally, with an interrupt.
.TP
Visual
Entered by typing \f3vi\fP; terminated by typing \f3Q\fP
or ^\e (control-\e).
.SS "ex Command Names and Abbreviations"
.TS
lB lB8 lB lB8 lB lB.
abbrev	ab	map		set	se
append	a	mark	ma	shell	sh
args	ar	move	m	source	so
change	c	next	n	substitute	s
copy	co	number	nu	unabbrev	unab
delete	d	preserve	pre	undo	u
edit	e	print	p	unmap	unm
file	f	put	pu	version	ve
global	g	quit	q	visual	vi
insert	i	read	r	write	w
join	j	recover	rec	xit	x
list	l	rewind	rew	yank	ya
.TE
.SS "ex Commands"
.TS
lw(.45i) lBw(.08i).
shell escape	!
forced encryption	C
heuristic encryption	X
lshift	<
print next	\f1CR\fP
resubst	&
rshift	>
scroll	^D
window	z
.TE
.SS "ex Command Addresses"
.TS
lw(.3i)b lw(0.8i) lw(.3i)b lw(0.8i).
\f2n\fP	line \f2n\fP	/\f2pat\fP	next with \f2pat\fP
\&.	current	?\f2pat\fP	previous with \f2pat\fP
$	last	\f2x\fP-\f2n\fP	\f2n\fP before \f2x\fP
+	next	\f2x\fP,\f2y\fP	\f2x\fP through \f2y\fP
\-	previous	\(aa\f2x\fP	marked with \f2x\fP
+\f2n\fP	\f2n\fP forward	\(aa\(aa	previous context
%	1,$
.TE
.SS "Initializing options"
.TS
lw(.9i)b aw(1.5i).
EXINIT	place \f3set\fP's here in environment variable
$HOME/.exrc	editor initialization file
\&./.exrc  	editor initialization file
set \f2x\fP	enable option \f2x\f1
set no\f2x\fP	disable option \f2x\f1
set \f2x\fP=\f2val\fP	give value \f2val\fP to option \f2x\f1
set	show changed options
set all	show all options
set \f2x\fP?	show value of option \f2x\fP
.TE
.PP
If the \f3EXINIT\fP environment variable is set, initialization options are
taken from that variable.
Otherwise, initialization options
are taken
from \f3$HOME/.exrc\fP, if it exists.
Finally, if the \f3exrc\fP option
is set (either
by \f3EXINIT\fP or \f3$HOME/.exrc\fP,) initialization options
are taken from \f3./.exrc\fP, if it exists.
.SS "Most useful options and their abbreviations"
.TS
lw(.9i)b lw(.3i)b lw(1.0i).
autoindent	ai	supply indent
autowrite	aw	write before changing files
directory		pathname of directory for temporary work files
exrc	ex	T{
allow \f2vi\f1/\f2ex\f1 to read the \f3.exrc\f1
in the current directory;
this option is set in the \f3EXINIT\f1 shell variable
or in the \f3.exrc\f1 file in the \f3$HOME\f1 directory
T}
ignorecase	ic	ignore case of letters in scanning
list		print \f3^I\f1 for tab, $ at end
magic		treat \f3. [ *\fP special in patterns
modelines		first five lines and last five lines executed as
		\f2vi\f1/\f2ex\f1 commands if they are of the form
		\f3ex:\fP\f2command\f1\f3:\fP or \f3vi:\fP\f2command\f1\f3:\fP
number	nu	number lines
paragraphs	para	macro names that start paragraphs
redraw		simulate smart terminal
report		informs you if the number of lines modified by the
		last command is greater than the value of the
		\f3report\f1 variable
scroll		command mode lines
sections	sect	macro names that start sections
shiftwidth	sw	for \f3< >\fP, and input \f3^D\fP
showmatch	sm	to \f3)\fP and \f3}\fP as typed
showmode	smd	show insert mode in \f2vi\f1
slowopen	slow	stop updates during insert
term		specifies to \f3vi\f1 the type of terminal being used (the
		default is the value of the environment variable \f3TERM\f1)
window		visual mode lines
wrapmargin	wm	automatic line splitting
wrapscan	ws	search around end (or beginning) of buffer
.TE
.SS "Scanning pattern formation"
.TS
aw(.9i)b aw(1.0i).
^	beginning of line
$	end of line
\f3.\f1	any character
\e<	beginning of word
\e>	end of word
[\f2str\fP]	any character in \f2str\fP
[^\f2str\fP]	any character not in \f2str\fP
[\f2x\-y\fP]	any character between \f2x\fP and \f2y\fP
*	any number of preceding characters
.TE
.SH FILES
.PD 0
.TP 28
/usr/lib/exrecover
recover command
.TP
/usr/lib/expreserve
preserve command
.TP
/usr/share/lib/terminfo/*
describes capabilities of terminals
.TP
$HOME/.exrc
editor startup file
.TP
\&./.exrc
editor startup file
.TP
/tmp/Ex\f2nnnnn\f1
editor temporary
.TP
/tmp/Rx\f2nnnnn\f1
named buffer temporary
.TP
/usr/preserve/\f2login\f1
preservation directory
(where \f2login\f1 is the user's login name)
.PD
.SH NOTES
Several options, although they continue to be supported,
have been replaced in the documentation by options that follow
the Command Syntax Standard (see
.IR intro (1)).
The
.B \-
option has been replaced by
.BR \-s ,
a
.B \-r
option that is not followed with an option-argument has been replaced by
.BR \-L ,
and
.BI + command
has been replaced by
.B \-c
.IR command .
.PP
.I ex
has a limit of 15,687,678 editable lines.
Attempts to edit or create files
larger than this limit cause
.I ex
to terminate with an appropriate error message.
.SH SEE ALSO
crypt(1),
ctags(1),
ed(1),
edit(1),
grep(1),
sed(1),
sort(1),
vi(1),
curses(3X),
term(4),
terminfo(4),
regcomp(5).
.SH "BUGS"
The
.B z
command prints the number of logical rather than physical lines.
More than a screen full of output may result if long lines are present.
.PP
File input/output errors do not print a name
if the command line \f3\-s\f1 option is used.
.PP
There is no easy way to do a single scan ignoring case.
.PP
The editor does not warn if text is placed in named buffers
and not used before exiting the editor.
.PP
Null characters are discarded in input files
and cannot appear in resultant files.
