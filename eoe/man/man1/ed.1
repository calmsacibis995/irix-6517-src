'\"! tbl | mmdoc
'\"macro stdmacro
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} ed 1 "Essential Utilities" "\&"
.TH \*(x}
.\" Copyright (c) 1988 Sun Microsystems, Inc - All Rights Reserved.
.SH NAME
\f4ed\f1, \f4red\f1 \- text editor
.SH SYNOPSIS
.nf
\f4ed\f1 [\f4\-s\f1] [\f4\-p\f1 \f2string\f1] [\f4\-x\f1] \c
[\f4\-C\f1] [\f2file\f1]
\f4red\f1 [\f4\-s\f1] [\f4\-p\f1 \f2string\f1] [\f4\-x\f1] \c
[\f4\-C\f1] [\f2file\f1]
.fi
.SH DESCRIPTION
\f4ed\fP
is the standard text editor.
\f4red\fP is a restricted version of \f4ed\fP.
If the
.I file
argument is given,
\f4ed\fP
simulates an
\f4e\f1
command (see below) on the named file; that is to say,
the file is read into
\f4ed\fP's
buffer so that it can be edited.
Both \f4ed\fP and \f4red\fP process supplementary code set
characters in \f2file\fP, and recognize supplementary
code set characters in the prompt string given
to the \f4\-p\fP option (see below)
according to the locale specified in the \f4LC_CTYPE\fP
environment variable (see \f4LANG\fP in \f4environ\fP(5)).
In regular expressions, pattern searches are performed
on characters, not bytes, as described below.
.TP
\f4\-s\f1
Suppresses the printing
of byte counts by
\f4e\f1,
\f4r\f1,
and
\f4w\f1
commands,
of diagnostics from
\f4e\f1
and
\f4q\f1
commands,
and of the
\f4!\f1 prompt after a
\f4!\fP\f2shell\ command\fP.
.TP
\f4\-p\f1
Allows the user to specify a prompt string.
The string can contain supplementary code set characters.
.TP
\f4\-x\f1
Encryption option; when used,
\f4ed\fP
simulates an
\f4X\f1
command and prompts the user for a key.
This key is used to encrypt and decrypt
text using the algorithm of
\f4crypt\fP(1).
The
\f4X\f1
command makes an educated guess
to determine whether text
read in is encrypted or not.
The temporary buffer file is encrypted also,
using a transformed version of the key
typed in for the
\f4\-x\f1
option.
See
\f4crypt\fP(1).
Also, see the
NOTES
section at the end
of this reference page.
.TP
\f4\-C\f1
Encryption option; the same
as the
\f4\-x\f1
option, except that
\f4ed\fP
simulates a
\f4C\f1
command.
The
\f4C\f1
command is like the
\f4X\f1
command,
except that
all text read in is assumed to have been encrypted.
.PP
\f4ed\fP
operates on a copy of the file it is editing; changes made
to the copy have no effect on the file until a
\f4w\f1
(write)
command is given.
The copy of the text being edited resides
in a temporary file called the
.IR buffer .
There is only
one buffer.
.PP
\f4red\fP
is a restricted version of
\f4ed\fP.
It allows only editing of files in the current directory.
It prohibits executing shell commands via
\f4!\fP\f2shell\ command\fP.
Attempts to bypass these restrictions result
in an error message (restricted shell).
.PP
Both
\f4ed\fP
and
\f4red\fP
support the
\f4fspec\fP(4)
formatting capability.
After including a
format specification
as the first line of
.I file
and invoking
\f4ed\fP
with
your terminal in
\f4stty\ \-tabs \f1
or
\f4stty\ tab3\f1
mode (see
\f4stty\fP(1)),
the specified tab stops are automatically used when
scanning
.IR file .
For example, if the first line of a file contained:
.IP
\f4\&<:t5,10,15\ s72:>\f1
.PP
tab stops are set at columns 5, 10, and 15, and a maximum line
length of 72 is imposed.
When you are entering text into the file,
this format is not in effect;
instead, because of being in
\f4stty\ \-tabs \f1
or
\f4stty\ tab3\f1
mode,
tabs are expanded to every eighth column.
.PP
Commands to
\f4ed\fP
have a simple and regular structure: zero, one, or two
.I addresses
followed by a single-character
.IR command ,
possibly
followed by parameters to that command.
These addresses specify one or more lines in the buffer.
Every command that requires addresses has default addresses,
so that the addresses can very often be omitted.
.PP
In general, only one command can appear on a line.
Certain commands allow the input of text.
This text is placed in the appropriate place in the buffer.
While \f4ed\fP
is accepting text, it is said to be in
.IR "input mode" .
In this mode,
no commands are recognized;
all input is merely collected.
Leave input mode by typing a period (\f4.\fP) at the
beginning of a line,
followed immediately by pressing RETURN.
.PP
\f4ed\fP
supports a limited form of
.I "regular expression"
notation;
regular expressions are used in addresses to specify
lines and in some commands
(for example,
\f4s\f1)
to specify portions of a line that are to be substituted.
A regular expression specifies
a set of character strings.
A member of this set of strings is said to be
matched by the regular expression.
The regular expressions allowed by
\f4ed\fP
are constructed as follows:
.PP
The following one-character
regular expressions match a single character:
.TP "\w'1.1\ \ \ 'u"
1.1
An ordinary character
(\c
not
one of those discussed in 1.2 below)
is a one-character regular expression
that matches itself.
.TP
1.2
A backslash (\f4\e\fP) followed by any special character is a
one-character regular expression
that matches the special character itself.
The special characters are:
.RS
.TP "\w'a.\ \ \ 'u"
a.
\&\f4.\fP,
\f4\(**\fP,
\f4[\fP,
and
\f4\e\fP (period, asterisk, left square bracket,
and backslash, respectively), which are always special,
except when they appear within square brackets (\f4[]\fP; see 1.4 below).
.TP
b.
\f4^\fP (caret or circumflex), which is special at the
beginning of a regular expression
(see 4.1 and 4.3 below),
or when it immediately follows the left of a pair of
square brackets (\f4[]\fP) (see 1.4 below).
.TP
c.
\f4$\fP (dollar sign), which is special at the
\f4end\fP of a regular expression
(see 4.2 below).
.TP
d.
The character that is special for that specific regular expression,
that is used to bound
(or delimit) a regular expression.
(For example,
see how slash (\f4/\fP) is used in the
\f4g\f1
command, below.)
.RE
.TP "\w'1.1\ \ \ 'u"
1.3
A period (\f4.\fP) is a
one-character regular expression
that matches any character, including supplementary code
set characters, except newline.
.TP
1.4
A non-empty string of characters enclosed in
square brackets (\f4[]\fP) is a
one-character regular expression
that matches
one character, including supplementary code set characters, in that string.
If, however, the first character of the string is a circumflex
(\f4^\fP), the
one-character regular expression
matches any character, including supplementary code set characters,
except newline and the remaining characters in the string.
The \f4^\fP has this special meaning
only if it
occurs first in the string.
The minus (\f4\-\fP) can be used to indicate a range of consecutive
characters, including supplementary code set characters;
for example, \f4[0\-9]\fP is equivalent to \f4[0123456789]\fP.
Characters specifying the range must be from the same code set;
when the characters are from
different code sets, one of the characters specifying the
range is matched.
The \f4\-\fP loses this special meaning if it occurs first (after
an initial \f4^\fP, if any)
or last in the string.
The right square bracket (\f4]\fP)
does not terminate such a string when it
is the first character within it (after an initial \f4^\fP, if any);
for example, \f4[]a\-f]\fP matches either a right square
bracket (\f4]\fP) or one of the
ASCII
letters \f4a\fP through \f4f\fP inclusive.
The four characters listed in 1.2.a above stand for themselves
within such a string of characters.
.PP
The following rules can be used to construct
regular expressions from one-character
regular expressions:
.TP "\w'1.1\ \ \ 'u"
2.1
A one-character regular expression
is an regular expression
that matches whatever the
one-character regular expression matches.
.TP
2.2
A one-character regular expression
followed by an asterisk (\f4\(**\fP) is a regular expression
that matches zero
or more occurrences of the
one-character regular expression,
which can be a supplementary code set character.
If there is any choice,
the longest leftmost string that permits a match is chosen.
.TP
2.3
A
one-character regular expression
followed by \f4\e{\fP\f2m\fP\f4\e}\fP,
\f4\e{\fP\f2m,\fP\f4\e}\fP,
or
\f4\e{\fP\f2m,n\fP\f4\e}\fP is a regular expression
that matches a
range
of occurrences of the
one-character regular expression.
The values of
.I m
and
.I n
must be non-negative integers less than 256;
\f4\e{\fP\f2m\fP\f4\e}\fP
matches
exactly
.I m
occurrences;
\f4\e{\fP\f2m,\fP\f4\e}\fP
matches
at least
.I m
occurrences;
\f4\e{\fP\f2m,n\fP\f4\e}\fP
matches
any number
of occurrences
between
.I m
and
.I n
inclusive.
Whenever a choice exists,
the
regular expression
matches as many occurrences as possible.
.TP
2.4
The concatenation of
regular expressions
is an regular expression
that matches the concatenation of the strings
matched by each component of the regular expression.
.TP
2.5
A regular expression
enclosed between the character sequences
\f4\e(\fP and \f4\e)\fP
defines a sub-expression
that matches whatever the unadorned
regular expression matches.
Inside a sub-expression the anchor characters ((\f4^\fP) and (\f4$\fP))
have no special meaning and match their respective
literal characters.
.TP
2.6
The expression \f4\e\fP\f2n\fP matches the same string of characters
as was
matched by an expression enclosed between \f4\e(\fP and \f4\e)\fP
earlier
in the same regular expression.
Here
.I n
is a digit;
the sub-expression specified is that beginning with the
.IR n -th
occurrence of \f4\e(\fP counting from the left.
For example, the expression ^\f4\e(.\(**\e)\e1$\fP matches a line
consisting of two repeated appearances of the same string.
.PP
A regular expression can be constrained to match words.
.TP "\w'1.1\ \ \ 'u"
3.1
\f4\\<\fP constrains a regular expression to match the beginning of a string or to follow
a character that is not a digit, underscore, or letter.
The first character matching the regular expression must be a digit,
underscore, or letter.
.TP
3.2
\f4\\>\fP constrains a regular expression to match the end of a
string or to precede
a character that is not a digit, underscore, or letter.
.PP
A regular expression
can be constrained to match only an initial segment or final segment
of a line (or both).
.TP "\w'1.1\ \ \ 'u"
4.1
A circumflex (\f4^\fP) at the beginning of a
regular expression
constrains that regular expression to match an
initial
segment of a line.
.TP
4.2
A dollar sign (\f4$\fP)
at the end of an
entire regular expression
constrains that
regular expression
to match a
final segment of a line.
.TP
4.3
The construction
\f4^\fP\f2regular expression\fP\f4$\fP
constrains the
regular expression
to match the entire line.
.PP
The null regular expression (for example, \f4//\fP)
is equivalent to the last regular expression encountered.
See also the last paragraph of the DESCRIPTION section below.
.PP
To understand addressing in
\f4ed\fP
it is necessary to know that at any time there is a
.IR "current line" .
Generally speaking, the current line is
the last line affected by a command;
the exact effect on the current line
is discussed under the description of
each command.
.I addresses
are constructed as follows:
.TP 5
\01.
The character \f4.\fP addresses the current line.
.TP
\02.
The character \f4$\fP addresses the last line of the buffer.
.TP
\03.
A decimal number
.I n
addresses the
.IR n -th
line of the buffer.
.TP
\04.
\f2\(fmx\fP addresses the line marked with the
mark name character
.IR x ,
which must be a lower-case letter
\f1(\f4a\f1\-\f4z\f1).
Lines are marked with the
\f4k\f1
command described below.
.TP
\05.
A regular expression enclosed by slashes (\f4/\fP) addresses
the first line found by searching
forward from the line
following the current line
toward the end of the
buffer and stopping at the first line containing a
string matching the regular expression.
If necessary, the search wraps around to the beginning of the
buffer
and continues up to and including the current line, so that the entire
buffer is searched.
See also the last paragraph of the DESCRIPTION section below.
.TP
\06.
A regular expression enclosed in question marks (\f4?\fP) addresses
the first line found by searching
backward from the line
preceding the current line
toward the beginning of
the buffer and stopping at the first line containing
a string matching the regular expression.
If necessary,
the search wraps around to the end of the buffer
and continues up to and including the current line.
See also the last paragraph of the DESCRIPTION section below.
.TP
\07.
An address followed by a plus sign (\f4+\fP)
or a minus sign (\f4\-\fP) followed by a decimal number specifies that address plus
(respectively minus) the indicated number of lines.
A shorthand for \f4.+5\fP is \f4.5\fP.
.TP
\08.
If an address begins with \f4+\fP or \f4\-\fP,
the addition or subtraction is taken with respect to the current line;
for example, \f4\-5\fP is understood to mean \f4.\-5\fP.
.TP
\09.
If an address ends with \f4+\fP or \f4\-\fP,
1 is added to or subtracted from the address, respectively.
As a consequence of this rule and of Rule 8, immediately above,
the address \f4\-\fP refers to the line preceding the current line.
(To maintain compatibility with earlier versions of the editor,
the character \f4^\f1 in addresses is entirely
equivalent to \f4\-\fP.)
Moreover,
trailing
\f4+\fP and \f4\-\fP characters
have a cumulative effect, so \f4\-\-\fP refers to the current
line less 2.
.TP
10.
For convenience, a comma (\f4,\fP) stands for the
address pair \f41,$\fP,
while a semicolon (\f4;\fP) stands for the
pair \f4.,$\fP.
.PP
Commands may require zero, one, or two addresses.
Commands that require no addresses regard the presence
of an address as an error.
Commands that accept one or two addresses
assume default addresses when an insufficient number of addresses is given;
if more addresses are given than such a command requires,
the last one(s) are used.
.PP
Typically, addresses are separated from each other by a comma
(\f4,\fP).
They can also be separated by a semicolon
(\f4;\fP).
In the latter case,
the first address is calculated,
the current line (.) is set to that value,
and then
the second address is calculated.
This feature can be used to determine the starting
line for forward and backward searches (see Rules 5 and 6, above).
The second address of any two-address sequence
must correspond to a line in the buffer that follows
the line corresponding to the first address.
.PP
In the following list of
\f4ed\fP
commands, the parentheses shown prior to the command are
not part of
the address; rather they show the default address(es)
for the command.
.PP
It is generally illegal for more than one
command to appear on a line.
However, any command
(except
\f4e\f1,
\f4f\f1,
\f4r\f1,
or
\f4w\f1)
can be suffixed by \f4l\fP, \f4n\fP,
or \f4p\fP in which case
the current line is either
listed, numbered or printed, respectively,
as discussed below under the
\f4l\f1,
\f4n\f1,
and
\f4p\f1
commands.
.HP
\f4(.)a\f1
.br
.ns
.HP
.I text
.br
.ns
.HP
.if t .rs
.if t .sp -.5v
\&\f4.\fP
.br
The
\f4a\f1ppend
command accepts zero or more lines of text
and appends it after the addressed line in the buffer.
The current line (\&\f4.\fP) is left
at the last inserted line, or, if there
were none, at the addressed line.
Address 0 is legal for this command: it causes the ``appended'' text
to be placed
at the beginning of the buffer.
The maximum number of bytes that can be entered from a
terminal is 256 per line (including the newline character).
.HP
\f4(.)c\f1
.br
.ns
.HP
.I text
.br
.ns
.HP
.if t .rs
.if t .sp -.5v
\&\f4.\fP
.br
The
\f4c\f1hange
command deletes the addressed lines from the buffer, then accepts zero
or more lines of
text that replaces these lines in the buffer.
The current line (\&\f4.\fP) is left at the last line input, or,
if there were none,
at the first line that was not deleted.
.HP
\f4C\f1
.br
Same as the
\f4X\f1
command, described later, except that
\f4ed\fP
assumes all text read in for the
\f4e\f1
and
\f4r\f1
commands is encrypted unless a null key is typed in.
.HP
\f4(.,.)d\f1
.br
The
\f4d\f1elete
command deletes the addressed lines from the buffer.
The line after the last line deleted becomes the current line;
if the lines deleted were originally at the end of the buffer,
the new last line becomes the current line.
.HP
\f4e\f2 file\f1
.br
The
\f4e\f1dit
command deletes the entire contents of the buffer
and then reads the contents of \f2file\f1 into the buffer.
The current line (\&\f4.\fP) is set to the last line of the buffer.
If \f2file\f1 is not given, the currently remembered filename, if any, is used
(see the
\f4f\f1
command).
The number of characters read in is printed;
.I file
is remembered for possible use as a default filename
in subsequent
\f4e\f1,
\f4r\f1,
and
\f4w\f1
commands.
If
.I file
is replaced by \f4!\fP, the rest of the line
is taken to be a
shell (\f4sh\fP(1))
command whose output is to be read in.
Such a shell command is not
remembered as the current filename.
See also
DIAGNOSTICS
below.
If
.I file
is replaced by \f4%\fP,
and if additional
\f2file\fP
arguments were specified on the command line,
the next
filename specified
on the command line is used.
.HP
\f4E\f2 file\f1
.br
The
\f4E\f1dit
command is like
\f4e\f1,
except that the editor does not check to see
if any changes have been made to the buffer since
the last
\f4w\f1
command.
.HP
\f4f\f2 file\f1
.br
If
.I file
is given,
the
\f4f\f1ile-name
command changes
the currently remembered filename to
.IR file ;
otherwise, it prints the currently remembered filename.
.HP
\f4(1,$)g/\f2regular expression\f4/\f2command list\f1
.br
In the
\f4g\f1lobal
command, the first step is to mark every line that matches
the given
regular expression.
Then, for every such line, the
given
.I "command list"
is executed with the current line (\f4.\fP) initially set to that line.
A single command or the first of a list of commands
appears on the same line as the global command.
All lines of a multi-line list except the last line
must be ended with a \f4\e\fP;
\f4a\f1,
\f4i\f1,
and
\f4c\f1
commands and associated input are permitted.
The \f4.\fP terminating input mode can be omitted if it would be the
last line of the
.IR "command list" .
An empty
.I "command list"
is equivalent to the
\f4p\f1
command.
The
\f4g\f1,
\f4G\f1,
\f4v\f1,
and
\f4V\f1
commands are not permitted in the
.IR "command list" .
See also the
NOTES
section and the last paragraph of the DESCRIPTION section below.
.HP
\f4(1,$)G/\f2regular expression\f4/\f1
.br
In the interactive
\f4G\f1lobal
command, the first step
is to mark every line that matches the given
regular expression.
Then, for every such line, that line is printed,
the current line (\f4.\fP) is changed to that line, and
any one command (other than one of the
\f4a\f1,
\f4c\f1,
\f4i\f1,
\f4g\f1,
\f4G\f1,
\f4v\f1,
and
\f4V\f1
commands)
can be input and is executed.
After the execution of that command, the next marked line is printed, and so on;
a newline acts as a null command;
an \f4&\fP causes the re-execution of the most recent command executed within
the current invocation of
\f4G\f1.
Note that the
commands input
as part of the execution of the
\f4G\f1
command can address and affect any
lines in the buffer.
The
\f4G\f1
command can be terminated by an interrupt signal (ASCII DEL or BREAK).
.HP
.br
\f4h\f1
.br
The
\f4h\f1elp
command gives a short error message that explains
the reason for the most recent \f4?\fP diagnostic.
.HP
\f4H\f1
.br
The
\f4H\f1elp
command causes
\f4ed\fP
to enter a mode in which error messages are
printed for all subsequent \f4?\fP diagnostics.
It also explains the previous \f4?\fP if
there was one.
The
\f4H\f1
command alternately turns this mode
on and off; it is initially off.
.HP
\f4(.)i\f1
.br
.ns
.HP
.I text
.br
.ns
.HP
.if t .rs
.if t .sp -.5v
\&\f4.\fP
.br
The
\f4i\f1nsert
command accepts zero or more lines of text and
inserts it before the addressed line in the buffer.
The current line (\&\f4.\fP) is left at the last inserted line, or,
if there were none,
at the addressed line.
This command differs from the
\f4a\f1
command only in the placement of the
input
text.
Address 0 is not legal for this command.
The maximum number of characters that can be entered from a
terminal is 256 per line (including the newline character).
.HP
\f4(.,.+1)j\f1
.br
The
\f4j\f1oin
command joins contiguous lines by removing the appropriate newline characters.
If exactly one address is given, this command does nothing.
.HP
\f4(.)k\f2x\f1
.br
The mar\f4k\fP command marks the addressed line with name
.IR x ,
which must be a lower-case letter
\f1(\f4a\f1\-\f4z\f1).
The address \f2\(fmx\fP then addresses this line;
the current line (\&\f4.\fP) is unchanged.
.HP
\f4(.,.)l\f1
.br
The
\f4l\f1ist
command
prints the addressed lines in an unambiguous way:
a few non-printing characters (for example,
tab, backspace)
are represented by visually mnemonic overstrikes.
All other non-printing
characters are
printed in octal,
and long lines are folded.
An
\f4l\f1
command can be appended to any command
other than
\f4e\f1,
\f4f\f1,
\f4r\f1,
or
\f4w\f1.
.HP
\f4(.,.)m\f2a\f1
.br
The
\f4m\f1ove
command repositions the addressed line(s) after the line
addressed by
.IR a .
Address \f40\fP is legal for
.I a
and causes the addressed line(s) to be moved to
the beginning of the file.
It is an error if address
.I a
falls within the range of moved lines;
the current line (\&\f4.\fP) is
left at the last line moved.
.HP
\f4(.,.)n\f1
.br
The
\f4n\f1umber
command prints the addressed lines,
preceding each line by its
line number and a tab character;
the current line (\&\f4.\fP) is
left at the last line printed.
The
\f4n\f1
command
can
be appended to any command
other than
\f4e\f1,
\f4f\f1,
\f4r\f1,
or
\f4w\f1.
.HP
\f4(.,.)p\f1
.br
The
\f4p\f1rint
command prints the addressed lines;
the current line (\&\f4.\fP) is
left at the last line printed.
The
\f4p\f1
command
can
be appended to any command
other than
\f4e\f1,
\f4f\f1,
\f4r\f1,
or
\f4w\f1.
For example, \f4dp\fP
deletes the current line and prints the
new current line.
.HP
.br
\f4P\f1
.br
The editor prompts with a \f4\(**\fP for
all subsequent commands.
The
\f4P\f1
command alternately turns this mode on and off; it is
initially off.
.HP
\f4q\f1
.br
The
\f4q\f1uit
command causes
\f4ed\fP
to exit.
No automatic write
of a file is done;
however, see
DIAGNOSTICS
below.
.HP
.br
\f4Q\f1
.br
The editor exits without
checking if changes have been made in the buffer since the
last
\f4w\f1
command.
.HP
\f4($)r\f2 file\f1
.br
The
\f4r\f1ead
command
reads the contents of \f2file\f1 into the buffer.
If \f2file\f1 is not given,
the currently remembered filename, if any, is used
(see the
\f4e\f1
and
\f4f\f1
commands).
The currently remembered filename is not
changed unless
.I file
is the very first filename
mentioned
since
\f4ed\fP
was invoked.
Address 0 is legal for
\f4r\f1
and causes the
file to be read in at the beginning of the buffer.
If the read is successful, the number of characters
read in is printed;
the current line (\&\f4.\fP) is set to the last line read in.
If
.I file
is replaced by \f4!\fP, the rest of the line
is taken to be a
shell (see \f4sh\fP(1))
command whose output is to be read in.
For example,
\f4$r !ls\fP
appends current directory
to the end of the file being edited.
Such a shell command is not
remembered as the current filename.
.HP
\f4(.,.)s/\f2regular expression\f4/\f2replacement\f4/\f1
\ \ \ \ \ \ \ \ or
.br
.ns
.HP
\f4(.,.)s/\f2regular expression\f4/\f2replacement\f4/g\f1
\ \ \ \ \ \ \ or
.br
.ns
.HP
\f4(.,.)s/\f2regular expression\f4/\f2replacement\f4/\f2n\f1
\ \ \ \ \ \ \ \f2n\fP = 1-512
.br
The
\f4s\f1ubstitute
command searches each addressed
line for an occurrence of the specified regular expression.
In each line in which a match is found,
all (non-overlapped) matched strings are
replaced by the
.I replacement
if the global replacement indicator \f4g\fP appears after the command.
If the global indicator does not appear, only the first occurrence
of the matched string is replaced.
If a number
.IR n ,
appears after the command, only the
.IR n -th
occurrence of the matched string on each addressed line is replaced.
It is an error if the substitution fails on
all addressed lines.
Any character other than space or newline
can be used instead of \f4/\fP to delimit the regular expression
and the
.IR replacement ;
the current line (\&\f4.\fP) is left at the last line on which
a substitution occurred.
See also the last paragraph of the DESCRIPTION section below.
.IP
An ampersand (\f4&\fP) appearing in the
.I replacement
is replaced by the string matching the regular expression on the current line.
The special meaning of \f4&\fP in this context can be
suppressed by preceding it by \f4\e\fP.
As a more general feature,
the characters
\f4\e\fP\f2n\fP,
where
.I n
is a digit,
are replaced by the text matched by the
.IR n -th
regular subexpression
of the specified regular expression
enclosed between \f4\e(\fP and \f4\e)\fP.
When
nested parenthesized subexpressions
are present,
.I n
is determined by counting occurrences of \f4\e(\fP starting from the left.
When the character \f4%\fP is the only character
in the
.IR replacement ,
the
.I replacement
used in the most recent substitute
command is used as the
.I replacement
in the current substitute command.
The \f4%\fP loses its special meaning when it is
in a replacement string of more than one
character or is preceded by a \f4\e\fP.
.IP
A line can be split by substituting a newline character into it.
The newline in the
.I replacement
must be escaped by preceding it by \f4\e\fP.
Such substitution cannot be done as part of a
\f4g\f1
or
\f4v\f1
command list.
.HP
\f4(.,.)t\f2a\f1
.br
This command acts just like the
\f4m\f1
command, except that a
copy of the addressed lines is placed after address
\f4a\f1
(which can be 0);
the current line (\f4.\fP) is left at the last line copied.
.HP
\f4u\f1
.br
The
\f4u\f1ndo
command nullifies the effect of the most recent
command that modified anything in the buffer, namely
the most recent
\f4a\f1,
\f4c\f1,
\f4d\f1,
\f4g\f1,
\f4i\f1,
\f4j\f1,
\f4m\f1,
\f4r\f1,
\f4s\f1,
\f4t\f1,
\f4v\f1,
\f4G\f1,
or
\f4V\f1
command.
.HP
\f4(1,$)v/\f2regular expression\f4/\f2command list\f1
.br
This command is the same as the global command
\f4g\f1,
except that the
lines marked during the first step are those that do not match the regular expression.
.HP
\f4(1,$)V/\f2regular expression\f4/\f1
.br
This command is the same as the interactive global command
\f4G\f1,
except
that the lines that are marked during the first step are those that do not
match the regular expression.
.HP
\f4(1,$)w\f2 file\f1
.br
The
\f4w\f1rite
command writes the addressed lines into \f2file\f1.
If \f2file\f1 does not exist,
it is created with mode \f4666\fP (readable and writable by everyone),
unless your
file creation mask
dictates otherwise; see the description of the
\f4umask\f1
special command on
\f4sh\fP(1).
The currently remembered filename is not
changed unless
.I file
is the very first filename mentioned since
\f4ed\fP
was invoked.
If no filename is given,
the currently remembered filename, if any, is used
(see the
\f4e\f1
and
\f4f\f1
commands);
the current line (\&\f4.\fP) is unchanged.
If the command is successful, the number of characters written is
printed.
If
.I file
is replaced by \f4!\fP, the rest of the line
is taken to be a
shell (see \f4sh\fP(1))
command whose standard input is the addressed lines.
Such a
shell
command is not
remembered as the current filename.
.HP
\f4(1,$)W\f2 file\f1
.br
This command is the same as the
\f4w\f1rite
command above, except that it appends the
addressed lines
to the end of
.I file
if it exists.
If
.I file
does not exist, it is created
as described above for the \f4w\f1 command.
.HP
\f4X\f1
.br
A key is prompted for, and it is used in
subsequent
\f4e\f1,
\f4r\f1,
and
\f4w\f1
commands to decrypt
and encrypt text using the
\f4crypt\fP(1)
algorithm.
An educated guess is made to determine whether
text read in for the
\f4e\f1
and
\f4r\f1
commands is encrypted.
A null key turns off encryption.
Subsequent
\f4e\f1,
\f4r\f1,
and
\f4w\f1
commands use this key to encrypt or decrypt the text
(see
\f4crypt\fP(1)).
An explicitly empty key turns off encryption.
Also, see the
\f4\-x\f1
option of
\f4ed\fP.
.HP
\f4($)=\f1
.br
The line number of the addressed line is typed;
the current line (\f4.\fP) is unchanged by this command.
.HP
\f4!\f2shell command\f1
.br
The remainder of the line after the \f4!\fP is sent
to the
UNIX
system shell (see \f4sh\fP(1)) to be interpreted as a command.
Within the text of that command, the unescaped character
\f4%\f1
is replaced with the remembered filename;
if a
\f4!\f1 appears as the first character of the shell command,
it is replaced with the text of the previous shell command.
Thus,
\f4!!\f1 repeats the last shell command.
If any expansion is performed, the expanded line is echoed;
the current line (\&\f4.\fP) is unchanged.
.br
.ne 5
.HP
\f4(.+1)\f1<newline>
.br
An address alone on a line causes the addressed line to be printed.
A newline alone is equivalent to \f4.+1p\fP; it is useful
for stepping forward through the buffer.
.PP
If an interrupt signal (ASCII DEL or BREAK) is sent,
\f4ed\fP
prints a \f4?\fP and returns to
its command level.
.PP
Some size limitations:
512 bytes in a line,
256 bytes in a global command list,
and 1024 bytes in the pathname of a file
(counting slashes).
The limit on the number of lines depends on the amount of user memory:
each line takes 1 word.
.PP
When reading a file,
\f4ed\fP
discards
ASCII
NUL
characters.
.PP
If a file is not terminated by a newline character,
\f4ed\f1
adds one and puts out a message explaining what it did.
.PP
If the closing delimiter of a regular expression or of a
replacement string (for example, \f4/\fP) would be the last
character before a newline,
that delimiter can be omitted, in
which case the addressed line
is printed.
The following pairs of commands are equivalent:
.sp .8v
.RS
.TS
lf4w(.75i) lf4.
s/s1/s2	s/s1/s2/p
g/s1	g/s1/p
?s1	?s1?
.TE
.RE
.br
.SH FILES
.PD 0
.TP 11
\f4$TMPDIR\f1
if this environmental variable is not null,
its value is used in place of
\f4/var/tmp\f1
as the directory name for the temporary work file
.TP
\f4/var/tmp\fP
if
\f4/var/tmp\f1
exists, it is used as the directory name for the
temporary work file
.TP
\f4/tmp\fP
if the environmental variable
\f4TMPDIR\f1
does not exist or is null, and if
\f4/var/tmp\f1
does not exist,
\f4/tmp\f1
is used as the directory name for the temporary work file
.TP
\f4ed.hup\fP
work is saved here if the terminal is hung up
.TP
\f4/usr/lib/locale/\f2locale\f4/LC_MESSAGES/uxcore.abi\f1
language-specific message file (see \f4LANG\fP in \f4environ\f1 (5))
.PD
.SH "SEE ALSO"
edit(1),
ex(1),
grep(1),
sed(1),
sh(1),
stty(1),
umask(1),
vi(1),
fspec(4),
regexp(5).
.SH DIAGNOSTICS
.TP 8
\f4?\f1
Command errors.
Type the \f4h\f1 command for a short error message.
.TP
\f4?\f2file\f1
An inaccessible file.
(Use the
\f4h\f1elp
and
\f4H\f1elp
commands for detailed explanations.)
.PP
If changes have been made in the buffer since the last
\f4w\f1
command that wrote the entire buffer,
\f4ed\fP
warns the user if an attempt is made to destroy
\f4ed\fP's
buffer via the
\f4e\f1
or
\f4q\f1
commands.
It
prints
\f4?\f1
and
allows one to continue editing.
A second
\f4e\f1
or
\f4q\f1
command
at this point takes effect.
The \f4\-s\fP command-line option inhibits this feature.
.SH NOTES
The
\f4\-\f1
option, although it continues to be supported,
has been replaced in the documentation by the
\f4\-s\f1
option that follows the
Command Syntax Standard
(see
\f4intro\fP(1)).
.PP
A
\f4!\f1 command cannot be subject to a
\f4g\f1
or a
\f4v\f1
command.
.PP
The
\f4!\f1 command
and the
\f4!\f1 escape from the
\f4e\f1,
\f4r\f1,
and
\f4w\f1
commands
cannot be used if the editor is invoked from a restricted
shell (see \f4sh\fP(1)).
.PP
The sequence \f4\en\fP in a regular expression does not
match a newline character.
.PP
If the editor input is coming from a command file (for example,
\f4ed \f2file \f4<\f2 ed_cmd_file \f1),
the editor exits at the first failure.
