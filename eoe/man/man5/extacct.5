.TH extacct 5
.SH NAME
extacct \- introduction to IRIX extended accounting features
.SH DESCRIPTION
The accounting done by IRIX has traditionally been process oriented: a new
accounting record is produced for each process that has been run,
containing statistics about the resources used by that individual process.
Although this is fine for sites with average workloads, it can be too
grainy for sites that have large amounts of traffic, with the result that
the accounting files quickly become too large and unmanageable.
Since accounting is typically employed to charge individual projects or
departments for overall resource utilization, it would often be sufficient
to simply summarize the resource usage of an entire login session or batch
job.
This could cut down significantly on the amount of disk space
required for accounting data.
Therefore, IRIX provides a feature to
perform accounting by array session, in which each accounting record that
is written contains the accumulated statistics for all of the processes
that were part of that array session.
This is in addition to
process-level accounting, not in place of it; the two accounting modes are
separately controlled so it is possible to have either, both, or neither
style of accounting enabled.
.PP
The data that is collected and reported for array sessions is a superset
of the data that is reported by the traditional process accounting
facility.
In particular, the following items are reported for array
sessions but not reported by traditional process accounting:
.PP
.PD 0
.TP 3
*
Array session handle (see \f2array_sessions\fP(5))
.TP
*
Service provider information (see \f2array_sessions\fP(5))
.TP
*
Project ID (see \f2projects\fP(5))
.TP
*
Number of swaps
.TP
*
Number of bytes read, number of bytes written (separately)
.TP
*
Number of read requests, number of write requests
.TP
*
Time spent waiting for block I/O
.TP
*
Time spent waiting for raw I/O
.TP
*
Time spent waiting on the run queue
.PD
.PP
Some of this information would also be useful for sites that otherwise
make use of process accounting.
Therefore, a second type of process
accounting, "extended process accounting", is provided by IRIX.
Again, it is controlled separately from session accounting or
traditional process accounting.
.PP
IRIX writes session and extended process accounting data using the System
Audit Trail (SAT) facility.
This is different from traditional process
accounting, which typically writes its data to the file
\f2/var/adm/pacct\fP.
Audit data is collected directly from the kernel by
the \f2satd\fP(1M) program, then either written directly to files or else
passed on to other filters or postprocessing programs.
To include accounting records in the audit data, it is necessary to enable
the audit events \f3sat_proc_acct\fP (for extended process accounting records)
and/or \f3sat_session_acct\fP (for session accounting records).
This can be done using the \f2satconfig\fP(1M) or \f2sat_select\fP(1M)
commands.
If the audit facility is not being used for any purpose other than
accounting, no other events need to be enabled.
For more information on configuring the audit facility, see the
\f2IRIX Admin: Backup, Security, and Accounting\f1 guide.
.PP
Session accounting records can be written in two formats, differing
only in the treatment of service provider information.
In IRIX 6.4 and earlier, the service provider information for an
array session was always exactly 64 bytes in length, while starting
with IRIX 6.5 it could potentially vary from 0 to 1024 bytes
in length.
In "session accounting format 1" (the system default, and the
format supported in IRIX 6.4 and earlier), exactly 64 bytes of
service provider information will be reported for each array
session.
If in fact the array session has fewer than 64 bytes of service
provider information associated with it, then it will be padded
at the end with zeroes.
Likewise, if it has more than 64 bytes of service provider information,
the 65th and subsequent bytes will be truncated.
In "session accounting format 2", the exact number of bytes of
service provider information associated with the array session
will be reported, along with a field specifying this length.
In this case, it is possible for session accounting records to
have varying lengths, but there will be no loss of data.
The session accounting format can be changed dynamically by the
superuser using the \f2arsctl\fP(2) system call or the \f2xactl\fP(1M)
program.
It can also be set for boot time be changing the kernel variable
\f3sessaf\f1 using the \f2systune\f1(1M) program.
.PP
Note that the utility programs for traditional SVR4
process accounting (for example,
\f2acctcms\fP, \f2acctmerg\fP, and \f2turnacct\fP) do \f2not\f1
function with the extended process accounting or session accounting data.
It is possible to convert extended accounting data into
the SVR4 format (see the \f2acctcvt\f1(1) program for details),
but the metrics that are unique to extended accounting will be lost.
Software to process unmodified extended accounting data is available
from independent software vendors.
The format of the audit data files themselves are described in
the system header files \f2sys/sat.h\fP and \f2sys/extacct.h\fP.
.PP
Like any accounting or monitoring package, the extended process accounting
and session accounting features do contribute to overall
system overhead.
For this reason, they are disabled in the kernel by
default.
To enable these features, use the \f2systune\fP(1M) program to
modify either or both of these variables:
.PP
.TP 14
\f3do_sessacct\fP
Enables session accounting if non-zero
.TP
\f3do_extpacct\fP
Enables extended process accounting if non-zero
.SH INSTALLATION SUMMARY
The following steps are required to set up session or
extended process accounting:
.TP 3
*
Enable session and/or extended process accounting in the kernel by using
the \f2systune\fP(1M) utility to set the \f3do_sessacct\fP and/or
\f3do_extpacct\fP parameters to non-zero values.
.TP
*
Use the \f2inst\fP(1M) utility to install the \f2eoe.sw.audit\fP
subsystem from your IRIX distribution media.
This will add the special
components required for the system audit trail facility to your system.
It will be necessary to reboot the system after completing this step.
.TP
*
Enable the audit facility in general by using the \f2chkconfig\fP(1M)
utility as follows:
.IP
.RS
	\f4chkconfig audit on\f1
.RE
.TP 3
*
Use the \f2satconfig\fP program to enable the \f3sat_proc_acct\fP and/or
\f3sat_session_acct\fP audit events.
If the audit facility is being used
only for accounting purposes, all other events can be turned off to
conserve disk space.
.SH NOTES
The format of the data stream generated by the System Audit Trail
facility changed between IRIX 6.2 and IRIX 6.4, then again between
IRIX 6.4 and IRIX 6.5.
Therefore, software that was designed to read accounting data from
one of those earlier IRIX releases may not work with more recent
IRIX releases (and vice versa).
To help address this situation, the \f2acctcvt\f1(1) program can be
used to convert data files or even the audit data stream (when used as a
filter) from one format to another.
.SH SEE ALSO
acctcvt(1),
audit(1M),
sat_select(1M),
satconfig(1M),
satd(1M),
systune(1M),
xactl(1M),
arsctl(2),
arsop(2),
array_sessions(5),
audit_filters(5),
projects(5).
.PP
\f2IRIX Admin: Backup, Security, and Accounting\f1
