'\"macro stdmacro
.nr X
.if \nX=0 .ds x} PMLAUNCH 5 "Performance Co-Pilot" "\&"
.if \nX=1 .ds x} PMLAUNCH 5 "Performance Co-Pilot"
.if \nX=2 .ds x} PMLAUNCH 5 "" "\&"
.if \nX=3 .ds x} PMLAUNCH "" "" "\&"
.TH \*(x}
.SH NAME
\f3pmlaunch\f1 \- metric specification and scripts for launching other tools
.\" literals use .B or \f3
.\" arguments use .I or \f2
.SH SYNOPSIS
.nf
.I /var/pcp/config/pmlaunch/pmlaunch.common
.I /var/pcp/config/pmlaunch/pmlaunchrc
.I $HOME/.pcp/pmlaunch/pmlaunchrc
.fi
.SH DESCRIPTION
This page describes a metrics specification format and a set of scripts that can
be used by tools to facilitate launching, and being launched by, other tools
which have no knowledge of each other.
.PP
The intended use is for performance tools that are part of, or
associated with, Performance Co-Pilot (PCP).
.PP
A script for the target tool parses the metrics specification and
generates command line options and/or configuration files for the appropriate
metrics.
For example, 
.BR pmview (1)
will use the same metrics specification when launching tools such as
.BR pmchart (1),
.BR pmgsys (1)
etc., without any knowledge of how these tools will visualize those metrics.
.SH LAUNCH MENUS
The launch menu of tools which support the
.B pmlaunch
metrics specification can be configured to include any selection of IRIX,
PCP or other tools.
.PP
The launching tool will search 
.I /var/pcp/config/pmlaunch/pmlaunchrc
and
.IB $HOME/.pcp/pmlaunch/pmlaunchrc
for a list of tools that can be launched. The first line of the file specifies
the version of 
.B pmlaunch
that this file conforms to. The following lines should
contain the menu button name followed by the path to a launching script or
program, including any arguments.
.PP
For example, the default 
.I /var/pcp/config/pmlaunch/pmlaunchrc
will contain:
.PP
.in 1.0i
.ft CW
.nf
pmlaunch Version 2.0

dkvis           _pmview_frontend dkvis
mpvis           _pmview_frontend mpvis
nfsvis          _pmview_frontend nfsvis
pmchart         _pmchart
pmgsys          _pmgadgets_frontend pmgsys
pmkstat         _pmkstat
pmval           _pmval
.fi
.ft R
.in
.PP
Empty lines and lines which begin with a ``#'' are ignored.
.PP
Menu items with identical names in the second
.I pmlaunchrc
file will replace the corresponding entries in the first file.
.PP
The launching tool will search for the launching script in the directory
specified in the environment variable
.BR PM_LAUNCH_PATH ,
or
.I /var/pcp/config/pmlaunch
if it is not set.
.PP
For example, the launch menu of
.BR pmview (1)
will contain the entries
.IR dkvis , 
.IR mpvis , 
.IR nfsvis ,
.IR pmchart , 
.IR pmgsys , 
.I pmkstat
and
.IR pmval .
If a user selects
.IR nfsvis ,
the script 
.I _pmview_frontend
is executed with the argument
.IR nfsvis .
.PP
.I /var/pcp/config/pmlaunch/pmlaunchrc
is automatically updated by PCP products as new tools
become available using the script
.IR /var/pcp/config/pmlaunch/mk.rc .
.PP
The remainder of this man page describes the metrics specification format, and the
shell procedures that are provided for extracting the relevant information to
build a launching script for any tool.
.SH METRICS SPECIFICATION FORMAT
The metrics specification which is generated by the launching tool contains the
minimal information required to display information related to the source,
domain, color, visual and value semantics, scale and groupings of a collection
of performance metrics.
.PP
To manage later configuration file revisions, the first line of the
configuration file should be
.PP
.in 1.0i
.ft CW
.nf
pmlaunch Version 2.0
.fi
.ft R
.in
.PP
All empty lines, or lines beginning with a ``#'' are ignored. A newline
character separates each statement.
.PP
To permit tools to convey update intervals, and other PCP
specific information, a set of options may be specified with the syntax:
.PP
.in 1.0i
.ft CW
.nf
option \f2variable\f1=\f2string\f1
.fi
.ft R
.in
.PP
Any 
.IR variable s
that are specified are converted to shell variables by the shell procedure
.BR launch_var .
The following
.IR variable s
are commonly used between PCP tools, and should have values
that may be used in the corresponding command line argument. An option without
a value is equivalent to not setting the variable.
.TP 7
\f3debug\f1
The current debugging flag used by the launching tool which is passed to the
target tool as a command line option.  Therefore, valid values should be a
combination of flags identified by 
.BR pmdbg (1).
Usually associated with a
.B \-D
option to PCP tools.
.TP
\f3namespace\f1
The PCP namespace used by the launching tool.
Usually associated with a
.B \-n
option to PCP tools.
.TP
\f3timeport\f1
The identification of the port used for the time controls (see
.BR pmtime (1)).
Usually associated with a
.B \-p
option to PCP tools that use
.BR pmtime (1).
.TP
\f3starttime\f1
The starting time of the application in the currently fetched contexts. In most
cases, this will be the current time on the host/s in live mode, or in the
archive/s.  See
.BR PCPIntro (1)
for a description of time formats.
Usually associated with a
.B \-S
option to PCP tools.
.TP
\f3endtime\f1
The finishing time of the application.  This is normally only used with
archives. See
.BR PCPIntro (1)
for a description of time formats.
Usually associated with a
.B \-T
option to PCP tools.
.TP
\f3offset\f1
The starting time as an offset from the
.BR starttime .
See
.BR PCPIntro (1)
for a description of time formats.
Usually associated with a
.B \-O
option to PCP tools.
.TP
\f3interval\f1
The update interval of the launching application in seconds.
Usually associated with a
.B \-t
option to PCP tools.
.TP
\f3progname\f1
The name of the launching tool.
.TP
\f3pid\f1
The process ID of the launching tool.
.TP
\f3selected\f1
The metrics are based on a selection in the launching
tool if this is set to
.BR true .
.TP
\f3timezone\f1
The timezone currently in use by the launching tool.
.TP
\f3defsourcetype\f1
The type of the default metrics source in use by the launching tool
(either
.B h
or
.BR a ).
.TP
\f3defsourcename\f1
The name of the default metrics source in use by the launching tool
(i.e. the name of a host or an archive).
Usually associated with either the
.B \-a
or
.B \-h
options to PCP tools.
.PP
The launching scripts for a particular application have the option to use or
ignore these variables as required.
.PP
The target PCP and IRIX tools may be static or
dynamically configurable. Therefore, a reasonable amount of information about
each metric is required in the metrics specification so that all possible
launching scripts can extract what they require.
A metric specification must be of this format:
.PP
.in 1.0i
.ft CW
.nf
\f3metric\f1 \f2metric_id\f1 \f2group_id\f1 \f2group_hint\f1 \f2context\f1 \f2source\f1 \f2host_info\f1
\f2name\f1 \f2color_spec\f1 \f2type\f1 \f2semantics\f1 \f2scale\f1 \f2dimension\f1 \f2indom\f1 \f3[\f2instance\f3]\f1
.fi
.ft R
.in
.PP
The 
.I metric_id
uniquely identifies the metric within the configuration file, so an
error is generated if another metric has the same number.  Ideally, the
metric's internal PMID should be used, but is not required (see
.BR PCPIntro (1)).
.PP
Metrics with the same
.I group_id
should, where possible, be visualized together.  The
.I group_hint
gives a hint as to how they should be visualized.  Hints which could be given
include:
.TP 7
\f3none\f1
Indicates that there is no appropriate hint.
.TP
\f3point\f1
Each metric has its own plot.  For example, a line in
.BR pmchart (1).
.TP
\f3stack\f1
The metrics are stacked in a bar plot.
.TP
\f3util\f1
The metrics are stacked in a utilization plot which is always scaled to 100%.
.PP
The metric
.I context
may have one of two values, 
.RB `` h ''
or
.RB `` a ''
indicating either a host or an archive. The host or archive should be specified
in the 
.IR source .
The
.I host_info
for an archive should be the target host of the archive.  The
.I host_info
for a host should indicate with the value
.B true
that the host must be reached using 
.BR pmsocks (1).
.PP
The 
.I name
contains the name of the metric, not including any sources or instances.
.PP
The
.I color_spec
is used to describe not only the color of the metric, but also any scaling that
was applied.  A
.I color_spec
must be of one of the following formats:
.PP
.in 1.0i
.ft CW
.nf
\f3S\f1 \f2color\f3,\f2scale\f1
\f3D\f1 \f2color\f3,\f2maximum\f3,\f2color\f3,\f2maximum\f1...
.fi
.ft R
.in
.PP
A 
.I color_spec
prefixed with a
.RB `` S ''
is a static color definition which contains only one color and 
.IR scale .
This should be used to describe a metric which has a fixed color, regardless of
its value.
A
.I color_spec
with a dynamic color scale is prefixed with a
.RB `` D ''
character, and will change to the next color in the list when the 
.I maximum 
value is exceeded.
The
.IR color s
may be specified by name or with the
.BR X (1)
.B rgbi
tuple of three normalized floats.
.PP
The metric
.I type
and
.I semantics
fields
have single numeric values which respectively map to the
.B PM_TYPE
and
.B PM_SEM
definitions in
.IR /usr/include/pcp/pmapi.h .
The
.I scale
field comprises three numeric values for each of Space, Time, and Count.
These fields are extensions to the 
.B pmlaunch
version 1.0 format (the current version is 2.0).
Refer to
.BR PMAPI (3)
for detailed descriptions of each of the possible values for these fields.
.PP
The metric
.IR dimension s
and internal instance domain identifier (\f2indom\f1) are described in 
.BR PMAPI (3).
The 
.I dimension
consists of three space-separated signed integer values representing Space,
Time, and Count respectively.
.PP
The 
.I indom
is a single integer.  A metric which does not have an instance domain should
specify an instance domain of
.RB `` \- ''.
.PP
The last field in a metric specification is an
.IR instance .
As the
.I instance
may contain most characters, including spaces, the
.I instance
must be enclosed in square brackets.  If a metric does not have an instance,
then the
.I instance
should simply be
.RB `` [] ''.
Only one
.I instance
may be specified, so multiple instances must be listed as separate metrics on
subsequent lines in the metrics specification file.
.SH EXAMPLE CONFIGURATION FILE
The following text is an example of the possible output generated by
.BR mpvis (1):
.PP
.in 1.0i
.ft CW
.nf
pmlaunch Version 2.0

metric 0 0 point h omen false kernel.percpu.cpu.idle S rgbi:0.000000/0.782569/0.000000,1000.000000 1 1 0 2 0 0 1 0 4194305 [cpu0]
metric 1 0 point h omen false kernel.percpu.cpu.wait.total S rgbi:0.000000/0.782569/0.779279,1000.000000 1 1 0 2 0 0 1 0 4194305 [cpu0]
metric 2 0 point h omen false kernel.percpu.cpu.intr S rgbi:0.750547/0.782569/0.000000,1000.000000 1 1 0 2 0 0 1 0 4194305 [cpu0]
metric 3 0 point h omen false kernel.percpu.cpu.sys S rgbi:0.750547/0.000000/0.000000,1000.000000 1 1 0 2 0 0 1 0 4194305 [cpu0]
metric 4 0 point h omen false kernel.percpu.cpu.user S rgbi:0.000000/0.000000/0.779279,1000.000000 1 1 0 2 0 0 1 0 4194305 [cpu0]

option interval=2
option debug=0
option timeport=/tmp/pmview.a002ct
option starttime=@Wed Dec 11 10:14:46 1996
option offset=@Wed Dec 11 10:14:51 1996
option timezone=EST-11EST-10,91/2:00,301/2:00
option progname=pmview
option pid=10809
option selected=false

.fi
.ft R
.in
.SH FILES
.TP 24
.I /var/pcp/config/pmlaunch
Directory containing the default scripts and configuration files for launching
tools.
.TP
.I /var/pcp/config/pmlaunch/pmlaunchrc
List of menu items and the corresponding scripts for the launching tools.
.TP
.I /var/pcp/config/pmlaunch/pmlaunch.common
Common shell procedures that can be used for generating command line arguments
and configuration files from a 
.B pmlaunch
metrics specification.
.TP
.I "/var/pcp/config/pmlaunch/mk.rc"
Script which builds the pmlaunchrc file from the component *.menu files
(during install).
.TP
.I "/var/pcp/config/pmlaunch/*.menu"
Generic menu specification files which are combined to form the default
pmlaunchrc file (during install).
.TP
.I $HOME/.pcp/pmlaunch/pmlaunchrc
User configurable list of menu items and the corresponding scripts for the 
launching tools. These items may override those specified in
.IR "/var/pcp/config/pmlaunch/pmlaunchrc" .

.SH ENVIRONMENT
The
.B PCP_STDERR
environment variable described in the
.B DIAGNOSTICS
section below is fully documented in the
.BR PCPIntro (1)
manual page.
.PP
Additional trace and debugging information from the scripts
that ``launch'' one PCP application from another may be gained
as follows:
.IP 1. 4n
All trace and debug diagnostic information is added to the
end of the file named in
the environment variable
.B PMLAUNCH_FILE
(or
.I ${TMPDIR-/var/tmp}/pmlaunch.trace
by default).
.IP 2.
If the environment variable
.B PMLAUNCH_TRACE
is set, then summary information is produced for each ``launch''
operation.
.IP 3.
If the environment variable
.B PMLAUNCH_DUMP
is set, then the contents of various temporary files used in
each ``launch''
operation are reported.
.PP
The launching of a tool can be prevented by setting
.BR PMLAUNCH_CHECK
in the environment.
.SH SEE ALSO
.BR PCPIntro (1),
.BR pmchart (1),
.BR pmdbg (1),
.BR pmgadgets (1),
.BR pmgsys (1),
.BR pmsocks (1),
.BR pmval (1),
.BR pmview (1),
.BR xconfirm (1)
and
.BR PMAPI (3).
.SH BUGS
Future versions may allow a hierarchical representation of groups, so that
groups could contain other groups.
.PP
.BR csh (1)
aliases in the user's environment are ignored by most launch scripts which 
determine the path to the target executable using the
.BR sh (1)
.B type
command.
.SH DIAGNOSTICS
Error messages produced by any 
.B pmlaunch
scripts should be self-explanatory.  These messages will be displayed in an
.BR xconfirm (1)
window if 
.B DISPLAY
is set and
.B PCP_STDERR
is set to ``DISPLAY'' in the environment (refer to
.BR PMAPI (3)
for a detailed explanation of this environment variable).
