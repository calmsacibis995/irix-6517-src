'\"!  tbl | mmdoc
'\"macro stdmacro
.if n .pH g5.signal @(#)signal	40.20 of 5/1/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} SIGNAL 5 "" "\&"
.if \nX=1 .ds x} SIGNAL 5 ""
.if \nX=2 .ds x} SIGNAL 5 "" "\&"
.if \nX=3 .ds x} SIGNAL "" "" "\&"
.TH \*(x}
.SH NAME
\f4signal\f1 \- base signals
.SH SYNOPSIS
\f4#include <signal.h>\fP
.SH DESCRIPTION
A signal is an asynchronous notification of an event.
A signal is said to be generated for (or sent to) a process or a thread 
when the
event associated with
that signal first occurs.
Examples of such events include
hardware faults, timer expiration and terminal activity, as well as the
invocation of the \f4kill\fP(2), \f4sigqueue\fP(3) or \f4sigsend\fP(2) system calls.
In some
circumstances, the same event generates signals for multiple processes.
A process may request a detailed notification of the source of the
signal and the reason why it was generated [see \f4siginfo\fP(5)].
.PP
At the time of generation, the system will determine whether the
signal is directed at a process or a specific thread within that process.
Signals that are naturally associated with a particular thread, such
as hardware faults, are directed to the appropriate thread.
This is usually due to the signal being generated during the
execution of the thread and, moreover, in the context of executing
that thread.
Signals that are sent to a process tend to be those that are generated
asynchronously with respect to the execution of the process.
Signals generated by the
.I kill
interface or sent as a result of a tty interrupt are examples of
signals directed at a process.
.PP
Each process may specify a system action to be taken in response to
each signal sent to it, called the signal's disposition.
For multithreaded processes, the disposition is shared by all threads
in the process.
The set of system signal actions for a process is initialized from that of
its parent.
Once an action is installed for a specific signal,
it usually remains installed until another disposition is explicitly
requested by a call to either \f4sigaction\fP(2), \f4signal\fP(2), \f4signal\fP(3B), \f4sigvec\fP(3B) or \f4sigset\fP(2),
or until the process execs  
[see \f4sigaction\fP(2) and \f4signal\fP(2)].
When a process execs, all signals
whose disposition has been set to catch the signal will be set to
\f4SIG_DFL\fP.
Alternatively, a process may request that the system
automatically reset the disposition of a signal to \f4SIG_DFL\fP
after it has been caught [see \f4sigaction\fP(2) and \f4signal\fP(2)].
.PP
A signal is said
to be delivered to a process or thread when the appropriate action for the
signal is taken.
During the time between the generation of a signal and its delivery, the
signal is said to be pending [see \f4sigpending\fP(2)].
Ordinarily, this interval cannot be detected by
an application.
However, a signal can be blocked from delivery to a thread
[see \f4sighold\fP(2), \f4sigblock\fP(3) and \f4sigprocmask\fP(2)].
If the action associated with a blocked signal is anything
other than to ignore the signal, and if that signal 
is generated for the process or thread, the signal remains
pending until either it is unblocked or the signal's disposition 
requests that the signal be ignored.
Signals generated for the process shall be
delivered to exactly one of the threads within the process.
The thread must either be executing the
.I sigwait
function selecting that signal or it must not be blocking
delivery of the signal.
If there are no threads in a call to a
.I sigwait
function selecting that signal, and if all threads within the process
block delivery of the signal, the signal shall remain pending of the
process until either a thread calls a
.I sigwait
function selecting that signal, a thread unblocks delivery of that
signal, or the action associated with the signal is set to ignore
the signal.
If the 
signal disposition of a blocked signal requests that the
signal be ignored, and
if that signal is generated for the process or thread, the signal is discarded 
immediately upon generation.
.sp
On IRIX, a pending signal is usually delivered when a thread returns from the kernel. This happens at the end of a system call or at the end of a hardware interrupt. Since the scheduling clock interrupt occurs at a regular 10 msec interval, this means that the latency between the generation of a signal and its delivery can never be more than 10 msec. For real-time application(defined as process with high band non-degrading priority), a generation of a signal always force an immediate signal delivery.
.PP
Each thread has a signal mask that defines
the set of signals currently blocked from delivery to it [see \f4sigprocmask\fP(2) or \f4pthread_sigmask\fP(3P)].
The signal mask for a thread is initialized from the thread
that created it.
.PP
The determination of which action is taken in response to a signal 
is made at the time the signal is delivered, allowing
for any changes since the time of generation.
This determination is independent of the means by which the signal
was originally generated.
.PP
The signals currently defined in \f4signal.h\fP are as
follows:
.sp
.TS
center;
l l l l
lf4 l l l.
Name	Value	Default	Event
_
SIGHUP	1	Exit	Hangup [see \f4termio\fP(7)]
SIGINT	2	Exit	Interrupt [see \f4termio\fP(7)]
SIGQUIT	3	Core	Quit [see \f4termio\fP(7)]
SIGILL	4	Core	Illegal Instruction
SIGTRAP	5	Core	Trace/Breakpoint Trap
SIGABRT	6	Core	Abort
SIGEMT	7	Core	Emulation Trap
SIGFPE	8	Core	Arithmetic Exception
SIGKILL	9	Exit	Killed
SIGBUS	10	Core	Bus Error
SIGSEGV	11	Core	Segmentation Fault
SIGSYS	12	Core	Bad System Call
SIGPIPE	13	Exit	Broken Pipe
SIGALRM	14	Exit	Alarm Clock
SIGTERM	15	Exit	Terminated
SIGUSR1	16	Exit	User Signal 1
SIGUSR2	17	Exit	User Signal 2
SIGCHLD	18	Ignore	Child Status Changed
SIGPWR	19	Ignore	Power Fail/Restart
SIGWINCH	20	Ignore	Window Size Change
SIGURG	21	Ignore	Urgent Socket Condition
SIGPOLL	22	Exit	Pollable Event [see \f4streamio\fP(7)]
SIGIO	22	Exit	input/output possible signal
SIGSTOP	23	Stop	Stopped (signal)
SIGTSTP	24	Stop	Stopped (user) [see \f4termio\fP(7)]
SIGCONT	25	Ignore	Continued
SIGTTIN	26	Stop	Stopped (tty input) [see \f4termio\fP(7)]
SIGTTOU	27	Stop	Stopped (tty output) [see \f4termio\fP(7)]
SIGVTALRM	28	Exit	Virtual Timer Expired
SIGPROF	29	Exit	Profiling Timer Expired
SIGXCPU	30	Core	CPU time limit exceeded [see \f4getrlimit\fP(2)]
SIGXFSZ	31	Core	File size limit exceeded [see \f4getrlimit\fP(2)]
SIGCKPT	33	Ignore	Checkpoint warning [see \f4cpr\fP(1)]
SIGRESTART	34	Ignore	Restart warning [see \f4cpr\fP(1)]
SIGRTMIN	49	Exit	POSIX 1003.1b SIGRTMIN
SIGRTMAX	64	Exit	POSIX 1003.1b SIGRTMAX
.TE
.PP
IRIX supports all signal numbers between 0 and 64. All signals between 0 and 32
are currently used. POSIX 1003.1b reserves all signals between
\f4SIGRTMIN\fP and \f4SIGRTMAX\fP for real-time applications.
Even though the kernel does not use any signals between 35 and 64,
signal number between 35 and 49 are not guaranteed to be available
to user programs in future releases. Further more, the default behavior for signals between 35 and 49 is to exit. 
.sp
No signals beyond 32 are applicable to the Berkeley signal
functions because these functions use a fixed 32 bits signal mask as
part the programming interface.
.sp
Higher priority signals are delivered first when multiple unblocked signals are pending in order to prioritize event notifications. On the other hand, a lower priority signal can not preempt a higher priority signal handler.
.sp
All signals between 0 and 32 are of equal priority but all are at higher
priority than signals between \f4SIGRTMIN\fP and \f4SIGRTMAX\fP.
Within the range of \f4SIGRTMIN\fP to \f4SIGRTMAX\fP,
the lower the signal number the higher the priority of that signal.
.PP
Using the \f4signal\fP(2), \f4signal\fP(3B), \f4sigset\fP(2), \f4sigvec\fP(3B)  or \f4sigaction\fP(2) system call,
a process may specify one of three dispositions for a signal:
take the default action for the signal,
ignore the signal,
or catch the signal.
.SS "Default Action: \f4SIG_DFL\fP"
A disposition of \f4SIG_DFL\fP specifies the default action.
The default action for each signal is listed in the table above and is
selected from the following:
.TP 8
\%Exit
When it gets the signal,
the receiving process is to be abnormally terminated with all the consequences outlined
in
\f4_exit\fP(2).
.TP 8
\%Core
When it gets the signal,
the receiving process is to be abnormally terminated with all the consequences outlined
in
\f4_exit\fP(2).
In addition, a ``core image'' of the process is constructed in the 
current working directory.
.TP 8
\%Stop
When it gets the signal,
the receiving process is to stop.
.TP 8
\%Ignore
When it gets the signal,
the receiving process is to ignore it.
This is identical to setting
the disposition to
\f4SIG_IGN\fP.
.SS "Ignore Signal: \f4SIG_IGN\fP"
A disposition of \f4SIG_IGN\fP specifies that the signal is to be ignored.
.SS "Catch Signal: \f2function address\f1"
A disposition that is a function address specifies that,
when it gets the signal,
the receiving thread is to 
execute the signal handler at the specified address. Under IRIX, there are two
ways a signal handler can be delivered.
If \f4SA_SIGINFO\fP
is set in the field \f2sa_flags\f1 of the \f2sigaction_t\f1 structure during a previous call to the \f4sigaction\fP(2) function for the signal being delivered, the signal handler will be invoked as follows:
.PP
.RS
.nf
.B "handler (int sig, siginfo_t *sip, ucontext_t \(**up);"
.fi
.RE
.PP
otherwise the signal handler will be invoked as follows:
.PP
.RS
.nf
.B "handler (int sig, int code, struct sigcontext \(**sc);"
.fi
.RE
.PP
Where
.I handler
is the specified signal handler function-name.
Due to historic implementations, signal handlers have been defined with
zero, one, or three parameters.
To avoid source incompatibilities, in \f4C\fP, the prototype for
the signal handler has intentionally been left empty.
\f4C++\fP requires a prototype, so a compromise must be made.
\f4C++\fP user's should cast their handler to the type \f4SIG_PF\fP in order
to be portable.
.PP
Please see \f4siginfo\fP(5) and \f4ucontext\fP(5) for more details
on the meanings of the passed in parameters of the first form.
The second form is the default system behavior.
.sp
In the second form,
.I code\^
is valid only in the following cases:
.PP
.ta \w' Floating/decimal divide by zero 'u +\w'15* 'u +8n
.nf
Condition	Signal	Code

User breakpoint	SIGTRAP	BRK_USERBP
User breakpoint	SIGTRAP	BRK_SSTEPBP
Integer overflow	SIGFPE	BRK_OVERFLOW
Divide by zero	SIGFPE	BRK_DIVZERO 
Multiply overflow	SIGFPE	BRK_MULOVF
Invalid virtual address	SIGSEGV	EFAULT
Read-only address	SIGSEGV	EACCES
Read beyond mapped object	SIGSEGV	ENXIO
Autogrow for file failed	SIGSEGV	ENOSPC
Automatic memory lock failed	SIGSEGV	ENOMEM
.fi
.PP
Integer divide by zero, multiply overflow, integer overflow, and range
errors are special cases. If the binary is not an IRIX 4 binary and a
signal handler is installed for SIGFPE then the SIGFPE handler is
called, otherwise SIGTRAP is called. This behavior is included to keep
older IRIX 4 and IRIX 5 binaries working, however the correct way to
code a handler is to use SIGFPE.
.PP
The third argument 
.I sc\^
of the second form
is a pointer to a
.I struct sigcontext
(defined in <\f2sys/signal.h\f1>)
that contains the processor context at the time of the signal.
.sp
When the signal handler returns, the receiving thread
resumes execution at the point it was interrupted, unless the signal
handler makes other arrangements.
If an invalid function address is specified, results are undefined.
.PP
If the disposition has been set with the \f4signal\fP(3B), \f4sigset\fP(2), \f4sigvec\fP(3B) or
\f4sigaction\fP(2) function, the signal is automatically blocked
by the system while the signal catcher is executing.
If a
\f4longjmp\fP [see \f4setjmp\fP(3C)]
is used to leave the signal catcher, then the signal must be explicitly
unblocked by the user [see \f4sigrelse\fP(2), \f4sigprocmask\fP(2), and
\f4pthread_sigmask\fP(3P)].
.PP
If execution of the signal handler interrupts a blocked system call,
the handler is executed and the
interrupted system call returns a \-1 to the calling thread with
\f4errno\f1
set to \f4EINTR\fP.
However, if the \f4SA_RESTART\fP flag is set
the system call will be transparently restarted.
.SH NOTES
The dispositions of the
\f4SIGKILL\fP and \f4SIGSTOP\fP signals cannot be altered from their
default values.
The system generates an error if this is attempted.
.PP
The 
\f4SIGKILL\fP and \f4SIGSTOP\fP signals cannot be blocked.
The system silently enforces this restriction.
.PP
Whenever a process receives a
\f4SIGSTOP\fP, \f4SIGTSTP\fP, \f4SIGTTIN\fP, or \f4SIGTTOU\fP signal, regardless of its 
disposition, any pending \f4SIGCONT\fP signal are discarded. Further more, the process will not act upon any delivered signals other than \f4SIGKILL\fP until a \f4SIGCONT\fP is received.
.PP
Whenever a process receives a \f4SIGCONT\fP signal, regardless of its 
disposition, any pending \f4SIGSTOP\fP, \f4SIGTSTP\fP, \f4SIGTTIN\fP, and 
\f4SIGTTOU\fP signals is discarded.
In addition, if the process was stopped, it is continued.
.PP
When a signal is delivered to a thread, if the action of that signal
specifies termination, stop, or continue, all the threads in the
process shall be terminated, stopped, or continued, respectively.
.PP
Processes which are blocked via a \f2blockproc\fP
system call will unblock if they receive a signal which is fatal
(i.e., a non-job-control signal which the are \s-1NOT\s+1 catching), but will
still be stopped if the job of which they are a part is stopped.  Only
upon restart will they die.  Any non-fatal signals received by a blocked
process will \s-1NOT\s+1 cause the process to be unblocked (an
.IR unblockproc (2)
or
.IR unblockprocall (2)
system call
is necessary).
.PP
\f4SIGPOLL\fP is issued when a file descriptor corresponding
to a STREAMS [see \f4intro\fP(2)] file has a ``selectable'' event pending.
A process must specifically request that this signal be sent
using the \f4I_SETSIG ioctl\fP call.
Otherwise, the process will never receive \f4SIGPOLL\fP.
.PP
If the disposition of the \f4SIGCHLD\fP signal has been set with \f4signal\fP, \f4sigvec\fP or
\f4sigset\fP, or with \f4sigaction\fP and the \f4SA_NOCLDSTOP\fP flag has been
specified, it will only be sent to the calling process when its children exit;
otherwise, it will also be sent when the calling process's children are stopped
or continued due to job control.
.PP
The name \f4SIGCLD\fP is also defined in this header file and identifies the
same signal as \f4SIGCHLD\fP. \f4SIGCLD\fP is provided for backward compatibility,
new applications should use \f4SIGCHLD\fP.
.PP
The disposition of signals that are inherited as 
\f4SIG_IGN\fP should not be changed.
.PP
A call to
.I signal\^
cancels a pending signal
.I sig\^
except for a pending \f4SIGKILL\fP signal.
.sp
A call to
.I sigset
with a signal handler other than \f4SIG_IGN\fP will automatically allow
pending signals for the set signal to come in.
.SH SEE ALSO
\f4exit\fP(2),
\f4getrlimit\fP(2),
\f4intro\fP(2),
\f4kill\fP(2),
\f4pause\fP(2),
\f4pthread_kill\fP(3P),
\f4pthread_sigmask\fP(3P),
\f4sigaction\fP(2),
\f4sigaltstack\fP(2),
\f4signal\fP(2),
\f4sigset\fP(2),
\f4signal\fP(3B),
\f4sigprocmask\fP(2),
\f4sigsend\fP(2),
\f4sigqueue\fP(3),
\f4sigsuspend\fP(2),
\f4wait\fP(2),
\f4sigsetops\fP(3C),
\f4siginfo\fP(5),
\f4ucontext\fP(5)
