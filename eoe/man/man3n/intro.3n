'\"macro stdmacro
.if n .pH gen.intro @(#)intro	40.4 of 5/24/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} intro 3N "" "\&"
.if \nX=1 .ds x} intro 3N ""
.if \nX=2 .ds x} intro 3N "" "\&"
.if \nX=3 .ds x} intro "" "" "\&"
.TH \*(x}
.SH NAME
\f4intro\f1 \- introduction to SVR4 networking functions and libraries
.SH DESCRIPTION
This section describes functions found
in the SVR4 networking library.
Function declarations can be obtained
from the
\f4#include\f1
files indicated on each page.
Certain major collections are identified by a
letter after the section number:
.PP
The SVR4 networking functions are contained in a single libraries known as
the Network Services library, \f4libnsl\fP.
.PP
The following functions constitute the \f4libnsl\fP library:
.RS
.TP
\f4netdir\fP
Network Directory functions.
This contains look-up functions and the access point to network directory
libraries for various network transports.
.TP
\f4netselect\fP
Network Selection routines.
These functions manipulate the \f4/etc/netconfig\fP file and return entries.
.TP
\f4nsl\fP
Transport Level Interface (TLI).
These functions contain the implementation of X/OPEN's Transport Level
Interface.
.TP
\f4rexec\fP
REXEC library interface
.TP
\f4rpc\fP
User-level Remote Procedure Call library
.TP
\f4saf\fP
Service Access Facility library
.TP
\f4yp\fP
Network Information Service functions.
[The NIS functions have been moved to libc.]
.RE
.SH DEFINITIONS
In the Network Services library, \f4netbuf\fP is a structure used in various
TLI functions to send and receive data and information.
\f4netbuf\fP is defined in \f4sys/tiuser.h\fP, and includes the
following members:
.sp
.RS
.nf
\f4struct netbuf {
	unsigned int maxlen;  /* The physical size of the buffer */
	unsigned int len; /* The number of bytes in the buffer */
	char *buf;  /* Points to user input and/or output buffer */
};\fP
.fi
.sp
.RE
.PP
If \f4netbuf\fP is used for output, the function
will set the user value of \f2len\f1 on return.
\f2maxlen\fP generally has significance only when \f2buf\f1 is used to
receive output from the TLI function.
In this case, it specifies the maximum value of \f2len\f1 that can be
set by the function.
If \f2maxlen\fP is not large enough to hold the returned information,
an \s-1TBUFOVFLW\s0 error will generally result.
However, certain functions may return part of the data and not generate an
error.
.SH FILES
\f2\s-1INCDIR\s+1\fP			usually \f4/usr/include\fP
.br
\f2\s-1LIBDIR\s+1\fP				usually \f4/usr/ccs/lib\fP
.br
\f2\s-1LIBDIR\s+1\f4/libsocket.so\f1	(normally unused, see below)
.br
\f2\s-1LIBDIR\s+1\f4/libnsl.so\f1
.br
.SH SEE ALSO
\f4intro\fP(3)
.SH NOTES
None of the functions, external variables,
or macros should be redefined in the user's programs.
Any other name may be redefined without affecting the
behavior of other library functions, but such redefinition may conflict with
a declaration in an included header file.
.P
The header files in
\f2\s-1INCDIR\s+1\f1
provide function prototypes
(function declarations including the types of arguments)
for most of the functions listed in this manual.
Function prototypes allow the compiler to check for correct usage
of these functions in the user's program.
The \f4lint\fP program checker
may also be used and will report discrepancies even if the
header files are not included with \f4#include\f1 statements.
Use of \f4lint\fP is highly recommended.
.PP
In detailed definitions of components, it is sometimes necessary to
refer to symbolic names that are implementation-specific, but which
are not necessarily expected to be accessible to an application
program.
Many of these symbolic names describe boundary conditions and system
limits.
.PP
In this section, for readability, these implementation-specific
values are given symbolic names.
These names always appear enclosed in curly brackets to distinguish them from
symbolic names of other implementation-specific constants that are accessible
to application programs by header files.
These names are not necessarily accessible to an application program through
a header file, although they may be defined in the documentation for a
particular system.
.P
In general, a portable application program should not refer to these symbolic names
in its code.
For example, an application program would not be expected to test the length of
an argument list given to a
routine to determine if
it was greater than \f(CW{ARG_MAX}\f1.
.P
There are 2 types of networking in
.SM IRIX.
.IP
1)  BSD sockets implemented in the kernel, along with
SUN RPC and NIS (YP).  The functions that implement
these calls are in libc [see \f2intro(3)\fP].
.IP
2)  SVR4-style STREAMS/TLI/DLPI networking (not sockets), along
with SVR4-style RPC.  SVR4-style RPC doesn't work with
sockets, only with the TLI.  Also, SVR4-style networking
does not support NIS.  The functions that implement these 
calls are in libnsl, and to use them, the code must be 
compiled with :
.RS
.Ex
cc -D_SVR4_TIRPC prog.c -lnsl
.Ee
.B eoe.sw.svr4net
must be installed to use the TLI functionality.
.br
.B eoe.sw.dlpi
must be installed to use the DLPI (Data-link Provider Interface) functionality.
.RE
.IP
In order to fully support the MIPS ABI,
there is a library (libsocket) that can be linked with explicitly.
There are no header file or semantic differences when using
libsocket.  The MIPS ABI-compliant programs that use
sockets must (in order to be ABI-compliant) link with
libsocket.
To compile such a program, use:
.RS
.Ex
cc prog.c -lsocket
.Ee
This library exists solely to satisfy the ABI; it uses the standard IRIX
socket services described above to implement the specified functionality.
.RE
.PP
.\"	@(#)intro.3	6.3 of 10/20/83
.Ee

