'\"macro stdmacro
.if n .pH g3n.netdir @(#)netdir	40.14 of 5/21/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.\" @(#)netdir.3n 1.8 89/05/01 SMI;
.\" Copyright (c) 1988 Sun Microsystem's, Inc. - All Rights Reserved.
.nr X
.if \nX=0 .ds x} netdir 3N "" "\&"
.if \nX=1 .ds x} netdir 3N ""
.if \nX=2 .ds x} netdir 3N "" "\&"
.if \nX=3 .ds x} netdir "" "" "\&"
.TH \*(x}
.SH NAME
\f4netdir_getbyname\fP, \f4netdir_getbyaddr\fP, \f4netdir_free\fP, \f4netdir_mergeaddr\fP, \f4taddr2uaddr\fP, \f4uaddr2taddr\fP, \f4netdir_perror\fP, \f4netdir_sperror\fP \- generic transport name-to-address translation
.SH SYNOPSIS
.nf
.ft 4
#include <netdir.h>
.sp .5
int netdir_getbyname(struct netconfig \(**config, struct nd_hostserv
    \(**service, struct nd_addrlist \(**addrs);
.sp .5
int netdir_getbyaddr(struct netconfig \(**config, struct
    nd_hostservlist \(**\(**service, struct netbuf \(**netaddr);
.sp .5
void netdir_free(void \(**ptr, int ident);
.sp .5
int netdir_mergeaddr(struct netconfig \(**config, char \(**mrg_uaddr,
    char \(**s_uaddr, char \(**c_uaddr);
.sp .5
char \(**taddr2uaddr(struct netconfig \(**config, struct netbuf \(**addr);
.sp .5
struct netbuf \(**uaddr2taddr(struct netconfig \(**config, char \(**uaddr);
.sp .5
int netdir_options(struct netconfig \(**netconfig, int option, int fd,
    char \(**pointer_to_args);
.sp .5
void netdir_perror(char \(**s);
.sp .5
char \(**netdir_sperror(void);
.fi
.ft 1
.P
.\"[\(rh  Mike: syntax for netdir_ops? \(lh]
.SH DESCRIPTION
These routines provide a generic interface
for name-to-address mapping that will work with
a all transport protocols.
This interface provides a generic way for programs
to convert transport specific addresses into common
structures and back again.
.P
The
\f4netdir_getbyname\fP
routine maps the machine name and service name in the \f4nd_hostserv\fP
structure to
a collection of addresses of the type understood by the transport
identified in the \f4netconfig\fP structure.
This routine returns all addresses that are valid
for that transport in the \f4nd_addrlist\fP structure.
The \f4netconfig\fP structure is described on the \f4netconfig\fP(4)
manual page.
The \f4nd_hostserv\fP and \f4nd_addrlist\fP structures have the
following elements.
.sp .5
.RS
.ft 4
.nf
nd_addrlist \f1structure:\fP
	int            n_cnt;       /* number of netbufs */
	struct netbuf  \(**n_addrs;    /* the netbufs */
.sp .5
nd_hostserv \f1structure:\fP
	char \(**h_host;   /* the host name */
	char \(**h_serv;   /* the service name */
.fi
.ft 1
.RE
.sp .5
.br
.ne 8
.P
\f4netdir_getbyname\fP
accepts some special-case host names.
These host names are hints to the underlying
mapping routines that define the intent of the request.
This information is required for some transport
provider developers to provide the correct information
back to the caller.
The host names are defined in
\f4netdir.h\f1.
The currently defined host names are:
.sp .5
.TP 12
\f4HOST_SELF\fP
Represents the address to which local
programs will bind their endpoints.
\f4HOST_SELF\fP differs from the host name provided by
\f4gethostname\f1(),
which represents the address to which
\f2remote\f1
programs will bind their endpoints.
.TP
\f4HOST_ANY\fP
Represents any host accessible by this transport
provider.
\f4HOST_ANY\fP allows applications to specify a required service
without specifying a particular host name.
.TP
\f4HOST_BROADCAST\fP
Represents the address for all hosts
accessible by this transport provider.
Network requests to this address will be received by all machines.
.P
All fields of the \f4nd_hostserv\fP structure must be initialized.
.P
To find all available transports,
call the
\f4netdir_getbyname\fP
routine with each
\f4netconfig\fP
structure returned by the
\f4getnetpath\fP
call.
.P
The
\f4netdir_getbyaddr\fP
routine maps addresses to service names.
This routine returns a list of host and service
pairs that would yield this address.
If more than one tuple of host and service name is returned then
the first tuple contains the preferred host and service
names.
The \f4nd_hostservlist\fP structure contains the following members:
.RS
.ft 4
.nf
int    h_cnt;         /* the number of nd_hostservs */
struct hostserv  \(**h_hostservs;  /* the entries */
.fi
.ft 1
.RE
.P
The
\f4netdir_free\fP
structure is used to free the
structures allocated by the name to address translation
routines.
.P
The
\f4netdir_mergeaddr\fP
routine is used by a network service to return an optimized network addresses
to a client.
This routine takes the universal address of the endpoint that the service
has bound to, which is pointed to by the
\f2s_uaddr\f1
parameter,
and the address of the endpoint that a request came in on, which is pointed
to by the
\f2c_uaddr\f1
paramter,
to create an optimized address for communication with
the service.
The service address should be an address returned by the
\f4netdir_getbyname\fP
call, specified with the special host name
\f4HOST_SELF\f1.
.P
The
\f4taddr2uaddr\fP
and
\f4uaddr2taddr\fP
routines support translation between universal addresses and
TLI
type netbufs.
They take and return character string pointers.
The
\f4taddr2uaddr\fP
routine returns a pointer to a string
that contains the universal
address and returns
\f4NULL\f1
if the conversion is not possible.
This is not a fatal condition as some
transports may not support
a universal address form.
.P
\f2option\fP, \f2fd\fP, and \f2pointer_to_args\fP are passed to
the \f4netdir_options\fP routine for the transport specified
in \f4netconfigp\fP.
.\"[\(rh  Correct? \(lh]
There are four values for \f2option\fP:
.sp .5
.nf
.in +.5i
\f4ND_SET_BROADCAST
ND_SET_RESERVEDPORT
ND_CHECK_RESERVEDPORT
ND_MERGEADDR\fP
.in -.5i
.sp .5
.fi
If a transport provider does not support an option, \f4netdir_options\fP
returns \f4-1\fP and sets \f4_nderror\fP to \f4ND_NOCTRL\fP.
.P
The specific actions of each option follow.
.TP 20
\f4ND_SET_BROADCAST\fP
Sets the transport provider up to allow broadcast, if
the transport supports broadcast.
\f2fd\fP is a file descriptor into the transport (that is,
the result of a \f4t_open\fP of \f4/dev/udp\fP).
\f2pointer_to_args\fP
is not used.
If this completes, broadcast operations may be performed
on file descriptor \f2fd\fP.
.TP
\f4ND_SET_RESERVEDPORT\fP
Allows the application to bind to a reserved port, if that concept
exists for the transport provider.
\f2fd\fP is a file descriptor into the transport (it must
not be bound to an address).
If \f2pointer_to_args\fP is \f4NULL\fP,
\f2fd\fP will be bound to a reserved port.
If \f2pointer_to_args\fP
is a pointer to a \f4netbuf\fP structure,
an attempt will be made to bind to a reserved
port on the specified address.
.TP
\f4ND_CHECK_RESERVEDPORT\fP
Used to verify that an address corresponds to
a reserved port, if that concept exists for the transport
provider.
\f2fd\fP is not used.
\f2pointer_to_args\fP is a pointer to a \f4netbuf\fP structure
that contains an
address.
This option returns \f40\fP only if the address specified
in \f2pointer_to_args\fP is reserved.
.TP
\f4ND_MERGEADDR\fP
Used to take a ``local address'' (like the \f40.0.0.0\fP
address that TCP uses) and return a ``real address'' that
client machines can connect to.
\f2fd\fP is not used.
\f2pointer_to_args\fP is a pointer to a \f4struct nd_mergearg\fP, which
has the following members:
.sp .5
.nf
.ft 4
  char \(**s_uaddr; /* server's universal address */
  char \(**c_uaddr; /* client's universal address */
  char \(**m_uaddr; /* merged universal address */\fP
.fi
.sp .5
\f4s_uaddr\fP is something like \f40.0.0.0.1.12\fP, and, if the call
is successful, \f4m_uaddr\fP will be set to something like
\f4192.11.109.89.1.12\fP.
For most transports, \f4m_uaddr\fP is
exactly what \f4s_uaddr\fP is.
.P
The
\f4netdir_perror\f1()
routine prints
an error message on the standard output stating why
one of the name-to-address mapping routines failed.
The error message is preceded by the string given as an argument.
.P
The
\f4netdir_sperror\fP
routine returns a string containing an error message stating why
one of the name-to-address mapping routines failed.
.SH SEE ALSO
\f4getnetpath\f1(3N)
