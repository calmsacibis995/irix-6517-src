'\"macro stdmacro
.if n .pH g3n.getsockname @(#)getsockname	40.12 of 5/23/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} getsockname 3N "" "\&"
.if \nX=1 .ds x} getsockname 3N ""
.if \nX=2 .ds x} getsockname 3N "" "\&"
.if \nX=3 .ds x} getsockname "" "" "\&"
.TH \*(x}
.SH NAME
\f4getsockname\fP \- get socket name
.SH SYNOPSIS
.nf
.P
.ft 4
int getsockname(int s, caddr_t name, int \(**namelen);
.fi
.SH DESCRIPTION
.P
\f4getsockname\fP
returns the current
\f2name\fP
for socket \f2s\fP.
The
\f2namelen\fP
parameter should be initialized to indicate
the amount of space pointed to by
\f2name\fP.
On return it contains the actual size of the \f2name\fP
returned (in bytes).
.SH RETURN VALUE
.P
\f40\fP is returned if the call succeeds; \f4-1\fP if it fails.
.SH ERRORS
.P
The call succeeds unless:
.TP 20
\f4EBADF\f1
The argument
\f2s\fP
is not a valid descriptor.
.TP
\f4ENOTSOCK\fP
The argument
\f2s\fP
is a file, not a socket.
.TP
\f4ENOMEM\fP
There was insufficient user memory for the operation to complete.
.TP
\f4ENOSR\fP
There were insufficient 
.SM STREAMS
resources available for the operation
to complete.
.SH "SEE ALSO"
\f4bind\fP(3N),
\f4getpeername\fP(3N),
\f4socket\fP(3N)
.SH NOTES
The type of address structure passed to \f4accept\fP
depends on the address family.
UNIX domain sockets (address family \f4AF_UNIX\fP) require a
\f4socketaddr_un\fP structure as defined in \f4sys/un.h\f1; 
Internet domain sockets (address family \f4AF_INET\fP)
require a \f4sockaddr_in\fP structure as defined in
\f4netinet/in.h\fP.
Other address families may require other structures.
Use the structure appropriate to the address family; cast the
structure address to a generic \f4caddr_t\fP in the call to
\f4getsockname\fP 
and pass the size of the structure in the \f2namelen\fP argument.
.P
The functionality of \f4getsockname\fP is provided by \f4t_getname\fP
in TLI.
\f4t_getname\fP will be replaced in the next release of System V.
.P
The syntax for \f4t_getname\fP is as follows:
.sp .5
.nf
.ft 4
t_getname(fd, name, type)
int fd;
struct netbuf *name;
register int type;
.fi
.P
If \f2type\fP is equal to \f4LOCALNAME\fP, then the address of
the local side of the connection is returned; otherwise, the
address of the remote side is returned.
