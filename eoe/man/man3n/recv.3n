'\"macro stdmacro
.if n .pH g3n.recv @(#)recv	40.14 of 5/23/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.hw EWOULDBLOCK
.nr X
.if \nX=0 .ds x} recv 3N "" "\&"
.if \nX=1 .ds x} recv 3N ""
.if \nX=2 .ds x} recv 3N "" "\&"
.if \nX=3 .ds x} recv "" "" "\&"
.TH \*(x}
.SH NAME
\f4recv, recvfrom, recvmsg\fP \- receive a message from a socket
.SH SYNOPSIS
.nf
.ft CW
#include <sys/types.h>
.sp .5
int recv(int s, char \(**buf, int len, int flags);
.sp .5
int recvfrom(int s, char \(**buf, int len, int flags, caddr_t from,
    int \(**fromlen);
.sp .5
int recvmsg(int s, struct msghdr \(**msg, int flags);
.ft 1
.fi
.SH DESCRIPTION
\f2s\f1
is a socket created with \f4socket\fP.
\f4recv\fP, \f4recvfrom\fP, and \f4recvmsg\fP
are used to receive messages from another socket.
\f4recv\fP may be used only on a
\f2connected\f1
socket [see \f4connect\f1(3N)], while \f4recvfrom\fP and
\f4recvmsg\fP may be used to receive data on a socket whether
it is in a connected state or not.
.LP
If
\f2from\fP
is not a
\f4NULL\fP
pointer, the source address of the message is filled in.
\f2fromlen\fP
is a value-result parameter, initialized to the size of
the buffer associated with
\f2from\fP,
and modified on return to indicate the actual size of the
address stored there.
The length of the message is returned.
If a message is too long to fit in the supplied buffer,
excess bytes may be discarded depending on the type of socket
the message is received from [see \f4socket\f1(3N)].
.LP
If no messages are available at the socket, the
receive call waits for a message to arrive, unless
the socket is nonblocking [see \f4fcntl\f1(2)]
in which case \f4-1\fP is returned with the external variable
\f4errno\fP set to
\f4EWOULDBLOCK\fP.
.LP
The \f4select\fP
call may be used to determine when more data arrives.
.LP
The
\f2flags\fP
parameter is formed by
\f4OR\fPing
one or more of the following:
.TP 1i
\f4MSG_OOB\fP
Read any \(lqout-of-band\(rq data present on the
socket rather than the regular \(lqin-band\(rq data.
.TP
\f4MSG_PEEK\f1
\(lqPeek\(rq at the data present on the socket;
the data is returned, but not consumed,
so that a subsequent receive operation will see
the same data.
.LP
The \f4recvmsg\fP() call uses a \f4msghdr\fP
structure to minimize the number of directly supplied parameters.
This structure is defined in \f4sys/socket.h\f1
and includes the following members:
.LP
.RS
.nf
.ft CW
.ta +\w'struct iovec\0'u +\w'msg_accrightslen;\0'u
\s-1caddr_t	msg_name;		/\(** optional address \(**/
int	msg_namelen;		/\(** size of address \(**/
struct iovec	\(**msg_iov;		/\(** scatter/gather array \(**/
int	msg_iovlen;		/\(** # elements in msg_iov \(**/
caddr_t	msg_accrights;		/\(** access rights sent/received \(**/
int	msg_accrightslen;\f1
.ft P
.fi
.DT
.RE
.LP
Here
\f4msg_name\fP
and
\f4msg_namelen\fP
specify the destination address if the socket is unconnected;
\f4msg_name\fP
may be given as a
\f4NULL\fP
pointer if no names are desired or required.
The
\f4msg_iov\fP
and
\f4msg_iovlen\fP
describe the scatter-gather locations, as described in
\f4read\fP.
A buffer to receive any access rights sent along with the message is specified
in
\f4msg_accrights\fP,
which has length
\f4msg_accrightslen\fP.
.SH RETURN VALUE
.LP
These calls return the number of bytes received,
or \f4-1\fP if an error occurred.
.SH ERRORS
.LP
The calls fail if:
.TP 20
\f4EBADF\fP
\f2s\fP
is an invalid descriptor.
.TP
\f4ENOTSOCK\fP
\f2s\fP
is a descriptor for a file, not a socket.
.TP
\f4EINTR\fP
The operation was interrupted by delivery of a signal before
any data was available to be received.
.\".TP
.\".SM EFAULT
.\"The data was specified to be received into a non-existent
.\"or protected part of the process address space.
.TP
\f4EWOULDBLOCK\fP
The socket is marked non-blocking and the requested operation
would block.
.TP
\f4ENOMEM\fP
There was insufficient user memory available for the operation to
complete.
.TP
\f4ENOSR\fP
There were insufficient
.SM STREAMS
resources available for the operation
to complete.
.SH SEE ALSO
\f4fcntl\fP(2),
\f4ioctl\fP(2),
\f4read\fP(2),
\f4connect\fP(3N),
\f4getsockopt\fP(3N),
.\"\f4select\fP(3),
\f4send\fP(3N),
\f4socket\fP(3N)
.SH NOTES
.LP
The type of address structure passed to \f4recv\fP depends on the
address family.
UNIX domain sockets (address family \f4AF_UNIX\fP) require a
\f4socketaddr_un\fP structure as defined in \f4sys/un.h\f1; 
Internet domain sockets (address family \f4AF_INET\fP)
require a \f4sockaddr_in\fP structure as defined in
\f4netinet/in.h\fP.
Other address families may require other structures.
Use the structure appropriate to the address family; cast the
structure address to a generic \f4caddr_t\fP in the call to
\f4recv\fP
and pass the size of the structure in the \f2fromlen\fP argument.
