'\"macro stdmacro
.TH SIGSUSPEND 2
.UC 4
.SH NAME
sigsuspend \- atomically release blocked
signals and wait for interrupt (\s-1POSIX\s+1) 
.SH SYNOPSIS
.ft 3
int sigsuspend(const sigset_t \(**maskptr);
.ft 1
.SH DESCRIPTION
.I sigsuspend
replaces the current thread's set of masked signals
with the set pointed to by
.I maskptr
and then suspends the thread until delivery of a signal
whose action is either to execute a signal-catching function 
or to terminate the process.
.PP
If the action is to terminate the process then 
.I sigsuspend
will never return.  If the action is to execute a signal-catching
function, then 
.I sigsuspend
will return after the signal-catching functions returns, with
the signal mask restored to the set that existed prior to
the 
.I sigsuspend
call. 
.PP
In normal usage, a signal is blocked via
.IR sigprocmask (2)
to begin a critical section, variables modified on the occurrence
of the signal are examined to determine that there is no work
to be done, and the thread pauses by calling
.I sigsuspend
with the mask returned by
.IR sigprocmask .
It is not possible to block signals that cannot be ignored.  This is
enforced by the system without causing an error to be indicated.
.PP
Routines described in 
.IR sigsetops (3)
are used to
create and manipulate the input-parameter signal masks submitted
to \f2sigaction\fP(2), \f2sigprocmask\fP(2), and \f2sigsuspend\fP(2),
and returned by \f2sigpending\fP(2).
These masks are of type 
.I sigset_t.
.PP
.SH NOTES
.SM POSIX
specifies (contrary to 
.SM BSD
and System V) that a thread
.I may
block 
.SM
.BR SIGCONT .
However, a) 
.SM
.B SIGCONT
.I always
restarts the receiving process (unless it is waiting for an
event such as \s-1I/O\s+1), and b) if the receiving process has
installed a handler for 
.SM
.B SIGCONT
and blocked the signal, the
process will 
.SM NOT
enter its handler until it unblocks 
.SM
.BR SIGCONT .
(The signal will remain pending.)  Therefore, if 
.I sigsuspend
is called with a mask which blocks 
.SM
.BR SIGCONT ,
receipt of that signal
will set the process running, but 
.I not
cause it to enter a handler.
.SH "RETURN VALUE
Since 
.I sigsuspend 
suspends process execution indefinitely, there is no
successful completion return value.  If a return occurs, -1 is 
returned and \f2errno\fP is set to indicate the error.
.SH ERRORS
The 
.I sigsuspend
function will fail if:
.TP 20
[EINTR]
A signal is caught by the calling thread and control is returned from
the signal-catching function.
.TP 20 
[EFAULT]
.I maskptr
points to memory that is not a part of process's valid address space.
.SH SEE ALSO
sigaction(2), sigpending(2), sigprocmask(2), sigsetops(3).
.SH "WARNING"
The \s-1POSIX\s+1 and System V signal facilities have different semantics.
Using both facilities in the same program is \f3strongly discouraged\fP
and will result in unpredictable behavior.
