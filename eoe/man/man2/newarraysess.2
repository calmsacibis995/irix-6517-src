.TH newarraysess 2
.SH NAME
newarraysess \- start a new array session
.SH SYNOPSIS
.nf
\f3#include <unistd.h>\f1
.sp .8v
\f3int newarraysess(void);\f1
.fi
.SH DESCRIPTION
The \f2newarraysess\f1 function creates a new array session and
moves the current process from its original array session to the new
one.
The parents, children and siblings of the current process are not
affected by this and remain in their original array sessions.
.PP
A handle for the new array session will be generated by the system.
Normally the new handle is guaranteed to be unique on the current
system only, though some systems may be able to assign global array
session handles that are unique across an entire array of systems by
setting the \f3asmachid\f1 system variable.
Otherwise, the range of values that the system may assign for array session
handles is defined by the system variables \f3minash\f1 and \f3maxash\f1.
System variables can be examined and/or modified with
\f2systune\f1(1).
If necessary, the \f2setash\f1(2) function can be used to override the
default handle after the array session has been created.
.PP
The project ID and service provider information for the new array
session are taken from the original array session of the current
process.
They can be changed after the new array session has been created using
the \f2setprid\f1(2) and \f2setspinfo\f1(2) functions.
.PP
For the purposes of array session accounting, it is undefined whether
the resources used by the current process are charged to the original
array session, the new array session, or split between both in some
fashion.
It
.I is
guaranteed that the process resources will be charged to at least one
of the two array sessions, and that if the resources are split between
the two array sessions, they will be split cleanly (in other words,
no "double-billing" will take place).
.PP
Ordinarily, a new array session should be started whenever the
conceptual equivalent of a login is performed.
This would include programs that do conventional logins (for example,
\f2login\f1(1) or \f2telnet\f1(1)) as well as programs that
are essentially "logging in" to do work on behalf of another user,
such as \f2cron\f1(1) or batch queueing systems.
.PP
Using the \f2arsop\f1(2) function, it is possible to restrict the
processes in an array session from starting a new array session.
If this has been done, then \f2newarraysess\f1 will fail with an
\f3EPERM\f1 error.
.SH ERRORS
\f2newarraysess\f1 may fail if the following condition is true:
.TP 10
\f3ENOMEM\f1
The system is unable to allocate memory or other resources for the new
array session.
.TP 10
\f3EPERM\f1
The current array session has been restricted from starting new
array sessions.
.TP 10
\f3EINVAL\f1
The current process is a batch process (see 
.I miser(1)
). It is not possible to create a new array session for a batch process.
.PP
.SH SEE ALSO
systune(1),
miser(1),
arsop(2),
setash(2),
setprid(2),
setspinfo(2),
array_sessions(5),
extacct(5).
.SH "DIAGNOSTICS"
Upon successful completion, \f2newarraysess\f1 returns a value of 0.
Otherwise, a value of -1 is returned and \f3errno\f1 is set to
indicate the error.
