'\"macro stdmacro
.if n .pH g2.attr_remove @(#)attr_remove	1.1 of 6/12/95
.TH ATTR_REMOVE 2
.SH NAME
attr_remove, attr_removef \- remove a user attribute of a filesystem object
.Op c p a
.SH C SYNOPSIS
.PP
.sp
.nf
.B #include <sys/attributes.h>
.sp
.B "int attr_remove (const char \(**path, const char \(**attrname, int flags);"
.PP
.B "int attr_removef (int fd, const char \(**attrname, int flags);"
.Op
.SH OVERVIEW
The
.I attr
group of system calls implement the ability for a user to attach
name/value pairs to objects within the filesystem.
.P
They could be used to store meta-information about the file.
For example "character-set=kanji" could tell a document browser to
use the Kanji character set when displaying that document
and "thumbnail=..." could provide a reduced resolution overview of a
high resolution graphic image.
.P
The
.I names
can be up to MAXNAMELEN bytes in length, terminated by the first 0 byte.
The intent is that they be printable ASCII (or other character set)
names for the attribute.
.P
The
.I values
can be up to ATTR_MAX_VALUELEN (currently 64KB) of arbitrary binary data.
.P
Attributes can be attached to all types of inodes:
regular files, directories, symbolic links, device nodes, etc.
.P
There are 2 disjoint attribute name spaces associated with every
filesystem object.
They are the
.B root
and
.B user
address spaces.
The
.B root
address space is accessable only to the super-user,
and then only by specifying a flag argument to the function call.
Other users will not see or be able to modify attributes in the
.B root
address space.
The
.B user
address space is protected by the normal file permissions mechanism,
so the owner of the file can decide who is able to see and/or modify
the value of attributes on any particular file.
.P
Attributes are currently supported only in the XFS filesystem type.
.SH DESCRIPTION
The
.I attr_remove
and
.I attr_removef
functions provide a way to remove previously created attributes
from filesystem objects.
.P
.I Path\^
points to a path name for a filesystem object, and 
.I fd\^
refers to the file descriptor associated with a file.
If the attribute
.I attrname
exists, the attribute name and value will be removed from the
fileystem object.
The
.I flags
argument can contain the following symbols bitwise OR\'ed together:
.TP
.SM
\%ATTR_ROOT
Look for
.I attrname
in the
.B root
address space, not in the
.B user
address space.
(limited to use by super-user only)
.TP
.SM
\%ATTR_DONTFOLLOW
Do not follow symbolic links when resolving a
.I path
on an
.I attr_remove
function call.
The default is to follow symbolic links.
.PP
.I attr_remove
will fail if one or more of the following are true:
.TP 17
.SM
\%[ENOATTR]
The attribute name given is not associated with the indicated
filesystem object.
.TP
.SM
\%[ENOENT]
The named file does not exist.
.TP
.SM
\%[EPERM]
The effective user
.SM ID
does not match the owner of the file
and the effective user
.SM ID
is not super-user.
.TP
.SM
\%[ENOTDIR]
A component of the
path prefix
is not a directory.
.TP
.SM
\%[EACCES]
Search permission is denied on a
component of the
path prefix.
.TP
.SM
\%[EINVAL]
A bit was set in the
.I flag
argument that is not defined for this system call.
.TP
.SM
\%[EFAULT]
.I Path
points outside the allocated address space of the process.
.TP
.SM
\%[ELOOP]
A path name lookup involved too many symbolic links.
.TP
.SM
\%[ENAMETOOLONG]
The length of
.I path
exceeds
.SM
.RI { MAXPATHLEN },
or a pathname component is longer than
.SM
.RI { MAXNAMELEN }.
.PP
.I attr_removef\^
will fail if:
.TP 15
.SM
\%[ENOATTR]
The attribute name given is not associated with the indicated
filesystem object.
.TP
.SM
\%[EINVAL]
A bit was set in the
.I flag
argument that is not defined for this system call,
or
.I fd\^
refers to a socket, not a file.
.TP
.SM
\%[EFAULT]
.I Attrname
points outside the allocated address space of the process.
.TP
.SM
\%[EBADF]
.I Fd\^
does not refer to a valid descriptor.
.SH "SEE ALSO"
attr(1),
.br
attr_get(2), attr_getf(2),
.br
attr_list(2), attr_listf(2)
.br
attr_multi(2), attr_multif(2)
.br
attr_set(2), attr_setf(2),
.SH "DIAGNOSTICS"
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.I errno\^
is set to indicate the error.
.\"	@(#)attr_remove.2	1.0 of 6.12.95
.Ee
