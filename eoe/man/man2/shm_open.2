'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH 2/gen/memcntl @(#)memcntl     43.8 of 8/4/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.\" Copyright 1990, 1989 AT&T
.TH shm_open 2
.SH NAME
\f4shm_open\f1 \- establishes a connection between a shared memory object and a file descriptor
.Op c p a
.SH C SYNOPSIS
\f4#include <sys/man.h>\f1
.PP
\f4int shm_open (const char \(**\f2path\fP, int \f2oflag\fP, mode_t \f2mode\fP )\f1;
.Op
.Op
.SH DESCRIPTION
.I path\^
is a pointer to the character string which names a shared memory object.
\f4shm_open\f1 opens a file descriptor for the shared memory object and 
sets the memory access flag according to the value of
.I oflag\^.
The
.I oflag\^
must be set to one of the following values:
.PP
.TP 0.80i
\f4O_RDONLY\f1
Open the memory object for reading only.
.TP 0.80i
\f4O_RDWR\f1
Open the memory object for reading and writing.
.PP
With one of the above flags set, any of the following flags may
also be specified:
.TP
\f4O_CREAT\f1
If the memory object already exists, this flag has no effect, except as
noted under \f4O_EXCL\f1 below. Otherwise, the memory object is created. 
Shared memory objects are represented by files in the file namespace   
(commands like \f4ls\f1 will display memory objects as regular files).
Because of this relationship, shared memory objects inherit their access
semantics from files.  The owner ID of the memory object is set to the
effective user IDs of the process, the group ID of the memory object is set
to the effective group IDs of the process or to the group ID of the directory
in which the memory object is being created. This is determined as follows:
.sp
.in +.5i
If the underlying filesystem was mounted with the BSD file creation 
semantics flag [see \f4fstab\fP(4)] or the \f4S_ISGID\fP bit is set
[see \f4chmod\fP(2)] on the parent directory, then the group ID of the new
file is set to the group ID of the parent directory, otherwise it is set to
the effective group ID of the calling process.
.sp
If the group ID of the memory object does not match the effective
group ID, or one of the supplementary groups IDs, the \f4S_ISGID\f1
bit is cleared.  The access permission bits of the file mode are set to
the value of \f2mode\f1, modified as follows:
.IP "" 15n
All bits set in the file mode creation mask of the process are cleared
[see \f4umask\fP(2)].
.IP "" 15n
The ``save text image after execution bit'' of the mode is cleared
[see \f4chmod\fP(2)].
.TP 0.80i
\f4O_TRUNC \f1
If the shared memory object exists, its length
is truncated to zero and the mode and owner are unchanged.
.TP
\f4O_EXCL \f1
If \f4O_EXCL\f1 and \f4O_CREAT\f1 are set, \f4shm_open\f1 will fail if the
memory object exists. The check for the existence of the memory object and 
the creation of the name in the file namespace is atomic with respect to
other processes executing \f4shm_open\fP naming the same memory object 
in the same directory with \f4O_EXCL\fP and \f4O_CREAT\fP set.
.PP
Shared memory objects and their associated data persist until the memory
object is unlinked and all other references are dropped
[see \f4shm_unlink\fP(2) and \f4close\fP(2)].
.PP
If \f2path\fP is a symbolic link and \f4O_CREAT\fP and \f4O_EXCL\fP are set,
the link is not followed.
.PP
The new shared memory object file descriptor is the lowest numbered file descriptor
available and is set to close upon the execution of an \f4exec\fP
system call.
.PP
The \f4FD_CLOEXEC\fP file descriptor flag of the newly created shared memory object
is set.  This flag will cause the file descriptor to close upon the execution of an
\f4exec\fP system call.
.PP
Memory object file descriptor flag values may be modified following 
\f4shm_open\fP as described in \f4fcntl\fP(2).
.PP
If \f4O_CREAT\fP is set and the memory object did not previously exist,
\f4shm_open\f1 marks the following memory object fields for update: 
\f4st_atime\fP, \f4st_ctime\fP and \f4st_mtime\fP.  
Further, the
\f4st_time\fP
and
\f4st_mtime\fP
fields of the memory object parent directory are also marked for update.
.PP
If \f4O_TRUNC\fP is set and the memory object did previously exist,
\f4shm_open\fP marks the \f4st_ctime\fP and \f4st_mtime\fP fields 
for update.
.P
There is a system enforced limit on the number of open file descriptors per
process \f4{OPEN_MAX}\fP, whose value is returned by the 
\f4getdtablesize\fP(2) function.
.P
If the character string, pointed to by 
.I path\^,
is prefixed with \f4/dev\fP then unpredictable results may occur.  Devices are opened
using the \f4open\fP(2) function. 
.P
The shared memory object is opened unless one or more of the following are true:
.TP 0.80i
\f4EACCES\fP
The shared memory object, named by 
.I path\^,
does not exist and write permission is denied
by the parent directory of the memory object to be created.
.TP
\f4EACCES\fP
\f4O_CREAT\fP or \f4O_TRUNC\f1 is specified and write permission is denied.
.TP
\f4EACCES\fP
A component of the path prefix denies search permission.
.TP
\f4EACCES\fP
.I oflag\^
permission is denied for an existing memory object.
.TP
\f4EAGAIN\fP
The shared memory object exists, \f4O_CREAT\fP or \f4O_TRUNC\fP are specified,
mandatory file/record locking is set, and there are outstanding record locks on the file 
naming the object [see \f4chmod\fP(2)].
.TP
\f4EDQUOT\fP
\f4O_CREAT\fP
is specified, the memory object does not exist,
and the directory in which the entry for the new memory object
is being placed cannot be extended either because the
user's quota of disk blocks on the file system
containing the directory has been exhausted or
the user's quota of inodes on the file system on
which the file is being created has been exhausted.
.TP
\f4EEXIST\fP
\f4O_CREAT\f1
and
\f4O_EXCL\f1
are set, and the shared memory object exists.
.TP
\f4EFAULT\fP
.I path\^
points outside the allocated address space of the process.
.TP
\f4EINTR\fP
A signal was caught during the \f4shm_open\fP system call.
.TP
\f4EINVAL\fp
.I path\^
The \f4FD_CLOEXEC\fP file descriptor flag of the named shared memory object
could not be set.
.TP
\f4EISDIR\fP
The memory object is a directory and
.I oflag\^
is write or read/write.
.TP
\f4ELOOP\fP
Too many symbolic links were encountered in translating \f2path\f1.
.TP
\f4EMFILE\fP
The process has too many open files [see
\f4getrlimit\fP(2)].
.TP
\f4ENAMETOOLONG\fP
The length of the \f2path\f1 argument exceeds {\f4PATH_MAX\fP}, or the
length of a \f2path\f1 component exceeds {\f4NAME_MAX\fP} while
{\f4_POSIX_NO_TRUNC\fP} is in effect.
.TP
\f4ENFILE\fP
The system file table is full.
.TP
\f4ENOENT\fP
\f4O_CREAT\f1
is not set and the shared memory object does not exist.
.TP
\f4ENOENT\fP
\f4O_CREAT\f1
is set and a component of the path prefix
does not exist or is the null pathname.
.TP
\f4ENOSPC\fP
\f4O_CREAT \f1
and 
\f4O_EXCL\f1
are set, and the file system is out of inodes or
the directory in which the entry for the new memory object is being placed
cannot be extended because there is no space left on the file
system containing the directory.
.TP
\f4ENOSPC\fP
\f4O_CREAT\fP is set and the directory that would contain the memory object
cannot be extended.
.TP
\f4ENOTDIR\fP
A component of the path prefix is not a directory.
.TP
\f4ETIMEDOUT\fP
The memory object of the shm_open is located on a remote system which is not
available [see \f4intro\fP(2)].
.TP
\f4EROFS\fP
The named memory object resides on a read-only file system and either
\f4O_WRONLY\f1,
\f4O_RDWR\f1,
\f4O_CREAT\f1,
or
\f4O_TRUNC\f1
is set in
.I oflag\^
(if the memory object does not exist).
.\".TP
.\"\f4ETXTBSY\fP
.\"The memory object represents shared text, which is being executed and
.\".I oflag\^
.\"is write or read/write.
.SH "SEE ALSO"
\f4close\fP(2),
\f4dup\fP(2),
\f4exec\fP(2),
\f4fcntl\fP(2),
\f4ftruncate\fP(2),
\f4mmap\fP(2),
\f4shm_unlink\fP(2),
\f4umask\fP(2)
.SH "DIAGNOSTICS"
Upon successful completion, the file descriptor is returned.
Otherwise, a value of \-1 is returned and \f4errno\fP is set to
indicate the error.
