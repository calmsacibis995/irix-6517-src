'\"macro stdmacro
.if n .pH g2.chown @(#)chown	30.4 of 2/17/86
.TH CHOWN 2
.SH NAME
chown, fchown, lchown \- change owner and group of a file
.Op c p a
.SH C SYNOPSIS
.PP
.sp
.nf
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B "int chown (const char \(**path, uid_t owner, gid_t group);"
.sp
.B "int lchown (const char \(**path, uid_t owner, gid_t group);"
.PP
.B "int fchown (int fd, uid_t owner, gid_t group);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B "integer *4 function chown (path, owner, group)"
.br
.B "integer *4 function lchown (path, owner, group)"
.br
.B "character * (*) path"
.br
.B "integer *4 owner, group"
.PP
.B "integer *4 function fchown (fd, owner, group)"
.br
.B "integer *4 fd, owner, group"
.Op
.SH DESCRIPTION
.I Path\^
points to a
path name
naming a file,
and 
.I fd\^
refers to the file descriptor associated with a file.
The owner
.SM ID
and group
.SM ID
of the named file
are set to the numeric values contained in
.I owner\^
and
.I group\^
respectively.  Note that
.I lchown\^
differs from
.I chown\^
in that it does not follow symbolic links.
.PP
Only processes with effective user
.SM ID
equal to the file owner or
super-user may change the ownership of a file.
.PP
However, if the variable
.I restricted_chown
is enabled [see
.IR intro(2)
and
.IR lboot(1M) ]
then only the super-user can change the owner of the file, because if users
were able to give files away, they could defeat the file space accounting
procedures. The owner of the file may change the group ownership only
to those groups of which he is a member.
.PP
If
.I chown\^,
.I lchown\^, 
or
.I fchown\^
is invoked by other than the super-user, the set-user-\s-1ID\s0
and set-group-\s-1ID\s0
bits of the file mode, 04000 and 02000 respectively,
will be cleared.
Note that this has the side-effect of disabling mandatory file/record locking.
.PP
Either the owner or group
.SM ID
may be left unchanged by specifying it as \-1.
.PP
Upon successful completion,
.I chown\^,
.I lchown\^, 
and
.I fchown\^
mark for update the st_ctime field [see \f4stat\fP(2)] of the file.
.PP
.I chown\^, 
and
.I lchown\^,
will fail and the owner and group of the named file will
remain unchanged if one or more of the following are true:
.TP 17
.SM
\%[ENOTDIR]
A component of the
path prefix
is not a directory.
.TP
.SM
\%[ENOENT]
The named file does not exist.
.TP
.SM
\%[EACCES]
Search permission is denied on a
component of the
path prefix.
.TP
.SM
\%[EPERM]
The effective user
.SM ID
does not match the owner of the file
and the effective user
.SM ID
is not super-user.
.TP
.SM
\%[EPERM]
.I restricted_chown
is enabled and the effective user ID is not the super-user.
.TP
.SM
\%[EINVAL]
The 
.I owner
or
.I group
value is out of the valid range of \-1, MAXUID.
.TP
.SM
\%[EROFS]
The named file resides on a read-only file system.
.TP
.SM
\%[EFAULT]
.I Path\^
points outside the allocated address space of the process.
.\".TP
.\".SM
.\"\%[ENOLINK]
.\"\f2Path\f1 points to a remote machine and the link
.\"to that machine is no longer active.
.\".TP
.\".SM
.\"\%[EMULTIHOP]
.\"Components of \f2path\f1 require hopping to multiple
.\"remote machines.
.TP
.SM
\%[ELOOP]
A path name lookup involved too many symbolic links.
.TP
.SM
\%[ENAMETOOLONG]
The length of
.I path
exceeds
.SM
.RI { PATH_MAX },
or a pathname component is longer than
.SM
.RI { NAME_MAX }.
.PP
.I fchown\^
will fail if:
.TP 15
.SM
\%[EBADF]
.I Fd\^
does not refer to a valid descriptor.
.TP
.SM
\%[EINVAL]
.I Fd\^
refers to a socket, not a file.
The 
.I owner
or
.I group
value is out of the valid range of \-1, MAXUID.
.SH "SEE ALSO"
chown(1),
chmod(2), fchmod(2)
.SH "DIAGNOSTICS"
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.I errno\^
is set to indicate the error.
.\"	@(#)chown.2	6.2 of 9/6/83
.Ee
'\".so /pubs/tools/origin.att
