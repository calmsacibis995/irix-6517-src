.TH syssgi 2
.SH NAME
syssgi \- \&Silicon Graphics Inc. system call
.SH SYNOPSIS
.nf
\f3#include <sys/syssgi.h>\f1
.sp .8v
\f3ptrdiff_t syssgi (int request, ...);\f1
.fi
.SH DESCRIPTION
\f2syssgi\f1 is a system interface specific to Silicon Graphics
systems.
The value of the \f2request\f1 parameter determines the meaning
of the remaining arguments.
In the descriptions below, \f2arg1\fP, \f2arg2\fP, and \f2arg3\fP
refer to parameters following the \f2request\fP argument.
The following requests are currently supported:
.TP 12
.B SGI_SYSID
Returns an identifier for the given system.
This identifier is guaranteed to be unique within the Silicon Graphics
product family.
The argument \f2arg1\f1 for this \f2request\f1
should be a pointer to a character buffer of \f3MAXSYSIDSIZE\f1 characters.
.TP
.B SGI_RDNAME
Returns the process name for the process id specified in \f2arg1\f1.
The arguments \f2arg2\f1 and \f2arg3\f1
give the address and length, respectively, of the buffer which will receive
the name string.
This name corresponds to the name in the
\f4COMMAND\f1
column of \f2ps\f1(1) for the given process.
The returned string will be null-terminated unless
the caller's buffer is too small, in which case the string is simply
truncated at the size of the buffer.
The return value gives the number of bytes copied to the buffer,
which will be the minimum of the size of the buffer and the size
of the field in the user structure that contains the process name.
Note that this means that the returned length will typically be greater
than the actual length of the name string (in the sense of \f2strlen\f1(3)).
.TP
.B SGI_RDUBLK
Was an obsolete feature and has been discontinued.
Users are directed
to the process filesystem (see \f2proc\fP(4).) to obtain information
about a process.
.TP
.B SGI_PROCSZ
Was an obsolete feature and has been discontinued.
Users are directed
to the process filesystem (see \f2proc\fP(4).) to obtain information
about a process.
.TP
.B SGI_TUNE
This request allows the
superuser to redefine tunable variables
to more accurately reflect system use.
The argument \f2arg1\f1 is a buffer pointer which
specifies a group name of the tunable variable.
The argument \f2arg2\f1
is a buffer pointer which holds the address of the tunable variable.
\f2arg3\f1 should be a buffer containing the tune value.
\f2systune\fP(1M) is the preferred way to change these variables.
This system call is only supported for 64 bit programs when running
on 64 bit kernels.
.TP
.B SGI_IDBG
Used internally for kernel debugging.
.TP
.B SGI_INVENT
Returns information about the hardware inventory of the system.
If \f2arg1\f1 is \f3SGI_INV_SIZEOF\f1
then the size of an individual inventory item is returned.
If \f2arg1\f1 is \f3SGI_INV_READ\f1 then \f2arg3\f1
bytes worth of inventory records are read into the buffer specified by
\f2arg2\f1.
Applications should use \f2getinvent\fP(3) to access this
information; this internal interface may change.
.TP
.B SGI_SETLED
If \f2arg1\fP is 1, turn on an LED on the machine.
0 turns it off.
This is only available on some SGI computers.
.TP
.B SGI_SETNVRAM
Sets nvram variable with given value.
Nvram variables are subset of IRIS PROM Monitor environment variables,
which are saved in EEPROM, and the values of which are
preserved over power cycle.
\f2arg1\f1 is a buffer pointer which specifies a name of nvram variable.
\f2arg2\f1 is a buffer pointer which holds the value of the nvram variable.
Both buffers pointed by \f2arg1\f1 and \f2arg2\f1 must be at least
128 bytes long.
.TP
.B SGI_GETNVRAM
Retrieve values of the IRIS PROM Monitor environment variables.
(see \f2sgikopt\f1(2)).
\f2arg1\f1 is a buffer pointer which specifies either name or index of a
IRIS PROM Monitor variable.
Both name and index must be ASCII string.
\f2arg2\f1 is a buffer pointer in which the value be returned.
Both buffers pointed by \f2arg1\f1 and \f2arg2\f1 should be at least
128 bytes long.
.PP
.nf
.B SGI_SETSID
.B SGI_SETPGID
.B SGI_SYSCONF
.B SGI_PATHCONF
.B SGI_SETGROUPS
.B SGI_GETGROUPS
.B SGI_SETTIMEOFDAY
.B SGI_SPROFIL
.B SGI_RUSAGE
.B SGI_SIGSTACK
.B SGI_NETPROC
.B SGI_NFSCNVT
.B SGI_GETPGID
.B SGI_GETSID
.B SGI_MPCWAROFF
.B SGI_SPIPE
.B SGI_FDHI
.B SGI_CREATE_UUID
.B SGI_GETASH
.B SGI_SETASH
.B SGI_GETPRID
.B SGI_GETDFLTPRID
.B SGI_SETPRID
.B SGI_GETSPINFO
.B SGI_SETSPINFO
.B SGI_ARSESS_CTL
.B SGI_ARSESS_OP
.fi
.PD 0
.TP 12
.B SGI_NEWARRAYSESS
These are all interfaces that are used to implement various \f2libc\fP
functions.
These are all subject to change and should not be called directly by
applications.
.PD
.PP
.nf
.B SGI_GETPLABEL
.B SGI_SETPLABEL
.B SGI_GETLABEL
.B SGI_SETLABEL
.B SGI_SATREAD
.B SGI_SATWRITE
.B SGI_SATCTL
.B SGI_LOADATTR
.B SGI_UNLOADATTR
.B SGI_RECVLUMSG
.B SGI_PLANGMOUNT
.B SGI_GETPSOACL
.fi
.PD 0
.TP 12
.B SGI_SETPSOACL
These are all interfaces that are used to implement various \f2libc\fP
and \f2libnsl\fP (enhanced security) functions.
These are all subject to change and should not be called directly by
applications.
.PD
.PP
.B SGI_READB
.br
.PD 0
.TP 12
.B SGI_WRITEB
These are used to read and write character special devices that are greater
than 2Gb.
\f2arg1\fP is the file descriptor pointing to a character special device.
\f2arg2\fP is a buffer in the user's space where the data will be
transferred from or to.
\f2arg3\fP is the block (512 bytes) offset of where to start the transaction.
\f2arg4\fP is the number of blocks to transfer.
This interface is superceded in IRIX Release 5.3 by the use of
\f2lseek64\fP, which provides 64-bit seek offsets.
.PD
.TP 12
.B SGI_SSYNC
Synchronously flush out all delayed write buffers.
.TP
.B SGI_BDFLUSHCNT
Allows the calling process to delay the kernel from writing out delayed
write buffers by \f2arg1\f1 seconds.
After that, the normal flush delay will apply.
At the end of the system call, the kernel will return the old flush delay.
This system call is intended to be used in conjunction with the
\f3SGI_SSYNC\f1 system call on a single processor machine to provide
the calling process with an environment that is free of any unwanted
disk activities for the period of \f2arg1\f1 seconds.
.TP
.B SGI_QUERY_FTIMER
Used by \f2ftimer\fP(1).
.TP
.B SGI_CYCLECNTR_SIZE
Returns the size of the integer needed to read the cycle counter.
This is useful along with
SGI_QUERY_CYCLECNTR to write machine independent code to read the
free running hardware counter.
On some machines the value needs to be
read into a 32 bit integer, and on others the cycle counter needs to
be read into a 64 bit integer.
.TP
.B SGI_QUERY_CYCLECNTR
It is best to use the clock_gettime(2) interface with the
CLOCK_SGI_CYCLE clock instead of mapping the counter yourself.
This is a much more portable solution.
That said, this syssgi option
returns information about the free running hardware counter on
systems that support a high resolution timer.
Upon successful completion, an address for the counter is returned.
The size of the integer needed to hold the count
can be found using the SGI_CYCLECNTR_SIZE syssgi call.
.IP
On machines with 64-bit counters it can either be read with two
separate 32-bit accesses (one at the
returned address, and the other at the returned address plus four),
or with a single 64-bit "long long" access in MIPS3 or MIPS4 applications.
.IP
The address must be mapped read-only into the user process space via the
\f2mmap\fP(2) system call into \f3/dev/mmem\fP before any access can be
made.
Not all systems return page aligned addresses, so the address must
be masked to be page aligned, and the offset added back to the returned
mmap address, in order for code to work on all systems, so typically you
would see code like this (ignoring error checking):
.RS 2
.Ex
#include <stddef.h>
#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <sys/syssgi.h>
.sp .8v
#if CYCLE_COUNTER_IS_64BIT
typedef unsigned long long iotimer_t;
#else
typedef unsigned int iotimer_t;
#endif
__psunsigned_t phys_addr, raddr;
unsigned int cycleval;
volatile iotimer_t counter_value, *iotimer_addr;
int fd, poffmask;
.sp .8v
poffmask = getpagesize() - 1;
phys_addr = syssgi(SGI_QUERY_CYCLECNTR, &cycleval);
raddr = phys_addr & ~poffmask;
fd = open("/dev/mmem", O_RDONLY);
iotimer_addr = (volatile iotimer_t *)mmap(0, poffmask, PROT_READ,
	MAP_PRIVATE, fd, (off_t)raddr);
iotimer_addr = (iotimer_t *)((__psunsigned_t)iotimer_addr +
	(phys_addr & poffmask));
counter_value = *iotimer_addr;
.Ee
For the Challenge/ONYX and OCTANE families 64-bit counter,
define CYCLE_COUNTER_IS_64BIT.
Sixty-four bit (MIPS 3, MIPS 4) applications may simply use the example
above with CYCLE_COUNTER_IS_64BIT defined.
Thirty-two bit applications need to read the halves separately and check
for wrap-around.
Pass iotimer_addr and two unsigned int pointers to the
following routine:
.Ex
void read_time(volatile unsigned *iotimer_addr,
               unsigned *high, unsigned *low)
 {
    while (1) {
        *high = *iotimer_addr;
        *low = *(iotimer_addr + 1);
        if (*high == *iotimer_addr) {
            return;
        }
    }
 }
.Ee
This will put the top and bottom 32 bits of the time into the
memory pointed to by high and low, respectively.
If you only need 32-bit precision, you may use the original example
but replace the counter_value assignment with
.Ex
counter_value = *(iotimer_addr + 1);
.Ee
.RE
.sp .8v
.TP
.B SGI_SETTIMETRIM
changes the value of timetrim from the initial value configured in
\f3/var/sysgen/mtune/kernel\f1 (see \f2lboot\f1(1M) and \f2adjtime\f1(2)).
The argument \f2arg1\f1 is interpreted as an integer, which gives the
new value of timetrim.
.TP
.B SGI_GETTIMETRIM
obtains the current value of timetrim.
The argument \f2arg1\f1 must be a pointer to an integer, into which the
timetrim value is stored.
.TP
.B SGI_SET_AUTOPWRON
Is used to set the time at which the system will automatically
power on (if it is powered off at that time).
If the system is not powered off at that time (hasn't yet been
shutdown and powered off), the call has no effect.
Rebooting the system clears the value.
This is currently implemented only on OCTANE, Indy, Indigo\u2\d and Challenge M
systems.
The 3rd argument is a time_t whose value is the time in
seconds from 1 Jan 1970 midnight GMT at which to turn the system on.
Also see the \f2wakeupat\f1(1M) man page.
See the ENOPKG description below for systems not implementing
this function.
.PP
.B SGI_IOPROBE
.br
.PD 0
.TP 12
.B SGI_CONFIG
These are used by \f2lboot\fP(1M) to determine the system configuration.
.PD
.TP 12
.B SGI_MCONFIG
Is used by \f2lboot\fP(1M) and \f2ml\fP(1M) to load, register, unload,
unregister and list dynamically loadable kernel modules.
This is subject to change and should not be called directly by applications.
.TP
.B SGI_TOSSTSAVE
Used by runtime linkers to remove any saved text address spaces.
.TP
.B SGI_GET_UST
This interface is used to implement various \f2libdmedia\fP functions.
It is subject to change and should not be called directly by applications.
.TP
.B SGI_SET_FP_PRECISE
Modifies floating point exception mode for the current process.
This is only meaningful on processors that support multiple modes.
On these processors, the default mode is usually performance mode (also
called imprecise exception mode) and non-sequential memory (nsmm) mode.
On all other processors, the default is precise exception and sequential (smm)
mode.
.IP
\f2arg1\f1 should be non-zero in order to enable precise exception mode.
A value of zero will disable precise exception mode thereby enabling
peformance mode.
.IP
In precise exception mode, all floating point exceptions/interrupts are
reported on the instruction that caused the exception, so floating point
signal handlers can clean up the FP state and continue execution.
In performance mode, floating point interrupts are asynchronous and the
reported program counter is meaningless.
Precise mode is provided as a means of debugging processes and/or backward
compatibility for programs that have knowledge of the FP state.
It causes significant performance degradation.
.IP
Currently this call only has an affect on machines with an R8000 processor
since that is the only processor which supports this dual execution mode.
.TP
.B SGI_GET_FP_PRECISE
Returns the floating point exception mode for the current process. A zero
value indicates that precise exception mode is disabled.
.TP
.B SGI_FP_IMPRECISE_SUPP
Returns non-zero if the current processor supports imprecise exceptions for
floating point instructions.
.TP
.B SGI_SET_CONFIG_SMM
Modifies the memory model for floating point instructions for the current
process.
Non-sequential memory access mode (turned on by default on processors
that support it) allows the processor to do floating point and integer memory
operations out of order, thus possibly providing better performance.
.TP
.B SGI_GET_CONFIG_SMM
Returns non-zero if the current process is in sequential memory mode.
.TP
.B SGI_CONFIG_NSMM_SUPP
Returns non-zero if the current processor supports non-sequential memory
operations.
.TP
.B SGI_SET_FP_PRESERVE
Forces floating point state information (precise/imprecise exception mode
as well as sequential/non-sequential memory mode) to be preserved across
\f2exec\fP(2) system calls.
.TP
.B SGI_FS_INUMBERS
This interface is used to extract a list of valid inode numbers from
a filesystem.
It is intended to be called iteratively, to obtain the entire set of inodes.
Currently the only filesystem type supporting this operation
is the XFS filesystem.
\f2arg1\f1 is a file descriptor either
for the block or character device containing the filesystem of interest
(it must be mounted)
or for an open file in the filesystem of interest.
\f2arg2\f1 is a pointer to a variable of type \f4ino64_t\fP
containing the last inode returned, initially it should be 0.
\f2arg3\f1 is the size of the array of structures specified by \f2arg4\f1.
\f2arg4\f1 is the address of an array of structures, of type \f4xfs_inogrp_t\fP
(definition found in <sys/fs/xfs_itable.h>).
The structure has the following elements:
\f4xi_startino\fP (starting inode number),
\f4xi_alloccount\fP (count of bits set in \f4xi_allocmask\fP),
and \f4xi_allocmask\fP (mask of allocated inodes in this group).
The bitmask is 64 bits long,
and the least significant bit corresponds to inode \f4xi_startino\fP.
Each bit is set if the corresponding inode is in use.
\f2arg5\f1 is a pointer to a count of returned values, filled in by the call.
A \f2count\fP value of 0 means that the inode table has been exhausted.
.TP
.B SGI_FS_BULKSTAT
This interface is used to extract inode information (stat information)
"in bulk" from a filesystem.
It is intended to be called iteratively,
to obtain information about the entire set of inodes
in a filesystem.
Currently the only filesystem type supporting this operation
is the XFS filesystem.
\f2arg1\f1 is a file descriptor either
for the block or character device containing the filesystem of interest
(it must be mounted)
or for an open file in the filesystem of interest.
\f2arg2\f1 is a pointer to a variable of type \f4ino64_t\fP
containing the last inode returned, initially it should be 0.
\f2arg3\f1 is the size of the array of structures specified by \f2arg4\f1.
\f2arg4\f1 is the address of an array of structures, of type \f4xfs_bstat_t\fP
(definition found in <sys/fs/xfs_itable.h>).
Many of the elements in the structure are the same as for the
\f2stat\fP structure.
The structure has the following elements:
\f4bs_ino\fP (inode number),
\f4bs_mode\fP (type and mode),
\f4bs_nlink\fP (number of links),
\f4bs_uid\fP (user id),
\f4bs_gid\fP (group id),
\f4bs_rdev\fP (device value),
\f4bs_blksize\fP (block size of the filesystem),
\f4bs_size\fP (file size in bytes),
\f4bs_atime\fP (access time),
\f4bs_mtime\fP (modify time),
\f4bs_ctime\fP (inode change time),
\f4bs_blocks\fP (number of blocks used by the file),
\f4bs_xflags\fP (extended flags),
\f4bs_extsize\fP (extent size),
\f4bs_extents\fP (number of extents),
\f4bs_gen\fP (generation count),
\f4bs_projid\fP (project id),
\f4bs_dmevmask\fP (DMIG event mask),
\f4bs_dmstate\fP (DMIG state information), and
\f4bs_aextents\fP (attribute extent count).
\f2arg5\f1 is a pointer to a count of returned values, filled in by the call.
A \f2count\fP value of 0 means that the inode table has been exhausted.
.TP
.B SGI_FS_BULKSTAT_SINGLE
This interface is a variant of the
.B SGI_FS_BULKSTAT
interface, used to obtain information about a single inode.
\f2arg1\f1 is a file descriptor either
for the block or character device containing the filesystem of interest
(it must be mounted)
or for an open file in the filesystem of interest.
\f2arg2\f1 is a pointer to a variable of type \f4ino64_t\fP
containing the inode number of interest.
\f2arg3\f1 is the address of a structure, of type \f4xfs_bstat_t\fP
(definition found in <sys/fs/xfs_itable.h>).
An error is returned if the inode number is invalid.
.TP
.B SGI_XFS_FSOPERATIONS
This interface is used to implement various filesystem operations on
XFS filesystems.
There are several sub-operations implemented.
See the header file <sys/fs/xfs_fsops.h> for further information.
\f2arg1\f1 is a file descriptor either
for the block or character device containing the filesystem of interest
(it must be mounted)
or for an open file in the filesystem of interest.
\f2arg2\f1 is the operation code, one of \f3XFS_FS_GEOMETRY\f1,
\f3XFS_FS_COUNTS\f1, \f3XFS_GROWFS_DATA\f1, \f3XFS_GROWFS_LOG\f1,
or \f3XFS_GROWFS_RT\f1.
\f2arg3\f1 is a pointer to the input structure,
of a type determined by the operation code; it may be null.
\f2arg4\f1 is a pointer to the output structure,
of a type determined by the operation code; it may be null.
For \f3XFS_FS_GEOMETRY\f1 (get filesystem mkfs-time information),
the output structure is \f4xfs_fsop_geom_t\fP.
For \f3XFS_FS_COUNTS\f1 (get filesystem dynamic global information),
the output structure is \f4xfs_fsop_counts_t\fP.
The \f3XFS_GROWFS_...\f1
operations are used to implement the \f2xfs_growfs\f1(1M)
command, and are not described further.
Only the super-user may call functions that modify data
(XFS_GROWFS_DATA, XFS_GROWFS_LOG, XFS_GROWFS_RT, and XFS_SET_RESBLKS).
.PP
.nf
.B SGI_PATH_TO_HANDLE
.B SGI_PATH_TO_FSHANDLE
.B SGI_FD_TO_HANDLE
.B SGI_OPEN_BY_HANDLE
.B SGI_READLINK_BY_HANDLE
.B SGI_ATTR_LIST_BY_HANDLE
.B SGI_ATTR_MULTI_BY_HANDLE
.fi
.PD 0
.TP 12
.B SGI_FSSETDM_BY_HANDLE
These are all interfaces that are used
to implement various \f2libdm\fP functions.
The only filesystem that supports these operations is XFS.
They are all subject to change
and should not be called
directly by applications.
.PD
.PP
.nf
.B SGI_ENUMASHS
.B SGI_GETARSESS
.B SGI_GETASMACHID
.B SGI_PIDSINASH
.fi
.PD 0
.TP 12
.B SGI_SETASMACHID
These are all interfaces that are used to implement various
\f2libarray\fP functions.
They are all subject to change and should not be used directly
by applications.
.PD
.PP
.nf
.B SGI_ACL_GET
.B SGI_ACL_SET
.B SGI_ALLOCSHARENA
.B SGI_BTOOLGET
.B SGI_BTOOLREINIT
.B SGI_BTOOLSIZE
.B SGI_CACHEFS_SYS
.B SGI_CAP_GET
.B SGI_CAP_SET
.B SGI_CKPT_SYS
.B SGI_CONST
.B SGI_DBA_CONFIG
.B SGI_DYIELD
.B SGI_ELFMAP
.B SGI_ERROR_FORCE
.B SGI_EVENTCTR
.B SGI_FO_DUMP
.B SGI_FO_SWITCH
.B SGI_GETGRPPID
.B SGI_GETSESPID
.B SGI_GETVPID
.B SGI_GET_CONTEXT_INFO
.B SGI_GET_CONTEXT_NAME
.B SGI_GET_DISMISSED_EXC_CNT
.B SGI_GET_EVCONF
.B SGI_GRIO
.B SGI_IO_SHOW_AUX_INFO
.B SGI_JOINARRAYSESS
.B SGI_KAIO_READ
.B SGI_KAIO_STATS
.B SGI_KAIO_SUSPEND
.B SGI_KAIO_USERINIT
.B SGI_KAIO_WRITE
.B SGI_KTHREAD
.B SGI_LOCKDSYS
.B SGI_MAC_GET
.B SGI_MAC_SET
.B SGI_MEMPROF_CLEARALL
.B SGI_MEMPROF_GET
.B SGI_MEMPROF_START
.B SGI_MEMPROF_STOP
.B SGI_MINRSS
.B SGI_MODULE_INFO
.B SGI_NFSNOTIFY
.B SGI_NOFPE
.B SGI_NUMA_STATS_GET
.B SGI_NUMA_TESTS
.B SGI_NUMA_TUNE
.B SGI_NUM_MODULES
.B SGI_OBJ_EVICT
.B SGI_PART_OPERATIONS
.B SGI_PHYSP
.B SGI_PMOCTL
.B SGI_PRIO_QUERY_BW
.B SGI_PROC_ATTR_GET
.B SGI_PROC_ATTR_SET
.B SGI_READ_DANGID
.B SGI_RELEASE_NAME
.B SGI_REVOKE
.B SGI_RT_TSTAMP_ADDR
.B SGI_RT_TSTAMP_CREATE
.B SGI_RT_TSTAMP_DELETE
.B SGI_RT_TSTAMP_EOB_MODE
.B SGI_RT_TSTAMP_MASK
.B SGI_RT_TSTAMP_START
.B SGI_RT_TSTAMP_STOP
.B SGI_RT_TSTAMP_UPDATE
.B SGI_RT_TSTAMP_WAIT
.B SGI_SBE_CLR_INFO
.B SGI_SBE_GET_INFO
.B SGI_SETVPID
.B SGI_SET_DISMISSED_EXC_CNT
.B SGI_SIGALTSTACK
.B SGI_SPECULATIVE_EXEC
.B SGI_SYMTAB
.B SGI_SYNCH_CACHE_HANDLER
.B SGI_TUNE_SET
.B SGI_ULI
.B SGI_USE_FP_BCOPY
.B SGI_XLV_ATTR_CURSOR
.B SGI_XLV_ATTR_GET
.B SGI_XLV_ATTR_SET
.B SGI_XLV_NEXT_RQST
.fi
.PD 0
.TP 12
.B SGI_XLV_SET_TAB
These are all interfaces that are used
to implement various system library functions.
They are all subject to change and should not be called
directly by applications.
.sp .8v
.SH ERRORS
The following error codes may be returned by
.IR syssgi :
.TP 12
\&[EFAULT\&]
A buffer is referenced which is not in a valid part of the calling program's
address space.
.TP
\&[ENODEV\&]
Could not determine system ID for \f3SGI_SYSID\f1.
.TP
\&[ESRCH\&]
Could not find given process for \f3SGI_RDNAME\f1.
.TP
\&[EPERM\&]
The effective user ID is not superuser.
\f3SGI_TUNE\f1 and \f3SGI_IDBG\f1 require superuser privilege.
.TP
\&[EINVAL\&]
For
\f3SGI_TUNE\f1, the first argument was not valid,
or the tune structure contained invalid values.
For \f3SGI_INVENT\f1 \f2arg1\f1 was neither \f3SGI_INV_READ\f1 nor
\f3SGI_INV_SIZEOF\f1.
For \f3SGI_SETNVRAM\f1 \f2arg1\f1 is not valid nvram variable name.
For \f3SGI_GETNVRAM\f1 \f2arg1\f1 is not valid IRIS PROM Monitor
environment variable name.
For \f3SGI_FS_BULKSTAT_SINGLE\f1 \f2arg2\f1 does not refer to 
a valid inode number for this filesystem.
.TP
\&[ENXIO\&]
\f3SGI_SETNVRAM\f1 is not supported.
.TP
\&[ENOPKG\&]
\f3SGI_SET_AUTOPWRON\f1 is not supported on this system.
.TP
\&[ENOMEM\&]
The specified buffer was not large enough to hold the entire list of
process ids returned by the \f3SGI_PIDSINASH\f1 function.
.SH SEE ALSO
ftimer(1),
hinv(1),
mpadmin(1),
adjtime(2),
clock_gettime(2),
clock_settime(2),
setitimer(2),
sigaction(2).
.SH "DIAGNOSTICS"
Upon successful completion, a command dependent value (default of zero) is
returned.
Otherwise, a value of \-1 is returned and
\f2errno\f1
is set to indicate the error.
