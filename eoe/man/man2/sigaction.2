'\"! tbl | mmdoc
'\"macro stdmacro
.TH SIGACTION 2
.UC 4
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
sigaction \- software signal facilities (\s-1POSIX\s+1) 
.SH SYNOPSIS
.nf
.B #include <signal.h>
.PP
\f4C:\f1
.br
.B "  struct sigaction {"
.B	int sa_flags;
.B	void (\(**sa_handler)();
.B	sigset_t sa_mask;
.B	void (\(**sa_sigaction)(int, siginfo_t *, void \(**);
.B "  };"
.PP
\f4C++:\f1
.br
.B "  struct sigaction {"
.B	int sa_flags;
.B	void (\(**sa_handler)(int);
.B	sigset_t sa_mask;
.B	void (\(**sa_sigaction)(int, siginfo_t *, void \(**);
.B "  };"
.PP
.B "int sigaction(int sig, struct sigaction \(**act,"
.B "                       struct sigaction \(**oact);"
.fi
.SH DESCRIPTION
.PP
.I sigaction
specifies and reports on the way individual signals are to be handled
in the calling process.  
.sp
.I sig
specifies the signal and can be assigned any of the signals specified in 
\f3\s-1signal(5)\s+1\fP.
.sp
If
.I act
is non-zero, it points to a structure specifying the new action to be taken when delivering
.I sig.
If 
.I oact
is non-zero, the previous handling information for the signal
is returned to the user.  In this way (a 
.SM NULL
.I act
and a non-\s-1NULL\s+1
.I oact)
the user can enquire as to the current handling of a signal without
changing it.  If both 
.I act
and
.I oact
are \s-1NULL\s+1,
.I sigaction
will return \f3\s-1EINVAL\s+1\fP if
.I sig
is an invalid signal (else 0), allowing an application to dynamically
determine the set of signals supported by the system.
.PP
If the SA_SIGINFO flag is clear in \f3\s-1sa_flags\s+1\fP then
\f3\s-1sa_handler\s+1\fP specifies the disposition of the signal and may take any of the values specified in \f3\s-1signal(5)\s+1\fP.
.sp
If the SA_SIGINFO flag is set in \f3\s-1sa_flags\s+1\fP then
\f3\s-1sa_sigaction\s+1\fP specifies the disposition of the signal 
and may take a pointer to a function.
.sp
\f3\s-1sa_mask\s+1\fP specifies a set of signals to be blocked while the signal handler is active. On entry to the signal handler, that set of signals is added to the set of signals already being blocked when the signal is delivered. 
In addition, the signal that caused the handler to be executed
will also be blocked, unless the \f4SA_NODEFER\fP flag has been specified.
Keep in mind that \f4SA_NODEFER\fP is superseded by \f3\s-1sa_mask\s+1\fP so that if \f4SA_NODEFER\fP is set but the same signal is specified in \f3\s-1sa_mask\s+1\fP, the signal will still be blocked.
\f4SIGSTOP\fP and \f4SIGKILL\fP cannot be blocked
(the system silently enforces this restriction).
The user constructs this mask via the routines 
described in \f4sigsetops\fP(3).
.PP
The 
.I sa_flags
field specifies a set of flags used to modify the delivery of the signal.
It is formed by a logical
.SM OR
of any of the following values:
.RS
.TP 13
\f4SA_ONSTACK\fP
If set and the signal is caught and an alternate signal stack has been declared with
\f4sigaltstack\fP(2),
the signal is delivered to the calling process
on that stack.
Otherwise, the signal is delivered on the same stack as the
main program.
.TP
\f4SA_RESETHAND\fP
If set and the signal is caught, the disposition of the signal is reset to
\f4SIG_DFL\fP
(\f4SIGILL\fP, \f4SIGTRAP\fP, and \f4SIGPWR\fP cannot be 
automatically reset when delivered;
the system silently enforces this restriction).
.TP
\f4SA_NODEFER\fP
If set and the signal is caught, the signal will not be automatically blocked by the
kernel while it is being caught.
.TP
\f4SA_RESTART\fP
If set and the signal is caught, a system call that is interrupted by the
execution of this signal's handler is transparently
restarted by the system.
Otherwise, that system call returns an \f4EINTR\fP error.
.TP
\f4SA_SIGINFO\fP
If set and the signal is caught,
\f2sig\f1
is passed as the first argument to the signal-catching function.
If the second argument is not equal to
\f4NULL\fP, it points to a \f4siginfo_t\f1 structure containing
the reason why the signal was generated [see \f4siginfo\fP(5)];
the third argument points to a \f4ucontext_t\f1 structure
containing the receiving process's context when
the signal was delivered [see \f4ucontext\fP(5)].
If cleared and the signal is caught, the first argument is also the signal number but the second argument is the 
signal code identifying the cause of the signal. The third argument points to a
\f4sigcontext_t\f1 structure containing the receiving process's context when the
signal was delivered. This is the default behavior
(see \f4signal(5)\fP for more details).
Additionally, when \f4SA_SIGINFO\fP is set for a signal, multiple occurrences 
of that signal will be queued for delivery in FIFO order (see \fPsigqueue\fP(3) 
for a more detailed explanation of this concept), if those occurrences of that signal were generated using \fPsigqueue\fP(3).
.TP
\f4SA_NOCLDWAIT\fP
If set and \f2sig\f1 equals \f4SIGCHLD\fP,
the system will not create zombie processes when children of the
calling process exit.
If the calling process subsequently issues a
\f4wait\f1(2),
it blocks until all of the calling process's child processes terminate,
and then returns a value of \-1 with
\f4errno\^\f1
set to
\f4ECHILD\fP.
.TP
\f4SA_NOCLDSTOP\fP
If set and
\f2sig\^\f1
equals
\f4SIGCHLD\fP,
\f2sig\^\f1
will not be sent to the calling process when its child processes stop or continue.
.RE
.PP
.I sigaction
will fail and no new signal handler will be installed if one
of the following occurs:
.TP 10
.SM
\%[EFAULT]
Either
.I act
or 
.I oact
points to memory that is not a valid part of the process
address space.
.TP
.SM
\%[EINVAL]
.I sig
is not a valid signal number.
.TP
.SM
\%[EINVAL]
An attempt is made to ignore or supply a handler for \f3\s-1SIGKILL\s+1\fP
or \f3\s-1SIGSTOP\s+1\fP.
.TP
.SM
\%[EINVAL]
An attempt is made to ignore \f3\s-1SIGCONT\s+1\fP (by 
default \f3\s-1SIGCONT\s+1\fP
is ignored).
.SH "SEE ALSO"
blockproc(2), kill(2), signal(2), sigprocmask(2), sigpending(2), sigsuspend(2),
sigwait(2), sigsetjmp(3), sigset(2), setrlimit(2), ulimit(2), wait(2),
sigsetops(3), sigvec(3B), signal(5).
.SH DIAGNOSTICS
A 0 value indicates that the call succeeded.  A \-1 return value
indicates an error occurred and
.I errno
is set to indicate the reason.
.so warnings
.PP
In multithreaded processes,
.I sigaction
cannot be used to predictably affect another thread waiting for
the affected signals via
.IR sigwait .
