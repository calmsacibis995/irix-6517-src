'\"!  tbl | mmdoc
'\"macro stdmacro
.if n .pH g2.signal @(#)signal	30.11 of 3/24/86
.TH SIGNAL 2
.SH NAME
signal \- software signal facilities (System V)
.Op c p a
.SH C SYNOPSIS
.B #include <signal.h>
.nf
.PP
\f4C:\f1
.br
.B "  void (\(**signal (int sig, void (\(**func)()))();"
\f4C++:\f1
.br
.B "  void (\(**signal (int sig, void (\(**func)(int)))(int);"
.sp
\f4#if _XOPEN_SOURCE\f1
.br
.B "  void (\(**signal (int sig, void (\(**func)(int)))(int);"
\f4#endif\f1
.fi
.Op
.Op f
.SH "FORTRAN SYNOPSIS"
.nf
.B #if (_MIPS_SZPTR == 64)
.B #define pointer integer*8
.B #else
.B #define pointer integer*4
.B #endif
.PP
.B "pointer function signal (sig, func, flag)"
.B "integer sig, func, flag"
.B external func
.fi
.Op
.SH DESCRIPTION
\f4signal\fP
allows the calling process to choose one of three ways
in which it is possible to handle the receipt of a specific signal.
.I sig\^
specifies the signal and
.I func\^
specifies the choice.
.Op
.Op f
.PP
.SM FORTRAN
interface routine signal takes an extra argument
.I flag\^.
if
.I flag\^
is a negative value
.I func
must be an external
.SM FORTRAN
procedure name.
Otherwise,
.I func
is ignored and
.I flag\^
can contain \f4SIG_DFL\fP, \f4SIG_IGN\fP, or
the address of a C signal-handling routine.
In this case,
.I flag
will be passed to the system call \f4signal\fP as 
.I func.
.I flag
may be the value returned from a previous call to \f4signal\fP
and, thus, can be used to restore a previous action
definition.
Note that 
.I flag
can only be an integer variable containing the address of
a C function and not the C function itself.
.Op
.PP
For a list of valid signals and a general description of the signal mechanism please see \f4signal\fP(5).
.PP
.TP 10
.SM
\%[EINVAL]
\f4signal\fP will fail if
.I sig\^
is an illegal signal number, including
.SM
.B SIGKILL
and
.SM
.BR SIGSTOP .
.TP
.SM
\%[EINVAL]
\f4signal\fP will fail if an illegal operation is requested (for example,
ignoring
.SM
.BR SIGCONT ,
which is ignored by default).
.PP
.Op
.Op f
.SH EXAMPLES
This is an example in FORTRAN (32 bits):
.nf

    #include <sys/signal.h>

    EXTERNAL FPROC
    INTEGER SIGNAL
    INTEGER CPADDR

    I = SIGNAL(SIGTERM, FPROC, -1)
    J = SIGNAL(SIGINT, 0, CPADDR)

.fi
The first call to \f4signal\f1 sets up the FORTRAN function
\f2fproc\f1 as the signal-handling routine for \f4SIGTERM\f1.
The second call sets up a C function whose address is in the variable
\f2cpaddr\f1 as the signal-handling routine for \f4SIGINT\f1.
.sp
For a 64 bit program, you need to declare I and J above as integer *8.
.Op
.SH SEE ALSO
kill(1),
intro(2), blockproc(2), kill(2), pause(2), ptrace(2), sigaction(2), sigset(2),
wait(2), setjmp(3C), sigvec(3B), pthread_kill(3P), signal(5)
.SH DIAGNOSTICS
Upon successful completion,
\f4signal\fP returns the previous value of
.I func\^
for the specified signal
.IR sig .
Otherwise, a value of \f4SIG_ERR\fP is returned and
.I errno\^
is set to indicate the error.
\f4SIG_ERR\fP is defined in the header file
.RI < sys/signal.h >.
.so warnings
.PP
Before entering the signal-catching function, the value of
.I func\^
for the caught signal will be set to
.SM
.B SIG_DFL
unless the signal is
.SM
.BR SIGILL ,
.SM
.BR SIGTRAP ", or"
.SM
.BR SIGPWR .
This means that before exiting the handler, a \f4signal\fP
call is necessary to again set the disposition to catch the
signal.
.PP
Note that handlers installed by \f4signal\fP
execute with
.I no
signals blocked, not even the one that invoked the handler.
.Ee
'\".so /pubs/tools/origin.att
.Ee
.\"	@(#)signal.2	6.2 of 9/6/83
'\"!  tbl | mmdoc
