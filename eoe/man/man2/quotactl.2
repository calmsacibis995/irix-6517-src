'\"macro stdmacro
.if n .pH man2.quotactl @(#)quotactl    1.1 of 8/1/90
.TH quotactl 2
.SH NAME
quotactl \- manipulate disk quotas
.SH SYNOPSIS
.nf
\f3#include <sys/types.h>\f1
\f3#include <sys/quota.h>\f1
.sp .6v
\f3int quotactl (int cmd, char \(**special, \c
int uid, caddr_t addr);\f1
.fi
.SH DESCRIPTION
.LP
.IX  "filesystem"  "quotactl disk quotas"  ""  "\f2quotactl\fP \(em disk quotas"
.IX  "quotactl disk quotas"  ""  "\f2quotactl\fP \(em disk quotas"
.IX  "disk quotas quotactl"  ""  "disk quotas \(em \f2quotactl\fP"
.LP
The
.IR quotactl (2)
call manipulates disk quotas for local EFS and XFS filesystems.
.I cmd
indicates a command to be applied to the user
ID
.IR uid .
.I special
is a pointer to a null-terminated string containing the pathname 
of the block special device for the filesystem being manipulated.
The block special device must be mounted as an
EFS or XFS filesystem
(see
.IR mount (2)).
.I addr
is the address of an optional, command specific data structure
which is copied in or out of the system.
The interpretation of
.I addr
is given with each command below.
.TP
.B Q_QUOTAON
Turn on quotas for a filesystem. In EFS, 
.I addr
points to the pathname of the file containing the quotas for the filesystem.
This quotas file must exist.
In contrast, XFS provides the ability to turn on/off quota limit enforcement with
quota accounting. Therefore, XFS expects the 
.I addr
to be a pointer to an unsigned int that
contains the flags 
.B XFS_QUOTA_UDQ_ACCT
and/or 
.B XFS_QUOTA_UDQ_ENFD
defined 
in 
.I <sys/quota.h>.
This call is restricted to the superuser. 
.TP
.B Q_QUOTAOFF
Turn off quotas for a filesystem.
As in Q_QUOTAON, XFS filesystems expect a pointer to an unsigned int that 
specifies whether quota accounting and/or limit enforcement need to be turned
off. The
.I uid
field is ignored. EFS ignores the
.I addr
field as well.
This call is restricted to the superuser.
.TP
.B Q_GETQUOTA
Get disk quota limits and current usage for user
.IR uid .
.I addr
is a pointer to a
.B dqblk
structure (defined in
.I <sys/quota.h>
).
Only the superuser may get the quotas of a user other than himself.
.TP
.B Q_SETQUOTA
Set disk quota limits and current usage for user
.IR uid .
.I addr
is a pointer to a
.B dqblk
structure (defined in
.I <sys/quota.h> ).
This call is restricted to the superuser, and is not supported in XFS.
.TP
.B Q_SETQLIM
Set disk quota limits for user
.IR uid .
.I addr
is a pointer to a
.B dqblk
structure (defined in
.I <sys/quota.h> ).
This call is restricted to the superuser.
.TP
.B Q_SYNC
Update the on-disk copy of quota usages for an EFS filesystem.
If
.I special
is null then all filesystems with active quotas are sync'ed.
.I addr
and
.I uid
are ignored. This option is not supported in XFS since 
.IR sync (1M)
writes quota information to disk as well.
.TP
.B Q_ACTIVATE
If quotas are not already enabled, this call will permit queries
and updates to be made to the quota file without enabling
quotas.
.I addr
points to the pathname of the file containing the quotas for the EFS filesystem.
The quota file must exist. This command is not applicable to XFS filesystems.
.TP
.PD 0
.B Q_XGETQUOTA
.TP
.B Q_XSETQLIM
These are extensions to Q_GETQUOTA and Q_SETQLIM respectively to support the
added functionalities of XFS filesystems. Instead of a 
.B dqblk
structure, these commands expect a 
.B fs_disk_quota 
structure defined in 
.I <sys/quota.h>.
.PD
.TP
.B Q_GETQSTAT
Returns a 
.B fs_quota_stat 
structure containing XFS filesystem specific quota information. 
This is useful in finding out how much space is spent to
store quota information, and also to get quotaon/off status of a given
local XFS filesystem.
.TP
.B Q_QUOTARM
Free the disk space taken by disk quotas. Quotas must have already been turned off.
.SH "RETURN VALUE"
.LP
Upon successful completion, a value of 0 is returned.
Otherwise, a value of \-1 is returned and
.B errno
is set to indicate the error.
.SH ERRORS
.LP
A
.IR quotactl (2)
call will fail when one of the following occurs:
.TP
EINVAL
.I cmd
is invalid.
.TP
ESRCH
Quotas
have not been turned on for this filesystem.
.TP
EPERM
The call is privileged and the caller was not the superuser.
.TP
ENODEV
.I special
is not a mounted
EFS or XFS
filesystem.
.TP
ENOTBLK
.I special
is not a block device.
.TP
EACCES
.RB ( Q_QUOTAON )
The quota file pointed to by
.I addr
exists but is either not a regular file or is not on the
EFS filesystem pointed to by
.I special
or is not owned by root.
.TP
ENOSPC
The quota table is full. Doesn't apply to XFS filesystems
since XFS dynamically allocates space for quota information.
.TP
EEXIST
.B Q_QUOTAON
attempted on a filesystem where quotas have already been turned on or
.B Q_QUOTAOFF
attempted on a filesystem where quotas have not been turned on.
.TP
ENOENT
The file specified by
.I special
or
.I addr
does not exist.
.TP
EFAULT
.I addr
or
.I special
are invalid.
.TP
ENOTSUP
.I cmd
is not supported by the given filesystem.
.SH "BUGS"
.P
XFS currently does not support the Q_GETQUOTA and Q_SETQLIM commands.
.P
EFS does not support commands such as Q_XGETQUOTA and Q_XSETQLIM that take in a
.B fs_disk_quota
structure.
.SH "SEE ALSO"
quota(1),
quotacheck(1M),
quotaon(1M),
mount(2)
