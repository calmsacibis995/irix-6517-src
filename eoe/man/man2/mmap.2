'\"macro stdmacro
.if n .pH g2.mmap @(#)mmap	41.4 of 4/10/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
'\" ident	"@(#)svid_rt:rt_os/mmap	1.3"
.\" @(#)mmap 1.4 88/09/26 SMI;
'\" macro stdmacro
.\" Sun's mmap.2
.nr X
.if \nX=0 .ds x} mmap 2 "" "\&"
.if \nX=1 .ds x} mmap 2 ""
.if \nX=2 .ds x} mmap 2 "" "\&"
.if \nX=3 .ds x} mmap "" "" "\&"
.TH \*(x}
.SH NAME
\f4mmap\f1, \f4mmap64\f1 \- map pages of memory
.SH SYNOPSIS
.ft 4
.na
#include <sys/types.h>
.br
#include <sys/mman.h>
.HP
\f4void \(**mmap(void \(**addr, size_t len, int prot, int flags, int fd, off_t off);\fP
.ad
.fi
.HP
\f4void \(**mmap64(void \(**addr, size_t len, int prot, int flags, int fd, off64_t off);\fP
.ad
.fi
.SH DESCRIPTION
The functions \f4mmap\f1 and \f4mmap64\f1 establish
a mapping between a process's
address space and a virtual memory object.
The format of the call is as follows:
.P
.RS
\f2pa\f1 = \f4mmap(\f2addr\f4, \f2len\f4, \f2prot\f4, \f2flags\f4, \f2fd\f4, \f2off\f4);\f1
.RE
.P
\f4mmap\f1
establishes a mapping between the process's address space
at an address
\f2pa\f1
for
\f2len\f1
bytes to the memory object represented by
the file descriptor
\f2fd\f1
at offset
\f2off\f1
for
\f2len\f1
bytes.
The value of
\f2pa\f1
is an implementation-dependent function of the parameter
\f2addr\f1
and values of
.IR flags ,
further described below.
A successful
\f4mmap\f1
call returns
\f2pa\f1
as its result.
The address ranges covered by
[\f2pa, pa + len\f1\^)
and
[\f2off, off + len\f1\^)
must be legitimate for the
possible (not necessarily current)
address space of a process and the object in question, respectively.
.P
The only difference between \f4mmap\f1 and \f4mmap64\f1 is that
in \f4mmap64\f1 the \f2off\f1 parameter is 64 bits long, so that the
file offset can be greater than 2 gigabytes.  This is useful
for certain filesystem types that support such file offsets.
.P
The mapping established by
\f4mmap\f1
replaces any previous mappings for the
process's pages in the range
[\f2pa, pa + len\f1\^).
.P
The parameter
\f2prot\f1
determines whether read (load), write (store), execute,
or some combination of accesses are permitted to the
pages being mapped.
The protection options are defined in
\f4<sys/mman.h>\f1
as:
.sp .5
.RS
.ta 25n 30n
.nf
\f4PROT_READ\fP	Page can be read.
\f4PROT_WRITE\fP	Page can be written.
\f4PROT_EXEC\fP	Page can be executed.
\f4PROT_NONE\fP	Page can not be accessed.
.fi
.RE
.P
Not all implementations literally provide all possible combinations.
\f4PROT_WRITE\f1
is often implemented as
\f4PROT_READ\^|\^PROT_WRITE\f1
and
\f4PROT_EXEC\f1
as
\f4PROT_READ\^|\^PROT_EXEC\f1.
This is true for all SGI implementations.
In particular, MIPS processors do not support a separate execute
permission.
Any page that can be read can be executed from,
even if
\f4PROT_EXEC\f1
is not specified.
Instead,
the operating system uses
\f4PROT_EXEC\f1
as a flag to indicate it may need to perform certain platform
dependent functions (such as cache flushing) that may be
needed to properly execute instructions from the associated
page.
See
\f4mprotect\f1(2)
for further details.
However, no implementation will permit a store to succeed where
\f4PROT_WRITE\f1
has not been set.
The behavior of
\f4PROT_WRITE\f1
can be influenced by setting
\f4MAP_PRIVATE\f1
in the
\f2flags\f1
parameter, described below.
.P
The parameter
\f2flags\f1
provides other information about the handling of
the mapped pages.
The options are defined in
\f4<sys/mman.h>\f1
as:
.P
.RS
.ta 25n 30n
.nf
\f4MAP_SHARED\fP	Share changes
\f4MAP_PRIVATE\fP	Changes are private
\f4MAP_FIXED\fP	Interpret addr exactly
\f4MAP_AUTOGROW\fP	Implicitly grow object
\f4MAP_LOCAL\fP	Do not share with share group
\f4MAP_AUTORESRV\fP	Reserve logical swap on demand
.fi
.RE
.P
\f4MAP_SHARED\f1
and
\f4MAP_PRIVATE\f1
describe the disposition of store references to
the memory object.
If
\f4MAP_SHARED\f1
is specified, store references will change
the memory object.
If
\f4MAP_PRIVATE\f1
is specified, the initial store reference
will create a private copy of the memory object page and redirect the
mapping to the copy.
Either \f4MAP_SHARED\f1 or
\f4MAP_PRIVATE\f1 must be specified, but not both.
The mapping type is retained across a
\f4fork\f1(2).
.P
When \f4MAP_SHARED\fP is specified, and initially in all pages when \f4MAP_PRIVATE\fP
is specified, the contents of the mapped segment change to reflect changes
in the underlying memory object. Changes can be caused by other processes
that map the same object with \f4MAP_SHARED\fP, or by processes using write(2)
or ftruncate(2). If the file is shortened, an attempt to access a page of
memory that is mapped to a part of the file that no longer exists will
cause a Bus Error (SIGBUS) signal.
.P
When \f4MAP_PRIVATE\fP is used, a private copy of a page is created only when
the process stores into the page. This prevents changes from being seen
by other processes that map the same object, and prevents further changes
made by other processes from being visible. However, changes that occur
before the page is stored into are visible.
.P
To protect the contents of a mapped file from changes or truncation
you can either use chmod(2) and lockf(3) to enforce a mandatory file
lock, or you can specify \f4MAP_PRIVATE\fP and store into every page of the
segment in order to create a complete private copy of the data.
.P
\f4MAP_FIXED\f1
informs the system that the value of
\f2pa\f1
must be
.IR addr ,
exactly.
When
\f4MAP_FIXED\f1
is not set, the system uses
\f2addr\f1
in an
implementation-specific manner to arrive at
.IR pa .
The
\f2pa\f1
so chosen will be an area of the address space which the system deems
suitable for a mapping of
\f2len\f1
bytes
to the specified object.
.P
All implementations interpret
an
\f2addr\f1
value of zero as
granting the system complete freedom in selecting
.IR pa ,
subject to constraints described below.
A non-zero value
of
\f2addr\f1
is taken to be a suggestion of a process address near which
the
mapping should be placed.
When the system selects a value for
.IR pa ,
it will never place a mapping at address \f40\f1, nor will it
replace any extant mapping, and it will attempt to map away from areas
considered part of the potential data or stack \(lqsegments\(rq.
.P
The \f4MAP_FIXED\f1
directive should be used with caution.
When \f4MAP_FIXED\f1
is set, any mappings (including text, heap, data, and stack) in the range
[\f2addr, addr + len\f1\^)
will be replaced with the new mapping.
.P
To ensure best system hardware cache behaviour,
objects should be mapped such that the low sixteen bits of the file offset
of the object match the low bits of the mapped address.
.P
The address range from 0x30000000 to 0x40000000 is reserved for
\f4MAP_FIXED\f1 mappings.
Note, though, that this space may not be useful for programs which
require a very large heap, since, by default, program heaps start near
0x10000000 and grow toward higher addresses.
This range will never be used when the zero is passed as the value
for \f2addr\f1.
.P
If
.SM
\f4MAP_AUTOGROW\f1
is specified with
\f4MAP_SHARED\f1, 
the mapped object will be implicitly grown
when referenced by a store operation to a page which maps beyond
the current end of the object;
the object will be grown and zero-filled to fulfill the mapping
up to the next page boundary
or to the end of the mapping, whichever is less.
If used with
\f4MAP_PRIVATE\f1,
\f4MAP_AUTOGROW\f1
allocates private zero-filled pages for references beyond the end of
the object, but does not grow the object.
.P
.SM
\f4MAP_AUTOGROW\f1
requires that the object is mapped with
.SM
\f4PROT_WRITE\f1
permission.
Load references to mapped pages following the end of a object will
result in the delivery of a
.SM
\f4SIGSEGV\f1
signal,
as will various filesystem conditions on stores.
Whenever a
.SM
\f4SIGSEGV\f1
signal is delivered, the second argument to the
signal handler contains a value that indicates the reason for
the delivery of the signal; these values are defined in
.IR /usr/include/sys/errno.h .
.P
If 
\f4MAP_LOCAL\f1
is used and the process does an
.IR sproc (2)
each process will receive a private copy of the object's mapping.
All subsequent load reference of objects mapped
.SM
\f4MAP_PRIVATE\f1
will
cause private copies of the object to be created.
In addition, the share group
processes will be able to independently unmap the object
from their address spaces.
.P
The system reserves 
\f2len\f1
bytes of logical swap space when 
\f4MAP_PRIVATE\f1
mappings of regular files are created, 
as well as for all mappings of /dev/zero.
(See \f4swap(1m)\f1 for a discussion of logical swap space.)
If insufficient logical swap space is available,
\f4mmap\f1
fails with
\f4EAGAIN\f1.
The
\f4MAP_AUTORESRV\f1
flag causes logical swap space to be automatically 
reserved as each page is first
referenced with a store operation instead of when the mapping is created.
When this flag is used, no logical swap space is reserved when the
mapping is created.
Therefore, the system cannot guarantee that space will be available
when needed.
If all the logical swap space has been taken by other processes when
a page in a 
\f4MAP_AUTORESRV\f1
mapping is first stored to,
then the process will be sent
\f4SIGBUS\f1.
.P
The parameter
\f2off\f1
is constrained to be
aligned and sized according to the value returned by
\f4getpagesize(2)\fP
or
\f4sysconf\fP(_SC_PAGESIZE).
When
\f4MAP_FIXED\f1
is specified, the parameter
\f2addr\f1 as well as \f2off\f1
must be aligned according to the value returned by
\f4sysconf\fP(_SC_MMAP_FIXED_ALIGNMENT).
The system performs mapping operations over whole pages.
Thus, while the parameter
\f2len\f1
need not meet a size or alignment constraint, the
system will include, in any mapping operation, any partial page specified
by the range
[\f2pa, pa + len\f1\^).
.P
The system will always zero-fill any partial page
at the end of an object.
Further, the system will never write out any
modified portions of the last page of an object which are beyond its end.
References to whole pages following the end of an object will result in the
delivery of a
\f4SIGBUS\f1
signal.
\f4SIGBUS\f1 signals may also be delivered on various file system
conditions, including quota exceeded errors,
and for physical device errors (such as unreadable disk blocks).
The signal handler may examine the
\f4si_code\f1 and \f4si_errno\f1 fields of the \f4siginfo\f1 structure
for information about the nature of the error.
.SH RETURN VALUE
On success, \f4mmap\f1 returns the 
address at which the mapping was placed (\f2pa\f1).
On failure it returns \f4MAP_FAILED\f1 and sets \f4errno\f1 to 
indicate an error.
.SH ERRORS
Under the following conditions, \f4mmap\f1
fails and sets \f4errno\f1 to:
.TP .75i
\f4EAGAIN\f1
The mapping could not be locked in memory.
.TP
\f4EAGAIN\f1
The amount of logical swap space required is temporarily unavailable.
.TP
\f4EBADF\f1
.I fd
is not open.
.TP
\f4EACCES\f1
.I fd
is not open for read, regardless of the protection specified, or
\f2fd\f1 is not open for write and \f4PROT_WRITE\f1 was specified for
a \f4MAP_SHARED\f1 type mapping.
.TP
\f4EACCES\f1
\f2prot\f1 has extraneous bits set.
.TP
\f4ENXIO\f1
Addresses in the range
[\f2off, off + len\f1\^)
are invalid for
.IR fd .
.TP
\f4EINVAL\f1
The arguments
\f2addr\f1
(if
\f4MAP_FIXED\f1
was specified) or
\f2off\f1
are not multiples of the value returned by
\f4sysconf\fP(_SC_MMAP_FIXED_ALIGNMENT).
.TP
\f4EINVAL\f1
The arguments
\f2
.TP
\f4EINVAL\f1
The field in
\f2flags\f1
is invalid (neither \f4MAP_PRIVATE\f1 or \f4MAP_SHARED\f1).
.TP
\f4ENXIO\f1
The argument
\f2len\f1
has a value less than or equal to \f40\f1.
.TP
\f4EINVAL\f1
The argument
\f2addr\f1
specifies an unmappable address.
.TP
\f4ENODEV\f1
.I fd
refers to an object for which
\f4mmap\f1
is meaningless, such as a terminal.
.TP
\f4ENOSYS\f1
.I fd
refers to an object for which
\f4mmap\f1
is not permitted.
.TP
\f4ENOMEM\f1
zero was passed as the value of \f2addr\f1, and insufficient space
was available in the standard address ranges.  This is primarily 
an issue for 32 bit programs requesting 1GByte or more, because
the range from 0x30000000 to 0x40000000 is reserved for \f4MAP_FIXED\f1
as described above.
.TP
\f4ENOMEM\f1
\f4MAP_FIXED\f1
was specified and the range
[\f2addr, addr + len\f1\^)
is invalid or
exceeds that allowed for the address space of a process,
or
\f4MAP_FIXED\f1
was not specified and there is insufficient room in the address space
to effect the mapping.
.TP
\f4ENOMEM\f1
The calling process has the automatic memory locking of future mappings
enabled [see \f4mlockall\fP(3C)]
and there is insufficient physical memory available for the mapping. 
.SH NOTES
\f4mmap\fP allows access to resources via address space
manipulations instead of the \f4read\fP/\f4write\fP interface.
Once a file is mapped, all a process has to do to access it is use the data at
the address to which the object was mapped.
Consider the following pseudo-code:
.P
.RS
.nf
.na
.ft 4
fd = open(...)
lseek(fd, offset)
read(fd, buf, len)
/* use data in buf */
.ft 1
.fi
.RE
.P
Here is a rewrite using \f4mmap\fP:
.P
.RS
.nf
.na
.ft 4
fd = open(...)
address = mmap(NULL, len, (PROT_READ | PROT_WRITE),
               MAP_PRIVATE, fd, offset)
/* use data at address */
.ft 1
.fi
.RE
.PP
Previous IRIX releases have only required \f4MAP_FIXED\fP address alignment
to the system page size returned with \f4getpagesize\fP(2).  This is no longer
true for the MIPS R4000PC, R4600 and R5000 processors.  Requests now must
be aligned to the size returned by \f4sysconf\fP(_SC_MMAP_FIXED_ALIGNMENT).
.SH SEE ALSO
.na
\f4fcntl\fP(2),
\f4fork\fP(2),
\f4lockf\fP(3C),
\f4madvise\fP(2),
\f4mprotect\fP(2),
\f4msync\fP(2),
\f4munmap\fP(2),
\f4plock\fP(2),
\f4sproc\fP(2),
\f4sysconf\fP(2).
.ad
