'\"macro stdmacro
.Op c p a
.TH sched_setscheduler 2
.SH NAME
\f4sched_setscheduler\fP \- set the scheduling policy of a process
.SH C SYNOPSIS
.nf
\f3#include <sched.h>\f1
.sp .6v
\f4int sched_setscheduler (pid_t \f2pid\fP, int \f2policy\fP,
const struct sched_param *\f2param\fP);\f1
.fi
.SH DESCRIPTION
The \f4sched_setscheduler\fP system call is used to set the scheduling
policy and related parameters for the process specified by \f2pid\fP.  If
\f2pid\fP is set to zero, then the scheduling policy and parameters of the
calling process will be affected. 
.P
The \f2policy\fP parameter is used to select one of the following
scheduling policies:
.IP \f3SCHED_FIFO\f1 8
The first-in-first-out policy schedules processes according to their
assigned priority values. The highest priority process is
guaranteed control of the processor until it willingly yields the processor
or blocks on a contended resource. If there is more than one runnable highest
priority process, the highest priority process waiting the longest is granted
control of the processor. A running process is preempted
when a higher priority process becomes runnable.
.P
.IP \f3SCHED_RR\f1 8
The round-robin scheduling policy schedules processes according to their
assigned priority values. The highest priority process is
guaranteed control of the processor until it: willingly yields the processor,
blocks on a contended resource, or exceeds its time quantum. If
there is more than one runnable highest priority process, the highest priority
process waiting the longest is granted control of the processor. When a process
exceeds its time quantum it yields the processor and awaits rescheduling.
A running process is preempted
when a higher priority process becomes runnable.
.P
Note that \f2SCHED_FIFO\f1 and \f2SCHED_RR\f1 processes are of higher
priority than all other processes in the system.  Because of this,
such a process may
.B deadlock
the system if it enters an infinite loop.  Further note, that the
scheduling policy and priority are inherited across a fork and that
the scheduling policy is shared by all members of a share group (see
sproc(2)).
.P
.IP \f3SCHED_TS\f1 8
The \f2SCHED_TS\f1 scheduling policy is a basic timeshare scheduling policy.
All \f2SCHED_TS\f1 processes acquire CPU resources in proportion to their
priority or nice value.  Processes aquire the processor for a time quantum,
the length of which is returned via the
\f2sched_rr_get_interval(2)\fP system call.
.P
.IP \f3SCHED_OTHER\f1 8
The \f2SCHED_OTHER\f1 scheduling policy is equivalent to the SCHED_TS policy
and allows a program to indicate that it no longer needs a real-time
scheduling policy in a portable manner.
.P
The parameters of the selected \f2policy\fP are specified by the parameter
structure at address \f2param\fP.
.P
The priority of the target process may be modified by setting
the desired priority value in the sched_priority field of the
\f2param\fP structure.
.P 
Unlike IRIX 6.2 and previous releases, processes having a higher
numerical priority value are more important than processes having a lower
numerical priority value.
Specified priorities remain fixed, unless explicitly changed in
the future, and are not affected by priority aging schemes.
.P
The priority range for these scheduling policies may
be obtained via the \f4sched_get_priority_min\fP(2) and
\f4sched_get_priority_max\fP(2) function calls.
However, arbitrary priority values should not be used.
Developers must consider the needs of the application and how it should
interact with the rest of the system, before selecting a real-time priority.
For more information, see the "Real-Time Priority Band" section of
\f4realtime\fP(5).
.P
Runnable processes scheduled with real-time policies are always
granted processor control ahead of timeshare processes, regardless of
priority.
.P
The calling process must have superuser permissions to successfully execute
\f4sched_setscheduler\fP.
.P
If the process specified by \f2pid\fP is currently executing or is in
a runnable state, \f4sched_setscheduler\fP causes the process to be
rescheduled in accordance with its priority.
.P
.P
If \f2pid\fP refers to a POSIX thread process [see \f4pthreads\fP(3P)]
then this call changes the scheduling policy and related parameters
that are shared by process scope threads.
.P
\f4sched_setscheduler\fP will fail if one or more of the following are true:
.TP 15
[EINVAL]
The \f2policy\fP argument does not represent a valid posix
scheduling policy.
.TP
[EINVAL]
One of the specified parameters at address \f2param\fP are out of range or
scope.
.TP
[EPERM]
The calling process does not have superuser permissions.
.TP
[ESRCH]
The process specified by \f2pid\fP does not exist.
.SH SEE ALSO
realtime(5),
sched_getparam(2),
sched_setparam(2),
sched_getscheduler(2),
sched_yield(2),
sched_get_priority_max(2),
sched_get_priority_min(2),
sched_rr_get_interval(2),
pthreads(5)
.SH DIAGNOSTICS
Upon successful completion, \f4sched_setscheduler\fP returns the previous
scheduling policy value of the process \f2pid\fP.
.P
Upon failure, a value of -1 is returned to the calling process and \f4errno\fP
is set to indicate the error.
