'\"macro stdmacro
.if n .pH g2.lseek @(#)lseek	40.14 of 4/10/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} lseek 2 "" "\&"
.if \nX=1 .ds x} lseek 2 ""
.if \nX=2 .ds x} lseek 2 "" "\&"
.if \nX=3 .ds x} lseek "" "" "\&"
.TH \*(x}
.SH NAME
\f4lseek\f1, \f4lseek64\f1 \- move read/write file pointer
.Op c p a
.SH C SYNOPSIS
\f4#include <sys/types.h>\f1
.br
\f4#include <unistd.h>\f1
.PP
\f4off_t lseek (int fildes, off_t offset, int whence);\f1
.sp
\f4off64_t lseek64 (int fildes, off64_t offset, int whence);\f1
.Op
.Op f
.SH FORTRAN SYNOPSIS
\f4integer\(**4 function lseek (fildes, offset, whence)\f1
.br
\f4integer\(**4 fildes, offset, whence\f1
.sp
\f4integer\(**8 function lseek64 (fildes, offset64, whence)\f1
.br
\f4integer\(**8 offset64\f1
.Op
.SH DESCRIPTION
.I fildes\^
is a
.Op p c a
file descriptor
returned from a
\f4creat\fP,
\f4open\fP,
\f4dup\fP,
\f4fcntl\fP,
\f4pipe\fP,
or
\f4ioctl\fP
system call.
.Op
.Op f
logical unit number.
.Op
\f4lseek\fP
and \f4lseek64\fP
set the file pointer associated with
.I fildes\^
as follows:
.RS
.HP 6
If
.I whence\^
is \f4SEEK_SET\fP, the pointer is set to
.I offset\^
.Op f
(or offset64)
.Op
bytes.
.HP 6
If
.I whence\^
is \f4SEEK_CUR\fP, the pointer is set to its current location plus
.IR offset .
.HP 6
If
.I whence\^
is \f4SEEK_END\fP, the pointer is set to the size of the
file plus
.IR offset .
.RE
.PP
On success, \f4lseek\fP returns the resulting pointer location,
as measured in bytes from the beginning of the file.
Note that for file descriptors that correspond to regular files
or directories, \f4lseek\fP does not allow negative file offsets.
For device special files, the allowable offset values are
determined by the individual device drivers.
.PP
\f4lseek\fP allows the file pointer to be set beyond the existing data
in the file. If data are later written at this point, subsequent reads
in the gap between the previous end of data and the newly written data
will return bytes of value 0 until data are written into the gap.
.PP
\f4lseek64\fP
is identical in behavior to \f4lseek\fP except
.Op p c a
that the
type of
.I offset\^
is
.B off64_t
instead of
.B off_t .
.Op
.Op f
for the type of the offset.
.Op
The 64-bit offset value is useful for files in XFS filesystems as well
as in devices larger than 2 gigabytes in size, such as large disks
or volumes.
.PP
\f4lseek\fP
fails and the file pointer remains unchanged
if one or more of the following are true:
.TP 15
\f4EBADF\fP
.I fildes\^
is not
.Op p c a
an open file descriptor.
.Op
.Op f
a valid logical unit number.
.Op
.TP
\f4ESPIPE\fP
.I fildes\^
is associated with a pipe, fifo, or socket.
.TP
\f4EINVAL\fP
.I whence\^
is not \f4SEEK_SET\fP, \f4SEEK_CUR\fP, or \f4SEEK_END\fP.
The process also gets a \f4SIGSYS\fP signal.
.TP
\f4EINVAL\fP
\f2fildes\f1 corresponds to a regular file or directory and
the resulting file pointer would be negative.
.PP
Some devices are incapable of seeking.
The value of the file pointer associated with such a device
is undefined.
.SH "SEE ALSO"
\f4creat\fP(2), \f4dup\fP(2), \f4fcntl\fP(2), \f4open\fP(2).
.SH "DIAGNOSTICS"
Upon successful completion, a non-negative integer
indicating the file pointer value
is returned.
Otherwise, a value of \-1 is returned and
\f4errno\fP
is set to indicate the error.
For \f4lseek\f1, the return value type is
.Op c p a
\f4off_t\fP;
.Op
.Op f
\f4integer \(**4\fP.
.Op
for \f4lseek64\f1, the return value type is
.Op c p a
\f4off64_t\fP.
.Op
.Op f
\f4integer \(**8\fP.
.Op
.\"	@(#)lseek.2	6.2 of 9/6/83
.Ee
