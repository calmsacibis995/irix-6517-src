'\"macro stdmacro
.if n .pH g3s.fread @(#)fread	30.4 of 3/11/86
.nr X
.if \nX=0 .ds x} FREAD 3S "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} FREAD 3S "C Programming Language Utilities"
.if \nX=2 .ds x} FREAD 3S "" "\&"
.if \nX=3 .ds x} FREAD "" "" "\&"
.TH \*(x}
.SH NAME
fread, fwrite \- binary input/output
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B "size_t fread (void \(**ptr, size_t size, size_t nitems, \s-1FILE\s+1 \(**stream);"
.PP
.B "size_t fwrite (const void \(**ptr, size_t size, size_t nitems, \s-1FILE\s+1 \(**stream);"
.SH DESCRIPTION
.I fread\^
copies, into an array pointed to by
.IR ptr ,
up to
.I nitems\^
items of data
from the named input
.IR stream ,
where
an item of data is a sequence of bytes (not
necessarily terminated by a
null
byte) of length
.IR size .
.I fread\^
stops reading bytes
if an
end-of-file
or error condition is encountered while reading
.IR stream,
or if
.I nitems\^
items have been read.
The file pointer associated with
.I stream\^
is positioned following the last byte read, which may be at 
end-of-file.
.I fread\^
does not change the contents of
.IR stream .
.I fread\^
returns the number of items read.
.PP
.I fwrite\^
appends at most
.I nitems\^
items of data
from the array pointed to by
.I ptr\^
to the named output
.IR stream .
.I fwrite\^
stops appending when it has appended
.I nitems\^
items of data or if an
error condition is encountered on
.IR stream .
.I fwrite\^
does not change the contents of the array pointed to by
.IR ptr .
.I fwrite\^
increments the data-printer in the stream by the number of bytes
written.
.I fwrite\^
returns the number of items written.
.PP
.I ferror(3S)
may be used to determine if an error occurred in an
.I fread
or
.I fwrite
call.
The
.I ferror(3S)
or
.I feof(3S)
routines should be used to distinguish between an error condition
and end-of-file condition.
.PP
The argument
.I size\^
is typically
.I sizeof(\(**ptr)\^
where the C operator
.I sizeof\^
is used to determine the length of an item pointed to by
.IR ptr .
.SH "SEE ALSO"
exit(2), fcntl(2), lseek(2),
read(2), write(2),
abort(3C), fclose(3S),
fopen(3S), ferror(3S),
getc(3S), gets(3S),
printf(3S),
putc(3S), puts(3S),
scanf(3S), stdio(3S).
.SH NOTE
To use these functions with direct I/O (see
.IR fcntl (2)),
it is necessary to arrange that the buffers be correctly aligned
before any I/O is done.  One way to do this is:
.Ex
char *caBuffer11;
caBuffer11 = memalign(dioinfo.d_mem, 8+100 * dioinfo.d_miniosz);
setbuffer(fpOutFile,caBuffer11,8+100 * dioinfo.d_miniosz);
.Ee
where the
.I dioinfo
structure has been filled in by the
.B F_DIOINFO
.I fcntl
request.
.SH DIAGNOSTICS
Both 
.I fread\^
and
.I fwrite\^
always return a nonnegative integer indicating 
the number of items read or written.
This will be equal to
.I nitems\^
unless an error occurred, 
the value of
.I size\^
is zero, or
.I fread\^
or
.I fwrite\^
detect that a
request has been made to
read (or write) more data than is addressable.
'\".so /pubs/tools/origin.att
.\"	@(#)fread.3s	6.2 of 10/20/83
.Ee
