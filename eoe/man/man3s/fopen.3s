'\"macro stdmacro
.if n .pH g3s.fopen @(#)fopen	30.2 of 12/25/85
.nr X
.if \nX=0 .ds x} FOPEN 3S "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} FOPEN 3S "C Programming Language Utilities"
.if \nX=2 .ds x} FOPEN 3S "" "\&"
.if \nX=3 .ds x} FOPEN "" "" "\&"
.TH \*(x}
.SH NAME
fopen, freopen, fdopen \- open a stream
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.SM
.B FILE
.B "\(**fopen (const char \(**filename, const char \(**type);"
.PP
.SM
.B FILE
.ie n \{\
.B "\(**freopen (const char \(**filename, const char \(**type, \s-1FILE\s+1 \(**stream);"
\}
.el \{\
.B "\(**freopen (const char \(**filename, const char \(**type,"
.br
.B "                   \s-1FILE\s0 \(**stream);"
\}
.PP
.SM
.B FILE
.B "\(**fdopen (int fildes, const char \(**type);"
.SH DESCRIPTION
.I fopen\^
opens the file named by
.I filename\^
and associates a
.I stream\^
with it.
.I fopen\^
returns a pointer to the
.SM FILE
structure associated with
the
.IR stream .
.PP
.I filename\^
points to a character string that contains
the name of the file to be opened.
.PP
.I type\^
is a character string.  The initial portion of
.I type\^
must consist of one of the following character sequences:
.RS
.TP 15
.BI r " or " rb
open for reading
.ns
.TP
.BI w " or " wb
truncate or create for writing
.ns
.TP
.BI a " or " ab
append: open for writing at end
of file or create for writing
.ns
.TP
.BI r+ , r+b " or " rb+
open for update (reading and writing)
.ns
.TP
.BI w+ , w+b " or " wb+
truncate or create for update
.ns
.TP
.BI a+ , a+b " or " ab+
append: open for update at end-of-file
or create for update
.RE
.sp .5
As this implementation does not distinguish between 
.IR binary " and" " text"
files, the character
.B b\^
in the string
.IR type ,
(which is used to indicate that the file being opened is a 
.I binary\^
file) is inconsequential.
.PP
Opening a file for reading (when
.B r\^
is the first character of 
.IR type )
will fail if the file does not exist or is unreadable.
.PP
When a file is opened for update (when
.B +\^
appears as the second (or third, in the case
of 
.IR fopen " or " freopen )
character of 
.IR type )
both input and output may be
done on the resulting
.IR stream .
However, output may not be directly followed by input without an
intervening 
.IR fseek ,
.IR fsetpos ,
or
.IR rewind .
Similarly, 
input may not be directly followed by output without an
intervening call to one of these functions, unless the input operation
left the file positioned at end-of-file.
(See note under
.SM BUGS
below.)
.PP
When a file is opened for append (i.e., when
.I type\^
is \f3a\fP, \f3ab\fP, \f3a+b\fP, \f3ab+\fP or \f3a+\fP), it 
is impossible to overwrite information
already in the file.
.I fseek\^
may be used to reposition the file pointer to any position
in the file, but when output is written
to the file, the current file pointer is disregarded.
All output is written at the end of the file and causes the file
pointer to be repositioned at the end of the output.  If two separate
processes open the same file for append, each process may write freely
to the file without fear of destroying output being written by the
other.  The output from the two processes will be intermixed in the
file in the order in which it is written.
.PP
.I freopen\^
substitutes the named file in place
of the open
.IR stream .
An attempt is made to close the original
.IR stream ,
using 
.IR fclose (3s).
If this close attempt is unsuccessful, the failure is ignored.  
.I freopen\^
then attempts to open the file indicated by 
.IR filename ,
returning the result.  
The character string
.I type\^
must have the same form as for 
.IR fopen .
If the open is successful, the
end-of-file and error indicators for 
.I stream\^
are cleared.
.PP
.I freopen\^
is typically used to attach the preopened
.I streams\^
associated with
.BR stdin ,
.B stdout
and
.BR stderr
to other files.
.PP
.I fdopen\^
associates a stream
with a file descriptor.
File descriptors are obtained from
.IR open ,
.IR dup ,
.IR creat ,
or
.IR pipe (2),
which open files but do not initialize a stream, which is the object manipulated
by many of the Section 3S library routines.
.I fdopen\^
initializes a stream for the open file descriptor
.IR fildes , 
and returns a pointer to the corresponding 
.SM FILE 
structure.
The character string
.I type\^
has the same form as that for
.IR fopen ,
with the exception that the (superfluous) binary file specification character
.BR b ,
is not allowed.  (This restricts the initial portion of 
.I type\^
to one of 
.BR r ,
.BR w ,
.BR a ,
.BR r+ ,
.BR w+ ,
or
.BR a+ .)
The 
.I type\^
specified for the stream
must agree with the mode of the open file indicated by 
.I fildes\^
(see
.IR open (2)).
.SH "SEE ALSO"
creat(2), 
close(2), 
dup(2),
open(2),
pipe(2),
write(2),
fclose(3S),
fseek(3S),
setbuf(3s),
stdio(3S).
.SH DIAGNOSTICS
.IR fopen ,
.IR fdopen ,
and 
.I freopen\^
return a
.SM NULL
pointer on failure.
.PP
Depending on which ABI a program is compiled in, there may be a limit
on the number of open \f2stdio\fP streams, or a limit on which file
descriptors may be associated with \f2stdio\fP streams.
When compiling in \f3n32\fP or \f3n64\fP modes, there are no limits,
however in \f3o32\fP mode
the functions \f2fopen\fP or \f2fdopen\fP may fail and not set
\f2errno\fP if there are no free \f2stdio\fP streams. 
No more than 255 files may be opened via \f2fopen\fP, and only
file descriptors 0 through 255 are valid with \f2stdio\fP streams.
.PP
In \f3o32\fP mode
file descriptors used by \f2fdopen\fP must be less than 255.
.SH BUGS
When operating on a file opened for update on which the last operation was
output, an input operation may be performed if there is an intervening
call to a file positioning function.  An input operation should also 
be possible under these circumstances if an intervening call is made to
.IR fflush .
If this sequence of operations (i.e., output,
.IR fflush ,
input)
is performed, however, the input operation
fails with the misleading error 
.SM 
.BR EBADF .
.
'\".so /pubs/tools/origin.att
.\"	@(#)fopen.3s	6.2 of 10/20/83
.Ee
