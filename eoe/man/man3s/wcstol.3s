'\"macro stdmacro
.if n .pH g3s.wcstol @(#)wcstol	1.1 of 5/31/96
.nr X
.if \nX=0 .ds x} wcstol 3S "" "\&"
.if \nX=1 .ds x} wcstol 3S ""
.if \nX=2 .ds x} wcstol 3S "" "\&"
.if \nX=3 .ds x} wcstol "" "" "\&"
.TH \*(x}
.SH NAME
\f4wcstol\f1, \f4wcstoul\f1, \f4wcstoll\f1, \f4wcstoull\f1 \- convert 
wide character string to long integer, unsigned long integer, 
long long integer, unsigned long long integer, respectively
.SH SYNOPSIS
\f4#include <wchar.h>\f1
.PP
\f4long wcstol(const wchar_t \(**nptr, wchar_t \(**\(**endptr, int base);\f1
.PP
\f4unsigned long wcstoul(const wchar_t \(**nptr, wchar_t \(**\(**endptr, int base);\f1
.PP
\f4long long int wcstoll(const wchar_t \(**nptr, wchar_t \(**\(**endptr, int base);\f1
.PP
\f4unsigned long long int wcstoull(const wchar_t \(**nptr, wchar_t \(**\(**endptr, int base);\f1
.SH DESCRIPTION (International Functions)
The \f4wcstol\f1, \f4wcstoul\f1, \f4wcstoll\f1, and \f4wcstoull\f1 functions 
convert the initial portion of the wide character 
string pointed to by \f2nptr\f1 to \f4long int\f1, \f4unsigned long int\f1,
\f4long long int\f1, and \f4unsigned long long int\f1 representation,
respectively. First these functions decompose the input wide character string 
into three parts: an initial, possibly empty, sequence of white-space 
wide-character codes (as specified by \f2iswspace\f1), a subject sequence 
interpreted as an integer represented in some radix determined by the value of 
\f2base\f1; and a final wide character 
string of one or more unrecognised wide character codes, including the 
terminating null wide-character code of the input wide character string. Then 
these functions attempt to convert the subject sequence to an integer, and 
return the result.
.PP
If \f2base\f1 is \f20\f1, the expected form of the subject sequence is that 
of a decimal constant, octal constant or hexadecimal constant, any of which 
may be preceded by a + or - sign. A decimal constant begins with a non-zero 
digit, and consists of a sequence of decimal digits. An octal constant 
consists of the prefix 0 optionally followed by a sequence of the digits 
0 to 7 only. A hexadecimal constant consists of the prefix 0x or 0X followed 
by a sequence of the decimal digits and letters a (or A) to f (or F) with 
values 10 to 15 respectively.
.PP
If the value of \f2base\f1 is between 2 and 36, the expected form of the 
subject sequence is a sequence of letters and digits representing an integer 
with the radix specified by \f2base\f1, optionally preceded by a + or - sign, 
but not including an integer suffix. The letters from a (or A) to z (or Z) 
inclusive are ascribed the values 10 to 35; only letters whose ascribed 
values are less than that of \f2base\f1 are permitted. If the value of 
\f2base\f1 is 16, the wide-character code representations of 0x or 0X may 
optionally precede the sequence of letters and digits, following the sign 
if present.
.PP
The subject sequence is defined as the longest initial subsequence of the 
input wide character string, starting with the first non-white-space 
wide-character code, that is of the expected form. The subject sequence 
contains no wide-character codes if the input wide character string is empty 
or consists entirely of white-space wide-character code, or if the first 
non-white-space wide-character code is other than a sign or a permissible 
letter or digit.
.PP
If the subject sequence has the expected form and \f2base\f1 is 0, the 
sequence of wide-character codes starting with the first digit is interpreted 
as an integer constant. If the subject sequence has the expected form and the 
value of \f2base\f1 is between 2 and 36, it is used as the base for 
conversion, ascribing to each letter its value as given above. If the subject 
sequence begins with a minus sign, the value resulting from the conversion is 
negated. A pointer to the final wide character string is stored in the object 
pointed to by \f2endptr\f1, provided that \f2endptr\f1 is not a null pointer.
.PP
If the subject sequence is empty or does not have the expected form, no 
conversion is performed; the value of \f2nptr\f1 is stored in the object 
pointed to by \f2endptr\f1, provided that \f2endptr\f1 is not a null pointer. 
.SH RETURN VALUES
Upon successful completion, \f4wcstol\f1, \f4wcstoll\f1, \f4wcstoul\f1, and
\f4wcstoull\f1 return the converted value, if any. If no conversion could be 
performed, 0 is returned and \f2errno\f1 may be set to indicate the error.
If the correct value is outside the range of representable values, {LONG_MAX},
{LONGLONG_MAX}, {ULONG_MAX}, {ULONGLONG_MAX}, {LONG_MIN}, {LONGLONG_MIN},
{ULONG_MIN}, or {ULONGLONG_MIN} is returned (according to the sign of the 
value and which version of the routine is called--signed or unsigned), and 
\f2errno\f1 is set to [ERANGE].
.SH DIAGNOSTICS
\f4wcstol\f1, \f4wcstoll\f1, \f4wcstoul\f1, and \f4wcstoull\f1 will fail if:
.sp
.in+0.5i
[EINVAL]   The value of \f2base\f1 is not supported.
.sp
[ERANGE]   The value to be returned is not representable.
.sp
.in-0.5i
\f4wcstol\f1, \f4wcstoll\f1, \f4wcstoul\f1, and \f4wcstoull\f1 may fail if:
.sp
.in+0.5i
[EINVAL]   No conversion could be performed.
.in-0.5i
.SH APPLICATION USAGE
Because 0, {LONG_MIN}, {LONGLONG_MIN}, {ULONG_MIN}, {ULONGLONG_MIN}, 
{LONG_MAX}, {LONGLONG_MAX}, {ULONG_MAX}, and {ULONGLONG_MAX}, are returned on 
error and are also valid returns on success, an application wishing to check 
for error situations should set \f2errno\f1 to 0, then call 
\f4wcstol\f1, \f4wcstoll\f1, \f4wcstoul\f1, or \f4wcstoull\f1, then check 
\f2errno\f1 and if it is 0, assume an error has occurred.
.SH SEE ALSO
.na
\f4wctype\fP(3S),
\f4wcstod\fP(3S),
\f4<wchar.h>\fP,
\f4<limits.h>\fP.
.ad
.\"	@(#)wcstol.3s	
