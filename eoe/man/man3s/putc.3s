'\"macro stdmacro
.if n .pH g3s.putc @(#)putc	30.3 of 1/23/86
.nr X
.if \nX=0 .ds x} PUTC 3S "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} PUTC 3S "C Programming Language Utilities"
.if \nX=2 .ds x} PUTC 3S "" "\&"
.if \nX=3 .ds x} PUTC "" "" "\&"
.TH \*(x}
.SH NAME
putc, putchar, fputc, putw, putc_unlocked, putchar_unlocked \- put character or word on a stream
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B int putc (int c, \s-1FILE\s+1 \(**stream);
.PP
.B int putchar (int c);
.PP
.B int fputc (int c, \s-1FILE\s+1 \(**stream);
.PP
.B int putw (int w, \s-1FILE\s+1 \(**stream);
.PP
.B int putc_unlocked (int c, \s-1FILE\s+1 \(**stream);
.PP
.B int putchar_unlocked (int c);
.SH DESCRIPTION
.I Fputc " and " putc
write the character
.I c\^
onto the output stream indicated by 
.I stream\^
at the position indicated by the associated file pointer (if defined),
advancing this pointer to the next character position.
For files which cannot be positioned, or which have been opened in
append mode (see
.IR fopen (3s)),
the character is appended to the output stream.
.IR putchar ( c )
is defined as
.IR putc ( "c, stdout" ).
Each of these functions is available in the C library.  In addition,
.I putc\^
and
.I putchar\^
are macros defined in 
.RI < stdio.h >. 
(see below under
.SM CAVEATS
for important details on the implementation of these macros.)
.PP
The function versions of 
.IR putc " and " putchar ,
as well as
.I fputc\^
runs more slowly than the corresponding macros,
but they take less space per invocation and the function name can be
passed as an argument to another function.
.PP
.I putw\^
writes the word (i.e. integer)
.I w\^
to the output
.I stream\^
(at the position at which the file pointer, if defined, is pointing).
The size of a word is the size of an integer and
varies from machine to machine.
.I putw\^
neither assumes nor causes special alignment in the file.
.PP
The
.I putc_unlocked
and
.I putchar_unlocked
functions are equivalent to the
.I putc
and
.I putchar
functions, respectively.
However, these functions are not thread-safe and thus must
only be called under the protection of the
.IR flockfile
(or
.IR ftrylockfile )
and
.I funlockfile
functions.
.SH SEE ALSO
fclose(3S),
ferror(3S),
fopen(3S),
fread(3S),
printf(3S),
puts(3S),
setbuf(3S), stdio(3S).
.SH DIAGNOSTICS
On success, 
.IR putc ,
.IR putchar ,
and
.I fputc\^
each return the value they have written.
On failure, they return the constant
.SM
.BR EOF .
This will occur if the
.I stream\^
cannot be written for some reason, such as it
is not open for writing
or if the output file cannot be extended.
.PP
.I Putw\^ 
returns the value of
.IR ferror ( stream ),
which is non-zero if an error occurred on 
.IR stream .
.SH CAVEATS
When using the macro versions of
.IR putc " and " putchar ,
the 
.I stream\^
argument may be evaluated more than once.
Thus, it must not be an expression with side-effects.
In particular,
.B putc(c,\(**f\(pl\(pl)
does not work sensibly.
In these situations, the macro must either be 
.BR #undef 'd,
or
.I fputc\^
should be used instead.
.PP
Because of possible differences in word length and byte ordering,
files written using
.I putw\^
are machine-dependent,
and may not be read using
.I getw\^
on a different processor.
.SH BUGS
When using the macros for 
.IR putc " and " putchar ,
hidden external names may be referenced. Although these names are prefixed 
with an underscore, they may conflict with names which 
the ANSI C Standard reserves 
for the user
when appearing in a local context.
It is thus recommended that users of these macros reserve all names which begin
with an underscore
for the implementation, and avoid defining such names, even in a local context.
'\".so /pubs/tools/origin.att
.\"	@(#)putc.3s	6.3 of 10/20/83
.Ee
