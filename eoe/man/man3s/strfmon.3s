'\"macro stdmacro
.if n .pH g3s.strfmon @(#)strfmon	1.1 of 11/23/95
.\" Copyright 1993 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} strfmon 3S "C Development Set" "\&"
.if \nX=1 .ds x} strfmon 3S "C Development Set"
.if \nX=2 .ds x} strfmon 3S "" "\&"
.if \nX=3 .ds x} strfmon "" "" "\&"
.TH \*(x}
.SH NAME
\f4strfmon\f1 \- convert monetary value to string
.SH SYNOPSIS
\f4#include <monetary.h>\f1
.PP
.nf
\f4ssize_t strfmon(const char \(**s, size_t maxsize, \f4const char \(**format, ...);\f1
.fi
.SH DESCRIPTION
\f4strfmon\fP
places characters into the array pointed to by
.I s
as controlled by the string pointed to by
.I format.
No more than
.I maxsize
bytes are placed into the array.
.PP
The format is a character string that contains two types of objects: 
plain characters, which are simply copied to the output stream, and 
conversion specifications, each of which results in the fetching of zero 
or more arguments which are converted and formatted. The results are 
undefined if there are insufficient arguments for the format.  If the 
format is exhausted while arguments remain, the excess arguments are 
simply ignored.
.PP
A conversion specification consists of the following sequence:
.TP 5n
\f4\-\-\^\f1
a \f4%\f1 character
.TP
\f4\-\-\^\f1
optional flags
.TP
\f4\-\-\^\f1
optional field width
.TP
\f4\-\-\^\f1
optional left precision
.TP
\f4\-\-\^\f1
optional right precision
.TP
\f4\-\-\^\f1
a required conversion character that determines the conversion to be
performed.
.PP
.B Flags
.PP
One  or more of the following optional flags can be specified to control 
the conversion:
.TP 10n
\f4=f\^\f1
An = followed by a single character
.I f
which is used as the numeric fill character.  The fill character must be 
representable in a single byte in order to work with precision and width 
counts.  The default numeric fill character is the space character.  This 
flag does not affect field width filling which always uses the space 
character.  This flag is ignored unless a left precision (see below) is 
specified.
.TP
\f4^\^\f1
Do not format the currency amount with grouping characters.  The default 
is to insert the grouping characters if defined for the current locale.
.TP
\f4+ or (\^\f1
Specify the style of representing positive and negative currency amounts. 
Only one of + or ( may be specified. If + is specified, the locale's 
equivalent of + and - are used (for example, in the U.S.A.: the empty 
string if positive and - if negative).  If ( is specified, negative amounts 
are enclosed within parentheses.  If neither flag is specified, the + style 
is used.
.TP
\f4!\^\f1
Suppress the currency symbol from the output conversion.
.TP
\f4-\^\f1
Specify the alignment.  If this flag is present all fields are 
left-justified (padded to the right) rather than right-justified.
.PP
.B "Field Width"
.PP
.TP
\f4w\^\f1
A decimal digit string 
.I w
specifying a minimum field width in bytes in which the result of the 
conversion is right-justified (or left-justified if the flag - is specified).
The default is 0.
.PP
.B "Left Precision"
.PP
.TP
\f4#n\^\f1
A 
.I #
followed by a decimal digit string 
.I n
specifying a maximum number of digits expected to be formatted to the 
left of the radix character. This option can be used to keep the formatted 
output from multiple calls to the 
.I strfmon
aligned in the same columns. It can also be used to fill unused positions 
with a special character as in 
.I $***123.45.
This option causes an amount to be formatted as if it has causes an 
amount to be formatted as if it has the number of digits specified by 
.I n.
If more than 
.I n
digit positions are required, this conversion specification is ignored.
Digit positions in excess of those actually required are filled with the 
numeric fill character (see the \f4=f\f1 flag above).
.PP
If grouping has not been suppressed with the \f4^\f1 flag, and it is 
defined for the current locale, grouping separators are inserted before 
the fill characters (if any) are added.  Grouping separators are not 
applied to fill characters even if the fill character is a digit.
.PP
To ensure alignment, any characters appearing before or after the number 
in the formatted output such as currency or sign symbols are padded as 
necessary with space characters to make their positive and negative 
formats an equal length.
.PP
.B "Right Precision"
.PP
.TP
.I ".p\^"
A period followed by a decimal digit string 
.I p
specifying the number of digits after the radix character. If the value 
of the right precision 
.I p
is 0, no radix character appears.  If a right precision is not included, 
a default specified by the current locale is used.  The amount being 
formatted is rounded to the specified number of digits prior to formatting.
.PP
.B "Conversion Characters"
.PP
The conversion characters and their meanings are:
.PP
.TP
\f4i\^\f1
The 
.B double
argument is formatted according to the locale's international currency format 
(for example, in the U.S.A.: 
\f4USD 1,234.56\f1).
.TP
\f4n\^\f1
The 
.B double
argument is formatted according to the locale's national currency format 
(for example, in the U.S.A.: 
\f4$1,234.56\f1).
.TP
\f4%\^\f1
Convert to a \f4%\f1; no argument is converted.  The entire conversion 
specification must be \f4%%\f1.
.PP
.B "Locale Information"
.PP
The LC_MONETARY category of the program's locale affects the behaviour of 
this function including the monetary radix character (which may be different 
from the numeric radix character affected by the LC_NUMERIC category), the 
grouping separator, the currency symbols and formats. The international 
currency symbol should be conformant with the ISO 4217: 1987 standard.
.PP
The monetary formatting information being unavailable in the POSIX locale,
the result is undefined.
.SH "RETURN VALUE"
If the total number of resulting bytes including the terminating null byte 
is not more than 
.I maxsize,
.I strfmon
returns the number of bytes placed into the array pointed to by 
.I s,
not including the terminating null byte.  Otherwise, -1 is returned, 
the contents of the array are indeterminate, and 
.I errno
is set to indicate the error.
.SH ERRORS
.PP
.I strfmon will fail if:
.PP
.TP 10n
\f4[E2BIG]\^\f1
Conversion stopped due to lack of space in the buffer.
.SH "SEE ALSO"
\f4localeconv().
.\"	@(#)strfmon.3s	
.Ee
