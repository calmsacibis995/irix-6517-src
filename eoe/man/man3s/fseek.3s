'\"macro stdmacro
.if n .pH g3s.fseek @(#)fseek	30.2 of 12/25/85
.nr X
.if \nX=0 .ds x} FSEEK 3S "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} FSEEK 3S "C Programming Language Utilities"
.if \nX=2 .ds x} FSEEK 3S "" "\&"
.if \nX=3 .ds x} FSEEK "" "" "\&"
.TH \*(x}
.SH NAME
fseek, fseek64, rewind, ftell, ftell64 \- reposition a file pointer in a stream
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B "int fseek (\s-1FILE\s+1 \(**stream, long offset, int whence);"
.PP
.B "int fseek64 (\s-1FILE\s+1 \(**stream, long long offset, int whence);"
.PP
.B void rewind (\s-1FILE\s+1 \(**stream);
.PP
.B "long ftell (\s-1FILE\s+1 \(**stream);"
.PP
.B "long long ftell64 (\s-1FILE\s+1 \(**stream);"
.SH DESCRIPTION
.I fseek\^
sets the file position indicator for the stream pointed to by
.IR stream .
The new position, measured in bytes from the beginning of the file, is
obtained by adding
.I offset
to the position specified by
.IR whence .
.PP
.TP 12
\f2SEEK_SET\fP
specified starting point is the beginning of the file plus \f2offset\fP.
.TP 12
\f2SEEK_CUR\fP
starting point is the current value of the file position indicator plus \f2offset\fP.
.TP 12
\f2SEEK_END\fP
specified starting point is the \f2EOF\fP of the file plus \f2offset\fP.
.PP
A successful call to
.I fseek
clears the end-of-file indicator for the stream.
.PP
\f2fseek\fP allows the file position indicator to be set
beyond the end of the existing data in the file.
If data is later written at this point, subsequent reads of data in
the gap will return zero until data is actually written into the
gap.
\f2fseek\fP, by itself, does not extend the size of the file.
.PP
.IR rewind ( stream )
is equivalent to:
.PP
	\f2(void) fseek ( stream , 0L, \s-1SEEK_SET\s+1),\f1
.PP
except that the error indicator for the stream is also cleared.
Also,
.I rewind
returns no value.
.PP
.I fseek\^
and
.I rewind\^
undo any effects of
.IR ungetc (3S)
on the indicated 
.IR stream .
After
.I fseek\^
or
.IR rewind ,
the next operation on a file opened for update
may be either input or output.
.PP
If
.IR stream 
is writable and buffered data has not been written to the underlying file,
\f2fseek\fP and \f2rewind\fP cause the unwritten data to be written to the file.
.PP
.I ftell\^
returns the offset of the current byte relative to the beginning
of the file associated with the named
.IR stream .
.PP
The functions \f2fseek64\f1 and \f2ftell64\f1 are identical to \f2fseek\f1
and \f2ftell\f1 respectively, except that \f2fseek64\f1 takes a \f2long long\f1
as an argument and \f2ftell64\f1 returns a \f2long long\f1.
This allows the routines to set and return the file position indicator for
files larger than 2 Gigabytes.
.SH SEE ALSO
lseek(2),
fopen(3S),
fsetpos(3S),
popen(3S), stdio(3S), ungetc(3S).
.SH DIAGNOSTICS
.I fseek\^
returns non-zero for improper seeks,
otherwise zero.
An improper seek can be, for example, an
.I fseek\^
done on a file that has not been opened via
.IR fopen ;
in particular,
.I fseek\^
may not be used on a terminal, or on a file opened via
.IR popen (3S).
.SH WARNING
The ANSI C Standard restricts the use of 
.IR offset s,
when 
.I stream
refers to a text file.
When operating on these files,
the value of 
.I offset\^
must be zero unless 
.I whence\^
is 
.BR \s-1SEEK_SET\s+1 .
This restriction is necessary
as the unit of
.IR offset s
may not be bytes on some systems, and arithmetic may not meaningfully 
be performed on them.
.br
As the unit of 
.I offset\^
on this system (and on most UNIX systems) 
is bytes for text as well as for binary files, 
the restrictions indicated in the ANSI C
Standard are not enforced.
Portable programs, however, should be coded accordingly.
.PP
Users of the
.I -n32
compilation model are directed to either use
.I ftell64
and
.I fseek64
or
.I fgetpos
and
.I fsetpos
in place of
.I ftell
and
.I fseek.
The reason for this is because the
.I offset
argument to
.I fseek,
and the return value from
.I ftell
are both typed as
.I long,
which is not sufficient to express the maximum file length
supported by the
.I -n32
compilation model.
'\".so /pubs/tools/origin.att
.\"	@(#)fseek.3s	6.2 of 10/20/83
.Ee
