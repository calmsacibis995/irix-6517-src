'\"macro stdmacro
.if n .pH g3s.flockfile
.nr X
.if \nX=0 .ds x} flockfile 3S "C Development Set" "\&"
.if \nX=1 .ds x} flockfile 3S "C Development Set"
.if \nX=2 .ds x} flockfile 3S "" "\&"
.if \nX=3 .ds x} flockfile "" "" "\&"
.TH \*(x}
.SH NAME
\f4flockfile\f1, \f4ftrylockfile\f1, \f4funlockfile\f1 \- stdio synchronization functions
.SH SYNOPSIS
\f4#include <stdio.h>\fP
.PP
\f4void flockfile (FILE \(**file);\f1
.PP
\f4int ftrylockfile (FILE \(**file);\f1
.PP
\f4void funlockfile (FILE \(**file);\f1
.SH DESCRIPTION
\f4flockfile\fP, \f4ftrylockfile\fP, and \f4funlockfile\fP provide
for explicit locking and unlocking
of stdio streams.
They may be used by a thread to delineate a sequence of I/O statements to be
executed as a critical section.
.PP
\f4flockfile\fP is used by a thread to acquire exclusive use of \f2file\fP.
.PP
\f4ftrylockfile\fP is used by a thread to acquire exclusive use
of \f2file\fP if it is available; \f4ftrylockfile\fP is a nonblocking
version of \f4flockfile\fP.  \f4ftrylockfile\fP returns zero if it
successfully acquires the lock, otherwise a nonzero value is returned.
.PP
\f4funlockfile\fP is used to give up the exclusive control granted to
the thread.
.PP
Logically, there is a lock count associated with \f2file\fP.
The count is implicitly initialized to 0 when the \f2file\fP
is opened.
\f2file\fP is unlocked when the count is 0.
When the count is positive a single thread holds the lock.
Each call to \f4flockfile\fP (or successful call to \f4ftrylockfile\fP)
increments the lock count
while each call to \f4funlockfile\fP decrements the lock count.
When the lock count is non-zero, threads not holding the lock on \f2file\fP
that call \f4flockfile\fP will suspend and wait for the count to return
to 0.
The thread holding the lock on \f2file\fP does not suspend itself on multiple
calls to \f4flockfile\fP, allowing for the nesting of matching calls to
\f4flockfile\fP (or successful calls to \f4ftrylockfile\fP)
and \f4funlockfile\fP.
.PP
All functions in stdio use these functions to guarantee reentrancy.
All reentrant macros behave as if they are surrounded by calls to
\f4flockfile\fP and \f4funlockfile\fP.
.PP
The feature test macro
.SM
\f4_SGI_REENTRANT_FUNCTIONS\fP
should be defined to make these functions visible.
.PP
The semantics of \f4flockfile\fP, \f4ftrylockfile\fP,
and \f4funlockfile\fP are undefined
if \f2file\fP is not a valid \f2(FILE \(**)\fP object.
Calling \f4funlockfile\fP without previously calling \f4flockfile\fP
(or successfully calling \f4ftrylockfile\fP)
results in indeterminate behavior.
.SH EXAMPLE
Here is a code fragment that uses these functions to guarantee
that the output will be printed without being interspersed with
output from other threads.
.PP
.RS
.nf
.ft 4
#include <stdio.h>

	flockfile(stdout);
	putchar_unlocked('1');
	putchar_unlocked('\\n');
	printf("Line 2\\n");
	funlockfile(stdout);
.fi
.ft 1
.RE
.SH SEE ALSO
\f4intro\fP(3),
\f4getc\fP(3S)
\f4putc\fP(3S)
\f4stdio\fP(3S).
.Ee
