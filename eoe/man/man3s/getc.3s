'\"macro stdmacro
.if n .pH g3s.getc @(#)getc	30.2 of 12/25/85
.nr X
.if \nX=0 .ds x} GETC 3S "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} GETC 3S "C Programming Language Utilities"
.if \nX=2 .ds x} GETC 3S "" "\&"
.if \nX=3 .ds x} GETC "" "" "\&"
.TH \*(x}
.SH NAME
getc, getchar, fgetc, getw, getc_unlocked, getchar_unlocked \- get character or word from a stream
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.B int getc (\s-1FILE\s+1 \(**stream);
.PP
.B int getchar (void);
.PP
.B int fgetc (\s-1FILE\s+1 \(**stream);
.PP
.B int getw (\s-1FILE\s+1 \(**stream);
.PP
.B int getc_unlocked (\s-1FILE\s+1 \(**stream);
.PP
.B int getchar_unlocked (void);
.SH DESCRIPTION
.IR Fgetc " and "
.I getc\^
return the next character (if it exists) from the named input
.IR stream ,
as an unsigned character converted to an integer.
It also moves the file pointer, if defined,
ahead one character
in
.IR stream.
.I getchar
is defined as
.IR getc(stdin) .
Each of 
.IR getc , getchar " and " fgetc
exist as functions in the C library.  
.IR Getc " and " getchar
are also available as macros in 
.RI < stdio.h >
(see below under
.SM CAVEATS
for important details on the implementation of these macros.)
.PP
.I Getw\^
returns the next
word (i.e., integer) from the named input
.IR stream.
.I Getw\^
increments the associated file pointer, if defined,
to point to the next integer-sized word.
.I Getw\^
assumes no special alignment in the file.
.PP
The
.I getc_unlocked
and
.I getchar_unlocked
functions are equivalent to the
.I getc
and
.I getchar
functions, respectively.
However, these functions are not thread-safe and thus must
only be called under the protection of the
.IR flockfile
(or
.IR ftrylockfile )
and
.I funlockfile
functions.
.SH SEE ALSO
fclose(3S),
ferror(3S),
fopen(3S),
fread(3S),
gets(3S),
putc(3S),
scanf(3S), 
stdio(3S),
ungetc(3S).
.SH DIAGNOSTICS
These functions return the constant
.SM
.B EOF
at end-of-file or upon an error.
Because
.SM
.B EOF
is a valid integer,
it is not sufficient to detect 
.I getw\^
errors.
.IR ferror (3S)
must be used as well.
.SH WARNING
If the integer value returned by
.IR getc ", " getchar ", or " fgetc
is stored into a character variable and then compared against
the integer constant
.SM
.BR EOF ,
the comparison may never succeed,
because sign-extension of a character
on widening to integer is machine-dependent.
.SH CAVEATS
When using the macro versions of
.IR getc " and " getchar ,
the 
.I stream\^
argument may be evaluated more than once.
Thus, it must not be an expression with side-effects.
In particular,
.B getc(\(**f\(pl\(pl)
does not work sensibly.
In these situations, the macro must either be 
.BR #undef 'd,
or
.I fgetc\^
should be used instead.
.PP
Because of possible differences in word length and byte ordering,
files written using
.I putw\^
are machine-dependent,
and may not be read using
.I getw\^
on a different processor.
.SH BUGS
When using the macros for 
.IR getc " and " getchar ,
hidden external names may be referenced. Although these names are prefixed 
with an underscore, they may conflict with names which 
the ANSI C Standard reserves 
for the user
when appearing in a local context.
It is thus recommended that users of these macros reserve all names which begin
with an underscore
for the implementation, and avoid defining such names, even in a local context.
'\".so /pubs/tools/origin.att
.\"	@(#)getc.3s	6.2 of 10/20/83
.Ee
