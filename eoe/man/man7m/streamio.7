'\"macro stdmacro
.if n .pH g7.streamio @(#)streamio	31.4 of 1/15/87
.nr X
.if \nX=0 .ds x} STREAMIO 7 "" "\&"
.if \nX=1 .ds x} STREAMIO 7 ""
.if \nX=2 .ds x} STREAMIO 7 "" "\&"
.if \nX=3 .ds x} STREAMIO "" "" "\&"
.TH \*(x}
.SH NAME
streamio \- \s-1STREAMS\s0 ioctl commands
.SH SYNOPSIS
.B #include <stropts.h>
.br
.B int ioctl (fildes, command, arg)
.br
.B int fildes, command;
.SH DESCRIPTION
\s-1STREAMS\s0 [see \f2intro\f1(2)] ioctl commands are a subset of \f2ioctl\f1(2) system calls which
perform a variety of control functions on \f2streams\f1.
The arguments \f2command\f1 and \f2arg\f1 are passed to the file designated by \f2fildes\f1 and are interpreted by the \f2stream head\f1.
Certain combinations of these arguments may be passed to a module or driver in the \f2stream\f1.
.PP
.I fildes\^
is an open file descriptor that refers to a \f2stream\f1.
.I command\^
determines the control function to be performed as described below.
.I arg\^
represents additional information that is needed by this command.
The type of
.I arg\^
depends upon the command, but it is generally an integer
or a pointer to a \f2command\f1-specific data structure.
.P
Since these \s-1STREAMS\s0 commands are a subset of \f2ioctl\f1, they are subject to the errors described there.
In addition to those errors, the call will fail with \f2errno\f1 set to \s-1EINVAL\s0,
without processing a control function,
if the \f2stream\f1 referenced by \f2fildes\f1 is linked below a multiplexor, 
or if \f2command\f1 is not a valid value for a \f2stream\f1.
.P
Also, as described in \f2ioctl\f1, \s-1STREAMS\s0 modules and drivers can detect errors.
In this case, the module or driver sends an error message to the \f2stream head\f1 containing an error value.
This causes subsequent system calls to fail with \f2errno\f1 set to this value.
.P
In previous IRIX releases it was possible to use these operations on socket
file descriptors by linking with \f2-lsocket\fP; this is no longer true
starting with IRIX 6.2.
.SH COMMAND FUNCTIONS
The following \f2ioctl\f1 commands, with error values indicated, are applicable to all \s-1STREAMS\s0 files:
.TP 13
.SM I_PUSH
Pushes the module whose name is pointed to by \f2arg\f1 onto
the top of the current \f2stream\f1, just below the \f2stream head\f1.
It then calls the open routine of the newly-pushed module.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EINVAL]
Invalid module name.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [ENXIO]
Open routine of new module failed.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.RE
.TP 13
.SM I_POP
Removes the module just below the \f2stream head\f1 of the \f2stream\f1 pointed
to by \f2fildes\f1.
\f2arg\f1 should be 0 in an \s-1I_POP\s+1 request.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EINVAL]
No module present in the \f2stream\f1.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.RE
.TP 13
.SM I_LOOK
Retrieves the name of the module just below the \f2stream head\f1
of the \f2stream\f1 pointed to by \f2fildes\f1,
and places it
in a null terminated character string pointed at by \f2arg\f1.
The buffer pointed to by \f2arg\f1 should be at least \s-1FMNAMESZ\s+1+1
bytes long.
An \f(CW[#include <sys/conf.h>]\f1 declaration is required.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [EINVAL]
No module present in \f2stream\f1.
.RE
.TP 13
.SM I_LIST
Retrieves the entire list of modules between the \f2stream head\f1 of the
\f2stream\f1 pointed to by \f2fildes\f1, and the driver.
If \f2arg\f1 is NULL, then the number of modules is returned.
Otherwise, \f2arg\f1 should point to a \f2struct str_list\f1.
On input, the member \f2sl_nmods\f1 should be set to the maximum
number of module name the caller is ready to accept, and the member
\f2sl_modlist\f1 should point to an array of \f2struct str_mlist\f1
dats structures with at least \f2str_nmods\f1 elements.
On successful return, the member \f2sl_nmods\f1 will be updated to reflect
the actual number of module names returned.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [EINVAL]
The value of \f2sl_nmods\f1 is less than or equal to zero.
.TP
.SM [ENOSPC]
The value of \f2sl_nmods\f1 is less than the actual number of modules.
.RE
.TP 13
.SM I_FLUSH
This request
flushes all input and/or output queues, depending on the value of
\f2arg\f1.
Legal \f2arg\f1 values are:
.RS 13
.TP 13
.SM FLUSHR
Flush read queues.
.TP
.SM FLUSHW
Flush write queues.
.TP
.SM FLUSHRW
Flush read and write queues.
.RE
.IP
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [ENOSR]
Unable to allocate buffers for flush message due to insufficient \s-1STREAMS\s0 memory resources.
.TP
.SM [EINVAL]
Invalid \f2arg\f1 value.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.RE
.TP 13
.SM I_SETSIG
Informs the \f2stream head\f1 that the user wishes
the kernel to issue the \s-1SIGPOLL\s+1 signal [see \f2signal\f1(2) and \f2sigset\f1(2)]
when a particular event has occurred on the \f2stream\f1 associated
with \f2fildes\f1.
.SM I_SETSIG
supports an asynchronous processing capability in
\s-1STREAMS\s0.
The value of \f2arg\f1 is a bitmask that specifies
the events for which the user should be signaled.
It is the bitwise-OR of any combination of the following constants:
.RS 13
.TP 13 
.SM S_INPUT
A non-priority message has arrived on a \f2stream head\f1
read queue, and no other messages existed on that queue before
this message was placed there.
This is set even if the message is of zero length.
.TP
.SM S_HIPRI
A priority message is present on the \f2stream head\f1 read queue.
This is set even if the message is of zero length.
.TP
.SM S_OUTPUT
The write queue just below the \f2stream head\f1 is no longer full.
This notifies the user that there is room on the queue for
sending (or writing) data downstream.
.TP
.SM S_MSG
A \s-1STREAMS\s0 signal message 
that contains the \s-1SIGPOLL\s+1 signal has reached the front of the \f2stream head\f1
read queue.
.RE
.IP
A user process may choose to be signaled only of priority messages by
setting the \f2arg\f1 bitmask to the value \s-1S_HIPRI\s+1.
.IP
Processes that wish to receive \s-1SIGPOLL\s+1 signals must explicitly
register to receive them using \s-1I_SETSIG\s+1.
If several processes register to receive this signal for the same event on the same Stream, each process will be signaled when the event occurs.
.IP
If the value of \f2arg\f1 is zero,
the calling process will be unregistered and will not receive
further \s-1SIGPOLL\s+1 signals.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EINVAL]
\f2arg\f1 value is invalid or
\f2arg\f1 is zero and process is not registered to receive
the \s-1SIGPOLL\s+1 signal.
.TP
.SM [EAGAIN]
Allocation of a data structure to store the signal request failed.
.RE
.TP 13
.SM I_GETSIG
Returns the events for which the calling process is
currently registered to be sent a \s-1SIGPOLL\s+1 signal.
The events are returned as a bitmask pointed to by \f2arg\f1,
where the events are those specified in the description of \s-1I_SETSIG\s+1
above.
\f2arg\f1 is assumed to point to an \f3int\f1.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EINVAL]
Process not registered to receive the \s-1SIGPOLL\s+1 signal.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.TP 13
.SM I_FIND
Compares the names of all modules currently present in
the \f2stream\f1 to the name pointed to by \f2arg\f1, and returns 1 if
the named module is present in the \f2stream\f1.
It returns 0 if the named module is not present.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [EINVAL]
\f2arg\f1 does not contain a valid module name.
.RE
.TP 13
.SM I_PEEK
Allows a user to retrieve the information in the first
message on the \f2stream head\f1 read queue without taking the
message off the queue.
\f2arg\f1 points to a \f2strpeek\f1 structure
which contains the following members:
.sp .5
.ta .5i 1.75i
.nf
	\f(CWstruct strbuf	ctlbuf;
	struct strbuf	databuf;
	long	flags;\f1
.fi
.sp .5
The \f2maxlen\f1 field in the \f2ctlbuf\f1 and \f2databuf\f1
\f2strbuf\f1 structures [see \f2getmsg\f1(2)] must be set to
the number of bytes of control information and/or data information,
respectively, to retrieve.
If the user sets \f2flags\f1 to \s-1RS_HIPRI\s+1, \s-1I_PEEK\s+1 will only look
for a priority message on the \f2stream head\f1 read queue.
.IP
\s-1I_PEEK\s+1 returns 1 if a message was retrieved,
and returns 0 if no message was found on the \f2stream head\f1 read
queue, or if the \s-1RS_HIPRI\s+1 flag was set in \f2flags\f1 and
a priority message was not present on the \f2stream head\f1 read queue.
It does not wait for a message to arrive.
On return, \f2ctlbuf\f1 specifies information in the control buffer,
\f2databuf\f1 specifies information in the data buffer, and
\f2flags\f1 contains the value 0 or \s-1RS_HIPRI\s+1.
On failure, \f2errno\f1 is set to the following value:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points, or the buffer area specified in \f2ctlbuf\f1 or \f2databuf\f1 is, outside the allocated address space.
.TP 13
.SM [EBADMSG]
Queued message to be read is not valid for \s-1I_PEEK\s+1
.RE
.TP 13
.SM I_SRDOPT
Sets the read mode using the value of the argument \f2arg\f1.
Legal \f2arg\f1 values are:
.RS 13
.TP 10
.SM RNORM
Byte-stream mode, the default.
.TP
.SM RMSGD
Message-discard mode.
.TP
.SM RMSGN
Message-nondiscard mode.
.RE
.IP
Read modes are described in \f2read\f1(2).
On failure, \f2errno\f1 is set to the following value:
.RS 13
.TP 13
.SM [EINVAL]
\f2arg\f1 is not one of the above legal values. 
.RE
.TP 13
.SM I_GRDOPT
Returns the current read mode setting in an \f2int\f1
pointed to by the argument \f2arg\f1.
Read modes are described in \f2read\f1(2).
On failure, \f2errno\f1 is set to the following value:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.TP 13
.SM I_NREAD
Counts the number of data bytes
in data blocks in the first message
on the \f2stream head\f1 read queue,
and places this value in the location pointed to by \f2arg\f1.
\f2arg\f1 is assumed to be a pointer to an \f3int\f1.
The return value for the command is the number of messages
on the \f2stream head\f1 read queue.
For example, if zero is returned in \f2arg\f1, but the \f2ioctl\f1 return value is greater than zero,
this indicates that a zero-length message is next on the queue.
On failure, \f2errno\f1 is set to the following value:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.TP 13
.SM I_FDINSERT
Creates a message from user specified buffer(s), adds information about another \f2stream\f1 and sends the message downstream.
The message contains a control part and an optional data part.
The data and control parts to be sent are distinguished by placement
in separate buffers, as described below.
.IP
\f2arg\f1 points to a \f2strfdinsert\f1 structure
which contains the following members:
.sp .5
.ta .5i 1.75i
.nf
	\f(CWstruct strbuf	ctlbuf;
	struct strbuf	databuf;
	long	flags;
	int	fildes;
	int	offset;\f1
.fi
.sp .5
The \f2len\f1 field in the \f2ctlbuf\f1 \f2strbuf\f1 structure [see
\f2putmsg\f1(2)] must be set to the size of a pointer plus the number
of bytes of control information to be sent with the message.
\f2fildes\f1 in the \f2strfdinsert\f1 structure specifies the file descriptor of the other \f2stream\f1.
\f2offset\f1, which must be word-aligned, specifies the number of bytes
beyond the beginning of the control buffer where \s-1I_FDINSERT\s0 will
store a pointer.
This pointer will be the address of the read queue structure of the driver for the \f2stream\f1 corresponding to \f2fildes\f1 in the \f2strfdinsert\f1 structure.
The \f2len\f1 field in the \f2databuf\f1 \f2strbuf\f1 structure must be
set to the number of bytes of data information to be sent with the
message or zero if no data part is to be sent.
.IP
\f2flags\f1 specifies the type of message to be created. 
A non-priority message is created if \f2flags\f1 is set to 0, and
a priority message is created if \f2flags\f1 is set to \s-1RS_HIPRI\s+1.
For non-priority messages, \s-1I_FDINSERT\s0 will block if the \f2stream\f1 write queue is full due to internal flow control conditions.
For priority messages, \s-1I_FDINSERT\s0 does not block on this condition.
For non-priority messages, \s-1I_FDINSERT\s0 does not block when the
write queue is full and \s-1O_NDELAY\s+1 is set.
Instead, it fails and sets \f2errno\f1 to \s-1EAGAIN\s+1.
.IP
\s-1I_FDINSERT\s0 also blocks, unless prevented by lack of internal resources,
waiting for the availability of message blocks in the \f2stream\f1,
regardless of priority or whether \s-1O_NDELAY\s+1 has been specified.
No partial message is sent.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM
\%[EAGAIN]
A non-priority message was specified, the \s-1O_NDELAY\s+1 flag is set,
and the  \f2stream\f1 write queue is full due to internal flow control conditions.
.TP
.SM [ENOSR]
Buffers could not be allocated for the message that was to be created
due to insufficient \s-1STREAMS\s0 memory resources.
.TP
.SM [EFAULT]
\f2arg\f1 points, or the buffer area specified in \f2ctlbuf\f1 or \f2databuf\f1 is, outside the allocated address space.
.TP
.SM [EINVAL]
One of the following:
\f2fildes\f1 in the \f2strfdinsert\f1 structure
is not a valid, open \f2stream\f1 file descriptor;
the size of a pointer plus \f2offset\f1 is
greater than the \f2len\f1 field for the buffer specified through \f2ctlptr\f1;
\f2offset\f1 does not specify a properly-aligned location in the data buffer;
an undefined value is stored in \f2flags\f1.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1 of the \f2ioctl\f1 call or \f2fildes\f1 in the \f2strfdinsert\f1 structure.
.TP
.SM [ERANGE]
The \f2len\f1 field for the buffer specified through \f2databuf\f1 does
not fall within the range specified by the maximum and minimum packet
sizes of the topmost \f2stream\f1 module, or the \f2len\f1 field for
the buffer specified through \f2databuf\f1 is larger than the maximum
configured size of the data part of a message, or the \f2len\f1 field
for the buffer specified through \f2ctlbuf\f1 is larger than the
maximum configured size of the control part of a message.
.RE
.IP
\s-1I_FDINSERT\s0 can also fail if an error message was
received by the \f2stream head\f1 of the \f2stream\f1 corresponding to \f2fildes\f1 in the \f2strfdinsert\f1 structure.
In this case, \f2errno\f1 will be set to the value in the message.
.TP  13
.SM I_STR
Constructs an internal \s-1STREAMS\s0 ioctl message from the data
pointed to by \f2arg\f1, and sends that message downstream.
.IP
This mechanism is provided to send user \f2ioctl\f1 requests to downstream
modules and drivers.
It allows information to be sent with the \f2ioctl\f1, and
will return to the user any information sent upstream
by the downstream recipient.
\s-1I_STR\s0 blocks until the system responds
with either a positive or negative acknowledgement message,
or until the request "times out" after some period of time.
If the request times out, it fails with \f2errno\f1 set to \s-1ETIME\s+1.
.IP
At most, one \s-1I_STR\s0 can be active on a \f2stream\f1.
Further \s-1I_STR\s0 calls will block until the active \s-1I_STR\s0 completes at the \f2stream head\f1.
The default timeout interval for these requests is 15 seconds.
The \s-1O_NDELAY\s+1 [see \f2open\f1(2)] flag has no effect on this call.
.IP
To send requests downstream, \f2arg\f1 must point to a \f2strioctl\f1 structure
which contains the following members:
.sp .5
.ta .5i 1i 2i
.nf
	\f(CWint	ic_cmd;\f1	/* downstream command */
	\f(CWint	ic_timout;\f1	/* \s-1ACK/NAK\s+1 timeout */
	\f(CWint	ic_len;\f1	/* length of data arg */
	\f(CWchar	*ic_dp;\f1	/* ptr to data arg */
.fi
.IP
\f2ic_cmd\f1 is the internal ioctl command intended for a downstream
module or driver and \f2ic_timout\f1 is the number of seconds (-1 =
infinite, 0 = use default, >0 = as specified) an \s-1I_STR\s0
request will wait for acknowledgement before timing out.
\f2ic_len\f1 is the number of bytes in the data argument and
\f2ic_dp\f1 is a pointer to the data argument.
The \f2ic_len\f1 field has two uses:
on input, it contains the length of the data argument
passed in, and on return from the command, it contains the
number of bytes being returned to the user (the buffer pointed to by \f2ic_dp\f1 should be large enough to contain the maximum amount of data that any module or the driver in the \f2stream\f1 can return).
.IP
The \f2stream head\f1 will convert the information pointed to by the
\f2strioctl\f1 structure to an internal ioctl command message and send it downstream.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [ENOSR]
Unable to allocate buffers for the \f2ioctl\f1 message
due to insufficient \s-1STREAMS\s0 memory resources.
.TP
.SM [EFAULT]
\f2arg\f1 points, or the buffer area specified by \f2ic_dp\f1 and \f2ic_len\f1 (separately for data sent and data returned) is, outside the allocated address space.
.TP
.SM [EINVAL]
\f2ic_len\f1 is less than 0 or \f2ic_len\f1 is larger than the maximum configured size of the data part of a message or \f2ic_timout\f1 is less than -1.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.TP
.SM [ETIME]
A downstream \f2ioctl\f1 timed out before acknowledgement was received.
.RE
.IP
An \s-1I_STR\s+1 can also fail while waiting for an acknowledgement if a message indicating an error or a hangup is received at the \f2stream head\f1.
In addition, an error code can be returned in the positive or negative acknowledgement message, in the event the ioctl command sent downstream fails.
For these cases, \s-1I_STR\s+1 will fail with \f2errno\f1 set to the value
in the message.
.TP 13
.SM I_SWROPT
Sets the write mode bits using the value of the argument \f2arg\f1.
Legal bit settings for \f2arg\f1 are:
.RS 13
.TP 13
.SM SNDZERO
Send a zero-length message downstream when a write of 0 bytes occurs
on pipes and FIFOs.
.TP 13
.SM SNDPIPE
Send \s-1SIGPIPE\s+1 to process if \f4sd_werror\f1 is set and the process
is doing a write or putmsg.
.TP 13
.SM SNDHOLD
Activate the STRHOLD feature.
.RE
.IP
On failure, \f4errno\f1 may be set to the following value:
.RS 13
.TP 13
.SM EINVAL
\f2arg\f1 is not a valid value.
.RE
.RS 0
.TP 13
.SM I_GWROPT
Returns the current write mode setting, as described above,
in the \f4int\f1 that is pointed to by the argument \f2arg\f1.
.TP 13
.SM I_SENDFD
Requests the \f2stream\f1 associated with \f2fildes\f1 to send a message, containing a file pointer,
to the \f2stream head\f1 at the other end of a \f2stream\f1 pipe.
The file pointer corresponds to \f2arg\f1, which must be an integer file descriptor.
.IP
\s-1I_SENDFD\s+1 converts \f2arg\f1 into the corresponding system file pointer.
It allocates a message block and inserts the file pointer in the block.
The user id and group id associated with the sending process are also inserted.
This message is placed directly on the read queue [see \f2intro\f1(2)] of the \f2stream head\f1 at the other end of the \f2stream\f1 pipe to which it is connected.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EAGAIN]
The sending \f2stream\f1 is unable to allocate a message block to contain the file pointer.
.TP
.SM [EAGAIN]
The read queue of the receiving \f2stream head\f1 is full and
cannot accept the message sent by \s-1I_SENDFD\s0.
.TP
.SM [EBADF]
\f2arg\f1 is not a valid, open file descriptor.
.TP
.SM [EINVAL]
\f2fildes\f1 is not connected to a \f2stream\f1 pipe.
.TP
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.RE
.TP 13
.SM I_RECVFD
Retrieves the file descriptor associated with the message sent by an \s-1I_SENDFD\s0 \f2ioctl\f1 over a \f2stream\f1 pipe.
\f2arg\f1 is a pointer to a data buffer large enough
to hold an \f2strrecvfd\f1 data structure containing the following members:
.sp .5
.nf
	\f(CWint fd;
	uid_t uid;
	gid_t gid;\f1
.fi
.IP
\f2fd\f1 is an integer file descriptor.
\f2uid\f1 and \f2gid\f1 are the user id and group id, respectively, of the sending \f2stream\f1.
.IP
If \s-1O_NDELAY\s0 is not set [see \f2open\f1(2)], \s-1I_RECVFD\s0 will block until a message is present at the \f2stream head\f1.
If \s-1O_NDELAY\s0 is set, \s-1I_RECVFD\s0 will fail with \f2errno\f1 set to \s-1EAGAIN\s0 if no message is present at the \f2stream head\f1.
.IP
If the message at the \f2stream head\f1 is a message sent by an \s-1I_SENDFD\s0,
a new user file descriptor is allocated for the file pointer contained in the message.
The new file descriptor is placed in the \f2fd\f1 field of the \f2strrecvfd\f1 structure.
The structure is copied into the user data buffer pointed to by \f2arg\f1.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EAGAIN]
A message was not present at the \f2stream head\f1
read queue, and the \s-1O_NDELAY\s+1 flag is set. 
.TP
.SM [EBADMSG]
The message at the \f2stream head\f1 read queue was not
a message containing a passed file descriptor.
.TP
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP 
.SM [EMFILE]
\s-1NOFILES\s0 file descriptors are currently open.
.TP 
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.RE
.TP 13
.SM I_SETCLTIME
Sets the stream head close time to the integer value pointed to by
\f2arg\f1.
The stream head close time is the maximum amount
of time, in seconds, that the stream head will wait during close for
the stream's output queues to empty before calling each module's or driver's
close function.  The default value is 15 seconds.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.TP
.SM [EINVAL]
\f2arg\f1 points to a value less than 0.
.RE
.TP 13
.SM I_GETCLTIME
Returns the current value of the stream head close time (defined above)
in the integer pointed to by \f2arg\f1.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [EFAULT]
\f2arg\f1 points outside the allocated address space.
.RE
.PP
The following two commands are used for connecting and disconnecting
multiplexed \s-1STREAMS\s0 configurations.
.TP 13
.SM I_LINK
Connects two \f2streams\f1,
where \f2fildes\f1 is the file descriptor of the \f2stream\f1 connected to the multiplexing
driver, and \f2arg\f1 is the file descriptor of the \f2stream\f1 connected to another driver.
The \f2stream\f1 designated by \f2arg\f1 gets connected below the multiplexing driver.
.SM I_LINK
requires the multiplexing driver to send an acknowledgement message to the \f2stream head\f1 regarding the linking operation.
This call returns a multiplexor ID number (an identifier
used to disconnect the multiplexor, see \s-1I_UNLINK\s0) on success, and a -1 on failure.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.TP
.SM [ETIME]
Time out before acknowledgement message was received at \f2stream head\f1.
.TP
.SM [EAGAIN]
Temporarily unable to allocate storage to perform the \s-1I_LINK\s0.
.TP
.SM [ENOSR]
Unable to allocate storage to perform the \s-1I_LINK\s0
due to insufficient \s-1STREAMS\s0 memory resources.
.TP
.SM [EBADF]
\f2arg\f1 is not a valid, open file descriptor.
.TP
.SM [EINVAL]
\f2fildes stream\f1 does not support multiplexing.
.TP
.SM [EINVAL]
\f2arg\f1 is not a \f2stream\f1, or is already linked under a multiplexor.
.TP
.SM [EINVAL]
The specified link operation
would cause a "cycle" in the resulting configuration;
that is, if a given \f2stream head\f1 is linked into a multiplexing
configuration in more than one place.
.RE
.IP
An \s-1I_LINK\s+1 can also fail while waiting for the multiplexing driver to acknowledge the link request, if a message indicating an error or a hangup is received at the \f2stream head\f1 of \f2fildes\f1.
In addition, an error code can be returned in the positive or negative acknowledgement message.
For these cases, \s-1I_LINK\s+1 will fail with \f2errno\f1 set to the value in the message.
.TP 13
.SM I_UNLINK
Disconnects the two \f2streams\f1 specified by \f2fildes\f1 and \f2arg\f1.
\f2fildes\f1 is the file descriptor of the \f2stream\f1 connected to the
multiplexing driver.
\f2fildes\f1 must correspond to the \f2stream\f1 on which the \f2ioctl\f1 \s-1I_LINK\s0 command was issued to link the \f2stream\f1 below the multiplexing driver.
\f2arg\f1 is the multiplexor ID number that was returned by the
.SM I_LINK.
If \f2arg\f1 is -1, then all Streams which were linked to \f2fildes\f1
are disconnected.
As in \s-1I_LINK\s0, this command requires the multiplexing driver to
acknowledge the unlink.
On failure, \f2errno\f1 is set to one of the following values:
.RS 13
.TP 13
.SM [ENXIO]
Hangup received on \f2fildes\f1.
.TP
.SM [ETIME]
Time out before acknowledgement message was received at \f2stream head\f1.
.TP
.SM [ENOSR]
Unable to allocate storage to perform the \s-1I_UNLINK\s0
due to insufficient \s-1STREAMS\s0 memory resources.
.TP
.SM [EINVAL]
\f2arg\f1 is an invalid multiplexor ID number or \f2fildes\f1 is not the \f2stream\f1 on which the \s-1\I_LINK\s0 that returned \f2arg\f1 was performed.
.RE
.IP
An \s-1I_UNLINK\s+1 can also fail while waiting for the multiplexing
driver to acknowledge the link request, if a message indicating an
error or a hangup is received at the \f2stream head\f1 of \f2fildes\f1.
In addition, an error code can be returned in the positive or negative
acknowledgement message.
For these cases, \s-1I_UNLINK\s+1 will fail with \f2errno\f1 set to the
value in the message.
.TP 13
.SM FIONREAD
Counts the number of data bytes
in data blocks in the first message
on the \f2stream head\f1 read queue,
and places this value in the location pointed to by \f2arg\f1.
\f2arg\f1 is assumed to be a pointer to an \f3int\f1.
.TP 13
.SM FIORDCHK
Counts the number of data bytes
in data blocks in the first message
on the \f2stream head\f1 read queue,
and returns this value.
.TP 13
.SM FIONBIO
Enables or disables non-blocking mode, according to the boolean value
of the contents of
.IR arg .
.I arg
is a pointer to an
.IR int .
Enabling this mode has the same effect as the
.B O_NDELAY
flag for
.IR open (2).
.SH "SEE ALSO"
close(2), fcntl(2), intro(2), ioctl(2), open(2), read(2), getmsg(2),
poll(2), putmsg(2), signal(2), sigset(2), write(2), termio(7)
.SH DIAGNOSTICS
Unless specified otherwise above, the return value from \f2ioctl\f1 is
0 upon success and -1 upon failure with \f2errno\f1 set as indicated.
.Ee
