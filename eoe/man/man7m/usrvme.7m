.TH usrvme 7M
.SH NAME
usrvme \- User level VME Bus adapter interface. 

.SH DESCRIPTION
The 
.IR usrvme
interface provides access to VME bus address spaces from user
processes.  

.\" *****************************************************
.SS Challenge and Onyx Systems 
.\" *****************************************************

On Challenge and Onyx systems, access to VME bus address spaces are
provided by special files.  They're named according to the following
convention:

\f3/dev/vme/vme<adapter>a<address-space><address-mode>\f1

<adapter> is the number of VME bus adapter.
.br
<address-space> is one of {\f416\f1, \f424\f1, \f432\f1}.
.br
<address-mode> is either \f4n\f1 for non-privileged or \f4s\f1 for supervisory.

For instance, address space 16 in non-privileged mode on adapter 0 would be
referred to as 
.IR /dev/vme/vme0a16n.
.sp
The kernel driver for user level VME is referred to as
.IR usrvme.
If VME busses are added to an existing system, it may be necessary to
run 
.IR MAKEDEV (1M) 
specifying a target of 
.IR usrvme
in order to have the additional 
.I /dev/vme
devices created.

.\" *******************************************************
.SS Origin2000 and Onyx2 Systems 
.\" *******************************************************

On Origin2000 and Onyx2 systems, VME bus address spaces can be
accessed by hardware graph vertices.  The vertices are named by the
following convention:

\f3/hw/vme/<adapter>/usrvme/<address-space>/<data-width>\f1

<adapter> is the number of VME bus adapter. 
.br
<address-space> is the code for address space.  It could be one of
{\f4a32s\f1,\f4a32n\f1, \f4a24s\f1, \f4a24n\f1, \f4a16s\f1,
\f4a16n\f1}. 
.br
<data-width> is the maximum PIO data width on VME bus.  It could be
one of {\f4d64\f1, \f4d32\f1} in A32 space, or one of {\f4d32\f1,
\f4d16\f1} in A24 and A16 spaces. 

.\" **********************
.SS Error Handling
.\" **********************

Not all addresses can be read from or written to because of read-only
or write-only registers and unequipped addresses. Reads or writes to
invalid VME bus addresses will normally result in a SIGBUS signal
being sent to the offending process.  

On CHALLENGE, ONYX, Origin2000, and ONYX2 systems, writes to an
invalid VME bus address are asynchronous, processor does not wait for
the completion of write operation.  If write operation fails, it could
take up to 10 millisecs for the user VME process to be signalled about
failed write.  (Note that VME bus timeout is about 80 microsecs on
Challenge and Onyx systems, 64 microseconds on Origin2000 and Onyx2
systems.)  So, if the user VME process has to confirm that the write
completed successfully, it should wait for about 10 millisecs.  If the
user VME process has already terminated by the time kernel gets the
VME write error interrupt, a message is sent to SYSLOG indicating the
VME Adapter number, and failed VME bus address.

If multiple processes have the mapping for the VME address which got
an error, all of them would be sent SIGBUS signal.

.\" ********
.SH SEE ALSO
.\" ********
"IRIX Device Driver Programmer's Guide" 
.br
hinv(1M)
.br
MAKEDEV(1M) -- on Challenge and Onyx systems.








