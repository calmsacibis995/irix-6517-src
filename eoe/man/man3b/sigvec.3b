'\"! tbl | mmdoc
'\"macro stdmacro
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)sigvec.2	6.3 (Berkeley) 1/8/86
.\"
.TH SIGVEC 3B
.UC 4
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
sigvec \- 4.3BSD software signal facilities
.SH SYNOPSIS
.nf
.B #include <signal.h>
.PP
.B struct sigvec {
.B	int	(*sv_handler)(int, int);
.B	int	sv_mask;
.B	int	sv_flags;
.B };
.PP
.B "int sigvec(int sig, struct sigvec *vec, struct sigvec *ovec);"
.fi
.PP
To use any of the
.SM BSD
signal routines
(\f2kill\fP(3B), \f2killpg\fP(3B), \f2sigblock\fP(3B), \f2signal\fP(3B),
\f2sigpause\fP(3B), \f2sigsetmask\fP(3B), \f2sigstack\fP(2B), \f2sigvec\fP(3B))
you must either
.IP 1) 3
#define
.SM \f3_BSD_SIGNALS\fP
or
.SM \f3_BSD_COMPAT\fP
before including <\f2signal.h\fP>,
or
.IP 2)  3
specify one of them in the compile
command or makefile:
.Ex
cc -D_BSD_SIGNALS -o prog prog.c
.Ee
.SH DESCRIPTION
.I sigvec
specifies and reports on the way individual signals are to be handled
in the calling process.  If
.I vec
is non-zero, it
alters the way the signal will be treated \(em default
behavior, ignored, or handled via a routine \(em and the
signal mask to be used when delivering the signal if
a handler is installed.
If
.I ovec
is non-zero, the previous handling information for the signal
is returned to the user.  In this way (a
.SM NULL
.I vec
and a non-\s-1NULL\s+1
.IR ovec )
the user can inquire as to the current handling of a signal without
changing it.  If both
.I vec
and
.I ovec
are
.SM NULL,
.I sigvec
will return \-1 and set
.I errno
to \f3\s-1EINVAL\s+1\fP if
.I sig
is an invalid signal (else 0), allowing an application to dynamically
determine the set of signals supported by the system.
.PP
The system defines a set of signals that may be delivered to a process.
Signal delivery resembles the occurrence of a hardware interrupt:
the signal is blocked from further occurrence, the current process
context is saved, and a new one is built.  A process may specify a
.I handler
to which a signal is delivered, or specify that a signal is to be
.I blocked
or
.IR ignored .
A process may also specify that a default action is to be taken
by the system when a signal occurs.
.PP
All signals have the same
.IR priority .
Signal routines execute with the signal that caused their
invocation
.IR blocked ,
but other signals may yet occur.
A global
.I "signal mask"
defines the set of signals currently blocked from delivery
to a process.  The signal mask for a process is initialized
from that of its parent (normally 0).  It
may be changed with a
.IR sigblock (3B)
or
.IR sigsetmask (3B)
call, or when a signal is delivered to the process.
.PP
When a signal
condition arises for a process, the signal is added to a set of
signals pending for the process.  If the signal is not currently
.I blocked
by the process then it is delivered to the process.  When a signal
is delivered, the current state of the process is saved,
a new signal mask is calculated (as described below),
and the signal handler is invoked.  The call to the handler
is arranged so that if the signal handling routine returns
normally the process will resume execution in the context
from before the signal's delivery.
If the process wishes to resume in a different context, then it
must arrange to restore the previous context itself.
.PP
When a signal is delivered to a process a new signal mask is
installed for the duration of the process' signal handler
(or until a
.I sigblock
or
.I sigsetmask
call is made).
This mask is formed by taking the current signal mask,
adding the signal to be delivered, and
.IR or 'ing
in the signal mask associated with the handler to be invoked.
.PP
.I Sigvec
assigns a handler for a specific signal.  If
.I vec
is non-zero, it
specifies a handler routine and mask
to be used when delivering the specified signal.
Further, if the SV_ONSTACK bit is set in
.I sv_flags,
the system will deliver the signal to the process on a
.IR "signal stack" ,
specified with
.IR sigstack (2b).
.PP
For a list of valid signal numbers and a general description of the signal mechanism, please see \f4signal\fP(5).
.sp
Once a signal handler is installed, it remains installed
until another
.I sigvec
call is made, or an
.IR execve (2)
is performed.
The default action for a signal may be reinstated by setting
.I sv_handler
to \f3\s-1SIG_DFL\s+1\fP; this default is termination
with a core image for signals marked
\f3\s-1[1]\s+1\fP.
If
.I sv_handler
is \f3\s-1SIG_IGN\s+1\fP the signal is subsequently ignored,
and pending instances of the signal are discarded.
.PP
\f3\s-1SIGKILL\s+1\fP will immediately terminate a process, regardless of its
state.  Processes which are stopped via job control (typically <ctrl>-Z) will
not act upon any delivered signals other than \f3\s-1SIGKILL\s+1\fP
until the job
is restarted.  Processes which are blocked via a
.IR blockproc (2)
system call will unblock if they receive a signal which is fatal
(i.e., a non-job-control signal which they are
.SM NOT
catching), but will
still be stopped if the job of which they are a part is stopped.  Only
upon restart will they die.  Any non-fatal signals received by a blocked
process will
.SM NOT
cause the process to be unblocked (a call to
.IR unblockproc (2)
or
.IR unblockprocall (2)
is necessary).
.PP
After a
.IR fork (2)
the child inherits
all handlers, the signal stack and the signal masks, but
not the set of the pending signals.
.PP
The
.IR  exec (2)
routines
reset all caught signals to default action
, clear all handler masks and reset all signals to be caught on the user stack.
Ignored signals remain ignored;
the blocked signal mask is unchanged and
pending signals remain pending.
.PP
The mask specified in
.I vec
is not allowed to block
.SM \f3SIGKILL\fP,
.SM \f3SIGSTOP\fP,
or
.SM \f3SIGCONT\fP.
This
is enforced silently by the system.
.SH "RETURN VALUE
A 0 value indicated that the call succeeded.  A \-1 return value
indicates an error occurred and
.I errno
is set to indicate the reason.
.SH ERRORS
.I sigvec
is a library routine (executing in user space): if either
.I vec
or
.I ovec
points to memory that is not a valid part of the process
address space, the process will receive a memory fault (\f3\s-1SIGSEGV\s+1\fP)
signal and terminate (unless it has installed a handler
for \f3\s-1SIGSEGV\s+1\fP).
If the invalid pointer is the result of using a
.SM REFERENCE
instead of
a
.SM POINTER,
the compiler will issue a warning.
.PP
.I sigvec
will fail and no new signal handler will be installed if one
of the following occurs:
.TP 15
.SM
\%[EINVAL]
.I Sig
is not a valid signal number.
.TP 15
.SM
\%[EINVAL]
An attempt is made to ignore or supply a handler for \f3SIGKILL\fP
or \f3SIGSTOP\fP.
.TP 15
.SM
\%[EINVAL]
An attempt is made to ignore
.SM \f3SIGCONT\fP
(by default
.SM \f3SIGCONT\fP
is ignored).
.SH "SEE ALSO"
kill(3B), sigblock(3B), sigsetmask(3B), sigpause(3B),
sigvec(3B), setjmp(3), blockproc(2), signal(5).
.ne 5
.SH "CAVEATS (IRIX)"
.PP
4.2\c
.SM BSD
attempts to restart system calls which are
interrupted by signal receipt; 4.3\c
.SM BSD
gives the programmer
a choice of restart or failed-return-with-error via the
\f3\s-1SV_INTERRUPT\s+1\fP flag in \f2sigvec\fP or use of
the \f2siginterrupt\fP
library routine.  IRIX
provides
.I only
the fail-with-error option.
The affected system calls are \f2read\fP(2), \f2write\fP(2),
\f2open\fP(2), \f2ioctl\fP(2), and \f2wait\fP(2).  Refer
to the \f2sigset\fP(2) man
page for more a detailed description of the behavior.
.PP
.SH "WARNING (IRIX)"
The 4.3\s-1BSD\s+1 and System V signal facilities have different semantics.
Using both facilities in the same program is \f3strongly discouraged\fP
and will result in unpredictable behavior.
