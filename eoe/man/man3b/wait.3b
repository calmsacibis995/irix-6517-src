'\"macro stdmacro
.TH WAIT 3B
.UC 4
.SH NAME
wait, wait3 \- wait for child processes to stop or terminate
.SH SYNOPSIS
\f4#include <sys/types.h>\fP
.br
\f4#include <sys/wait.h>\fP
.br
\f4#include <sys/resource.h>\fP
.PP
\f4int wait ();\fP
.PP
\f4int wait3 ();\fP
.ft 1
.PP
To use either of these routines
you must either
.IP 1) 3
#define
.SM \f3_BSD_COMPAT\fP
before including <\f2sys/wait.h\fP>,
or
.IP 2)  3
specify it in the compile
command or makefile:
.br
.Ex
cc -D_BSD_COMPAT -o prog prog.c
.Ee
.SH DESCRIPTION
These two routines are fully described in \f4wait\f1(2).
When BSD compatibility mode is enabled (via the definition of \f2_BSD_COMPAT\f1)
the only change is in the prototype declaration of these routines in
\f2sys/wait.h\f1.
Historically, many BSD derived programs pass as the status pointer,
a pointer to a \f2union wait\f1, rather than a pointer to \f2int\fP.
Since these programs would not properly compile if prototyping
was in effect, when BSD compatibility mode is enabled, no prototypes
are declared.
.SH "SEE ALSO"
wait(2).
