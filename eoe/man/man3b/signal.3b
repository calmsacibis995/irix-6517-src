'\"! tbl | mmdoc
'\"macro stdmacro
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)signal.3c	6.4 (Berkeley) 5/20/86
.\"
.TH SIGNAL 3B
.UC 4
.ie t .ds d \(dg
.el .ds d \z'|+'
.ie t .ds b \(bu
.el .ds b @
.SH NAME
signal \- simplified software signal facilities (4.3BSD)
.SH SYNOPSIS
.B #include <signal.h>
.PP
.B "int (*signal(int sig, int (*func)(int, ...)))(int, ...);"
.PP
To use any of the
.SM BSD
signal routines
(\f2kill\fP(3B), \f2killpg\fP(3B), \f2sigblock\fP(3B), \f2signal\fP(3B),
\f2sigpause\fP(3B), \f2sigsetmask\fP(3B), \f2sigstack\fP(2B), \f2sigvec\fP(3B))
you must either
.IP 1) 3
#define
.SM \f3_BSD_SIGNALS\fP
or
.SM \f3_BSD_COMPAT\fP
before including <\f2signal.h\fP>,
or
.IP 2)  3
specify one of them in the compile
command or makefile:
.Ex
cc -D_BSD_SIGNALS -o prog prog.c
.Ee
.SH DESCRIPTION
.I signal
is a simplified interface to the more general
.IR sigvec (3B)
facility.
.PP
A signal
is generated by some abnormal event,
initiated by a user at a terminal (quit, interrupt, stop),
by a program error (bus error, etc.),
by request of another program (kill),
or when a process is stopped because it wishes to access
its control terminal while in the background (see
.IR termio (7)).
Signals are optionally generated
when a process resumes after being stopped,
when the status of child processes changes,
or when input is ready at the control terminal.
Most signals cause termination of the receiving process if no action
is taken; some signals instead cause the process receiving them
to be stopped, or are simply discarded if the process has not
requested otherwise.
Except for the \f3\s-1SIGKILL\s+1\fP and \f3\s-1SIGSTOP\s+1\fP
signals, the
.I signal
call allows signals either to be ignored
or to cause an interrupt to a specified location.
.sp
For a list of valid signal numbers and a general description of the signal mechanism, please see \f4signal\fP(5).
.TE
.PP
If
.I func
is \f3\s-1SIG_DFL\s+1\fP, the default action
for signal
.I sig
is reinstated.
If
.I func
is \f3\s-1SIG_IGN\s+1\fP the signal is subsequently ignored
and pending instances of the signal are discarded.
Otherwise, when the signal occurs
further occurrences of the signal are
automatically blocked and
.I func
is called.
.PP
A return from the function unblocks
the handled signal and
continues the process at the point it was interrupted.
Unlike the System V
signal routine, the handler \f2func\fP
\f3remains installed\fP after a signal has been delivered.
.PP
\f3\s-1SIGKILL\s+1\fP will immediately terminate a process, regardless
of its state.  Processes which are stopped via job control
(typically <Ctrl>-Z) will
not act upon any delivered signals other than \f3\s-1SIGKILL\s+1\fP until
the job
is restarted.  Processes which are blocked via a \f2blockproc\fP
system call will unblock if they receive a signal which is fatal
(i.e., a non-job-control signal which they are
.SM NOT
catching), but will
still be stopped if the job of which they are a part is stopped.  Only
upon restart will they die.  Any non-fatal signals received by a blocked
process will
.SM NOT
cause the process to be unblocked (a call to
.IR unblockproc (2)
or
.IR unblockprocall (2)
is necessary).
.PP
The value of
.I signal
is the previous (or initial)
value of
.I func
for the particular signal.
.PP
After a
.IR fork (2)
the child inherits
all handlers and signal masks, but not the set of pending signals.
.PP
The
.IR  exec (2)
routines
reset all caught signals to the default action;
ignored signals remain ignored,
the blocked signal mask is unchanged and
pending signals remain pending.
.SH "RETURN VALUE
The previous action is returned on a successful call.
Otherwise, \-1 is returned and
.I errno
is set to indicate the error.
.SH ERRORS
.I signal
will fail and no action will take place if one of the
following occur:
.TP 15
.SM
\%[EINVAL]
.I Sig
is not a valid signal number.
.TP 15
.SM
\%[EINVAL]
An attempt is made to ignore or supply a handler
for \f3\s-1SIGKILL\s+1\fP or \f3\s-1SIGSTOP\s+1\fP.
.TP 15
.SM
\%[EINVAL]
An attempt is made to ignore \f3\s-1SIGCONT\s+1\fP (by
default \f3\s-1SIGCONT\s+1\fP
is ignored).
.SH "SEE ALSO"
kill(3B), sigvec(3B), sigblock(3B), sigsetmask(3B),
sigpause(3B), setjmp(3), blockproc(2), signal(5).
.SH "CAVEATS (IRIX)"
.PP
4.2\c
.SM BSD
attempts to restart system calls which are
interrupted by signal receipt; 4.3\c
.SM BSD
gives the programmer
a choice of restart or failed-return-with-error via the
\f3\s-1SV_INTERRUPT\s+1\fP flag in \f2sigvec\fP or use of
the \f2siginterrupt\fP
library routine.  IRIX
provides
.I only
the fail-with-error option.
The affected system calls are \f2read\fP(2), \f2write\fP(2),
\f2open\fP(2), \f2ioctl\fP(2), and \f2wait\fP(2).
Refer to the \f2sigset\fP(2) man
page for a more detailed description of the behavior.
.PP
Because 4.3\c
.SM BSD
and System V both have \f2signal\fP system calls, programs
using 4.3\s-1BSD\s+1's version are actually executing \f2BSDsignal\fP.  This is
transparent to the programmer except when attempting to set breakpoints in
.BR dbx ;
the breakpoint must be set at \f2BSDsignal\fP.
.ne 5
.SH "WARNING (IRIX)"
The 4.3\s-1BSD\s+1 and System V signal facilities have different semantics.
Using both facilities in the same program is \f3strongly discouraged\fP
and will result in unpredictable behavior.
