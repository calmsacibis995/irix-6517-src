'\"macro stdmacro
.nr X
.if \nX=0 .ds x} UUID 3C "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} UUID 3C "C Programming Language Utilities"
.if \nX=2 .ds x} UUID 3C "" "\&"
.if \nX=3 .ds x} UUID "" "" "\&"
.TH \*(x}
.SH NAME
uuid_create, uuid_create_nil, uuid_compare, uuid_equal, uuid_is_nil, uuid_hash, uuid_from_string, uuid_to_string \- Universal Unique Identifier functions
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/uuid.h>
.PP
.B "void uuid_create (uuid_t *uuid, uint_t *status);
.P
.B "void uuid_create_nil (uuid_t *uuid, uint_t *status);
.P
.B "boolean_t uuid_is_nil (uuid_t *uuid, uint_t *status);
.P
.B "boolean_t uuid_equal (uuid_t *uuid1, uuid_t *uuid2, uint_t *status); 
.P
.B "int uuid_compare (uuid_t *uuid1, uuid_t *uuid2, uint_t *status);
.P
.B "void uuid_to_string (uuid_t *uuid, char **uuid_str, uint_t *status);
.P
.B "void uuid_from_string (char *uuid_str, uuid_t *uuid, uint_t *status);
.P
.B "ushort_t uuid_hash (uuid_t *uuid, uint_t *status);
.SH DESCRIPTION
Universal Unique Identifiers are bit strings
that may be generated independently on separate nodes (hosts)
such that globally unique strings result
without requiring the hosts to be in communication
with each other to ensure uniqueness.
They are a component of DCE that
have been independently reimplemented in IRIX,
but is in accordance with the DCE specification.
This implementation is API compatible with the DCE implementation.
.PP
The
.I status
parameter in all functions is set to
.I uuid_s_ok
if the functions succeeds,
and does not equal
.I uuid_s_ok
if the function fails.
A description of each function follows.
.PP
.I uuid_create\^
creates a new UUID.
.P
.I uuid_create_nil\^
creates a specially-defined UUID,
the nil UUID.
The nil UUID may be used to initialize/clear UUID structures.
.P
.I uuid_compare\^
defines an ordering relationship between UUIDs.
It returns -1, 0, or 1 as determined by the relative
order of the argument UUIDs.
The nil UUID precedes all others in order.
The return values of -1, 0, and 1 are generated respectively as
.I uuid1
precedes, is equal to, or follows
.IR uuid2 .
.P
.I uuid_equal\^
tests two UUIDs for equality.
It returns
.I B_TRUE
if the UUIDs are equal,
and
.I B_FALSE
if they are not.
.P
.I uuid_is_nil\^
tests a UUID for equality with the nil UUID.
It returns
.I B_TRUE
if the UUID is a nil UUID,
and
.I B_FALSE
if it is not.
.P
.I uuid_hash\^
returns a hash value for a UUID.
.P
.I uuid_from_string\^
converts a string representation of a UUID
into its binary form.
.P
.I uuid_to_string\^
converts a binary UUID into its string representation.
Storage for the string is obtained using
.IR malloc (3c),
and thus should be returned using
.IR free (3c).
.SH "SEE ALSO"
malloc(3c), free(3c)
.SH DIAGNOSTICS
Return values are described in the description of each (non-void) function.
The
.I status
parameter serves the purpose usually fulfilled by the return value.
See above for a description of
.IR status .
.SH NOTES
The DCE version and this version of
.I uuid_compare
may return different results for the same UUIDs.
The same is true for the values returned by each version of
.IR uuid_hash .
