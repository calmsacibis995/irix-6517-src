.TH atcheckpoint 3C
.SH NAME
atcheckpoint, atrestart \- add checkpoint and restart (CPR) event handlers
.SH SYNOPSIS
#include <stdlib.h>
.sp
int
atcheckpoint(void (\fI*func\fP)(void));
.sp
int
atrestart(void (\fI*func\fP)(void));
.SH DESCRIPTION
These functions are used to register event handlers
for checkpoint and restart, and activate CPR signal handling.
The \fIatcheckpoint\fP() routine adds the function
.IR func ()
to the list of functions to be called without arguments
upon receipt of checkpoint; see
.IR ckpt_create (3).
Similarly, the \fIatrestart\fP() routine registers the callback function
.IR func ()
for a restart event; see
.IR ckpt_restart (3).
At checkpoint or restart time, registered functions
are called in the same order as their registration.
.P
These functions are recommended for use during initialization when
applications expect to be checkpointed but contain checkpoint-unsafe objects;
see \fIcpr\fP(1) for a list of unsafe objects.
An application may register multiple checkpoint and/or restart event handlers
to be called when checkpoint and/or restart occur,
for example to disconnect socket connections at checkpoint time
and reconnect them at restart time.
.SH DIAGNOSTICS
The \fIatcheckpoint\fP() and \fIatrestart\fP() routines
return 0 if the registration succeeds, or \-1 with
.I errno
set if registration fails.
The maximum number of handlers allowed for each process (or thread) is 32.
.SH SEE ALSO
.IR cpr (1),
.IR cview (1),
.IR ckpt_create (3),
.IR ckpt_remove (3),
.IR ckpt_restart (3),
.IR ckpt_stat (3)
.br
\fIIRIX Checkpoint and Restart Operation Guide\fP
