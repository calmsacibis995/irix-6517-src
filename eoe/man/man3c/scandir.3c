'\"macro stdmacro
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)scandir.3	6.2 (Berkeley) 9/17/85
.\"
.TH SCANDIR 3C  "September 17, 1985"
.SH NAME
scandir, scandir64, alphasort, alphasort64 \- scan a directory
.SH SYNOPSIS
.nf
.ti -2
.IR SysV :
.PP
.B #include <sys/types.h>
.B #include <dirent.h>
.PP
.B "int scandir(const char \(**dirname, struct dirent \(**\(**namelist[],"
.br
.ie n \{\
.B "            int (\(**select)(struct dirent \(**),"
.B "            int (\(**compar)(struct dirent \(**\(**, struct dirent \(**\(**));" \}
.el \{\
.B "             int (\(**select)(struct dirent \(**),"
.B "             int (\(**compar)(struct dirent \(**\(**, struct dirent \(**\(**));" \}
.br
.PP
.B "int alphasort(struct dirent \(**\(**d1, struct dirent \(**\(**d2);"
.PP
.B "int scandir64(const char \(**dirname, struct dirent64 \(**\(**namelist[],"
.br
.ie n \{\
.B "            int (\(**select)(struct dirent64 \(**),"
.B "            int (\(**compar)(struct dirent64 \(**\(**, struct dirent64 \(**\(**));" \}
.el \{\
.B "             int (\(**select)(struct dirent64 \(**),"
.B "             int (\(**compar)(struct dirent64 \(**\(**, struct dirent64 \(**\(**));" \}
.br
.PP
.B "int alphasort64(struct dirent64 \(**\(**d1, struct dirent64 \(**\(**d2);"
.nf
.ti -2
.IR BSD :
.PP
.B #include <sys/types.h>
.B #include <sys/dir.h>
.PP
.B "int scandir(const char \(**dirname, struct direct \(**\(**namelist[],"
.br
.ie n \{\
.B "            int (*select)(), int (*compar)());" \}
.el \{\
.B "             int (*select)(), int (*compar)());" \}
.PP
.B "int alphasort(struct direct \(**\(**d1, struct direct \(**\(**d2);
.fi
.SH DESCRIPTION
The inclusion of
.RI < dirent.h >
selects the System V versions of these
routines.  For the 4.3\c
.SM BSD
versions, include
.RI < sys/dir.h >.
.PP
.I Scandir
reads the directory
.I dirname
and builds an array of pointers to directory
entries using
.IR malloc (3C).
It returns the number of entries in the array and a pointer to the
array through
.IR namelist .
.PP
The
.I select
parameter is a pointer to a user-supplied subroutine which is called by
.I scandir
to select which entries are to be included in the array.
The select routine is passed a
pointer to a directory entry and should return a non-zero
value if the directory entry is to be included in the array.
If
.I select
is null, then all the directory entries will be included.
.PP
The
.I compar
parameter is a pointer to a user supplied subroutine which is passed to
.IR qsort (3C)
to sort the completed array. If this pointer is null, the array is not sorted.
.I alphasort
is a routine which can be used for the
.I compar
parameter to sort the array alphabetically.
.PP
The memory allocated for the array can be deallocated with
.I free
(see
.IR malloc (3C))
by freeing each pointer in the array and the array itself.
.PP
The 
.I scandir64
and 
.I alphasort64
interfaces differ from
.I scandir
and 
.IR alphasort ,
respectively, in that they use 
.I dirent64
structures instead of 
.I dirent
structures.
.SH "SEE ALSO"
directory(3C),
malloc(3),
qsort(3C),
dirent(4)
.SH DIAGNOSTICS
Returns \-1 if the directory cannot be opened for reading or if
.IR malloc (3C)
cannot allocate enough memory to hold all the data structures.
