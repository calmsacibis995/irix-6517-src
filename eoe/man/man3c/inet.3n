'\"macro stdmacro
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)inet.3n	6.4 (Berkeley) 5/27/86
.\"
.if n .pH man3.inet @(#)inet	30.3 of 2/1/86
.TH INET 3N
.UC 5
.SH NAME
inet_aton, inet_addr, inet_network, inet_isaddr, inet_ntoa, inet_makeaddr, inet_lnaof, inet_netof \- Internet address manipulation routines
.SH SYNOPSIS
.nf
.B "#include <sys/types.h>
.B "#include <netinet/in.h>
.B "#include <arpa/inet.h>
.PP
.B "int inet_aton(const char *cp, struct in_addr *pin);"
.PP
.B "unsigned long inet_addr(const char *cp);"
.PP
.B "unsigned long inet_network(const char *cp);"
.PP
.B "int inet_isaddr(const char *cp, uint32_t *addr);"
.PP
.B "char *inet_ntoa(struct in_addr in);"
.PP
.B "struct in_addr inet_makeaddr(int net, int lna);"
.PP
.B "unsigned long inet_lnaof(struct in_addr in);"
.PP
.B "unsigned long inet_netof(struct in_addr in);"
.fi
.SH DESCRIPTION
The routines
.IR inet_aton ,
.I inet_addr
and
.I inet_network
interpret character strings representing
numbers expressed in the Internet standard \*(lq.\*(rq (dot)
notation.
The
.I inet_aton
routine interprets the specified character string as an Internet address,
placing the address into the structure provided.
It returns 1 if the string was successfully interpreted,
or 0 if the string is invalid.
The
.I inet_addr
and
.I inet_network
functions return numbers suitable for use
as Internet addresses and Internet network
numbers, respectively.
To determine if an ASCII string is a valid representation of an IPv4
address, the function
.I inet_isaddr
may be used.  It takes a pointer to the string, cp, and returns a 1 if
the address is valid, 0 otherwise.  Additionally, if the addr parameter
is non-NULL, the converted address will be stored at the address
pointed to by addr.
The routine
.I inet_ntoa
takes an Internet address and returns an ASCII
string representing the address in \*(lq.\*(rq
notation.  The routine
.I inet_makeaddr
takes an Internet network number and a local
network address and constructs an Internet address
from it.  The routines
.I inet_netof
and
.I inet_lnaof
break apart Internet host addresses, returning
the network number and local network address part,
respectively.
.PP
All Internet addresses are returned in network
order (bytes ordered from left to right).
All network numbers and local address parts are
returned as machine format integer values.
.SH "INTERNET ADDRESSES"
Values specified using the \*(lq.\*(rq notation take one
of the following forms:
.RS
.nf
a.b.c.d
a.b.c
a.b
a
.RE
.fi
When four parts are specified, each is interpreted
as a byte of data and assigned, from left to right,
to the four bytes of an Internet address.  
.PP
When a three part address is specified, the last
part is interpreted as a 16-bit quantity and placed
in the right most two bytes of the network address.
This makes the three part address format convenient
for specifying Class B network addresses as
\*(lq128.net.host\*(rq.
.PP
When a two part address is supplied, the last part
is interpreted as a 24-bit quantity and placed in
the right most three bytes of the network address.
This makes the two part address format convenient
for specifying Class A network addresses as
\*(lqnet.host\*(rq.
.PP
When only one part is given, the value is stored
directly in the network address without any byte
rearrangement.
.PP
All numbers supplied as \*(lqparts\*(rq in a \*(lq.\*(rq notation
may be decimal, octal, or hexadecimal, as specified
in the C language (i.e., a leading 0x or 0X implies
hexadecimal; otherwise, a leading 0 implies octal;
otherwise, the number is interpreted as decimal).
.SH DIAGNOSTICS
The constant \f3INADDR_NONE\fP is returned by
.I inet_addr
and
.I inet_network
for malformed requests.
.SH "SEE ALSO"
gethostbyname(3N), getnetent(3N), hosts(4), networks(4)
.SH BUGS
The value \f3INADDR_NONE\fP (0xffffffff) is a valid broadcast address, but
.I inet_addr
cannot return that value without indicating failure.
The newer
.I inet_aton
function does not share this problem.
.PP
The string returned by
.I inet_ntoa
resides in a static memory area.
Thus
.Ex
printf("%s %s\n", inet_ntoa(addr1), inet_ntoa(addr2));
.Ee
will print the same address twice.
.PP
Inet_addr should return a struct in_addr.
.PP
The problem of host byte ordering versus network byte ordering is
confusing.  
.PP
A simple way to specify Class C network addresses in a manner
similar to that for Class B and Class A is needed.
