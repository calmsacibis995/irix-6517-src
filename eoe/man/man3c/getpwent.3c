'\"macro stdmacro
.if n .pH g3c.getpwent @(#)getpwent	30.2 of 12/25/85
.nr X
.if \nX=0 .ds x} GETPWENT 3C "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} GETPWENT 3C "C Programming Language Utilities"
.if \nX=2 .ds x} GETPWENT 3C "" "\&"
.if \nX=3 .ds x} GETPWENT "" "" "\&"
.TH \*(x}
.SH NAME
getpwent, getpwent_r, getpwuid, getpwuid_r, getpwnam, getpwnam_r, setpwent, endpwent, fgetpwent, fgetpwent_r \- get password file entry
.SH SYNOPSIS
.nf
.br
.B
\#include <pwd.h>
.PP
.B "struct passwd \(**getpwent\|(void);"
.PP
.B "struct passwd \(**getpwent_r\|(struct passwd *pwent, char *buffer, size_t bufsize);"
.PP
.B "struct passwd \(**getpwuid\|(uid_t uid);"
.PP
.B "int getpwuid_r\|(uid_t uid, struct passwd *pwent, char *buffer, size_t bufsize, struct passwd **result);"
.PP
.B "struct passwd \(**getpwnam\|(const char \(**name);"
.PP
.B "int getpwnam_r\|(const char \(**name, struct passwd *pwent, char *buffer, size_t bufsize, struct passwd **result);"
.PP
.B "void setpwent\|(void);"
.PP
.B "void endpwent\|(void);"
.PP
.B "struct passwd \(**fgetpwent\|(\s-1FILE\s+1 \(**f);"
.PP
.B "struct passwd \(**fgetpwent_r\|(\s-1FILE\s+1 \(**f, struct passwd *pwent, char *buffer, size_t bufsize);"
.PP
.B "extern int _getpwent_no_yp;"
.PP
.B "extern int _getpwent_no_shadow;"
.PP
.B "extern int _pw_stayopen;"
.SH DESCRIPTION
.IR getpwent ,
.I getpwuid ,
.I getpwnam\^
and their reentrant counterparts
each return a pointer to an object with the
following structure containing the broken-out
fields of a line in the
.I /etc/passwd
file or some other back-end database.
Each line in the file
contains a ``passwd'' structure, declared in the
.I <pwd.h>\^
header file:
.RS
.PP
.nf
struct passwd {
	char	\(**pw_name;
	char	\(**pw_passwd;
	uid_t	pw_uid;
	gid_t	pw_gid;
	char	\(**pw_age;
	char	\(**pw_comment;
	char	\(**pw_gecos;
	char	\(**pw_dir;
	char	\(**pw_shell;
};
.fi
.RE
.PP
This structure is declared in
.I <pwd.h>\^
so it is not necessary to redeclare it.
.PP
The fields have meanings described in
.IR passwd (4).
.PP
.I getpwent\^
when first called returns a pointer to the first passwd structure in the file;
thereafter, it returns a pointer to the next passwd structure in the file;
so successive calls can
be used to search the entire file.
.I getpwuid\^
searches from the beginning of the file until a numerical user id matching
.I uid\^
is found and
returns a pointer to the particular structure in which it was found.
.I getpwnam\^
searches from the beginning of the
file until a login name matching
.I name\^
is found, and returns a pointer to the particular structure
in which it was found.
If an end-of-file or an error
is encountered on reading, these functions return a
.SM NULL
pointer.
.PP
The 
.I getpwnam_r
and 
.I getpwuid_r
calls are reentrant versions of the
.I getpwnam
and 
.I getpwuid
calls.  The extra arguments are pwent, buffer are used for internal
storage, bufsize is the size of buffer, and result is the struct passwd
used to return the requested information.    A good size of buffer is
BUFSIZ bytes. 
.PP
A call to
.I setpwent\^
has the effect of rewinding
the password file
to allow
repeated searches.
.I endpwent\^
may be called to
close the password file
when processing is complete.
.PP
.I fgetpwent\^
returns a pointer to the next passwd structure in the stream
.IR f ,
which matches the format of
.IR /etc/passwd .
.PP
The routines getpwent, fgetpwent, getpwnam and getpwuid all return
data from a statically allocated space which is overwritten on each
call.  Reentrant versions of these routines getpwent_r, fgetpwent_r,
getpwnam_r, and getpwuid_r are provided which will parse the result
into supplied space.  Each takes three extra arguments, a pointer to
a struct passwd structure, a pointer to a character buffer, and a
length for the buffer.
.SH NOTES
In IRIX 4.0,
there were two versions of the getpwent primitives:
the standard version in \f4libc\fP and the NIS version in \f4libsun\fP.
The routines in this release only parse files in the format given
in passwd(4).  Either the static file
.IR /etc/passwd
or a dynamic file supplied by the nsd(1M) daemon.  The nsd daemon can
supply data from any number of back-end databases or protocols as controlled
by the nsd configuration file
.IR /etc/nsswitch.conf .
To force these routines to use only the static file
set the external variable
.I _getpwent_no_yp\^
to 1.  This is only really useful
for programs that will use this information
in subsequent
.IR putpwent (3C)
calls (otherwise, the entire back-end database
will be copied to
.IR /etc/passwd ).
.I _getpwent_no_yp\^
is understood by \f2getpwent\fP, \f2getpwnam\fP, \f2getpwuid\fP and
their reentrant counterparts.
.P
For \f2getpwnam\fP and \f2getpwuid\fP only,
if the file
.I /etc/shadow
is present, and the current effective user ID is root,
the password entry will be copied out of
.I /etc/shadow
and placed in the \f2pw_passwd\fP field.
This compatibility feature permits programs expecting password information
to be in \f2/etc/passwd\fP to function properly in a shadow password
environment.
Note that the aging information from \f2/etc/shadow\fP is not made
available in \f2pw_age\fP.
For portability to other systems,
the existence of
.I /etc/shadow
should be dealt with by the program, not this interface (see
.IR getspent (3C)).
To disable this behavior (for example, to make a verbatim copy of
.I /etc/passwd
using
.IR putpwent (3C)),
set the external variable
.I _getpwent_no_shadow
to 1.
.P
To cause the password file to be left open until an explicit call to
.IR endpwent (3C),
set the external variable
.I _pw_stayopen
to 1.
.P
By default,
.IR _getpwent_no_yp ,
.IR _getpwent_no_shadow ,
and
.I _pw_stayopen
are 0.

The Mips ABI specifies nothing but local files so applications which
wish to use anything else must compile with libc prior to libnsl in the
library list.

When nsd is running changes to the local passwd file may not be noticed
by getpwent() until the enumeration cache file has timed out.
.SH FILES
/etc/passwd
/var/ns/cache/passwd.byname.m
/var/ns/cache/passwd.byuid.m
.SH "SEE ALSO"
nsd(1M), getlogin(3C), getgrent(3C), getspent(3C), passwd(4), shadow(4)
fopen(3S).
.SH DIAGNOSTICS
A
.SM
.B NULL
pointer is
returned on
.SM
.B EOF
or error.
.P
.SH BUGS
All of the functions use
.IR fopen (3S)
and are thus subject to its limitations.
.Ee
