'\"macro stdmacro
.TH GETINVENT 3 LOCAL
.SH NAME
getinvent, setinvent, endinvent, scaninvent, getinvent_r, setinvent_r, endinvent_r \- get hardware inventory entry
.SH SYNOPSIS
.B #include <invent.h>
.PP
.B "inventory_t \(**getinvent (void);"
.PP
.B "int setinvent (void);"
.PP
.B "void endinvent (void);"
.PP
.B "inventory_t \(**getinvent_r (inv_state_t \(**st);"
.PP
.B "int setinvent_r (inv_state_t \(**\(**st);"
.PP
.B "void endinvent_r (inv_state_t \(**st);"
.nf
.PP
.B "int scaninvent (int (\(**)(inventory_t \(**, void \(**), void \(**);"
.fi
.PP
.B int _keepinvent;
.PP
.SH DESCRIPTION
.I getinvent\^
returns a pointer to an object with the
following structure
containing an entry from the system hardware inventory table.
Each entry in the table
contains an ``inventory'' structure, declared in the
.I <sys/invent.h>\^
header file:
.Ex
typedef struct inventory_s {
	struct inventory_s \(**inv_next;
	int	inv_class;
	int	inv_type;
	char	inv_controller;
	char	inv_unit;
	long	inv_state;
} inventory_t;
.Ee
.PP
Each inventory entry is described by a
.I class\^
and a class-specific
.I type.
The remaining fields provide further information on the inventory entry.
See the comments in the header file for an explanation of these fields.
The
.I <invent.h>
header file includes
.IR <sys/invent.h> ,
and should be included before calling inventory functions.
.PP
.I getinvent\^
when first called returns a pointer to the first inventory structure
in the table;
thereafter, it returns a pointer to the next inventory structure in the table;
so successive calls can
be used to search the entire table.
.PP
A call to
.I setinvent\^
has the effect of rewinding the table to allow repeated searches.
It should always be called before calling
.IR getinvent .
.I endinvent\^
may be called to
free allocated storage
when processing is complete.
.PP
A reentrant version of these functions also exists.
These should be used in multi-threaded applications where
the shared data implicit in the functions described above
is inappropriate.
The reentrant version requires that a state structure \f2inv_state_t\f1
be initialized via
.I setinvent_r\^
and passed to
.I getinvent_r\^
and
.IR endinvent_r .
The first time
.I setinvent_r\^
is called, its parameter
should be the address of a pointer initialized to \f4NULL\f1.
Subsequent calls to
.I setinvent_r\^
with the initialized pointer have the effect of rewinding the table to allow
repeated searches.
This structure holds a pointer to the data and the current location
in the data, and therefore permits multiple threads to call the
functions simultaneously with no possibility of losing data.
.PP
.I scaninvent\^
applies fun to each inventory entry, passing the entry's address
and arg to fun.
If fun returns a non-zero value,
.I scaninvent\^
stops scanning and returns that value.
Otherwise
.I scaninvent\^
returns 0 after scanning all entries.
.I scaninvent\^
normally calls
.I endinvent\^
before returning.
To prevent this call, set
.I _keepinvent\^
to a non-zero value.
.SH DIAGNOSTICS
.I getinvent\^
and
.I getinvent_r\^
return a
.SM
.B NULL
pointer when they have read all entries.
.I setinvent\^
and
.I setinvent_r\^
return \-1 on failure.
.I scaninvent\^
returns \-1 if it
cannot successfully
.I setinvent\^
or
.I setinvent_r\^
before scanning.
