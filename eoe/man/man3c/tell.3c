'\"macro stdmacro
.if n .pH g3c.tell @(#)tell	8/17/95
.nr X
.if \nX=0 .ds x} TELL 3C "" "\&"
.if \nX=1 .ds x} TELL 3C ""
.if \nX=2 .ds x} TELL 3C "" "\&"
.if \nX=3 .ds x} TELL "" "" "\&"
.TH \*(x}
.SH NAME
\f4tell\fP, \f4tell64\fP \- return the read/write file pointer
.SH SYNOPSIS
.B #include <unistd.h>
.PP
.B "off_t tell (int filedes);"
.PP
.B "off64_t tell64 (int filedes);"
.SH DESCRIPTION
.I filedes\^
is a file descriptor returned from a
\f4creat\fP,
\f4open\fP,
\f4dup\fP,
\f4fcntl\fP,
\f4pipe\fP,
or
\f4ioctl\fP,
system call.
\f4tell\fP
and
\f4tell64\fP
return the file pointer associated with
.I filedes\^.
.PP
The two differ in that
\f4tell\fP
returns an off_t and
\f4tell64\fP
returns an off64_t.  The 64-bit offset returned by
\f4tell64\fP
is useful for 32 bit applications working with 64 bit files.
This is because the 32 bit offset returned by
\f4tell\fP
might not be large enough to represent the current file offset.
.PP
\f4tell(filedes)\fP
is equivalent to:
.PP
	\f4lseek(filedes, 0, SEEK_CUR)\fP.
.PP
\f4tell64(filedes)\fP
is equivalent to:
.PP
	\f4lseek64(filedes, 0, SEEK_CUR)\fP.
.PP
.SH SEE ALSO
lseek(2), lseek64(2)
.SH DIAGNOSTICS
On success, \f4tell\fP and \f4tell64\fP return the current pointer
location,
as measured in bytes from the beginning of the file.
.PP
\f4tell\fP and \f4tell64\fP
fail if one or more of the following are true:
.TP 15
\f4EBADF\fP
.I fildes\^
is not an open file descriptor.
.TP
\f4ESPIPE\fP
.I fildes\^
is associated with a pipe or fifo.

