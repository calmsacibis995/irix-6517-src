'\"macro stdmacro
.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)ndbm.3	6.6 (Berkeley) 5/20/86
.\"
.TH NDBM 3B
.UC 6
.SH NAME
ndbm: dbm_open, dbm_open64, dbm_close, dbm_close64, dbm_fetch, dbm_fetch64, dbm_store, dbm_store64, dbm_delete, dbm_delete64, dbm_firstkey, dbm_firstkey64, dbm_nextkey, dbm_nextkey64, dbm_error, dbm_error64, dbm_clearerr , dbm_clearerr64 \- data base subroutines
.SH SYNOPSIS
.nf
.PP
.ft 3
#include <ndbm.h>
.PP
.ft 3
typedef struct {
    void *dptr;
    size_t dsize;
} datum;
.PP
.B "DBM *dbm_open\|(const char *file, int flags, mode_t mode);"
.PP
.B "DBM64 *dbm_open64\|(const char *file, int flags, mode_t mode);"
.PP
.B void dbm_close\|(DBM *db);
.PP
.B void dbm_close64\|(DBM64 *db);
.PP
.B datum dbm_fetch\|(DBM *db, datum key);
.PP
.B datum dbm_fetch64\|(DBM64 *db, datum key);
.PP
.B "int dbm_store\|(DBM *db, datum key, datum content, int flags);"
.PP
.B "int dbm_store64\|(DBM64 *db, datum key, datum content, int flags);"
.PP
.B int dbm_delete\|(DBM *db, datum key);
.PP
.B int dbm_delete64\|(DBM64 *db, datum key);
.PP
.B datum dbm_firstkey\|(DBM *db);
.PP
.B datum dbm_firstkey64\|(DBM64 *db);
.PP
.B datum dbm_nextkey\|(DBM *db);
.PP
.B datum dbm_nextkey64\|(DBM64 *db);
.PP
.B int dbm_error\|(DBM *db);
.PP
.B int dbm_error64\|(DBM64 *db);
.PP
.B int dbm_clearerr\|(DBM *db);
.PP
.B int dbm_clearerr64\|(DBM64 *db);
.SH DESCRIPTION
These functions maintain key/content pairs in a data base.
The \f3ndbm\f1 functions will handle very large (a billion blocks)
databases and will access a keyed item in one or two file system accesses.
The \f3ndbm64\f1 functions are identical to the \f3ndbm\f1 routines except
that they can be used to operate on databases larger than 2 Gigabytes.
This package replaces the earlier
.IR dbm (3B)
library, which managed only a single database.
.PP
.IR Key s
and
.IR content s
are described by the
.I datum
typedef.  A
.I datum
specifies a string of
.I dsize
bytes pointed to by
.I dptr.
Arbitrary binary data, as well as normal ASCII strings, are allowed.
The data base is stored in two files.
One file is a directory containing a bit map and has `.dir' as its suffix.
The second file contains all data and has `.pag' as its suffix.
.PP
Before a database can be accessed, it must be opened by
.IR dbm_open .
This will open and/or create the files
.IB file .dir
and
.IB file .pag
depending on the flags parameter (see
.IR open (2)).
.PP
Once open, the data stored under a key is accessed by
.I dbm_fetch
and data is placed under a key by
.IR dbm_store .
The
.I flags
field can be either
.B DBM_INSERT
or
.B DBM_REPLACE.
.B DBM_INSERT
will only insert new entries into the database and will not
change an existing entry with the same key.
.B DBM_REPLACE
will replace an existing entry if it has the same key.
A key (and its associated contents) is deleted by
.IR dbm_delete .
A linear pass through all keys in a database may be made,
in an (apparently) random order, by use of
.I dbm_firstkey
and
.IR dbm_nextkey .
.I Dbm_firstkey
will return the first key in the database.
.I Dbm_nextkey
will return the next key in the database.
The following code will traverse the data base:
.Ex
for (key = dbm_firstkey(db); 
     key.dptr != NULL; 
     key = dbm_nextkey(db))
.Ee
.PP
.I Dbm_error
returns non-zero when an error has occurred reading or writing the database.
.I Dbm_clearerr
resets the error condition on the named database.
.SH DIAGNOSTICS
All functions that return an
.I int
indicate errors with negative values.  A zero return indicates ok.
Routines that return a
.I datum
indicate errors with a null (0)
.I dptr.
If
.IR dbm_store
called with a
.I flags
value of
.B DBM_INSERT
finds an existing entry with the same key
it returns 1.
.PP
Some error conditions will set
.I errno.
These are:
.B ENOMEM:
runtime memory allocation failed;
.B EPERM:
file permissions don't match the process euid/egid permissions;
.B EINVAL:
key+data sizes for
.I dbm_store
exceed the internal block size;
.B EFBIG:
hash table overflow would cause the maximum dbm file size to be exceeded.

.SH SEE ALSO
dbm(3B) and Berkeley db: dbopen(3)
.SH BUGS
The `.pag' file is designed to contain holes in files.
The EFS file system does not implement holes, so the file will
frequently be significantly larger than the actual content.
.\"The `.pag' file will contain holes so that its apparent size is about
.\"four times its actual content.  Older UNIX systems may create real
.\"file blocks for these holes when touched.  These files cannot be copied
.\"by normal means (cp, cat, tp, tar, ar) without filling in the holes.
.PP
.I Dptr
pointers returned by these subroutines point into static storage
that is changed by subsequent calls.
.PP
.I dbm
databases may not be portable across machines with different
alignment restrictions or different byte sexes.
.PP
.I Dptr
pointers returned by these subroutines point into possibly non word
aligned storage. You cannot assume that you can cast the
.I Dptr
pointer into an arbitrary data type and dereference it.
This is a general rule in ANSI-C rather than
.I dbm
specific, but users often hit it while using
.I dbm.
.PP
The sum of the sizes of a key/content pair must not exceed
the internal block size minus the
.I dbm
small book-keeping overhead
(currently: _PBLKSIZ - 6 = 1018 bytes).
Moreover all key/content pairs that hash together must fit on a single block.
For a dbm-like implementation with much less size limitations, check out
.B dbopen(3)
(Berkeley DB).
.PP
.I Dbm_store
will return an error in the event that a disk block fills with inseparable data.
.PP
.I Dbm_delete
does not physically reclaim file space,
although it does make it available for reuse.
.PP
The order of keys presented by
.I dbm_firstkey
and
.I dbm_nextkey
depends on a hashing function, not on anything interesting.
'\".so /pubs/tools/origin.bsd
