'\"macro stdmacro
.TH sem_mode 3C
.SH NAME
\f4sem_mode\fP \- set the operation mode of a POSIX unnamed semaphore
.SH C SYNOPSIS
\f4#include <semaphore.h>\f1
.sp .6v
\f4int sem_mode (sem_t *\f2sem\fP, int \f2cmd\fP[, \f2arg\fP]);\f1
.fi
.SH DESCRIPTION
\f4sem_mode\fP is used to change the operation mode of the specified
POSIX unnamed semaphore \f2sem\fP. Changing a semaphore's default
operation mode allows applications to enable two levels of debug tracing,
and apply retry spinning.
.P
Semaphore types other than POSIX unnamed semaphores are not supported
by this function.
.P
\f4sem_mode\fP is an IRIX extension to the POSIX interfaces and is not part
of the IEEE 1003.1b Standard.
.P
The operation mode is selected by setting \f2cmd\fP to one of the following:
.TP
\f4SEM_MODE_TRACEINIT\fP
Initialize statistical tracing for \f2sem\fP, passing a pointer to a
user-allocated trace structure of type \f4sem_trace_t\fP as \f2arg\fP.  When
debug or meter tracing is enabled, the collected data is stored in
the trace structure. Upon initialization, the contents of the structure
is cleared.
.sp
The trace structure must reside in memory accessable to all threads/processes
accessing \f2sem\fP, to allow them to update the traced data.  If the semaphore
is being shared across process boundarys, the trace structure must be located
at the same virtual address for all processes.
.sp
The application may access the contents of the trace structure at any time.
.sp
Note: Tracing is not supported for \f4non-shared\fP unnamed semaphores, used
by pthread applications.
.TP
\f4SEM_MODE_METERON\fP
Enable metered tracing for \f2sem\fP.  Once a trace structure for \f2sem\fP
has been initialized, metered tracing can be enabled.  Enabling this level
of tracing causes metered information to be accumulated and stored in
the following trace structure fields (as operations occur):
.P
.in +1i
\f4sem_waits\fP: number of sem_wait operations
.sp
\f4sem_waithits\fP: number of times a thread/process called \f4sem_wait\fP without
having to block
.sp
\f4sem_posts\fP: number of sem_post operations
.sp
\f4sem_posthits\fP: number of times a thread/process called \f4sem_post\fP without
having to wakeup a waiting thread/process
.sp
\f4sem_waiters\fP: number of threads/processes currently waiting on the semaphore
.sp
\f4sem_maxwaiters\fP: maximum number of threads/processes that can block on a
semaphore at any given time
.TP
\f4SEM_MODE_METEROFF\fP
Disable metered tracing for \f2sem\fP, leaving the contents of the trace
structure intact for future analysis.
.TP
\f4SEM_MODE_METERRESET\fP
Clear the metered contents of the trace structure of semaphore \f2sem\fP.
.TP
\f4SEM_MODE_DEBUGON\fP
Enable debug tracing for \f2sem\fP.  Once a trace structure for \f2sem\fP
has been initialized, debug tracing can be enabled.  Enabling this level
of tracing causes ownership and access information to be tracked and stored in
the following trace structure fields:
.P
.in +1i
\f4sem_owner_pid\fP: process ID of the semaphore's current owner
.sp
\f4sem_owner_tid\fP: pthread ID of the semaphore's current owner
.sp
\f4sem_owner_pc\fP: program counter of the semaphore owner
.sp
\f4sem_last_pid\fP: process ID of the last process to perform a semaphore
operation on \f2sem\fP
.sp
\f4sem_last_tid\fP: pthread ID of the last pthread to perform a semaphore
operation on \f2sem\fP
.sp
\f4sem_last_pc\fP: program counter of the last thread/process to 
to perform a semaphore operation on \f2sem\fP
.TP
\f4SEM_MODE_DEBUGOFF\fP
Disable debug tracing for \f2sem\fP, leaving the contents of the trace
structure intact for future analysis.
.TP
\f4SEM_MODE_DEBUGRESET\fP
Clear the debug ownership contents of the trace structure of semaphore \f2sem\fP.
.TP
\f4SEM_MODE_SPINSET\fP
Apply a retry count \f2arg\fP to hold-off blocking in \f4sem_wait\fP(3C)
when the semaphore \f2sem\fP is not immediately available.  The default POSIX
semaphore \f4sem_wait\fP algorithm attempts to acquire a semaphore once,
and blocks the caller if the semaphore isn't available.  Applying a retry
count causes \f4sem_wait\fP to retry semaphore acquisition \f2arg\fP times
(spinning) before blocking.  Retry counts remain in effect until the application
again sets the retry count to 0.
.sp
Note: This operation mode is ignored on uni-processor systems.
.P
\f4sem_mode\f1 will fail if the following is true:
.TP 12
[EINVAL]
Invalid parameter.
.SH SEE ALSO
\f4sem_init\fP(3C), \f4sem_post\fP(3C), \f4sem_wait\fP(3C), \f4sem_print\fP(3C)
.SH DIAGNOSTICS
Upon successful completion, a value of 0 is returned to the calling process. 
Otherwise, a value of -1 is returned and \f4errno\fP is set to indicate
the error.
