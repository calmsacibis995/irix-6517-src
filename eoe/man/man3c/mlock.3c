'\"macro stdmacro
.Op c p a
.TH mlock 3C
.SH NAME
\f4mlock\f1, \f4munlock\f1 \- lock or unlock pages in memory
.SH SYNOPSIS
.nf
\f4#include <sys/types.h>\f1
\f4#include <sys/mman.h>\f1
.sp .6v
\f4int mlock(const void \(**\f1\f2addr\f1\f4, size_t \f1\f2len\f1\f4);\f1
.sp .6v
\f4int munlock(const void \(**\f1\f2addr\f1\f4, size_t \f1\f2len\f1\f4);\f1
.fi
.SH DESCRIPTION
.P
\f4mlock\f1 locks the pages associated with the address range
(\f2addr, addr + len\f1) into memory.  The super-user can lock as many pages
as it wishes, other users are limited to a per process maximum
{\f2PLOCK_MAX\fP}. Locks established with \f4mlock\f1 are not inherited
by a child process after a \f4fork\f1.
.P
\f4munlock\f1 unlocks the pages associated with the address range
(\f2addr, addr + len\f1), regardless of the number of times the pages
were locked. Page locks established by other processes are unaffected,
when the pages are shared amongst multiple processes.
.P
Address \f2addr\fP is not required to be page aligned, as the
system automatically rounds the address down to the nearest page boundary.
.P
\f4mlock\f1 or \f4munlock\f1 will fail if one or more of the following are true:
.TP 12
[EAGAIN]
There was insufficient lockable memory to lock the entire
address range (\f2addr, addr + len\f1).  This may occur even
though the amount requested was less than the system-imposed 
maximum number of locked pages.
.TP
[EBUSY]
\f4munlock\fP will fail with this error if the address range
specified has some active I/O initiated by some other
process belonging to same share group.
.TP
[ENOMEM]
The addresses specified by (addr, addr + len) are not mapped into the user's
address space.
.TP
[ENOMEM]
The caller was not super-user and the number of pages to
be locked exceeded the per process limit {\f2PLOCK_MAX\fP} 
[see \f4intro\fP(2)].
.TP
[ENOMEM]
The total number of pages locked by the caller would
exceed the maximum resident size for the process [see
\f4setrlimit\fP(2)].
.TP
[ENOSPC]
The address range (\f2addr, addr + len\f1) contains a memory-mapped
file, and there is insufficient space on the device to allocate the
entire file.
.SH SEE ALSO
exec(2),
exit(2),
fork(2),
mlockall(3C),
munlockall(3C),
mmap(2),
mpin(2),
munpin(2),
plock(2)
.SH DIAGNOSTICS
Upon successful completion, the functions \f4mlock\f1 and
\f4munlock\f1 return 0, otherwise, they return \-1
and set \f4errno\f1 to indicate the error.
.SH WARNING
The functions \f4mlock/munlock\fP and \f4mpin/munpin\fP provide similar
functionality.  The major difference between the two sets is that 
\f4mpin/munpin\fP maintains a per page lock counter and \f4mlock/munlock\fP
does not. Developers should choose the set that best suites their 
application and stick with it, as mixing the interfaces may result in
unexpected behavior.


