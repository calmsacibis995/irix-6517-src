'\"macro stdmacro
.if n .pH g3C.cap_acquire
.nr X
.if \nX=0 .ds x} CAP_ACQUIRE 3C "Capabilities Library Routines" "\&"
.if \nX=1 .ds x} CAP_ACQUIRE 3C "Capabilities Library Routines"
.if \nX=2 .ds x} CAP_ACQUIRE 3C "" "\&"
.if \nX=3 .ds x} CAP_ACQUIRE "" "" "\&"
.TH \*(x}
.SH NAME
cap_acquire, cap_surrender  \- make permitted set capabilities effective or remove effective capabilities
.SH SYNOPSIS
.B #include <sys/capability.h>
.PP
.B "cap_t cap_acquire( int ncap, const cap_value_t *caps);"
.br
.B void cap_surrender( cap_t cap);
.SH DESCRIPTION
.I cap_acquire
activates the capabilities from the permitted set of the process by
making each of them active in the effective set for the process.
.PP
.I cap_surrender
sets the effective set to the capabilities specified in the \f2cap\fP argument,
and deallocates this structure.
.SH RETURN VALUES
.I cap_acquire
returns the previous effective set, or NULL if there were errors.  
NULL may also be returned if the process has no current capability set.
This return
value has been allocated by the library, and should be freed when no
longer needed, most commonly by calling \f2cap_surrender\fP to revert the
effective set to its prior value.  \f2cap_free\fP(3c) may also be called
directly to deallocate the structure.
.PP
.I cap_surrender
has no return value.
.SH ERRORS
.I cap_acquire:
.TP 16
EINVAL 
\f2caps\fP is null.
.TP 16
ENOSYS
capabilities are not enabled.
.SH SEE ALSO
cap_free(3c),
capabilities(4).
