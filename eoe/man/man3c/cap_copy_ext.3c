'\"macro stdmacro
.if n .pH g3C.cap_copy_ext
.nr X
.if \nX=0 .ds x} CAP_COPY_EXT 3C "Capabilities Library Routines" "\&"
.if \nX=1 .ds x} CAP_COPY_EXT 3C "Capabilities Library Routines"
.if \nX=2 .ds x} CAP_COPY_EXT 3C "" "\&"
.if \nX=3 .ds x} CAP_COPY_EXT "" "" "\&"
.TH \*(x}
.SH NAME
.upperok
cap_copy_ext, cap_copy_int \- copy capability from system to user space or from user to system space
.SH SYNOPSIS
.B #include <sys/capability.h>
.PP
.B "ssize_t cap_copy_ext(void *bufp, cap_t cap, ssize_t size);"
.br
.B cap_t cap_copy_int(void *bufp);
.SH DESCRIPTION
\f2cap_copy_ext\fP copies the capability from \f2*cap\fP to \f2*bufp\fP,
if the arguments are valid.  
\f2cap_copy_int\fP allocates a \f2cap_t\fP and copies the \f2cap_t\fP
pointed to by
\f2*bufp\fP into it, if the arguments are valid.  The storage should
be freed by calling \f2cap_free\fP(3c) when no longer needed.
.PP
In the
POSIX specifications, the internal form of an capability may be different from the
external form, hence the need for these functions.  In IRIX, both forms are
the same.
.SH RETURN VALUES
.I cap_copy_ext
returns \f2sizeof(cap_t)\fP in the normal case,
or -1 if \f2cap\fP is null.
.PP
.I cap_copy_int
returns an allocated \f2cap_t\fP in the normal case or \f2(cap_t)0\fP if the
arguments are invalid.
.SH ERRORS
.I cap_copy_ext:
.TP 16
EINVAL 
\f2cap\fP is null or \f2bufp\fP is null or \f2size\fP is 0 or negative.
.TP 16
ERANGE
\f2size\fP is less than \f2sizeof(cap_t)\fP
.PP
.I cap_copy_int:
.TP 16
EINVAL
\f2bufp\fP is null
.TP 16
ENOMEM
memory allocation failure
.SH SEE ALSO
capabilities(4)
