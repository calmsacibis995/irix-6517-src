'\"!  mmdoc
'\"macro stdmacro
.if n .pH g3c.SSDI @(#)SSDI	41.3 of 5/22/91
.\" Copyright 1995 Silicon Graphics, Inc .
.nr X
.if \nX=0 .ds x} SSDI 3C "C Development Set" "\&"
.if \nX=1 .ds x} SSDI 3C "C Development Set"
.if \nX=2 .ds x} SSDI 3C "" "\&"
.if \nX=3 .ds x} SSDI "" "" "\&"
.TH \*(x}
.SH NAME
\f4ssdi_get_config_and_load\f1 \- consult configuration file and load DSO corresponding to the source for a given system database
.SH SYNOPSIS
.nf
.ft 4
#include <ssdi.h>
.sp .5
int ssdi_get_config_and_load(char *dbname, struct ssdiconfiginfo *cfinfo,
	struct ssdisrcinfo *srcinfo);
.ft 1
.fi
.SH DESCRIPTION
The \f4ssdi_get_config_and_load\f1 function provides the means for
an application to load the dynamic shared object (DSO) corresponding
to a source for a given system database. A \f4database\f1 is a collection of
information related to users, groups, networks, etc. that
the operating system expects to be maintained by user-level libraries.
For example, information relating to users is encapsulated by the \f4passwd\f1
database. Each such has a definite \f4interface\f1. For example, the 
.BR getpwent(3C)
routines define the interface for the passwd database.
The information contained in a given database  may be stored in multiple
\f4sources\f1. Almost all standard databases come with sources that
are \f4compiled-in\f1 with the interface. The \f4files\f1 source for the
passwd database which maintains relevant information in files is one such.
A \f4Dynamic\f1 source for a database is one whose implementation is
not fixed at the time of compilation of interface for the database.
Thus, a dynamic source allows for custom implementations of
database repositories.
.P
The file 
.B /etc/ssdi.conf
(see \f4ssdi\f1(4)) is used to add a dynamic source for a database.
Each application can cache configuration information for a given database
using a variable of type \f4struct ssdiconfiginfo\f1,
which includes the following members:
.TP 33
\f4int  ssdi_ci_got_config\f1
If non-zero, the rest of the fields contain configuration information.
.TP
\f4char *ssdi_ci_dsrcs[_SSDI_MAXSRCS]\f1
Names of dynamic sources for the given database.
.TP
\f4char **ssdi_ci_currdsrc\f1
Next dynamic source to load. Pointer to the name in the above array.
.P
Initially, the variable used to cache configuration information should
be set to \f4_SSDI_InitConfigInfo\f1.
.P
Each dynamic source should be implemented as a DSO,
and should reside in a standard directory as defined by
\f4_SSDI_STD_SRC_DIR\f1. The DSO should export a variable
which represents a vector of functions. This vector
contains addresses of functions which implement corresponding
functionality of the database interface. The correspondence
between the vector and the routines of the database interface
is defined in a database specific header file, \f4<di_\f2{database-name}\f1\f4.h>\f1.
For example, the file \f4<di_group.h>\f1 defines the correspondence
for the \f4group\f1 database. If a source does not implement
a particular routine then the corresponding element in the vector
should be set to \f4NULL\f1.

On its very first invocation, \f4ssdi_get_config_and_load\f1 function
gathers information for the database \f4dbname\f1 from the configuration file,
and caches it in the variable pointed to by \f4cfinfo\f1.
Then, it loads (using \f2dlopen\f1(3)) the DSO corresponding to
the first source listed in the configuration.
Information concerning the loaded source is returned in \f4srcinfo\f1,
which is of type \f4struct ssdisrcinfo\f1, and has the following fields:
.TP 33
\f4char ssdi_si_name[_SSDI_MAXSRCNAME]\f1
The name of the source that was loaded.
.TP
\f4_SSDI_VOIDFUNC  *ssdi_si_funcs\f1
A pointer to the vector of routines implemented by the source;
resolved using \f2dlsym\f1(3) from the DSO corresponding to the source.
.P
On subsequent invocations (with the same arguments),
\f4ssdi_get_config_and_load\f1 loads the next source in the
cached configuration information;
\f4srcinfo\f1 is overwritten with data from this new source.
Since  \f4ssdi_get_config_and_load\f1 maintains state between
invocations in \f4cfinfo\f1, it should not be manipulated by the caller,
except for proper initialization before the first invocation.
.TE
.SH "SEE ALSO"
\f4ssdi\fP(4), \f4dlopen\fP(3), \f4dlsym\fP(3), \f4getpwent(3C), \f4getgrent(3C)
.SH DIAGNOSTICS
If a source was successfully loaded, \f4ssdi_get_config_and_load\f1 returns
zero. Otherwise, a non-zero value is returned.
.ad
