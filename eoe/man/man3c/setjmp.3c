'\"macro stdmacro
.if n .pH g3c.setjmp @(#)setjmp	@(#)setjmp	30.2     12/25/85
.nr X
.if \nX=0 .ds x} SETJMP 3C "C Programming Language Utilities" "\&"
.if \nX=1 .ds x} SETJMP 3C "C Programming Language Utilities"
.if \nX=2 .ds x} SETJMP 3C "" "\&"
.if \nX=3 .ds x} SETJMP "" "" "\&"
.TH \*(x}
.SH NAME
setjmp, longjmp, sigsetjmp, siglongjmp, _setjmp, _longjmp \- non-local gotos
.SH SYNOPSIS
.PP
.B #include <setjmp.h>
.PP
.nf
.ti -2
.IR SysV :
.B "int setjmp (jmp_buf env);"
.PP
.B "void longjmp (jmp_buf env, int val);"
.PP
.ti -2
.SM
.IR POSIX :
.B "int sigsetjmp (sigjmp_buf env, int savemask);"
.PP
.B "void siglongjmp (sigjmp_buf env, int val);"
.PP
.ti -2
.SM
.IR BSD :
.B "int setjmp (jmp_buf env);"
.PP
.B "int longjmp (jmp_buf env, int val);"
.PP
.B "int _setjmp (jmp_buf env);"
.PP
.B "int _longjmp (jmp_buf env, int val);"
.fi
.PP
To use the
.SM BSD
versions of \f2setjmp\fP and \f2longjmp\fP,
you must either
.IP 1) 3
#define
.SM \f3_BSD_SIGNALS\fP
or
.SM \f3_BSD_COMPAT\fP
before including <\f2setjmp.h\fP>,
or
.IP 2)  3
specify one of them in the compile
command or makefile:
.Ex
cc -D_BSD_SIGNALS -o prog prog.c
.Ee
.SH DESCRIPTION
.PP
These functions are useful for dealing with errors 
and interrupts encountered in
a low-level subroutine of a program.
.PP
All varieties of
.I setjmp\^
save their stack environment in
.I env\^
(whose type,
.IR jmp_buf ,
is defined in the
.I <setjmp.h>\^
header file) for later use by
all varieties of
.IR longjmp .
If the return is from a direct invocation, all
.IR setjmp s
return the value 0. If the return is from a call to any of the
.IR longjmp s,
all
.I setjmp
routines return a nonzero value.
.PP
All
.IR longjmp s
restore the environment saved by the last call of
.I setjmp
with the corresponding
.I env
argument.
After the
.I longjmp\^
is completed, program execution
continues as if the corresponding call of 
.I setjmp\^
(which must not itself have returned in the interim)
had just returned the value
.IR val\^ .
.IR longjmp s
cannot cause
.IR setjmp s
to return the value 0.  If a
.I longjmp\^
is invoked with a second argument of 0, all versions of
.I setjmp\^
will return 1.
At the time of the second return from a
.I setjmp\^,
external and static variables have values as of the time
.I longjmp\^
is called (see example).
The values of register and automatic variables are undefined.  
Register or automatic variables whose value must be relied upon 
must be declared as volatile.
.SH SYSV-POSIX-BSD DIFFERENCES
The System V
.IR setjmp / longjmp
perform identically to the 4.3BSD
.IR _setjmp / _longjmp,
i.e., they manipulate only the C stack and registers.
The 4.3BSD
.IR setjmp / longjmp
also manipulate the C stack and registers, but additionally
save and restore the process's signal mask (see
.IR sigprocmask (2),
.IR sigblock (3B),
or
.IR sigsetmask (3B)).
The
.SM POSIX
.I sigsetjmp/siglongjmp
calls may act in either manner:
the C stack and registers are always saved and
restored, but if the
.I savemask
parameter to 
.I sigsetjmp
is non-zero, the signal mask is saved,
and a bit in 
.I env
is set to indicate that it
was saved.
.I siglongjmp
checks that bit
to determine if it should restore the mask
or not.
.PP
Note that the System V 
.I longjmp
and
.SM POSIX
.I siglongjmp
return
.I void,
whereas
the 4.3BSD 
.I longjmp
and
.I _longjmp
return an integer.
.SH EXAMPLE
.RS -5
.Ex
\&#include <setjmp.h>
.sp .5v
jmp_buf env;
int i = 0;
main ()
{
    if (setjmp(env) != 0) {
	(void) printf("2nd return from setjmp: i = %d\en", i);
	exit(0);
    }
    (void) printf("1st return from setjmp: i = %d\en", i);
    i = 1;
    g();
    /\(**NOTREACHED\(**/
}
.sp
g()
{
    longjmp(env, 1);
    /\(**NOTREACHED\(**/
}
.Ee
.RE
.PP
The program's output is:
.Ex
1st return from setjmp: i = 0
2nd return from setjmp: i = 1
.Ee
.SH SEE ALSO
sigaction(2), sigprocmask(2), signal(2), sigblock(3B), sigsetmask(3B), sigvec(3B), signal(3B).
.SH WARNINGS
If
.I longjmp\^
is called even though
.I env\^
was never primed by a call to
.IR setjmp ,
or when the last such call was in a function which has since returned,
absolute chaos is guaranteed.
.PP
In multithreaded processes, if
.I longjmp
is called with an
.I env
initialized in different thread, the result is also guaranteed
to produce chaos.
Also note that the signal mask manipulated by these interfaces
is per thread.
.PP
If different versions of these jmp routines are mixed,
unpredictable signal masking may occur.
.SH BUGS
The values of the registers on the second return from the
.I setjmps
are the register values at the time of the first call to
.IR setjmp , 
not those at the time of the
.IR longjmp .
This means that variables in a given function may behave differently in the
presence of 
.IR setjmp ,
depending on whether they are register or stack
variables.
'\".so /pubs/tools/origin.att
.\"	@(#)setjmp.3c	6.2 of 10/20/83
.Ee
