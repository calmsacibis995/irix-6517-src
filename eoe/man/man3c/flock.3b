'\"macro stdmacro
.\" Copyright (c) 1983 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)flock.2	6.4 (Berkeley) 5/22/86
.\"
.TH FLOCK 3B "May 22, 1986"
.UC 5
.SH NAME
flock \- apply or remove an advisory lock on an open file
.SH SYNOPSIS
.nf
.ft 3
#include <sys/file.h>
.PP
.ft 3
int flock\|(int fd, int operation);
.fi
.SH DESCRIPTION
.I Flock
applies or removes an
.I advisory
lock on the file associated with the file descriptor
.IR fd .
A lock is applied by specifying an
.I operation
parameter that is the inclusive or of
.B \s-1LOCK_SH\s0
or
.B \s-1LOCK_EX\s0
and, possibly,
.BR \s-1LOCK_NB\s0 .
To unlock an existing lock,
.I operation
should be
.BR \s-1LOCK_UN\s0 .
.PP
Advisory locks allow cooperating processes to perform
consistent operations on files, but do not guarantee
consistency (i.e., processes may still access files
without using advisory locks, possibly resulting in
inconsistencies).
.PP
The locking mechanism allows two types of locks:
.I shared
locks and
.I exclusive
locks.
At any time multiple shared locks may be applied to a file,
but at no time are multiple exclusive, or both shared and exclusive,
locks allowed simultaneously on a file.  
.PP
A shared lock may be
.I upgraded
to an exclusive lock, and vice versa, simply by specifying
the appropriate lock type; this results in the previous
lock being released and the new lock applied (possibly
after other processes have gained and released the lock).
.PP
Requesting a lock on an object that is already locked
normally causes the caller to be blocked until the lock may be
acquired.
If
.B \s-1LOCK_NB\s0
is included in
.IR operation ,
then this will not happen; instead the call will fail and
the error
.B \s-1EWOULDBLOCK\s0
will be returned.
.SH NOTES
Locks are on files, not file descriptors.  That is, file descriptors
duplicated through
.IR dup (3C)
(but not through
.IR fork (2),
see the BUGS section below)
do not result in multiple instances of a lock, but rather multiple
references to a single lock.
Thus if any of the descriptors associated with the same file are closed,
the lock associated with the file is lost.
.\"If a process holding a lock on a file
.\"forks and the child explicitly unlocks the file, the parent will
.\"lose its lock.
.PP
Processes blocked awaiting a lock may be awakened by signals.
.PP
In C++, the function name
.I flock
collides with the structure name
.I flock
(which is declared in
.RI < sys/fcntl.h >
and included in
.RI < sys/file.h >
).
When using
.IR flock ()
in C++, one must define
.B \s-1_BSD_COMPAT\s0
before including
.I sys/file.h
.SH "RETURN VALUE"
Zero is returned if the operation was successful;
on an error a \-1 is returned and an error code is left in
the global location \f2errno\fP.
.SH ERRORS
The \f2flock\fP call fails if:
.TP 20
[EWOULDBLOCK]
The file is locked and the
.B \s-1LOCK_NB\s0
option was specified.
.TP 20
[EBADF]
The argument \f2fd\fP is an invalid descriptor.
.TP 20
[EINVAL]
The argument \f2fd\fP refers to an object other than a file.
.SH "SEE ALSO"
open(2), close(2), dup(3C), execve(2), fcntl(2), fork(2), lockf(3)
.SH BUGS
Unlike BSD, child processes created by
.IR fork (2)
do not inherit references to locks acquired by their parents through
.IR flock (3B)
calls.
This bug results from
.IR flock 's
implementation atop System V file and record locks.
