'\"macro stdmacro
.nr X
.if \nX=0 .ds x} RES_SEND_SETQHOOK 3C "" "\&"
.if \nX=1 .ds x} RES_SEND_SETQHOOK 3C "" "\&"
.if \nX=2 .ds x} RES_SEND_SETQHOOK 3C "" "\&"
.if \nX=3 .ds x} RES_SEND_SETQHOOK "" "" "\&"
.TH \*(x}
.SH NAME
res_send_setqhook, res_send_setrhook \- interface to resolver hooks
.SH SYNOPSIS
.nf
.br
.PP
.B "int res_send_setqhook(char *proc);"
.PP
.B "int res_send_setrhook(char *proc);"
.SH DESCRIPTION
.B "res_send_setqhook"
, (
.B "res_send_setrhook"
) allow for a function hook to be implemented at the
beginning (end) of the resolution query process,
res_send(3).
The hook function takes the form:
.PP
res_sendhookact proc(struct sockaddr_in **nsap, char **buf, int *buflen, char *ans, int anssiz, int *resplen)
.PP
where res_sendhookact is a typedef: (see /usr/include/resolv.h)
.PP
typedef enum { res_goahead, res_nextns, res_modified, res_done, res_error }
res_sendhookact;
.PP
The resolver library will walk through the current list of name
servers, as argument 
nsap.  buf, buflen, ans and anssiz are the four arguments found in 
.B "res_send(3)"
, and resplen
is the length of the reply message (returned by res_send.)
.SH FILES
/usr/include/resolv.h
.SH "SEE ALSO"
res_send(3), resolver(4).
