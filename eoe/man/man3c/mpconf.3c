'\"macro stdmacro
.TH mpconf 3c
.SH NAME
.Op c p a
.B mpconf
\- multiprocessing control and information
.Op
.Op f
.B mpconf
\- multiprocessing control and information
.Op
.SH SYNOPSIS
.nf
\f3#include <sys/mpconf.h>\f1
\f3#include <sys/sysinfo.h>\f1

\f3int mpconf (int cmd, ...);\f1
.Op
.SH DESCRIPTION
\f4mpconf\fP provides control/information for miscellaneous multi-processor
services.
The arguments \f2arg1\fP, \f2arg2\fP, \f2arg3\fP
are provided for command-dependent use.
.PP
As specified by \f2cmd\fP,
the following commands are available:
.PP
.TP 5
.B _MIPS_MP_NPROCESSORS
Returns the number of processors physically configured.
.TP
.B _MIPS_MP_NAPROCESSORS
Returns the number of processors that are available to schedule
unrestricted processes.
.TP
.B _MIPS_MP_ISPROCESSOR_AVAIL
The processor number given by \f2arg1\fP, interpreted as an 'int',
is checked to see if it is available and not exclusively bound by any 
process and if this is true a value of
.I one(1)
is returned.  If the processor is not available, a value of
.I zero(0)
is returned.
.TP
.B _MIPS_MP_PROCESSOR_ACCT
Returns the contents of 
.I abi_sysinfo
structure.
The information is only for the processor specified by
.IR arg1 .
.I arg2
points to a buffer which will contain the contents of the structure
.I abi_sysinfo
in the address space of the calling process and
.I arg3
specifies the maximum number of bytes to transfer.  If successful, the 
command returns the number of bytes transferred.
.TP
.B _MIPS_MP_PROCESSOR_TOTACCT
Returns the contents of the
.I abi_sysinfo
structure.
The information is summed across all processors before it is returned.
.I arg1
points to a buffer which will contain the contents of the structure
.I abi_sysinfo
and
.I arg2
specifies the maximum number of bytes to transfer.  If successful, the 
command returns the number of bytes transferred.
.TP
.B _MIPS_MP_PROCESSOR_PID
If the process number specified in \f2arg1\fP, interpreted as 'pid_t', is 
bound to a processor, then \f2one(1)\fP is returned and the integer pointer 
in \f2arg2\fP, interpreted as 'int *', is used to store the processor number
to which the process is bound.  There is no indication whether the binding
in effect is exclusive or non-exclusive.  The command returns \f2zero(0)\fP
if the process is not bound.  If \f2arg1\fP contains an invalid process 
number, then a \f2-1\fP is returned and \f2errno\fP is set to reflect the 
error.
.TP
.B _MIPS_MP_PROCESSOR_BIND
Bind a process number pointed to \f2arg2\fP, interpreted as 'pid_t *', to the
processor number in \f2arg1\fP, interpreted as 'int'.  The process is 
restricted to run only on this processor.  The processor may continue to run 
other processes.  Note that the process may still run on other processors, 
briefly, to perform I/O or other hardware-specific actions.
.sp
If a previous binding was in effect for the process number pointed to by 
\f2arg2\fP, and the binding was not exclusive, then new binding replaces the 
previous one.  If the previous binding was exclusive, the command fails.
.sp
If a previous exclusive binding is in effect for this processor, it is 
unavailable to be reserved, and the command fails.  The command returns a
\f2zero(0)\fP when successful.
.TP
.B _MIPS_MP_PROCESSOR_UNBIND
Unbind a process number pointed to by \f2arg1\fP, interpreted as 'pid_t *',
making it free to run on any processor.  _MIPS_MP_PROCESSOR_UNBIND cannot 
unbind exclusively bound processes.  _MIPS_MP_PROCESSOR_EXUNBIND should be
used for this purpose.
.TP
.B _MIPS_MP_PROCESSOR_EXBIND
Exclusively bind a process number pointed to by \f2arg2\fP, interpreted 
as 'pid_t *', to the processor number specified by \f2arg1\fP, interpreted 
as 'int'.  The process is restricted to run only on this processor.  The 
processor may still run on other processors, briefly, to perform I/O or other
hardware-specific actions.  The specified processor is restricted to run 
only those processes that are either exclusively bound to it, or for which 
it must provide service due to hardware necessity, for as long as the 
exclusive binding is in effect.  This command requires superuser authority.
.sp
If a previous binding was in effect for pid, the new binding replaces the 
previous one.
.sp
If a previous non-exclusive binding for a process other than the process
number pointed to by \f2arg2\fP is in effect for this processor, it is
unavailable to be reserved, and the command fails.
.sp
The command returns \f2zero()\fP when successful.
.PP
.in-0.5i
Possible errors from
\f4mpconf\fP are:
.TP 6
[EPERM]
The effective user
ID
is not superuser.
Many of the commands require superuser privilege.
.TP
[EPERM]
The user
ID
of the sending process
is not super-user, and its real or effective user
ID
does not match the real, saved,  or effective user
ID
of the receiving process.
.TP
[ESRCH]
No process corresponding to that specified by a \f4MP_MUSTRUN_PID\fP,
\f4MP_GETMUSTRUN_PID\fP, or \f4MP_RUNANYWHERE_PID\fP
could be found.
.TP
[EEXIST]
An attempt was made to create a new processor set, but the set already
exists in the system.
.TP
[EINVAL]
The processor set named
by a \f4MP_PSET\fP command does not exist.
.TP
[EINVAL]
The bit vector given for the \f4MPPS_CREATE\fP subcommand of the
\f4MP_PSET\fP command conflicts with a reserved value.
.TP
[EBUSY]
An attempt was made to delete a processor set, but the set is currently in
use by the system.
.TP
[EINVAL]
The processor named
by a \f4MP_EMPOWER\fP, \f4MP_RESTRICT\fP, \f4MP_PSET\fP,
\f4MP_CLOCK\fP or \f4MP_SAGET1\fP command does not exist.
.TP
[EINVAL]
The
.I cmd
argument is invalid.
.TP
[EINVAL]
The
.I arg1
argument to a \f4MP_KERNADDR\fP
command is invalid.
.TP
[EINVAL]
An attempt was made via \f4MP_MUSTRUN\fP or
\f4MP_MUSTRUN_PID\fP to move a process owning a
CC sync register from the cpu controlling the CC sync register.
.TP
[EINVAL]
The target of the \f4MP_GETMUSTRUN\fP command has not been set
to run on a specific processor.
.TP
[EBUSY]
An attempt was made to restrict the only unrestricted processor
or to restrict the master processor.
.TP
[EFAULT]
An invalid buffer address has been supplied by the
calling process.
.TP
[ENOMEM]
Unable to obtain enough dynamic memory.
.SH "SEE ALSO"
\f4sysmp\fP(2)
.SH "DIAGNOSTICS"
Upon successful completion,
the
.I cmd
dependent data is returned.
Otherwise, a value of \-1 is returned and
.I errno
is set to indicate the error.
