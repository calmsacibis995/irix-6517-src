'\"macro stdmacro
.TH OSERROR 3C  LOCAL
.SH NAME
oserror, setoserror, goserror \- get/set system error
.Op c p a
.SH C SYNOPSIS
.B #include <errno.h>
.br
.PP
.B int oserror(void);
.PP
.br
.B int setoserror(const int err);
.PP
.br
.B int goserror(void);
.fi
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B integer*4 function oserror()
.PP
.br
.B integer*4 function setoserror(err)
.br
.B integer*4 err;
.Op
.SH DESCRIPTION
Most system calls and many system library functions set a global
error value \f2errno\fP when they encounter an error.
For single threaded applications a global is sufficient.
For multi-threaded applications a global error value loses much
of its meaning, since multiple threads may be updating the same value
at the same time.
When a process turns multi-threaded (by calling \f4sproc\fP(2)) a
per-thread location to store the error value is created.
\f4sproc\fP(2) and \f4intro\fP(2) have more information on error handling.
.PP
These routines provide access to the error values.
\f4oserror\fP
returns the value in the global error location for single threaded applications
and returns the value in the per-thread error location for multi-threaded
applications.
This is equivalent to compiling the application with the feature test
macro \f4_SGI_MP_SOURCE\fP defined and simply referencing \f2errno\fP.
.PP
\f4setoserror\fP sets both the global error location and the per-thread
error location for the calling thread.
This is primarily used by library routines.
.PP
\f4goserror\fP always returns the value in the global error location.
.PP
Possible errors are listed in
.I errno.h.
.SH RETURN VALUE
\f4oserror\fP, \f4goserror\fP, and \f4setoserror\fP
return the current system error.
.SH "SEE ALSO"
intro(2), sproc(2), perror(3C).
