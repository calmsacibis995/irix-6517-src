'\"macro stdmacro
.Op c p a
.TH mlockall 3C
.SH NAME
\f4mlockall\fP, \f4munlockall\fP \- lock or unlock address space
.SH SYNOPSIS
.nf
\f4#include <sys/mman.h>\f1
.sp .6v
\f4int mlockall(int \f1\f2flags\f1\f4);\f1
.sp .6v
\f4int munlockall(void);\f1
.fi
.SH DESCRIPTION
.P
\f4mlockall\f1 locks all pages mapped in the address space of the calling
process into memory, including: text, data, stack and mmaped regions.
Locked pages are immune to all routine swapping.
.P
The value of \f2flags\f1 determines whether the pages to be locked are
those currently mapped by the address space, those that will be mapped in the
future, or both:
.PP
.IP "" 10n
\f4MCL_CURRENT\f1	Lock current mappings
.IP "" 10n
\f4MCL_FUTURE\f1	Lock future mappings
.PP
\f4munlockall\f1 unlocks all memory mapped pages in the address space of the
calling process, regardless of the number of times the pages were locked.
Automatic memory locking of future memory mappings is disabled for the process.
.P
Locks established with \f4mlockall\f1 are not inherited by a child process
after a \f4fork\f1.
.P
If the address space contains autogrow regions [see \f4mmap\fP(2)],
\f4mlockall\fP will only cause the pages through the current end of file
to be locked down.
.P
In the event automatic memory locking of future mappings is enabled for
a process (\f4MCL_FUTURE\fP), and the locked memory of that process exceeds
either the system's physical memory or the per process limit {\f2PLOCK_MAX\fP},
the process will receive a \f4SIGSEGV\fP with a signal code of \f4ENOMEM\fP
[see \f4sigaction\fP(2) and \f4signal\fP(5)].
.P
\f4mlockall\f1 or \f4munlockall\f1 will fail if one or more of the following
are true:
.TP 12
[EAGAIN]
There was insufficient lockable memory to lock the entire
address space.  This may occur even though the amount requested was
less than the system-imposed maximum number of locked pages.
.TP
[EBUSY]
\f4munlockall\fP will fail with this error if a region of the address space
has some active I/O initiated by some other process belonging to same share
group.
.TP
[EINVAL]
The \f2flags\fP argument is zero or contains invalid flags.
.TP
[ENOMEM]
The caller was not super-user and the number of pages to
be locked exceeded the per process limit {\f2PLOCK_MAX\fP} 
[see \f4intro\fP(2)].
.TP
[ENOMEM]
The total number of pages locked by the caller would
exceed the maximum resident size for the process [see
\f4setrlimit\fP(2)].
.TP
[ENOSPC]
The address space of the calling process contains a memory-mapped
file, and there is insufficient space on the device to allocate the
entire file.
.SH SEE ALSO
exec(2),
exit(2),
fork(2),
mmap(2),
mlock(3C),
munlock(3C),
mpin(2),
munpin(2),
plock(2),
sigaction(2),
sysconf(3C)
.SH DIAGNOSTICS
Upon successful completion, the functions \f4mlockall\f1 and
\f4munlockall\f1 return 0, otherwise, they return
\-1 and set \f4errno\f1 to indicate the error.
.SH WARNING
The \f4mlockall/munlockall\fP pair and the \f4plock\fP function provide similar
functionality. Developers should choose the set that best suites their
application and stick with it, as mixing the interfaces may result in
unexpected behavior.
