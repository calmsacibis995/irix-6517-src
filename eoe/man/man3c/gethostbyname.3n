.\" Copyright (c) 1983,1987 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)gethostbyname.3	6.9 (Berkeley) 4/5/88
.\"
.TH gethostbyname 3N "March 5, 1996"
.SH NAME
gethostbyname, gethostbyname_r, gethostbyaddr, gethostbyaddr_r, gethostent, gethostent_r, fgethostent, fgethostent_r, sethostent, endhostent, herror, hstrerror \- get network host entry
.SH SYNOPSIS
.nf
\f3#include <sys/types.h>\f1
\f3#include <sys/socket.h>\f1
\f3#include <netinet/in.h>\f1
\f3#include <netdb.h>\f1
.sp .8v
\f3extern int h_errno;\f1
.sp .8v
\f3struct hostent *gethostbyname(const char *name);\f1
.sp .8v
\f3struct hostent *gethostbyname_r(const char *name, struct hostent *hent, char *buffer, int bufsize, int *h_errnop);\f1
.sp .8v
\f3struct hostent *gethostbyaddr(const void *addr, size_t addrlen, int type);\f1
.sp .8v
\f3struct hostent *gethostbyaddr_r(const void *addr, size_t addrlen, int type, struct hostent *hent, char *buffer, int bufsize, int *h_errnop);\f1
.sp .8v
\f3struct hostent *gethostent(void);\f1
.sp .8v
\f3struct hostent *gethostent_r(struct hostent *hent, char buffer, int bufsize);\f1
.sp .8v
\f3struct hostent *fgethostent(FILE *f);\f1
.sp .8v
\f3struct hostent *fgethostent_r(FILE *f, struct hostent *hent, char buffer, int bufsize);\f1
.sp .8v
\f3void sethostent(int stayopen);\f1
.sp .8v
\f3void endhostent(void);\f1
.sp .8v
\f3void herror(const char *string);\f1
.sp .8v
\f3char *hstrerror(int err);\f1
.fi
.SH DESCRIPTION
.I gethostbyname,
.I gethostbyaddr
and their reentrant counterpoints each return a pointer to a
.I hostent
data structure describing an Internet host
referenced by name or by address, respectively.
This structure contains either the information obtained
from broken-out fields from a line in
.IR /etc/hosts .
or some other back-end hosts database.
.Ex
struct	hostent {
	char	*h_name;		/* official name of host */
	char	**h_aliases;	/* alias list */
	int	h_addrtype;	/* host address type */
	int	h_length;		/* length of address */
	char	**h_addr_list;	/* list of addresses from name server */
};
#define	h_addr  h_addr_list[0]	/* address, for backward
							   compatibility */
.Ee
The members of this structure are:
.TP 14
h_name
Official name of the host.
.TP
h_aliases
A zero terminated array of alternate names for the host.
.TP
h_addrtype
The type of address being returned; currently always AF_INET.
.TP
h_length
The length, in bytes, of the address.
.TP
h_addr_list
A zero terminated array of network addresses for the host.
Host addresses are returned in network byte order.
.TP
h_addr
The first address in h_addr_list; this is for backward compatibility.
.PP
The
.I name
argument to
.I gethostbyname
is a character string containing an Internet hostname or
an Internet address in standard dot notation (see
.IR inet (3N)).
If the name contains no dot, and if the environment variable HOSTALIASES
contains the name of an alias file, the alias file is first searched
for an alias matching the input name.
See
.IR hostname (5)
for the alias file format.
The
.I addr
argument to
.I gethostbyaddr
points to a buffer containing a 32-bit Internet host address in
network byte order.
.I addrlen
contains the address length in bytes;
it should be set to sizeof(struct in_addr).
.I type
specifies the address family and should be set to AF_INET.
.PP
The
.I gethostbyname
and
.I gethostbyaddr
routines only parse
.I /etc/hosts
format configuration files.  An external data supplier nsd(1M) may be used
to provide data from another source such as the Domain Name Service daemon
named, or the NIS databases.
.LP
An administrator may specify a default orderring of the services in the
nsd configuration file
.IR /etc/nsswitch.conf .
.PP
When using the Domain Name Server,
.I gethostbyname
searches for the named host in the current domain and its parents
unless the name ends in a dot.
See
.IR hostname (5)
for the domain search procedure.
Also when using the name server,
.I gethostbyname
restricts the length of each subdomain name in a hostname
to at most 63 characters.
.PP
When nsd is running,
.I gethostent
obtains the next entry in the
.I hosts.byaddr
table.
.I sethostent
and
.I endhostent
reset the pointer into the map to the beginning.
.PP
If nsd is not running,
.I gethostent
reads the next line of
.IR /etc/hosts ,
opening the file if necessary.
.I sethostent
opens and rewinds the file.
If the
.I stayopen
flag is non-zero,
the file is not closed after each call to
.IR gethostbyname or gethostbyaddr .
.I endhostent
closes the file.
.PP
The routines fgethostent and fgethostent_r will return the next line from
the supplied file broken out into a hostent structure.  This file must be
of the same format as
.I /etc/hosts .
.PP
The routines gethostbyname, gethostbyaddr, gethostent, and fgethostent all
return pointers to data in a static space.  Reentrant versions of each of
these are supplied as gethostbyname_r, gethostbyaddr_r, gethostent_r and
fgethostent_r.  These routines parse the results into passed in space.
They each have extra arguments for an address to a struct hostent structure
and a flat buffer.
.SH DIAGNOSTICS
Error return status from
.I gethostbyname
and
.I gethostbyaddr
is indicated by return of a null (0) pointer.
The global integer
.I h_errno
can then be checked to see whether this is a temporary failure
or an invalid or unknown host.
The routine
.I herror
can be used to print an error message to file descriptor 2
(standard error) describing the failure.
If its argument
.I string
is non-NULL, it is printed, followed by a colon and a space.
The error message is printed with a trailing newline.
To simplify variant formatting of messages, \f2hstrerror\fP takes an error
number (typically \f2h_errno\fP) and returns the corresponding message string.
.PP
.I h_errno
can have the following values:
.IP HOST_NOT_FOUND 16
No such host is known.
.IP TRY_AGAIN 16
This is usually a temporary error
and means that the local server did not receive
a response from an authoritative server.
A retry at some later time may succeed.
.IP NO_RECOVERY 16
Some unexpected server failure was encountered.
This is a non-recoverable error.
.IP NO_DATA 16
The requested name is valid but does not have an IP address;
this is not a temporary error.
This means that the name is known to the name server but there is no address
associated with this name.
Another type of request to the name server using this domain name
results in an answer;
for example, a mail-forwarder can be registered for this domain.
.SH NOTE
The Mips ABI specifies nothing but local files so
applications which wish to use anything else must compile
with libc prior to libnsl in the library list.

When nsd is running changes to the local host file may not be noticed by
gethostent() until the enumeration cache file has timed out.
.SH FILES
.ta \w'/etc/resolv.conf\ \ \ \ \ 'u	
/etc/hosts
/etc/nsswitch.conf
.br
/etc/resolv.conf	contains addresses of remote name servers
.SH ENVIRONMENT
.PD 0
.TP 16
HOSTALIASES
contains hostname aliases
.TP
.PD
.SH "SEE ALSO"
named(1M),
nsd(1N),
gethostent(3N),
resolver(3N),
hosts(4),
resolver(4),
hostname(5).
.PP
\f2IRIX Network Programming Guide\f1
.PP
\f2IRIX Admin: Networking and Mail\f1
.PP
.SH BUGS
Only the Internet
address format is currently understood.
