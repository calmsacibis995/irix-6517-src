'\"macro stdmacro
.if n .pH g3c.frexp @(#)frexp	40.14 of 5/22/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} frexp 3C "C Development Set" "\&"
.if \nX=1 .ds x} frexp 3C "C Development Set"
.if \nX=2 .ds x} frexp 3C "" "\&"
.if \nX=3 .ds x} frexp "" "" "\&"
.TH \*(x}
.SH NAME
\f4frexp\f1, \f4ldexp\f1, \f4logb\f1, \f4ilogb\f1, \f4modf\f1, \f4modff\f1, \f4nextafter\f1, \f4scalb\f1, \f4frexpl\f1, \f4ldexpl\f1, \f4logbl\f1, \f4modfl\f1, \f4nextafterl\f1, \f4scalbl\f1 \- manipulate parts of floating-point numbers (libc routines)
.SH SYNOPSIS
.nf
\f4#include <math.h>\f1
.PP
\f4double frexp (double value, int \(**eptr);\f1
.PP
\f4double ldexp (double value, int exp);\f1
.PP
\f4double logb (double value);\f1
.PP
\f4int ilogb (double value);\f1
.PP
\f4double nextafter (double value1, double value2);\f1
.PP
\f4double scalb (double value, double exp);\f1
.PP
\f4double modf (double value, double \(**iptr);\f1
.PP
\f4float modff (float value, float \(**iptr);\f1
.PP
\f4long double frexpl (long double value, int \(**eptr);\f1
.PP
\f4long double ldexpl (long double value, int exp);\f1
.PP
\f4long double logbl (long double value);\f1
.PP
\f4long double nextafterl (long double value1, long double value2);\f1
.PP
\f4long double scalbl (long double value, long double exp);\f1
.PP
\f4long double modfl (long double value, long double \(**iptr);\f1
.SH DESCRIPTION
(Note that the long double routines are only valid for the MIPSpro
compilers.)
Long double functions have been renamed to be compliant with
the ANSI-C standard, however to be backward compatible, they
may still be called with the double precision function name
prefixed with a q.
.PP
Every non-zero number can be written uniquely as
.IR x\| "\(**2\(**\(**" \u\s-2n\s+2\d ,
where the ``mantissa'' (fraction)
.I x\^
is in the range
.RI "0.5 \(<= |" \|x\| "| < 1.0,"
and the ``exponent''
.I n\^
is an integer.
\f4frexp\fP
returns the mantissa of a double 
.IR value ,
and stores the exponent
indirectly in the location pointed to by 
.IR eptr .
If
.I value\^
is zero,
both results returned by
\f4frexp\fP
are zero.
.PP
\f4frexpl\fP
returns the mantissa of a long double 
.IR value ,
and stores the exponent
indirectly in the location pointed to by 
.IR eptr .
If
.I value\^
is zero,
both results returned by
\f4frexpl\fP
are zero.
.PP
\f4ldexp\fP
and
\f4scalb\fP
return the quantity
.IR value\| "\(**2\(**\(**" \u\s-2exp\s+2\d .
The only difference between the two is that
\f4scalb\fP
of a signaling NaN will result in the invalid operation
exception being raised.  Users should note that routine
scalb in libm43 with prototype
.PP
\f4double scalb (double value, int exp)\f1
.PP
conflicts with the above definition of scalb.
If it is necessary to call the libc version of scalb
in this situation, the strong name _scalb should be 
used.
.PP
\f4ldexpl\fP
and
\f4scalbl\fP
return the quantity
.IR value\| "\(**2\(**\(**" \u\s-2exp\s+2\d .
The only difference between the two is that
\f4scalbl\fP
of a signaling NaN will result in the invalid operation
exception being raised.
.PP
\f4logb\fP
returns the unbiased exponent of its floating-point argument as
a double-precision floating-point value.
.PP
\f4ilogb\fP
returns the unbiased exponent of its floating-point argument as
an integer value.  The call \f4ilogb(x)\fP is equivalent to 
\f4(int)logb(x)\fP.
.PP
\f4logbl\fP
returns the unbiased exponent of its floating-point argument as
a long double-precision floating-point value.
.PP
\f4modf\fP ,
\f4modff\fP
(single-precision version)
and
\f4modfl\fP
(long double-precision version)
return the signed fractional part of
.I value\^
and store the integral part indirectly
in the location pointed to by 
.IR iptr .
.PP
\f4nextafter\fP
returns the next representable double-precision floating-point 
value following 
.IR value1
in the direction of
.IR value2.
Thus, if 
.I value2\^
is less than 
\f2value1\fP,
\%\f4nextafter\fP
returns the largest representable floating-point number
less than 
.IR value1.
.PP
\f4nextafterl\fP
returns the next representable long double-precision floating-point 
value following 
.IR value1
in the direction of
.IR value2.
.SH "SEE ALSO"
\f4cc\f1(1), \f4intro\f1(3M).
.SH DIAGNOSTICS
If
\f4ldexp\fP
or
\f4ldexpl\fP
would cause overflow,
\f4\(+-HUGE_VAL\f1
(defined in 
\f4math.h\f1) is returned
(according to the sign of
.IR value ),
and
\f4errno\f1
is set to
\f4ERANGE\*S\f1.
If
\f4ldexp\fP
or
\f4ldexpl\fP
would cause underflow,
zero
is returned
and
\f4errno\f1
is set to
\f4ERANGE\*S\f1.
If the input
.I value\^
to
\f4ldexp\fP
or
\f4ldexpl\fP
is NaN, the default quiet NaN is returned and 
\f4errno\f1
is set to
\f4EDOM\*S\f1.
If the input
.I value\^
to
\f4ldexp\fP
or
\f4ldexpl\fP
is Infinity, Infinity is returned and
\f4errno\f1
is set to
\f4ERANGE\*S\f1.
The same error conditions
apply to
\f4scalb\fP
and
\f4scalbl\fP
except that a signaling NaN as
input will result in the raising of the invalid operation
exception.
.PP
\f4logb\fP
and
\f4logbl\fP
of NaN returns that NaN, 
\f4logb\fP
and
\f4logbl\fP
of infinity return positive infinity, and
\f4logb\fP
and
\f4logbl\fP
of zero return negative infinity and result in the raising of the
divide by zero exception.  In each of these conditions
\f4errno\f1
is set to 
\f4EDOM\*S\f1.
.PP
\f4ilogb\fP
of NaN or zero returns \f2INT_MIN\fP,
\f4ilogb\fP
of +infinity or -infinity returns \f2INT_MAX\fP.  In each of these 
conditions \f4errno\f1 is \f2not\fP set.
.PP
If input
.I value1\^
to 
\f4nextafter\fP
or
\f4nextafterl\fP
is positive or negative infinity, that input is returned
and 
\f4errno\f1
is set to 
\f4EDOM\*S\f1.
The overflow and inexact exceptions are signalled when input
.I value1\^
is finite, but
\f4nextafter(\f2value1\fP, \f2value2\fP)\f1
or
\f4nextafterl(\f2value1\fP, \f2value2\fP)\f1
is not. 
The underflow
and inexact exceptions are signalled
when
\f4nextafter(\f2value1\fP, \f2value2\fP)\f1
lies strictly between
\(+-\|2\u\s-2**-1022\s+2\d
or
\f4nextafterl(\f2value1\fP, \f2value2\fP)\f1
lies strictly between
\(+-\|2\u\s-2**-916\s+2\d.
In these cases 
\f4errno\f1
is also set to
\f4ERANGE\*S\f1.
.\"	@(#)frexp.3c	6.2 of 10/20/83
.Ee
