'\"macro stdmacro
.if n .pH g3C.acl_get_file
.nr X
.if \nX=0 .ds x} ACL_GET_FILE 3C "POSIX ACL Support" "\&"
.if \nX=1 .ds x} ACL_GET_FILE 3C "POSIX ACL Support"
.if \nX=2 .ds x} ACL_GET_FILE 3C "" "\&"
.if \nX=3 .ds x} ACL_GET_FILE "" "" "\&"
.TH \*(x}
.SH NAME
.upperok
acl_get_file, acl_set_file  \- get or set the ACL for a pathname
.SH SYNOPSIS
.B #include <sys/acl.h>
.PP
.B struct acl * acl_get_file(const char *path, acl_type_t type);
.br
.B "int acl_set_file(const char *path, acl_type_t type, struct acl *aclp);"
.SH DESCRIPTION
.I acl_get_file
returns a pointer to an allocated \f2struct acl\fP associated with the
pathname pointed to by \f2path\fP.  \f2type\fP determines whether the
default ACL (\f2type == ACL_TYPE_DEFAULT\fP) or access ACL (\f2type == ACL_TYPE_ACCESS\fP) is returned.  The default ACL is available only for directories.
If there is no default ACL associated with the specified directory, an
ACL containing zero entries is returned.
If
.B _POSIX_MAC
is in effect, then the process must have MAC read access to the object.
.PP
.I acl_set_file
sets the ACL of the specified pathname.  \f2type\fP indicates which ACL, 
default or access, is to be set.  Only directories can have a default ACL.
If \f2type\fP is not valid, the call fails.
The ACL is first checked for validity by
\f2acl_valid\fP(3c).
The effective UID of the process must match the owner of the object
or the process must have appropriate privilege to set the access ACL
or the default ACL on
\f2path\fP.
If
.B _POSIX_CAP
is in effect, then the appropriate capability must include CAP_FOWNER.
In addition, if
.B _POSIX_MAC
is in effect, then the process must have MAC write access to the object.
.SH RETURN VALUES
.I acl_get_file
a pointer to an allocated \f2struct acl\fP if successful, NULL otherwise.
The storage should be freed with a call to \f2acl_free\fP with the returned
pointer as an argument when it is no longer needed.
.PP
.I acl_set_file
returns 0 if successful, -1 otherwise.
.SH ERRORS
.I acl_get_file:
.TP 16
EACCESS
Search permission is denied for a component
of the path prefix or the object exists and the process does not have
appropriate access rights.
.TP 16
EINVAL
\f2type\fP is not valid
.TP 16
ENAMETOLONG
The pathname or one of its components is too long.
.TP 16
ENOENT
The named object does not exist or \f2path\fP points to an empty string.
.TP 16
ENOMEM
allocation of the \f2struct acl\fP failed.
.TP 16
ENOSYS
ACL support is not available (not installed).
.TP 16
ENOTDIR
A component of the path prefix is not a directory.
.PP
.I acl_set_file:
.TP 16
EACCESS
Search permission is denied for a component
of the path prefix or the object exists and the process does not have
appropriate access rights.
.TP 16
EINVAL
\f2aclp\fP points to an invalid ACL.
\f2type\fP is not either ACL_TYPE_ACCESS, or ACL_TYPE_DEFAULT.
The ACL is too large (too many entries).
.TP 16
ENAMETOLONG
The pathname or one of its components is too long.
.TP 16
ENOENT
The named object does not exist or \f2path\fP points to an empty string.
.TP 16
ENOSPC
The file system is full or some other resource needed for the ACL storage
is not available.
.TP 16
ENOSYS
ACL support is not available (not installed).
.TP 16
ENOTDIR
A component of the path prefix is not a directory.
.TP 16
EPERM
The process does not have appropriate privilege to
perform the operation to set the ACL.
.TP 16
EROFS
This function requires modification of a file system which is currently
read-only.
.SH SEE ALSO
acl(4)
