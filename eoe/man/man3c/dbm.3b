'\"macro stdmacro
.\" Copyright (c) 1980 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)dbm.3x	6.3 (Berkeley) 5/12/86
.\"
.TH DBM 3B
.UC 4
.SH NAME
dbm: dbminit, dbminit64, dbmclose, dbmclose64, fetch, fetch64, store, store64, delete, delete64, firstkey, firstkey64, nextkey, nextkey64 \- data base subroutines
.SH SYNOPSIS
.nf
.PP
.B "#include <dbm.h>"
.PP
.B typedef struct {
.B "	char *dptr;"
.B "	int dsize;"
.B } datum;
.PP
.B int dbminit\|(const char *file);
.PP
.B int dbminit64\|(const char *file);
.PP
.B void dbmclose\|(void);
.PP
.B void dbmclose64\|(void);
.PP
.B datum fetch\|(datum key);
.PP
.B datum fetch64\|(datum key);
.PP
.B int store\|(datum key, datum content);
.PP
.B int store64\|(datum key, datum content);
.PP
.B int delete\|(datum key);
.PP
.B int delete64\|(datum key);
.PP
.B datum firstkey\|(void);
.PP
.B datum firstkey64\|(void);
.PP
.B datum nextkey\|(datum key);
.PP
.B datum nextkey64\|(datum key);
.SH DESCRIPTION
.ft 3
Note: the dbm library has been superceded by ndbm(3B),
and is now implemented using ndbm.
.ft 1
These functions maintain key/content pairs in a data base.
The \f3dbm\f1 functions will handle very large (a billion blocks)
databases and will access a keyed item in one or two file system accesses.
The \f3dbm64\f1 routines are identical to their \f3dbm\f1 counterparts except that
they can be used to operate on data bases larger than 2 Gigabytes.
.PP
.IR Key s
and
.IR content s
are described by the
.I datum
typedef.  A
.I datum
specifies a string of
.I dsize
bytes pointed to by
.I dptr.
Arbitrary binary data, as well as normal ASCII strings, are allowed.
The data base is stored in two files.
One file is a directory containing a bit map and has `.dir' as its suffix.
The second file contains all data and has `.pag' as its suffix.
.PP
Before a database can be accessed, it must be opened by
.IR dbminit .
At the time of this call, the files
.IB file .dir
and
.IB file .pag
must exist.
(An empty database is created by creating zero-length
`.dir' and `.pag' files.)
.PP
Once open, the data stored under a key is accessed by
.I fetch
and data is placed under a key by
.IR store .
A key (and its associated contents) is deleted by
.IR delete .
A linear pass through all keys in a database may be made,
in an (apparently) random order, by use of
.I firstkey
and
.IR nextkey .
.I Firstkey
will return the first key in the database.  With any key
.I nextkey
will return the next key in the database.
The following code will traverse the data base:
.Ex
for (key = firstkey(); key.dptr != NULL; key = nextkey(key))
.Ee
.SH DIAGNOSTICS
All functions that return an
.I int
indicate errors with negative values.  A zero return indicates ok.
Routines that return a
.I datum
indicate errors with a null (0)
.I dptr.
.PP
Some error conditions will set
.I errno.
These are:
.B ENOMEM:
runtime memory allocation failed;
.B EPERM:
file permissions don't match the process euid/egid permissions;
.B EINVAL:
key+data sizes for
.I dbm_store
exceed the internal block size;
.B EFBIG:
hash table overflow would cause the maximum dbm file size to be exceeded.

.SH SEE ALSO
ndbm(3B) and Berkeley db: dbopen(3)
.SH BUGS
.\"The `.pag' file will contain holes so that its apparent size is about
.\"four times its actual content.  Older UNIX systems may create real
.\"file blocks for these holes when touched.  These files cannot be copied
.\"by normal means (cp, cat, tp, tar, ar) without filling in the holes.
.\".PP
.I Dptr
pointers returned by these subroutines point into static storage
that is changed by subsequent calls.
.PP
.I dbm
databases may not be portable across machines with different
alignment restrictions or different byte sexes.
.PP
.I Dptr
pointers returned by these subroutines point into possibly non word
aligned storage. You cannot assume that you can cast the
.I Dptr
pointer into an arbitrary data type and dereference it.
This is a general rule in ANSI-C rather than
.I dbm
specific, but users often hit it while using
.I dbm.
.PP
The sum of the sizes of a key/content pair must not exceed
the internal block size minus the
.I dbm
small book-keeping overhead
(currently _PBLKSIZ - 6 = 1018 bytes).
Moreover all key/content pairs that hash together must fit on a single block.
For a dbm-like implementation with much less size limitations, check out
.B dbopen(3)
(Berkeley DB).
.PP
.I Store
will return an error in the event that a disk block fills with inseparable data.
.PP
.I Delete
does not physically reclaim file space,
although it does make it available for reuse.
.PP
The order of keys presented by
.I firstkey
and
.I nextkey
depends on a hashing function, not on anything interesting.
'\".so /pubs/tools/origin.bsd
