'\"macro stdmacro
.if n .pH 2/gen/mq_open @(#)mq_open	43.5 of 8/4/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.\" Copyright 1990, 1989 AT&T
.TH mq_open 3c
.SH NAME
\f4mq_open\f1 \- open/create a message queue
.Op c p a
.SH C SYNOPSIS
\f4#include <mqueue.h>\f1
.PP
\f4mqd_t mq_open (const char \(**\f2mq_name\fP, int \f2oflag\fP, ... /* mode_t \f2mode\fP, struct mq_attr *\f2mq_attr\fP */)\f1;
.Op
.Op
.SH DESCRIPTION
\f4mq_open\fP
is used to open or to create and open a message queue. It returns a message
queue descriptor that is used as the handle for other operations on the
queue. 
\f2mq_name\fP
points to a
path name that is constructed using the standard filename conventions.
.P
The \f2oflag\fP
argument is used to specify send, receive or send/receive access to the queue.
It is also used to specify creation of the queue.
The following \f2oflags\fP may be selected (the first three flags are
mutually exclusive):
.PP
.TP 13
\f4O_RDONLY\f1
Open the queue for receiving messages, but not for sending messages.
.TP
\f4O_WRONLY\f1
Open the queue for sending messages, but not for receiving messages.
.TP
\f4O_RDWR\f1
Open the queue for both sending and receiving messages.
.TP
\f4O_NONBLOCK\f1
Do not block on
\f4mq_send\fP
when sending messages to a full queue (or if required resources are unavailable)
or on
\f4mq_receive\fP
when receiving messages from a empty queue (or if required resources are
unavailable).
[see
\f4mq_send\fP(3c)
and
\f4mq_receive\fP(3c)].
.TP
\f4O_CREAT\f1
Create the message queue.
If the message queue exists, this flag has no effect, except as noted under
\f4O_EXCL\f1
below.
Otherwise, the third argument,
.I mode
and the fourth argument
.I mq_attr
are used to create the message queue. The uid and gid of the queue are set to
the effective uid and gid, respectively, of the process. The mode for the queue
is set to the value of the
.I mode
argument, similar to that for file creation. The mode of queue specifies the
read and write (corresponding to receive and send) permission for user, group
and the world. The queue is created according to the specifications in the
fourth argument,
.I mq_attr.
If this 
argument is non-NULL, the
.I mq_msgsize
field of the
.I mq_attr
structure specifies the maximum size of a single message in the queue. Messages
larger than this size sent to the queue will generate an error. The
.I mq_maxmsg
field specifies the maximum number of messages on the queue at any one time.
If the
.I mq_attr
argument is NULL, the queue is created using the default values of
32 and 64 for
.I mq_maxmsg
and
.I mq_msgsize,
respectively.
.TP
\f4O_EXCL\f1
If \f4O_EXCL\fP and \f4O_CREAT\fP are set,
\f4mq_open\fP
will fail if the queue exists. The check for the existence of the file
and the creation of the queue if it does not exist is atomic with respect
to other processes executing \f4mq_open\fP with the same name in the same
directory with \f4O_EXCL\fP and \f4O_CREAT\fP set.
.PP
When a new message queue is created, the queue is void of messages.
Opening an existing message queue has no effect on its contents.
.PP
Message queue state is preserved across application termination,
but the contents of a queue after system reboot are undefined.
.P
POSIX message queues are compatible across all MIPS ABIs: o32, n32 and 64.
.P
\f4mq_open\fP
will fail if one or more of the following conditions are true:
.TP 15
[EACCES]
The message queue does not exist and permission to create the queue is denied.
.TP
[EACCES]
The message queue exists, but the permissions in oflag are denied.
.TP
[EACCES]
A component of \f2mq_name\fP has no search permission or does not exist.
.TP
[EEXIST]
\f4O_CREAT\f1
and
\f4O_EXCL\f1
are set,
and the message queue exists.
.TP
[EFAULT]
\f2mq_name\fP points outside the allocated address space of the process.
.TP
[EINTR]
A signal interrupted the
\f4mq_open\fP
function call.
.TP
[EINVAL]
The values of
.I mq_msgsize
and
.I mq_maxmsg
fields in the mq_attr structure are outside the valid range. Invalid flags
specified in the
.I oflag
argument.
.TP
[EMFILE]
The process has too many open files or message queues[see
\f4getrlimit\fP(2)].
.TP
[ENAMETOOLONG]
The length of the \f2mq_name\f1 argument exceeds {\f4PATH_MAX\fP}, or the
length of a \f2mq_name\f1 component exceeds {\f4NAME_MAX\fP} while
{\f4_POSIX_NO_TRUNC\fP} is in effect.
.TP
[ENFILE]
There are too many files and/or message queues in the system.
.TP
[ENOENT]
\f4O_CREAT\f1
is not set and the named queue does not exist.
.TP
[ENOENT]
\f4O_CREAT\f1
is set and a component of the \f2mq_name\fP
does not exist or is not directory.
.TP
[ENOMEM]
The system is unable to allocate a message queue descriptor.
.TP
[ENOSPC]
\f4O_CREAT\fP is set, the message queue does not exist and the system
cannot create the queue due to lack of resources.
.SH "SEE ALSO"
\f4mq_close\fP(3c),
\f4open\fP(3c),
\f4getdtablesize\fP(2),
\f4getrlimit\fP(2),
\f4intro\fP(3c),
\f4mq_receive\fP(3c),
\f4mq_send\fP(3c),
\f4mq_getattr\fP(3c),
\f4mq_setattr\fP(3c),
\f4mq_notify\fP(3c),
\f4umask\fP(2)
.SH "DIAGNOSTICS"
Upon successful completion,
the message queue descriptor
is returned.
Otherwise, a value of \-1 is returned and \f4errno\fP
is set to indicate the error.
