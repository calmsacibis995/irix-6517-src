'\"macro stdmacro
.if n .pH g4.dirent @(#)dirent	30.10 of 3/25/86
.nr X
.if \nX=0 .ds x} DIRENT 4 "" "" "\&"
.if \nX=1 .ds x} DIRENT 4 "" ""
.if \nX=2 .ds x} DIRENT 4 "" "" "\&"
.if \nX=3 .ds x} DIRENT 4 "" "" "\&"
.TH \*(x}
.SH NAME
dirent, dirent64 \- file system independent directory entry
.SH SYNOPSIS
.B #include <sys/dirent.h>
.SH DESCRIPTION
Different file system types may have different
directory entries.
The
.I dirent\^
structure defines a file system independent
directory entry, which contains information common to
directory entries in different file system types.
A set of these structures is returned
by the
.IR getdents (2)
system call.
.PP
The 
.I dirent\^
structure is defined below.
.Ex
struct dirent {
	ino_t		d_ino;
	off_t		d_off;
	unsigned short	d_reclen;
	char		d_name[1];
};
.Ee
.PP
The 
.B \s-1d_ino\s0
is a number which is 
unique for each file
in the file system.
The field
.B \s-1d_off\s0
is an opaque offset (i.e., not necessarily in bytes) of the next 
directory entry in the
actual file system directory.
The field
.B \s-1d_name\s0
is the beginning of the
character array giving the name of the
directory entry.
This name is null terminated 
and may have at most
.B \s-1MAXNAMLEN\s0
characters.
This results in file system independent
directory entries being variable length
entities.
The value of 
.B \s-1d_reclen\s0
is the record length
of
this entry.
This length is defined to be the
number of bytes between the
current entry and the next one,
so that it will always result
in the next entry being properly aligned.
.PP
The 
.I dirent64
structure differs from the
.I dirent
structure in the types of the
.B \s-1d_ino\s0
and 
.B \s-1d_off\s0
fields.  
.B \s-1d_ino\s0
is a 
.B ino64_t
and
.B \s-1d_off\s0
is an
.BR off64_t .
The
.I dirent64
structure is used with the
.IR getdents64 ,
.IR ngetdents64 ,
.IR readdir64 ,
.IR telldir64 ,
and
.I seekdir64
calls.
.SH SEE ALSO
directory(3C), getdents(2).
.Ee
'\".so /pubs/tools/origin.att
