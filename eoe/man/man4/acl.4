.TH acl 4
.SH NAME
acl \- Access Control Lists
.SH SYNOPSIS
\f3#include <sys/acl.h>\fP
.SH DESCRIPTION
Access Control Lists (ACLs) are supported on XFS file systems only.
.P
ACLs provide a mechanism for finer grained access control than the traditional
UNIX discretionary access control mechanism.
An ACL is a list of users and/or groups and their access rights, which
is associated with a file or directory.  ACLs are optional.  In addition to
the ACL used to mediate access, a directory may have a second ACL which
defines the default initial ACL for files created in that directory.  Files
have only the single access control ACL.
.P
At the interface to the library routines, ACLs are represented in a
\f2struct acl\fP which is defined in \f2<sys/acl.h>\fP.  
.Ex
.nf
    #define ACL_MAX_ENTRIES 25

    typedef ushort  acl_perm_t;
    typedef int     acl_type_t;
    typedef int     acl_tag_t;

    struct acl_entry {
	    acl_tag_t       ae_tag;
	    uid_t           ae_id;
	    acl_perm_t      ae_perm;
    };
    typedef struct acl_entry * acl_entry_t;

    struct acl {
	    int                     acl_cnt;
	    struct acl_entry        acl_entry[ACL_MAX_ENTRIES];
    };
.fi
.Ee

This is a fixed size structure with a variable number
of active \f2struct acl_entry\fP entries.  The maximum number of entries is
\f2ACL_MAX_ENTRIES\fP which is currently defined to be 25.  The number of
active entries is indicated in \f2acl_cnt\fP.
.P
A \f2struct acl_entry\fP consists of three fields, \f2ae_tag\fP, which 
identifies the type of the entry, and is one of the following values (all
other values are invalid):
.TP 15
\f2ACL_USER_OBJ\fP (0x01)
access permissions for the file's owner.
.TP 15
\f2ACL_USER\fP (0x02)
access permissions for a user other than the owner.
.TP 15
\f2ACL_GROUP_OBJ\fP (0x04)
access permissions for users with the same group as the file's group
.TP 15
\f2ACL_GROUP\fP (0x08)
access permissions for other groups
.TP 15
\f2ACL_MASK\fP (0x10)
mask entry
.TP 15
\f2ACL_OTHER_OBJ\fP (0x20)
other entry.
.sp
The \f2ae_id\fP field of \f2struct acl_entry\fP specifies the UID or GID
for the entry.  The \f2ae_perm\fP field specifies the permissions using
the following defined values:
.TP 15
\f2ACL_READ\fP (0x04)
read access permitted
.TP 15
\f2ACL_WRITE\fP (0x02)
write access permitted
.TP 15
\f2ACL_EXECUTE\fP (0x01)
execute (search for directories) access permitted
.P
As with the basic permissions for a file, these may be or'ed together.
.P
Two types of ACLs are defined. \f2ACL_TYPE_ACCESS\fP (0) indicates that
the ACL is to be used in making access control decisions for the file
or directory with which it is associated.  \f2ACL_TYPE_DEFAULT\fP (1) indicates
that the ACL is a default ACL.  Default ACLs are associated only with
directories, and supply the initial ACL for a file created in that
directory.  These types are supplied in the \f2acl_get_file\fP(3c) and
\f2acl_set_file\fP(3c) calls.
.SH EXTERNAL REPRESENTATION
ACLs are represented in a standard format for human readable input / output.
Each ACL entry is specified as three colon separated fields.
ACL entries are separated by white space or new lines.  
Everything after a "#" character
is considered a comment and is ignored to the end of the line.
The first field of an ACL entry is the entry type, which can be one of the following:
"user", "group", "other", "mask", "u", "g", "o", "m".
.P
The second field is a user name, numeric UID, group name, or numeric GID, depending
on the value of the first field.  (\fIacl_from_text\fP(3c) supports only
the strings, not the numeric UID/GID values.)
If the second field is empty, it implies
that the ACL entry is for the owning user or group of the file.  Mask and
other entries must have an empty second field.  The third field is
the discretionary access permissions for this ACL entry.  This may be
represented in two forms.  The first is the string "rwx" where each letter
may be replaced by a "-" indicating no access of that type.
The parsing of this string by \f2acl_from_text\fP(3c) requires that
it be exactly as shown and not be reordered, e.g. rxw is not valid.
.P
Some programs allow a
second
form, the relative symbolic form (used for input).
The relative symbolic form is preceded by a ``+'' to indicate
additional access or a ``^'' to indicate that access is to be removed,
similarly to the inputs to the \fIchmod\fP(1) command.
The relative symbolic string is at least one character.
The symbolic string contains at most one each of the following
characters in any order: "r", "w", and "x".
