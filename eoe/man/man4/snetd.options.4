.\" SpiderX.25 Manual Pages - Acknowlegements to Berkeley SCCS @(#) netconf.4 5 5/12/92
.\"
.\"  Mark Valentine @ Spider Systems	(spider!mark)
.\"  [1.1]	19 Jan 1988 (MV)	New File
.\"		3  Apr 1989 (TR)	X.25 additions
.\"		18 Jul 1989 (TR)	U.S. Corrections
.\"		 5 Sep 1989 (TR)	U.S. Corrections II
.\"
.cs CW 18
.TH "SNETD.OPTIONS" 4 "Streams Network Files" " "
.SH NAME
snetd.options \- network configuration file
.SH DESCRIPTION
.PP
The
.IR snetd.options
file
describes the configuration of the
.I \s-1STREAMS\s0
network constructed by
.IR "snetd"(1M).
.PP
The file is in two sections, separated by a line consisting of the
character sequence '%%'.
Blank lines may be used freely throughout the file, and a
.I token
(see below)
beginning with an unquoted \&'\fB#\fP' (hash)
denotes a comment which lasts till the end of the line.
In addition, a backslash (\fB\\\fP) immediately preceding the end of a line
results in the newline being treated as whitespace
(except at the end of comment lines).
.PP
.I Tokens
consist either of
.IP "a)"
a single occurrence of the special characters
{ \&'=', \&'{', \&',', \&'}' }
.PP
.RB ( Note:
\&'=' is
.I not
a special character within the brace-enclosed argument list
of a control message;
\&',' is
.I only
a special character in this position.)
.IP "b)"
strings of arbitrary characters enclosed in single or double quotes
(''' or '\&"'),
but not containing a newline -
each quoting character quotes the other,
for example, "foo 'bar'" or \&'"foo" bar'
.PP
(Newlines occuring within quoted strings will silently terminate the string.)
.IP "c)"
sequences of non-whitespace characters
not including any of the special characters or quotes
.PP
All strings are case-sensitive, and are silently truncated to 200 characters.
.PP
The
.B modules
section describes the individual modules and drivers
from which the
.I \s-1STREAMS\s0
network configuration will be built.
.PP
.nf
.ps 8
.ft CW
tcp    dc    /dev/tcp
arp    m     arp
x25    dc    /dev/x25
lapb0  dc    /dev/lapb0
.ft R
.ps
.fi
.PP
Each line (such as the examples above)
consists of three tokens (separated by whitespace)
as follows.
.PP
The
.B "module identifier"
is the name by which the module or driver will be known
in the streams section
(see below).
.PP
The
.B "module type"
is a sequence of character flags describing the
module or driver.
The flag '\fBd\fP' describes a
.I \s-1STREAMS\s0
.I driver ,
whereas '\fBm\fP' describes a
.I module.
The '\fBc\fP' flag specifies a driver to be
.I cloneable.
(See the
.I "\s-1STREAMS\s0 Programmer's Guide"
for a detailed description of modules and drivers.)
.PP
The
.B "module name"
is the
.I "character device name"
for a driver, or the
.I "pushable module name"
for a module.
.PP
The
.B streams
section describes the architecture of the network in terms of
how the previously defined modules and drivers are to be combined
(by means of the appropriate PUSHes and LINKs)
into streams.
Multiplexing and cloning are handled automatically by the
.IR "snetd"(1M)
utility.
.PP
.nf
.ps 8
.ft CW
ip    arp      IP_NET=89.0.0.3
x25   lapb0    SHELL="x25tune -P -s A def.dte.x25" \\
               X25_SET_SNID={A, LC_LAPBDTE, , }
.ft R
.ps
.fi
.PP
Lines in this section (such as the above examples)
are of the following form.
.PP
The first two tokens on a line are
.B names
(\fImodule identifiers\fP as defined in the previous section)
of drivers or modules
which are to form the
.B upstream
and
.B downstream
components respectively of a
.I \s-1STREAMS\s0
link.
.PP
Each link performed between token 1 and token 2 generates a 
.IR mux_id 
(multiplexing identifier) which is associated
with that link.  It is possible
to override the generated link by replacing
token 2 with an explicit mux_id,
for example:
.PP
.nf
.ps 8
.ft CW
lapb0    1     LL_SET_SNID=A \\
               SHELL="lltune -P -p lapb -s B -d /dev/lapb0 def.lapb"
.ft R
.ps
.fi
.PP
This sets the
.I "mux_id"
associated with the link to 
.B "1".
.PP
These names may be
.I qualified
by a suffix consisting of a colon (\fB:\fP) and a number
(for example
.IR "arp:1")
to signify a particular
.I instantiation
of a module.
(An uninstantiated \fIname\fP is an abbreviation for
\fIname\fP:0.)
Each instantiation of a module can be thought of as a separate
.I block
in a
.I \s-1STREAMS\s0
Architecture diagram.
Separate instantiations would be appropriate
for, say, a module pushed above more than one
driver, but not for a cloneable multiplexed driver.
.PP
Instantiations are used in the 'streams' section only,
to instantiate modules defined in the 'modules' section.
The following networking example would
run IP over two distinct networks:
.PP
.nf
.ps 8
.ft CW
ip       dc     /dev/ip
arp      m      arp
ethr0    dc     /dev/ethr0
ethr1    dc     /dev/ethr1

%%

ip      arp:0   IP_NET=89.0.0.1
arp:0   ethr0   ARP_TYPE

ip      arp:1   IP_NET=89.0.0.2
arp:1   ethr1   ARP_TYPE
.ft R
.ps
.fi
.PP
The remainder of each line consists of a (possibly null)
sequence of
.I "control actions"
to be performed on completion of the link
in the order specified.
.PP
Each control action is of the form \fIfunction\fP = \fIargument-list\fP,
where the \fIargument-list\fP is either a single string argument or
a comma-separated list enclosed in braces (\fB{\fP and \fB}\fP).
Control actions requiring no arguments may consist simply of the \fIfunction\fP
component.
Arguments containing whitespace or any of the special characters listed above
must be quoted.
.PP
A special dummy link exists, where no link is formed,
but the control action is executed.
This occurs when token 2 is a hyphen
.B "( '-' )".
.PP
For example:
.PP
.nf
.ps 8
.ft CW
x25     -       SHELL="pvcmap -P"

.ft
.ps
.fi
which is simply a shell call to execute
.B "pvcmap".
.SH FILES
.PP
.IR "/etc/config/snetd.options"
.SH SEE ALSO
.PP
snetd(1M),
hosts(4).
.br
.I "The \s-1STREAMS\s0 Programmer's Guide" .
