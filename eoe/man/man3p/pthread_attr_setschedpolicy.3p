'\"macro stdmacro
.\"
.\" ----------------
.TH pthread_attr_setschedpolicy 3P
.\"
.\" ----------------
.SH NAME
pthread_attr_setschedpolicy, pthread_attr_getschedpolicy
\- manage scheduling policy attributes
.\"
.\" ----------------
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.sp .8v
int pthread_attr_setschedpolicy(pthread_attr_t \(**attr, int policy);
.HP
.ft 3
int pthread_attr_getschedpolicy(const pthread_attr_t \(**attr,
.br
int \(**opolicy);
.ft 1
.fi
.Op
.\"
.\" ----------------
.SH DESCRIPTION
A scheduling policy defines how threads are selected to run and for
how long they run before an alternative thread may be chosen to run.
There are four policies:
.B SCHED_FIFO
(first-in-first-out),
.B SCHED_RR
(round-robin),
.B SCHED_TS
(time-share) and
.BR SCHED_OTHER .
The default scheduling policy attribute value for POSIX threads is
.BR SCHED_RR .
Each policy uses thread priorities [see
.IR pthread_attr_setschedparam ()]
as part of their selection criteria.
Scheduling scope [see
.IR pthread_attr_setscope ()]
determines the set of threads from which a selection is made using
a given policy.
.\"
.PP
Thread priorities are viewed as separate queues, managed according
to the thread scheduling policy.
A thread's position on the queue determines how likely it is to be run
(if it is runnable), woken up (if it is waiting and an event arrives),
or preempted (if it is running).
.\"
.TP 15
.B SCHED_FIFO
Allows a thread (once selected) to run until
it blocks, exits, or there is a higher priority thread
that can run.
The priority queues are managed as follows:
.\"
.RS
.IP \(bu 4
When a thread is preempted it moves to the head of its priority queue.
.\"
.IP \(bu 4
When a blocked thread becomes runnable it moves to the tail of
its priority queue.
.\"
.IP \(bu 4
When a thread has its scheduling priority changed [see
.IR pthread_setschedparam (),
.IR pthread_mutexattr_setprotocol ()]
it moves to the tail of the new priority queue.
.\"
.IP \(bu 4
When a thread has its scheduling policy changed it moves to the tail of
its priority queue.
.\"
.IP \(bu 4
When a thread calls
.IR sched_yield ()
it moves to the tail of its priority queue.
.RE
.\"
.TP
.B SCHED_RR
Behaves like
.B SCHED_FIFO
with the addition that the thread will automatically move to the tail of its
priority queue when it has been running for a fixed period of time [see
.IR sched_rr_get_interval ()] called a quantum.
This period is reset when it expires and whenever the thread blocks;
if the thread is preempted it resumes execution with the
unexpired portion of its scheduling period.
.\"
.TP
.B SCHED_TS
.TP
.B SCHED_OTHER
These two policies are equivalent and for POSIX threads
they behave the same as
.BR SCHED_RR .
.\"
.PP
The
.IR pthread_attr_setschedpolicy ()
function sets the thread scheduling policy attribute in the object
.IR attr ,
to the value of
.IR policy .
In order to use the scheduling policy from the attribute object the
inherit attribute must be set to
.B PTHREAD_EXPLICIT_SCHED
(which is the default) [see
.IR pthread_attr_setinheritsched ()].
The scheduling policy for the attribute object
.IR attr ,
is retrieved by
.IR pthread_attr_getschedpolicy ()
in the
.I opolicy
parameter.
.\"
.PP
The policies above may also be used to indirectly change the scheduling of
process scope threads [see
.IR pthread_attr_setscope ()]
using the POSIX process scheduling interfaces [see
.IR sched_setscheduler ()
and
.IR sched_setparam ()].
.\"
.PP
For an overview of the POSIX thread scheduling model see
.IR pthreads (3P).
.\"
.\" ----------------
.SH DIAGNOSTICS
On success
.IR pthread_attr_setschedpolicy ()
returns zero; otherwise an error number is returned:
.\"
.TP 15
.B [EINVAL]
The value of
.I policy
is not
.BR SCHED_FIFO ,
.BR SCHED_RR ,
.BR SCHED_TS ,
or
.BR SCHED_OTHER .
.\"
.PP
.IR pthread_attr_getschedpolicy ()
always returns zero.
.\"
.\" ----------------
.SH "SEE ALSO"
pthread_attr_setinheritsched(3P),
pthread_attr_setschedparam(3P),
pthread_attr_setscope(3P),
pthread_mutex_init(3P),
pthread_setschedparam(3P),
pthreads(5),
sched_rr_get_interval(3P),
sched_setparam(2),
sched_setscheduler(2),
sched_yield(2).
