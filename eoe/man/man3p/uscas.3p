'\"macro stdmacro
.TH USCAS 3P
.SH NAME
uscas, uscas32 \- compare and swap operator
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "int	uscas(void \(**destp, ptrdiff_t old, ptrdiff_t new, usptr_t \(**u);"
.br
.B "int	uscas32(void \(**destp, int32_t old, int32_t new, usptr_t \(**u);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B #include <ulocks.h>
.PP
.B "integer*4 function uscas32(destp, old, new, u);"
.br
.B "integer*4 destp
.br
.B "integer*4 old, new, u"
.PP
.B "integer*4 function uscas(destp, old, new, u);"
.br
.B "TYPE destp
.br
.B "TYPE old, new, u"
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
.I uscas
emulates a hardware compare and swap instruction.
It works on both single and multi-processor machines.
The exact algorithm used depends on the chip and system type.
.I uscas
checks that the contents of
.I destp
are equal to
.I old
and if they are, atomically changes the contents of
.I destp
to
.IR new .
If the contents are not the same, a zero is returned and the operation
may be repeated.
Note that even with one process performing this algorithm, the compare and
swap operation may fail, so the caller must always be prepared to loop.
.I u
points to a previously set up arena (using
.IR usinit (3P)).
.PP
.I uscas
does a compare and swap on 32-bits for 32-bit processes and 64-bits
for 64-bit processes.  
.br
.I uscas32
does a compare and swap on 32-bits regardless of the type of the process.
.SH SEE ALSO
acquire_lock(3), usinit(3P), ussetlock(3P), uspsema(3P).
.SH DIAGNOSTICS
A value of 1 returned when a successful compare and swap has been performed.
Otherwise 0 is returned.
There are no errors.
