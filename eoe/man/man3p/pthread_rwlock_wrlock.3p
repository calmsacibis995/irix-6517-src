'\"macro stdmacro
.TH pthread_rwlock_wrlock 3P
.SH NAME
pthread_rwlock_wrlock, pthread_rwlock_trywrlock \-
lock a read-write lock object for writing
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.HP
.ft 3
int pthread_rwlock_wrlock(pthread_rwlock_t \(**rwlock);
.HP
.ft 3
int pthread_rwlock_trywrlock(pthread_rwlock_t \(**rwlock);
.ft 1
.Op
.SH DESCRIPTION
Read-write locks allow a thread to exclusively lock some shared
data while updating that data, or allow any number of threads
to have simultaneous read-only access to the data.
The
.IR pthread_rwlock_wrlock ()
and
.IR pthread_rwlock_trywrlock ()
functions apply a write lock to the read-write lock object 
referenced by
.IR rwlock .
The calling thread will only acquire the lock if no other thread
(reader or writer) holds the lock.
A thread that calls
.IR pthread_rwlock_wrlock ()
will block until it can gain the read-write lock for writing,
and retains ownership until it calls
.IR pthread_rwlock_unlock ().
Only the thread that locked a read-write lock should unlock it.
When unlocked, if there are both readers and writers of the same
priority waiting for the read-write lock, writers will be scheduled
before readers.
.LP
If a thread waiting for a read-write lock receives a signal,
upon return from the signal handler, the thread resumes waiting
for the read-write lock as if there was no interrupt.
.SH "DIAGNOSTICS"
All of the read-write lock functions return zero if successful;
otherwise, an error number is returned.
.PP
.IR pthread_rwlock_trywrlock ()
can return the following error:
.TP 15
.B [EBUSY]
The read-write lock is currently held by another thread.
.\" ---------------------
.SH "SEE ALSO"
pthread_rwlock_init(3P),
pthread_rwlock_rdlock(3P),
pthread_rwlock_unlock(3P),
pthread_rwlockattr_init(3P),
pthread_rwlockattr_setpshared(3P).
