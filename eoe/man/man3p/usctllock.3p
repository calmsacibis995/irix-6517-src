'\"macro stdmacro
.TH USCTLLOCK 3P
.SH NAME
usctllock \- lock control operations
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "int usctllock (ulock_t lock, int cmd, ...);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B #include <ulocks.h>
.PP
.B "integer*4 function usctllock (lock, cmd [, arg ])"
.br
.B TYPE lock
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.br
.B integer*4 cmd
.br
.B integer*4 arg(3)
.Op
.SH DESCRIPTION
.B usctllock\^
provides a variety of lock control operations as specified by
.IR cmd .
Metering and debugging information is available only for locks
allocated from an arena with a lock type of either
.SM
.B US_DEBUG
or
.SM
.B US_DEBUGPLUS
(see
.BR usconfig (3P)).
Some \f2cmds\fP take a third argument referred to below as \f2arg\fP.
The following
.I cmds
are available:
.TP "\w'\f3CL_METERFETCH\f1\ \ 'u"
.SM
.B CL_METERFETCH
Fills the 
.I lockmeter_t
structure pointed to by 
.I arg
with the metering data associated with
.IR lock .
.Op f
.I arg
should be declared as integer *4 arg(3).
.Op
.TP
.SM
.B CL_METERRESET
Reinitializes the
.I lockmeter_t
structure associated with 
.I lock
to all values of \-1.
.TP
.SM
.B CL_DEBUGFETCH
Fills the 
.I lockdebug_t
structure pointed to by 
.I arg
with the debugging data associated with
.IR lock .
.Op f
.I arg
should be declared as integer *4 arg(1).
.Op
See
.BR usconfig (3P)
for a explanation of the data returned.
.TP
.SM
.B CL_DEBUGRESET
Reinitializes the elements of the 
.I lockdebug_t
structure associated with 
.I lock
to values of \-1.
.PP
Declarations of the function and 
.IR cmds , 
the 
.B lockmeter_t 
structure, and the 
.B lockdebug_t 
structure, are in the
.I <ulocks.h>\^
header file.
.PP
The structure declaration of 
.B lockmeter_t
is:
.PP
.RS .3i
.nf
.ta \w'typedef\ 'u +\w'int ld_owner_pid;\ \ \ 'u
typedef struct	{
	int lm_spins;	/\(** times the lock request spun out \(**/
	int lm_tries;	/\(** times the lock was requested \(**/
	int lm_hits;	/\(** times the lock was acquired \(**/
} lockmeter_t;
.fi
.RE
.sp
\f2lm_tries\fP is incremented each time \f4ussetlock\fP, \f4uscsetlock\g\fP,
or \f4uswsetlock\fP is called.
\f2lm_hits\fP is incremented each time the lock is acquired.
\f2lm_spins\fP is incremented each time an attempt is made to acquire a
lock, the lock is busy, and the number of \f2spins\fP to attempt to acquire
the lock is exhausted.  For \f4uswsetlock\fP, \f2lm_spins\fP is
incremented once for every time \f2spins\fP is exhausted and the processor
is (potentially) yielded.  For \f4uscsetlock\fP, \f2lm_spins\fP will be
incremented a maximum of once per call.  Additionally, \f2lm_tries\fP and
\f2lm_spins\fP may be slightly wrong if \f4uscsetlock\fP is called and
fails, since these statistics will be updated without actually holding any
lock.
.PP
The structure declaration of 
.B lockdebug_t
is:
.PP
.RS .3i
.nf
.ta \w'typedef\ 'u +\w'int ld_owner_pid;\ \ \ 'u
typedef struct	{
	int ld_owner_pid;	/\(** the process that owns the lock \(**/
} lockdebug_t;
.fi
.RE
.PP
An invalid 
.I lock\^
may yield unpredictable results.
.PP
.B usctllock\^
will fail if one or more of the following are true:
.TP 15
.SM
\%[EINVAL]
.I cmd\^
is not a valid command.
.TP
.SM
\%[EINVAL]
.I cmd\^
is equal to
.SM
.B CL_METERFETCH
and metering is not currently enabled for the given lock.
.TP
.SM
\%[EINVAL]
.I cmd\^
is equal to
.SM
.B CL_DEBUGFETCH
and debugging is not currently enabled for the given lock.
.SH SEE ALSO
usconfig(3P), usinitlock(3P), usnewlock(3P).
.SH DIAGNOSTICS
Upon successful completion, a value of 0 is returned. Otherwise, a
value of \-1 is returned and
.I errno\^
is set to indicate the error.
