'\"macro stdmacro
.TH USNEWLOCK 3P
.SH NAME
usnewlock \- allocate and initialize a lock 
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "ulock_t usnewlock (usptr_t \(**handle);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B #include <ulocks.h>
.PP
.B TYPE function usnewlock (handle)
.br
.B TYPE handle
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
.I usnewlock\^
allocates a lock from the arena designated by 
.I handle
(returned from
.IR usinit (3P))
and initializes it and all associated data.
There are different types of locks; by default the fastest lock type for
the class of machine the process is running on is allocated.
See
.IR usconfig (3P)
for other specifiable lock types.
Metering and debugging are only enabled if the locks are of
the debugging type (see
.IR usconfig (3P).
There is a limit of a maximum of 4096 locks per shared area (for hardware
supported locks).
The size of the shared arena can also limit the number of locks that can be
allocated.
.PP
.I usnewlock\^
will fail if one or more of the following are true:
.TP 15
.SM
\%[ENOMEM]
There is no memory in the arena available to allocate the lock structure
(see
.IR usconfig (3P)).
.TP 15
.SM
\%[ENOSPC]
If the system imposed maximum (4096) number of allocatable locks has
been exceeded.
.TP 15
.SM
\%[ENOSPC]
All the locks in the system have been allocated.
.SH SEE ALSO
usconfig(3P), usctllock(3P), usfreelock(3P), usinit(3P),
usinitlock(3P), usnewsema(3P),
usnewpollsema(3P),
ussetlock(3P).
.SH DIAGNOSTICS
Upon successful completion, a
.B ulock_t
structure is returned, otherwise
.SM
NULL
is returned and
.I errno
is set to indicate the error. 
