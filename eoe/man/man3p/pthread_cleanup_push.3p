'\"macro stdmacro
.\"
.\" ----------------
.TH pthread_cleanup_push 3P
.\"
.\" ----------------
.SH NAME
pthread_cleanup_push, pthread_cleanup_pop \- manage thread cleanup handlers
.\"
.\" ----------------
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.sp .8v
void pthread_cleanup_push(void (\(**cleanup)(void \(**), void *arg);
void pthread_cleanup_pop(int exec);
.ft 1
.fi
.Op
.\"
.\" ----------------
.SH DESCRIPTION
A thread may register cleanup handlers which are automatically called
on behalf of the thread when it terminates either through cancellation [see
.IR pthread_cancel ()],
explicitly exiting [see
.IR pthread_exit ()]
or by returning from its start function [see
.IR pthread_create ()].
Handlers are run in order: most recently registered first.
.\"
.PP
Handlers have strict scoping rules: the push and pop must be in the
same C lexical scope;
that is, the pop operation must match the push operation in the same
C statement block.
Threads should never jump out of or into a cleanup pair, for example
using
.I goto
or
.IR longjmp ().
.\"
.PP
The
.IR pthread_cleanup_push ()
function registers the function
.I cleanup
as a cleanup handler for the calling thread.
When invoked,
.I cleanup
will be passed the parameter
.IR arg .
.\"
.PP
The
.IR pthread_cleanup_pop ()
function unregisters the last handler.
If the parameter
.I exec
is non-zero then the handler will be executed.
.\"
.\" ----------------
.SH DIAGNOSTICS
Not applicable.
.\"
.\" ----------------
.SH "SEE ALSO"
pthread_cancel(3P), pthread_exit(3P), pthread_create(3P), longjmp(3C).
