'\"macro stdmacro
.TH USVSEMA 3P
.SH NAME
usvsema \- release a semaphore 
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "int usvsema (usema_t \(**sema);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B integer*4 function usvsema (sema)
.br
.B TYPE sema
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
.I usvsema\^
increments the count associated with
.IR sema .
If there are any processes queued waiting for the semaphore
the first one is awakened.
.I usvsema
uses the
.IR usema (7M)
device
to reactivate a suspended process.
If the process to be awoken is no longer alive,
.I usvsema
will automatically attempt to awaken the next process waiting for the
semaphore.
.P
In order to use a semaphore, the caller must have joined the shared
arena out of which the semaphore is allocated (via
.IR usinit (3P)),
and have a file descriptor to a
.I usema
device to unsuspend any waiting processes.
As a convenience,
.I usvsema
will automatically do this for members of a share group, or for
related (via
.IR fork (2))
processes.
This automatic facility can generate the same errors as
.IR usinit (3P),
and
.IR usopenpollsema (3P).
These errors will be passed back to the caller.
If tracing is enabled (see
.IR usinit(3P))
then any errors will cause a message to be printed to
.IR stderr .
To avoid these errors and therefore not need to check for errors
on every
.I uvpsema
call, have each process call
.IR usinit(3P)
and each user of a pollable semaphore call
.IR usopenpollsema (3P).
.P
The following error can always occur:
.TP 15
.SM
\%[EBADF]
The underlying file descriptor for the semaphore
was closed or re-used by the application.
.SH SEE ALSO
uscpsema(3P), usinit(3P), usinitsema(3P), usnewsema(3P), usnewpollsema(3P),
usopenpollsema(3P), uspsema(3P), 
ustestsema(3P), usema(7M).
.SH DIAGNOSTICS
Upon successful completion the semaphore has been released and
a value of 0 is returned.
On error, \-1 is returned and
.I errno
is set to indicate the error.
