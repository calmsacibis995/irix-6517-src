'\"macro stdmacro
.TH USGETINFO 3P
.SH NAME
usgetinfo, usputinfo, uscasinfo \- exchange information though an arena
.Op c p a
.SH C SYNOPSIS
.nf
.B #include <ulocks.h>
.PP
.B "void usputinfo (usptr_t \(**handle, void \(**info);"
.PP
.B "void \(**usgetinfo (usptr_t \(**handle);"
.PP
.B "int uscasinfo (usptr_t \(**handle, void \(**old, void \(**new);"
.fi
.Op
.Op f
.SH FORTRAN SYNOPSIS
.nf
.B subroutine usputinfo (handle, info)
.B TYPE info
.B TYPE handle
.fi
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.PP
.nf
.B TYPE usgetinfo (handle)
.B TYPE handle
.br
.fi
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.fi
.PP
.nf
.B integer*4 uscasinfo (handle, old, new)
.B TYPE old, new
.B TYPE handle
.fi
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
When unrelated processes decide to share an arena, it is often
useful to be able to initially communicate the location of various
data structures within the arena.
A single word (doubleword in 64 bit mode) communication area is available inside the arena
header block, accessible via the functions
.I usgetinfo
and
.IR usputinfo .
Thus, a process that sets up the arena can initialize various
locks, semaphores, and common data structures, and place a single pointer
that any process that joins the arena can retrieve.
.I usputinfo\^
places the data item in the header, overwriting any existing information
there.
.I usgetinfo\^
will retrieve that information.
At arena creation time, the value is initialized to zero.
.P
If multiple unrelated processes are starting at arbitrary times, then a
race condition exists between initializing the arena and
setting the global information.
The
.I uscasinfo
function provides a compare and swap operation on the data item
in the arena header block.
To establish race free initialization, each joining member should first check
the data item using
.I usgetinfo
and if 0 should allocate a semaphore (using
.IR usnewsema ).
The caller should then use
.I uscasinfo
to atomically place the semaphore pointer into the communication area.
If
.I uscasinfo
returns 0 then someone else may have beat the caller and the caller should free
the semaphore and repeat the algorithm starting with re-checking
.IR usgetinfo .
Note that even with one process performing this algorithm, the compare and
swap operation may fail, so the caller must always be prepared to loop.
If 1 is returned, then the caller has won and can use the semaphore for future
negotiation.
.SH SEE ALSO
usinit(3P). 
