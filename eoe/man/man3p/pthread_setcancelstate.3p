'\"!  tbl | mmdoc
'\"macro stdmacro
.\"
.\" ----------------
.TH pthread_setcancelstate 3P
.\"
.\" ----------------
.SH NAME
pthread_setcancelstate, pthread_setcanceltype, pthread_testcancel
\- manage cancelability of a thread
.\"
.\" ----------------
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.sp .8v
int pthread_setcancelstate(int new_state, int \(**old_state);
int pthread_setcanceltype(int new_type, int \(**old_type);
void pthread_testcancel(void);
.ft 1
.fi
.Op
.\"
.\" ----------------
.SH DESCRIPTION
The cancelability of a thread determines when, if ever, it acts upon
cancellation requests [see
.IR pthread_cancel (),
and
.IR pthread_exit ()].
.\"
.PP
Cancellation state may be either
.B PTHREAD_CANCEL_ENABLE
or
.BR PTHREAD_CANCEL_DISABLE .
If it is
.BR PTHREAD_CANCEL_DISABLE ,
then cancellation requests are blocked (held pending) indefinitely.
If the state is
.BR PTHREAD_CANCEL_ENABLE ,
the cancellation type is the governing factor.
.\"
.PP
Cancellation type may be either
.B PTHREAD_CANCEL_ASYNCHRONOUS
or
.BR PTHREAD_CANCEL_DEFERRED .
The type only affects the cancelability of a thread if the cancellation state is
.BR PTHREAD_CANCEL_ENABLE .
.\"
.PP
If the type is
.BR PTHREAD_CANCEL_DEFERRED ,
cancellation requests are only acted on when the thread is in a
known state, namely that it enters or is waiting
in a set of functions known as cancellation points (see
.BR NOTES ).
Usually these are functions in which a thread may block for an
unbounded period of time.
If the cancellation request is acted upon at a cancellation point,
the operation associated with the function is aborted.
For example, if a
.IR read ()
is in progress when the thread is cancelled,
then either the
.IR read ()
will return data or the cancellation will be acted upon.
Should the thread
read data before the request arrives, it will not be cancelled.
.\"
.PP
If the type is
.BR PTHREAD_CANCEL_ASYNCHRONOUS ,
then cancellation requests may take effect immediately.
This type of cancellation should only be
used when the state of target thread is known.
If the target thread is executing exclusively in user code (for example
in a computation loop) this is safe.
However, this is not the case if the thread makes calls to a library.
For this reason deferred cancellation should be preferred to asynchronous
cancellation.
.\"
.PP
Cancellation handlers [see
.IR pthread_cleanup_push ()]
can be used to restore application state when a thread is cancelled.
.\"
.PP
When threads start, their cancellation state is
.B PTHREAD_CANCEL_ENABLE
and their cancellation type is
.BR PTHREAD_CANCEL_DEFERRED .
.\"
.PP
The
.IR pthread_setcancelstate ()
function changes the calling thread's cancellation state to
.I new_state
which can be either
.B PTHREAD_CANCEL_DISABLE
or
.BR PTHREAD_CANCEL_ENABLE .
If
.I old_state
is not
.BR NULL ,
then it is used to return the previous state.
If the state is changed to
.B PTHREAD_CANCEL_ENABLE
and there is a cancellation request pending, then it will be acted
on immediately.
.\"
.PP
The
.IR pthread_setcanceltype ()
function changes the calling thread's cancellation type to
.I new_type
which can be either
.B PTHREAD_CANCEL_ASYNCHRONOUS
or
.BR PTHREAD_CANCEL_DEFERRED .
If
.I old_type
is not
.BR NULL ,
then it is used to return the previous type.
.\"
.PP
The
.IR pthread_testcancel ()
function is a cancellation point.
If cancellation is enabled and a cancellation request is pending on the
thread, then calling this function will terminate the thread.
.\"
.\" ----------------
.SH DIAGNOSTICS
The functions
.IR pthread_setcancelstate ()
and
.IR pthread_setcanceltype ()
return zero.
.\"
.\" ----------------
.SH "SEE ALSO"
pthread_cancel(3P), pthread_exit(3P), pthread_cleanup_push(3P).
.\"
.SH NOTES
The following functions are cancellation points:
.sp .8v
.TS
center, tab(@);
lI lI lI.
accept(2)@aio_suspend(3)@close(2)@
connect(2)@creat(2)@fcntl(2)@
fsync(2)@getmsg(2)@getpmsg(2)@
lockf(3C)@mq_receive@mq_send@
msgrcv(2)@msgsnd(2)@msync(2)@
nanosleep(2)@open(2)@pause(2)@
poll(2)@pread(2)@pthread_cond_timedwait(3P)@
pthread_cond_wait(3P)@pthread_join(3P)@pthread_testcancel(3P)@
putmsg(2)@putpmsg(2)@pwrite(2)@
read(2)@readv(2)@recv(2)@
recvfrom(2)@recvmsg(2)@select(2)@
sem_wait@semop(2)@send(2)@
sendmsgsendto(2)@sigpause(2)@sigsuspend(2)@
sigtimedwait(3)@sigwait(3)@sigwaitinfo(3)@
sleep(3C)@system(3S)@tcdrain(3t)@
usleep(3C)@wait(2)@wait3(2)@
waitid(2)@waitpid(2)@write(2)@
writev(2)@
.TE
