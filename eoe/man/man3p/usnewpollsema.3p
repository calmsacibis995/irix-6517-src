'\"macro stdmacro
.TH USNEWPOLLSEMA 3P
.SH NAME
usnewpollsema \- allocate and initialize a pollable semaphore 
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "usema_t \(**usnewpollsema (usptr_t \(**handle, int val);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B TYPE function usnewpollsema (handle, val)
.br
.B TYPE handle
.br
.B integer*4 val
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
.I usnewpollsema\^
allocates a semaphore and initializes its count to the value specified by
.I val.
Initially, metering and debugging are off (and can be turned on through a
call to 
.IR usctlsema (3P))
and the history logging mechanism is set according to the global setting
(see
.IR usconfig (3P)).
The semaphore is allocated from the shared arena designated by
.I handle
as returned from
.IR usinit (3P).
Pollable semaphores never block the caller.
If the semaphore is unavailable when
.IR uspsema (3P)
is called, the caller is queued to receive the semaphore and returns
immediately.
To actually acquire the semaphore the caller must issue a
.IR poll (2)
or
.IR select (2)
on the file descriptor associated with the semaphore.
A file descriptor is allocated via
.IR usopenpollsema (3P).
The
.SM
.B POLLIN
event should be used with
.IR poll (2).
The semaphore file descriptor should be passed in as a read descriptor
for
.IR select (2).
.PP
A
.I val
of 0 implies no available resources, and the first process that
attempts a 'P' operation (via
.IR uspsema (3P))
will return 0.
This can be viewed as a synchronizing semaphore, since the goal is to
always have a process wait until another has completed an operation that
the first process requires.
Positive values for
.I val
can be used for tracking a collection of resources.
The simplest case of a value of 1 implements the common mutual exclusion
semaphore, where one and only one process will be permitted through a semaphore
at a time.
Values greater than one imply that up to
.I val
resources may be simultaneously used, but requests for more than
.I val
resources cause the calling process to wait until a resource comes free
(by a process holding a resource performing a
.IR usvsema (3P)).
.PP
Pollable semaphores may be used with all the other semaphore routines.
They must be freed using
.IR usfreepollsema (3P).
.PP
.I usnewpollsema\^
will fail if one or more of the following are true:
.TP 15
.SM
\%[ENOMEM]
There is no memory available in the arena to allocate the semaphore structure
(see
.IR usconfig (3P)).
Pollable semaphores take more memory than non-pollable semaphores since
a file descriptor per user must be saved.
.TP
.SM
\%[EINVAL]
.I val
is less than zero or greater than 30000.
.SH SEE ALSO
poll(2),
select(2),
amalloc(3P), uscpsema(3P), usconfig(3P), usctlsema(3P), 
usdumpsema(3P),
usclosepollsema(3P),
usfreesema(3P),
usfreepollsema(3P),
usinit(3P),
usnewsema(3P),
usopenpollsema(3P),
usvsema(3P).
.SH "DIAGNOSTICS"
Upon successful completion, a value of pointer to a
.I usema_t
structure
is returned. Otherwise, a value of NULL is returned and
.I errno\^
is set to indicate the error.
