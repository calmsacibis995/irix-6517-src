'\"macro stdmacro
.\"
.\" ----------------
.TH pthread_setspecific 3P
.\"
.\" ----------------
.SH NAME
pthread_setspecific, pthread_getspecific \- thread-specific data management
.\"
.\" ----------------
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.sp .8v
int pthread_setspecific(pthread_key_t key, const void *value);
void *pthread_getspecific(pthread_key_t key);
.ft 1
.fi
.Op
.\"
.\" ----------------
.SH DESCRIPTION
The
.IR pthread_setspecific ()
function associates a thread-specific
.I value
with
.IR key .
Different threads may bind different values to the same key.
.PP
The
.IR pthread_getspecific ()
function returns the calling thread's value that is bound to the specified
.IR key .
.PP
The affect of calling either of these functions using a value for 
.I key
not obtained from a
.IR pthread_key_create ()
call or after
.I key
has been deleted with
.IR pthread_key_delete ()
is undefined.
.\"
.\" ----------------
.SH DIAGNOSTICS
The
.IR pthread_getspecific ()
function returns the thread-specific value associated with
.IR key .
If no value is associated with
.IR key ,
then
.B NULL
is returned.
.PP
On success,
.IR pthread_setspecific ()
returns zero; otherwise, an error number is returned:
.\"
.TP 15
.B [ENOMEM]
Not enough memory is available to associate
.I value
with
.IR key .
.TP
.B [EINVAL]
The value specified by
.I key
is invalid.
.\"
.\" ----------------
.SH "SEE ALSO"
pthread_key_create(3P), pthread_key_delete(3P).
