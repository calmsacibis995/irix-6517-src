'\"macro stdmacro
.TH USINITLOCK 3P
.SH NAME
usinitlock \- initializes a lock 
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "int usinitlock (ulock_t lock);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B integer*4 function usinitlock (lock)
.br
.B TYPE lock
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.Op
.SH DESCRIPTION
.I usinitlock\^
initializes the lock specified by
.IR lock .
All previous information associated with the lock (metering, debugging)
is reinitialized.
.I usinitlock
should only be used for previously allocated locks.
Locks are allocated using 
.IR usnewlock(3P).
.PP
.I usinitlock\^
will cause unpredictable results if 
.I lock\^
does not point to a valid lock.
.SH NOTE
.I usinitlock 
assumes that the fields of the ulock_t structure are in a valid state.
The use of
.I malloc
rather than 
.I usnewlock
may result in a segmentation violation.
.SH SEE ALSO
usnewlock(3P), usctllock(3P).
.SH DIAGNOSTICS
0 is always returned.
