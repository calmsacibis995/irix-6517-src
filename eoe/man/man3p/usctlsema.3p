'\"macro stdmacro
.TH USCTLSEMA 3P
.SH NAME
usctlsema \- semaphore control operations
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.PP
.B "int usctlsema (usema_t \(**sema, int cmd [, void \(**arg ]);"
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B #include <ulocks.h>
.PP
.B "integer*4 function usctlsema (sema, cmd [, arg ])"
.br
.B TYPE sema
.br
.in +1i
where
.B TYPE
is
.B "integer*4"
in 32 bit mode, and is
.B "integer*8"
in 64 bit mode.
.in -1i
.br
.B integer*4 cmd
.br
.B ARRAY arg
.br
.in +1i
where
.B ARRAY
is described below.
.in -1i
.br
.Op
.SH DESCRIPTION
.I usctlsema\^
provides a variety of semaphore control operations as specified by
.IR cmd .
The following
.I cmds
are available:
.TP "\w'\f3CS_METERFETCH\f1\ \ 'u"
.SM
.B CS_METERON
Enable metering for the semaphore specified by
.IR sema .
The metering information gathered consists of the number of
.I uspsema
and
.I uscpsema
calls,
the number of times the semaphore could immediately
be acquired,
the number of
.I usvsema
calls,
the number of times
.I usvsema
was called and no process was queued waiting,
the current number of processes waiting on the semaphore,
and the maximum number of processes ever waiting on the semaphore.
All metering is stored in a 
.I semameter_t
structure defined in the header file
.I <ulocks.h>\^
and described below.
.TP
.SM
.B CS_METEROFF
Disable metering for the semaphore specified by
.IR sema .
.TP
.SM
.B CS_METERFETCH
Fills the 
.Q semameter_t
structure pointed to by 
.Op f
the array
.Op
.I arg
with the metering data associated with
.IR sema .
.Op f
.I arg
is declared as
.B "integer *4 arg(6)."
.Op
.TP
.SM
.B CS_METERRESET
Reinitializes the
.I semameter_t
structure associated with 
.I sema
to all 0.
.TP
.SM
.B CS_DEBUGON
Enable debug monitoring for the semaphore specified by
.IR sema .
The debugging information maintained consists of 
the process id of the owner of the semaphore,
and the address in the owner process where the call to the semaphore
operation was made,
the process id of the last process to operate on the semaphore,
and the address in the last process where the call to the semaphore
operation was made.
The pid is set to \-1 if no one owns the semaphore.
All debug info is stored in a 
.I semadebug_t
structure defined in the header file
.I <ulocks.h>\^
and described below.
.TP
.SM
.B CS_DEBUGOFF
Disable debugging for the semaphore specified by
.IR sema .
.TP
.SM
.B CS_DEBUGFETCH
Fills the 
.Q semadebug_t
structure pointed to by 
.Op f
the array
.Op
.I arg
with the debugging data associated with
.IR sema .
.Op f
In 32 bit mode,
.I arg
is declared as
.B "integer *4 arg(4)."
In 64 bit mode,
.I arg
is declared as
.B "integer *8 arg(4)."
.Op
.TP
.SM
.B CS_DEBUGRESET
Reinitializes the elements of the 
.I semadebug_t
structure associated with 
.I sema
to values of \-1.
.TP
.SM
.B CS_HISTON
Enable history logging for the semaphore specified by
.IR sema .
A global history is maintained that consists of a record of each transaction
on semaphores in
.B hist_t
structures defined in the header file
.IR <ulocks.h> .
This is discussed further in
.IR usconfig (3P),
which is used to retrieve history of semaphore transactions.
.TP
.SM
.B CS_HISTOFF
Disable history for the semaphore specified by
.IR sema .
.TP
.SM
.B CS_RECURSIVEON
Enables recursive acquires of the semaphore specified by
.IR sema .
Normally, an attempt to recursively acquire a mutual exclusion semaphore,
(one initialized with a value of 1), will result in the calling
process deadlocking.
This option will cause a count to be incremented each time the current owner
acquires the semaphore (including
.IR uscpsema (3P)).
A matched number of
.IR usvsema (3P)
calls will release the semaphore.
This option can be used only with mutual exclusion semaphores and must
be specified when the semaphore is currently free.
Note that the recursive semaphore option is \f4not supported\fP for pthread
applications intending to share the semaphore across process boundaries.
However, pthread application threads may use recursive semaphores when
semaphore access is restricted to a single process.
.TP
.SM
.B CS_RECURSIVEOFF
Disable recursive acquires of the semaphore specified by
.IR sema .
.PP
Declarations of the function and 
.IR cmds , 
the 
.B hist_t
structure, the 
.B semameter_t 
structure, and the 
.B semadebug_t 
structure, are in the
.I <ulocks.h>\^
header file.
.PP
The structure declaration of 
.B semameter_t
is:
.PP
.RS .3i
.nf
.ta \w'typedef\ 'u +\w'int sema_owner_pid;\ \ \ 'u
typedef struct semameter_s {
	int sm_phits;		/\(** number of immediate psemas\(**/
	int sm_psemas;	/\(** number of psema attempts \(**/
	int sm_vsemas;	/\(** number of vsema attempts \(**/
	int sm_vnowait;		/\(** number of vsemas with no one 
			    waiting \(**/
	int sm_nwait;	/\(** number of threads waiting on the 
			    semaphore \(**/
	int sm_maxnwait;	/\(** maximum number of threads waiting 
			    on the semaphore \(**/
} semameter_t;
.fi
.RE
.PP
The structure declaration of 
.B semadebug_t
is:
.PP
.RS .3i
.nf
.ta \w'typedef\ 'u +\w'char \(**sd_owner_pc;\ \ \ 'u
typedef struct semadebug_s {
	int sd_owner_pid	/\(** the process that owns the semaphore \(**/
	char \(** sd_owner_pc;	/\(** the address of last psema for
		          process that owns the semaphore \(**/
	int sd_last_pid;	/\(** the process that last did a p or v sema \(**/
	char \(** sd_last_pc;	/\(** the address of the last routine to operate 
		          on the semaphore \(**/
} semadebug_t;
.fi
.RE
.P
.I usctlsema\^
will fail if one or more of the following are true:
.TP 15
.SM
\%[EINVAL]
.I cmd\^
is not a valid command.
.TP
.SM
\%[EINVAL]
.I cmd\^
is equal to
.SM
.B CS_METERFETCH
and metering in not currently enabled.
.TP
.SM
\%[EINVAL]
.I cmd\^
is equal to
.SM
.B CS_DEBUGFETCH
and debugging is not currently enabled.
.TP 15
.SM
\%[ENOMEM]
.I cmd\^
is equal to
.SM
.B CS_METERON
or
.B CS_DEBUGON
and there was not enough memory in the arena.
.SH "SEE ALSO"
usconfig(3P), uscpsema(3P),
usdumpsema(3P),
usinitsema(3P),
usnewsema(3P), uspsema(3P),
usvsema(3P).
.SH DIAGNOSTICS
Upon successful completion, a value of 0 is returned. Otherwise, a
value of \-1 is returned and
.I errno\^
is set to indicate the error.
