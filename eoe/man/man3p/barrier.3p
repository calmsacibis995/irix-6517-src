'\"macro stdmacro
.TH BARRIER 3P  LOCAL
.SH NAME
barrier, new_barrier, init_barrier, free_barrier \- barrier functions
.Op c p a
.SH C SYNOPSIS
.B #include <ulocks.h>
.P
.br
.B barrier_t \(**new_barrier (usptr_t \(**handle);
.P
.br
.B void free_barrier (barrier_t \(**b);
.P
.br
.B void init_barrier (barrier_t \(**b);
.P
.br
.B void barrier (barrier_t \(**b, unsigned n);
.Op
.Op f
.SH FORTRAN SYNOPSIS
.B integer*4 function new_barrier (handle)
.br
.B integer*4 handle
.P
.br
.B subroutine free_barrier (b)
.br
.B integer*4 b
.P
.br
.B subroutine barrier (b, n)
.br
.B integer*4 b
.br
.B integer*4 n
.Op
.SH DESCRIPTION
These routines provide a simple rendezvous mechanism for shared address
processes.
.P
.I new_barrier
takes a usptr_t
as an argument to indicate the shared arena from which to allocate the
barrier.
The usptr_t is a previously allocated handle obtained through a call to 
.IR usinit(3P) .
.P
The
.I barrier
function takes a pointer to a previously allocated and initialized
barrier structure (as returned by
.IR new_barrier )
and the number of processes/sub-tasks to wait for.
As each process enters the barrier, it spins (busy wait) until all
.I n
processes enter the barrier.
At that time all are released and continue executing.
.P
.I free_barrier
releases all storage associated with
.IR b .
.P
.I init_barrier
resets the barrier to its default state.
.PP
.I new_barrier
will fail if one or more of the following are true:
.TP 15
.SM
\%[ENOMEM]
There is not enough space to allocate a barrier structure.
.TP 15
.SM
\%[ENOMEM]
It is not possible to allocate a lock.
.RE
.SH "SEE ALSO"
sproc(2), usinit(3P), ussetlock(3P), usunsetlock(3P), usnewlock(3P).
.SH DIAGNOSTICS
Upon successful completion,
.I new_barrier
returns a pointer to a barrier struct.
Otherwise, a value of 0 is
returned to the calling process.
