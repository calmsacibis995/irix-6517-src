'\"macro stdmacro
.\"
.\" ----------------
.TH pthread_attr_setscope 3P
.\"
.\" ----------------
.SH NAME
pthread_attr_setscope,
pthread_attr_getscope
\- thread scheduling scope attributes
.\"
.\" ----------------
.Op c p a
.SH C SYNOPSIS
.nf
.ft 3
#include <pthread.h>
.sp .8v
int pthread_attr_setscope(pthread_attr_t \(**attr, int scope);
int pthread_attr_getscope(const pthread_attr_t \(**attr, int \(**oscope);
.ft 1
.fi
.Op
.\"
.\" ----------------
.SH DESCRIPTION
The
.IR pthread_attr_setscope ()
function sets the thread scheduling scope attribute in the object
.I attr
to the value
.IR scope .
Possible values for
.I scope
are
.B PTHREAD_SCOPE_SYSTEM
and
.BR PTHREAD_SCOPE_PROCESS .
The scheduling scope for the attribute object
.IR attr ,
is returned via the
.I oscope
parameter of
.IR pthread_attr_getscope ().
The default scheduling scope is
.BR PTHREAD_SCOPE_PROCESS .
.\"
.PP
Threads created with system scope have a direct effect on scheduling 
by the kernel [see
.IR pthread_attr_setschedpolicy ()
and
.IR pthread_attr_setschedparam ()].
System scope threads are therefore suitable for real-time applications
[see
.IR realtime ].
For example a system scope thread may run at a higher priority
than interrupt threads and system daemons.
Creation of system scope threads requires the
.B CAP_SCHED_MGT
capability [see
.IR capability ].
.\"
.PP
Threads created with process scope are scheduled with respect to the
other process scope pthreads in the process in which they are created
(that is, they are scheduled in user space by the library).
Creating process scope threads does not require any special capability.
Although the scheduling attributes [see
.IR pthread_attr_setschedpolicy ()
and
.IR pthread_attr_setschedparam ()]
of these threads do not affect scheduling by the kernel,
process scope threads execute on a (usually smaller) pool
of kernel execution vehicles [see
.IR pthread_setconcurrency ()].
These execution vehicles share a single set of kernel scheduling
characteristics controlled by the process scheduling interfaces [see
.IR sched_setscheduler ()
and
.IR sched_setparam ()].
.\"
.PP
Scheduling scope makes a big difference to the effect of thread
scheduling, particularly with respect to priority.
For example, a process scope thread with maximum priority merely
executes in preference to other threads within its process.
However a thread with the same scheduling policy and priority running
with system scope runs in preference to other threads and processes on
the machine; such a thread may run instead system threads and daemons
and seriously affect the operation of the host.
.\"
.\" ----------------
.SH DIAGNOSTICS
On success
.IR pthread_attr_setscope ()
returns zero; otherwise an error number is returned:
.\"
.TP 15
.B [EINVAL]
The value of
.I scope
is not
.B PTHREAD_SCOPE_SYSTEM
or
.BR PTHREAD_SCOPE_PROCESS .
.TP
.B [EPERM]
The value of
.I scope
is
.B PTHREAD_SCOPE_PROCESS
and the process lacks the
.B CAP_SCHED_MGT
capability.
.\"
.PP
.IR pthread_attr_getscope ()
always returns zero.
.\"
.\" ----------------
.SH "SEE ALSO"
capability(4),
pthread_attr_init(3P),
pthread_attr_setschedparam(3P),
pthread_attr_setschedpolicy(3P),
pthread_create(3P),
pthread_setconcurrency(3P),
realtime(5),
sched_setparam(2),
sched_setscheduler(2).
