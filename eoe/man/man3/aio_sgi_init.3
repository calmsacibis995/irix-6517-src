'\"macro stdmacro
.TH AIO_SGI_INIT 3 
.SH NAME
aio_sgi_init, aio_sgi_init64 \- asynchronous I/O initialization
.Op c p a
.SH C SYNOPSIS
.nf
.B #include <aio.h>
.PP
.B "void aio_sgi_init(aioinit_t *);
.PP
.B "void aio_sgi_init64(aioinit_t *);
.fi
.PP
.Op
.SH DESCRIPTION
.PP
The optional
.I aio_sgi_init()
function allows the calling process to initialize the asynchronous I/O interface.
If this function is not called, the asynchronous I/O interface is initialized the first time a call is made to
.I aio_read(), aio_write()
or
.I lio_listio().
.I aio_sgi_init()
takes an \f2aioinit_t\f1 * as an argument.
If this argument is NULL, default initialization values are used.
Initialization of the interface includes starting up slave threads which are used to carry out I/O requests.
This is significant if a process that runs isolated intends to use asynchronous I/O.  An explicit call to
.I aio_sgi_init()
prior to isolating will cause the slave threads on non-isolated processors.  An explicit call to
.I aio_sgi_init()
or implicit initialization of the interface by calls to
.I aio_read, aio_write
or
.I lio_listio()
from a process that is running on an isolated processor cause the
aio threads to run on the same isolated processor as the caller.
.P
The \f2aioinit\f1 structure contains the following fields:
.P
\f3aio_threads\f1: The number of threads that the aio library will use from user space.
While the user can queue up many operations to be done by the
\f2aio\f1 library, they are
currently passed to the kernel one at a time by each thread.
The \f3aio_threads\f1 value allows the use to pick the level of
parallelism that their application needs. The current default is 5.
.P
\f3aio_locks\f1: This is used by realtime programs to pre-allocate
needed data structures so that real time programs do not need
to allocate them in critical areas. This
should be set to the maximum number of simultaneous
\f2lio_listio\f1(LIO_NOWAIT), \f2aio_fsync\f1(), and
\f2aio_suspend\f1() that your program will be executing. Nothing bad
will happen if you pick a number that is too small except that the
program may need to call malloc, and thus possibly cause problems for
some realtime programs. The current default is 3
.P
\f3aio_numusers\f1: Due to its use of IRIX semaphores (see
usconfig(3P)) Multi threaded programs must pass the number of sprocs
or pthreads that the application contains to the AIO library. Passing
a number that is too small can result in program deadlocks and other
errors. The current default is 5.
.P
\f3aio_num\f1, \f3aio_debug\f1, and \f3aio_reserved\f1 are currently
unused and ignored. \f3aio_usedba\f1 is used by a few specific
applications, and all other programs must set it to zero for correct
operation.
.P
The \f2aio_sgi_init64\f1() routine is identical to \f2aio_sgi_init\f1() except that it
takes an \f2aioinit64_t\f1 * (see \f3<aio.h>\f1) as an argument.
It should be used for explicit initialization of parameters used by \f2aio_read64\f1(), \f2aio_write64\f1() and \f2lio_listio64\f1().
.P
.SH "SEE ALSO"
aio_write(3), lio_listio(3), aio_error(3), aio_return(3), aio_cancel(3), mpadmin(1), realtime(5).
