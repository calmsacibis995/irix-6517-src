'\"macro stdmacro
.if n .pH g3.intro @(#)intro	41.3 of 5/21/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} intro 3 "" "\&"
.if \nX=1 .ds x} intro 3 ""
.if \nX=2 .ds x} intro 3 "" "\&"
.if \nX=3 .ds x} intro "" "" "\&"
.TH \*(x}
.SH NAME
intro \- introduction to functions and libraries
.SH DESCRIPTION
This section describes functions found
in various libraries, other than those functions
that directly invoke \s-1IRIX\s+1
system primitives,
which are described in Section\ 2 of this volume.
Function declarations can be obtained
from the
\f4#include\f1
files indicated on each page.
Certain major collections are identified by a
letter after the section number.
.PP
In general, routines in these libraries are not MP or MT (multi-threaded)
safe, and therefore must be explictly protected by one of the synchronization
primitives in the users code.  Exceptions are noted in the man pages.
See section \f33P\fP below.
.PP
.TP 6n
(3C)
These functions, together with those of Section\ 2 and those
marked (3S), constitute the standard C library, \f4libc\f1,
which is automatically linked by the C compilation system.
The standard C library is implemented as a
shared object, \f4libc.so.1\f1.
.TP
(3G)
These functions constitute the IRIS Graphics Library which are documented
in the
.IR "Graphics Library User's Guide" .
The
.BR \-lgl
and
.BR \-lm
flags should be specified to access the graphics library.
Declarations for these functions may be obtained from the
include file <\f2gl.h\fP>.
<\f2device.h\fP> and <\f2get.h\fP>
define other constants used by the Graphics Library.
.TP
(3M)
These functions constitute the Math Library,
.IR libm .
Use the
.B \-lm
option to \f2cc\f1(1) or \f2ld\f1(1) to have 
the link editor search this library.
Declarations for these functions may be obtained from
the include file <\f2math.h\fP>.
.TP
(3S)
These functions constitute the
``standard
.SM I/O
package''
(see
.IR stdio\^ (3S)).
These functions are in the standard C library
.IR libc ,
already mentioned.
Declarations for these functions may be obtained from
the include file <\f2stdio.h\fP>.
.\".TP
.\"(3E)
.\"These functions constitute the ELF access library, \f4libelf\f1.
.\"This library is not implemented as a shared object,
.\"and is not automatically linked by the C compilation system.
.\"Specify \f4\-lelf\f1 on the \f4cc\f1 command
.\"line to link with this library.
.TP
(3G)
These functions constitute the general-purpose library, \f4libgen\f1.
This library is implemented as a shared object and an archive,
and is not automatically linked by the C compilation system.
Specify \f4\-lgen\f1 on the \f4cc\f1 command line
to link with this library.
Declarations for these functions may be obtained from
the include file <\f2libgen.h\fP>.
.\".TP
.\"(3I)
.\"These functions constitute the Identification and Authentication Facility
.\"library, \f4libiaf\f1.
.\"This library is implemented as a
.\"shared object, \f4libiaf.so\f1, and an archive, \f4libiaf.a\f1.
.\"It is not automatically linked by the C compilation system.
.\"Specify \f4\-liaf\f1 on the \f4cc\f1 command line
.\"to link with the shared object version of the library.
.\"Specify \f4\-dn \-liaf\f1 on the \f4cc\f1 command
.\"line to link with the archive version.
.\"[See \f4cc\fP(1) for other overrides, and the
.\"``C Compilation System'' chapter of the
.\"\f2Programmer's Guide: ANSI C and Programming Support
.\"Tools\f1 for a discussion of the overrides.]
.TP
(3B)
.SM IRIX
supports many 4.3\s-1BSD\s+1 system calls and library routines.
To get the maximum Berkeley compatibility, use
the following compile line:
.RS
.Ex
cc -D_BSD_COMPAT -o prog prog.c -lbsd
.Ee
.SM
.B "\-D_BSD_SIGNALS"
on the compile line specifically selects the Berkeley signal routines and
.SM
.B "\-D_BSD_TIME"
selects the Berkeley time-of-day routines. Both are
a subset of the compatibility specified by
.SM
.BR "\-D_BSD_COMPAT" .
.sp .25v
The following 4.3\s-1BSD\s+1 standard C Library routines in
.I libbsd
have different arguments or conflicting semantics with the
routines in
.SM IRIX
.I libc
having the same names:
\f2dup2, getgroups, getpgrp, setgroups, setpgrp\fP.
To compile and link a program that calls the BSD version of any of these
routines, use a command of the form:
.Ex
cc  prog.c -lbsd
.Ee
See the "BSD Compatibility" section below for more details.
.RE
.ne 3v
.TP
(3N)
There are actually 3 types of networking in 
.SM IRIX.
.IP
1)  BSD sockets implemented in the kernel, along with 
SUN RPC and NIS (YP).  The functions that implement
these calls are in libc [see \f2(3C)\fP section above].
.IP	
2)  SVR4-style STREAMS/TLI networking (not sockets), along
with SVR4-style RPC.  SVR4-style RPC doesn't work with 
sockets, only with the TLI.  Also, SVR4-style networking 
does not support NIS [see \f2intro\fP(3N)].  The functions 
that implement these calls are in libnsl, and to use them, 
the code must be compiled with :
.RS
.Ex
cc -D_SVR4_TIRPC  prog.c -lnsl
.Ee
.RE
.IP
3)  SVR4 emulation of sockets.  This is an implementation of
sockets entirely in a library (libsocket) that sits on 
top of libnsl.  There are no header file differences for
libsocket.  The MIPS ABI-compliant programs that use 
sockets must (in order to be ABI-compliant) link with 
libsocket.  There is no NIS support for programs linked
with libsocket [see \f2intro\fP(3N)].  To compile such a 
program, use:
.RS
.Ex
cc prog.c -lsocket
.Ee
.RE
.PP
.TP
(3Y)
Remote Procedure Call (RPC) and NIS support routines.
These functions are in the standard C library
.IR libc ,
already mentioned.
.TP
(3R)
Remote Procedure Call
services built on top of the Sun RPC protocol.
To compile and link a program that calls any of these routines,
use a command of the form:
.RS
.Ex
cc prog.c -lrpcsvc
.Ee
.RE
.TP
(3P)
These functions constitute the parallel processing interfaces.
They comprise standard C library thread safe functions and POSIX threads
interfaces.
IRIX supports two threading models:
.IR sproc (2),
process level threads (IRIX, proprietary) and
.IR pthreads (3P)
(POSIX threads).
The models are quite different and cannot interact in the
same program; an sproc program cannot create pthreads and vice-versa.
Thread safe interfaces may be accessed by multiple threads or processes
simultaneously and are guaranteed to behave correctly.
.sp
In the sproc model no locking or single threading is done until the program
makes the first call to
.IR sproc ().
The 
.IR usconfig (3P)
interface can be used to alter the thread safe behavior of these routines.
Sproc programs wishing to do parallel processing should define the feature
test macros
.B _SGI_MP_SOURCE
and
.BR _SGI_REENTRANT_FUNCTIONS .
.sp
.B _SGI_MP_SOURCE
changes the
.I errno
variable from a global to a per thread private variable.
It also makes certain macros and function prototypes visible.
.sp
Pthread programs should enable the thread safe options
including reentrant functions and per thread
.I errno
by setting the POSIX feature test macro,
.B _POSIX_C_SOURCE
to the value \f2199506L\fP or greater;
the file <\f2pthread.h\fP> enables these options automatically.
.sp
The following calls have been single threaded so that multiple shared
processes accessing them simultaneously will function correctly:
.ft 2
getc, putc, fgetc, fputc, ungetc, getw, putw, gets, fgets, puts, fputs,
fopen, fdopen, freopen, ftell, rewind, feof, clearerr, ferror,
setbuf, setlinebuf, setbuffer, setvbuf, fclose, fflush, fread, fwrite, fseek,
fgetpos, fsetpos, flockfile, funlockfile,
tempnam, tmpnam, tmpfile, mktemp, mkstemp,
popen, pclose, atexit,
printf, fprintf, vprintf, vfprintf, scanf, fscanf,
opendir, readdir, scandir, seekdir, closedir, telldir,
dup2, srand, rand,
addsev, addseverity, fmtmsg, setcat, gettxt, lfmt, localeconv, nl_langinfo,
pfmt, setlabel, setlocale, strftime, strxfrm, strcoll, vlfmt, vpfmt
malloc, free, calloc, realloc, mallopt, memalign
acreate, amalloc, afree, acalloc, arealloc, amallopt.
.ft 1
.sp
.B _SGI_REENTRANT_FUNCTIONS
enables prototypes and definitions for reentrant versions of functions
that are not thread safe by definition (usually due to returning
pointers to static data).
These alternatives are named
.IR func _r
and are described on the same manual page as the original, unsafe version.
.sp
Functions that return pointers to static data are not reentrant.
When there is no alternative interface
threads must provide their own synchronization.
The following functions have non-obvious side-effects with
respect to reentrancy.
\f4setlocale\fP modifies many tables and static data.
In particular, any strings returned by
\f4strerror\fP and \f4gettxt\fP will no longer be valid.
\f4setlocale\fP also can affect other tables such as character class,
collating sequence and numeric separator, which many routines
access.
To be safe, no thread should be using any standard C library service
when a change to the locale must be made.
.TP
(3T)
These primitives implement a general terminal interface that provides
control over asynchronous communications ports.
These are all in the standard C library.
.TP
(3W)
These functions constitute the wide-character library
\f4libw\f1.
The functions are used to convert between multibyte
and 32-bit wide characters, respectively.
.\"For a discussion, see the \f2Programmer's Guide: Internationalization\f1.)
This library is implemented as a shared object and an archive
and is not automatically linked by the C compilation system.
Specify \f4\-lw\f1
on the \f4cc\fP command line to link with this library.
Declarations for these functions may be obtained from
the include file <\f2widec.h\fP>.
.TP
(3X)
Various
specialized libraries.
The files in which these libraries are found are given
on the appropriate pages.
.br
.PD 0.4v
.ne 5v
.SH "BSD COMPATIBILITY"
As described in the discussion of Section 3B above,
.Ex
cc -D_BSD_COMPAT -o prog prog.c -lbsd
.Ee
selects maximum compatibility with
.SM BSD.
The \f3\-lbsd\fP directive specifies that \f3libbsd.a\fP be searched before
\f3libc.a\fP, which selects the
.SM BSD
versions of functions that reside in both libraries
(duplicated because of identical names yet differing
semantics or arguments).  The routines that fall into this
category are listed in the (3B) section
above.  The
.SM BSD
versions may also be selected on a case-by-case basis by prefixing
the function name with
.SM
.B BSD
when calling it in the program
(e.g. \f2BSDsetpgrp\fP).
.PP
Specifying
.SM
.B "\-D_BSD_COMPAT"
or
.SM
.B "\-D_BSD_SIGNALS"
on the compile line links with the \s-1BSD\s+1
versions of the signal routines (\f2kill\fP,
\f2killpg\fP, \f2sigblock\fP, \f2signal\fP, \f2sigpause\fP,
\f2sigsetmask\fP, and \f2sigvec\fP).
The program must include <\f2signal.h\fP> or <\f2sys/signal.h\fP>.
Note that a "#define \s-1_BSD_COMPAT\s+1"
or "#define \s-1_BSD_SIGNALS\s+1" placed in the source program
before the inclusion of the signal header file has the same effect as
specifying the corresponding
.SM
.B \-D
compile option.
.PP
Specifying
.SM
.B "\-D_BSD_COMPAT"
or
.SM
.B "\-D_BSD_TIME"
on the compile line links with the \s-1BSD\s+1 versions of
the \f2gettimeofday\fP and \f2gettimeofday\fP routines.
The program must include <\f2sys/time.h\fP>. The
"#define \s-1_BSD_COMPAT\s+1" or "#define \s-1_BSD_TIME\s+1"
must be placed in the source program before the inclusion the
time header file if the
.SM
.B \-D
compile option is not specified.
.PP
Defining
.SM
.B "_BSD_COMPAT"
gives the following additional
.SM
BSD
compatibility features over and above that given by
.SM
.BR "_BSD_SIGNALS" and
.BR "_BSD_TIME" :
you get the
.SM
BSD
version of \f2setjmp\fP(3) and including <\f2sys/types.h\fP> will
cause several additional macros and typedefs to be defined (e.g. \f2major\fP,
\f2minor\fP, \f2makedev\fP for dealing with device numbers).
.SM
.B "_BSD_COMPAT"
may affect more things in future releases.
.PP
The System V and
.SM BSD
versions of the directory routines (\f2opendir\fP, \f2seekdir\fP, etc.)
differ greatly; inclusion of <\f2dirent.h\fP>
at the top of the your program selects the System V routines,
<\f2sys/dir.h\fP> selects the
.SM BSD
set.
See also \f2directory\fP(3C) and \f2directory_bsd\fP(3B).
.SH DEFINITIONS
A
character [except a multibyte character; see \f4mbchar\f1(3C)\f1]
is any bit pattern able to fit into a byte on the machine.
The
null character
is a character with value 0,
conventionally
represented in the C language as \f4\e0\f1.
A character array
is a sequence of characters.
A null-terminated character array
(a \f2string\f1)
is a sequence of
characters, the last of which is the
.IR "null character" .
A
.I string\^
is a designation for a
.IR "null-terminated character array" .
The
null string
is a character array containing only the terminating null character.
A
.SM
NULL
pointer is the value that is obtained by casting
\f40\f1
into a pointer.
C guarantees that this value will not match
that of any legitimate pointer, so many functions that
return pointers return
\f4NULL\f1
to indicate an error.
The macro
\f4NULL\f1
is defined
in
\f4stdio.h\f1.
Types of the form \f4size_t\f1 are defined in the appropriate header files.
.SH FILES
.ta \w'/usr/lib/librpcsvc.{so,a}XX'u
\f2\s-1INCDIR\s+1\f1	usually \f4/usr/include\f1
.br
\f2\s-1LIBDIR\s+1\f1	usually \f4/usr/lib\f1
.br
\f2\s-1LIBDIR\s+1\f4/libbsd.a\f1	BSD Compatibility library
.br
\f2\s-1LIBDIR\s+1\f4/libm.a\f1	Math library
.br
\f2\s-1LIBDIR\s+1\f4/libnsl.so\f1	Network Services library
.br
\f2\s-1LIBDIR\s+1\f4/libgen.{so,a}\f1	Misc routines
.br
\f2\s-1LIBDIR\s+1\f4/libgl.so\f1	GL library
.br
\f2\s-1LIBDIR\s+1\f4/librpcsvc.{so,a}\f1	RPC services library
.br
\f2\s-1LIBDIR\s+1\f4/libsocket.so\f1	Sockets Interface library
.br
\f2\s-1LIBDIR\s+1\f4/libpthread.so\f1	POSIX thread library
.br
\f2\s-1LIBDIR\s+1\f4/libw.{so,a}\f1	Wide character library
.br
\f4/usr/lib/libc.so.1\f1 	Runtime Linker/Standard C library
.br
.SH SEE ALSO
\f4ar\fp(1),
\f4cc\fp(1),
\f4ld\fp(1),
\f4nm\fp(1),
\f4intro\fp(2),
\f4usinit\fp(3P),
\f4pthread\fp(3P),
\f4flockfile\fp(3S),
\f4stdio\fp(3S)
.br
\f2Graphics Library User's Guide\fP
.\".SH DIAGNOSTICS
.\"For functions that return floating-point values,
.\"error handling varies
.\"according to compilation mode.
.\"Under the \f4\-Xt\f1 (default) option to \f4cc\f1,
.\"these functions return
.\"the conventional values
.\"\f4\&0\f1, \f4\(+-HUGE\f1, or \f4NaN\f1
.\"when the function is undefined for the
.\"given arguments or when the value is not representable.
.\"In the \f4\-Xa\f1 and \f4\-Xc\f1 compilation modes,
.\"\f4\(+-HUGE_VAL\f1 is returned instead of \f4\(+-HUGE\f1.
.\"(\f4HUGE_VAL\f1 and \f4HUGE\f1 are defined in \f4math.h\f1
.\"to be infinity and the largest-magnitude single-precision number,
.\"respectively.)
.SH NOTES
None of the functions, external variables,
or macros should be redefined in the user's programs.
Any other name may be redefined without affecting the
behavior of other library functions, but such redefinition may conflict with
a declaration in an included header file.
.P
The header files in
\f2\s-1INCDIR\s+1\f1
provide function prototypes
(function declarations including the types of arguments)
for most of the functions listed in this manual.
Function prototypes allow the compiler to check for correct usage
of these functions in the user's program.
The \f4lint\fP program checker
may also be used and will report discrepancies even if the
header files are not included with \f4#include\f1 statements.
Definitions for Sections 2, 3C, and 3S are
checked automatically.
Other definitions can be included by using the \\f4\-l\f1 option to \f4lint\f1.
(For example, \f4\-lm\f1 includes definitions for
\f4libm\f1.)
Use of \f4lint\fP is highly recommended.
.PP
Users should carefully note the difference between \s-1STREAMS\s+1
and \f2stream\f1.
\s-1STREAMS\s+1 is a set of kernel mechanisms that support the
development of network services and data communication drivers.
It is composed of utility routines, kernel facilities, and
a set of data structures.
A \f2stream\f1 is a file with its associated buffering.
It is declared to be a pointer to a type \f4FILE\f1
defined in \f4stdio.h\f1.
.sp .5
In detailed definitions of components, it is sometimes necessary to refer to
symbolic names that are implementation-specific, but which are not necessarily
expected to be accessible to an application program.
Many of these symbolic names describe boundary conditions and system limits.
.P
In this section, for readability, these implementation-specific
values are given symbolic names.
These names always appear enclosed in curly brackets to distinguish them from
symbolic names of other implementation-specific constants that are accessible
to application programs by header files.
These names are not necessarily accessible to an application program through
a header file, although they may be defined in the documentation for a
particular system.
.P
In general, a portable application program should not refer to these symbolic names
in its code.
For example, an application program would not be expected to test the length of
an argument list given to a
routine to determine if
it was greater than \f(CW{ARG_MAX}\f1.
.\"	@(#)intro.3	6.3 of 10/20/83
.Ee
