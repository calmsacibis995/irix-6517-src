'\"macro stdmacro
.TH AIO_SUSPEND 3 
.SH NAME
aio_suspend, aio_suspend64 \- wait for an asynchronous I/O request
.Op c p a
.SH C SYNOPSIS
.nf
.B #include <aio.h>
.PP
.B "int aio_suspend(const aiocb_t * const aiocbp[], int cnt, const timespec_t *timeout);
.PP
.B "int aio_suspend64(const aiocb64_t * const aiocbp[], int cnt, const timespec_t *timeout);
.fi
.PP
.Op
.SH DESCRIPTION
.PP
The 
.I aio_suspend()
function shall suspend the calling thread until at least one of the asynchronous I/O operations referenced by the 
.I aiocbp
argument has completed, until a signal interrupts the function, or if 
.I timeout
is not NULL, until the time interval specified by 
.I timeout
has passed. If any of the 
.I aiocb
structures in the list correspond to the completed asynchronous I/O operations(i.e., the error status for the operation is not equal to EINPROGRESS, at the time of the call), the function shall return without suspending the calling thread. The
.I aiocbp
argument points to an array of pointers to asynchronous I/O control blocks. The
.I cnt
argument indicates the number of elements in the array. Each
.I aiocb
structure pointed to shall have been used in initiating an asynchronous I/O request via 
.I aio_read(),
.I aio_write(),
or
.I lio_listio().
This array may contain NULL pointers which shall be ignored. If this array contains pointers that refer to
.I aiocb
structures which have not been used in submitting asynchronous I/O, the effect is undefined.
.P
The \f2aio_suspend64\f1() function is identical to \f2aio_suspend\f1() except
that it takes an  array of \f2aiocb64_t\f1 * (see <\f3aio.h\f1>).
This structure allows for the specification of a file offset greater than
2 Gigabytes.
The user must define \f3_ABI_SOURCE\f1 and include \f3-labi\f1 to
access the \f2aio64\f1 routines.
.sp
If the time interval indicated in the 
.I timespec
structure pointed to by
.I timeout
passes before any of the I/O operations referenced by
.I aiocbp 
are completed, then 
.I aio_suspend()
shall return with an error.
.SH "SEE ALSO"
aio_read(3), aio_write(3), lio_listio(3), aio_sgi_init(3)
.SH "DIAGNOSTICS"
.PP
If the
.I aio_suspend()
function returns after one or more asynchronous I/O operations has completed, zero is returned.
.sp
The application may determine which asynchronous I/O completed by scanning the associated error and return status, using 
.I aio_error(3)
and
.I aio_return(3),
respectively.
.sp
If any of the following conditions occur, the 
.I aio_suspend()
function shall return -1 and set
.I errno
to the corresponding value.
.TP 15
.SM
\%[EAGAIN]
No asynchronous I/O indicated in the list referenced by
.I aiocbp
completed in the time interval indicated by
.I timeout.
.TP 15
.SM
\%[EINTR]
A signal interrupted the 
.I aio_suspend()
function. Note that, since each asynchronous I/O operation may possibly provoke
a signal when it completes, this error return may be caused by the completion of one (or more) of the very I/O operation being awaited.
.TP
.SM
\%[EAGAIN]
The system was short of resources and unable to wait for I/O. 
