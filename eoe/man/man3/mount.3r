'\"macro stdmacro
.TH MOUNT 3R
.SH NAME
mount, sgi_mount \- keep track of remotely mounted filesystems
.SH SYNOPSIS
.ft 3
#include <rpcsvc/mount.h>
.SH "RPC INFORMATION"
.SS Program number:
.IP "MOUNTPROG, MOUNTPROG_SGI"
.PP
.SS XDR routines:
.Ex
bool_t	xdr_exportbody(XDR *, struct exports *)
bool_t	xdr_exports(XDR *, struct exports **);
bool_t	xdr_fhandle(XDR *, fhandle_t *);
bool_t	xdr_fhstatus(XDR *, struct fhstatus *);
bool_t	xdr_groups(XDR *, struct groups *);
bool_t	xdr_mountbody(XDR *, mountlist *);
bool_t	xdr_mountlist(XDR *, mountlist **);
bool_t	xdr_path(XDR *, char **);
/* sgi_mount only */
bool_t	xdr_exportlist(XDR *, struct exportlist **);
bool_t	xdr_exportentry(XDR *, struct exportentry **);
bool_t	xdr_statvfs(XDR *, struct mntrpc_statvfs *);
.Ee
.PP
.SS Procedures:
.IP MOUNTPROC_MNT
Argument of xdr_path, returns fhstatus.
.br
Requires UNIX authentication.
.IP MOUNTPROC_DUMP
No arguments, returns struct mountlist.
.IP MOUNTPROC_UMNT
Argument of xdr_path, no results.
.br
Requires UNIX authentication.
.IP MOUNTPROC_UMNTALL
No arguments, no results.
.br
Requires UNIX authentication.
.br
Unmounts all remote mounts of sender.
.IP MOUNTPROC_EXPORT
.IP MOUNTPROC_EXPORTALL
No arguments, returns struct exports.
.IP "MOUNTPROC_EXPORTLIST	(sgi_mount only)"
No arguments, returns struct exportlist.
.IP "MOUNTPROC_STATVFS	(sgi_mount only)"
Argument of xdr_path, returns mntrpc_statvfs.
.PP
.SS Versions:
.IP MOUNTVERS_ORIG
Universal program version.
.IP MOUNTVERS_SGI_ORIG
SGI enhanced version for complete exports inquiry and statvfs.
.PP
.SS Structures:
.Ex
struct mountlist {		/* what is mounted */
	char *ml_name;
	char *ml_path;
	struct mountlist *ml_nxt;
};
struct fhstatus {
	int fhs_status;
	fhandle_t fhs_fh;
};
/*
 * List of exported directories.
 * An export entry with ex_groups NULL indicates an entry
 * which is exported to the world.
 */
struct exports {
	dev_t		ex_dev;		/* dev of directory */
	char		*ex_name;	/* name of directory */
	struct groups	*ex_groups;	/* groups given access */
	struct exports	*ex_next;
};
struct groups {
	char		*g_name;
	struct groups	*g_next;
};
/* sgi_mount only */
struct exportlist {
	struct exportentry {
		char		*ee_dirname;
		char		*ee_options;
	} el_entry;
	struct exportlist	*el_next;
};
struct mntrpc_statvfs {
	u_long  f_bsize;        /* fundamental file system block size */
	u_long  f_frsize;       /* fragment size */
	u_long  f_blocks;       /* total # of blocks of f_frsize on fs */
	u_long  f_bfree;        /* total # of free blocks of f_frsize */
	u_long  f_bavail;       /* # of free blocks avail to non-superuser */
	u_long  f_files;        /* total # of file nodes (inodes) */
	u_long  f_ffree;        /* total # of free file nodes */
	u_long  f_favail;       /* # of free nodes avail to non-superuser */
	u_long  f_fsid;         /* file system id (dev for now) */
	char    f_basetype[16]; /* target fs type name, null-terminated */
	u_long  f_flag;         /* bit-mask of flags */
	u_long  f_namemax;      /* maximum file name length */
	char    f_fstr[32];     /* filesystem-specific string */
};
.Ee
.SH NOTE
To compile and link a program that calls these routines, follow the 
procedures for section (3R) routines as described in intro (3).
.SH SEE ALSO
exportfs(1M), mount(1M), showmount(1M), mountd(1M), exports(4).
'\".SH ORIGIN
'\"Sun Microsystems
