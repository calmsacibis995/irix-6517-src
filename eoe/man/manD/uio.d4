'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH ddi.rm/d4/gen/uio @(#)uio	43.7 of 11/18/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH uio D4
.IX "\f4uio\fP(D4)"
.IX "block I/O, \f4uio\fP(D4)"
.SH NAME
\f4uio\fP \- scatter/gather I/O request structure
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/types.h>
#include <sys/file.h>
#include <sys/uio.h>
#include <sys/ddi.h>
.ft 1
.ad
.fi
.SH DESCRIPTION
The \f4uio\fP structure describes an I/O request that
can be broken up into different data storage areas (scatter/gather I/O).
.IX "scatter/gather I/O"
A request is a list of \f4iovec\fP(D4) structures (base/length pairs)
indicating where in user space or kernel space the data are to be
read/written.
.SH USAGE
The contents of the \f4uio\fP structure passed to the driver through the
entry points in section D2 should not be changed directly by the driver.
The \f4uiomove\fP(D3),
\f4ureadc\fP(D3), and \f4uwritec\fP(D3) functions take care
of maintaining the \f4uio\fP structure.
A block driver may also use the \f4physiock\fP(D3) function to perform 
unbuffered I/O.
\f4physiock\fP also takes care of maintaining the \f4uio\fP structure.
.P
A driver that creates its own \f4uio\fP structures for a data transfer
is responsible for zeroing it prior to initializing members accessible
to the driver.
The driver must not change the \f4uio\fP structure afterwards; the
functions take care of maintaining the \f4uio\fP structure.
.P
Note that a separate interface does not currently exist for allocating
\f4uio\fP(D4) and \f4iovec\fP(D4) structures when the driver
needs to create them itself.
Therefore, the driver may either use 
\f4kmem_zalloc\fP(D3) to allocate them,
or allocate them statically.
.SS Structure Definitions
The \f4uio\fP structure contains the following members:
.P
.TS
lf4 2 lf4 2 lf4.
iovec_t	*uio_iov;	/* Pointer to the start of the iovec */
		/* array for the uio structure */
int	uio_iovcnt;	/* The number of iovecs in the array */
off_t	uio_offset;	/* Offset into file where data are */
		/* transferred from or to */
short	uio_segflg;	/* Identifies the type of I/O transfer */
short	uio_fmode;	/* File mode flags */
int	uio_resid;	/* Residual count */
.TE
.P
The driver may only set \f4uio\fP structure members to initialize 
them for a data transfer for which the driver created the 
\f4uio\fP structure.
The driver must not otherwise change \f4uio\fP 
structure members.
However, drivers may read them.
The \f4uio\fP structure members 
available for the driver to test or set are described below:
.P
\f4uio_iov\fP contains a pointer to the \f4iovec\fP array 
for the \f4uio\fP structure.
If the driver creates a \f4uio\fP 
structure for a data transfer, an associated \f4iovec\fP array 
must also be created by the driver.
.P
\f4uio_iovcnt\fP contains the number of elements in the \f4iovec\fP 
array for the \f4uio\fP structure.
.P
\f4uio_offset\fP contains the starting logical byte address on the 
device where the data transfer is to occur.
Applicability of 
this field to the driver is device-dependent.
It applies to randomly accessed devices,
but may not apply to all sequentially accessed devices.
.P
\f4uio_segflg\fP identifies the virtual address space in which the 
transfer data areas reside.
The value \f4UIO_SYSSPACE\fP indicates
the data areas are within kernel space.
The value \f4UIO_USERSPACE\fP 
indicates one data area is within kernel space and the other is within the 
user space of the current process context.
.P
\f4uio_fmode\fP contains flags describing the file access mode for 
which the data transfer is to occur.
Valid flags are:
.RS 0
.IP \f4FNDELAY\fP 18n
The driver should not wait if the requested data
transfer cannot occur immediately; it should terminate the
request without indicating an error occurred.
The driver's implementation of this flag's implied semantics are 
subject to device-dependent interpretation.
.IP \f4FNONBLOCK\fP
The driver should not wait if the requested data
transfer cannot occur immediately; it should terminate the request, 
returning the \f4EAGAIN\fP error code as the completion 
status [see \f4errnos\fP(D5)].
The driver's implementation of the implied semantics of this 
flag are subject to device-dependent interpretation.
.RE
.P
If the driver creates a \f4uio\fP structure for a data transfer, it
may set the flags described above in \f4uio_fmode\fP.
.P
\f4uio_resid\fP indicates the number of bytes that have not been 
transferred to or from the data area. 
If the driver creates a \f4uio\fP structure for a data transfer, 
\f4uio_resid\fP is initialized by the driver as the number of
bytes to be transferred.
Note that a separate interface does not currently exist for allocating
a \f4uio\fP structure.
.SH REFERENCES
.na
\f4iovec\fP(D4),
\f4physiock\fP(D3),
\f4read\fP(D2),
\f4uiomove\fP(D3),
\f4ureadc\fP(D3),
\f4uwritec\fP(D3),
\f4write\fP(D2)
.ad
