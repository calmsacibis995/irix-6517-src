.if n .pH ddi.rm/d3/gen/UNLOCK @(#)UNLOCK	43.9 of 11/30/92
.\" Copyright 1991, 1992 UNIX System Laboratories, Inc.
.TH UNLOCK D3
.SH NAME
\f4UNLOCK\f1 \- release a basic lock
.IX "\f4UNLOCK\fP(D3)"
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/types.h>
#include <sys/ksynch.h>
#include <sys/ddi.h>
.sp 0.4
void UNLOCK(lock_t *\f2lockp\fP, int \f2pl\fP);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP "\f2lockp\f1" 10n
Pointer to the basic lock to be released.
.IP "\f2pl\f1" 10n
The interrupt priority level to be set after releasing the lock.
This argument should be the value returned by \f4LOCK\f1.
.RE
.SH DESCRIPTION
\f4UNLOCK\f1 releases the basic lock specified by \f2lockp\f1 and then
sets the interrupt priority level in accordance with the value
specified by \f2pl\f1.
.SS "Return Values"
None
.SH USAGE
See the description of the \f2min_pl\f1 argument to \f4LOCK_ALLOC\f1(D3)
for a list of the valid values for \f2pl\f1.
If lock calls are not being nested or if the caller is unlocking in the
reverse order that locks were acquired, the \f2pl\f1 
argument should
be the value that was returned from the corresponding call to acquire the lock.
The caller may need to specify a different returned value by other \f4LOCK\f1 
for \f2pl\f1 if nested locks
are released in some order other than the reverse order of acquisition, so as
to ensure that the interrupt priority level is kept sufficiently high to
block interrupt code that might attempt to acquire locks which are still held.
.SS Level
Base or Interrupt.
.SS "Synchronization Constraints"
Does not sleep.
.P
Driver-defined basic locks,
read/write locks, and sleep locks may be held across calls to this function.
.SH REFERENCES
.na
\f4LOCK\fP(D3),
\f4LOCK_ALLOC\fP(D3),
\f4LOCK_DEALLOC\fP(D3),
\f4TRYLOCK\fP(D3)
.ad
