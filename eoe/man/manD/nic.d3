.TH nic D3
.IX "\f4nic_vertex_info_get\f1(D3)"
.IX "\f4nic_vertex_info_set\f1(D3)"
.IX "\f4nic_vertex_info_match\f1(D3)"
.IX "\f4nic_vmc_add\f1(D3)"
.IX "\f4nic_vmc_del\f1(D3)"
.IX "\f4nic_access_mcr32\f1(D3)"
.SH NAME
.nf
\f4nic_vertex_info_set\f1 \- decode NIC, label vertex
\f4nic_vertex_info_get\f1 \- get decoded NIC data from vertex
\f4nic_vertex_info_match\f1 \- check for NIC data match
\f4nic_vmc_add\f1 \- establish callback based on NIC data match
\f4nic_vmc_del\f1 \- deactivate NIC data match callback
\f4nic_access_mcr32\f1 \- common NIC access function
.fi
.SH SYNOPSIS
.ds fT \f1
.if t .ds fT \f4
.nf
\*(fT#include <sys/nic.h>
.sp .8v
char *
nic_vertex_info_set(
		nic_access_t \f2access\*(fT,
		nic_data_t \f2data\*(fT,
		vertex_hdl_t \f2vhdl\*(fT)
.sp .8v
char *
nic_vertex_info_get(
		vertex_hdl_t \f2vhdl\*(fT)
.sp .8v
int
nic_vertex_info_match(
		vertex_hdl_t \f2vhdl\*(fT,
		char *\f2string\*(fT)
.sp .8v
nic_vmce_t
nic_vmc_add(
		char *\f2string\*(fT,
		nic_vmc_func *\f2func\*(fT)
.sp .8v
void
nic_vmc_del(
		nic_vmce_t \f2entry\*(fT)
.sp .8v
nic_access_f	nic_access_mcr32;
.fi
.SS Arguments
.IP "\f2access\f1" 8n
is a NIC access function appropriate for
the ASIC through which the NIC is going
to be accessed.
.IP "\f2data\f1" 8n
is an appropriate value to pass as the first
parameter to the access function;
it is commonly an address through which
the NIC will be accessed.
.IP "\f2entry\f1" 8n
is an appropriate value returned from a previous
.IR nic_vmc_add ()
function call.
.IP "\f2string\f1" 8n
is data to be found as a substring of the
decoded NIC data.
Most commonly, it will be a seven digit
SGI board part number.
.IP "\f2vhdl\f1" 8n
is an appropriate handle to a vertex
corresponding to the device to which
the NIC is attached.
.SH DESCRIPTION
.P
The first time
.IR nic_vertex_info_set ()
is called, it
extracts and decodes the data from a NIC
using the specified access function and
data value,
then annotates the specified vertex with
the decoded data.
The NIC callback list is checked, and
any matching callbacks are triggered.
Subsequent calls merely return the
decoded data already on the vertex.
.P
.IR nic_vertex_info_get ()
returns the decoded NIC data attached
to the specified vertex, or NULL if no
decode has been attempted.
.P
.IR nic_vertex_info_match ()
retrieves the NIC data for the specified vertex,
and checks to see if the specified string is
a substring in the decoded NIC data, returning
nonzero if there is a match.
.P
.IR nic_vmc_add ()
is used to establish a NIC data based callback;
after this call is made, each NIC data decode
will also check for a match with the specified
string, and if there is a match, the callback
function will be triggered with the appropriate
vertex passed to it.
.P
.IR nic_vmc_del ()
is used to tear down a NIC data based callback.
.P
.IR nic_access_mcr32 ()
is a common NIC access function used by several
ASICs in current systems.
.\".SH EXAMPLES
.\".nf
.\".if t .ft 4
.\".fi
.\".ft 1
.\".SH NOTES
.\".SH FILES
.\".SH "SEE ALSO"
.SH DIAGNOSTICS
.P
.IR nic_vertex_info_get ()
returns NULL if there is no decoded NIC data
attached to the specified vertex.
