.if n .pH ddi.rm/d3/gen/sleep @(#)sleep	43.13 of 12/8/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH sleep D3
.IX "\f4sleep\fP(D3)"
.SH NAME
\f4sleep\f1 \- suspend process execution pending occurrence of an event
.SH SYNOPSIS
.nf
.ft 4
#include <sys/types.h>
#include <sys/param.h>
#include <sys/ddi.h>
.sp 0.4
int sleep(caddr_t \f2event\fP, int \f2flags\fP);
.ft 1
.fi
.SS Arguments
.RS 0
.TP .5i
\f2event\f1
Kernel address signifying an event for which the caller wishes to wait.
.TP
\f2flags\f1
Tells whether the sleep is interruptible or not.
.RE
.SH DESCRIPTION
\f4sleep\f1 suspends execution of a process to await certain events
such as reaching a known system state in hardware or software.
For instance,
when a process wants to read a device and no data are available,
the driver may need to call \f4sleep\f1
to wait for data to become available before returning.
This causes the kernel to suspend execution of
the process that called \f4sleep\f1 and schedule another process.
The process that called \f4sleep\f1 can be resumed by a call to the \f4wakeup\f1
function with the same \f2event\f1 specified as that used to call \f4sleep\f1.
.SS "Return Values"
\f4sleep\f1 returns \f40\f1 if the caller woke up because of a call
to \f4wakeup\f1.
If the sleep is interrupted by a signal
the \f4sleep\f1 call returns a value of \f41\f1.
.SH USAGE
.SS "event Argument"
The address has no significance except that the same address must be passed
to \f4wakeup\f1(D3) to resume the sleeping process.
The address used should be the
address of a kernel data structure associated with the driver,
or one of the driver's own data structures.
Use of arbitrary addresses not associated with a private data structure
can result in conflict with other, unrelated \f4sleep\f1 and \f4wakeup\f1
operations in the kernel.
.SS "flags Argument"
The value of the \f2flags\f1 argument determines whether the sleep
may be interrupted by signals.
If the value of \f2flags\f1 is less than or equal to the value of
the constant \f4PZERO\f1 (defined in \f4sys/param.h\f1), the sleeping process
will not be awakened by a signal.
If the value of \f2flags\f1 is greater than \f4PZERO\f1
the process will wake up prematurely (without a call to \f4wakeup\f1) upon
receipt of a non-ignored, non-held signal and will normally return \f41\f1 to
the calling code.
.SS "General Considerations"
If a process were to sleep while it is manipulating global data
inside a critical section of driver code, it would be possible for another
process to execute base level driver code which manipulates the same data
while the first process was sleeping, resulting in data corruption.
A driver should not sleep inside such a critical section unless
it takes explicit steps to prevent concurrent access to the data
(for example, the driver could implement its own locking protocol to protect the data).
.P
The value for \f2flags\f1 should be selected based on whether
or not a \f4wakeup\f1 is certain to occur as well as the importance
of the driver and of any resources that the driver will hold after
waking up.
If the driver is holding or waiting for a critical kernel resource
or is otherwise crucial to the performance of the system,
and the corresponding call to \f4wakeup\f1 is guaranteed to happen,
the driver should specify a \f2flags\f1 argument less than
or equal to \f4PZERO\f1.
If the driver is less performance critical or it is possible that the
\f4wakeup\f1 may not occur, the driver should specify a \f2flags\f1
argument greater than \f4PZERO\f1.
.P
\f4sleep\f1 will normally return a \f41\f1 in the event of a signal,
indicating that the calling routine should perform any necessary cleanup and then
return.
.SS Level
Base only.
.SS "Synchronization Constraints"
Can sleep.
.SS "Notes"
\f4sleep\f1 and \f4wakeup\f1 are not appropriate to use in most multiprocessing
systems.
They are only useful if it is known that the driver or system service will
only ever execute on a particular processor.
.SH REFERENCES
.na
\f4wakeup\fP(D3)
.ad
