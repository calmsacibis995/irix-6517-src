.TH psema D3X
.SH NAME
\f4psema\f1 \- perform a "P" or wait semaphore operation
.SH SYNOPSIS
.nf
\f4#include "sys/types.h"
#include "sys/param.h"
#include "sys/sema.h"
.sp
psema(sema_t *\f1\f2semap\f1\f4, int \f1\f2flags\f1\f4);\f1
.fi
.SH DESCRIPTION
\f4psema\f1 performs a "P" semaphore operation on the given semaphore.
The value associated with the semaphore is decremented by 1.
If the semaphore value then becomes less than 0, the process
goes to sleep and gives up the CPU. 
.P
Use \f2semap\f1 to pass \f4psema\f1 a pointer to the semaphore you want
to decrement. Use \f2flags\f1 to specify whether you want the process to be
able to be woken by a signal if it ends up going to sleep.
A flag value of (\f2flags\f1 & \f4PMASK\f1) > \f4PZERO\f1 will make the
process interruptible, otherwise it is not.
The required symbolic constants are defined in \f4param.h\fP.
If the process is awakened by a signal, then the
semaphore value is incremented and is allowed to continue.
.P
To initialize and allocate a semaphore, call \f4initnsema\f1 or
\f4initnsema\f1.
.SS "Return Values"
\f4psema\f1 returns \-1 if a breakable sleep is interrupted by a signal.
Otherwise \f4psema\f1 returns 0.
.SS Note
\f4psema\f1 may cause the calling process to sleep; it must not be called
from within an interrupt procedure. 
.SH "SEE ALSO"
\f4sleep\f1(D3), \f4SLEEP_LOCK\f1(D3)
