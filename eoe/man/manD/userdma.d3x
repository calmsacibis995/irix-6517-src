.TH userdma D3X
.SH NAME
\f4userdma\f1,\f4undma\f1 \- lock, unlock physical memory in user space
.SH SYNOPSIS
.nf
\f4#include "sys/types.h"
#include "sys/buf.h"
.sp
userdma(void *\f1\f2usr_v_addr\f1\f4, size_t \f1\f2num_bytes\f1\f4, int \f1\f2rw\f1\f4 void *\f1\f2MBZ\f1\f4);
.sp
undma(void *\f1\f2usr_v_addr\f1\f4, size_t \f1\f2num_bytes\f1\f4, int \f1\f2rw\f1\f4);\f1
.fi
.SS Arguments
.TP
\f2usr_v_addr\f1
User process address space.
.TP
\f2num_bytes\f1
Number of bytes.
.TP
\f2rw\f1
If set to \f2B_READ\f1, then the memory space will be readable
upon return from this call.
If set to \f2B_WRITE\f1, the memory will be writable upon return.
.TP
\f2MBZ\f1 must be set to 0.
.SH DESCRIPTION
\f4userdma\f1 prepares memory before a DMA operation into or from
a user process' address space.
It locks the physical pages associated with \f2num_bytes\f1
bytes of user virtual memory starting at location \f2usr_v_addr\f1.
If the \f2rw\f1 flag is set to \f4B_READ\f1,
then the memory space will be readable upon return from this call.
If, however, the flag is set to \f4B_WRITE\f1,
the memory will be writable upon return.
\f4userdma\f1 also invalidates the data cache lines corresponding
to the given address and count, if necessary.
.P
When the operation is complete, call \f4undma\f1 to unlock these pages.
.SH "RETURN VALUES"
If \f4userdma\f1 is successful, it returns 0;
otherwise, it returns an error number as follows: 
.TP
[EFAULT]
The user buffer was outside the allocated address space. 
.TP
[EAGAIN]
Total amount of system memory to lock user pages is temporarily insufficient.
