.\" Copyright 1991, 1992 UNIX System Laboratories, Inc.
.\" Copyright 1989 AT&T
.TH LOCK_ALLOC D3
.SH NAME
.upperok
\f4LOCK_ALLOC\f1, \f4LOCK_INIT\f1 \- basic lock initialization
.SH SYNOPSIS
.nf
.ft 3
#include <sys/types.h>
#include <sys/kmem.h>
#include <sys/ksynch.h>
#include <sys/ddi.h>
.sp .8v
lock_t *LOCK_ALLOC(uchar_t \f2hierarchy\fP, pl_t \f2min_pl\fP,
	lkinfo_t *\f2lkinfop\fP, int \f2flag\fP);
.sp .8v
void LOCK_INIT(lock_t *\f2lockp\fP, uchar_t \f2hierarchy\fP, pl_t \f2min_pl\fP,
	lkinfo_t *\f2lkinfop\fP);
.ft 1
.fi
.SS Arguments
.RS 0
.IP "\f2hierarchy\f1" 10n
Set to -1.
Reserved for future use.
.IP "\f2min_pl\f1" 10n
Minimum priority level argument which asserts the minimum priority level that
will be passed in with any attempt to acquire this lock [see \f4LOCK\f1(D3)].
.IP "\f2lkinfop\f1" 10n
Set to -1.
Reserved for future use.
.IP "\f2flag\f1" 10n
Specifies whether the caller is willing to sleep
waiting for memory.
.RE
.SH DESCRIPTION
LOCK_ALLOC dynamically allocates and initializes an instance of a
basic lock.
LOCK_INIT initializes an already-allocated instance of a basic lock.
The lock is initialized to the unlocked state.
.P
If
.I flag
is set to KM_SLEEP, the caller will sleep if
necessary until sufficient memory is available.
If
.I flag
is set to KM_NOSLEEP, the caller will not sleep,
but LOCK_ALLOC will return NULL if sufficient memory is not
immediately available.
.SS "Return Values"
Upon successful completion, LOCK_ALLOC returns a pointer to the newly
allocated lock.
If KM_NOSLEEP is specified and sufficient memory is not immediately
available, LOCK_ALLOC returns a NULL pointer.
.SS "min_pl Argument"
The valid values for this argument are as follows:
.P
.RS
.IP \f4plbase\f1 15n
Block no interrupts
.IP \f4pltimeout\f1
Block functions scheduled by itimeout and dtimeout
.IP \f4pldisk\f1
Block disk device interrupts
.IP \f4plstr\f1
Block STREAMS interrupts
.IP \f4plhi\f1
Block all interrupts
.RE
.P
The notion of a \f2min_pl\f1 assumes a defined order of priority levels.
The following partial order is defined:
.nf
.ft 4
.sp .8v
plbase < pltimeout <= pldisk,plstr <= plhi
.ft 1
.fi
.sp .8v
The ordering of \f4pldisk\f1 and \f4plstr\f1 relative to each other
is not defined.
.P
Setting a given priority level will block
interrupts associated with that level as well as any levels that are defined
to be less than or equal to the specified level.
In order to be portable a driver should not acquire locks at different
priority levels where the relative order of those priority levels is not
defined above.
.P
The \f2min_pl\f1 argument should specify a priority level that would be
sufficient to block out any interrupt handler that might attempt to acquire this
lock.
In addition, potential deadlock problems involving multiple locks should be
considered when defining the \f2min_pl\f1 value.
For example, if the normal order of acquisition of locks A and B (as
defined by the lock hierarchy) is to acquire A first and then B,
lock B should never be acquired at a priority level less than the
\f2min_pl\f1 for lock A.
Therefore, the \f2min_pl\f1 for lock B should be greater than or equal
to the \f2min_pl\f1 for lock A.
.P
Note that the specification of \f2min_pl\f1 with a \f4LOCK_ALLOC\f1 call does
not actually cause any interrupts to be blocked upon lock acquisition, it simply
asserts that subsequent \f4LOCK\f1 calls to acquire this lock will pass in a
priority level at least as great as \f2min_pl\f1.
.P
.SS Level
Base.
.SS "Synchronization Constraints"
May sleep if flag is set to \f4KM_SLEEP\f1 (\f4LOCK_ALLOC\f1 only) or
if debugging locks are installed.
.P
Driver-defined basic locks and read/write locks may not
be held across calls to this functions.
.P
Driver-defined sleep locks may be held
across calls to this function regardless of the value of \f2flag\f1.
.SH REFERENCES
LOCK(D3),
LOCK_DEALLOC(D3),
LOCK_DESTROY(D3),
TRYLOCK(D3),
UNLOCK(D3).
