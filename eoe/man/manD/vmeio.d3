.TH vmeio D3
.SH NAME
vmeio_piomap_alloc, 
vmeio_piomap_addr, 
vmeio_piomap_done,
vmeio_piomap_free,
vmeio_pio_bcopyin,
vmeio_pio_bcopyout,
vmeio_dmamap_alloc,
vmeio_dmamap_addr,
vmeio_dmamap_list,
vmeio_dmamap_done,
vmeio_dmamap_free,
vmeio_intr_alloc,
vmeio_intr_vector_get,
vmeio_intr_connect,
vmeio_intr_disconnect,
vmeio_intr_free,
\- VMEbus device driver API
.\" **********************
.SH SYNOPSIS
.\" **********************
.nf
.ft 3
.B #include <sys/vme/vmeio.h>
.\" **********************
.SS Programmed IO
.\" **********************
.sp .8v
vmeio_piomap_t vmeio_piomap_alloc(vertex_hdl_t vme_conn, 
                                  device_desc_t dev_desc,
                                  vmeio_space_t space, 
                                  iopaddr_t vmeaddr,    
                                  size_t byte_count,
.ti 20
                   size_t byte_count_max, 
.ti 20
                   unsigned flags); 
.sp .8v
caddr_t vmeio_piomap_addr(vmeio_piomap_t piomap,
                          iopaddr_t vmeaddr,	
                          size_t byte_count);
.sp .8v
void
vmeio_piomap_done(vmeio_piomap_t piomap);
.sp .8v
void
vmeio_piomap_free(vmeio_piomap_t piomap);
.sp .8v
size_t vmeio_pio_bcopyin(vmeio_piomap_t piomap,
                         iopaddr_t vmeaddr, 
                         caddr_t dest_sys_addr, 
                         int byte_count,
                         int itmsz, 
                         int flags);
.sp .8v
int vmeio_pio_bcopyout(vmeio_piomap_t piomap,
                       iopaddr_t vmeaddr,
                       caddr_t src_sys_addr,
                       size_t byte_count,
                       int itmsz,
                       int flags);
.ft 1
.fi
.\" **********************
.SS Arguments
.\" **********************
.IP "\f2vme_conn\fP" 13n
VMEbus connection point. 
.IP "\f2dev_desc\fP" 13n
Device descriptor, usually 0.
.IP "\f2space\fP" 13n
Type of the VMEbus space.
.IP "\f2vmeaddr\fP" 13n
The offset within the space.
.IP "\f2byte_count\fP" 13n
Size of the mapping.
.IP "\f2byte_count_max\fP" 16n
Maximum size of a single mapping.
.IP "\f2flags\fP" 13n
User specifiable options.
.IP "\f2piomap\fP" 13n
The mapping acquired by the 
.IR vmeio_piomap_alloc().
.IP "\f2dest_sys_addr\fP" 16n 
The system address which the data is copied to.
.IP "\f2src_sys_addr\fP" 16n 
The system address which the data is copied from.
.IP "\f2itmsz\fP" 13n
The unit of transfer.
.\" **********************
.SS Direct Memmory Access
.\" **********************
.sp .8v
vmeio_dmamap_t vmeio_dmamap_alloc(vertex_hdl_t vme_conn,
                                  device_desc_t dev_desc,
                                  vmeio_space_t space,
                                  size_t byte_count_max,
                                  unsigned flags);
.sp .8v
iopaddr_t vmeio_dmamap_addr(vmeio_dmamap_t dmamap,
                            paddr_t paddr,
                            size_t byte_count);
.sp .8v
alenlist_t vmeio_dmamap_list(vmeio_dmamap_t dmamap,
                             alenlist_t phys_alenlist,
                             unsigned flags);
.sp .8v
void
vmeio_dmamap_done(vmeio_dmamap_t dmamap);
.sp .8v
void
vmeio_dmamap_free(vmeio_dmamap_t dmamap);
.\" **********************
.SS Arguments
.\" **********************
.IP "\f2vme_conn\fP" 13n
VMEbus connection point.
.IP "\f2dev_desc\fP" 13n
Device descriptor, usually zero.
.IP "\f2space\fP" 13n
Type of the VMEbus space.
.IP "\f2byte_count_max\fP" 16n
Maximum size of a single mapping.
.IP "\f2dmamap\fP" 13n
The mapping resources aquired through
.IR vmeio_dmamap_alloc().
.IP "\f2paddr\fP" 13n
Physical address.
.IP "\f2byte_count\fP" 13n
Size of the mapping.
.IP "\f2phys_alenlist\fP" 16n
The list of pairs of physical address and length.
.IP "\f2flags\fP" 13n
Specifying attributes of the DMA mapping. 
.\" **********************
.SS Interrupt Handling
.\" **********************
.sp .8v
vmeio_intr_t vmeio_intr_alloc(vertex_hdl_t vme_conn,
                              device_desc_t dev_desc,
                              vmeio_intr_vector_t vec,
                              vmeio_intr_level_t level,
                              vertex_hdl_t owner_dev,
                              unsigned flags);
.sp .8v
vmeio_intr_vector_t
vmeio_intr_vector_get(vmeio_intr_t intr)
.sp .8v
int vmeio_intr_connect(vmeio_intr_t intr,
                       intr_func_t intr_func, 
                       intr_arg_t intr_arg,
                       void *thread);
.sp .8v
void
vmeio_intr_disconnect(vmeio_intr_t intr);
.sp .8v
void
vmeio_intr_free(vmeio_intr_t intr);
.\" **********************
.SS Arguments
.\" **********************
.IP "\f2vme_conn\fP" 13n
VMEbus connection point.
.IP "\f2dev_desc\fP" 13n
Device descriptor, usually zero.
.IP "\f2vec\fP" 13n
Interrupt vector number. 
.IP "\f2level\fP" 13n
VMEbus Interrupt level.
.IP "\f2owner_dev\fP" 13n
The vertex used to print messages about this particular interrupt,
usually zero.
.IP "\f2flags\fP" 13n
User specifiable options.
.IP "\f2intr\fP" 13n
Interrupt handle acquired by
.IR vmeio_intr_alloc().
.IP "\f2intr_func\fP" 13n
The function used for interrupt service.
.IP "\f2intr_arg\fP" 13
The argument passed to 
.IR "\f2intr_func\fP".
.\" **********************
.SH DESCRIPTION
.\" **********************
On Origin and Onyx2 systems,
.IR vmeio
provides a set of routines for VMEbus kernel device drivers to set up 
services for their devices.  These services include:
.IP \(bu 4n
registering all instances of the device in the system.
.IP \(bu 4n
constructing CPU addresses that the device can use to do PIO to the
device.
.IP \(bu 4n
constructing VMEbus addresses that the device can use to do DMA.
.IP \(bu 4n
arranging for a function to be called when the device requests
interrupt service.
.IP \(bu 4n
arranging for a function to be called when an error occurs during PIO
or DMA operations on the device.
.\" **********************
.SS Programmed IO
.\" **********************
.IR vmeio_piomap_alloc()
allocates the PIO resources for the given requirement. Return the
handle of the PIO resources if success, 0 otherwise. The VMEbus
specific flags include VME_PIOMAP_FIXED, VME_PIOMAP_UNFIXED, and
VME_DEBUG. VME_DEBUG is used to do more integrity checking. Possibly,
device driver writers can turn on this mode to sanity check their
drivers a bit, with some degree of performance degradation.
.PP
.IR vmeio_piomap_addr()
establishes a mapping from a VME bus address range to a kernel virtual
address range using the allocated PIO resources. Return the kernel
virtual address if success, 0 if otherwise.
.PP
.IR vmeio_piomap_done()
notifies the system that a driver is done with using the piomap
resources obtained by the earlier 
.IR vmeio_piomap_addr() 
call.
.PP
.IR vmeio_piomap_free()
frees the PIO mapping resources.
.PP
.IR vmeio_pio_bcopyin()
copies data from the device buffer to the system memory efficiently. The
unit of the transfer can be 1 byte, 2 bytes, 4 bytes, and 8
bytes. Return total bytes of successful transfer, -1 if function
fails.
.PP
.IR vmeio_pio_bcopyout()
copies data from the system memory to the device buffer efficiently. The
unit of the transfer can be 1 byte, 2 bytes, 4 bytes, and 8
bytes. Return total bytes of successful transfer, -1 if function
fails.
.\" **********************
.SS Direct Memory Access
.\" **********************
.IR vmeio_dmamap_alloc()
allocates mapping resources needed for DMA. Return the handle of the
new DMA map if success, 0 if failed. As described before, VME_DEBUG
can be used as a flag passed to have stronger integrity checking over
the life-span of the DMA map.  Flags available for this call are:
.IP "\f4VMEIO_DMA_DATA\f1" 8n
specifies that the DMA channel will be used for data streams.
Prefetch and postwrite are enabled on this mapping. 
.IP "\f4VMEIO_DMA_CMD\f1" 8n
specifies that the DMA channel will be used for command information.  
Prefetch and postwrite are disabled on this mapping. 
.PP
.IR vmeio_dmamap_addr()
establishes a mapping from a physical address range to a VMEbus
address range by using the allocated DMA resources. Return VMEbus
address mapped to the physical addr range if success, 
\f4VMEIO_DMA_INVALID_ADDR\f1 otherwise.
.PP
.IR vmeio_dmamap_list()
establishes the mapping from a list of (physical address, length) to a
list of (VMEbus address, length). Return the list of (VMEbus address,
length) if success, 0 if failed. The returned list should be freed
by the caller. Flags avalable for this call are:
.IP "\f4VMEIO_INPLACE\f1" 8n
requests that the list be modified in place when list operations are 
performed.
.IP "\f4VMEIO_NOSLEEP\f1" 8n
requests that the VMEbus provider not to sleep in resource
allocation and failure should be returned if sleep is necessary for
getting the resources. 
.PP
.IR vmeio_dmamap_done()
notifies the system that a driver is done with using the DMA mapping
resource.
.PP
.IR vmeio_dmamap_free()
frees the DMA resources acquired by 
.IR vmeio_dmamap_alloc()
call.
.\" **********************
.SS Interrupt Handling
.\" **********************
.IR vmeio_intr_alloc()
allocates interrupt resources. This function is usually called in
.IR <drv>_edtinit(). 
In some cases, users have a VME device which comes
with a fixed interrupt vector number, or users like to fix the
interrupt vector for their devices. If so, they can specify the vector
number on the VECTOR line statement. And they can declare the vector
number here. In most of cases, users just need a vector, they can pass
VME_INTR_VECTOR_ANY in the vmeio_intr_vector_t field. Here, VME_DEBUG
can be specified as a flag to help debugging.
.PP
.IR vmeio_intr_vector_get()
retrieves interrupt vector number from the interrupt object. Usually,
people will ask the system dynamically assign an interrupt vector so
that they can associate their interrupt handler.  They need this
function to find out what interrupt vector number is assigned to them
so that they can program interrupt registers of their
devices. Sometimes, the driver already knows the vector number since
they have declared the fixed ones in the configuration file.
.PP
.IR vmeio_intr_connect()
associates a software interrupt handler to the hardware interrupt
resources. Return 0 if success, -1 if failure.
.PP
.IR vmeio_intr_disconnect()
disassociates the interrupt handler from the specified interrupt.
.PP
.IR vmeio_intr_free()
frees the interrupt resources. Usually, the interrupt vector allocated
for the device is freed here.
.\" **********************
.SH FILES
.\" **********************
/var/sysgen/system
.br
/var/sysgen/master.d
.br
/var/sysgen/boot
.\" **********************
.SH SEE ALSO
.\" **********************
"IRIX Device Driver Programmer's Guide"
