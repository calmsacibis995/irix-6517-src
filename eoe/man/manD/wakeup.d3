.if n .pH ddi.rm/d3/gen/wakeup @(#)wakeup	43.11 of 12/8/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH wakeup D3
.IX "\f4wakeup\fP(D3)"
.SH NAME
\f4wakeup\f1 \- resume suspended process execution
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/types.h>
#include <sys/ddi.h>
.sp 0.4
void wakeup(caddr_t \f2event\fP);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP "\f2event\f1" 10n
Address that was passed to the corresponding call to \f4sleep\f1(D3)
which caused the process to be suspended.
.RE
.SH DESCRIPTION
\f4wakeup\f1 awakens all processes sleeping on the address specified
by \f2event\f1 and makes them eligible for scheduling.
.SS "Return Values"
None
.SH USAGE
The same \f2event\f1 argument must be used for corresponding calls to
\f4sleep\f1 and \f4wakeup\f1.
It is recommended
for code readability and for efficiency to have a one-to-one
correspondence between events and \f4sleep\f1 addresses.
.P
Whenever a driver returns from a call to \f4sleep\f1, it should test to ensure
that the event for which the driver slept actually occurred.
There is an interval between the time the process that called \f4sleep\f1 is
awakened and the time it resumes execution where the state forcing the
\f4sleep\f1 may have been reentered.
This can occur because all processes waiting for an event
are awakened at the same time.
The first process selected for execution by the scheduler
usually gains control of the event.
All other processes awakened should recognize that they cannot
continue and should reissue the \f4sleep\f1 call.
.SS Level
Base or Interrupt.
.SS "Synchronization Constraints"
Does not sleep.
.SH REFERENCES
.na
\f4sleep\fP(D3)
.ad
