.if n .pH ddi.rm/d3/gen/RW_RDLOCK @(#)RW_RDLOCK	43.11 of 12/5/92
.\" Copyright 1991, 1992 UNIX System Laboratories, Inc.
.TH RW_RDLOCK D3
.SH NAME
\f4RW_RDLOCK\f1 \- acquire a read/write lock in read mode
.IX "\f4RW_RDLOCK\f1(D3)"
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/ksynch.h>
#include <sys/ddi.h>
.sp 0.4
void RW_RDLOCK(rwlock_t *\f2lockp\f1);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP "\f2lockp\f1" 10n
Pointer to the read/write lock to be acquired.
.RE
.SH DESCRIPTION
\f4RW_RDLOCK\f1 acquires the read/write lock specified by \f2lockp\f1
in read mode.
If the lock is not immediately available in read mode,
the caller is put to sleep
(the caller's execution is suspended and other processes may be scheduled)
until the lock becomes available to the caller, at which point the caller
wakes up and returns with the lock held.
A read/write lock is available in read mode when the lock is not held
by any context in write mode.
.P
The caller will not be interrupted by signals while asleep waiting
to acquire the read/write lock.
.SS "Return Values"
None
.SS Level
Base only.
.SS "Synchronization Constraints"
Can sleep.
.P
Driver-defined basic locks may not be held
across calls to this function.
.P
Driver-defined sleep locks may be held across calls to this function
subject to the recursion restrictions described below.
.SS Warnings
Multiple calls to \f4RW_RDLOCK\f1 may be made to acquire the same lock,
but a context that holds a read/write lock in write mode cannot acquire
the same lock in read mode, and vice versa.
.SH REFERENCES
.na
\f4RW_ALLOC\f1(D3),
\f4RW_INIT\f1(D3),
\f4RW_DEALLOC\f1(D3),
\f4RW_DESTROY\f1(D3),
\f4RW_WRLOCK\f1(D3),
\f4RW_UNLOCK\f1(D3),
.ad
