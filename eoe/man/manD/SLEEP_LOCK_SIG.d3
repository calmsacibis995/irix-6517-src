.if n .pH ddi.rm/d3/gen/SLEEP_LOCK_S @(#)SLEEP_LOCK_S	43.11 of 12/5/92
.\" Copyright 1991, 1992 UNIX System Laboratories, Inc.
.TH SLEEP_LOCK_SIG D3
.SH NAME
\f4SLEEP_LOCK_SIG\f1 \- acquire a sleep lock
.IX "\f4SLEEP_LOCK_SIG\f1(D3)"
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/types.h>
#include <sys/ksynch.h>
#include <sys/ddi.h>
#include <sys/param.h>
.sp 0.4
boolean_t SLEEP_LOCK_SIG(sleep_t *\f2lockp\f1, int \f2priority\f1);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP \f2lockp\f1 10n
Pointer to the sleep lock to be acquired.
.IP \f2priority\f1
A hint to the scheduling policy as to the relative priority the caller
wishes to be assigned while running in the kernel after waking up.
.RE
.SH DESCRIPTION
\f4SLEEP_LOCK_SIG\f1 acquires the sleep lock specified by \f2lockp\f1.
If the lock is not immediately available, the caller is put to sleep
(the caller's execution is suspended and other processes may be scheduled)
until the lock becomes available to the caller, at which point the caller
wakes up and returns with the lock held.
.P
\f4SLEEP_LOCK_SIG\f1 may be interrupted by a signal, in which case it
may return early without acquiring the lock.
.P
If the function is interrupted by a job control stop signal (e.g., \f4SIGSTOP\f1,
\f4SIGTSTP\f1, \f4SIGTTIN\f1, \f4SIGTTOU\f1) which results in the caller
entering a stopped state, the \f4SLEEP_LOCK_SIG\f1 function will transparently
retry the lock operation upon continuing (the call will not return
without the lock).
.P
If the function is interrupted by a signal other than a job control stop
signal, or by a job control stop signal that does not result in the caller
stopping (because the signal has a non-default disposition), the
\f4SLEEP_LOCK_SIG\f1 call will return early without acquiring the lock.
.SS "Return Values"
\f4SLEEP_LOCK_SIG\f1 returns \f4TRUE\f1 (a non-zero value) if the lock
is successfully acquired or \f4FALSE\f1 (zero) if the function
returned early because of a signal.
.SH USAGE
.SS "Priority Argument"
In general, a lower value will result in more favorable 
scheduling although the exact semantic of the priority
argument is specific to the scheduling class of the caller,
and some scheduling classes may choose to ignore the argument
for the purposes of assigning a scheduling priority.
.P
The value of priority must be greater than PZERO
(defined in sys/param.h)
.P
In general, a higher relative priority should be used when the caller is attempting to acquire a highly contended lock 
or resource,or when the caller is already holding one or
more locks or kernel resources upon entry to
\f4SLEEP_LOCK_SIG\f1.
.sp 0.4
.SS Level
Base only.
.SS "Synchronization Constraints"
Can sleep.
.P
Driver-defined basic locks and read/write locks may not be held
across calls to this function.
.P
Driver-defined sleep locks may be held across calls to this function
subject to the recursion restrictions described below.
.SS Warnings
Sleep locks are not recursive.
A call to \f4SLEEP_LOCK_SIG\f1 attempting to acquire a lock that is currently
held by the calling context will result in deadlock.
.SH REFERENCES
.na
\f4SLEEP_ALLOC\f1(D3),
\f4SLEEP_INIT\f1(D3),
\f4SLEEP_DEALLOC\f1(D3),
\f4SLEEP_DESTROY\f1(D3),
\f4SLEEP_LOCK\f1(D3),
\f4SLEEP_LOCKAVAIL\f1(D3),
\f4SLEEP_TRYLOCK\f1(D3),
\f4SLEEP_UNLOCK\f1(D3),
\f4signals\f1(D5).
.ad
