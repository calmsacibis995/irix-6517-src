.if n .pH ddi.rm/d3/gen/unbufcall @(#)unbufcall	43.15 of 12/9/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH unbufcall D3
.IX "\f4unbufcall\fP(D3)"
.SH NAME
\f4unbufcall\f1 \- cancel a pending \f4bufcall\fP request
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/stream.h>
#include <sys/ddi.h>
.sp 0.4
void unbufcall(toid_t \f2id\fP);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP "\f2id\f1" 10n
Non-zero identifier returned from a prior call
to \f4bufcall\f1(D3) or \f4esbbcall\fP(D3).
.RE
.SH DESCRIPTION
\f4unbufcall\f1 cancels the pending \f4bufcall\fP or \f4esbbcall\fP request
specified by \f2id\fP.
.SS "Return Values"
None
.SH USAGE
If \f4unbufcall\fP is called while any function called by
the pending \f4bufcall\fP or \f4esbbcall\fP request is running,
the call to \f4unbufcall\fP has no effect.
.SS Level
Base or Interrupt.
.SS "Synchronization Constraints"
Does not sleep.
.P
Driver-defined basic locks, read/write locks, and sleep locks
may not be held across calls to this function.
.SS "Example"
See \f4bufcall\fP for the other half of this example.
.P
In the module close routine, if a \f4bufcall\fP request is pending (line 14),
we cancel it (line 15).  Otherwise, if a \f4itimeout\fP request is pending (line 16),
we cancel it (line 17).  Then the \f4m_type\fP field in the module's private
data structure is set to 0, indicating no pending \f4bufcall\fP or \f4itimeout\fP.
.P
.nf
.ft 4
.ps -1
.vs -2
 1  struct mod {
 2	long	m_id;
 3	char	m_type;
	...
 4  };
 5  #define TIMEOUT	1
 6  #define BUFCALL	2
    ...
 7  modclose(q, flag, crp)
 8	queue_t *q;
 9	int flag;
10	cred_t *crp;
11  {
12	struct mod *modp;
.sp 0.4
13	modp = (struct mod *)q->q_ptr;
14	if (modp->m_type == BUFCALL)
15		unbufcall(modp->m_id);
16	else if (modp->m_type == TIMEOUT)
17		untimeout(modp->m_id);
18	modp->m_type = 0;
	...
.vs
.ps
.ft 1
.fi
.IX "\f4unbufcall\fP(D3), example"
.IX "\f4untimeout\fP(D3), example"
.SH REFERENCES
.na
\f4bufcall\fP(D3),
\f4esbbcall\fP(D3)
.ad
