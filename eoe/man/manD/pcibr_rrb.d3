.TH pcibr_rrb D3
.IX "\f4pcibr_rrb_check\f1(D3)"
.IX "\f4pcibr_rrb_alloc\f1(D3)"
.IX "\f4pcibr_alloc_all_rrbs\f1(D3)"
.SH NAME
.nf
\f4pcibr_rrb_check\f1 \- query RRB allocation
\f4pcibr_rrb_alloc\f1 \- allocate RRBs for this slot
\f4pcibr_alloc_all_rrbs\f1 \- allocate RRBs for slot group
\f4pcibr_set_rrb_callback\f1 \- set up allocation callback
.fi
.SH SYNOPSIS
.ds fT \f1
.if t .ds fT \f4
.nf
\*(fT#include <sys/PCI/pcibr.h>
.sp .8v
int
pcibr_rrb_alloc(
		vertex_hdl_t \f2pconn_vhdl\*(fT,
		int *\f2count_vchan0\*(fT,
		int *\f2count_vchan1\*(fT)
.sp .8v
int
pcibr_rrb_check(vertex_hdl_t \f2pconn_vhdl\*(fT,
		int *\f2count_vchan0\*(fT,
		int *\f2count_vchan1\*(fT,
		int *\f2count_reserved\*(fT,
		int *\f2count_pool\*(fT)
.sp .8v
int
pcibr_alloc_all_rrbs(
		vertex_hdl_t \f2xconn_vhdl\*(fT,
		int \f2even_odd\*(fT,
		int \f2dev_1_rrbs\*(fT, int \f2virt1\*(fT,
		int \f2dev_2_rrbs\*(fT, int \f2virt2\*(fT,
		int \f2dev_3_rrbs\*(fT, int \f2virt3\*(fT,
		int \f2dev_4_rrbs\*(fT, int \f2virt4\*(fT)
.sp .8v
void
pcibr_set_rrb_callback(
		vertex_hdl_t \f2xconn_vhdl\*(fT,
		rrb_alloc_funct_t \f2rrb_alloc_funct\*(fT)
.fi


.SS Arguments

.IP "\f2pconn_vhdl\f1" 8n
is an appropriate PCI connection point.
.IP "\f2xconn_vhdl\f1" 8n
is an appropriate XIO connection point.
.IP "\f2count_vchan0\f1, \f2count_vchan1\f1"
is where to get and where to return RRB
counts for the primary and alternate
virtual DMA channels.
.IP "\f2even_odd\f1" 8n
specifies whether
.IR pcibr_alloc_all_rrbs ()
is operating on the RRB allocatios for
the even numbered or the odd numbered
PCI DMA REQ/GNT pairs.
Zero specifies the even pairs,
One specifies the odd pairs.
.IP "\f2dev_N_rrbs\f1" 8n
specifies the total RRBs to be allocated
for both virtual channels for the corresponding
REQ/GNT pair.
.IP "\f2virtN\f1" 8n
specifies whether alternate virtual channel
accesses will be made using the corresponding
REQ/GNT pair.
.SH DESCRIPTION
Drivers are not normally expected to need
to call any of these functions;
they exist for the use of drivers that
service devices that
actually contain the SGI XIO-PCI Bridge ASIC.
.P
.IR pcibr_rrb_alloc ()
is used to adjust the allocation for a specific
PCI DMA REQ/GNT pair,
when the automatic allocation
is insufficient, without modifying
the RRB allocations for other REQ/GNT pairs.
.P
.IR pcibr_rrb_check ()
can be used to observe the current 
RRB allocation state for a REQ/GNT pair
without changing it.
Note that the pool value returned may
change as other device drivers within
the same RRB pool allocate RRBs.
.P
.IR pcibr_alloc_all_rrbs ()
can be used to efficiently set up the
allocation for all four devices in
the RRB pool.
.P
The most common time to modify RRBs
is from a NIC callback based on
recognizing the XIO part number.
However, some drivers may want to do
further RRB adjustment after the
infrastructure hsa probed the contents
of the PCI bus.
.IR pcibr_set_rrb_callback ()
can be used to specify a function
to be called when pcibr has finished
taking inventory on the bus;
it is passed the XIO connection point
and an array containing the VENDOR_ID
values from the eight PCI slots.
.SS "Automatic RRB Management"
During the booting process,
the pcibr module observes the RRB
allocations that may have been made
by the boot prom.
Any RRBs assigned to REQ/GNT pairs
corresponding to IDSEL pins on which
there is no response
(and which are not noted specially
as secondary REQ/GNT pairs using
the pcibr hint mechanism
are unassigned.
.P
Based on the number of unassigned
RRBs in each group,
the number of active PCI DMA REQ/GNT
pairs and
the preallocation of RRBs,
some unassigned RRBs will be reserved
for each active REQ/GNT pair
so that each pair can have up to
three RRBs.
The reservation level may be decreased
to avoid overbooking the RRBs.
.P
When DMA related requests are received
by pcibr from pciio,
a check is made that at least one RRB
is actually assigned to that REQ/GNT
pair and virtual channel; if not,
one is assigned, either from that pair's
reservation pool or from the free pool.
If the DMA is marked as PREFETCH,
an attempt is made to allocate a
second RRB.
.P
In nearly all cases, the above algorithm
provides sufficient RRB resources for
optimum DMA performance.
.\".SH EXAMPLES
.\".nf
.\".if t .ft 4
.\".fi
.\".ft 1
.SH NOTES
Failure to automatically allocate an RRB
does not currently cause a failure to
map the DMA, but if no RRBs are assigned
and the device attempts to do a read
it will stall forever on the PCI bus.
.\" .SH FILES
.SH "SEE ALSO"
nic_vmc(D3),
pcibr_hints(D3),
pciio(D3)
.SH DIAGNOSTICS
All functions return zero if all went well,
or negative if there was a problem.

