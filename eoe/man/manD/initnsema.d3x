.TH initnsema D3X
.SH NAME
\f4initnsema\f1 \- initialize a synchronizing semaphore to a given value
.SH SYNOPSIS
.nf
\f4#include "sys/types.h"
#include "sys/sema.h"
.sp
initnsema(sema_t *\f1\f2semap\f1\f4, int \f1\f2val\f1\f4, char *\f1\f2name\f1\f4);\f1
.fi
.SH DESCRIPTION
\f4initnsema\f1 initializes an IRIX synchronizing semaphore
(a structure of type \f2sema_t\f1). Use synchronizing semaphores
to synchronize multiple processes. You must allocate a semaphore
before you can use it in a semaphore operation, such as \f4psema\f1
or \f4vsema\f1. You can declare semaphores in line by using
the \f2sema_t\f1 type, or you can allocate them dynamically by
using the kernel memory allocator, \f4kern_malloc\f1(D3X). In the
case of an already allocated semaphore struct, initsema fills it.
.P
The \f2val\f1 parameter expects the initial value to which you want
to set the semaphore. The \f2name\f1 parameter of \f4initnsema\f1
expects a pointer to an eight character string that contains the
name you want to assign to the semaphore. This name may be used by
debugging utilities. 
.SS "Return Values"
None
.SS "See Also"
\f4initnsema_mutex\f1(D3X), \f4cpsema\f1(D3X), \f4cvsema\f1(D3X),
\f4psema\f1(D3X), \f4vsema\f1(D3X), \f4sleep\f1(D3), \f4vpsema\f1(D3X),
\f4SLEEP_ALLOC\f1(D3), \f4SLEEP_DEALLOC\f1(D3)
