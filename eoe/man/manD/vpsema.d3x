.TH vpsema D3X
.SH NAME
\f4vpsema\f1 \- perform an atomic "V" and "P" semaphore operation on two semaphores
.SH SYNOPSIS
.nf
\f4#include "sys/types.h"
#include "sys/param.h"
#include "sys/sema.h"
.sp
vpsema(sema_t *\f1\f2sema1p\f1\f4, sema_t *\f1\f2sema2p\f1\f4, int \f1\f2priority\f1\f4);\f1
.fi
.SH DESCRIPTION
\f4vpsema\f1 performs a \f4vsema\f1 operation with the first semaphore
and a \f4psema\f1 on the second semaphore and the given
priority. (See \f4psema\f1(D3X) and \f4vsema\f1(D3X) for details on
these operations.) \f4vpsema\f1 is atomic in the sense that no other
process (on a multiprocessor) can perform a semaphore operation on the
first semaphore before the \f4psema\f1 operation has been performed
on the second semaphore. It effectively "swaps" one semaphore for another.
.P
To initialize semaphores, use \f4initnsema\f1(D3X)
or \f4initnsema_mutex\f1(D3X).
.SS "Return Values"
\f4vpsema\f1 returns \-1 if a signal interrupts a breakable sleep
and \f2PCATCH\f1 was set; otherwise, it returns 0.
.SS "See Also"
\f4initnsema\f1(D3X), \f4initnsema_mutex\f1(D3X),
\f4psema\f1(D3X), \f4vsema\f1(D3X), \f4SLEEP_UNLOCK\f1(D3)
