.if n .pH ddi.rm/d1/gen/prefix @(#)prefix	43.10 of 11/18/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH prefix D1
.IX "\f4prefix\fP(D1)"
.SH NAME
\f4prefix\fP \- driver prefix
.SH SYNOPSIS
.nf
.na
.ft 4
int \f2prefix\fPclose();
int \f2prefix\fPopen();
\&. . .
.ft 1
.ad
.fi
.SH DESCRIPTION
Every driver must define a unique prefix.
This enables driver entry points
to be identified by configuration software
and decreases the possibility of global symbol collisions in the kernel.
.SH USAGE
The prefix is usually specified in a configuration file.
The maximum length of the prefix is implementation-defined.
Driver entry points names are
created by concatenating the driver prefix with the name for the entry point.
.SS Examples
An ETHERNET driver might use a driver prefix of ``\f4en\fP.''
It would define the following entry points:
\f4enclose\fP,\f4 eninit\fP,\f4 enintr\fP,\f4 enopen\fP,
\f4 enwput\fP,\f4 enrsrv\fP, and\f4 enwsrv\fP.
It would also define the data symbols
\f4endevflag\fP and \f4eninfo\fP.
.SH REFERENCES
.na
\f4devflag\fP(D1),
\f4info\fP(D1),
\f4close\fP(D2),
\f4halt\fP(D2),
\f4init\fP(D2),
\f4intr\fP(D2),
\f4ioctl\fP(D2),
\f4mmap\fP(D2),
\f4open\fP(D2),
\f4poll\fP(D2),
\f4print\fP(D2),
\f4put\fP(D2),
\f4read\fP(D2),
\f4size\fP(D2),
\f4srv\fP(D2),
\f4start\fP(D2),
\f4strategy\fP(D2),
\f4unload\fP(D2),
\f4write\fP(D2)
.ad
