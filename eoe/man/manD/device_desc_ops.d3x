.TH device_desc_ops D3X
.SH NAME
device_desc_ops: device_desc_dup,
device_desc_free,
device_desc_default_get,
device_desc_default_set,
device_desc_intr_target_get,
device_desc_intr_target_set \- operations on device descriptors
.SH SYNOPSIS
.nf
.ft 3
#include <sys/types.h>
#include <sys/iobus.h>
.sp .8v
device_desc_t
device_desc_dup(vertex_hdl_t dev);
.sp .8v
void
device_desc_free(device_desc_t device_desc);
.sp .8v
device_desc_t
device_desc_default_get(vertex_hdl_t dev);
.sp .8v
void
device_desc_default_set(vertex_hdl_t dev, device_desc_t device_desc);
.sp .8v
vertex_hdl_t
device_desc_intr_target_get(device_desc_t device_desc);
.sp .8v
void
device_desc_intr_target_set(device_desc_t device_desc, vertex_hdl_t dev);
.ft 1
.fi
.SS Arguments
.IP dev 12n
A hwgraph vertex representing a device.
.IP device_desc 12n
Handle to a device descriptor object.
.SH DESCRIPTION
For an overview, see
.IR device_desc (D4X).
.P
Call
.IR device_desc_dup ()
to obtain the handle of a writeable copy of the default device
descriptor for a given hwgraph vertex.
If the administrator did not specify any information for
.IR dev ,
the returned descriptor contains all NULL values, indicating defaults.
It is the caller's responsibility to
free the device descriptor when it is no longer needed.
.P
Free a descriptor by calling
.IR device_desc_free ().
The memory is reclaimed if the descriptor
is not currently associated with a device.
.P
Call
.IR device_desc_default_get ()
to obtain a handle to a read-only copy of a device descriptor.
It is illegal for a driver to attempt any
.I set
operation on a read-only device descriptor.
This interface allows a driver to query the current device descriptor
information associated with a device using the
.I get
operations.
.P
Calling
.IR device_desc_default_set ()
establishes a new default device descriptor for the specified device.
The information
will be used as the new defaults for this device unless they are
explicitly overridden.
If device_desc
is NULL,
the default device descriptor information associated
with
.I dev
is removed,
and the device descriptor is freed
(thus it can no longer be used for any purpose!).
If
.I device_desc
is non-NULL, it must have
been created by a previous invocation of
.IR device_desc_dup ().
.IR device_desc_default_set ()
should be used only on a quiesced device.
.P
Call
.IR device_desc_intr_target_get ()
to query a (non-NULL) device_desc handle.
The returned value is a dev_t that represents the
interrupt target for this device (a vertex in the hwgraph representing a CPU).
.P
Call
.IR device_desc_intr_target_set ()
to set the interrupt target (usually a CPU dev_t)
in the specified device descriptor.
Subsequently, the caller can use the modified device_desc
in an I/O infrastructure call, or can associate it with the
device using
.IR device_desc_default_set ().
.SH SEE ALSO
device_desc(D4X).
