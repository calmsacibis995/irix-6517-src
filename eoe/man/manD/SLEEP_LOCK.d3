.if n .pH ddi.rm/d3/gen/SLEEP_LOCK @(#)SLEEP_LOCK	43.11 of 12/5/92
.\" Copyright 1991, 1992 UNIX System Laboratories, Inc.
.TH SLEEP_LOCK D3
.SH NAME
\f4SLEEP_LOCK\f1 \- acquire a sleep lock
.IX "\f4SLEEP_LOCK\f1(D3)"
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/ksynch.h>
#include <sys/ddi.h>
.sp 0.4
void SLEEP_LOCK(sleep_t *\f2lockp\f1, int \f2priority\f1);
.ft 1
.ad
.fi
.SS Arguments
.RS 0
.IP "\f2lockp\f1" 10n
Pointer to the sleep lock to be acquired.
.IP "\f2priority\f1" 10n
Reserved for future use (must be equal to -1).
.RE
.SH DESCRIPTION
\f4SLEEP_LOCK\f1 acquires the sleep lock specified by \f2lockp\f1.
If the lock is not immediately available, the caller is put to sleep
(the caller's execution is suspended and other processes may be scheduled)
until the lock becomes available to the caller, at which point the caller
wakes up and returns with the lock held.
.P
The caller will not be interrupted by signals while sleeping inside
\f4SLEEP_LOCK\f1.
.SS "Return Values"
None
.SS Level
Base only.
.SS "Synchronization Constraints"
Can sleep.
.P
Driver-defined basic locks and read/write locks may not be held
across calls to this function.
.P
Driver-defined sleep locks may be held across calls to this function
subject to the recursion restrictions described below.
.SS Warnings
Sleep locks are not recursive.
A call to \f4SLEEP_LOCK\f1 attempting to acquire a lock that is currently held
by the calling context will result in deadlock.
.SH REFERENCES
.na
\f4psema\f1(D3X),
\f4SLEEP_ALLOC\f1(D3),
\f4SLEEP_INIT\f1(D3),
\f4SLEEP_DEALLOC\f1(D3),
\f4SLEEP_DESTROY\f1(D3),
\f4SLEEP_LOCK_SIG\f1(D3),
\f4SLEEP_LOCKAVAIL\f1(D3),
\f4SLEEP_TRYLOCK\f1(D3),
\f4SLEEP_UNLOCK\f1(D3)
.ad
