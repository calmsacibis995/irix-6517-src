.TH "hwgraph.vertex" D3X
.SH NAME
\f4hwgraph.vertex:\f1 hwgraph_vertex_create,
hwgraph_vertex_destroy, hwgraph_vertex_clone, hwgraph_vertex_ref,
hwgraph_vertex_unref \- manage vertexes of hardware graph
.SH SYNOPSIS
.nf
.ft 3
#include <sys/types.h>
#include <sys/hwgraph.h>
#include <sys/ddi.h>
.sp .8v
graph_error_t
hwgraph_vertex_create(vertex_hdl_t *\f2vhdlp\fP);
.sp .8v
graph_error_t
hwgraph_vertex_destroy(vertex_hdl_t \f2vhdl\fP);
.sp .8v
graph_error_t
hwgraph_vertex_clone(vertex_hdl_t \f2vhdl,\fP vertex_hdl_t *\f2vhdlp\fP);
.sp .8v
graph_error_t
hwgraph_vertex_ref(vertex_hdl_t \f2vhdl\fP);
.sp .8v
graph_error_t
hwgraph_vertex_unref(vertex_hdl_t \f2vhdl\fP);\f1
.ft 1
.fi
.SS Arguments
.IP "\f2vhdl\fP" 12n
Handle of existing vertex, input to the operation.
.IP "\f2vhdlp\fP"
Address of a field to receive the handle of a new vertex
created in the operation.
.SH DESCRIPTION
These functions are used by the kernel to implement higher-level
hwgraph operations such as
.IR hwgraph_char_device_add ()
(see
.IR hwgraph.dev (D3X)).
These functions are almost never needed by a device driver.
One reason is that the higher-level functions properly manage
the vertex reference count, an issue with many complexities.
.IP \(bu 4n
.IR hwgraph_vertex_create ()
creates a new vertex with a reference count of 1.
.IP \(bu 4n
.IR hwgraph_vertex_destroy ()
marks the vertex to be recycled when its reference count falls to 0.
.IP \(bu 4n
.IR hwgraph_vertex_clone ()
makes a copy of a vertex.
.IP \(bu 4n
.IR hwgraph_vertex_ref ()
explicitly increments the reference count of a vertex.
.IP \(bu 4n
.IR hwgraph_vertex_unref ()
explicitly decrements the reference count of a vertex.
.SH DIAGNOSTICS
Functions return GRAPH_SUCCESS when the operation completes successfully,
or a failure code as defined in
.IR hwgraph.intro (D3X)
when the operation does not complete
successfully.
.SH SEE ALSO
hwgraph.dev(D3X),
hwgraph.intro(D4X).
