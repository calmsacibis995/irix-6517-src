'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH ddi.rm/d4/386/eisa_dma_cb @(#)eisa_dma_cb	43.10 of 12/4/92
.\" Copyright 1992, 1991 UNIX System Laboratories, Inc.
.TH eisa_dma_cb D4
.IX "\f4eisa_dma_cb\fP(D4)"
.IX "block I/O, \f4eisa_dma_cb\fP(D4)"
.SH NAME
\f4eisa_dma_cb\fP \- DMA command block structure
.SH SYNOPSIS
.nf
.na
.ft 4
#include <sys/types.h>
#include <sys/eisa.h>
.ft 1
.ad
.fi
.SH DESCRIPTION
The EISA DMA command block structure is used to
control a DMA operation.
.SH USAGE
Each DMA operation requested by a driver
is controlled by a command block structure
whose fields specify the operation to occur.
.P
The DMA control block specifies the parameters to be programmed
for a requestor and
a target.
The requestor is the hardware device
that is requesting the DMA operation,
while the target is the target of the operation.
The typical case is one in which the
requestor is an I/O device and the target is memory.
.P
EISA DMA command block structures should only be allocated
via \f4eisa_dma_get_cb\fP(D3X).
Although drivers may access the structure members listed below,
they should not make any assumptions about the size of the
structure or the contents of other fields in the structure.
.SS Structure Definitions
The \f4eisa_dma_cb\fP structure contains the following members:
.P
.TS
lf4p9 2 lf4p9 2 lf4p9.
.vs -1
struct eisa_dma_buf	*reqrbufs;	/* requestor data buffer list */
uchar_t	trans_type;	/* Single/Demand/Block/Cascade */
uchar_t	reqr_path;	/* 8/16/32 */
uchar_t	bufprocess;	/* Single/Chain/Auto-Init */
uchar_t	reqr_bswap;	/* byte swap data on/off */
char	*procparam;	/* parameter buffer for appl call */
int	(*proc)();	/* address of application call routines */
.vs
.TE
.P
The following bit-fields defined in the \f4eisa_dma_cb\fP structure
should be initialized using the appropriate EISA defines described below:
.P
.TS
lf4p9 2 lf4p9 2 lf4p9.
.vs -1
cb_cmd;	/* Read/Write/Translate/Verify */
targ_step;	/* Inc/Dec/Hold  */
trans_type;	/* Single/Demand/Block/Cascade */
reqr_path;	/* 8/16/32 */
reqr_timing;	/* A, B, C, ISA compatible */
reqr_ringstop;	/* use channel's stop registers */
reqr_eop:	/* is EOP input/output */
.vs
.TE
.P
The members of the \f4eisa_dma_cb\fP structure are:
.P
\f4reqrbufs\fP is a pointer to a list of DMA buffer
structures [see \f4eisa_dma_buf\fP(D4)] that describes
the requestor of the DMA operation.
.P
\f4bufprocess\fP specifies how the DMA target buffer
structures are to be processed.
It may have the following values:
.RS
.IP \f4EISA_DMA_BUF_SNGL\fP 18n
Specifies that the target consists of a single DMA Buffer.
.IP \f4EISA_DMA_BUF_CHAIN\fP 18n
Specifies that the target consists of a chain of DMA Buffers.
.RE
.P
\f4reqr_bswap\fP specifies whether data should be byte-swapped 
between the EISA bus and the host memory bus.
It may have one of the following values:
.RS
.IP \f4EISA_DMA_BSWAP_ON\fP 18n
Specifies that byte swapping should be performed.
.IP \f4EISA_DMA_BSWAP_OFF\fP 18n
Specifies that byte swapping should not be performed.
.RE
.P
\f4procparam\fP is the parameter to be passed to the
subroutine specified by the \f4proc\fP field.
.P
\f4proc\fP specifies the address of a routine to be
called when a DMA operation is enabled
by \f4eisa_dma_enable\fP(D3X).  Typically, this is
used to program the hardware commands that initiate
the DMA operation.
The value in the \f4procparam\fP field is
passed as an argument to this routine.
This field may be set to \f4NULL\fP
if no procedure is to be called.
.P
\f4cb_cmd\fP specifies the command for the DMA operation.
It may be one of the following values:
.RS
.IP \f4EISA_DMA_CMD_READ\fP 18n
Specifies a DMA read from the target to the requestor.
.IP \f4EISA_DMA_CMD_WRITE\fP 18n
Specifies a DMA write from the requestor to the target.
.RE
.P
\f4targ_step\fP specifies how the target
addresses are to be modified after each transfer.
They each may have one of the following values:
.RS
.IP \f4EISA_DMA_STEP_INC\fP 18n
Specifies that the target address is to be incremented
following each data transfer.
.IP \f4EISA_DMA_STEP_DEC\fP 18n
Specifies that the target address is to be decremented
following each data transfer
.RE
.P
\f4trans_type\fP specifies the transfer type of the operation.
It can have one of the following values:
.RS
.IP \f4EISA_DMA_TRANS_SNGL\fP 18n
Specifies that a single transfer is to occur.
.IP \f4EISA_DMA_TRANS_BLCK\fP 18n
Specifies that a block transfer is to occur.
This is the only acceptable value for software-initiated transfers.
.IP \f4EISA_DMA_TRANS_DMND\fP 18n
Specifies demand transfer mode, which is a variation on block transfer
in which the requestor may provide additional control flow on the transfer.
.RE
.P
\f4reqr_path\fP species the size of the data path
for the requestor.
It may have one of the following values:
.RS
.IP \f4EISA_DMA_PATH_8\fP 18n
Specifies that the requestor uses an 8-bit data path.
.IP \f4EISA_DMA_PATH_16\fP 18n
Specifies that the requestor uses a 16-bit data path.
.IP \f4EISA_DMA_PATH_32\fP 18n
Specifies that the requestor uses a 32-bit data path.
.RE
.P
\f4reqr_timing\fP specifies the timing mode that requestor
hardware uses.  Its values can be:
.RS
.IP \f4EISA_DMA_TIME_ISA\fP 18n
Specifies that ISA compatibility timing is being used.
.IP \f4EISA_DMA_TIME_A\fP 18n
Specifies that EISA type A timing is being used.
.IP \f4EISA_DMA_TIME_B\fP 18n
Specifies that EISA type B timing is being used.
.IP \f4EISA_DMA_TIME_C\fP 18n
Specifies that EISA type C timing is being used.
.RE
.P
\f4reqr_ringstop\fP indicates whether or not the EISA
ring buffer feature should be enabled or disabled.
It may have one of the following values:
.RS
.IP \f4EISA_DMA_RING_OFF\fP 18n
Disable the EISA ring buffer feature.
.IP \f4EISA_DMA_RING_ON\fP 18n
Enable the EISA ring buffer feature.
.RE
.P
\f4reqr_eop\fP indicates whether EOP acts as a hardware
input or output.  Typically EOP operates as an output to
generate interrupts.
It may have one of the following values:
.IP \f4EISA_DMA_EOP_OUTPUT\fP 18n
EOP is an output.
.IP \f4EISA_DMA_EOP_INPUT\fP 18n
EOP is an input.
.RS
.SH REFERENCES
.na
\f4eisa_dma_buf\fP(D4),
\f4eisa_dma_free_cb\fP(D3X),
\f4eisa_dma_get_cb\fP(D3X),
\f4eisa_dma_prog\fP(D3X),
\f4eisa_dma_swstart\fP(D3X)
.ad
