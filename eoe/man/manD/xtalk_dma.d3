.TH xtalk_dma D3
.IX "\f4xtalk_dmatrans_addr\f1(D3)"
.IX "\f4xtalk_dmatrans_list\f1(D3)"
.IX "\f4xtalk_dmamap_alloc\f1(D3)"
.IX "\f4xtalk_dmamap_addr\f1(D3)"
.IX "\f4xtalk_dmamap_list\f1(D3)"
.IX "\f4xtalk_dmamap_done\f1(D3)"
.IX "\f4xtalk_dmamap_free\f1(D3)"
.IX "\f4xtalk_dmaspace_alloc\f1(D3)"
.IX "\f4xtalk_dmaspace_free\f1(D3)"
.IX "\f4xtalk_dmamap_drain\f1(D3)"
.IX "\f4xtalk_dmaaddr_drain\f1(D3)"
.IX "\f4xtalk_dmalist_drain\f1(D3)"
.SH NAME
.nf
\f4xtalk_dmatrans_addr\f1 \- construct DMA address
\f4xtalk_dmatrans_list\f1 \- construct DMA addresses
\f4xtalk_dmamap_alloc\f1 \- allocate an XIO DMA channel
\f4xtalk_dmamap_addr\f1 \- set DMA channel target
\f4xtalk_dmamap_list\f1 \- set DMA channel targets
\f4xtalk_dmamap_done\f1 \- mark DMA channel unused
\f4xtalk_dmamap_free\f1 \- release XIO DMA channel resources
\f4xtalk_dmamap_drain\f1 \- drain a DMA MAP based DMA path
\f4xtalk_dmaaddr_drain\f1 \- drain a DMA path to a specific block
\f4xtalk_dmalist_drain\f1 \- drain a DMA path for an alenlist
.fi
.SH SYNOPSIS
.nf
.ds fT \f1
.if t .ds fT \f4
\*(fT#include <sys/xtalk/xtalk.h>
.sp .8v
iopaddr_t
xtalk_dmatrans_addr(
	vertex_hdl_t \f2vhdl\*(fT,
	device_desc_t \f2desc\*(fT,
	iopaddr_t \f2addr\*(fT,
	size_t \f2size\*(fT,
	unsigned \f2flags\*(fT)
.sp .8v
alenlist_t
xtalk_dmatrans_list(
	vertex_hdl_t \f2vhdl\*(fT,
	device_desc_t \f2desc\*(fT,
	alenlist_t \f2list\*(fT,
	unsigned \f2flags\*(fT)
.sp .8v
xtalk_dmamap_t
xtalk_dmamap_alloc(
	vertex_hdl_t \f2vhdl\*(fT,
	device_desc_t \f2desc\*(fT,
	xtalk_space_t \f2space\*(fT,
	size_t \f2max\*(fT,
	unsigned \f2flags\*(fT)
.sp .8v
iopaddr_t
xtalk_dmamap_addr(
	xtalk_dmamap_t \f2map\*(fT,
	iopaddr_t \f2addr\*(fT,
	size_t \f2size\*(fT);
.sp .8v
alenlist_t
xtalk_dmamap_list(
	xtalk_dmamap_t \f2map\*(fT,
	alenlist_t \f2list\*(fT,
	unsigned \f2flags\*(fT);
.sp .8v
void
xtalk_dmamap_done(xtalk_dmamap_t \f2xtalk_dmamap\*(fT)
.sp .8v
void
xtalk_dmamap_free(xtalk_dmamap_t \f2xtalk_dmamap\*(fT)
.sp .8v
void
xtalk_dmamap_drain(
	xtalk_dmamap_t *\f2xtalk_dmamap\*(fT)
.sp .8v
void
xtalk_dmaaddr_drain(
	vertex_hdl_t \f2vhdl\*(fT,
	paddr_t \f2addr\*(fT,
	size_t \f2bytes\*(fT)
.sp .8v
void
xtalk_dmalist_drain(
	vertex_hdl_t \f2vhdl\*(fT,
	alenlist_t *\f2list\*(fT)
.fi
.ft 1

.SS Arguments

.IP "\f2vhdl\f1" 8n
is the appropriate XIO connection point.
.IP "\f2desc\f1" 8n
is a device descriptor, usually zero.
.IP "\f2addr\f1" 8n
is the offset within the space.
.IP "\f2size\f1" 8n
is the size of the mapped region.
.IP "\f2list\f1" 8n
is an ordered list of address/length pairs.
.IP "\f2max\f1" 8n
is the maximum size mapped at any one time.
.IP "\f2flags\f1" 8n
is used to specify attributes of the mapping.

.SH DESCRIPTION

When a device driver wishes to use
Direct Memory Access (DMA) to communicate with
a device, the system needs to have a chance
to set up any appropriate mapping registers.
.P
There are two different models for how
to do this. The simple model provides
permanent mappings through fixed mapping
resources.
.IP \(bu 4n
.IR xtalk_dmatrans_addr ()
is the one-stop shopping place for
using system fixed shareable mapping resources
to construct an XIO DMA address that will land
the DMA requests at the targetted memory location.
This is not always possible, and when
it is not, the function will return NULL.
.IP \(bu 4n
.IR xtalk_dmatrans_list ()
is similar,
but operates on a list of blocks of memory
returning a list of blocks of XIO space.
.P
It is not always possible to establish
such mappings using common shared system
resources, so the concept of a DMA channel
that preallocates scarce mapping resources
is provided.
.P
Such channels are allocated using
.IR xtalk_dmamap_alloc (),
which is given the
maximum size to be mapped.
.IP \(bu 4n
.IR xtalk_dmamap_addr ()
or
.IR xtalk_dmamap_list ()
is then used to actually establish
the proper mappings for a DMA target;
given the base address and block size of the
region for DMA (or a list of these), it will hand back
the base XIO address to be used for accessing
that region (or a list of these).
.IP \(bu 4n
If the same DMA channel is to be used
at different times to map different
target areas,
.IR xtalk_dmamap_done ()
should be called to idle any mapping
hardware (and possibly flush out
any pipes or buffers along the path
that might do unexpected things when
mapping registers are modified).
Then
.IR xtalk_dmamap_addr ()
or
.IR xtalk_dmamap_list ()
can again be called,
specifying the new target area.
.P
When a driver is completely finished with
a DMA channel -- either because the channel
is used only for initialization of the
device, or because the device or the driver
is being shut down -- the DMA channel resources
should be released back to the system using
.IR xtalk_dmamap_free ().
.P
.IR xtalk_dmamap_drain (),
.IR xtalk_dmaaddr_drain ()
and
.IR xtalk_dmalist_drain ()
are used after a device reports it has
completed DMA, to be sure that all data
along the DMA path has in fact reached
its destination.

.SS "DMA Attribute Flags"

All functions
that have flag words can be asked
to set up or disable certain DMA
acceleration features of whatever
machine is in use.

.IP "\f4XTALK_INPLACE\f1" 8n
When list operations are performed,
this flag requests that the list be
modified in place.
If this flag is not specified, the
infrastructure will attempt to allocate
a new list for the result data,
which will take longer and may fail
but which will avoid modifying the
input list.
.IP "\f4XTALK_NOSLEEP\f1" 8n
If this flag is specified,
any resources that are needed from
the system are allocated without
sleeping. If any resource allocation
would have required the infrastructure
to sleep, the service call will return
a failure code.

.SS "Translation Results"

If the target of the DMA is not in fact memory,
the result of a translation may be a
.B packed
.B XIO
.BR address ,
which contains not only the usual 48-bit offset
in the target port, but the actual 4-bit
target XIO port number.
While this is likely to be a rare condition,
triggered only when code explicitly schedules
DMA to a destination that is memory-mapped from
another device,
it is advisable for all drivers calling
.IR xtalk_dma *()
services to check for and handle these packed addresses.
For more information, see
XIO_PACK(D3).

.SH EXAMPLES

Here is one way that a driver might make
use of dmamap and dmatrans calls.

.if t .ft 4
.nf
xiofoo_attach(vertex_hdl_t vhdl)
{
	xtalk_dmamap_t	command_map;
	iopaddr_t	command_dma;
	struct xiofoo_regs	*reg_pio;
	struct xiofoo_ring	*command_ring;

	...

	/*
	 * This driver has decided to use a dmamap
	 * to get to its command rings, which contain
	 * things like DMA addresses and counts.
	 */

	/* allocate the channel
	 */
	command_map = xtalk_dmamap_alloc
		(vhdl, 0, RINGBYTES, 0);

	command_dma = xtalk_dmamap_addr(
		command_map,
		kvtophys(command_ring),
		RINGBYTES);

	/* tell the device where it can find
	 * it's command rings.
	 */
	reg_pio->command_dma = command_dma;

	...
}

{
	caddr_t	data_buffer;
	size_t	data_size;

	...

	data_dma = xtalk_dmatrans_addr(vhdl, 0,
		kvtophys(data_buffer), data_size, 0);

	command_ring->data_dma_addr = data_dma;
	command_ring->data_dma_size = data_size;
	command_ring->ready = 1;
}
.fi
.ft 1

.\" .SH NOTES

.\" .SH FILES
.\" sample_xtalk.c

.SH "SEE ALSO"

XIO_PACK(D3),
xtalk(D3),
xtalk_error(D3),
xtalk_get(D3),
xtalk_intr(D3),
xtalk_pio(D3).

.SH DIAGNOSTICS

.IR xtalk_dmatrans_addr ()
will return XIO_NOWHERE if
shared (fixed) resources can not be
used to construct a valid XIO address
that maps to the desired
range of physical addresses.
.P
.IR xtalk_dmatrans_list ()
will return a null pointer if any
of the requested physical address
blocks can not be reached using
shared fixed resources, or if
unable to allocate a return list.
.P
.IR xtalk_dmamap_alloc ()
will return a null pointer if resources
can not be allocated to establish DMA
mappings of the requested size, or
if the parameters are inconsistant.
.P
.IR xtalk_dmamap_addr ()
will return a null pointer if the specified
target address can not be mapped using
the specified DMA channel; this would usually
be due to specifying a target block that is
outside the previously specified target area
or is larger than the previously specified
maximum mapping size.
It may also return a null pointer if the
DMA channel is currently in use and has
not been marked idle by a
.IR xtalk_dmamap_done ()
call.
.P
.IR xtalk_dmamap_addr ()
can return a null pointer for all the reasons
mentioned above, or if it is unable to allocate
the return list.
