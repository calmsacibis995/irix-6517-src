.TH vme_dma_engine 3X
.SH NAME
vme_dma_engine_handle_alloc, 
vme_dma_engine_buffer_alloc,
vme_dma_engine_buffer_vaddr_get,
vme_dma_engine_transfer_alloc, 
vme_dma_engine_schedule,
vme_dma_engine_commit, 
vme_dma_engine_rendezvous,
vme_dma_engine_transfer_free, 
vme_dma_engine_buffer_free,
vme_dma_engine_handle_free 
\- user-level access to VMEbus DMA engine
.\" **********************
.SH SYNOPSIS
.\" **********************
.nf
.ft 3
.B #include <vme_dma_engine.h>
.sp .8v
vme_dma_engine_handle_t vme_dma_engine_handle_alloc(char *pathname, 
                                                    unsigned int flags);
.sp .8v
vme_dma_engine_buffer_t
vme_dma_engine_buffer_alloc(vme_dma_engine_handle_t handle, 
                            void *addr, 
                            size_t byte_count);
.sp .8v
void *
vme_dma_engine_buffer_vaddr_get(vme_dma_engine_buffer_t handle);
.sp .8v
vme_dma_engine_transfer_t
vme_dma_engine_transfer_alloc(vme_dma_engine_handle_t handle,
                              vme_dma_engine_buffer_t buffer, 
                              iopaddr_t vmeaddr, 
                              size_t byte_count,
                              vme_dma_engine_dir_t direction,
                              vmeio_am_t am_code,
                              vme_dma_engine_throttle_t throttle,
                              vme_dma_engine_release_t release);
.sp .8v
int vme_dma_engine_schedule(vme_dma_engine_handle_t handle,
                            vme_dma_engine_transfer_t transfer);
.sp .8v
int vme_dma_engine_commit(vme_dma_engine_handle_t handle,
                          vme_dma_engine_commit_t commit_mode, 
                          vme_dma_engine_wait_t wait_mode);
.sp .8v
int vme_dma_engine_rendezvous(vme_dma_engine_handle_t handle,
                              vme_dma_engine_wait_t wait_mode);
.sp .8v
int vme_dma_engine_transfer_free(vme_dma_engine_handle_t handle,
                                 vme_dma_engine_transfer_t transfer);
.sp .8v
void vme_dma_engine_buffer_free(vme_dma_engine_handle_t handle,
                                vme_dma_engine_buffer_t buffer);
.sp .8v
void vme_dma_engine_handle_free(vme_dma_engine_handle_t handle);
.ft 1
.fi
.\" **********************
.SS Arguments
.\" **********************
.IP "\f2pathname\fP" 13n
The pathname of VMEbus DMA engine.
.IP "\f2flags\fP" 13n
Additional options that users can choose.
.IP "\f2handle\fP" 13n
The handle for the DMA engine.
.IP "\f2addr\fP" 13n
The address of the user space which holds the data from/for DMA.
.IP "\f2byte_count\fP" 13n
Number of bytes. 
.IP "\f2buffer"\fP" 13n
The handle for the DMA buffer in the user process.
.IP "\f2vmeaddr\fP" 13n
VMEbus address.
.IP "\f2direction\fP" 13n
The direction of the DMA transfer.
.IP "\f2am_code\fP" 13n
address modifier code.
.IP "\f2throttle\fP" 13n
The size of throttle.
.IP "\f2release\fP" 13n
The mode of releasing the VMEbus during the DMA transfer.
.IP "\f2transfer\fP" 13n
The handle for the DMA transfer.
.IP "\f2commit_mode\fP" 13n
The mode to commit the DMA.
.IP "\f2wait_mode\fP" 13n
The mode to wait for the DMA to finish.
.SH DESCRIPTION
These routines form the API for accessing the DMA engine on the VMEbus
service provider.  These routines are included in a program by
compiling with the
.I -ludma
option. Currently, the API is supported on Origin and Onyx2 systems.
.PP
.IR vme_dma_engine_handle_alloc()
allocates a handle of the DMA engine by the given pathname.  If users
specify VME_DMA_ENGINE_DEBUG in the 
.IR flags
field, more integrity checking will be done in the operations on the
DMA engine.  If the call is successful, the handle of the DMA engine
is returned.  Otherwise, 0 is returned. 
.PP
.IR vme_dma_engine_buffer_alloc()
allocates the host memory buffer according to the address and
byte_count pair.  If address is NULL, the library will get the
virtual address range for the user.  Otherwise, the library assumes
that the user has got the memory allocated.  The handle of the buffer
is returned if the call is successful.  Otherwise, 0 is returned. 
.PP
.IR vme_dma_engine_buffer_vaddr_get()
returns the virtual address in user address space from the handle
returned by 
.IR vme_dma_engine_buffer_alloc().
.IR vme_dma_engine_transfer_alloc()
allocates a transfer entity by the given parameters.  Some paramaters
must be specified, like the buffer handle, the VMEbus address, how
many bytes are going to be transferred, the VMEbus address space type,
and the direction of the transfer.  There're two advisory parameters,
the throttle size and the release mode.  There're sets of values
associated with each of the those parameters.  Users can submit their
preferences to the library.  They also could ask the library to use
the default values.  It's under the library's discretion to choose a
value by the given hardware and software constraints.  The handle of
the transfer is returned if successful, otherwise 0 is returned.
.PP
.IR vme_dma_engine_schedule()
schedules a transfer for the actual DMA action. This call provides the
user a way to schedule multiple transfers for one-time DMA action. 
Return 0 if successful, -1 if otherwise.
.PP
.IR vme_dma_engine_commit()
asks the library to commit all the transfers scheduled. Users can
choose which commitment mode would be used, synchronous or
asynchronous mode. If synchronous mode is used, the library will
return when the DMA is finished. In the synch mode, an advisory
parameter is also useful for the user to specify which way he likes to
wait here for the DMA to finish, spin-waiting or sleep-waiting. If
asynchronous mode is used, the library will return instantly.
.PP
.IR vme_dma_engine_rendezvous()
waits until all the scheduled transfers are finished, when the user
chose to do asynchronous transfer in the 
.IR vme_dma_engine_commit() 
call.  Here, users can also prefer to wait by spinning or sleeping.
.PP
.IR vme_dma_engine_transfer_free()
frees the transfer handle.
.PP
.IR vme_dma_engine_buffer_free()
frees the buffer handle.
.PP
.IR vme_dma_engine_handle_free()
frees the DMA engine handle. 
.PP
.\" **********************
.SH FILES
.\" **********************
/hw/vme/<bus_no>/dma_engine \- The pathname for DMA engine
.PP
/usr/lib/libudma.so - o32bit DSO for VMEbus user level DMA engine API
.PP
/usr/lib32/libudma.so - n32bit DSO for VMEbus user level DMA engine API
.PP
/usr/lib64/libudma.so - 64bit DSO for VMEbus user level DMA engine API.
.PP
.\" **********************
.SH NOTES
.\" **********************
This library is only provided as a 
.IR DSO.

