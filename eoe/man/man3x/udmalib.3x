'\"macro stdmacro
'\" udmalib.3 $Revision: 1.7 $
.nr X
.if \nX=0 .ds x} udmalib 3X "User-Level DMA Support" "\&"
.if \nX=1 .ds x} udmalib 3X "User-Level DMA Support"
.if \nX=2 .ds x} udmalib 3X "" "\&"
.if \nX=3 .ds x} udmalib "" "" "\&"
.TH \*(x}
.SH NAME
\f4udmalib\f2: \f4dma_open\f1, \f4dma_close\f1, \f4dma_allocbuf\f1, \f4dma_freebuf\f1, \f4dma_mkparms\f1, \f4dma_freeparms\f1, \f4dma_start\f1 \- user-level access to DMA hardware
.SH SYNOPSIS
.nf
\f4#include <udmalib.h>\f1
.LP
\f4udmaid_t \(**dma_open (int bus, int adap);\f1
\f4int dma_close (dmaid_t \(**dp);\f1
\f4void \(**dma_allocbuf (udmaid_t \(**dp, int size);\f1
\f4int dma_freebuf (udmaid_t \(**dp, void \(**bp);\f1
\f4udmaprm_t \(**dma_mkparms (udmaid_t \(**dp, void \(**dinfo, void \(**iobuf, int size);\f1
\f4int dma_freeparms (udmaid_t \(**dp, udmaprm_t \(**dparms);\f1
\f4int dma_start (udmaid_t \(**dp, void *busaddr, udmaprm_t \(**dparms);\f1
.SH DESCRIPTION
On Challenge and Onyx systems, 
These routines form the basis for a simplified interface to DMA engines,
.IR usrdma (7m)
devices.  These routines are included in a program by compiling with the
.I -ludma
option.
Currently, the only supported DMA engine is
for VME on the Challenge/Onyx series.  As DMA engines become available for
other hardware platforms, support will be provided through this interface.
.PP
An application would use the routines 
.IR dma_open
and 
.IR dma_close
to allocate and deallocate access to a DMA engine.  The parameters
.IR bus
and
.IR adap
are used to specify the type and adapter for the bus.  The type of bus is
specified with the bus definitions found in
.IR /usr/include/udmalib.h .
Currently, the only supported bus is
.IR DMA_VMEBUS .
The adapter number is used to identify which bus for the case when multiple
busses of a particular type are available.  This is equivalent to the
.IR adapter=
field of the
.IR VECTOR
line. See
.IR system (4) .
.IR dma_open
returns an opaque handle used by the remaining routines.  This routine
may fail if a DMA engine does not exist, is in use, or the 
.IR usrdma (7m) 
special devices are missing.
.IR dma_open
returns 
.IR NULL 
upon error.
.IR dma_close
returns a non-zero value upon error.  Note:  The allocated DMA buffers 
associated with the
.IR dmaid_t
must be deallocated before
.IR dma_close
can be called or it will fail.
.PP
The routines
.IR dma_allocbuf 
and
.IR dma_freebuf
are used to allocate and free up special buffers that will be used for
the DMA operations.  DMA operations can only take place to these special
buffers, since the buffers need to be locked down and mapped.
The 
.IR size
specifier is a byte count.  It will be rounded up to the nearest multiple
of the system page size.  The buffer space returned from such an allocation
can be divided up into many smaller buffers, depending upon the needs of
the program.  The page size of the system can be determined by calling
.IR getpagesize (2) .
.IR dma_allocbuf
returns 
.IR NULL 
upon error.
.IR dma_freebuf
returns a non-zero value upon error.
.PP
The routines
.IR dma_mkparms
and
.IR dma_freeparms
are used to create and free up bus-specific and buffer related parameters 
necessary to perform the DMA operation.  The argument
.IR dinfo
is a bus-specific data structure defined in the header file
.IR udmalib.h .
For VME, this would be the
.IR vmeparms_t
structure.  The argument
.IR iobuf
and 
.IR size
specifies the DMA buffer to use and the byte count of the DMA operation.
.IR dma_mkparms
returns a pointer to a
.IR udmaprm_t 
structure.  This is an opaque handle that defines the DMA operation and
is passed into
.IR dma_start ,
and
.IR dma_freeparms .
If a buffer is to be both read and written, a separate DMA parameter
must be set up for each direction.  Note:
.IR udmaprm_t
pointers should not be used after the corresponding DMA buffer has been
freed up.  This may result in a system panic.
This routine may fail if the specified buffer has been freed or the DMA
operation fails basic range checking.  This routine may also fail if the
combination of bus-specific parameters does not make sense.
.IR dma_mkparms
returns 
.IR NULL 
upon error.
.IR dma_freeparms
returns a non-zero value upon error.
.PP
The last routine
.IR dma_start
programs the DMA engine, starts it up, and returns when the DMA has completed.
This routine is passed a 
.IR udmaprm_t
pointer, which specifies the buffer, size of the DMA, direction of the DMA
to or from the buffer, and bus-specific information.  This routine is
also passed the
.IR busaddr,
the bus address of the device that is involved in the DMA operation.
.IR dma_start
returns a non-zero value upon error.
.SH FILES
\f4/dev/vme/dma\(**\fP
.br
\f4/usr/lib/libudma.so\fP
.SH "SEE ALSO"
\f4MAKEDEV\fP(1M)
.br
\f4vme_dma_engine\f1(3X) for Origin and Onyx2 VME option.
.SH NOTES
This library is only provided as a
.IR DSO .
