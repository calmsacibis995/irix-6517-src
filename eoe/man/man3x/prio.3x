'\"!tbl|mmdoc
'\"macro stdmacro
.TH prioSetBandwidth 3X
.SH NAME
prio: prioSetBandwidth, prioGetBandwidth, 
prioLock, prioUnlock \- Priority IO operations.
.SH SYNOPSIS
.nf
.PP
\f4#include <sys/prio.h>\f1
.PP
\f4int prioSetBandwidth (int fd, enum prioAllocateType_e mode, 
 	bandwidth_t bytesec, pid_t *lock_holder);\f1
.PP
\f4int prioGetBandwidth(inf fd, bandwidth_t *read_bytesec, 
	bandwidth_t *write_bytesec);\f1
.PP
\f4int prioLock (pid_t *lock_holder);\f1
.PP
\f4int prioUnlock();\f1
.SH DESCRIPTION
.B prioSetBandwidth 
tries to allocate bandwidth:
.IR bytesec
in bytes per second on a file descriptor 
.IR fd.
.IR mode
specifies the allocation direction, which can be one of PRIO_READ_ALLOCATE,
PRIO_WRITE_ALLOCATE, PRIO_READWRITE_ALLOCATE. The allocation mode must match
the file opening mode. If a read direction allocation is requested, the 
file must have been opened for read; if a write direction allocation is
requested, the file must have been opened for write. Otherwise, 
.B prioSetBandwidth
will fail.
.PP
If another process holds the global lock for bandwidth allocation,
.B prioSetBandwidth 
will fail and 
.I lock_holder 
will have the process id of the process which is holding the lock.
.PP
On success, the actually allocated bandwidth would be more than or equal
to the requested bandwidth because the underlying hardware manages 
bandwidth allocation on cache line size transfers. Partial line transfers
requires the system to adjust upwards to meet the request.
.PP
.B prioGetBandwidth
obtains bandwidth allocation on file descriptor 
.I fd.
.I read_bytesec
and
.I write_bytesec
have bandwidth in bytes per second in read and write direction, respectively.
.PP
Some applications may want to do a set of allocation/reallocation
of bandwidth without other applications' interference. A system 
global lock is provided to support this multi-step reallocation.
The application acquires the lock through 
.B prioLock.
The application that holds the lock can raise or lower current allocations 
as well as request new allocations without dealing with concurrent
bandwidth allocations from another application. At the end of the allocation
sequence, the lock must be released with the 
.B prioUnlock
call. When an application is holding the lock, 
.B prioSetBandwidth 
in other applications will fail.
.PP
When 
.B prioLock
fails because another application is holding the lock, 
.I lock_holder
has the process ID of the application.
.PP
When a process that holds the lock dies for some reason before it calls
.B prioUnlock
, the system will release the lock.
.SH NOTE
It is not required for an application to call 
.B prioLock 
before it requests bandwidth allocation.
.PP
The application should be compiled with -lprio option.
.PP
In IRIX 6.5, the Priority I/O APIs have been merged with the GRIO APIs. As
a result, the use of the Priority I/O APIs is deprecated. For backwards
compatibility,
.B prioSetBandwidth
and
.B prioGetBandwidth
are still supported.
.B prioLock
and
.B prioUnlock
are merely stubs. No locking or atomicity is guaranteed. Please refer to
grio(5) for further details.
.SH DIAGNOSTICS
On successful completion of all these functions, a zero is returned 
indicating that the request
has been granted. If the request cannot be granted, a -1 is 
returned and errno is set to the appropriate value.
.TP 10
[ENOPKG]
Bandwidth allocation is not supported on this system.
.TP 10
[E2BIG]
Bandwidth allocation failed because not enough bandwidth is available.
.TP 10
[EBADFD]
File descriptor is invalid.
.TP 10
[EINVAL]
One or more parameters are invalid.
.TP 10
[ENOLCK]
Another application is holding the lock.
.SH SEE ALSO
prio(5),
prioinfo(1),
grio(5)
