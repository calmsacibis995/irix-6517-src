'\"macro stdmacro
.nr X
.if \nX=0 .ds x} ABILOCK 3X "Specialized Libraries" "\&"
.if \nX=1 .ds x} ABILOCK 3X "Specialized Libraries"
.if \nX=2 .ds x} ABILOCK 3X "" "\&"
.if \nX=3 .ds x} ABILOCK "" "" "\&"
.TH \*(x}
.SH NAME
init_lock, acquire_lock, release_lock, stat_lock, spin_lock \- ABI mutual exclusion primitives
.SH SYNOPSIS
.nf
.B #include <abi_mutex.h>
.PP
.B "int init_lock(abilock_t *lck);"
.PP
.B "int acquire_lock(abilock_t *lck);"
.PP
.B "int release_lock(abilock_t *lck);"
.PP
.B "int stat_lock(abilock_t *lck);"
.PP
.B "void spin_lock(abilock_t *lck);"
.SH DESCRIPTION
These routines provide a simple, standard interface to base level
mutual exclusion primitives.
They are found in the library ``libmutex.so'', and
is loaded if the option ``\-lmutex'' is used
with 
.IR cc (1)
or
.IR ld (1).
.PP
The parameter \f3lck\fP must point to memory shared by all processes
wishing to acquire or test the lock.
.PP
The contents of the structure \f3abilock_t\fP are as follows:
.DS
.nf
	typedef struct {
		unsigned int abi_lock;
	} abilock_t;
.fi
.DE
.PP
The function \f4init_lock\fP must be called on a lock before any
of the other functions.
It initializes the lock to an unlocked state.
A non-zero return status will indicate an error.
.PP
\f4acquire_lock\fP tries once to acquire the lock referenced by \f3lck\fP.
It returns zero if the lock was acquired, otherwise non-zero.
\f4acquire_lock\fP can always fail, even if it is known that the
lock is free and there is only one process, this implies that
\f4acquire_lock\fP should always be called in a loop.
.PP
\f4spin_lock\fP will always acquire the lock. If the lock is not immediately
available, the calling process will either spin (busy-wait) or be suspended
until the lock becomes available.
There is no implied policy as to which (if there is more than one) waiting
process will be granted the lock.
.PP
\f4stat_lock\fP returns the current state of the lock referenced by \f3lck\fP
without attempting to acquire the lock.
It returns \f4UNLOCKED\fP if the lock is free, otherwise \f4LOCKED\fP.
.PP
\f4release_lock\fP unconditionally releases the lock pointed to by \f3lck\fP.
The ability for one process to release the lock of another process is
permitted.
A non-zero return status will indicate an error.
.PP
These routines will work for locks shared between 32-bit and 64-bit user
programs.
.SH SEE ALSO
\f4nanosleep\fP(2),
\f4sginap\fP(2),
\f4usinit\fP(3P).
.SH DIAGNOSTICS
.BR init_lock\^ ,
.BR acquire_lock\^ ,
and
.B release_lock\^
return 0 if the operation was a success, otherwise a non-zero value.
.B spin_lock
returns no value.
.SH WARNINGS
.PP
No locks are ever freed automatically by the system.
Locks acquired by a process that terminates remain locked.
.PP
Since looping is necessary when attempting to acquire a lock using
\f4acquire_lock\fP, the user process could find itself in a long
busy-wait loop.
To avoid wasting CPU cycles, programs should implement some kind of
back-off strategy, perhaps calling \f4sginap\fP(2) or \f4nanosleep\fP(2)
after some number of unsuccessful calls to \f4acquire_lock\fP.
.PP
Even though \f4stat_lock\fP returns status indicating that the lock
is available, a call to \f4acquire_lock\fP could still fail.
