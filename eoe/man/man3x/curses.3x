'\"! tbl | mmdoc
'\"macro stdmacro
.if n .pH g3x.curses @(#)curses	41.7 of 5/26/91
.\" Copyright 1991 UNIX System Laboratories, Inc.
.\" Copyright 1989, 1990 AT&T
.nr X
.if \nX=0 .ds x} curses 3X "Terminal Information Utilities" "\&"
.if \nX=1 .ds x} curses 3X "Terminal Information Utilities"
.if \nX=2 .ds x} curses 3X "" "\&"
.if \nX=3 .ds x} curses "" "" "\&"
.TH \*(x}
'\" ident	"@(#)svid_ti:ti_env/curses	1.6"
.if n .pH ti_lib.curses @(#)curses	30.1
.\" Copyright 1991 UNIX System Laboratories, Inc.
.SH NAME
\f4curses\fP \- CRT screen handling and optimization package
.SH SYNOPSIS
.ft 4
#include <curses.h>
.ft 1
.SH DESCRIPTION
The \f4curses\f1 library routines give the user a terminal-independent
method of updating character screens with reasonable optimization.
A program using these routines must be compiled with
the \f4\-lcurses\f1 option of \f4cc\f1.
.P
The \f4curses\fP package allows:  overall screen, window and pad manipulation;
output to windows and pads; reading terminal input; control over terminal
and \f4curses\fP input and output options; environment query routines;
color manipulation; use of soft label keys; terminfo access; and
access to low-level \f4curses\fP routines.
.P
To initialize the routines, the routine \f4initscr\f1 or \f4newterm\f1
must be called before any of the other routines that deal with windows
and screens are used.
The routine \f4endwin\f1 must be called before exiting.
To get character-at-a-time input without echoing
(most interactive, screen-oriented programs want this),
the following sequence should be used:
.P
.RS
\f4initscr,cbreak,noecho;\f1
.RE
.P
Most programs would additionally use the sequence:
.P
.RS
\f4nonl,intrflush(stdscr,FALSE),keypad(stdscr,TRUE);\f1
.RE
.P
Before a \f4curses\fP program is run, the tab stops of the terminal should be set
and its initialization strings, if defined, must be output.
This can be done by executing the \f4tput init\f1
command after the shell environment variable \f4TERM\f1 
has been exported.
[See \f4terminfo\fP(4) for further details.]
.P
The \f4curses\fP library permits manipulation of data structures,
called \f2windows\f1,
which can be thought of as two-dimensional arrays of characters.
A default window called \f(CWstdscr\f1,
which is the size of the terminal screen, is supplied.
Others may be created with \f(CWnewwin()\f1.
.PP
Windows are referred to by variables declared as \f(CWWINDOW *\f1.
These data structures are manipulated with routines described on 3X
pages (whose names begin ``\f4curs_\fP'').
Among the most basic routines are \f(CWmove\f1 and \f(CWaddch\f1.
More general versions of these routines are included that
allow the user to specify a window.
.PP
After using routines to manipulate a window, \f(CWrefresh\f1 is called,
telling \f4curses\fP to make the user's CRT screen look like \f(CWstdscr\f1.
The characters in a window are actually of type \f(CWchtype\f1
(character and attribute data) so that other information about the
character may also be stored with each character.
.P
Special windows called \f2pads\f1 may also be manipulated.
These are windows that are not necessarily associated with a viewable
part of the screen.
See \f4curs_pad\fP(3X) for more information.
.P
In addition to drawing characters on the screen, video attributes and colors
may be included, causing the characters to show up in such
modes as underlined, reverse video or color on terminals that support
such display enhancements.
Line drawing characters may be specified to be output.
On input, \f4curses\fP is also able to translate arrow and function
keys that transmit escape sequences into single values.
The video attributes, line drawing characters and input values use names,
defined in \f(CW<curses.h>\f1, 
such as \f(CWA_REVERSE\f1, \f(CWACS_HLINE\f1, and \f(CWKEY_LEFT\f1.
.P
If the environment variables \f(CWLINES\f1 and \f(CWCOLUMNS\f1 are set,
or if the program is executing in a window environment, line and column
information in the environment will override information read by
\f4terminfo\f1.
This would affect a program running in an AT&T 630 layer, for example, where
the size of a screen is changeable.
.P
If the environment variable \f(CWTERMINFO\f1 is defined, any program
using \f4curses\fP checks for a local terminal definition before
checking in the standard place.
For example, if \f(CWTERM\fP is set to \f(CWatt4424\f1,
then the compiled terminal definition is found in
.P
.RS
\f(CW/usr/share/lib/terminfo/a/att4424\f1.
.RE
.P
(The \f(CWa\fP is copied from the first letter
of \f(CWatt4424\fP to avoid creation of huge directories.)
However, if \f(CWTERMINFO\f1 is set to \f(CW$HOME/myterms\f1, \f4curses\fP
first checks
.P
.RS
\f(CW$HOME/myterms/a/att4424\f1,
.RE
.P
and if that fails, it then checks
.P
.RS
\f(CW/usr/share/lib/terminfo/a/att4424\f1.
.RE
.P
This is useful for developing experimental definitions or
when write permission in \f(CW/usr/share/lib/terminfo\f1 is not available.
.P
The integer variables \f(CWLINES\f1 and \f(CWCOLS\f1 are defined in
\f(CW<curses.h>\f1
and will be filled in by \f(CWinitscr\f1 with the size of the screen.
The constants \f(CWTRUE\f1 and \f(CWFALSE\f1 have the values
\f(CW1\f1 and \f(CW0\f1, respectively.
.P
\f4curses\fP routines also define the \f(CWWINDOW *\f1 variable \f(CWcurscr\f1
which is used for certain low-level operations like clearing and
redrawing a screen containing garbage.
\f(CWcurscr\f1 can be used in only a few routines.
.\" USO Pacific ADDITION
.SS International Functions
The number of bytes and the number of columns
to hold a character from the supplementary character set
is locale-specific (locale category \f4LC_CTYPE\fP)
and can be specified in the character class table.
.P
For editing,
operating at the character level is entirely appropriate.
For screen formatting,
arbitrary movement of characters on screen is not desirable.
.P
Overwriting characters (\f4addch\fP, for example) operates on a screen level.
Overwriting a character by a character
that requires a different number of columns may produce \f2orphaned columns\fP.
These orphaned columns are filled with background characters.
.P
Inserting characters (\f4insch\fP, for example) operates on a character level
(that is, at the character boundaries).
The specified character is inserted right before the character,
regardless of which column of a character the cursor points to.
Before insertion,
the cursor position is adjusted to the first column of the character.
.P
As with inserting characters,
deleting characters (\f4delch\fP, for example) operates on a character level
(that is, at the character boundaries).
The character at the cursor is deleted whichever column of the character
the cursor points to.
Before deletion,
the cursor position is adjusted to the first column of the character.
.P
A \f2multi-column\fP character cannot be put on the last column of a line.
When such attempts are made,
the last column is set to the background character.
In addition, when such an operation creates orphaned columns,
the orphaned columns are filled with background characters.
.P
Overlapping and overwriting a window
follows the operation of overwriting characters around its edge.
The orphaned columns, if any,
are handled as in the character operations.
.P
The cursor is allowed to be placed anywhere in a window.
If the insertion or deletion is made when
the cursor points to the second or later column position of a character
that holds multiple columns,
the cursor is adjusted to the first column of the character
before the insertion or deletion.
.\" END OF USO Pacific ADDITION
.SS Routine and Argument Names
Many \f4curses\f1 routines have two or more versions.
Routines prefixed with \f(CWp\f1 require a pad argument.
Routines whose names contain a \f4w\f1 generally require either
a window argument or a wide-character argument.
If \f4w\f1 appears twice in a routine name, the routine
usually requires both a window and a wide-character argument.
Routines that do not require a pad or window argument
generally use \f(CWstdscr\f1.
.P
The routines prefixed with \f(CWmv\f1 require an \f2x\f1 and \f2y\f1
coordinate to move to before performing the appropriate action.
The \f(CWmv\f1 routines imply a call to \f(CWmove\f1
before the call to the other routine.
The coordinate \f2y\f1 always refers to the row (of the window),
and \f2x\f1 always refers to the column.
The upper left-hand corner is always (0,0), not (1,1).
.P
The routines prefixed with \f(CWmvw\f1 take both a
window argument and \f2x\f1 and \f2y\f1 coordinates.
The window argument is always specified before the coordinates.
.P
In each case, \f2win\f1 is the window affected, and \f2pad\f1
is the pad affected;
\f2win\f1 and \f2pad\f1 are always pointers to type \f(CWWINDOW\f1.
.PP
Option setting routines require a Boolean flag \f2bf\f1
with the value \f(CWTRUE\f1 or \f(CWFALSE\f1;
\f2bf\f1 is always of type \f(CWbool\f1.
The variables \f2ch\f1 and \f2attrs\f1 are always of type
\f(CWchtype\f1.
The types \f(CWWINDOW\f1, \f(CWSCREEN\fP, \f(CWbool\f1, and \f(CWchtype\f1
are defined in \f(CW<curses.h>\f1.
The type \f(CWTERMINAL\fP is defined in \f(CW<term.h>\fP.
All other arguments are integers.
.SS Routine Name Index
The following table lists each CURSES routine and the name of the
manual page on which it is described.
.TS H
l l
lfCWw(2i) lfCWw(2i).
curses Routine Name	Manual Page Name
.sp 0.5
_
.TH
addch	curs_addch(3X)
addchnstr	curs_addchstr(3X)
addchstr	curs_addchstr(3X)
addnstr	curs_addstr(3X)
addnwstr	curs_addwstr(3X)
addstr	curs_addstr(3X)
addwch	curs_addwch(3X)
addwchnstr	curs_addwchstr(3X)
addwchstr	curs_addwchstr(3X)
addwstr	curs_addwstr(3X)
attroff	curs_attr(3X)
attron	curs_attr(3X)
attrset	curs_attr(3X)
baudrate	curs_termattrs(3X)
beep	curs_beep(3X)
bkgd	curs_bkgd(3X)
bkgdset	curs_bkgd(3X)
border	curs_border(3X)
box	curs_border(3X)
can_change_color	curs_color(3X)
cbreak	curs_inopts(3X)
clear	curs_clear(3X)
clearok	curs_outopts(3X)
clrtobot	curs_clear(3X)
clrtoeol	curs_clear(3X)
color_content	curs_color(3X)
copywin	curs_overlay(3X)
curs_set	curs_kernel(3X)
def_prog_mode	curs_kernel(3X)
def_shell_mode	curs_kernel(3X)
del_curterm	curs_terminfo(3X)
delay_output	curs_util(3X)
delch	curs_delch(3X)
deleteln	curs_deleteln(3X)
delscreen	curs_initscr(3X)
delwin	curs_window(3X)
derwin	curs_window(3X)
doupdate	curs_refresh(3X)
draino	curs_util(3X)
dupwin	curs_window(3X)
echo	curs_inopts(3X)
echochar	curs_addch(3X)
echowchar	curs_addwch(3X)
endwin	curs_initscr(3X)
erase	curs_clear(3X)
erasechar	curs_termattrs(3X)
filter	curs_util(3X)
flash	curs_beep(3X)
flushinp	curs_util(3X)
getbegyx	curs_getyx(3X)
getch	curs_getch(3X)
getmaxyx	curs_getyx(3X)
getnwstr	curs_getwstr(3X)
getparyx	curs_getyx(3X)
getstr	curs_getstr(3X)
getsyx	curs_kernel(3X)
getwch	curs_getwch(3X)
getwin	curs_util(3X)
getwstr	curs_getwstr(3X)
getyx	curs_getyx(3X)
halfdelay	curs_inopts(3X)
has_colors	curs_color(3X)
has_ic	curs_termattrs(3X)
has_il	curs_termattrs(3X)
hline	curs_border(3X)
idcok	curs_outopts(3X)
idlok	curs_outopts(3X)
immedok	curs_outopts(3X)
inch	curs_inch(3X)
inchnstr	curs_inchstr(3X)
inchstr	curs_inchstr(3X)
init_color	curs_color(3X)
init_pair	curs_color(3X)
initscr	curs_initscr(3X)
innstr	curs_instr(3X)
innwstr	curs_inwstr(3X)
insch	curs_insch(3X)
insdelln	curs_deleteln(3X)
insertln	curs_deleteln(3X)
insnstr	curs_insstr(3X)
insnwstr	curs_inswstr(3X)
insstr	curs_insstr(3X)
instr	curs_instr(3X)
inswch	curs_inswch(3X)
inswstr	curs_inswstr(3X)
intrflush	curs_inopts(3X)
inwch	curs_inwch(3X)
inwchnstr	curs_inwchstr(3X)
inwchstr	curs_inwchstr(3X)
inwstr	curs_inwstr(3X)
is_linetouched	curs_touch(3X)
is_wintouched	curs_touch(3X)
isendwin	curs_initscr(3X)
keyname	curs_util(3X)
keypad	curs_inopts(3X)
killchar	curs_termattrs(3X)
leaveok	curs_outopts(3X)
longname	curs_termattrs(3X)
meta	curs_inopts(3X)
move	curs_move(3X)
mvaddch	curs_addch(3X)
mvaddchnstr	curs_addchstr(3X)
mvaddchstr	curs_addchstr(3X)
mvaddnstr	curs_addstr(3X)
mvaddnwstr	curs_addwstr(3X)
mvaddstr	curs_addstr(3X)
mvaddwch	curs_addwch(3X)
mvaddwchnstr	curs_addwchstr(3X)
mvaddwchstr	curs_addwchstr(3X)
mvaddwstr	curs_addwstr(3X)
mvcur	curs_terminfo(3X)
mvdelch	curs_delch(3X)
mvderwin	curs_window(3X)
mvgetch	curs_getch(3X)
mvgetnwstr	curs_getwstr(3X)
mvgetstr	curs_getstr(3X)
mvgetwch	curs_getwch(3X)
mvgetwstr	curs_getwstr(3X)
mvinch	curs_inch(3X)
mvinchnstr	curs_inchstr(3X)
mvinchstr	curs_inchstr(3X)
mvinnstr	curs_instr(3X)
mvinnwstr	curs_inwstr(3X)
mvinsch	curs_insch(3X)
mvinsnstr	curs_insstr(3X)
mvinsnwstr	curs_inswstr(3X)
mvinsstr	curs_insstr(3X)
mvinstr	curs_instr(3X)
mvinswch	curs_inswch(3X)
mvinswstr	curs_inswstr(3X)
mvinwch	curs_inwch(3X)
mvinwchnstr	curs_inwchstr(3X)
mvinwchstr	curs_inwchstr(3X)
mvinwstr	curs_inwstr(3X)
mvprintw	curs_printw(3X)
mvscanw	curs_scanw(3X)
mvwaddch	curs_addch(3X)
mvwaddchnstr	curs_addchstr(3X)
mvwaddchstr	curs_addchstr(3X)
mvwaddnstr	curs_addstr(3X)
mvwaddnwstr	curs_addwstr(3X)
mvwaddstr	curs_addstr(3X)
mvwaddwch	curs_addwch(3X)
mvwaddwchnstr	curs_addwchstr(3X)
mvwaddwchstr	curs_addwchstr(3X)
mvwaddwstr	curs_addwstr(3X)
mvwdelch	curs_delch(3X)
mvwgetch	curs_getch(3X)
mvwgetnwstr	curs_getwstr(3X)
mvwgetstr	curs_getstr(3X)
mvwgetwch	curs_getwch(3X)
mvwgetwstr	curs_getwstr(3X)
mvwin	curs_window(3X)
mvwinch	curs_inch(3X)
mvwinchnstr	curs_inchstr(3X)
mvwinchstr	curs_inchstr(3X)
mvwinnstr	curs_instr(3X)
mvwinnwstr	curs_inwstr(3X)
mvwinsch	curs_insch(3X)
mvwinsnstr	curs_insstr(3X)
mvwinsstr	curs_insstr(3X)
mvwinstr	curs_instr(3X)
mvwinswch	curs_inswch(3X)
mvwinswstr	curs_inswstr(3X)
mvwinwch	curs_inwch(3X)
mvwinwchnstr	curs_inwchstr(3X)
mvwinwchstr	curs_inwchstr(3X)
mvwinwstr	curs_inwstr(3X)
mvwprintw	curs_printw(3X)
mvwscanw	curs_scanw(3X)
napms	curs_kernel(3X)
newpad	curs_pad(3X)
newterm	curs_initscr(3X)
newwin	curs_window(3X)
nl	curs_outopts(3X)
nocbreak	curs_inopts(3X)
nodelay	curs_inopts(3X)
noecho	curs_inopts(3X)
nonl	curs_outopts(3X)
noqiflush	curs_inopts(3X)
noraw	curs_inopts(3X)
notimeout	curs_inopts(3X)
overlay	curs_overlay(3X)
overwrite	curs_overlay(3X)
pair_content	curs_color(3X)
pechochar	curs_pad(3X)
pechowchar	curs_pad(3X)
pnoutrefresh	curs_pad(3X)
prefresh	curs_pad(3X)
printw	curs_printw(3X)
putp	curs_terminfo(3X)
putwin	curs_util(3X)
qiflush	curs_inopts(3X)
raw	curs_inopts(3X)
redrawwin	curs_refresh(3X)
refresh	curs_refresh(3X)
reset_prog_mode	curs_kernel(3X)
reset_shell_mode	curs_kernel(3X)
resetty	curs_kernel(3X)
restartterm	curs_terminfo(3X)
ripoffline	curs_kernel(3X)
savetty	curs_kernel(3X)
scanw	curs_scanw(3X)
scr_dump	curs_scr_dump(3X)
scr_init	curs_scr_dump(3X)
scr_restore	curs_scr_dump(3X)
scr_set	curs_scr_dump(3X)
scrl	curs_scroll(3X)
scroll	curs_scroll(3X)
scrollok	curs_outopts(3X)
set_curterm	curs_terminfo(3X)
set_term	curs_initscr(3X)
setscrreg	curs_outopts(3X)
setsyx	curs_kernel(3X)
setterm	curs_terminfo(3X)
setupterm	curs_terminfo(3X)
slk_attroff	curs_slk(3X)
slk_attron	curs_slk(3X)
slk_attrset	curs_slk(3X)
slk_clear	curs_slk(3X)
slk_init	curs_slk(3X)
slk_label	curs_slk(3X)
slk_noutrefresh	curs_slk(3X)
slk_refresh	curs_slk(3X)
slk_restore	curs_slk(3X)
slk_set	curs_slk(3X)
slk_touch	curs_slk(3X)
standend	curs_attr(3X)
standout	curs_attr(3X)
start_color	curs_color(3X)
subpad	curs_pad(3X)
subwin	curs_window(3X)
syncok	curs_window(3X)
termattrs	curs_termattrs(3X)
termname	curs_termattrs(3X)
tgetent	curs_termcap(3X)
tgetflag	curs_termcap(3X)
tgetnum	curs_termcap(3X)
tgetstr	curs_termcap(3X)
tgoto	curs_termcap(3X)
tigetflag	curs_terminfo(3X)
tigetnum	curs_terminfo(3X)
tigetstr	curs_terminfo(3X)
timeout	curs_inopts(3X)
touchline	curs_touch(3X)
touchwin	curs_touch(3X)
tparm	curs_terminfo(3X)
tputs	curs_termcap(3X)
tputs	curs_terminfo(3X)
typeahead	curs_inopts(3X)
unctrl	curs_util(3X)
ungetch	curs_getch(3X)
ungetwch	curs_getwch(3X)
untouchwin	curs_touch(3X)
use_env	curs_util(3X)
vidattr	curs_terminfo(3X)
vidputs	curs_terminfo(3X)
vline	curs_border(3X)
vwprintw	curs_printw(3X)
vwscanw	curs_scanw(3X)
waddch	curs_addch(3X)
waddchnstr	curs_addchstr(3X)
waddchstr	curs_addchstr(3X)
waddnstr	curs_addstr(3X)
waddnwstr	curs_addwstr(3X)
waddstr	curs_addstr(3X)
waddwch	curs_addwch(3X)
waddwchnstr	curs_addwchstr(3X)
waddwchstr	curs_addwchstr(3X)
waddwstr	curs_addwstr(3X)
wattroff	curs_attr(3X)
wattron	curs_attr(3X)
wattrset	curs_attr(3X)
wbkgd	curs_bkgd(3X)
wbkgdset	curs_bkgd(3X)
wborder	curs_border(3X)
wclear	curs_clear(3X)
wclrtobot	curs_clear(3X)
wclrtoeol	curs_clear(3X)
wcursyncup	curs_window(3X)
wdelch	curs_delch(3X)
wdeleteln	curs_deleteln(3X)
wechochar	curs_addch(3X)
wechowchar	curs_addwch(3X)
werase	curs_clear(3X)
wgetch	curs_getch(3X)
wgetnstr	curs_getstr(3X)
wgetnwstr	curs_getwstr(3X)
wgetstr	curs_getstr(3X)
wgetwch	curs_getwch(3X)
wgetwstr	curs_getwstr(3X)
whline	curs_border(3X)
winch	curs_inch(3X)
winchnstr	curs_inchstr(3X)
winchstr	curs_inchstr(3X)
winnstr	curs_instr(3X)
winnwstr	curs_inwstr(3X)
winsch	curs_insch(3X)
winsdelln	curs_deleteln(3X)
winsertln	curs_deleteln(3X)
winsnstr	curs_insstr(3X)
winsnwstr	curs_inswstr(3X)
winsstr	curs_insstr(3X)
winstr	curs_instr(3X)
winswch	curs_inswch(3X)
winswstr	curs_inswstr(3X)
winwch	curs_inwch(3X)
winwchnstr	curs_inwchstr(3X)
winwchstr	curs_inwchstr(3X)
winwstr	curs_inwstr(3X)
wmove	curs_move(3X)
wnoutrefresh	curs_refresh(3X)
wprintw	curs_printw(3X)
wredrawln	curs_refresh(3X)
wrefresh	curs_refresh(3X)
wscanw	curs_scanw(3X)
wscrl	curs_scroll(3X)
wsetscrreg	curs_outopts(3X)
wstandend	curs_attr(3X)
wstandout	curs_attr(3X)
wsyncdown	curs_window(3X)
wsyncup	curs_window(3X)
wtimeout	curs_inopts(3X)
wtouchln	curs_touch(3X)
wvline	curs_border(3X)
.TE
.SH RETURN VALUE
Routines that return an integer return \f(CWERR\f1 upon
failure and an integer value other than \f(CWERR\f1
upon successful completion,
unless otherwise noted in the routine descriptions.
.P
All macros return the value of the window version,
except \f(CWsetscrreg\f1, \f(CWwsetscrreg\f1,
\f(CWgetyx\f1, \f(CWgetbegyx\f1 and \f(CWgetmaxyx\f1.
The return values of \f(CWsetscrreg\f1, \f(CWwsetscrreg\f1,
\f(CWgetyx\f1, \f(CWgetbegyx\f1 and \f(CWgetmaxyx\f1
are undefined (i.e., these should not be used as the
right-hand side of assignment statements).
.P
Routines that return pointers return \f(CWNULL\f1 on error.
.SH NOTES
The header file \f(CW<curses.h>\f1 automatically includes the header files
\f(CW<stdio.h>\f1 and \f(CW<unctrl.h>\f1.
.SH SEE ALSO
\f4terminfo\fP(4) and 3X pages whose names begin ``\f4curs_\fP'' for
detailed routine descriptions.
